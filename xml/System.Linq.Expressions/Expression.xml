<Type Name="Expression" FullName="System.Linq.Expressions.Expression">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc5fc73f4d181f975b2a4702ba91f867a8124526" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class Expression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Expression extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Expression" />
  <TypeSignature Language="C++ CLI" Value="public ref class Expression abstract" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="d5b6d-101">式ツリー ノードを表すクラスの派生元の基底クラスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d5b6d-101">Provides the base class from which the classes that represent expression tree nodes are derived.</span>
      </span>
      <span data-ttu-id="d5b6d-102">さまざまなノード型を作成する <see langword="static" /> (Visual Basic では <see langword="Shared" />) ファクトリ メソッドも含まれています。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d5b6d-102">It also contains <see langword="static" /> (<see langword="Shared" /> in Visual Basic) factory methods to create the various node types.</span>
      </span>
      <span data-ttu-id="d5b6d-103">これは <see langword="abstract" /> クラスです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="d5b6d-103">This is an <see langword="abstract" /> class.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-104">次のコード例では、ブロックの式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-104">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="d5b6d-105">ブロックの式は、2 つの<xref:System.Linq.Expressions.MethodCallExpression>オブジェクトと 1 つ<xref:System.Linq.Expressions.ConstantExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-105">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-106">
            <see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-106">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-107">
            <see cref="T:System.Linq.Expressions.Expression" /> の新しいインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-107">Constructs a new instance of <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Expression (System.Linq.Expressions.ExpressionType nodeType, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(valuetype System.Linq.Expressions.ExpressionType nodeType, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.#ctor(System.Linq.Expressions.ExpressionType,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Expression(System::Linq::Expressions::ExpressionType nodeType, Type ^ type);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("use a different constructor that does not take ExpressionType. Then override NodeType and Type properties to provide the values that would be specified to this constructor.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nodeType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="nodeType">
          <span data-ttu-id="d5b6d-108">ノード型として設定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-108">The <see cref="T:System.Linq.Expressions.ExpressionType" /> to set as the node type.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-109">この <see cref="P:System.Linq.Expressions.Expression.Type" /> の <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-109">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-110">
            <see cref="T:System.Linq.Expressions.Expression" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-110">Initializes a new instance of the <see cref="T:System.Linq.Expressions.Expression" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-111">このコンス トラクターは、派生クラスのコンス トラクターから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-111">This constructor is called from constructors in derived classes.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="d5b6d-112">このノードを走査するビジター。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-112">The visitor to visit this node with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-113">このノード型の特定の Visit メソッドにデスパッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-113">Dispatches to the specific visit method for this node type.</span>
          </span>
          <span data-ttu-id="d5b6d-114">たとえば、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> は <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /> を呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-114">For example, <see cref="T:System.Linq.Expressions.MethodCallExpression" /> calls the <see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-115">このノードの走査結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-115">The result of visiting this node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-116">この既定の実装の<xref:System.Linq.Expressions.ExpressionType.Extension>ノード呼び出し<xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-116">This default implementation for <xref:System.Linq.Expressions.ExpressionType.Extension> nodes calls <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span> <span data-ttu-id="d5b6d-117">訪問者の派生クラスで複数の特定のメソッドを呼び出すには、このメソッドをオーバーライドして、<xref:System.Linq.Expressions.ExpressionVisitor>クラスです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-117">Override this method to call into a more specific method on a derived visitor class of the <xref:System.Linq.Expressions.ExpressionVisitor> class.</span></span> <span data-ttu-id="d5b6d-118">ただし、サポートすることがまだ不明な訪問者を呼び出して<xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-118">However, it should still support unknown visitors by calling <xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-119">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-119">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-120">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-120">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-121">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-121">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-122">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-122">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-123">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-123">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-124">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-124">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-125"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-125">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-126">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-126">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-127">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-127">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-128"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-128">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-129">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-129">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-130">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-130">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-131">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-131">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-132">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-132">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-133">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-133">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-134">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-134">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-135">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-135">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-136">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-136">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-137">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-137">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-138">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-138">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-139">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-139">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-140">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-140">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-141">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-141">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-142">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-142">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-143">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-143">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-144">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-144">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-145">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-145">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-146">次のコード例では、2 つの整数を加算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-146">The following code example shows how to create an expression that adds two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-147">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-147">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-148">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-148">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Add (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Add(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Add(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Add (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Add(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-149">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-149">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-150">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-150">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-151">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-151">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-152">オーバーフロー チェックを行わない算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that does not have overflow checking.</span>
          </span>
          <span data-ttu-id="d5b6d-153">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-153">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-154">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Add" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-154">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Add" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-155">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-155">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-156"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-156">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-157">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-157">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-158">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-158">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-159"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-159">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-160">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-160">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-161">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-161">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-162">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-162">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-163">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-163">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-164">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-164">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-165">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-165">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-166">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-166">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-167">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-167">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-168">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-168">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-169">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-169">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-170">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-170">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-171">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-171">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-172">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-172">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-173">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-173">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-174">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-174">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-175">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-175">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-176">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-176">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-177">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-177">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-178">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-178">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-179">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-179">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-180">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には加算演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-180">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-181">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-181">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-182">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-182">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-183">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-183">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-184">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-184">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-185">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-185">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-186">次のコード例では、整数型の変数に値を追加し、操作の結果を変数に代入する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-186">The following code example shows how to create an expression that adds a value to an integer variable and then assigns the result of the operation to the variable.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#18)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#18)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-187">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-187">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-188">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-188">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-189">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-189">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-190">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-190">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-191">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-191">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-192">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-192">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-193">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-193">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-194">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-194">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-195">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-195">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-196">オーバーフロー チェックを行わない加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-196">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-197">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-197">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-198">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-198">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-199">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-199">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-200">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-200">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-201">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-202">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-202">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-203">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-204">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-204">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-205">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-205">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-206">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-206">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-207">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-207">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-208">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-208">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-209">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-209">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-210">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-210">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-211">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-211">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-212">オーバーフロー チェックを行う加算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-212">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an addition assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-213">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-213">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-214">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-214">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-215">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-215">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-216">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-216">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-217">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-217">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-218">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-218">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-219">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-219">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-220"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-220">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-221">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-221">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-222">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-222">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-223"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-223">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-224">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-224">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-225">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-225">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-226">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-226">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-227">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-227">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-228">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-228">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-229">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-229">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-230">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-230">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-231">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-231">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-232">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-232">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-233">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-233">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-234">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-234">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-235">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-235">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-236">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-236">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-237">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-237">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-238">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-238">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-239">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-239">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-240">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-240">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-241">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-241">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-242">加算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-242">The addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AddChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AddChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AddChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AddChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AddChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AddChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-243">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-243">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-244">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-244">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-245">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-245">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-246">オーバーフロー チェックを行う算術加算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-246">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic addition operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="d5b6d-247">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-247">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-248">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-248">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AddChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-249">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-249">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-250"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-250">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-251">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-251">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-252">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-252">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-253"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-253">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-254">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-254">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-255">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-255">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-256">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-256">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="d5b6d-257">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-257">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-258">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`加算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-258">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the addition operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-259">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-259">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-260">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-260">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-261">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-261">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-262">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-262">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-263">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-263">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-264">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-264">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-265">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-265">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-266">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-266">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-267">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-267">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-268">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-268">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-269">ノードの型は、定義済みの加算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-269">The type of the node is the result type of the predefined addition operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-270">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-270">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-271">ノードの型は、定義済みの加算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-271">The type of the node is the nullable type that corresponds to the result type of the predefined addition operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-272">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-272">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-273">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-273">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-274">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には加算演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-274">
              <paramref name="method" /> is <see langword="null" /> and the addition operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="And">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-275">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-275">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-276">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-276">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-277">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-277">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-278">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-278">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-279">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-279">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-280">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-280">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-281"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-281">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-282">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-282">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-283">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-283">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-284"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-284">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-285">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-285">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-286">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-286">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-287">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-287">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-288">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-288">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-289">それ以外の場合`left`です。型および`right`です。型が整数またはブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-289">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-290">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-290">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-291">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-291">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-292">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-292">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-293">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-293">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-294">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-294">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-295">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-295">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-296">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-296">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-297">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-297">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-298">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-298">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-299">ノードの型は、結果の型定義済みのビットごと`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-299">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-300">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-300">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-301">ノードの型は、結果の型に定義済みのビットごとの対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-301">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-302">次のコード例では、2 つのブール値で論理 AND 演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-302">The following code example shows how to create an expression that represents a logical AND operation on two Boolean values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-303">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-303">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-304">ビットごとの <see langword="AND" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-304">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="And">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression And (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression And(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.And(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function And (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ And(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-305">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-305">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-306">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-306">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-307">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-307">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-308">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-308">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="AND" /> operation.</span>
          </span>
          <span data-ttu-id="d5b6d-309">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-309">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-310">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.And" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-310">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.And" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-311">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-311">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-312"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-312">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-313">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-313">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-314">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-314">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-315"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-315">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-316">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-316">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-317">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-317">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-318">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-318">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="d5b6d-319">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-319">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-320">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-320">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-321">それ以外の場合`left`です。型および`right`です。型が整数またはブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-321">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-322">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-322">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-323">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-323">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-324">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-324">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-325">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-325">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-326">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-326">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-327">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-327">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-328">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-328">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-329">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-329">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-330">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-330">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-331">ノードの型は、結果の型定義済みのビットごと`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-331">The type of the node is the result type of the predefined bitwise `AND` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-332">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-332">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-333">ノードの型は、結果の型に定義済みのビットごとの対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-333">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-334">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-334">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-335">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-335">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-336">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="AND" /> 演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-336">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAlso">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-337">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="AND" /> 演算を表す <see langword="true" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-337">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-338">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-338">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-339">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-339">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-340">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="AND" /> 演算を表す <see langword="true" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-340">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="true" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-341">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-341">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-342">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-342">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-343"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-343">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-344">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-344">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-345">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-345">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-346"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-346">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-347">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-347">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-348">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-348">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-349">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-349">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-350">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-350">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d5b6d-351">条件付き`AND`(C#) 演算子をオーバー ロードできませんまたは[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-351">The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="d5b6d-352">ただし、条件付き`AND`ビットごとの演算子が評価される`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-352">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="d5b6d-353">したがってにユーザー定義のオーバー ロード、ビットごとの`AND`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-353">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="d5b6d-354">それ以外の場合`left`です。型および`right`です。型がブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-354">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-355">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-355">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-356">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-356">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-357">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-357">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-358">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-358">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-359">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-359">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-360">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが、null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-360">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-361">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-361">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-362">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-362">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-363">`left`.型および`right`です。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-363">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="d5b6d-364">If `left`.型および`right`です。型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-364">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-365">ノードの型は、定義済みの条件式の結果型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-365">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-366">If `left`.型および`right`です。型は null を許容、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-366">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-367">ノードの型は、定義済みの条件式の結果の型に対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-367">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-368">次のコード例は、式の作成を実行する論理、最初のオペランドの評価結果が場合にのみ、その 2 つのオペランドでの操作方法を示しています。`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-368">The following code example shows how to create an expression that performs a logical AND operation on its two operands only if the first operand evaluates to `true`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#19)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-369">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-369">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-370">ビットごとの <see langword="AND" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-370">The bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-371">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-371">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-372">
            <paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-372">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AndAlso">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAlso (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAlso(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAlso(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAlso (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAlso(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-373">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-373">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-374">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-374">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-375">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-375">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-376">1 番目のオペランドが true に解決された場合にのみ 2 番目のオペランドを評価する条件付き <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="AND" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-376">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="AND" /> operation that evaluates the second operand only if the first operand is resolved to true.</span>
          </span>
          <span data-ttu-id="d5b6d-377">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-377">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-378">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-378">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAlso" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-379">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-379">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-380"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-380">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-381">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-381">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-382">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-382">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-383"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-383">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-384">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-384">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-385">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-385">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-386">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-386">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="d5b6d-387">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-387">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-388">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`AND`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-388">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `AND` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d5b6d-389">条件付き`AND`(C#) 演算子をオーバー ロードできませんまたは[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-389">The conditional `AND` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="d5b6d-390">ただし、条件付き`AND`ビットごとの演算子が評価される`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-390">However, the conditional `AND` operator is evaluated by using the bitwise `AND` operator.</span></span> <span data-ttu-id="d5b6d-391">したがってにユーザー定義のオーバー ロード、ビットごとの`AND`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-391">Thus, a user-defined overload of the bitwise `AND` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="d5b6d-392">それ以外の場合`left`です。型および`right`です。型がブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-392">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-393">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-393">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-394">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-394">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-395">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-395">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-396">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-396">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-397">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-397">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-398">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが、null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-398">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-399">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-399">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-400">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-400">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-401">`left`.型および`right`です。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-401">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="d5b6d-402">If `left`.型および`right`です。型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-402">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-403">ノードの型は、定義済みの条件式の結果型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-403">The type of the node is the result type of the predefined conditional `AND` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-404">If `left`.型および`right`です。型は null を許容、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-404">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-405">ノードの型は、定義済みの条件式の結果の型に対応する null 許容型`AND`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-405">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `AND` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-406">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-406">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-407">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-407">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-408">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="AND" /> 演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-408">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="AND" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-409">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-409">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-410">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-410">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AndAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-411">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-411">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-412">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-412">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-413">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-413">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-414">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-414">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-415">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-415">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-416">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-416">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-417">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-417">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-418">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-418">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-419">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-420">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-420">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AndAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression AndAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression AndAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.AndAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AndAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ AndAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-421">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-422">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-422">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-423">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-423">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-424">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-424">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-425">ビットごとの AND 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-425">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise AND assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-426">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-426">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.AndAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayAccess">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-427">配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-427">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, indexes As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="d5b6d-428">多次元配列を表す式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-428">An expression that represents the multidimensional array.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="d5b6d-429">配列のインデックス化に使用する式を格納している <see cref="T:System.Collections.Generic.IEnumerable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-429">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> containing expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-430">多次元配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-430">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-431">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-431">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-432">使用して配列を表す式を取得できます、<xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A>メソッド、または<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>または<xref:System.Linq.Expressions.Expression.NewArrayInit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-432">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-433">次のコード例を使用して多次元配列内の要素の値を変更する方法を示しています、`ArrayAccess`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-433">The following code example shows how to change the value of an element in a multidimensional array by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#21)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression ArrayAccess (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression ArrayAccess(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayAccess(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayAccess (array As Expression, ParamArray indexes As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ ArrayAccess(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="d5b6d-434">インデックス化する配列を表す式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-434">An expression representing the array to index.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="d5b6d-435">配列のインデックス化に使用する式を格納している配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-435">An array that contains expressions used to index the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-436">配列にアクセスするための <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-436">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> to access an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-437">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-437">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-438">使用して配列を表す式を取得できます、<xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A>メソッド、または<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>または<xref:System.Linq.Expressions.Expression.NewArrayInit%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-438">The expression that represents the array can be obtained by using the <xref:System.Linq.Expressions.Expression.MakeMemberAccess%2A> method, or through <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> or <xref:System.Linq.Expressions.Expression.NewArrayInit%2A>.</span></span>  
  
 <span data-ttu-id="d5b6d-439">多次元配列は、使用、<xref:System.Linq.Expressions.Expression.ArrayAccess%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-439">For multidimensional arrays, use the <xref:System.Linq.Expressions.Expression.ArrayAccess%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-440">次のコード例を使用して配列の要素の値を変更する方法を示しています、`ArrayAccess`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-440">The following code example shows how to change a value of an array element by using the `ArrayAccess` method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#20)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#20)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrayIndex">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-441">配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-441">Creates an <see cref="T:System.Linq.Expressions.Expression" /> that represents applying an array index operator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, indexes As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="d5b6d-442">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-442">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="d5b6d-443">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-443">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-444">ランクが 1 より大きい配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-444">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to an array of rank more than one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-445">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-445">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-446">各要素`indexes`必要があります<xref:System.Linq.Expressions.Expression.Type%2A>と等しい<xref:System.Int32>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-446">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="d5b6d-447"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`array`ランクがの要素の数と一致する、配列型を表す必要があります`indexes`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-447">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="d5b6d-448">場合のランク`array`です。このメソッドが戻る型が 1 の場合、<xref:System.Linq.Expressions.BinaryExpression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-448">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="d5b6d-449"><xref:System.Linq.Expressions.BinaryExpression.Left%2A>プロパティに設定されている`array`と<xref:System.Linq.Expressions.BinaryExpression.Right%2A>プロパティの 1 つの要素に設定されて`indexes`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-449">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="d5b6d-450"><xref:System.Linq.Expressions.Expression.Type%2A>のプロパティ、<xref:System.Linq.Expressions.BinaryExpression>の要素の型を表す`array`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-450">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="d5b6d-451">場合のランク`array`です。このメソッドが戻る型が 1 つ以上の場合、<xref:System.Linq.Expressions.MethodCallExpression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-451">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="d5b6d-452"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A>プロパティに設定されている、<xref:System.Reflection.MethodInfo>パブリック インスタンス メソッドを説明する`Get`によって表される型で、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`array`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-452">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-453">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.MethodCallExpression>を表す 2 次元配列にインデックスを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-453">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-454">
            <paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-454">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-455">
            <paramref name="array" />.Type は配列型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-455">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="d5b6d-456">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-456">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-457">
            <paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-457">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="d5b6d-458">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-458">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-459">
            <paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-459">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ArrayIndex (System.Linq.Expressions.Expression array, System.Linq.Expressions.Expression index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, index As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, System::Linq::Expressions::Expression ^ index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="index" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="d5b6d-460">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-460">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="d5b6d-461">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-461">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-462">ランク 1 の配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-462">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents applying an array index operator to an array of rank one.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-463">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-463">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayIndex" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-464">`index` 型のインデックスを表す必要があります<xref:System.Int32>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-464">`index` must represent an index of type <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="d5b6d-465"><xref:System.Linq.Expressions.BinaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.BinaryExpression>は`null`、両方と<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>に設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-465">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null`, and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="d5b6d-466"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティがの要素の型と等しい`array`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-466">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the element type of `array`.Type.</span></span> <span data-ttu-id="d5b6d-467"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-467">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-468">
            <paramref name="array" /> または <paramref name="index" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-468">
              <paramref name="array" /> or <paramref name="index" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-469">
            <paramref name="array" />.Type は配列型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-469">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="d5b6d-470">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-470">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-471">
            <paramref name="array" />.Type は、ランクが 1 ではない配列型を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-471">
              <paramref name="array" />.Type represents an array type whose rank is not 1.</span>
          </span>
          <span data-ttu-id="d5b6d-472">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-472">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-473">
            <paramref name="index" />.Type は、<see cref="T:System.Int32" /> 型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-473">
              <paramref name="index" />.Type does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression ArrayIndex (System.Linq.Expressions.Expression array, params System.Linq.Expressions.Expression[] indexes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression ArrayIndex(class System.Linq.Expressions.Expression array, class System.Linq.Expressions.Expression[] indexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayIndex(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayIndex (array As Expression, ParamArray indexes As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ ArrayIndex(System::Linq::Expressions::Expression ^ array, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ indexes);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexes" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="d5b6d-474">
            <see cref="T:System.Linq.Expressions.Expression" /> のインスタンスの配列 (配列のインデックス操作のインデックス)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-474">An array of <see cref="T:System.Linq.Expressions.Expression" /> instances - indexes for the array index operation.</span>
          </span>
        </param>
        <param name="indexes">
          <span data-ttu-id="d5b6d-475">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-475">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-476">多次元配列への配列の添字演算子の適用を表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-476">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents applying an array index operator to a multidimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-477">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-477">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-478">各要素`indexes`必要があります<xref:System.Linq.Expressions.Expression.Type%2A>と等しい<xref:System.Int32>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-478">Each element of `indexes` must have <xref:System.Linq.Expressions.Expression.Type%2A> equal to <xref:System.Int32>.</span></span> <span data-ttu-id="d5b6d-479"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`array`ランクがの要素の数と一致する、配列型を表す必要があります`indexes`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-479">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type whose rank matches the number of elements in `indexes`.</span></span>  
  
 <span data-ttu-id="d5b6d-480">場合のランク`array`です。このメソッドが戻る型が 1 の場合、<xref:System.Linq.Expressions.BinaryExpression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-480">If the rank of `array`.Type is 1, this method returns a <xref:System.Linq.Expressions.BinaryExpression>.</span></span> <span data-ttu-id="d5b6d-481"><xref:System.Linq.Expressions.BinaryExpression.Left%2A>プロパティに設定されている`array`と<xref:System.Linq.Expressions.BinaryExpression.Right%2A>プロパティの 1 つの要素に設定されて`indexes`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-481">The <xref:System.Linq.Expressions.BinaryExpression.Left%2A> property is set to `array` and the <xref:System.Linq.Expressions.BinaryExpression.Right%2A> property is set to the single element of `indexes`.</span></span> <span data-ttu-id="d5b6d-482"><xref:System.Linq.Expressions.Expression.Type%2A>のプロパティ、<xref:System.Linq.Expressions.BinaryExpression>の要素の型を表す`array`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-482">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the <xref:System.Linq.Expressions.BinaryExpression> represents the element type of `array`.Type.</span></span>  
  
 <span data-ttu-id="d5b6d-483">場合のランク`array`です。このメソッドが戻る型が 1 つ以上の場合、<xref:System.Linq.Expressions.MethodCallExpression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-483">If the rank of `array`.Type is more than one, this method returns a <xref:System.Linq.Expressions.MethodCallExpression>.</span></span> <span data-ttu-id="d5b6d-484"><xref:System.Linq.Expressions.MethodCallExpression.Method%2A>プロパティに設定されている、<xref:System.Reflection.MethodInfo>パブリック インスタンス メソッドを説明する`Get`によって表される型で、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`array`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-484">The <xref:System.Linq.Expressions.MethodCallExpression.Method%2A> property is set to the <xref:System.Reflection.MethodInfo> that describes the public instance method `Get` on the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of `array`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-485">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.MethodCallExpression>を表す 2 次元配列にインデックスを作成します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-485">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ArrayIndex%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create a <xref:System.Linq.Expressions.MethodCallExpression> that represents indexing into a two-dimensional array.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#3)]
 [!code-vb[System.Linq.Expressions.Expression#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-486">
            <paramref name="array" /> または <paramref name="indexes" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-486">
              <paramref name="array" /> or <paramref name="indexes" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-487">
            <paramref name="array" />.Type は配列型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-487">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
          <span data-ttu-id="d5b6d-488">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-488">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-489">
            <paramref name="array" />.Type のランクは、<paramref name="indexes" /> の要素の数と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-489">The rank of <paramref name="array" />.Type does not match the number of elements in <paramref name="indexes" />.</span>
          </span>
          <span data-ttu-id="d5b6d-490">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-490">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-491">
            <paramref name="indexes" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<see cref="T:System.Int32" /> 型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-491">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="indexes" /> does not represent the <see cref="T:System.Int32" /> type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ArrayLength">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ArrayLength (System.Linq.Expressions.Expression array);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ArrayLength(class System.Linq.Expressions.Expression array) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ArrayLength(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ArrayLength (array As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ArrayLength(System::Linq::Expressions::Expression ^ array);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="d5b6d-492">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-492">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-493">1 次元配列の長さを取得する式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-493">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression for obtaining the length of a one-dimensional array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-494">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> と等しい <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <paramref name="array" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-494">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ArrayLength" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to <paramref name="array" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-495"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`array`配列型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-495">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `array` must represent an array type.</span></span>  
  
 <span data-ttu-id="d5b6d-496"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>と等しい<xref:System.Int32>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-496">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is equal to <xref:System.Int32>.</span></span> <span data-ttu-id="d5b6d-497"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>プロパティは`null`、両方と<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A>に設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-497">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`, and both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-498">
            <paramref name="array" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-498">
              <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-499">
            <paramref name="array" />.Type は配列型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-499">
              <paramref name="array" />.Type does not represent an array type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Assign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Assign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Assign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Assign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Assign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-500">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-501">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-502">代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-502">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-503">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-503">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Assign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-504">`Assign`式は、値の型の値をコピーし、参照型への参照をコピーします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-504">The `Assign` expression copies a value for value types, and it copies a reference for reference types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-505">次のコード例では、代入演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-505">The following code example shows how to create an expression that represents an assignment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#12)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Bind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-506">メンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-506">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MemberInfo member, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MemberInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MemberInfo ^ member, System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="d5b6d-507">
            <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-507">A <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="d5b6d-508">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-509">フィールドまたはプロパティの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-509">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-510">
            <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-510">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-511"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティの`expression`によって表される型に割り当てることがあります、<xref:System.Reflection.FieldInfo.FieldType%2A>または<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティ`member`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-511">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.FieldInfo.FieldType%2A> or <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of `member`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-512">
            <paramref name="member" /> または <paramref name="expression" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-512">
              <paramref name="member" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-513">
            <paramref name="member" /> は、フィールドまたはプロパティを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-513">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="d5b6d-514">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-514">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-515">
            <paramref name="member" /> によって表されるプロパティに <see langword="set" /> アクセサーが含まれません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-515">The property represented by <paramref name="member" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="d5b6d-516">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-516">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-517">
            <paramref name="expression" />.Type は、<paramref name="member" /> を表すフィールドまたはプロパティの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-517">
              <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Bind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberAssignment Bind (System.Reflection.MethodInfo propertyAccessor, System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberAssignment Bind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Bind(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberAssignment ^ Bind(System::Reflection::MethodInfo ^ propertyAccessor, System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberAssignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="d5b6d-518">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-518">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="expression">
          <span data-ttu-id="d5b6d-519">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-519">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-520">プロパティ アクセサー メソッドを使用したメンバーの初期化を表す <see cref="T:System.Linq.Expressions.MemberAssignment" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-520">Creates a <see cref="T:System.Linq.Expressions.MemberAssignment" /> that represents the initialization of a member by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-521">
            <see cref="T:System.Linq.Expressions.MemberAssignment" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、<paramref name="propertyAccessor" /> に設定された <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> を含む <paramref name="expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-521">A <see cref="T:System.Linq.Expressions.MemberAssignment" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.Assignment" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and the <see cref="P:System.Linq.Expressions.MemberAssignment.Expression" /> property set to <paramref name="expression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-522"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`expression`によって表される型に割り当てることがあります、<xref:System.Reflection.PropertyInfo.PropertyType%2A>でアクセスされるプロパティのプロパティ`propertyAccessor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-522">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `expression` must be assignable to the type represented by the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the property accessed in `propertyAccessor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-523">
            <paramref name="propertyAccessor" /> または <paramref name="expression" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-523">
              <paramref name="propertyAccessor" /> or <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-524">
            <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-524">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="d5b6d-525">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-525">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-526">
            <paramref name="propertyAccessor" /> によってアクセスされるプロパティは <see langword="set" /> アクセサーを持っていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-526">The property accessed by <paramref name="propertyAccessor" /> does not have a <see langword="set" /> accessor.</span>
          </span>
          <span data-ttu-id="d5b6d-527">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-527">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-528">
            <paramref name="expression" />.Type は、<paramref name="member" /> を表すフィールドまたはプロパティの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-528">
              <paramref name="expression" />.Type is not assignable to the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Block">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-529">
            <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-529">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="d5b6d-530">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-530">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-531">指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-531">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-532">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-532">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-533">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-533">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expressions">
          <span data-ttu-id="d5b6d-534">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-534">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-535">指定された式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-535">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-536">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-536">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-537">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-537">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-538">次のコード例では、ブロックの式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-538">The following code example shows how to create a block expression.</span></span> <span data-ttu-id="d5b6d-539">ブロックの式は、2 つの<xref:System.Linq.Expressions.MethodCallExpression>オブジェクトと 1 つ<xref:System.Linq.Expressions.ConstantExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-539">The block expression consists of two <xref:System.Linq.Expressions.MethodCallExpression> objects and one <xref:System.Linq.Expressions.ConstantExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#13)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#13](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#13)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), expressions As IEnumerable(Of Expression)) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="d5b6d-540">ブロック内の変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-540">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="d5b6d-541">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-541">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-542">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-542">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-543">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-543">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-544">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-544">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-545">次のコード例では、ブロックの式にパラメーターを渡すし、ブロック内でこのパラメーターを処理する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-545">The following code example shows how to pass a parameter to a block expression and process this parameter within a block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#14)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#14](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (variables As IEnumerable(Of ParameterExpression), ParamArray expressions As Expression()) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="d5b6d-546">ブロック内の変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-546">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="d5b6d-547">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-547">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-548">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-548">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-549">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-549">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-550">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-550">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="d5b6d-551">ブロック内の 1 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-551">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-552">ブロック内の 2 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-552">The second expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-553">2 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-553">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains two expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-554">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-554">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-555">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-555">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-556">ブロックの結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-556">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="d5b6d-557">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-557">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-558">指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-558">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-559">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-559">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-560">ブロックの結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-560">The result type of the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="d5b6d-561">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-561">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-562">指定された式を含み、変数を含まず、特定の結果の型を持つ <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-562">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given expressions, has no variables and has specific result type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-563">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-563">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="d5b6d-564">ブロック内の 1 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-564">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-565">ブロック内の 2 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-565">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-566">ブロック内の 3 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-566">The third expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-567">3 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-567">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains three expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-568">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-568">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-569">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-569">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-570">ブロックの結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-570">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="d5b6d-571">ブロック内の変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-571">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="d5b6d-572">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-572">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-573">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-573">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-574">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-574">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables, params System.Linq.Expressions.Expression[] expressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables, class System.Linq.Expressions.Expression[] expressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ expressions);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
        <Parameter Name="expressions" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-575">ブロックの結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-575">The result type of the block.</span>
          </span>
        </param>
        <param name="variables">
          <span data-ttu-id="d5b6d-576">ブロック内の変数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-576">The variables in the block.</span>
          </span>
        </param>
        <param name="expressions">
          <span data-ttu-id="d5b6d-577">ブロック内の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-577">The expressions in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-578">指定された変数および式を含む <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-578">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains the given variables and expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-579">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-579">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="d5b6d-580">ブロック内の 1 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-580">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-581">ブロック内の 2 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-581">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-582">ブロック内の 3 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-582">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="d5b6d-583">ブロック内の 4 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-583">The fourth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-584">4 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-584">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains four expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-585">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-585">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-586">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-586">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BlockExpression Block (System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BlockExpression Block(class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Block(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Block (arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As BlockExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BlockExpression ^ Block(System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BlockExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="arg0">
          <span data-ttu-id="d5b6d-587">ブロック内の 1 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-587">The first expression in the block.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-588">ブロック内の 2 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-588">The second expression in the block.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-589">ブロック内の 3 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-589">The third expression in the block.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="d5b6d-590">ブロック内の 4 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-590">The fourth expression in the block.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="d5b6d-591">ブロック内の 5 つ目の式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-591">The fifth expression in the block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-592">5 つの式を含み、変数を含まない <see cref="T:System.Linq.Expressions.BlockExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-592">Creates a <see cref="T:System.Linq.Expressions.BlockExpression" /> that contains five expressions and has no variables.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-593">作成された <see cref="T:System.Linq.Expressions.BlockExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-593">The created <see cref="T:System.Linq.Expressions.BlockExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-594">ブロックの式を実行すると、ブロックの最後の式の値を返します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-594">When the block expression is executed, it returns the value of the last expression in the block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Break">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-595">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-595">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-596">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-596">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-597">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-597">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-598">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-598">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-599">次の例を含む式を作成する方法を示しています、<xref:System.Linq.Expressions.LoopExpression>を使用するオブジェクト、<xref:System.Linq.Expressions.Expression.Break%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-599">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LoopExpression> object that uses the <xref:System.Linq.Expressions.Expression.Break%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Break (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-600">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-600">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d5b6d-601">ジャンプ時に関連付けられているラベルに渡される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-601">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-602">break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-602">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement.</span>
          </span>
          <span data-ttu-id="d5b6d-603">ジャンプ時にラベルに渡す値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-603">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-604">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-604">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-605">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-605">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-606">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-606">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-607">型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-607">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-608">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、および <paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <paramref name="type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-608">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Break (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Break(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Break(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Break(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-609">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-609">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d5b6d-610">ジャンプ時に関連付けられているラベルに渡される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-610">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-611">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-611">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-612">型を指定して、break ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-612">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a break statement with the specified type.</span>
          </span>
          <span data-ttu-id="d5b6d-613">ジャンプ時にラベルに渡す値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-613">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-614">Break と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-614">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Break, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Call">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-615">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-615">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-616">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-616">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-617">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-617">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-618">引数を受け取らないメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-618">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-619">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-619">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-620">呼び出しを表す、 `static` (`Shared` Visual Basic で)、メソッドに渡します`null`の`instance`パラメーターがこのメソッドを呼び出すとします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-620">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method.</span></span>  
  
 <span data-ttu-id="d5b6d-621">場合`method`インスタンス メソッドを表す、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`instance`によって表されるメソッドの宣言する型に代入する必要があります`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-621">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="d5b6d-622"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>が空です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-622">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty.</span></span> <span data-ttu-id="d5b6d-623"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティがによって表されるメソッドの戻り値の型と等しい`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-623">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the return type of the method represented by `method`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-624">次のコード例では、引数なしのメソッドを呼び出す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-624">The following code example shows how to create an expression that calls a method without arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#15)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-625">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-625">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-626">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-626">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-627">
            <paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-627">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-628">
            <paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-628">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d5b6d-629">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-629">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-630">呼び出しの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> のコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-630">A collection of <see cref="T:System.Linq.Expressions.Expression" /> that represents the call arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-631">static (Visual Basic では Shared) メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-631">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static (Shared in Visual Basic) method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-632">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-632">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d5b6d-633">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-633">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-634">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-634">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-635">1 つの引数を受け取る <see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では <see langword="static" />) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-635">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that takes one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-636">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-636">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-637">次の例を呼び出す式を作成する方法を示します、 `static` (`Shared` Visual Basic で) を 1 つの引数を受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-637">The following example demonstrates how to create an expression that calls a `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#16)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-638">
            <paramref name="method" /> が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-638">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d5b6d-639">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see langword="static" /> (Visual Basic では <see langword="Shared" />) メソッドを表す <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-639">A <see cref="T:System.Reflection.MethodInfo" /> that represents a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-640">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-640">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-641">引数を持つ <see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では <see langword="static" />) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-641">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method that has arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-642">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-642">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-643">場合`arguments`は`null`、によって表されるメソッドのパラメーターの数と同じ数の要素があります`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-643">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="d5b6d-644">内の各要素`arguments`することはできません`null`の対応するパラメーターに割り当てることができる必要がありますと`method`、可能性のある後*を引用符で囲む*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-644">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-645">対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで<xref:System.Linq.Expressions.Expression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-645">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-646">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-646">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-647">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-647">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="d5b6d-648"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>空場合`arguments`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-648">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="d5b6d-649">それ以外の場合と同じ要素が含まれている`arguments`、一部の引用符で囲まれたする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-649">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="d5b6d-650"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>によって表されるメソッドの戻り値の型に等しく`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-650">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span> <span data-ttu-id="d5b6d-651"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-651">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-652">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-652">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-653">
            <paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-653">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="d5b6d-654">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-654">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-655">
            <paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-655">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arguments As IEnumerable(Of Expression)) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-656">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> (<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-656">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-657">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-657">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-658">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-658">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-659">引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-659">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-660">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-660">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-661">呼び出しを表す、 `static` (`Shared` Visual Basic で)、メソッドに渡します`null`の`instance`このメソッドを呼び出すときにパラメーターを呼び出したり<xref:System.Linq.Expressions.Expression.Call%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-661">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="d5b6d-662">場合`method`インスタンス メソッドを表す、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`instance`によって表されるメソッドの宣言する型に代入する必要があります`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-662">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="d5b6d-663">場合`arguments`は`null`、によって表されるメソッドのパラメーターの数と同じ数の要素があります`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-663">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="d5b6d-664">内の各要素`arguments`することはできません`null`の対応するパラメーターに割り当てることができる必要がありますと`method`、可能性のある後*を引用符で囲む*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-664">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-665">対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで<xref:System.Linq.Expressions.Expression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-665">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-666">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-666">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-667">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-667">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="d5b6d-668"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>空場合`arguments`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-668">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="d5b6d-669">それ以外の場合と同じ要素が含まれている`arguments`、一部の引用符で囲まれたする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-669">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="d5b6d-670"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>によって表されるメソッドの戻り値の型に等しく`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-670">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-671">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-671">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-672">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-672">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-673">
            <paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-673">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-674">
            <paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-674">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="d5b6d-675">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-675">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-676">
            <paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-676">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="d5b6d-677">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-677">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-678">
            <paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-678">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-679">インスタンス メソッドの呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。<see langword="null" /> (Visual Basic では <see langword="static" />) メソッドに <see langword="Shared" /> を渡します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-679">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance method call (pass <see langword="null" /> for a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-680">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-680">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-681">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-681">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-682">引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-682">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-683">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" />、<see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />、および <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-683">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-684">呼び出しを表す、 `static` (`Shared` Visual Basic で)、メソッドに渡します`null`の`instance`このメソッドを呼び出すときにパラメーターを呼び出したり<xref:System.Linq.Expressions.Expression.Call%2A>代わりにします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-684">To represent a call to a `static` (`Shared` in Visual Basic) method, pass in `null` for the `instance` parameter when you call this method, or call <xref:System.Linq.Expressions.Expression.Call%2A> instead.</span></span>  
  
 <span data-ttu-id="d5b6d-685">場合`method`インスタンス メソッドを表す、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`instance`によって表されるメソッドの宣言する型に代入する必要があります`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-685">If `method` represents an instance method, the <xref:System.Linq.Expressions.Expression.Type%2A> property of `instance` must be assignable to the declaring type of the method represented by `method`.</span></span>  
  
 <span data-ttu-id="d5b6d-686">場合`arguments`は`null`、によって表されるメソッドのパラメーターの数と同じ数の要素があります`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-686">If `arguments` is not `null`, it must have the same number of elements as the number of parameters for the method represented by `method`.</span></span> <span data-ttu-id="d5b6d-687">内の各要素`arguments`することはできません`null`の対応するパラメーターに割り当てることができる必要がありますと`method`、可能性のある後*を引用符で囲む*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-687">Each element in `arguments` must not be `null` and must be assignable to the corresponding parameter of `method`, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-688">対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで<xref:System.Linq.Expressions.Expression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-688">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-689">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-689">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-690">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-690">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
 <span data-ttu-id="d5b6d-691"><xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>空場合`arguments`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-691">The <xref:System.Linq.Expressions.MethodCallExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="d5b6d-692">それ以外の場合と同じ要素が含まれている`arguments`、一部の引用符で囲まれたする可能性があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-692">Otherwise, it contains the same elements as `arguments`, some of which may be quoted.</span></span>  
  
 <span data-ttu-id="d5b6d-693"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>によって表されるメソッドの戻り値の型に等しく`method`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-693">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method represented by `method`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-694">
            <paramref name="method" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-694">
              <paramref name="method" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-695">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-695">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-696">
            <paramref name="instance" /> は <see langword="null" /> で、<paramref name="method" /> はインスタンス メソッドを表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-696">
              <paramref name="instance" /> is <see langword="null" /> and <paramref name="method" /> represents an instance method.</span>
          </span>
          <span data-ttu-id="d5b6d-697">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-697">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-698">
            <paramref name="arguments" /> は <see langword="null" /> ではなく、その要素の 1 つ以上が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-698">
              <paramref name="arguments" /> is not <see langword="null" /> and one or more of its elements is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-699">
            <paramref name="instance" />.Type は、<paramref name="method" /> の表すメソッドの宣言型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-699">
              <paramref name="instance" />.Type is not assignable to the declaring type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="d5b6d-700">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-700">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-701">
            <paramref name="arguments" /> の要素の数が、<paramref name="method" /> の表すメソッドのパラメーターの数と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-701">The number of elements in <paramref name="arguments" /> does not equal the number of parameters for the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="d5b6d-702">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-702">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-703">
            <paramref name="arguments" /> の 1 つ以上の要素が、<paramref name="method" /> の表すメソッドの対応するパラメーターに割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-703">One or more of the elements of <paramref name="arguments" /> is not assignable to the corresponding parameter for the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d5b6d-704">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-704">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-705">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-705">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-706">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-706">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-707">2 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-707">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-708">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-708">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-709">
            <paramref name="method" /> が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-709">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-710">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-710">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="d5b6d-711">static (Visual Basic では Shared) メソッドの場合は null を渡します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-711">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-712">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-712">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-713">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-713">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-714">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-714">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-715">2 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-715">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-716">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-716">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-717">次のコード例では、次の 2 つの引数を持つインスタンス メソッドを呼び出す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-717">The following code example shows how to create an expression that calls an instance method that has two arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#17)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#17)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, methodName As String, typeArguments As Type(), ParamArray arguments As Expression()) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-718">特定のメソッドの <see cref="T:System.Linq.Expressions.Expression" /> プロパティ値が検索される <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-718">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> property value will be searched for a specific method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="d5b6d-719">メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-719">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="d5b6d-720">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-720">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="d5b6d-721">methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-721">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-722">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-722">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represents the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-723">適切なファクトリ メソッドを呼び出すことにより、インスタンス メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-723">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-724">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.Call" /> と等しい <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティ、指定したインスタンス メソッドを表す <paramref name="instance" /> に設定された <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />、および指定した引数に設定された <see cref="T:System.Reflection.MethodInfo" /> を含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-724">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> property equal to <paramref name="instance" />, <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified instance method, and <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-725"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>で表されるメソッドの戻り値の型に等しく`methodName`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-725">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-726">
            <paramref name="instance" /> または <paramref name="methodName" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-726">
              <paramref name="instance" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-727">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-727">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
          <span data-ttu-id="d5b6d-728">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-728">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-729">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="instance" />.Type またはその基本型で見つかりました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-729">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="instance" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d5b6d-730">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-730">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-731">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-731">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-732">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-732">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-733">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-733">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-734">3 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-734">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-735">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-735">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-736">
            <paramref name="method" /> が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-736">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (Type type, string methodName, Type[] typeArguments, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Type type, string methodName, class System.Type[] typeArguments, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Type,System.String,System.Type[],System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(Type ^ type, System::String ^ methodName, cli::array &lt;Type ^&gt; ^ typeArguments, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="methodName" Type="System.String" />
        <Parameter Name="typeArguments" Type="System.Type[]" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-737">指定した <see cref="T:System.Type" /> (Visual Basic では <see langword="static" />) メソッドを含む型を指定する <see langword="Shared" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-737">The <see cref="T:System.Type" /> that specifies the type that contains the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method.</span>
          </span>
        </param>
        <param name="methodName">
          <span data-ttu-id="d5b6d-738">メソッドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-738">The name of the method.</span>
          </span>
        </param>
        <param name="typeArguments">
          <span data-ttu-id="d5b6d-739">ジェネリック メソッドの型パラメーターを指定する <see cref="T:System.Type" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-739">An array of <see cref="T:System.Type" /> objects that specify the type parameters of the generic method.</span>
          </span>
          <span data-ttu-id="d5b6d-740">methodName が非ジェネリック メソッドを指定する場合、この引数は null にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-740">This argument should be null when methodName specifies a non-generic method.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-741">メソッドへの引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-741">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments to the method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-742">適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.MethodCallExpression" /> (Visual Basic では <see langword="static" />) メソッドへの呼び出しを表す <see langword="Shared" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-742">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-743">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、指定した <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> (Visual Basic では <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />) メソッドを表す <see cref="T:System.Reflection.MethodInfo" /> に設定された <see langword="static" /> プロパティ、および指定した引数に設定された <see langword="Shared" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-743">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" />, the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property set to the <see cref="T:System.Reflection.MethodInfo" /> that represents the specified <see langword="static" /> (<see langword="Shared" /> in Visual Basic) method, and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Arguments" /> property set to the specified arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-744"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MethodCallExpression>で表されるメソッドの戻り値の型に等しく`methodName`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-744">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MethodCallExpression> is equal to the return type of the method denoted by `methodName`.</span></span> <span data-ttu-id="d5b6d-745"><xref:System.Linq.Expressions.MethodCallExpression.Object%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-745">The <xref:System.Linq.Expressions.MethodCallExpression.Object%2A> property is `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-746">
            <paramref name="type" /> または <paramref name="methodName" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-746">
              <paramref name="type" /> or <paramref name="methodName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-747">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致するメソッドが、<paramref name="type" /> またはその基本型で見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-747">No method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
          <span data-ttu-id="d5b6d-748">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-748">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-749">名前が <paramref name="methodName" /> で、型パラメーターが <paramref name="typeArguments" /> と一致し、パラメーターの型が <paramref name="arguments" /> と一致する複数のメソッドが、<paramref name="type" /> またはその基本型で見つかりました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-749">More than one method whose name is <paramref name="methodName" />, whose type parameters match <paramref name="typeArguments" />, and whose parameter types match <paramref name="arguments" /> is found in <paramref name="type" /> or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Linq.Expressions.Expression instance, System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Linq.Expressions.Expression instance, class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (instance As Expression, method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Linq::Expressions::Expression ^ instance, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-750">インスタンス呼び出しのインスタンスを指定する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-750">An <see cref="T:System.Linq.Expressions.Expression" /> that specifies the instance for an instance call.</span>
          </span>
          <span data-ttu-id="d5b6d-751">static (Visual Basic では Shared) メソッドの場合は null を渡します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-751">(pass null for a static (Shared in Visual Basic) method).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-752">呼び出し先のメソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-752">The <see cref="T:System.Reflection.MethodInfo" /> that represents the target method.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-753">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-753">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-754">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-754">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-755">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-755">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-756">3 つの引数を受け取るメソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-756">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a method that takes three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-757">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-757">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d5b6d-758">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-758">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-759">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-759">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-760">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-760">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-761">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-761">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="d5b6d-762">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-762">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-763">4 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-763">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-764">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-764">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-765">
            <paramref name="method" /> が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-765">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Call">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MethodCallExpression Call (System.Reflection.MethodInfo method, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3, System.Linq.Expressions.Expression arg4);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MethodCallExpression Call(class System.Reflection.MethodInfo method, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3, class System.Linq.Expressions.Expression arg4) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Call(System.Reflection.MethodInfo,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Call (method As MethodInfo, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression, arg4 As Expression) As MethodCallExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MethodCallExpression ^ Call(System::Reflection::MethodInfo ^ method, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3, System::Linq::Expressions::Expression ^ arg4);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MethodCallExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg4" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="method">
          <span data-ttu-id="d5b6d-766">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-766">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-767">1 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-767">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the first argument.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-768">2 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-768">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the second argument.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-769">3 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-769">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the third argument.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="d5b6d-770">4 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-770">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fourth argument.</span>
          </span>
        </param>
        <param name="arg4">
          <span data-ttu-id="d5b6d-771">5 番目の引数を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-771">The <see cref="T:System.Linq.Expressions.Expression" /> that represents the fifth argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-772">5 つの引数を受け取る静的メソッドへの呼び出しを表す <see cref="T:System.Linq.Expressions.MethodCallExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-772">Creates a <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that represents a call to a static method that takes five arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-773">
            <see cref="T:System.Linq.Expressions.MethodCallExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> プロパティおよび <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> プロパティを含む <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-773">A <see cref="T:System.Linq.Expressions.MethodCallExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Call" /> and the <see cref="P:System.Linq.Expressions.MethodCallExpression.Object" /> and <see cref="P:System.Linq.Expressions.MethodCallExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-774">
            <paramref name="method" /> が null です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-774">
              <paramref name="method" /> is null.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CanReduce">
      <MemberSignature Language="C#" Value="public virtual bool CanReduce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReduce" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.CanReduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property CanReduce As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReduce { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-775">ノードをより単純なノードに変形できることを示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-775">Indicates that the node can be reduced to a simpler node.</span>
          </span>
          <span data-ttu-id="d5b6d-776">これが true を返す場合、Reduce() を呼び出して単純化された形式を生成できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-776">If this returns true, Reduce() can be called to produce the reduced form.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5b6d-777">ノードを単純化することができる場合は true。それ以外の場合は false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-777">True if the node can be reduced, otherwise false.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Catch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-778">catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-778">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="d5b6d-779">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-779">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-780">catch ステートメントの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-780">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-781">ハンドラー本体で使用する、キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-781">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with a reference to the caught <see cref="T:System.Exception" /> object for use in the handler body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-782">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-782">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-783">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-783">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-784">catch ステートメントの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-784">The body of the catch statement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-785">catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-785">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-786">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-786">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-787"><xref:System.Linq.Expressions.Expression.Type%2A>の<xref:System.Exception>への参照をありませんが、キャッチするを指定する、<xref:System.Exception>オブジェクトで使用するために使用できます、<xref:System.Linq.Expressions.CatchBlock>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-787">The <xref:System.Linq.Expressions.Expression.Type%2A> of <xref:System.Exception> to be caught can be specified but no reference to the <xref:System.Exception> object will be available for use in the <xref:System.Linq.Expressions.CatchBlock>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Catch (variable As ParameterExpression, body As Expression, filter As Expression) As CatchBlock" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="variable">
          <span data-ttu-id="d5b6d-788">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-788">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-789">catch ステートメントの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-789">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="d5b6d-790">
            <see cref="T:System.Exception" /> フィルターの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-790">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-791">
            <see cref="T:System.Linq.Expressions.CatchBlock" /> フィルターおよびキャッチされた <see cref="T:System.Exception" /> オブジェクトへの参照を指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-791">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter and a reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-792">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-792">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Catch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock Catch (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock Catch(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Catch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ Catch(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-793">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-793">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-794">catch ステートメントの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-794">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="d5b6d-795">
            <see cref="T:System.Exception" /> フィルターの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-795">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-796">キャッチされた <see cref="T:System.Linq.Expressions.CatchBlock" /> オブジェクトへの参照は指定せずに、<see cref="T:System.Exception" /> フィルターを指定して、catch ステートメントを表す <see cref="T:System.Exception" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-796">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with an <see cref="T:System.Exception" /> filter but no reference to the caught <see cref="T:System.Exception" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-797">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-797">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearDebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression ClearDebugInfo (System.Linq.Expressions.SymbolDocumentInfo document);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression ClearDebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ClearDebugInfo(System.Linq.Expressions.SymbolDocumentInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ClearDebugInfo (document As SymbolDocumentInfo) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ ClearDebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="d5b6d-798">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-798">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-799">シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-799">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearing a sequence point.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-800">シーケンス ポイントをクリアするための <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-800">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> for clearning a sequence point.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Coalesce">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-801">合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-801">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-802">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-802">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-803">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-803">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-804">合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-804">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-805">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-805">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-806"><xref:System.Linq.Expressions.BinaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.BinaryExpression>は`null`と<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>に設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-806">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span> <span data-ttu-id="d5b6d-807"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティは合体演算の結果の型と同じです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-807">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to the result type of the coalescing operation.</span></span> <span data-ttu-id="d5b6d-808"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-808">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
#### <a name="result-type"></a><span data-ttu-id="d5b6d-809">結果のデータ型</span><span class="sxs-lookup"><span data-stu-id="d5b6d-809">Result Type</span></span>  
 <span data-ttu-id="d5b6d-810">次の規則は、結果の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-810">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="d5b6d-811">If `left`.型が null 許容型を表すと`right`です。型が対応する null 非許容の型に暗黙的に変換できる場合、結果型は、null 非許容のそれと同等の`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-811">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="d5b6d-812">それ以外の場合`right`です。暗黙的に変換できる型を`left`です。型、結果型は`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-812">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="d5b6d-813">それ以外の場合、null 非許容のそれと同等の`left`します。暗黙的に変換できる型を`right`です。型、結果型は`right`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-813">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-814">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-814">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-815">
            <paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容値型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-815">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-816">
            <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-816">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Coalesce">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Coalesce (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Coalesce(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Coalesce(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Coalesce (left As Expression, right As Expression, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Coalesce(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-817">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-817">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-818">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-818">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-819">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-819">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-820">変換関数を指定して合体演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-820">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a coalescing operation, given a conversion function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-821">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-821">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-822"><xref:System.Linq.Expressions.BinaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.BinaryExpression>は`null`と<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>に設定されている`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-822">The <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is `null` and both <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> are set to `false`.</span></span>  
  
 <span data-ttu-id="d5b6d-823"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.BinaryExpression>合体演算の結果の型と等しい。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-823">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.BinaryExpression> is equal to the result type of the coalescing operation.</span></span>  
  
 <span data-ttu-id="d5b6d-824">次の規則は、結果の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-824">The following rules determine the result type:</span></span>  
  
-   <span data-ttu-id="d5b6d-825">If `left`.型が null 許容型を表すと`right`です。型が対応する null 非許容の型に暗黙的に変換できる場合、結果型は、null 非許容のそれと同等の`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-825">If `left`.Type represents a nullable type and `right`.Type is implicitly convertible to the corresponding non-nullable type, the result type is the non-nullable equivalent of `left`.Type.</span></span>  
  
-   <span data-ttu-id="d5b6d-826">それ以外の場合`right`です。暗黙的に変換できる型を`left`です。型、結果型は`left`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-826">Otherwise, if `right`.Type is implicitly convertible to `left`.Type, the result type is `left`.Type.</span></span>  
  
-   <span data-ttu-id="d5b6d-827">それ以外の場合、null 非許容のそれと同等の`left`します。暗黙的に変換できる型を`right`です。型、結果型は`right`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-827">Otherwise, if the non-nullable equivalent of `left`.Type is implicitly convertible to `right`.Type, the result type is `right`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-828">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-828">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-829">
            <paramref name="left" />.Type と <paramref name="right" />.Type は、互いに変換できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-829">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not convertible to each other.</span>
          </span>
          <span data-ttu-id="d5b6d-830">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-830">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-831">
            <paramref name="conversion" /> は <see langword="null" /> ではなく、<paramref name="conversion" />.Type は受け取る引数が 1 つだけではないデリゲート型です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-831">
              <paramref name="conversion" /> is not <see langword="null" /> and <paramref name="conversion" />.Type is a delegate type that does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-832">
            <paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、参照型または null 許容値型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-832">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> does not represent a reference type or a nullable value type.</span>
          </span>
          <span data-ttu-id="d5b6d-833">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-833">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-834">
            <paramref name="left" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型のパラメーター型に代入できない型を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-834">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="left" /> represents a type that is not assignable to the parameter type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-835">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-835">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-836">
            <paramref name="right" /> の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="conversion" />.Type デリゲート型の戻り値の型と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-836">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of <paramref name="right" /> is not equal to the return type of the delegate type <paramref name="conversion" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Condition">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-837">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-837">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Condition (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="d5b6d-838">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-838">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="d5b6d-839">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-839">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="d5b6d-840">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-840">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-841">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-841">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-842">
            <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-842">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-843"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ConditionalExpression>と等しい、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`ifTrue`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-843">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConditionalExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `ifTrue`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-844">次のコード例では、条件付きステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-844">The following code example shows how to create an expression that represents a conditional statement.</span></span> <span data-ttu-id="d5b6d-845">最初の引数が評価された場合`true`、2 番目の引数が実行された場合、3 番目の引数を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-845">If the first argument evaluates to `true`, the second argument is executed; otherwise, the third argument is executed.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#3)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-846">
            <paramref name="test" />、<paramref name="ifTrue" />、または <paramref name="ifFalse" /> は、<see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-846">
              <paramref name="test" /> or <paramref name="ifTrue" /> or <paramref name="ifFalse" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-847">
            <paramref name="test" />.Type が <see cref="T:System.Boolean" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-847">
              <paramref name="test" />.Type is not <see cref="T:System.Boolean" />.</span>
          </span>
          <span data-ttu-id="d5b6d-848">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-848">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-849">
            <paramref name="ifTrue" />.Type が、<paramref name="ifFalse" />.Type と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-849">
              <paramref name="ifTrue" />.Type is not equal to <paramref name="ifFalse" />.Type.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
        <altmember cref="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      </Docs>
    </Member>
    <Member MemberName="Condition">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression Condition (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression Condition(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Condition(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ Condition(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="d5b6d-850">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-850">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="d5b6d-851">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-851">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="d5b6d-852">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-852">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-853">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-853">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-854">条件付きステートメントを表す <see cref="T:System.Linq.Expressions.ConditionalExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-854">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-855">
            <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-855">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-856">このメソッドにより、条件式の場合の結果の型を明示的に統一場所の種類`ifTrue`と`ifFalse`式が等しくないです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-856">This method allows explicitly unifying the result type of the conditional expression in cases where the types of `ifTrue` and `ifFalse` expressions are not equal.</span></span> <span data-ttu-id="d5b6d-857">両方の種類`ifTrue`と`ifFalse`する必要があります暗黙的に参照結果の型に割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-857">Types of both `ifTrue` and `ifFalse` must be implicitly reference assignable to the result type.</span></span> <span data-ttu-id="d5b6d-858">`type`を許容する<xref:System.Void>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-858">The `type` is allowed to be <xref:System.Void>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Constant">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-859">
            <see cref="T:System.Linq.Expressions.ConstantExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-859">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Constant (value As Object) As ConstantExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d5b6d-860">
            <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-860">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-861">指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-861">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-862">
            <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-862">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-863"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ConstantExpression>の型に等しく`value`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-863">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ConstantExpression> is equal to the type of `value`.</span></span> <span data-ttu-id="d5b6d-864">場合`value`は`null`、<xref:System.Linq.Expressions.Expression.Type%2A>と等しい<xref:System.Object>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-864">If `value` is `null`, <xref:System.Linq.Expressions.Expression.Type%2A> is equal to <xref:System.Object>.</span></span>  
  
 <span data-ttu-id="d5b6d-865">表す`null`、使用することも、<xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29>メソッドを使用する型を明示的に指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-865">To represent `null`, you can also use the <xref:System.Linq.Expressions.Expression.Constant%28System.Object%2CSystem.Type%29> method, with which you can explicitly specify the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-866">次のコード例では、定数値を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-866">The following code example shows how to create an expression that represents a constant value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#4)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConstantExpression Constant (object value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConstantExpression Constant(object value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Constant(System.Object,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConstantExpression ^ Constant(System::Object ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConstantExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d5b6d-867">
            <see cref="T:System.Object" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConstantExpression.Value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-867">An <see cref="T:System.Object" /> to set the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-868">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-868">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-869">指定した値に設定された <see cref="T:System.Linq.Expressions.ConstantExpression" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-869">Creates a <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-870">
            <see cref="T:System.Linq.Expressions.ConstantExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-870">A <see cref="T:System.Linq.Expressions.ConstantExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Constant" /> and the <see cref="P:System.Linq.Expressions.ConstantExpression.Value" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-871">このメソッドは、null 許容型の値を表すために役立つことがあります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-871">This method can be useful for representing values of nullable types.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-872">次のコード例は、null 許容型の定数を表す式を作成し、その値に設定する方法を示しています。`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-872">The following code example shows how to create an expression that represents a constant of the nullable type and set its value to `null`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#22)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-873">
            <paramref name="type" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-873">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-874">
            <paramref name="value" /> が <see langword="null" /> ではなく、<paramref name="type" /> を <paramref name="value" /> の動的型から代入することができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-874">
              <paramref name="value" /> is not <see langword="null" /> and <paramref name="type" /> is not assignable from the dynamic type of <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Continue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-875">continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-875">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Continue (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-876">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-876">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-877">continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-877">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-878">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-878">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-879">次の例で使用する、ループの式を作成する方法、<xref:System.Linq.Expressions.Expression.Continue%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-879">The following example demonstrates how to create a loop expression that uses the <xref:System.Linq.Expressions.Expression.Continue%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#46)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#46)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Continue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Continue (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Continue(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Continue(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Continue(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-880">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-880">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-881">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-881">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-882">型を指定して、continue ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-882">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a continue statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-883">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-883">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Convert">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-884">型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-884">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-885">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-885">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-886">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-886">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-887">型変換操作を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-887">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a type conversion operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-888">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-888">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-889"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-889">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-890"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-890">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="d5b6d-891">場合は、ノードを解除すると、<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-891">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="d5b6d-892">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-892">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-893">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-893">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-894">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-894">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-895">いずれか`expression`です。型または`type`暗黙的または明示的な変換演算子を定義するユーザー定義型です、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-895">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-896">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-896">Otherwise:</span></span>  
  
    -   <span data-ttu-id="d5b6d-897">両方`expression`です。型および`type`数値またはブール値の型または null 許容または null 非許容の列挙型を表す、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-897">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="d5b6d-898">いずれか`expression`です。型または`type`、ボックス化解除は、明示的なボックス化および参照型またはから参照変換が存在する`expression`です。入力`type`では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-898">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-899">非リフトとリフト</span><span class="sxs-lookup"><span data-stu-id="d5b6d-899">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-900">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-900">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-901">If `expression`.型が実装するメソッドの引数の型に割り当てることがあり、実装メソッドの戻り値の型に割り当てること`type`ノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-901">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-902">1 つまたは両方の`expression`します。型または`type`は null 許容値型であり、対応する null 非許容の値型が引数の型と実装メソッドの戻り値の型に等しくそれぞれ、ノードは、リフトです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-902">If one or both of `expression`.Type or `type` is a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="d5b6d-903">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-903">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-904">両方`expression`です。型および`type`は null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-904">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-905">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-905">Otherwise the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-906">次のコード例では、型の変換操作を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-906">The following code example shows how to create an expression that represents a type convertion operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#23)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-907">
            <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-907">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-908">
            <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-908">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Convert">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Convert (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Convert(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Convert(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Convert(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-909">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-909">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-910">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-910">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-911">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-911">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-912">実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-912">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-913">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Convert" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-913">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Convert" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-914"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-914">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-915"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-915">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="d5b6d-916">場合は、ノードを解除すると、<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-916">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="d5b6d-917">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-917">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-918">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-918">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-919">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-919">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-920">メソッドがない場合`null`メソッドの実装であります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-920">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="d5b6d-921">Void 以外を表す必要があります`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-921">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="d5b6d-922">それ以外の場合は、いずれか`expression`です。型または`type`暗黙的または明示的な変換演算子を定義するユーザー定義型です、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-922">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-923">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-923">Otherwise:</span></span>  
  
    -   <span data-ttu-id="d5b6d-924">両方`expression`です。型および`type`数値またはブール値の型または null 許容または null 非許容の列挙型を表す、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-924">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="d5b6d-925">いずれか`expression`です。型または`type`、ボックス化解除は、明示的なボックス化および参照型またはから参照変換が存在する`expression`です。入力`type`では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-925">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-926">非リフトとリフト</span><span class="sxs-lookup"><span data-stu-id="d5b6d-926">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-927">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-927">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-928">If `expression`.型が実装するメソッドの引数の型に割り当てることがあり、実装メソッドの戻り値の型に割り当てること`type`ノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-928">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-929">いずれかまたは両方場合、の`expression`します。型または`type`は null 許容値型と対応する null 非許容の値の型はそれぞれ引数の型と実装メソッドの戻り値の型に等しく、ノードはリフトがします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-929">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="d5b6d-930">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-930">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-931">両方`expression`です。型および`type`は null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-931">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-932">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-932">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-933">
            <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-933">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-934">
            <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-934">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-935">
            <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-935">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="d5b6d-936">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-936">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-937">
            <paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-937">
              <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="d5b6d-938">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-938">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-939">
            <paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-939">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="d5b6d-940">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-940">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-941">
            <paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-941">
              <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="d5b6d-942">
            <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-942">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-943">変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-943">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-944">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-944">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-945">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-945">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-946">変換後の型がオーバーフローした場合に例外をスローする変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-946">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-947">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-947">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-948"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-948">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-949"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-949">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="d5b6d-950">場合は、ノードを解除すると、<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-950">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="d5b6d-951">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-951">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-952">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-952">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-953">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-953">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-954">いずれか`expression`です。型または`type`暗黙的または明示的な変換演算子を定義するユーザー定義型です、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-954">If either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-955">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-955">Otherwise:</span></span>  
  
    -   <span data-ttu-id="d5b6d-956">両方`expression`です。型および`type`数値またはブール値の型または null 許容または null 非許容の列挙型を表す、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-956">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="d5b6d-957">いずれか`expression`です。型または`type`、ボックス化解除は、明示的なボックス化および参照型またはから参照変換が存在する`expression`です。入力`type`では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-957">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-958">非リフトとリフト</span><span class="sxs-lookup"><span data-stu-id="d5b6d-958">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-959">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-959">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-960">If `expression`.型が実装するメソッドの引数の型に割り当てることがあり、実装メソッドの戻り値の型に割り当てること`type`ノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-960">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-961">いずれかまたは両方場合、の`expression`します。型または`type`は null 許容値型と対応する null 非許容の値の型はそれぞれ引数の型と実装メソッドの戻り値の型に等しく、ノードはリフトがします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-961">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="d5b6d-962">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-962">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-963">両方`expression`です。型および`type`は null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-963">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-964">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-964">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-965">
            <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-965">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-966">
            <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-966">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ConvertChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression ConvertChecked (System.Linq.Expressions.Expression expression, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression ConvertChecked(class System.Linq.Expressions.Expression expression, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ConvertChecked(System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ ConvertChecked(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-967">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-967">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-968">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-968">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-969">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-969">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-970">変換後の型がオーバーフローした場合に例外をスローし、実装メソッドが指定される変換演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-970">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a conversion operation that throws an exception if the target type is overflowed and for which the implementing method is specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-971">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" />、<see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />、および <see cref="P:System.Linq.Expressions.Expression.Type" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-971">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ConvertChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />, <see cref="P:System.Linq.Expressions.Expression.Type" />, and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-972"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-972">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-973"><xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> プロパティが `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-973">The <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> property is `false`.</span></span> <span data-ttu-id="d5b6d-974">場合は、ノードを解除すると、<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-974">If the node is lifted, <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> is `true`.</span></span> <span data-ttu-id="d5b6d-975">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-975">Otherwise, it is `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-976">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-976">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-977">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-977">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-978">メソッドがない場合`null`メソッドの実装であります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-978">If method is not `null`, it is the implementing method.</span></span> <span data-ttu-id="d5b6d-979">Void 以外を表す必要があります`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッド。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-979">It must represent a non-void, `static` (`Shared` in Visual Basic) method that takes one argument.</span></span>  
  
-   <span data-ttu-id="d5b6d-980">それ以外の場合は、いずれか`expression`です。型または`type`暗黙的または明示的な変換演算子を定義するユーザー定義型です、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-980">Otherwise, if either `expression`.Type or `type` is a user-defined type that defines an implicit or explicit conversion operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-981">それ以外の場合:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-981">Otherwise:</span></span>  
  
    -   <span data-ttu-id="d5b6d-982">両方`expression`です。型および`type`数値またはブール値の型または null 許容または null 非許容の列挙型を表す、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-982">If both `expression`.Type and `type` represent numeric or Boolean types, or nullable or non-nullable enumeration types, the implementing method is `null`.</span></span>  
  
    -   <span data-ttu-id="d5b6d-983">いずれか`expression`です。型または`type`、ボックス化解除は、明示的なボックス化および参照型またはから参照変換が存在する`expression`です。入力`type`では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-983">If either `expression`.Type or `type` is a reference type and an explicit boxing, unboxing, or reference conversion exists from `expression`.Type to `type`, the implementing method is `null`.</span></span>  
  
#### <a name="lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-984">非リフトとリフト</span><span class="sxs-lookup"><span data-stu-id="d5b6d-984">Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-985">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-985">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-986">If `expression`.型が実装するメソッドの引数の型に割り当てることがあり、実装メソッドの戻り値の型に割り当てること`type`ノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-986">If `expression`.Type is assignable to the argument type of the implementing method and the return type of the implementing method is assignable to `type`, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-987">いずれかまたは両方場合、の`expression`します。型または`type`は null 許容値型と対応する null 非許容の値の型はそれぞれ引数の型と実装メソッドの戻り値の型に等しく、ノードはリフトがします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-987">If either or both of `expression`.Type or `type` are a nullable value type and the corresponding non-nullable value types are equal to the argument type and the return type of the implementing method respectively, the node is lifted.</span></span>  
  
 <span data-ttu-id="d5b6d-988">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-988">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-989">両方`expression`です。型および`type`は null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-989">If both `expression`.Type and `type` are non-nullable, the node is not lifted.</span></span>  
  
-   <span data-ttu-id="d5b6d-990">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-990">Otherwise the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-991">
            <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-991">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-992">
            <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-992">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-993">
            <paramref name="expression" />.Type と <paramref name="type" /> の間には変換演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-993">No conversion operator is defined between <paramref name="expression" />.Type and <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="d5b6d-994">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-994">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-995">
            <paramref name="expression" />.Type は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-995">
              <paramref name="expression" />.Type is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
          <span data-ttu-id="d5b6d-996">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-996">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-997">
            <paramref name="method" /> によって表されるメソッドの戻り値の型は、<paramref name="type" /> に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-997">The return type of the method represented by <paramref name="method" /> is not assignable to <paramref name="type" />.</span>
          </span>
          <span data-ttu-id="d5b6d-998">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-998">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-999">
            <paramref name="expression" />.Type または <paramref name="type" /> は null 許容値型で、対応する null 非許容値型は <paramref name="method" /> によって表されるメソッドそれぞれの、引数型または戻り値の型と等しくありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-999">
              <paramref name="expression" />.Type or <paramref name="type" /> is a nullable value type and the corresponding non-nullable value type does not equal the argument type or the return type, respectively, of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Reflection.AmbiguousMatchException">
          <span data-ttu-id="d5b6d-1000">
            <paramref name="method" /> 記述に一致する複数のメソッドが見つかりました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1000">More than one method that matches the <paramref name="method" /> description was found.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="DebugInfo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DebugInfoExpression DebugInfo (System.Linq.Expressions.SymbolDocumentInfo document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DebugInfoExpression DebugInfo(class System.Linq.Expressions.SymbolDocumentInfo document, int32 startLine, int32 startColumn, int32 endLine, int32 endColumn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DebugInfo(System.Linq.Expressions.SymbolDocumentInfo,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DebugInfo (document As SymbolDocumentInfo, startLine As Integer, startColumn As Integer, endLine As Integer, endColumn As Integer) As DebugInfoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DebugInfoExpression ^ DebugInfo(System::Linq::Expressions::SymbolDocumentInfo ^ document, int startLine, int startColumn, int endLine, int endColumn);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DebugInfoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="document" Type="System.Linq.Expressions.SymbolDocumentInfo" />
        <Parameter Name="startLine" Type="System.Int32" />
        <Parameter Name="startColumn" Type="System.Int32" />
        <Parameter Name="endLine" Type="System.Int32" />
        <Parameter Name="endColumn" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="document">
          <span data-ttu-id="d5b6d-1001">ソース ファイルを表す <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1001">The <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that represents the source file.</span>
          </span>
        </param>
        <param name="startLine">
          <span data-ttu-id="d5b6d-1002">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> 先頭行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1002">The start line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1003">1 以上であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1003">Must be greater than 0.</span>
          </span>
        </param>
        <param name="startColumn">
          <span data-ttu-id="d5b6d-1004">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の先頭列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1004">The start column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1005">1 以上であることが必要です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1005">Must be greater than 0.</span>
          </span>
        </param>
        <param name="endLine">
          <span data-ttu-id="d5b6d-1006">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終行。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1006">The end line of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1007">開始行の値以上である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1007">Must be greater or equal than the start line.</span>
          </span>
        </param>
        <param name="endColumn">
          <span data-ttu-id="d5b6d-1008">この <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> の最終列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1008">The end column of this <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1009">最終行が先頭行と同じである場合、これは開始列の値以上である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1009">If the end line is the same as the start line, it must be greater or equal than the start column.</span>
          </span>
          <span data-ttu-id="d5b6d-1010">どのような場合でも、0 より大きい値である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1010">In any case, must be greater than 0.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1011">指定したスパンを使用して、<see cref="T:System.Linq.Expressions.DebugInfoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1011">Creates a <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> with the specified span.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1012">
            <see cref="T:System.Linq.Expressions.DebugInfoExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1012">An instance of <see cref="T:System.Linq.Expressions.DebugInfoExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Decrement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1013">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1013">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1014">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1014">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1015">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1015">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1016">デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1016">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1017">この式が機能と、渡されたオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1017">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1018">次のコード例では、指定された値から 1 を減算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1018">The following code example shows how to create an expression that substracts 1 from a given value.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#5)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Decrement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Decrement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Decrement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Decrement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Decrement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1019">デクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1019">An <see cref="T:System.Linq.Expressions.Expression" /> to decrement.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1020">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1020">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1021">式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1021">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1022">デクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1022">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the decremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1023">この式が機能と、渡されたオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1023">This expression is functional and does not change the value of the object passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Default">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Default (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Default(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Default(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Default(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-1024">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1024">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1025">指定した型に設定された <see cref="T:System.Linq.Expressions.DefaultExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1025">Creates a <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1026">
            <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した型に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1026">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-1027">次のコード例では、特定の種類の既定値を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1027">The following code example shows how to create an expression that represents a default vaule for a given type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#6)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Divide">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1028">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1028">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1029">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1029">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1030">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1030">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1031">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1031">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1032">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1032">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1033">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1033">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1034"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1034">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1035">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1035">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-1036">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1036">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-1037"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1037">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1038">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1038">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1039">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1039">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1040">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1040">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1041">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`除算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1041">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1042">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1042">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1043">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1043">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1044">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1044">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1045">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1045">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1046">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1046">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1047">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1047">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1048">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1048">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1049">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1049">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-1050">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1050">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1051">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1051">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1052">ノードの型は、定義済みの除算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1052">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-1053">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1053">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1054">ノードの型は、定義済みの除算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1054">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1055">次のコード例では、最初の引数の 2 番目の引数で除算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1055">The following code example shows how to create an expression that divides divides its first argument by its second argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#7)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1056">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1056">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1057">除算演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1057">The division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Divide (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Divide(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Divide(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Divide (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Divide(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1058">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1058">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1059">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1059">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1060">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1060">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1061">算術除算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1061">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic division operation.</span>
          </span>
          <span data-ttu-id="d5b6d-1062">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1062">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1063">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Divide" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1063">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Divide" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1064">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1064">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1065"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1065">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1066">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1066">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-1067">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1067">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-1068"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1068">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1069">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1069">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1070">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1070">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1071">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1071">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1072">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1072">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-1073">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`除算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1073">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the division operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1074">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1074">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1075">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1075">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1076">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1076">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1077">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1077">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1078">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1078">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1079">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1079">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1080">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1080">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1081">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1081">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-1082">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1082">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1083">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1083">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1084">ノードの型は、定義済みの除算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1084">The type of the node is the result type of the predefined division operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-1085">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1085">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1086">ノードの型は、定義済みの除算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1086">The type of the node is the nullable type that corresponds to the result type of the predefined division operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1087">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1087">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1088">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1088">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1089">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には除算演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1089">
              <paramref name="method" /> is <see langword="null" /> and the division operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="DivideAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1090">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1090">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1091">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1091">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1092">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1092">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1093">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1093">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1094">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1094">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1095">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1095">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1096">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1096">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1097">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1097">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1098">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1098">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1099">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1099">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DivideAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression DivideAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression DivideAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.DivideAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function DivideAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ DivideAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1100">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1100">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1101">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1101">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1102">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1102">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-1103">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1103">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1104">オーバーフロー チェックを行わない除算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1104">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a division assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1105">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1105">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.DivideAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1106">動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1106">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="d5b6d-1107">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1107">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d5b6d-1108">動的な式の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1108">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-1109">動的操作の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1109">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1110">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1110">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1111">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1111">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1112"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論し、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1112">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="d5b6d-1113">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1113">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d5b6d-1114">動的な式の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1114">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-1115">動的操作の 1 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1115">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1116">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1116">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1117">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1117">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1118"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論し、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1118">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="d5b6d-1119">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1119">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d5b6d-1120">動的な式の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1120">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-1121">動的操作の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1121">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1122">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1122">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1123">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1123">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1124"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論し、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1124">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="d5b6d-1125">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1125">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d5b6d-1126">動的な式の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1126">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-1127">動的操作の 1 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1127">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-1128">動的操作の 2 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1128">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1129">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1129">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1130">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1130">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1131"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論し、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1131">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="d5b6d-1132">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1132">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d5b6d-1133">動的な式の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1133">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-1134">動的操作の 1 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1134">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-1135">動的操作の 2 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1135">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-1136">動的操作の 3 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1136">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1137">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1137">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1138">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1138">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1139"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論し、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1139">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression Dynamic (System.Runtime.CompilerServices.CallSiteBinder binder, Type returnType, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression Dynamic(class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Type returnType, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Dynamic(System.Runtime.CompilerServices.CallSiteBinder,System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Dynamic (binder As CallSiteBinder, returnType As Type, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ Dynamic(System::Runtime::CompilerServices::CallSiteBinder ^ binder, Type ^ returnType, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binder">
          <span data-ttu-id="d5b6d-1140">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1140">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="d5b6d-1141">動的な式の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1141">The result type of the dynamic expression.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-1142">動的操作の 1 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1142">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-1143">動的操作の 2 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1143">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-1144">動的操作の 3 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1144">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="d5b6d-1145">動的操作の 4 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1145">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1146">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1146">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1147">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1147">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1148"><xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A>結果のプロパティは、引数の型から推論し、指定された戻り型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1148">The <xref:System.Linq.Expressions.DynamicExpression.DelegateType%2A> property of the result will be inferred from the types of the arguments and the specified return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ElementInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1149">
            <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1149">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, arguments As IEnumerable(Of Expression)) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="d5b6d-1150">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1150">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-1151">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1152">2 番目の引数として <see cref="T:System.Linq.Expressions.ElementInit" /> を指定して、<see cref="T:System.Collections.Generic.IEnumerable`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1152">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an <see cref="T:System.Collections.Generic.IEnumerable`1" /> as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1153">指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1153">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1154">`addMethod`パラメーターは、"Add"(大文字と小文字) という名前のインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1154">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="d5b6d-1155">Add メソッド内の要素の数と同じ数のパラメーターを持つ必要があります`arguments`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1155">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="d5b6d-1156"><xref:System.Linq.Expressions.Expression.Type%2A>内の各要素のプロパティ`arguments`add メソッドの対応するパラメーターの型に代入する必要があります可能性のある後*を引用符で囲む*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1156">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-1157">対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで<xref:System.Linq.Expressions.Expression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1157">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-1158">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1158">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-1159">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1159">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1160">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.ElementInit>呼び出しを表す、<xref:System.Collections.Generic.Dictionary%602.Add%2A>ディクショナリ コレクションの要素を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1160">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1161">
            <paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1161">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1162">
            <paramref name="addMethod" /> が表すメソッドに、"Add" (大文字と小文字を区別しない) の名前が付いていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1162">The method that <paramref name="addMethod" /> represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="d5b6d-1163">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1163">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1164">
            <paramref name="addMethod" /> が表すメソッドは、インスタンス メソッドではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1164">The method that <paramref name="addMethod" /> represents is not an instance method.</span>
          </span>
          <span data-ttu-id="d5b6d-1165">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1165">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1166">
            <paramref name="arguments" /> には、<paramref name="addMethod" /> が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1166">
              <paramref name="arguments" /> does not contain the same number of elements as the number of parameters for the method that <paramref name="addMethod" /> represents.</span>
          </span>
          <span data-ttu-id="d5b6d-1167">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1167">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1168">
            <paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが、<paramref name="addMethod" /> の表すメソッドの対応するパラメーターの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1168">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ElementInit ElementInit (System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ElementInit ElementInit(class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ElementInit(System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ElementInit (addMethod As MethodInfo, ParamArray arguments As Expression()) As ElementInit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ElementInit ^ ElementInit(System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ElementInit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="addMethod">
          <span data-ttu-id="d5b6d-1169">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1169">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-1170">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1170">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to set the <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1171">2 番目の引数として値の配列を指定して、<see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1171">Creates an <see cref="T:System.Linq.Expressions.ElementInit" />, given an array of values as the second argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1172">指定した値に設定された <see cref="T:System.Linq.Expressions.ElementInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> プロパティを含む <see cref="P:System.Linq.Expressions.ElementInit.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1172">An <see cref="T:System.Linq.Expressions.ElementInit" /> that has the <see cref="P:System.Linq.Expressions.ElementInit.AddMethod" /> and <see cref="P:System.Linq.Expressions.ElementInit.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1173">`addMethod`パラメーターは、"Add"(大文字と小文字) という名前のインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1173">The `addMethod` parameter must represent an instance method named "Add" (case insensitive).</span></span> <span data-ttu-id="d5b6d-1174">Add メソッド内の要素の数と同じ数のパラメーターを持つ必要があります`arguments`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1174">The add method must have the same number of parameters as the number of elements in `arguments`.</span></span> <span data-ttu-id="d5b6d-1175"><xref:System.Linq.Expressions.Expression.Type%2A>内の各要素のプロパティ`arguments`add メソッドの対応するパラメーターの型に代入する必要があります可能性のある後*を引用符で囲む*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1175">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element in `arguments` must be assignable to the type of the corresponding parameter of the add method, possibly after *quoting*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-1176">対応するメソッドのパラメーターが型の場合にのみ、要素は引用符で囲まないで<xref:System.Linq.Expressions.Expression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1176">An element will be quoted only if the corresponding method parameter is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-1177">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1177">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-1178">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1178">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1179">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.ElementInit>呼び出しを表す、<xref:System.Collections.Generic.Dictionary%602.Add%2A>ディクショナリ コレクションの要素を初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1179">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ElementInit%28System.Reflection.MethodInfo%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.ElementInit> that represents calling the <xref:System.Collections.Generic.Dictionary%602.Add%2A> method to initialize an element of a dictionary collection.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#4)]
 [!code-vb[System.Linq.Expressions.Expression#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1180">
            <paramref name="addMethod" /> または <paramref name="arguments" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1180">
              <paramref name="addMethod" /> or <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1181">addMethod が表すメソッドの名前が "Add" (大文字と小文字は区別されません) ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1181">The method that addMethod represents is not named "Add" (case insensitive).</span>
          </span>
          <span data-ttu-id="d5b6d-1182">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1182">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1183">addMethod が表すメソッドが、インスタンス メソッドではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1183">The method that addMethod represents is not an instance method.</span>
          </span>
          <span data-ttu-id="d5b6d-1184">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1184">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1185">arguments に、addMethod が表すメソッドのパラメーターの数と同じ数の要素が含まれていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1185">arguments does not contain the same number of elements as the number of parameters for the method that addMethod represents.</span>
          </span>
          <span data-ttu-id="d5b6d-1186">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1186">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1187">
            <paramref name="arguments" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが、<paramref name="addMethod" /> の表すメソッドの対応するパラメーターの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1187">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DefaultExpression Empty ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DefaultExpression Empty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Empty () As DefaultExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DefaultExpression ^ Empty();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DefaultExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1188">
            <see cref="T:System.Void" /> 型の空の式を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1188">Creates an empty expression that has <see cref="T:System.Void" /> type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1189">
            <see cref="T:System.Linq.Expressions.DefaultExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、<see cref="F:System.Linq.Expressions.ExpressionType.Default" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="T:System.Void" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1189">A <see cref="T:System.Linq.Expressions.DefaultExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Default" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1190">式が必要ですが、操作が必要ない、空の式を使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1190">An empty expression can be used where an expression is expected but no action is desired.</span></span> <span data-ttu-id="d5b6d-1191">たとえば、ブロック式の最後の式として空の式を使用することができます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1191">For example, you can use an empty expression as the last expression in a block expression.</span></span> <span data-ttu-id="d5b6d-1192">この場合、ブロックの式の戻り値は void です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1192">In this case, the block expression's return value is void.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1193">次のコード例では、空の式を作成し、ブロックの式を追加する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1193">The following code example shows how to create an empty expression and add it to a block expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#31)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equal">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1194">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1194">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1195">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1195">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1196">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1196">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1197">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1197">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1198">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1198">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1199">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1199">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1200"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1200">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1201">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1201">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="d5b6d-1202">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1202">Otherwise, it is `false`.</span></span> <span data-ttu-id="d5b6d-1203"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1203">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="d5b6d-1204">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1204">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1205">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1205">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1206">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1206">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1207">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1207">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1208">メソッドの実装は、それ以外の場合、`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1208">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1209">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1209">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1210">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1210">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1211">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1211">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1212">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1212">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1213">次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1213">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1214">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1214">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1215">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1215">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1216">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1216">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1217">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1217">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1218">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1218">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1219">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1219">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1220">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1220">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1221">次のコード例では、2 つの引数の値が等しいかどうかをチェックする式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1221">The following code example shows how to create an expression that checks whether the values of its two arguments are equal.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#8)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1222">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1222">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1223">等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1223">The equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Equal">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Equal (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Equal(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Equal(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Equal (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Equal(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1224">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1224">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1225">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1225">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-1226">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1226">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1227">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1227">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1228">等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1228">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an equality comparison.</span>
          </span>
          <span data-ttu-id="d5b6d-1229">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1229">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1230">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1230">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1231">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1231">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1232"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1232">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1233">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティと等しい`liftToNull`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1233">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="d5b6d-1234">それ以外の場合、それらが両方とも`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1234">Otherwise, they are both `false`.</span></span> <span data-ttu-id="d5b6d-1235">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1235">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1236">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1236">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1237">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1237">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1238">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1238">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1239">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1239">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the equality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1240">メソッドの実装は、それ以外の場合、`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1240">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1241">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1241">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1242">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1242">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1243">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1243">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1244">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1244">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1245">次の 2 つの条件が満たされている場合、ノードはリフトされています。また、ノードの型は null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1245">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1246">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1246">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1247">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1247">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1248">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1248">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1249">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1249">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1250">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1250">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1251">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1251">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1252">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1252">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1253">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1253">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1254">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1254">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1255">
            <paramref name="method" /> は <see langword="null" /> で、等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1255">
              <paramref name="method" /> is <see langword="null" /> and the equality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOr">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1256">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="XOR" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1256">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1257">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1257">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1258">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1258">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1259">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1259">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1260">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1260">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1261">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1261">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1262"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1262">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1263">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1263">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-1264">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1264">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-1265"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1265">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1266">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1266">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1267">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1267">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1268">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1268">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1269">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`オーバー ロードするユーザー定義型を表す、`XOR`演算子を<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1269">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1270">それ以外の場合`left`です。型および`right`です。型が整数またはブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1270">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1271">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1271">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1272">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1272">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1273">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1273">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1274">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1274">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1275">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1275">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1276">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1276">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1277">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1277">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-1278">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1278">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1279">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1279">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1280">ノードの型は、定義済みの結果型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1280">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-1281">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1281">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1282">ノードの型は、定義済みの結果の型に対応する null 許容型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1282">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1283">次のコード例では、論理 XOR 演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1283">The following code example shows how to create an expression that represents the logical XOR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#9)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1284">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1284">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1285">
            <see langword="XOR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1285">The <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOr">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOr (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOr(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOr(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOr (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOr(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1286">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1286">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1287">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1287">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1288">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1288">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1289">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの <see langword="XOR" /> 演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1289">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="XOR" /> operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
          <span data-ttu-id="d5b6d-1290">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1290">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1291">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1291">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOr" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1292">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1292">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1293"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1293">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1294">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1294">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-1295">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1295">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-1296"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1296">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1297">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1297">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1298">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1298">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1299">次の規則は、選択した操作のメソッドを実装することを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1299">The following rules determine the chosen implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1300">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1300">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1301">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`オーバー ロードするユーザー定義型を表す、`XOR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1301">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the `XOR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1302">それ以外の場合`left`です。型および`right`です。型が整数またはブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1302">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1303">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1303">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1304">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1304">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1305">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1305">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1306">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1306">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1307">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1307">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1308">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1308">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1309">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1309">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-1310">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1310">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1311">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1311">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1312">ノードの型は、定義済みの結果型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1312">The type of the node is the result type of the predefined `XOR` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-1313">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1313">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1314">ノードの型は、定義済みの結果の型に対応する null 許容型`XOR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1314">The type of the node is the nullable type that corresponds to the result type of the predefined `XOR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1315">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1315">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1316">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1316">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1317">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には <see langword="XOR" /> 演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1317">
              <paramref name="method" /> is <see langword="null" /> and the <see langword="XOR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ExclusiveOrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1318">ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1318">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1319">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1319">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1320">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1320">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1321">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1321">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1322">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1322">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1323">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1323">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1324">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1324">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1325">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1325">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1326">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1326">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1327">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1327">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveOrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ExclusiveOrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ExclusiveOrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ExclusiveOrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ExclusiveOrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ExclusiveOrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1328">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1328">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1329">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1329">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1330">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1330">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-1331">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1331">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1332">ユーザー定義型の <c>op_ExclusiveOr</c> を使用して、ビットごとの XOR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1332">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise XOR assignment operation, using <c>op_ExclusiveOr</c> for user-defined types.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1333">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1333">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ExclusiveOrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Field">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1334">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1334">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, System.Reflection.FieldInfo field);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Reflection.FieldInfo field) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Reflection.FieldInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::Reflection::FieldInfo ^ field);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="field" Type="System.Reflection.FieldInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1335">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1335">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="d5b6d-1336">
            <see langword="static" /> (Visual Basic では <see langword="Shared" />) の場合、<c>expression</c> は <see langword="null" /> にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1336">For <see langword="static" /> (<see langword="Shared" /> in Visual Basic), <c>expression</c> must be <see langword="null" />.</span>
          </span>
        </param>
        <param name="field">
          <span data-ttu-id="d5b6d-1337">
            <see cref="T:System.Reflection.FieldInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1337">The <see cref="T:System.Reflection.FieldInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1338">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1338">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1339">
            <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1339">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1340"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.FieldInfo.FieldType%2A>プロパティ`field`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1340">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of `field`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1341">
            <paramref name="field" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1341">
              <paramref name="field" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1342">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1342">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1343">
            <paramref name="field" /> によって表されるフィールドが <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1343">The field represented by <paramref name="field" /> is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1344">
            <paramref name="expression" />.Type は、<paramref name="field" /> によって表されるフィールドの宣言型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1344">
              <paramref name="expression" />.Type is not assignable to the declaring type of the field represented by <paramref name="field" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, System::String ^ fieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1345">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> に <c>fieldName</c> という名前のフィールドが含まれている <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1345">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a field named <c>fieldName</c>.</span>
          </span>
          <span data-ttu-id="d5b6d-1346">静的フィールドの場合は null を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1346">This can be null for static fields.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="d5b6d-1347">アクセスするフィールドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1347">The name of a field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1348">フィールドの名前を指定してフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1348">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field given the name of the field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1349">
            <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="fieldName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1349">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.FieldInfo" /> that represents the field denoted by <paramref name="fieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1350"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.FieldInfo.FieldType%2A>のプロパティ、<xref:System.Reflection.FieldInfo>により示されるフィールドを表す`fieldName`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1350">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.FieldInfo.FieldType%2A> property of the <xref:System.Reflection.FieldInfo> that represents the field denoted by `fieldName`.</span></span>  
  
 <span data-ttu-id="d5b6d-1351">このメソッドは、検索`expression`です。型およびその基本型、名前が指定されているフィールドの`fieldName`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1351">This method searches `expression`.Type and its base types for a field that has the name `fieldName`.</span></span> <span data-ttu-id="d5b6d-1352">パブリック フィールドは、パブリックでないフィールドに対する 基本設定を指定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1352">Public fields are given preference over non-public fields.</span></span> <span data-ttu-id="d5b6d-1353">一致するフィールドが見つかった場合、このメソッドは、渡します`expression`と<xref:System.Reflection.FieldInfo>にそのフィールドを表す<xref:System.Linq.Expressions.Expression.Field%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1353">If a matching field is found, this method passes `expression` and the <xref:System.Reflection.FieldInfo> that represents that field to <xref:System.Linq.Expressions.Expression.Field%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1354">次のコード例では、フィールドへのアクセスを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1354">The following code example shows how to create an expression that represents accessing a field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#37)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#37)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1355">
            <paramref name="expression" /> または <paramref name="fieldName" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1355">
              <paramref name="expression" /> or <paramref name="fieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1356">
            <paramref name="fieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のフィールドが定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1356">No field named <paramref name="fieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Field">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Field (System.Linq.Expressions.Expression expression, Type type, string fieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Field(class System.Linq.Expressions.Expression expression, class System.Type type, string fieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Field(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Field(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ fieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="fieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1357">フィールドの格納オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1357">The containing object of the field.</span>
          </span>
          <span data-ttu-id="d5b6d-1358">静的フィールドの場合は null を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1358">This can be null for static fields.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-1359">フィールドを格納している <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1359">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the field.</span>
          </span>
        </param>
        <param name="fieldName">
          <span data-ttu-id="d5b6d-1360">アクセスされるフィールド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1360">The field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1361">フィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1361">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1362">作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1362">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActionType">
      <MemberSignature Language="C#" Value="public static Type GetActionType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetActionType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetActionType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetActionType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetActionType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="d5b6d-1363">
            <see cref="T:System.Type" /> デリゲート型の型引数を指定する最大 16 個の <see langword="System.Action" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1363">An array of up to sixteen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Action" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1364">特定の型引数を持つ汎用 <c>System.Action</c> デリゲート型を表す <see cref="T:System.Type" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1364">Creates a <see cref="T:System.Type" /> object that represents a generic <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1365">指定した型引数を持つ <c>System.Action</c> デリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1365">The type of a <c>System.Action</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1366">例として場合の要素`typeArgs`型を表す`T1…Tn`、結果の<xref:System.Type>オブジェクトが構築されたデリゲート型を表す`System.Action<T1,…,Tn>`(C#) または`System.Action(Of T1,…,Tn)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1366">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Action<T1,…,Tn>` in C# or `System.Action(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1367">
            <paramref name="typeArgs" /> に、16 個を超える要素が格納されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1367">
              <paramref name="typeArgs" /> contains more than sixteen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1368">
            <paramref name="typeArgs" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1368">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GetDelegateType">
      <MemberSignature Language="C#" Value="public static Type GetDelegateType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetDelegateType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetDelegateType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetDelegateType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetDelegateType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="d5b6d-1369">デリゲートの型引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1369">The type arguments of the delegate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1370">特定の型引数を持つ汎用 <c>System.Func</c> または <c>System.Action</c> デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1370">Gets a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> or <c>System.Action</c> delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1371">デリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1371">The delegate type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1372">最後の型引数では、デリゲートの戻り値の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1372">The last type argument determines the return type of the delegate.</span></span> <span data-ttu-id="d5b6d-1373">十分な大きさ Func またはアクションがない場合は、カスタム デリゲート型が生成されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1373">If no Func or Action is large enough, it will generate a custom delegate type.</span></span>  
  
 <span data-ttu-id="d5b6d-1374">Func と同様には、最後の引数は、戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1374">As with Func, the last argument is the return type.</span></span> <span data-ttu-id="d5b6d-1375">アクションを生成するために System.Void に設定することができます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1375">It can be set to System.Void to produce an Action.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFuncType">
      <MemberSignature Language="C#" Value="public static Type GetFuncType (params Type[] typeArgs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Type GetFuncType(class System.Type[] typeArgs) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GetFuncType(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetFuncType (ParamArray typeArgs As Type()) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static Type ^ GetFuncType(... cli::array &lt;Type ^&gt; ^ typeArgs);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="d5b6d-1376">
            <see cref="T:System.Type" /> デリゲート型の型引数を指定する 1 個から 17 個の <see langword="System.Func" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1376">An array of one to seventeen <see cref="T:System.Type" /> objects that specify the type arguments for the <see langword="System.Func" /> delegate type.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1377">特定の型引数を持つ汎用 <c>System.Func</c> デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1377">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic <c>System.Func</c> delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="d5b6d-1378">最後の型引数で、作成するデリゲートの戻り値の型を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1378">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1379">指定した型引数を持つ <c>System.Func</c> デリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1379">The type of a <c>System.Func</c> delegate that has the specified type arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1380">`typeArgs` 少なくとも 1 つと最大 17 個の要素を含める必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1380">`typeArgs` must contain at least one and at most seventeen elements.</span></span>  
  
 <span data-ttu-id="d5b6d-1381">例として場合の要素`typeArgs`型を表す`T1…Tn`、結果の<xref:System.Type>オブジェクトが構築されたデリゲート型を表す`System.Func<T1,…,Tn>`(C#) または`System.Func(Of T1,…,Tn)`Visual Basic でします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1381">As an example, if the elements of `typeArgs` represent the types `T1…Tn`, the resulting <xref:System.Type> object represents the constructed delegate type `System.Func<T1,…,Tn>` in C# or `System.Func(Of T1,…,Tn)` in Visual Basic.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1382">
            <paramref name="typeArgs" /> には、1 個未満または 17 個を超える要素が格納されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1382">
              <paramref name="typeArgs" /> contains fewer than one or more than seventeen elements.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1383">
            <paramref name="typeArgs" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1383">
              <paramref name="typeArgs" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Goto">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1384">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1384">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-1385">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1385">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1386">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1386">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1387">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <see cref="P:System.Linq.Expressions.GotoExpression.Target" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1387">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-1388">次の例を含む式を作成する方法を示しています、<xref:System.Linq.Expressions.GotoExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1388">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.GotoExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#45)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#45)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Goto (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-1389">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1389">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d5b6d-1390">ジャンプ時に関連付けられているラベルに渡される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1390">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1391">go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1391">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement.</span>
          </span>
          <span data-ttu-id="d5b6d-1392">ジャンプ時にラベルに渡す値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1392">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1393">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1393">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-1394">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1394">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-1395">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1395">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1396">型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1396">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1397">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、指定された値に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> プロパティ、<see cref="P:System.Linq.Expressions.GotoExpression.Target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1397">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to the specified value, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Goto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Goto (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Goto(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Goto(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Goto(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-1398">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1398">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d5b6d-1399">ジャンプ時に関連付けられているラベルに渡される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1399">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-1400">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1400">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1401">型を指定して、go to ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1401">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a "go to" statement with the specified type.</span>
          </span>
          <span data-ttu-id="d5b6d-1402">ジャンプ時にラベルに渡す値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1402">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1403">Goto と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1403">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Goto, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1404">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1404">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1405">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1405">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1406">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1406">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1407">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1407">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1408">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1408">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1409">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1409">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1410"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1410">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1411">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1411">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="d5b6d-1412">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1412">Otherwise, it is `false`.</span></span> <span data-ttu-id="d5b6d-1413"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1413">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="d5b6d-1414"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1414">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1415">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1415">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1416">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1416">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1417">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1417">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1418">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「大なり」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1418">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1419">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1419">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1420">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1420">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1421">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1421">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1422">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1422">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1423">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1423">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1424">次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1424">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1425">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1425">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1426">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1426">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1427">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1427">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1428">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1428">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1429">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1429">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1430">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1430">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1431">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1431">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1432">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1432">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#10)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1433">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1433">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1434">"大なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1434">The "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1435">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1435">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1436">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-1437">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1437">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1438">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1438">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1439">"大なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1439">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than" numeric comparison.</span>
          </span>
          <span data-ttu-id="d5b6d-1440">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1440">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1441">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1441">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1442">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1442">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1443"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1443">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1444">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティと等しい`liftToNull`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1444">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="d5b6d-1445">それ以外の場合、それらが両方とも`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1445">Otherwise, they are both `false`.</span></span> <span data-ttu-id="d5b6d-1446"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1446">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1447">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1447">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1448">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1448">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1449">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1449">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="d5b6d-1450">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1450">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1451">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「大なり」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1451">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1452">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1452">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1453">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1453">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1454">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1454">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1455">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1455">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1456">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1456">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1457">次の 2 つの条件が満たされている場合、ノードはリフトされています。また、ノードの型は null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1457">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1458">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1458">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1459">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1459">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1460">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1460">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1461">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1461">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1462">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1462">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1463">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1463">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1464">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1464">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1465">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1465">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1466">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1466">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1467">
            <paramref name="method" /> は <see langword="null" /> で、"大なり" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1467">
              <paramref name="method" /> is <see langword="null" /> and the "greater than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GreaterThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1468">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1468">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1469">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1469">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1470">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1470">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1471">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1471">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1472">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1472">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1473">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1473">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1474"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1474">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1475">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1475">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="d5b6d-1476">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1476">Otherwise, it is `false`.</span></span> <span data-ttu-id="d5b6d-1477"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1477">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="d5b6d-1478"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1478">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1479">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1479">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1480">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1480">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1481">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1481">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1482">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、「より大きいか等しい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1482">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1483">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1483">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1484">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1484">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1485">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1485">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1486">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1486">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1487">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1487">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1488">次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1488">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1489">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1489">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1490">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1490">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1491">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1491">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1492">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1492">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1493">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1493">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1494">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1494">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1495">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1495">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1496">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1496">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#11)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1497">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1497">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1498">"以上" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1498">The "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression GreaterThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression GreaterThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.GreaterThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GreaterThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ GreaterThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1499">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1499">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1500">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1500">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-1501">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1501">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1502">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1502">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1503">"以上" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1503">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "greater than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1504">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1504">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.GreaterThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1505">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1505">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1506"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1506">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1507">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティと等しい`liftToNull`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1507">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="d5b6d-1508">それ以外の場合、それらが両方とも`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1508">Otherwise, they are both `false`.</span></span> <span data-ttu-id="d5b6d-1509"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1509">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1510">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1510">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1511">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1511">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1512">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1512">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1513">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1513">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1514">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`、「より大きいか等しい」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1514">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "greater than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1515">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1515">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1516">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1516">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1517">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1517">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1518">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1518">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1519">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1519">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1520">次の 2 つの条件が満たされている場合、ノードはリフトされています。また、ノードの型は null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1520">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1521">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1521">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1522">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1522">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1523">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1523">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1524">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1524">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1525">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1525">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1526">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1526">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1527">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1527">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1528">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1528">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1529">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1529">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1530">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には "greater than or equal" 演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1530">
              <paramref name="method" /> is <see langword="null" /> and the "greater than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="IfThen">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThen (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThen(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThen (test As Expression, ifTrue As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThen(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="d5b6d-1531">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1531">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="d5b6d-1532">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1532">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1533">
            <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントを指定して、条件付きブロックを表す <see langword="if" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1533">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with an <see langword="if" /> statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1534">
            <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> プロパティおよび <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1534">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, properties set to the specified values.</span>
          </span>
          <span data-ttu-id="d5b6d-1535">
            <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> プロパティは既定の式に設定されます。また、このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1535">The <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property is set to default expression and the type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-1536">次のコード例では、条件付きブロックを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1536">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#32)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#32)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IfThenElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ConditionalExpression IfThenElse (System.Linq.Expressions.Expression test, System.Linq.Expressions.Expression ifTrue, System.Linq.Expressions.Expression ifFalse);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ConditionalExpression IfThenElse(class System.Linq.Expressions.Expression test, class System.Linq.Expressions.Expression ifTrue, class System.Linq.Expressions.Expression ifFalse) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IfThenElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IfThenElse (test As Expression, ifTrue As Expression, ifFalse As Expression) As ConditionalExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ConditionalExpression ^ IfThenElse(System::Linq::Expressions::Expression ^ test, System::Linq::Expressions::Expression ^ ifTrue, System::Linq::Expressions::Expression ^ ifFalse);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ConditionalExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifTrue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="ifFalse" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="test">
          <span data-ttu-id="d5b6d-1537">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1537">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" /> property equal to.</span>
          </span>
        </param>
        <param name="ifTrue">
          <span data-ttu-id="d5b6d-1538">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1538">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> property equal to.</span>
          </span>
        </param>
        <param name="ifFalse">
          <span data-ttu-id="d5b6d-1539">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1539">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1540">
            <see cref="T:System.Linq.Expressions.ConditionalExpression" /> ステートメントと <see langword="if" /> ステートメントを指定して、条件付きブロックを表す <see langword="else" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1540">Creates a <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that represents a conditional block with <see langword="if" /> and <see langword="else" /> statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1541">
            <see cref="T:System.Linq.Expressions.ConditionalExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" />、<see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />、および <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1541">A <see cref="T:System.Linq.Expressions.ConditionalExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Conditional" /> and the <see cref="P:System.Linq.Expressions.ConditionalExpression.Test" />, <see cref="P:System.Linq.Expressions.ConditionalExpression.IfTrue" />, and <see cref="P:System.Linq.Expressions.ConditionalExpression.IfFalse" /> properties set to the specified values.</span>
          </span>
          <span data-ttu-id="d5b6d-1542">このメソッドによって返される結果の <see cref="T:System.Linq.Expressions.ConditionalExpression" /> の型は <see cref="T:System.Void" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1542">The type of the resulting <see cref="T:System.Linq.Expressions.ConditionalExpression" /> returned by this method is <see cref="T:System.Void" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-1543">次のコード例では、条件付きブロックを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1543">The following code example shows how to create an expression that represents a conditional block.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#33)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#33)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Increment">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1544">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1544">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1545">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1545">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1546">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1546">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression value by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1547">インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1547">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1548">この式は、機能に渡されるオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1548">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1549">次のコード例では、インクリメント演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1549">The following code example shows how to create an expression that represents an increment operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#24)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#24)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Increment">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Increment (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Increment(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Increment(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Increment(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1550">インクリメントする <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1550">An <see cref="T:System.Linq.Expressions.Expression" /> to increment.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1551">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1551">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1552">式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1552">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incrementing of the expression by 1.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1553">インクリメントされた式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1553">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the incremented expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1554">この式は、機能に渡されるオブジェクトの値を変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1554">This expression is functional and does not change the value of the object that is passed to it.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1555">
            <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1555">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1556">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1556">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-1557">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトを格納している <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1557">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1558">引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1558">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1559">指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1559">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1560"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.InvocationExpression>で表されるデリゲートの戻り値の型を表す`expression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1560">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="d5b6d-1561"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.InvocationExpression>空場合`arguments`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1561">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="d5b6d-1562">それ以外の場合と同じ要素が含まれている`arguments`そのうちの一部を除く<xref:System.Linq.Expressions.Expression>オブジェクトがあります*引用符で囲まれた*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1562">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-1563">要素は引用符で囲むことによって、デリゲートの対応するパラメーターが表される場合にのみ`expression`の種類は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1563">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-1564">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1564">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-1565">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1565">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1566">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.InvocationExpression>引数を指定して、ラムダ式の呼び出しを表すです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1566">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1567">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1567">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1568">
            <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1568">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1569">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1569">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1570">
            <paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1570">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1571">
            <paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1571">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.InvocationExpression Invoke (System.Linq.Expressions.Expression expression, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.InvocationExpression Invoke(class System.Linq.Expressions.Expression expression, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Invoke(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::InvocationExpression ^ Invoke(System::Linq::Expressions::Expression ^ expression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.InvocationExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1572">適用するデリゲートまたはラムダ式を表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1572">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the delegate or lambda expression to be applied.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-1573">デリゲートまたはラムダ式が適用される引数を表す <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1573">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that represent the arguments that the delegate or lambda expression is applied to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1574">引数式のリストにデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1574">Creates an <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies a delegate or lambda expression to a list of argument expressions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1575">指定された引数に、指定されたデリゲートまたはラムダ式を適用する <see cref="T:System.Linq.Expressions.InvocationExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1575">An <see cref="T:System.Linq.Expressions.InvocationExpression" /> that applies the specified delegate or lambda expression to the provided arguments.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1576"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.InvocationExpression>で表されるデリゲートの戻り値の型を表す`expression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1576">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> represents the return type of the delegate that is represented by `expression`.Type.</span></span>  
  
 <span data-ttu-id="d5b6d-1577"><xref:System.Linq.Expressions.InvocationExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.InvocationExpression>空場合`arguments`は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1577">The <xref:System.Linq.Expressions.InvocationExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.InvocationExpression> is empty if `arguments` is `null`.</span></span> <span data-ttu-id="d5b6d-1578">それ以外の場合と同じ要素が含まれている`arguments`そのうちの一部を除く<xref:System.Linq.Expressions.Expression>オブジェクトがあります*引用符で囲まれた*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1578">Otherwise, it contains the same elements as `arguments` except that some of these <xref:System.Linq.Expressions.Expression> objects may be *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-1579">要素は引用符で囲むことによって、デリゲートの対応するパラメーターが表される場合にのみ`expression`の種類は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1579">An element will be quoted only if the corresponding parameter of the delegate represented by `expression` is of type <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-1580">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1580">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-1581">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`arguments`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1581">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `arguments`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1582">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.InvocationExpression>引数を指定して、ラムダ式の呼び出しを表すです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1582">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.Invoke%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%5B%5D%29> method to create an <xref:System.Linq.Expressions.InvocationExpression> that represents the invocation of a lambda expression with specified arguments.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#6)]
 [!code-vb[System.Linq.Expressions.Expression#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1583">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1583">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1584">
            <paramref name="expression" />.Type はデリゲート型または <see cref="T:System.Linq.Expressions.Expression`1" /> を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1584">
              <paramref name="expression" />.Type does not represent a delegate type or an <see cref="T:System.Linq.Expressions.Expression`1" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1585">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1585">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1586">
            <paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="expression" /> によって表されるデリゲートの対応するパラメーターの型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1586">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1587">
            <paramref name="arguments" /> に、<paramref name="expression" /> により表されるデリゲートのパラメーターのリストと同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1587">
              <paramref name="arguments" /> does not contain the same number of elements as the list of parameters for the delegate represented by <paramref name="expression" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsFalse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1588">式が false に評価されるかどうかを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1588">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1589">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1589">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1590">式が false に評価されるかどうかを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1590">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1591">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1591">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsFalse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsFalse (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsFalse(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsFalse(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsFalse(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1592">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1592">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1593">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1593">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1594">式が false に評価されるかどうかを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1594">Returns whether the expression evaluates to false.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1595">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1595">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsTrue">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1596">式が true に評価されるかどうかを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1596">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1597">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1597">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1598">式が true に評価されるかどうかを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1598">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1599">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1599">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTrue">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression IsTrue (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression IsTrue(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.IsTrue(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ IsTrue(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-1600">評価する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1600">An <see cref="T:System.Linq.Expressions.Expression" /> to evaluate.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1601">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1601">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1602">式が true に評価されるかどうかを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1602">Returns whether the expression evaluates to true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1603">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1603">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Label">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1604">ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1604">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label () As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1605">void 型で名前なしのラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1605">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and no name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1606">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1606">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-1607">次の例を含む式を作成する方法を示しています、<xref:System.Linq.Expressions.LabelTarget>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1607">The following example demonstrates how to create an expression that contains a <xref:System.Linq.Expressions.LabelTarget> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-1608">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1608">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1609">既定値のないラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1609">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label without a default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1610">既定値のない <see cref="T:System.Linq.Expressions.LabelExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1610">A <see cref="T:System.Linq.Expressions.LabelExpression" /> without a default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (name As String) As LabelTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="d5b6d-1611">ラベルの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1611">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1612">指定された名前を持つ void 型のラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1612">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with void type and the given name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1613">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1613">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-1614">ラベルにジャンプするときに渡す値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1614">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1615">型を指定して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1615">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1616">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1616">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-1617">次の例で使用する方法、<xref:System.Linq.Expressions.LabelTarget>ループ式内のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1617">The following example demonstrates how to use a <xref:System.Linq.Expressions.LabelTarget> object in a loop expression.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelExpression Label (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelExpression Label(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Label (target As LabelTarget, defaultValue As Expression) As LabelExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelExpression ^ Label(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ defaultValue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="defaultValue" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-1618">この <see cref="T:System.Linq.Expressions.LabelTarget" /> が関連付けられる <see cref="T:System.Linq.Expressions.LabelExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1618">The <see cref="T:System.Linq.Expressions.LabelTarget" /> which this <see cref="T:System.Linq.Expressions.LabelExpression" /> will be associated with.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="d5b6d-1619">通常の制御フローを経てラベルに到達した場合のこの <see cref="T:System.Linq.Expressions.LabelExpression" /> の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1619">The value of this <see cref="T:System.Linq.Expressions.LabelExpression" /> when the label is reached through regular control flow.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1620">指定された既定値を持つラベルを表す <see cref="T:System.Linq.Expressions.LabelExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1620">Creates a <see cref="T:System.Linq.Expressions.LabelExpression" /> representing a label with the given default value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1621">指定された既定値を持つ <see cref="T:System.Linq.Expressions.LabelExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1621">A <see cref="T:System.Linq.Expressions.LabelExpression" /> with the given default value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LabelTarget Label (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LabelTarget Label(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Label(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LabelTarget ^ Label(Type ^ type, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LabelTarget</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-1622">ラベルにジャンプするときに渡す値の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1622">The type of value that is passed when jumping to the label.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-1623">ラベルの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1623">The name of the label.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1624">指定した型および名前を使用して、ラベルを表す <see cref="T:System.Linq.Expressions.LabelTarget" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1624">Creates a <see cref="T:System.Linq.Expressions.LabelTarget" /> representing a label with the given type and name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1625">新しい <see cref="T:System.Linq.Expressions.LabelTarget" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1625">The new <see cref="T:System.Linq.Expressions.LabelTarget" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Lambda">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1626">ラムダ式を表す式ツリーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1626">Creates an expression tree that represents a lambda expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-1627">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1627">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1628">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1628">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1629">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1629">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1630">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1630">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-1631">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1631">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1632">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1632">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1633">最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1633">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1634">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1634">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1635">`parameters`パラメーターが 16 個の要素にはできません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1635">The `parameters` parameter must not have more than sixteen elements.</span></span>  
  
 <span data-ttu-id="d5b6d-1636">要素`parameters`でパラメーターの式と同じ参照にする必要があります`body`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1636">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="d5b6d-1637">このメソッドは適切なデリゲート型のいずれかから、構築、`System.Func`汎用デリゲート。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1637">This method constructs an appropriate delegate type from one of the `System.Func` generic delegates.</span></span> <span data-ttu-id="d5b6d-1638">これは、後のいずれかにデリゲート型を渡します、<xref:System.Linq.Expressions.ExpressionType.Lambda>を作成するファクトリ メソッドを<xref:System.Linq.Expressions.LambdaExpression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1638">It then passes the delegate type to one of the <xref:System.Linq.Expressions.ExpressionType.Lambda> factory methods to create a <xref:System.Linq.Expressions.LambdaExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1639">
            <paramref name="body" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1639">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1640">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1640">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1641">
            <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1641">One or more elements of <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1642">
            <paramref name="parameters" /> に、16 個を超える要素が格納されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1642">
              <paramref name="parameters" /> contains more than sixteen elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-1643">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1643">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1644">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1644">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1645">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1645">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1646">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1646">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1647">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1647">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-1648">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1648">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1649">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1649">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1650">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1650">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1651">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1651">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1652">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1652">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-1653">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1653">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-1654">ラムダの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1654">The name for the lambda.</span>
          </span>
          <span data-ttu-id="d5b6d-1655">デバッグ情報を出力するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1655">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1656">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1656">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1657">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1657">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1658">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1658">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-1659">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1659">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-1660">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1660">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1661">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1661">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1662">最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1662">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="d5b6d-1663">これは、コンパイル時にデリゲート型が不明な場合に使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1663">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1664">
            <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1664">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1665">この関数から返されるオブジェクトの型が<xref:System.Linq.Expressions.Expression%601>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1665">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="d5b6d-1666"><xref:System.Linq.Expressions.LambdaExpression>をコンパイル時に、ラムダ式の具体的な型を認識していないため、返されたオブジェクトを表す型を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1666">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="d5b6d-1667">によって表されるデリゲート型のパラメーターの数`delegateType`の長さでなければなりません。`parameters`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1667">The number of parameters for the delegate type represented by`delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="d5b6d-1668">要素`parameters`でパラメーターの式と同じ参照にする必要があります`body`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1668">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="d5b6d-1669"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティと等しい`delegateType`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1669">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="d5b6d-1670">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1670">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1671">次の例では、渡された引数に 1 を追加する、ラムダ式を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1671">The following example demonstrates how to create an expression that represents a lambda expression that adds 1 to the passed argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#42)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1672">
            <paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1672">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1673">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1673">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1674">
            <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1674">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1675">
            <paramref name="delegateType" /> がデリゲート型を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1675">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="d5b6d-1676">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1676">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1677">
            <paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1677">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1678">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1678">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1679">
            <paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1679">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1680">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1680">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1681">
            <paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1681">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-1682">ラムダのデリゲート シグネチャを表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1682">A <see cref="T:System.Type" /> that represents a delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-1683">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1683">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1684">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1684">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1685">最初にデリゲート型を構築することにより <see cref="T:System.Linq.Expressions.LambdaExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1685">Creates a <see cref="T:System.Linq.Expressions.LambdaExpression" /> by first constructing a delegate type.</span>
          </span>
          <span data-ttu-id="d5b6d-1686">これは、コンパイル時にデリゲート型が不明な場合に使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1686">It can be used when the delegate type is not known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1687">
            <see cref="P:System.Linq.Expressions.Expression.NodeType" /> と等しい <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティを含むラムダ式を表すオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1687">An object that represents a lambda expression which has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1688">この関数から返されるオブジェクトの型が<xref:System.Linq.Expressions.Expression%601>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1688">The object that is returned from this function is of type <xref:System.Linq.Expressions.Expression%601>.</span></span> <span data-ttu-id="d5b6d-1689"><xref:System.Linq.Expressions.LambdaExpression>をコンパイル時に、ラムダ式の具体的な型を認識していないため、返されたオブジェクトを表す型を使用します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1689">The <xref:System.Linq.Expressions.LambdaExpression> type is used to represent the returned object because the concrete type of the lambda expression is not known at compile time.</span></span>  
  
 <span data-ttu-id="d5b6d-1690">によって表されるデリゲート型のパラメーターの数`delegateType`の長さでなければなりません。`parameters`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1690">The number of parameters for the delegate type represented by `delegateType` must equal the length of `parameters`.</span></span>  
  
 <span data-ttu-id="d5b6d-1691">要素`parameters`でパラメーターの式と同じ参照にする必要があります`body`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1691">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="d5b6d-1692"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティと等しい`delegateType`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1692">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object is equal to `delegateType`.</span></span> <span data-ttu-id="d5b6d-1693">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1693">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1694">
            <paramref name="delegateType" /> または <paramref name="body" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1694">
              <paramref name="delegateType" /> or <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1695">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1695">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1696">
            <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1696">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1697">
            <paramref name="delegateType" /> がデリゲート型を表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1697">
              <paramref name="delegateType" /> does not represent a delegate type.</span>
          </span>
          <span data-ttu-id="d5b6d-1698">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1698">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1699">
            <paramref name="body" />.Type は、<paramref name="delegateType" /> によって表されるデリゲート型の戻り値の型に代入できない型を表しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1699">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1700">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1700">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1701">
            <paramref name="parameters" /> に、<paramref name="delegateType" /> により表されるデリゲート型のパラメーターのリストと同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1701">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1702">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1702">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1703">
            <paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="delegateType" /> によって表されるデリゲート型の対応するパラメーター型から代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1703">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of the delegate type represented by <paramref name="delegateType" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-1704">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1704">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-1705">ラムダの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1705">The name for the lambda.</span>
          </span>
          <span data-ttu-id="d5b6d-1706">デバッグ情報を出力するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1706">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1707">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1707">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1708">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1708">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1709">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1709">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1710">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1710">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-1711">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1711">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-1712">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1712">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1713">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1713">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1714">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1715">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1715">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1716">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1716">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-1717">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1717">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-1718">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1718">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1719">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1719">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1720">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1720">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1721">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1721">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1722">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1722">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-1723">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1723">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-1724">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1724">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-1725">ラムダの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1725">The name for the lambda.</span>
          </span>
          <span data-ttu-id="d5b6d-1726">デバッグ情報を出力するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1726">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1727">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1727">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1728">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1728">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1729">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1729">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LambdaExpression Lambda (Type delegateType, System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LambdaExpression Lambda(class System.Type delegateType, class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda(System.Type,System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda (delegateType As Type, body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As LambdaExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LambdaExpression ^ Lambda(Type ^ delegateType, System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LambdaExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-1730">ラムダのデリゲート シグネチャを表す <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1730">A <see cref="P:System.Linq.Expressions.Expression.Type" /> representing the delegate signature for the lambda.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-1731">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1731">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-1732">ラムダの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1732">The name for the lambda.</span>
          </span>
          <span data-ttu-id="d5b6d-1733">デバッグ情報を出力するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1733">Used for emitting debug information.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1734">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1734">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1735">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1735">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1736">最初にデリゲート型を構築することにより LambdaExpression を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1736">Creates a LambdaExpression by first constructing a delegate type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1737">Lambda と等しい <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティと、指定した値に設定された <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1737">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to Lambda and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="d5b6d-1738">デリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1738">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="d5b6d-1739">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1739">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1740">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1740">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1741">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1741">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1742">
            <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1742">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1743">デリゲート型のパラメーターの数`TDelegate`内の要素の数と同じにする必要があります`parameters`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1743">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="d5b6d-1744">要素`parameters`でパラメーターの式と同じ参照にする必要があります`body`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1744">The elements of `parameters` must be reference equal to the parameter expressions in `body`.</span></span>  
  
 <span data-ttu-id="d5b6d-1745"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティが型を表す`TDelegate`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1745">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="d5b6d-1746">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1746">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1747">
            <paramref name="body" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1747">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1748">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1748">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1749">
            <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1749">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1750">
            <paramref name="TDelegate" /> がデリゲート型でありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1750">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="d5b6d-1751">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1751">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1752">
            <paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1752">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1753">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1753">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1754">
            <paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1754">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1755">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1755">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1756">
            <paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1756">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="d5b6d-1757">デリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1757">A delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="d5b6d-1758">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1758">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1759">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1759">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1760">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1760">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1761">
            <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1761">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1762">デリゲート型のパラメーターの数`TDelegate`内の要素の数と同じにする必要があります`parameters`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1762">The number of parameters for the delegate type `TDelegate` must equal the number of elements in `parameters`.</span></span>  
  
 <span data-ttu-id="d5b6d-1763">要素`parameters`でパラメーターの式と同じ参照にする必要があります`body`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1763">The elements of `parameters` must be reference equal to the parameter expressions in`body`.</span></span>  
  
 <span data-ttu-id="d5b6d-1764"><xref:System.Linq.Expressions.Expression.Type%2A>結果として得られるオブジェクトのプロパティが型を表す`TDelegate`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1764">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting object represents the type `TDelegate`.</span></span> <span data-ttu-id="d5b6d-1765">場合`parameters`は`null`、<xref:System.Linq.Expressions.LambdaExpression.Parameters%2A>結果として得られるオブジェクトのプロパティが空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1765">If `parameters` is `null`, the <xref:System.Linq.Expressions.LambdaExpression.Parameters%2A> property of the resulting object is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1766">
            <paramref name="body" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1766">
              <paramref name="body" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1767">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1767">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1768">
            <paramref name="parameters" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1768">One or more elements in <paramref name="parameters" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1769">
            <paramref name="TDelegate" /> がデリゲート型でありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1769">
              <paramref name="TDelegate" /> is not a delegate type.</span>
          </span>
          <span data-ttu-id="d5b6d-1770">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1770">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1771">
            <paramref name="body" />.Type は、<paramref name="TDelegate" /> の戻り値の型に代入できない型を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1771">
              <paramref name="body" />.Type represents a type that is not assignable to the return type of <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1772">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1772">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1773">
            <paramref name="parameters" /> に、<paramref name="TDelegate" /> のパラメーターのリストと同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1773">
              <paramref name="parameters" /> does not contain the same number of elements as the list of parameters for <paramref name="TDelegate" />.</span>
          </span>
          <span data-ttu-id="d5b6d-1774">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1774">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-1775">
            <paramref name="parameters" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="TDelegate" /> の対応するパラメーター型から代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1775">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="parameters" /> is not assignable from the type of the corresponding parameter type of <paramref name="TDelegate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="d5b6d-1776">デリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1776">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="d5b6d-1777">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1777">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1778">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1778">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1779">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1780">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1780">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1781">
            <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1781">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, bool tailCall, params System.Linq.Expressions.ParameterExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, bool tailCall, class System.Linq.Expressions.ParameterExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.Boolean,System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, tailCall As Boolean, ParamArray parameters As ParameterExpression()) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, bool tailCall, ... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="d5b6d-1782">デリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1782">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="d5b6d-1783">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1783">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1784">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1784">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1785">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> オブジェクトを格納する配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1785">An array that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1786">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1786">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1787">
            <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1787">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="d5b6d-1788">デリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1788">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="d5b6d-1789">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1789">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-1790">ラムダの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1790">The name of the lambda.</span>
          </span>
          <span data-ttu-id="d5b6d-1791">デバッグ情報を生成するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1791">Used for generating debugging information.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1792">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1792">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1793">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1793">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1794">
            <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1794">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Lambda&lt;TDelegate&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.Expression&lt;TDelegate&gt; Lambda&lt;TDelegate&gt; (System.Linq.Expressions.Expression body, string name, bool tailCall, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.Expression`1&lt;!!TDelegate&gt; Lambda&lt;TDelegate&gt;(class System.Linq.Expressions.Expression body, string name, bool tailCall, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Lambda``1(System.Linq.Expressions.Expression,System.String,System.Boolean,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Lambda(Of TDelegate) (body As Expression, name As String, tailCall As Boolean, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TDelegate&gt;&#xA; static System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Lambda(System::Linq::Expressions::Expression ^ body, System::String ^ name, bool tailCall, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TDelegate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="tailCall" Type="System.Boolean" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TDelegate">
          <span data-ttu-id="d5b6d-1795">デリゲート型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1795">The delegate type.</span>
          </span>
        </typeparam>
        <param name="body">
          <span data-ttu-id="d5b6d-1796">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.LambdaExpression.Body" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1796">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property equal to.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-1797">ラムダの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1797">The name of the lambda.</span>
          </span>
          <span data-ttu-id="d5b6d-1798">デバッグ情報を生成するために使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1798">Used for generating debugging info.</span>
          </span>
        </param>
        <param name="tailCall">
          <span data-ttu-id="d5b6d-1799">作成された式のコンパイル時に末尾呼び出し最適化が適用されるかどうかを示す <see cref="T:System.Boolean" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1799">A <see cref="T:System.Boolean" /> that indicates if tail call optimization will be applied when compiling the created expression.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="d5b6d-1800">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1800">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1801">デリゲート型がコンパイル時に認識されている <see cref="T:System.Linq.Expressions.Expression`1" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1801">Creates an <see cref="T:System.Linq.Expressions.Expression`1" /> where the delegate type is known at compile time.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1802">
            <see cref="T:System.Linq.Expressions.Expression`1" /> と等しい <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> プロパティおよび <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティを含む <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1802">An <see cref="T:System.Linq.Expressions.Expression`1" /> that has the <see cref="P:System.Linq.Expressions.LambdaExpression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Lambda" /> and the <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> and <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1803">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1803">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1804">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1804">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1805">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1805">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1806">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1806">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1807">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1807">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1808">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1808">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1809"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1809">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1810">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1810">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-1811">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1811">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-1812"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1812">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1813">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1813">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1814">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1814">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1815">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1815">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1816">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`左シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1816">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1817">それ以外の場合`left`です。型は、整数型 (のいずれかの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`です。種類は<xref:System.Int32>では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1817">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1818">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1818">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1819">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1819">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1820">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1820">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1821">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1821">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1822">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1822">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1823">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1823">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1824">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1824">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-1825">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1825">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1826">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1826">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1827">ノードの型は、定義済みの左シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1827">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-1828">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1828">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1829">ノードの型は、定義済みの左シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1829">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1830">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1830">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1831">左シフト演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1831">The left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LeftShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1832">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1832">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1833">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1833">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1834">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1834">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1835">ビットごとの左シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1835">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1836">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1836">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1837">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1837">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1838"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1838">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1839">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1839">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-1840">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1840">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-1841"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1841">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1842">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1842">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1843">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1843">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1844">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1844">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1845">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1845">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-1846">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`左シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1846">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the left-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1847">それ以外の場合`left`です。型は、整数型 (のいずれかの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`です。種類は<xref:System.Int32>では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1847">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1848">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1848">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1849">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1849">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1850">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1850">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1851">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1851">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1852">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1852">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1853">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1853">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1854">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1854">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-1855">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1855">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1856">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1856">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1857">ノードの型は、定義済みの左シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1857">The type of the node is the result type of the predefined left-shift operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-1858">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1858">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1859">ノードの型は、定義済みの左シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1859">The type of the node is the nullable type that corresponds to the result type of the predefined left-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1860">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1860">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1861">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1861">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1862">
            <paramref name="method" /> は <see langword="null" /> で、左シフト演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1862">
              <paramref name="method" /> is <see langword="null" /> and the left-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LeftShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1863">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1863">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1864">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1864">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1865">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1865">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1866">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1866">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1867">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1867">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1868">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1868">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1869">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1869">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1870">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1870">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1871">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1871">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1872">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1872">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LeftShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LeftShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LeftShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LeftShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LeftShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1873">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1873">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1874">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1874">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1875">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1875">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-1876">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1876">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1877">ビットごとの左シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1877">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise left-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1878">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1878">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LeftShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThan">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1879">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1879">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1880">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1880">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1881">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1881">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1882">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1882">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1883">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1883">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1884">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1884">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1885"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1885">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1886">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1886">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="d5b6d-1887">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1887">Otherwise, it is `false`.</span></span> <span data-ttu-id="d5b6d-1888"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1888">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="d5b6d-1889"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1889">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1890">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1890">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1891">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1891">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1892">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1892">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="d5b6d-1893">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「小なり」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1893">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1894">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1894">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1895">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1895">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1896">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1896">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1897">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1897">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1898">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1898">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1899">次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1899">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1900">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1900">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1901">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1901">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1902">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1902">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1903">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1903">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1904">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1904">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1905">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1905">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1906">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1906">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1907">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1907">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#25)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1908">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1908">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1909">"小なり" 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1909">The "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThan">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThan (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThan(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThan(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThan (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThan(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1910">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1910">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1911">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1911">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-1912">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1912">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1913">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1913">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1914">"小なり" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1914">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1915">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1915">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThan" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1916">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1916">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1917"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1917">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1918">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティと等しい`liftToNull`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1918">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="d5b6d-1919">それ以外の場合、それらが両方とも`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1919">Otherwise, they are both `false`.</span></span> <span data-ttu-id="d5b6d-1920"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1920">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1921">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1921">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1922">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1922">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1923">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1923">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1924">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1924">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1925">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「小なり」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1925">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1926">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1926">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1927">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1927">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1928">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1928">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1929">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1929">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1930">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1930">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1931">次の 2 つの条件が満たされている場合、ノードはリフトされています。また、ノードの型は null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1931">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1932">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1932">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1933">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1933">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1934">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1934">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1935">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1935">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1936">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1936">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1937">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1937">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1938">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1938">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1939">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1939">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-1940">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1940">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1941">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には "less than" 演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1941">
              <paramref name="method" /> is <see langword="null" /> and the "less than" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LessThanOrEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-1942">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1942">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1943">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1943">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1944">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1944">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1945">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1945">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a " less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1946">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1946">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1947">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1947">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1948"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1948">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1949">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1949">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="d5b6d-1950">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1950">Otherwise, it is `false`.</span></span> <span data-ttu-id="d5b6d-1951"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1951">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="d5b6d-1952"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1952">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1953">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1953">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1954">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1954">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1955">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1955">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1956">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「以下」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1956">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1957">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1957">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1958">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1958">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1959">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1959">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1960">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1960">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1961">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1961">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1962">次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1962">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1963">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1963">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1964">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1964">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1965">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1965">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1966">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1966">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1967">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1967">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-1968">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1968">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-1969">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1969">The type of the node is <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-1970">次のコード例では、2 つの整数を比較する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1970">The following code example shows how to create an expression that compares two integers.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#26)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-1971">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1971">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-1972">"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1972">The "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression LessThanOrEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression LessThanOrEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.LessThanOrEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function LessThanOrEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ LessThanOrEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-1973">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1973">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-1974">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1974">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-1975">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1975">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-1976">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1976">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-1977">"以下" 数値比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1977">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a "less than or equal" numeric comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-1978">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-1978">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.LessThanOrEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-1979">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1979">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-1980"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1980">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-1981">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティと等しい`liftToNull`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1981">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="d5b6d-1982">それ以外の場合、それらが両方とも`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1982">Otherwise, they are both `false`.</span></span> <span data-ttu-id="d5b6d-1983"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1983">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-1984">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1984">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-1985">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1985">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-1986">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1986">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-1987">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1987">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1988">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`「以下」演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1988">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the "less than or equal" operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1989">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1989">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-1990">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1990">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-1991">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1991">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1992">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1992">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1993">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1993">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-1994">次の 2 つの条件が満たされている場合、ノードはリフトされています。また、ノードの型は null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1994">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="d5b6d-1995">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1995">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-1996">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1996">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-1997">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1997">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-1998">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1998">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-1999">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-1999">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-2000">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2000">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2001">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2001">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2002">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2002">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2003">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2003">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2004">
            <paramref name="method" /> は <see langword="null" /> で、"以下" 演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2004">
              <paramref name="method" /> is <see langword="null" /> and the "less than or equal" operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2005">
            <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2005">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="d5b6d-2006">
            <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2006">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2007">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2007">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2008">メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2008">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2009">
            <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2009">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2010">
            <paramref name="member" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2010">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2011">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2011">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2012">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2012">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2013">
            <paramref name="member" /> は、フィールドまたはプロパティを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2013">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="d5b6d-2014">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2014">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2015">
            <paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2015">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MemberInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (member As MemberInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="d5b6d-2016">
            <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定するフィールドまたはプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2016">A <see cref="T:System.Reflection.MemberInfo" /> that represents a field or property to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2017">
            <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2017">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2018">メンバーがフィールドまたはプロパティである <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2018">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> where the member is a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2019">
            <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2019">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2020">
            <paramref name="member" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2020">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2021">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2021">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2022">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2022">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2023">
            <paramref name="member" /> は、フィールドまたはプロパティを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2023">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="d5b6d-2024">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2024">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2025">
            <paramref name="member" /> が表すフィールドまたはプロパティの <see cref="P:System.Reflection.FieldInfo.FieldType" /> または <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2025">The <see cref="P:System.Reflection.FieldInfo.FieldType" /> or <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the field or property that <paramref name="member" /> represents does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, initializers As IEnumerable(Of ElementInit)) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="d5b6d-2026">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2026">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2027">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2027">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2028">指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2028">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2029">
            <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2029">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2030">
            <paramref name="propertyAccessor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2030">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2031">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2031">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2032">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2032">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2033">
            <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2033">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="d5b6d-2034">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2034">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2035">
            <paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2035">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberListBinding ListBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberListBinding ListBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListBind(System.Reflection.MethodInfo,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ListBind (propertyAccessor As MethodInfo, ParamArray initializers As ElementInit()) As MemberListBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberListBinding ^ ListBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberListBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="d5b6d-2036">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2036">A <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2037">
            <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2037">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2038">指定したプロパティ アクセサー メソッドに基づいて <see cref="T:System.Linq.Expressions.MemberListBinding" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2038">Creates a <see cref="T:System.Linq.Expressions.MemberListBinding" /> object based on a specified property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2039">
            <see cref="T:System.Linq.Expressions.MemberListBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.MemberInfo" /> プロパティ、および <paramref name="propertyAccessor" /> の要素が設定された <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> を持つ <paramref name="initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2039">A <see cref="T:System.Linq.Expressions.MemberListBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.ListBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.MemberInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberListBinding.Initializers" /> populated with the elements of <paramref name="initializers" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2040">
            <paramref name="propertyAccessor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2040">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2041">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2041">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2042">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2042">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2043">
            <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2043">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="d5b6d-2044">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2044">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2045">
            <paramref name="propertyAccessor" /> により表されるメソッドがアクセスするプロパティの <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> は、<see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2045">The <see cref="P:System.Reflection.PropertyInfo.PropertyType" /> of the property that the method represented by <paramref name="propertyAccessor" /> accesses does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ListInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2046">
            <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2046">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ElementInit&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ElementInit})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ElementInit&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2047">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2047">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2048">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.ElementInit" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2048">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2049">指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2049">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2050">
            <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2050">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2051"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2051">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="d5b6d-2052"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2052">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2053">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.ListInitExpression>を表す 2 つのキー/値ペアの新しいディクショナリのインスタンスの初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2053">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2054">
            <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2054">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2055">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2055">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2056">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2056">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2057">
            <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2057">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2058">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2058">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2059">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2059">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2060">"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2060">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2061">
            <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2061">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2062"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2062">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="d5b6d-2063">このオーバー ロードを使用するために<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>、`newExpression`です。型またはその基本データ型は、"Add"(大文字と小文字) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2063">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.Expression%7D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="d5b6d-2064">引数の型によって表される型から割り当てることができる必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>の最初の要素のプロパティ`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2064">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="d5b6d-2065"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2065">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2066"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素を含む`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2066">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2067"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>で検出された追加のメソッドを表す`newExpression`です。型またはその基本型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2067">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="d5b6d-2068"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2068">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2069">
            <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2069">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2070">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2070">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2071">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2071">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2072">
            <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2072">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2073">
            <paramref name="newExpression" />.Type またはその基本型で、"Add" (大文字と小文字を区別しない) という名前のインスタンス メソッドは宣言されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2073">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="d5b6d-2074">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2074">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2075">
            <paramref name="newExpression" />.Type またはその基本型の Add メソッドは、ちょうど 1 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2075">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="d5b6d-2076">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2076">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2077">
            <paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが表す型は、<paramref name="newExpression" />.Type またはその基本型の Add メソッドの引数の型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2077">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="d5b6d-2078">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2078">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2079">"Add" (大文字と小文字を区別しない) という名前の、複数の引数と互換性のあるメソッドが、<paramref name="newExpression" />.Type および/またはその基本型に存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2079">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.ElementInit[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.ElementInit[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.ElementInit[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::ElementInit ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.ElementInit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2080">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2080">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2081">
            <see cref="T:System.Linq.Expressions.ElementInit" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2081">An array of <see cref="T:System.Linq.Expressions.ElementInit" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2082">指定した <see cref="T:System.Linq.Expressions.ListInitExpression" /> オブジェクトを使用してコレクションを初期化する <see cref="T:System.Linq.Expressions.ElementInit" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2082">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses specified <see cref="T:System.Linq.Expressions.ElementInit" /> objects to initialize a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2083">
            <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2083">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2084"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2084">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="d5b6d-2085"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2085">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2086">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.ListInitExpression>を表す 2 つのキー/値ペアの新しいディクショナリのインスタンスの初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2086">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.ElementInit%5B%5D%29> method to create a <xref:System.Linq.Expressions.ListInitExpression> that represents the initialization of a new dictionary instance with two key-value pairs.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#7)]
 [!code-vb[System.Linq.Expressions.Expression#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2087">
            <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2087">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2088">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2088">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2089">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2089">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2090">
            <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2090">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2091">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2091">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2092">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2092">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2093">"Add" という名前のメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2093">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a method named "Add" to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2094">
            <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2094">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2095"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2095">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="d5b6d-2096">このオーバー ロードを使用するために<xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>、`newExpression`です。型またはその基本データ型は、"Add"(大文字と小文字) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2096">In order to use this overload of <xref:System.Linq.Expressions.Expression.ListInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.Expression%5B%5D%29>, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="d5b6d-2097">引数の型によって表される型から割り当てることができる必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>の最初の要素のプロパティ`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2097">The type of the argument must be assignable from the type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of the first element of `initializers`.</span></span>  
  
 <span data-ttu-id="d5b6d-2098"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2098">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2099"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素を含む`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2099">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2100"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>で検出された追加のメソッドを表す`newExpression`です。型またはその基本型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2100">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> represents the add method that was discovered on `newExpression`.Type or its base type.</span></span>  
  
 <span data-ttu-id="d5b6d-2101"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2101">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2102">
            <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2102">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2103">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2103">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2104">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2104">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2105">
            <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2105">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2106">
            <paramref name="newExpression" />.Type またはその基本型で、"Add" (大文字と小文字を区別しない) という名前のインスタンス メソッドは宣言されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2106">There is no instance method named "Add" (case insensitive) declared in <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="d5b6d-2107">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2107">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2108">
            <paramref name="newExpression" />.Type またはその基本型の Add メソッドは、ちょうど 1 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2108">The add method on <paramref name="newExpression" />.Type or its base type does not take exactly one argument.</span>
          </span>
          <span data-ttu-id="d5b6d-2109">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2109">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2110">
            <paramref name="initializers" /> の最初の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティが表す型は、<paramref name="newExpression" />.Type またはその基本型の Add メソッドの引数の型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2110">The type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of the first element of <paramref name="initializers" /> is not assignable to the argument type of the add method on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
          <span data-ttu-id="d5b6d-2111">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2111">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2112">"Add" (大文字と小文字を区別しない) という名前の、複数の引数と互換性のあるメソッドが、<paramref name="newExpression" />.Type および/またはその基本型に存在します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2112">More than one argument-compatible method named "Add" (case-insensitive) exists on <paramref name="newExpression" />.Type and/or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2113">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2113">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="d5b6d-2114">コレクションに要素を追加する、"Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2114">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method named "Add" (case insensitive), that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2115">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2115">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2116">指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2116">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2117">
            <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2117">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2118"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2118">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="d5b6d-2119">If `addMethod` is `null`, `newExpression`.型またはその基本データ型は、"Add"(大文字と小文字) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2119">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="d5b6d-2120">場合`addMethod`は`null`、"Add"(大文字と小文字) という名前を正確に 1 つのパラメーターを持つインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2120">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="d5b6d-2121">によって表される型、<xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`add メソッドの引数の型に割り当てることができる必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2121">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="d5b6d-2122"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2122">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2123"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素を含む`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2123">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2124"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>と等しい`addMethod`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2124">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="d5b6d-2125"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2125">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2126">
            <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2126">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2127">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2127">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2128">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2128">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2129">
            <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2129">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2130">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2130">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2131">
            <paramref name="addMethod" /> は <see langword="null" /> ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2131">
              <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="d5b6d-2132">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2132">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2133">
            <paramref name="addMethod" /> は <see langword="null" /> ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2133">
              <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2134">
            <paramref name="addMethod" /> は <see langword="null" /> で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2134">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ListInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ListInitExpression ListInit (System.Linq.Expressions.NewExpression newExpression, System.Reflection.MethodInfo addMethod, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ListInitExpression ListInit(class System.Linq.Expressions.NewExpression newExpression, class System.Reflection.MethodInfo addMethod, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ListInit(System.Linq.Expressions.NewExpression,System.Reflection.MethodInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ListInitExpression ^ ListInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Reflection::MethodInfo ^ addMethod, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ListInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="addMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2135">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2135">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="addMethod">
          <span data-ttu-id="d5b6d-2136">1 つの引数を受け取り、コレクションに要素を追加するインスタンス メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2136">A <see cref="T:System.Reflection.MethodInfo" /> that represents an instance method that takes one argument, that adds an element to a collection.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2137">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2137">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.ListInitExpression.Initializers" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2138">指定したメソッドを使用してコレクションに要素を追加する <see cref="T:System.Linq.Expressions.ListInitExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2138">Creates a <see cref="T:System.Linq.Expressions.ListInitExpression" /> that uses a specified method to add elements to a collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2139">
            <see cref="T:System.Linq.Expressions.ListInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2139">A <see cref="T:System.Linq.Expressions.ListInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ListInit" /> and the <see cref="P:System.Linq.Expressions.ListInitExpression.NewExpression" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2140"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`を実装する型を表す必要があります<xref:System.Collections.IEnumerable>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2140">The <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression` must represent a type that implements <xref:System.Collections.IEnumerable>.</span></span>  
  
 <span data-ttu-id="d5b6d-2141">If `addMethod` is `null`, `newExpression`.型またはその基本データ型は、"Add"(大文字と小文字) という名前を正確に 1 つの引数を受け取る 1 つのメソッドを宣言する必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2141">If `addMethod` is `null`, `newExpression`.Type or its base type must declare a single method named "Add" (case insensitive) that takes exactly one argument.</span></span> <span data-ttu-id="d5b6d-2142">場合`addMethod`は`null`、"Add"(大文字と小文字) という名前を正確に 1 つのパラメーターを持つインスタンス メソッドを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2142">If `addMethod` is not `null`, it must represent an instance method named "Add" (case insensitive) that has exactly one parameter.</span></span> <span data-ttu-id="d5b6d-2143">によって表される型、<xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`add メソッドの引数の型に割り当てることができる必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2143">The type represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must be assignable to the argument type of the add method.</span></span>  
  
 <span data-ttu-id="d5b6d-2144"><xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> 、返されたプロパティ<xref:System.Linq.Expressions.ListInitExpression>型の 1 つの要素を含む<xref:System.Linq.Expressions.ElementInit>の各要素に対して`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2144">The <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> property of the returned <xref:System.Linq.Expressions.ListInitExpression> contains one element of type <xref:System.Linq.Expressions.ElementInit> for each element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2145"><xref:System.Linq.Expressions.ElementInit.Arguments%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>はシングルトン コレクションの対応する要素を含む`initializers`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2145">The <xref:System.Linq.Expressions.ElementInit.Arguments%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is a singleton collection that contains the corresponding element of `initializers`.</span></span> <span data-ttu-id="d5b6d-2146"><xref:System.Linq.Expressions.ElementInit.AddMethod%2A>の各要素のプロパティ<xref:System.Linq.Expressions.ListInitExpression.Initializers%2A>と等しい`addMethod`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2146">The <xref:System.Linq.Expressions.ElementInit.AddMethod%2A> property of each element of <xref:System.Linq.Expressions.ListInitExpression.Initializers%2A> is equal to `addMethod`.</span></span>  
  
 <span data-ttu-id="d5b6d-2147"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.ListInitExpression>と等しい`newExpression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2147">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.ListInitExpression> is equal to `newExpression`.Type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2148">
            <paramref name="newExpression" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2148">
              <paramref name="newExpression" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2149">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2149">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2150">
            <paramref name="initializers" /> の 1 つ以上の要素が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2150">One or more elements of <paramref name="initializers" /> are <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2151">
            <paramref name="newExpression" />.Type は <see cref="T:System.Collections.IEnumerable" /> を実装していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2151">
              <paramref name="newExpression" />.Type does not implement <see cref="T:System.Collections.IEnumerable" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2152">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2152">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2153">
            <paramref name="addMethod" /> は <see langword="null" /> ではなく、受け取る引数が 1 つだけの "Add" (大文字と小文字は区別されません) という名前のインスタンス メソッドを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2153">
              <paramref name="addMethod" /> is not <see langword="null" /> and it does not represent an instance method named "Add" (case insensitive) that takes exactly one argument.</span>
          </span>
          <span data-ttu-id="d5b6d-2154">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2154">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2155">
            <paramref name="addMethod" /> は <see langword="null" /> ではなく、<paramref name="initializers" /> の 1 つ以上の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティによって表される型を <paramref name="addMethod" /> が表すメソッドの引数型に代入することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2155">
              <paramref name="addMethod" /> is not <see langword="null" /> and the type represented by the <see cref="P:System.Linq.Expressions.Expression.Type" /> property of one or more elements of <paramref name="initializers" /> is not assignable to the argument type of the method that <paramref name="addMethod" /> represents.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2156">
            <paramref name="addMethod" /> は <see langword="null" /> で、1 つの型互換の引数を受け取る "Add" という名前のインスタンス メソッドが <paramref name="newExpression" />.Type またはその基本型に存在しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2156">
              <paramref name="addMethod" /> is <see langword="null" /> and no instance method named "Add" that takes one type-compatible argument exists on <paramref name="newExpression" />.Type or its base type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Loop">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2157">
            <see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2157">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-2158">ループの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2158">The body of the loop.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2159">指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2159">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2160">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2160">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-2161">ループの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2161">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="d5b6d-2162">ループの本体によって使用される break の移動先。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2162">The break target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2163">指定した本体および break の移動先を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2163">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body and break target.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2164">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2164">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-2165">次の例を含むブロック式を作成する方法、<xref:System.Linq.Expressions.LoopExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2165">The following example demonstrates how to create a block expression that contains a <xref:System.Linq.Expressions.LoopExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#44)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#44)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Loop">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.LoopExpression Loop (System.Linq.Expressions.Expression body, System.Linq.Expressions.LabelTarget break, System.Linq.Expressions.LabelTarget continue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.LoopExpression Loop(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.LabelTarget break, class System.Linq.Expressions.LabelTarget continue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Loop(System.Linq.Expressions.Expression,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Loop (body As Expression, break As LabelTarget, continue As LabelTarget) As LoopExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::LoopExpression ^ Loop(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::LabelTarget ^ break, System::Linq::Expressions::LabelTarget ^ continue);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.LoopExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="break" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="continue" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-2166">ループの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2166">The body of the loop.</span>
          </span>
        </param>
        <param name="break">
          <span data-ttu-id="d5b6d-2167">ループの本体によって使用される break の移動先。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2167">The break target used by the loop body.</span>
          </span>
        </param>
        <param name="continue">
          <span data-ttu-id="d5b6d-2168">ループの本体によって使用される continue の移動先。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2168">The continue target used by the loop body.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2169">指定した本体を使用して、<see cref="T:System.Linq.Expressions.LoopExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2169">Creates a <see cref="T:System.Linq.Expressions.LoopExpression" /> with the given body.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2170">作成された <see cref="T:System.Linq.Expressions.LoopExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2170">The created <see cref="T:System.Linq.Expressions.LoopExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeBinary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2171">適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2171">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="d5b6d-2172">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2172">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="d5b6d-2173">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2173">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2174">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2174">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2175">適切なファクトリ メソッドを呼び出すことにより、左オペランドと右オペランドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2175">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left and right operands, by calling an appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2176">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2176">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2177">`binaryType`パラメーターを指定する<xref:System.Linq.Expressions.BinaryExpression>ファクトリ メソッドがこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2177">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method calls.</span></span> <span data-ttu-id="d5b6d-2178">たとえば場合、`binaryType`は<xref:System.Linq.Expressions.ExpressionType.Subtract>、このメソッドを呼び出して<xref:System.Linq.Expressions.Expression.Subtract%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2178">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2179">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29>メソッドを作成、<xref:System.Linq.Expressions.BinaryExpression>別の 1 つの数値の減算を表すです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2179">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MakeBinary%28System.Linq.Expressions.ExpressionType%2CSystem.Linq.Expressions.Expression%2CSystem.Linq.Expressions.Expression%29> method to create a <xref:System.Linq.Expressions.BinaryExpression> that represents the subtraction of one number from another.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#8)]
 [!code-vb[System.Linq.Expressions.Expression#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2180">
            <paramref name="binaryType" /> は、二項式ノードには対応していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2180">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2181">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2181">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="d5b6d-2182">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2182">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="d5b6d-2183">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2183">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2184">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2184">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-2185">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2185">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2186">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2186">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2187">適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、および実装メソッドを指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2187">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2188">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2188">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2189">`binaryType`パラメーターを指定する<xref:System.Linq.Expressions.BinaryExpression>このメソッドの呼び出しはファクトリ メソッド。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2189">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="d5b6d-2190">たとえば場合、`binaryType`は<xref:System.Linq.Expressions.ExpressionType.Subtract>、このメソッドを呼び出して<xref:System.Linq.Expressions.Expression.Subtract%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2190">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="d5b6d-2191">`liftToNull`と`method`適切なファクトリ メソッドが、対応するパラメーターを持っていない場合、パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2191">The `liftToNull` and `method` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2192">
            <paramref name="binaryType" /> は、二項式ノードには対応していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2192">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2193">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2193">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeBinary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MakeBinary (System.Linq.Expressions.ExpressionType binaryType, System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MakeBinary(valuetype System.Linq.Expressions.ExpressionType binaryType, class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeBinary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeBinary (binaryType As ExpressionType, left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MakeBinary(System::Linq::Expressions::ExpressionType binaryType, System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="binaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="binaryType">
          <span data-ttu-id="d5b6d-2194">二項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2194">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of binary operation.</span>
          </span>
        </param>
        <param name="left">
          <span data-ttu-id="d5b6d-2195">左オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2195">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the left operand.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2196">右オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2196">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the right operand.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-2197">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2197">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2198">実装メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2198">A <see cref="T:System.Reflection.MethodInfo" /> that specifies the implementing method.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-2199">型変換関数を表す <see cref="T:System.Linq.Expressions.LambdaExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2199">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> that represents a type conversion function.</span>
          </span>
          <span data-ttu-id="d5b6d-2200">このパラメーターは、<c>binaryType</c> が <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> または複合代入である場合にのみ使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2200">This parameter is used only if <c>binaryType</c> is <see cref="F:System.Linq.Expressions.ExpressionType.Coalesce" /> or compound assignment..</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2201">適切なファクトリ メソッドを呼び出すことにより、左オペランド、右オペランド、実装メソッド、および型変換関数を指定して、<see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" />, given the left operand, right operand, implementing method and type conversion function, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2202">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.BinaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2202">The <see cref="T:System.Linq.Expressions.BinaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2203">`binaryType`パラメーターを指定する<xref:System.Linq.Expressions.BinaryExpression>このメソッドの呼び出しはファクトリ メソッド。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2203">The `binaryType` parameter determines which <xref:System.Linq.Expressions.BinaryExpression> factory method this method will call.</span></span> <span data-ttu-id="d5b6d-2204">たとえば場合、`binaryType`は<xref:System.Linq.Expressions.ExpressionType.Subtract>、このメソッドを呼び出して<xref:System.Linq.Expressions.Expression.Subtract%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2204">For example, if `binaryType` is <xref:System.Linq.Expressions.ExpressionType.Subtract>, this method invokes <xref:System.Linq.Expressions.Expression.Subtract%2A>.</span></span> <span data-ttu-id="d5b6d-2205">`liftToNull`、`method`と`conversion`適切なファクトリ メソッドが、対応するパラメーターを持っていない場合、パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2205">The `liftToNull`, `method` and `conversion` parameters are ignored if the appropriate factory method does not have a corresponding parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2206">
            <paramref name="binaryType" /> は、二項式ノードには対応していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2206">
              <paramref name="binaryType" /> does not correspond to a binary expression node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2207">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2207">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeCatchBlock">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.CatchBlock MakeCatchBlock (Type type, System.Linq.Expressions.ParameterExpression variable, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression filter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.CatchBlock MakeCatchBlock(class System.Type type, class System.Linq.Expressions.ParameterExpression variable, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeCatchBlock(System.Type,System.Linq.Expressions.ParameterExpression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::CatchBlock ^ MakeCatchBlock(Type ^ type, System::Linq::Expressions::ParameterExpression ^ variable, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ filter);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.CatchBlock</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="variable" Type="System.Linq.Expressions.ParameterExpression" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="filter" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-2208">この <see cref="P:System.Linq.Expressions.Expression.Type" /> によって処理される <see cref="T:System.Exception" /> の <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2208">The <see cref="P:System.Linq.Expressions.Expression.Type" /> of <see cref="T:System.Exception" /> this <see cref="T:System.Linq.Expressions.CatchBlock" /> will handle.</span>
          </span>
        </param>
        <param name="variable">
          <span data-ttu-id="d5b6d-2209">このハンドラーによってキャッチされる <see cref="T:System.Linq.Expressions.ParameterExpression" /> オブジェクトへの参照を表す <see cref="T:System.Exception" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2209">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> representing a reference to the <see cref="T:System.Exception" /> object caught by this handler.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-2210">catch ステートメントの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2210">The body of the catch statement.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="d5b6d-2211">
            <see cref="T:System.Exception" /> フィルターの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2211">The body of the <see cref="T:System.Exception" /> filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2212">指定された要素を使用して、catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2212">Creates a <see cref="T:System.Linq.Expressions.CatchBlock" /> representing a catch statement with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2213">作成された <see cref="T:System.Linq.Expressions.CatchBlock" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2213">The created <see cref="T:System.Linq.Expressions.CatchBlock" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2214">`type` null 以外である必要がありますの型と一致して`variable`(かどうか、指定した場合)。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2214">`type` must be non-null and match the type of `variable` (if it is supplied).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeDynamic">
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2215">動的な操作を表す <see cref="T:System.Linq.Expressions.DynamicExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2215">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arguments As IEnumerable(Of Expression)) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-2216">
            <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2216">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d5b6d-2217">動的操作のランタイム バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2217">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-2218">動的操作の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2218">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2219">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2219">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2220">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2220">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-2221">
            <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2221">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d5b6d-2222">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2222">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-2223">動的操作の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2223">The argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2224">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2224">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and one argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2225">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2225">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, ParamArray arguments As Expression()) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-2226">
            <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2226">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d5b6d-2227">動的操作のランタイム バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2227">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-2228">動的操作の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2228">The arguments to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2229">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2229">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2230">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2230">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-2231">
            <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2231">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d5b6d-2232">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2232">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-2233">動的操作の 1 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2233">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-2234">動的操作の 2 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2234">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2235">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 2 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2235">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and two arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2236">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2236">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-2237">
            <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2237">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d5b6d-2238">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2238">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-2239">動的操作の 1 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2239">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-2240">動的操作の 2 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2240">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-2241">動的操作の 3 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2241">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2242">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 3 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2242">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and three arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2243">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2243">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeDynamic">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.DynamicExpression MakeDynamic (Type delegateType, System.Runtime.CompilerServices.CallSiteBinder binder, System.Linq.Expressions.Expression arg0, System.Linq.Expressions.Expression arg1, System.Linq.Expressions.Expression arg2, System.Linq.Expressions.Expression arg3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.DynamicExpression MakeDynamic(class System.Type delegateType, class System.Runtime.CompilerServices.CallSiteBinder binder, class System.Linq.Expressions.Expression arg0, class System.Linq.Expressions.Expression arg1, class System.Linq.Expressions.Expression arg2, class System.Linq.Expressions.Expression arg3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeDynamic(System.Type,System.Runtime.CompilerServices.CallSiteBinder,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeDynamic (delegateType As Type, binder As CallSiteBinder, arg0 As Expression, arg1 As Expression, arg2 As Expression, arg3 As Expression) As DynamicExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::DynamicExpression ^ MakeDynamic(Type ^ delegateType, System::Runtime::CompilerServices::CallSiteBinder ^ binder, System::Linq::Expressions::Expression ^ arg0, System::Linq::Expressions::Expression ^ arg1, System::Linq::Expressions::Expression ^ arg2, System::Linq::Expressions::Expression ^ arg3);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.DynamicExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delegateType" Type="System.Type" />
        <Parameter Name="binder" Type="System.Runtime.CompilerServices.CallSiteBinder" />
        <Parameter Name="arg0" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg1" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg2" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="arg3" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="delegateType">
          <span data-ttu-id="d5b6d-2244">
            <see cref="T:System.Runtime.CompilerServices.CallSite" /> によって使用されるデリゲートの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2244">The type of the delegate used by the <see cref="T:System.Runtime.CompilerServices.CallSite" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="d5b6d-2245">動的操作の実行時バインダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2245">The runtime binder for the dynamic operation.</span>
          </span>
        </param>
        <param name="arg0">
          <span data-ttu-id="d5b6d-2246">動的操作の 1 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2246">The first argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg1">
          <span data-ttu-id="d5b6d-2247">動的操作の 2 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2247">The second argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg2">
          <span data-ttu-id="d5b6d-2248">動的操作の 3 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2248">The third argument to the dynamic operation.</span>
          </span>
        </param>
        <param name="arg3">
          <span data-ttu-id="d5b6d-2249">動的操作の 4 番目の引数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2249">The fourth argument to the dynamic operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2250">指定された <see cref="T:System.Linq.Expressions.DynamicExpression" /> および 4 つの引数によってバインドされる動的操作を表す <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2250">Creates a <see cref="T:System.Linq.Expressions.DynamicExpression" /> that represents a dynamic operation bound by the provided <see cref="T:System.Runtime.CompilerServices.CallSiteBinder" /> and four arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2251">
            <see cref="T:System.Linq.Expressions.DynamicExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" />、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" />、<see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />、および <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" /> を含む <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2251">A <see cref="T:System.Linq.Expressions.DynamicExpression" /> that has <see cref="P:System.Linq.Expressions.Expression.NodeType" /> equal to <see cref="F:System.Linq.Expressions.ExpressionType.Dynamic" /> and has the <see cref="P:System.Linq.Expressions.DynamicExpression.DelegateType" />, <see cref="P:System.Linq.Expressions.DynamicExpression.Binder" />, and <see cref="P:System.Linq.Expressions.DynamicExpression.Arguments" /> set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeGoto">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression MakeGoto (System.Linq.Expressions.GotoExpressionKind kind, System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression MakeGoto(valuetype System.Linq.Expressions.GotoExpressionKind kind, class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind,System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ MakeGoto(System::Linq::Expressions::GotoExpressionKind kind, System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="System.Linq.Expressions.GotoExpressionKind" />
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="kind">
          <span data-ttu-id="d5b6d-2252">
            <see cref="T:System.Linq.Expressions.GotoExpression" /> の <see cref="T:System.Linq.Expressions.GotoExpressionKind" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2252">The <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> of the <see cref="T:System.Linq.Expressions.GotoExpression" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="d5b6d-2253">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2253">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d5b6d-2254">ジャンプ時に関連付けられているラベルに渡される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2254">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-2255">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2255">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2256">指定した <see cref="T:System.Linq.Expressions.GotoExpression" /> のジャンプを表す <see cref="T:System.Linq.Expressions.GotoExpressionKind" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2256">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a jump of the specified <see cref="T:System.Linq.Expressions.GotoExpressionKind" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2257">ジャンプ時にラベルに渡す値も指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2257">The value passed to the label upon jumping can also be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2258">
            <see cref="T:System.Linq.Expressions.GotoExpression" /> と等しい <see cref="P:System.Linq.Expressions.GotoExpression.Kind" />、<paramref name="kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2258">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to <paramref name="kind" />, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeIndex">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression MakeIndex (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression MakeIndex(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeIndex(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MakeIndex (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ MakeIndex(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-2259">プロパティが属するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2259">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="d5b6d-2260">プロパティが <see langword="static" /> (Visual Basic では <see langword="shared" />) の場合は、null にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2260">It should be null if the property is <see langword="static" /> (<see langword="shared" /> in Visual Basic).</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="d5b6d-2261">インデックス化するプロパティを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2261">An <see cref="T:System.Linq.Expressions.Expression" /> representing the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-2262">プロパティのインデックス化に使用する引数を含む <c>IEnumerable&lt;Expression&gt;</c> (Visual Basic では <c>IEnumerable (Of Expression)</c>)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2262">An <c>IEnumerable&lt;Expression&gt;</c> (<c>IEnumerable (Of Expression)</c> in Visual Basic) that contains the arguments that will be used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2263">オブジェクトのインデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2263">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> that represents accessing an indexed property in an object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2264">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2264">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeMemberAccess">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression MakeMemberAccess (System.Linq.Expressions.Expression expression, System.Reflection.MemberInfo member);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression MakeMemberAccess(class System.Linq.Expressions.Expression expression, class System.Reflection.MemberInfo member) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeMemberAccess(System.Linq.Expressions.Expression,System.Reflection.MemberInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ MakeMemberAccess(System::Linq::Expressions::Expression ^ expression, System::Reflection::MemberInfo ^ member);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2265">メンバーが属するオブジェクトを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2265">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the object that the member belongs to.</span>
          </span>
          <span data-ttu-id="d5b6d-2266">静的メンバーの場合は null を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2266">This can be null for static members.</span>
          </span>
        </param>
        <param name="member">
          <span data-ttu-id="d5b6d-2267">アクセス先のフィールドまたはプロパティを記述する <see cref="T:System.Reflection.MemberInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2267">The <see cref="T:System.Reflection.MemberInfo" /> that describes the field or property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2268">フィールドまたはプロパティのいずれかへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2268">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing either a field or a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2269">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.MemberExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2269">The <see cref="T:System.Linq.Expressions.MemberExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2270">このメソッドは、作成に使用できる、<xref:System.Linq.Expressions.MemberExpression>フィールドまたはプロパティの種類によっては、いずれかへのアクセスを表す`member`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2270">This method can be used to create a <xref:System.Linq.Expressions.MemberExpression> that represents accessing either a field or a property, depending on the type of `member`.</span></span> <span data-ttu-id="d5b6d-2271">場合`member`の種類は<xref:System.Reflection.FieldInfo>、このメソッドを呼び出す<xref:System.Linq.Expressions.Expression.Field%2A>を作成する、<xref:System.Linq.Expressions.MemberExpression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2271">If `member` is of type <xref:System.Reflection.FieldInfo>, this method calls <xref:System.Linq.Expressions.Expression.Field%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span> <span data-ttu-id="d5b6d-2272">場合`member`の種類は<xref:System.Reflection.PropertyInfo>、このメソッドを呼び出す<xref:System.Linq.Expressions.Expression.Property%2A>を作成する、<xref:System.Linq.Expressions.MemberExpression>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2272">If `member` is of type <xref:System.Reflection.PropertyInfo>, this method calls <xref:System.Linq.Expressions.Expression.Property%2A> to create the <xref:System.Linq.Expressions.MemberExpression>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2273">
            <paramref name="member" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2273">
              <paramref name="member" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2274">
            <paramref name="member" /> は、フィールドまたはプロパティを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2274">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeTry">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression MakeTry (Type type, System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, System.Linq.Expressions.Expression fault, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt; handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression MakeTry(class System.Type type, class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.Expression fault, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.CatchBlock&gt; handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeTry(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.CatchBlock})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ MakeTry(Type ^ type, System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, System::Linq::Expressions::Expression ^ fault, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.CatchBlock&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-2275">try 式の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2275">The result type of the try expression.</span>
          </span>
          <span data-ttu-id="d5b6d-2276">null の場合は、本体およびすべてのハンドラーの型が同一である必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2276">If null, bodh and all handlers must have identical type.</span>
          </span>
        </param>
        <param name="body">
          <span data-ttu-id="d5b6d-2277">try ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2277">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="d5b6d-2278">finally ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2278">The body of the finally block.</span>
          </span>
          <span data-ttu-id="d5b6d-2279">try ブロックに関連付けられている finally ブロックがない場合は、null を渡します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2279">Pass null if the try block has no finally block associated with it.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="d5b6d-2280">fault ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2280">The body of the fault block.</span>
          </span>
          <span data-ttu-id="d5b6d-2281">try ブロックに関連付けられている fault ブロックがない場合は、null を渡します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2281">Pass null if the try block has no fault block associated with it.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="d5b6d-2282">try ブロックに関連付ける catch ステートメントを表す <see cref="T:System.Linq.Expressions.CatchBlock" /> のコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2282">A collection of <see cref="T:System.Linq.Expressions.CatchBlock" />s representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2283">指定された要素を使用して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2283">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with the specified elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2284">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2284">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MakeUnary">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2285">適切なファクトリ メソッドを呼び出すことにより、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2285">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> by calling the appropriate factory method.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="d5b6d-2286">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2286">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="d5b6d-2287">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2287">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-2288">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は <see langword="null" /> を渡します)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2288">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2289">適切なファクトリ メソッドを呼び出すことにより、オペランドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2289">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2290">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2290">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2291">`unaryType`パラメーターを指定する<xref:System.Linq.Expressions.UnaryExpression>ファクトリ メソッドがこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2291">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="d5b6d-2292">たとえば場合、`unaryType`と等しい<xref:System.Linq.Expressions.ExpressionType.Convert>、このメソッドを呼び出して<xref:System.Linq.Expressions.Expression.Convert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2292">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="d5b6d-2293">`type`呼び出されるファクトリ メソッドが適用されない場合、パラメーターは無視されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2293">The `type`parameter is ignored if it does not apply to the factory method that is called.</span></span>  

 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2294">
            <paramref name="operand" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2294">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2295">
            <paramref name="unaryType" /> は、単項式ノードには対応していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2295">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MakeUnary">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression MakeUnary (System.Linq.Expressions.ExpressionType unaryType, System.Linq.Expressions.Expression operand, Type type, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression MakeUnary(valuetype System.Linq.Expressions.ExpressionType unaryType, class System.Linq.Expressions.Expression operand, class System.Type type, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MakeUnary(System.Linq.Expressions.ExpressionType,System.Linq.Expressions.Expression,System.Type,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ MakeUnary(System::Linq::Expressions::ExpressionType unaryType, System::Linq::Expressions::Expression ^ operand, Type ^ type, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unaryType" Type="System.Linq.Expressions.ExpressionType" />
        <Parameter Name="operand" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="unaryType">
          <span data-ttu-id="d5b6d-2296">単項演算の型を指定する <see cref="T:System.Linq.Expressions.ExpressionType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2296">The <see cref="T:System.Linq.Expressions.ExpressionType" /> that specifies the type of unary operation.</span>
          </span>
        </param>
        <param name="operand">
          <span data-ttu-id="d5b6d-2297">オペランドを表す <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2297">An <see cref="T:System.Linq.Expressions.Expression" /> that represents the operand.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-2298">変換後の型を指定する <see cref="T:System.Type" /> (該当しない場合は <see langword="null" /> を渡します)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2298">The <see cref="T:System.Type" /> that specifies the type to be converted to (pass <see langword="null" /> if not applicable).</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2299">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2299">The <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2300">適切なファクトリ メソッドを呼び出すことにより、オペランドおよび実装メソッドを指定して、<see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2300">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" />, given an operand and implementing method, by calling the appropriate factory method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2301">適切なファクトリ メソッドを呼び出した結果得られる <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2301">The <see cref="T:System.Linq.Expressions.UnaryExpression" /> that results from calling the appropriate factory method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2302">`unaryType`パラメーターを指定する<xref:System.Linq.Expressions.UnaryExpression>ファクトリ メソッドがこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2302">The `unaryType` parameter determines which <xref:System.Linq.Expressions.UnaryExpression> factory method this method calls.</span></span> <span data-ttu-id="d5b6d-2303">たとえば場合、`unaryType`と等しい<xref:System.Linq.Expressions.ExpressionType.Convert>、このメソッドを呼び出して<xref:System.Linq.Expressions.Expression.Convert%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2303">For example, if `unaryType` is equal to <xref:System.Linq.Expressions.ExpressionType.Convert>, this method invokes <xref:System.Linq.Expressions.Expression.Convert%2A>.</span></span> <span data-ttu-id="d5b6d-2304">`type`と`method`パラメーターが無視される場合に呼び出されるファクトリ メソッドには適用されません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2304">The `type` and `method` parameters are ignored if they do not apply to the factory method that is called.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2305">
            <paramref name="operand" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2305">
              <paramref name="operand" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2306">
            <paramref name="unaryType" /> は、単項式ノードには対応していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2306">
              <paramref name="unaryType" /> does not correspond to a unary expression node.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberBind">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2307">メンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2307">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="d5b6d-2308">
            <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2308">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="d5b6d-2309">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2309">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2310">フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2310">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2311">
            <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2311">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2312">`member`パラメーターは、フィールドまたはプロパティを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2312">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2313">
            <paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2313">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2314">
            <paramref name="member" /> は、フィールドまたはプロパティを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2314">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="d5b6d-2315">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2315">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2316">
            <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2316">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MemberInfo member, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MemberInfo member, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MemberInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (member As MemberInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MemberInfo ^ member, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.Reflection.MemberInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="d5b6d-2317">
            <see cref="T:System.Reflection.MemberInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberBinding.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2317">The <see cref="T:System.Reflection.MemberInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="d5b6d-2318">
            <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2318">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2319">フィールドまたはプロパティのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2319">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a field or property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2320">
            <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2320">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> and the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2321">`member`パラメーターは、フィールドまたはプロパティを表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2321">The `member` parameter must represent a field or property.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2322">
            <paramref name="member" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2322">
              <paramref name="member" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2323">
            <paramref name="member" /> は、フィールドまたはプロパティを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2323">
              <paramref name="member" /> does not represent a field or property.</span>
          </span>
          <span data-ttu-id="d5b6d-2324">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2324">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2325">
            <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="member" /> が表すフィールドまたはプロパティの型のメンバーを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2325">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the field or property that <paramref name="member" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, bindings As IEnumerable(Of MemberBinding)) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="d5b6d-2326">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2326">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="d5b6d-2327">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2327">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2328">プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2328">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2329">
            <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2329">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2330">
            <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2330">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2331">
            <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2331">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="d5b6d-2332">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2332">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2333">
            <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2333">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberBind">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberMemberBinding MemberBind (System.Reflection.MethodInfo propertyAccessor, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberMemberBinding MemberBind(class System.Reflection.MethodInfo propertyAccessor, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberBind(System.Reflection.MethodInfo,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MemberBind (propertyAccessor As MethodInfo, ParamArray bindings As MemberBinding()) As MemberMemberBinding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberMemberBinding ^ MemberBind(System::Reflection::MethodInfo ^ propertyAccessor, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberMemberBinding</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="propertyAccessor">
          <span data-ttu-id="d5b6d-2334">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2334">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="d5b6d-2335">
            <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2335">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2336">プロパティ アクセサー メソッドを使用してアクセスされるメンバーのメンバーの再帰的な初期化を表す <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2336">Creates a <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that represents the recursive initialization of members of a member that is accessed by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2337">
            <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> と等しい <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> プロパティ、<see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティ、および指定した値に設定された <paramref name="propertyAccessor" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2337">A <see cref="T:System.Linq.Expressions.MemberMemberBinding" /> that has the <see cref="P:System.Linq.Expressions.MemberBinding.BindingType" /> property equal to <see cref="F:System.Linq.Expressions.MemberBindingType.MemberBinding" />, the <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />, and <see cref="P:System.Linq.Expressions.MemberMemberBinding.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2338">
            <paramref name="propertyAccessor" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2338">
              <paramref name="propertyAccessor" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2339">
            <paramref name="propertyAccessor" /> はプロパティ アクセサー メソッドを表していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2339">
              <paramref name="propertyAccessor" /> does not represent a property accessor method.</span>
          </span>
          <span data-ttu-id="d5b6d-2340">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2340">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2341">
            <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="propertyAccessor" /> が表すメソッドによりアクセスされるプロパティの型のメンバーを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2341">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type of the property accessed by the method that <paramref name="propertyAccessor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MemberInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2342">新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2342">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt; bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.MemberBinding&gt; bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.MemberBinding})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.MemberBinding&gt;" />
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2343">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2343">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="d5b6d-2344">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.MemberBinding" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2344">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2345">新しいオブジェクトを作成し、そのオブジェクトのプロパティを初期化する式を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2345">Represents an expression that creates a new object and initializes a property of the object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2346">
            <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2346">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2347"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberInitExpression>と等しい、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2347">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2348">次の例では、新しいオブジェクトを作成し、オブジェクトのプロパティを初期化する式を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2348">The following example demonstrates an expression that creates a new object and initializes a property of the object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#40)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2349">
            <paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2349">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2350">
            <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2350">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MemberInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberInitExpression MemberInit (System.Linq.Expressions.NewExpression newExpression, params System.Linq.Expressions.MemberBinding[] bindings);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberInitExpression MemberInit(class System.Linq.Expressions.NewExpression newExpression, class System.Linq.Expressions.MemberBinding[] bindings) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MemberInit(System.Linq.Expressions.NewExpression,System.Linq.Expressions.MemberBinding[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberInitExpression ^ MemberInit(System::Linq::Expressions::NewExpression ^ newExpression, ... cli::array &lt;System::Linq::Expressions::MemberBinding ^&gt; ^ bindings);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberInitExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newExpression" Type="System.Linq.Expressions.NewExpression" />
        <Parameter Name="bindings" Type="System.Linq.Expressions.MemberBinding[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newExpression">
          <span data-ttu-id="d5b6d-2351">
            <see cref="T:System.Linq.Expressions.NewExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2351">A <see cref="T:System.Linq.Expressions.NewExpression" /> to set the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> property equal to.</span>
          </span>
        </param>
        <param name="bindings">
          <span data-ttu-id="d5b6d-2352">
            <see cref="T:System.Linq.Expressions.MemberBinding" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2352">An array of <see cref="T:System.Linq.Expressions.MemberBinding" /> objects to use to populate the <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2353">
            <see cref="T:System.Linq.Expressions.MemberInitExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2353">Creates a <see cref="T:System.Linq.Expressions.MemberInitExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2354">
            <see cref="T:System.Linq.Expressions.MemberInitExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2354">A <see cref="T:System.Linq.Expressions.MemberInitExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberInit" /> and the <see cref="P:System.Linq.Expressions.MemberInitExpression.NewExpression" /> and <see cref="P:System.Linq.Expressions.MemberInitExpression.Bindings" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2355"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberInitExpression>と等しい、<xref:System.Linq.Expressions.Expression.Type%2A>プロパティ`newExpression`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2355">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberInitExpression> is equal to the <xref:System.Linq.Expressions.Expression.Type%2A> property of `newExpression`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2356">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.MemberInitExpression>を表す新しいオブジェクトの 2 つのメンバーの初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2356">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.MemberInit%28System.Linq.Expressions.NewExpression%2CSystem.Linq.Expressions.MemberBinding%5B%5D%29> method to create a <xref:System.Linq.Expressions.MemberInitExpression> that represents the initialization of two members of a new object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#9)]
 [!code-vb[System.Linq.Expressions.Expression#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2357">
            <paramref name="newExpression" /> または <paramref name="bindings" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2357">
              <paramref name="newExpression" /> or <paramref name="bindings" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2358">
            <paramref name="bindings" /> の要素の <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> プロパティは、<paramref name="newExpression" />.Type が表す型のメンバーを表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2358">The <see cref="P:System.Linq.Expressions.MemberBinding.Member" /> property of an element of <paramref name="bindings" /> does not represent a member of the type that <paramref name="newExpression" />.Type represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Modulo">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2359">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2359">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2360">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2360">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2361">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2361">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2362">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2362">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2363">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2363">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2364">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2364">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2365"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2365">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2366">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2366">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2367">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2367">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-2368"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2368">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2369">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2369">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2370">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2370">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2371">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2371">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2372">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`剰余演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2372">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2373">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2373">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2374">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2374">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2375">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2375">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2376">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2376">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2377">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2377">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2378">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2378">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2379">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2379">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2380">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2380">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2381">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2381">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2382">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2382">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2383">ノードの型は、定義済みの剰余演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2383">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-2384">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2384">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2385">ノードの型は、定義済みの剰余演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2385">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2386">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2386">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2387">剰余演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2387">The modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Modulo">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Modulo (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Modulo(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Modulo(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Modulo (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Modulo(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2388">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2388">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2389">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2389">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2390">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2390">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2391">算術剰余演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2391">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic remainder operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2392">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Modulo" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2393">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2393">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2394"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2394">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2395">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2395">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2396">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2396">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-2397"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2397">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2398">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2398">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2399">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2399">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2400">操作のメソッドの実装は、次の規則に基づいて選択されます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2400">The implementing method for the operation is chosen based on the following rules:</span></span>  
  
-   <span data-ttu-id="d5b6d-2401">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2401">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-2402">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`剰余演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2402">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the modulus operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2403">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2403">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2404">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2404">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2405">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2405">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2406">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2406">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2407">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2407">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2408">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2408">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2409">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2409">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2410">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2410">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2411">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2411">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2412">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2412">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2413">ノードの型は、定義済みの剰余演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2413">The type of the node is the result type of the predefined modulus operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-2414">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2414">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2415">ノードの型は、定義済みの剰余演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2415">The type of the node is the nullable type that corresponds to the result type of the predefined modulus operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2416">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2416">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2417">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2417">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2418">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には剰余演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2418">
              <paramref name="method" /> is <see langword="null" /> and the modulus operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ModuloAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2419">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2420">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2421">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2422">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2422">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2423">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2423">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2424">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2424">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2425">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2425">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2426">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2426">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2427">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2427">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2428">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2428">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModuloAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ModuloAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ModuloAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ModuloAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ModuloAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ModuloAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2429">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2429">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2430">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2431">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2431">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-2432">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2432">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2433">剰余代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a remainder assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2434">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.ModuloAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2435">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2435">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2436">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2436">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2437">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2437">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2438">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2438">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2439">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2439">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2440">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2440">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2441"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2441">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2442">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2442">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2443">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2443">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-2444"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2444">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2445">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2445">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2446">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2446">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2447">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2447">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2448">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`乗算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2448">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2449">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2449">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2450">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2450">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2451">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2451">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2452">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2452">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2453">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2453">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2454">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2454">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2455">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2455">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2456">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2456">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2457">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2457">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2458">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2458">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2459">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2459">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-2460">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2460">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2461">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2461">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2462">次のコード例では、2 つの値を乗算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2462">The following code example shows how to create an expression that multiplies two values.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#27)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#27)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2463">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2463">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2464">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2464">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Multiply (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Multiply(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Multiply(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Multiply (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Multiply(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2465">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2465">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2466">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2466">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2467">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2467">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2468">オーバーフロー チェックを行わない算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2468">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2469">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2469">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Multiply" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2470">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2470">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2471"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2471">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2472">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2472">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2473">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2473">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-2474"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2474">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2475">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2475">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2476">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2476">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2477">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2477">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2478">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2478">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-2479">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`乗算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2479">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2480">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2480">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2481">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2481">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2482">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2482">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2483">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2483">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2484">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2484">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2485">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2485">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2486">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2486">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2487">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2487">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2488">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2488">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2489">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2489">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2490">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2490">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-2491">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2491">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2492">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2492">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2493">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2493">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2494">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2494">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2495">
            <paramref name="method" /> は <see langword="null" /> で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2495">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2496">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2496">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2497">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2497">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2498">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2498">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2499">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2499">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2500">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2500">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2501">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2501">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2502">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2502">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2503">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2503">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2504">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2504">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2505">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2505">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2506">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2506">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2507">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2507">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2508">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2508">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-2509">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2509">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2510">オーバーフロー チェックを行わない乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2510">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2511">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2511">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2512">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2512">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2513">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2513">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2514">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2514">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2515">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2515">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2516">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2516">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2517">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2517">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2518">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2518">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2519">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2519">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2520">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2520">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2521">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2521">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2522">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2522">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2523">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2523">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2524">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2524">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-2525">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2525">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2526">オーバーフロー チェックを行う乗算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2526">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a multiplication assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2527">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2527">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2528">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2528">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2529">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2529">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2530">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2530">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2531">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2531">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2532">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2532">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2533">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2533">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2534"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2534">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2535">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2535">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2536">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2536">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-2537"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2537">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2538">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2538">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2539">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2539">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2540">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2540">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2541">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`乗算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2541">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2542">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2542">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2543">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2543">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2544">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2544">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2545">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2545">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2546">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2546">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2547">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2547">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2548">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2548">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2549">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2549">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2550">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2550">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2551">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2551">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2552">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2552">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-2553">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2553">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2554">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2554">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2555">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2555">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2556">乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2556">The multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="MultiplyChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression MultiplyChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression MultiplyChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.MultiplyChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function MultiplyChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ MultiplyChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2557">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2557">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2558">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2558">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2559">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2559">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2560">オーバーフロー チェックを行う算術乗算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2560">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic multiplication operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2561">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2561">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MultiplyChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2562">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2562">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2563"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2563">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2564">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2564">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2565">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2565">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-2566"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2566">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2567">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2567">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2568">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2568">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2569">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2569">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2570">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2570">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-2571">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`乗算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2571">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the multiplication operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2572">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2572">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2573">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2573">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2574">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2574">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2575">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2575">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2576">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2576">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2577">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2577">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2578">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2578">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2579">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2579">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2580">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2580">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2581">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2581">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2582">ノードの型は、定義済みの乗算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2582">The type of the node is the result type of the predefined multiplication operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-2583">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2583">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2584">ノードの型は、定義済みの乗算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2584">The type of the node is the nullable type that corresponds to the result type of the predefined multiplication operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2585">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2585">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2586">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2586">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2587">
            <paramref name="method" /> は <see langword="null" /> で、乗算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2587">
              <paramref name="method" /> is <see langword="null" /> and the multiplication operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Negate">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2588">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2588">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2589">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2589">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2590">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2590">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2591">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2591">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2592"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2592">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2593"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2593">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2594">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2594">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2595">それ以外の場合は false です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2595">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2596">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2596">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2597">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2597">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2598">If `expression`.型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2598">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2599">それ以外の場合`expression`です。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2599">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2600">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2600">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2601">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2601">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2602">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2602">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2603">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2603">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2604">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2604">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2605">`expression`.型は、null 許容値型と、対応する null 非許容の値の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2605">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2606">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2606">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2607">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2607">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-2608">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2608">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2609">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2609">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2610">次の例では、算術否定演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2610">The following example demonstrates how to create an expression that represents an arithmetic negation operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#50)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#50](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#50)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2611">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2611">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2612">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2612">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Negate">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Negate (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Negate(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Negate(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Negate(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2613">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2613">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2614">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2614">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2615">算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2615">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2616">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2616">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Negate" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2617"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2617">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2618"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2618">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2619">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2619">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2620">それ以外の場合は false です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2620">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2621">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2621">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2622">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2622">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2623">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2623">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-2624">If `expression`.型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2624">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2625">それ以外の場合`expression`です。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2625">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2626">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2626">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2627">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2627">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2628">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2628">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2629">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2629">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2630">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2630">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2631">`expression`.型は、null 許容値型と、対応する null 非許容の値の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2631">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2632">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2632">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2633">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2633">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-2634">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2634">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2635">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2635">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2636">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2636">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2637">
            <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2637">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2638">
            <paramref name="method" /> は <see langword="null" /> で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2638">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-2639">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2639">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2640">
            <paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2640">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NegateChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2641">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2641">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2642">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2642">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2643">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2643">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2644">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2644">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2645"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2645">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2646"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2646">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2647">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2647">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2648">それ以外の場合は false です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2648">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2649">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2649">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2650">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2650">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2651">If `expression`.型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2651">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2652">それ以外の場合`expression`です。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2652">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2653">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2653">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2654">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2654">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2655">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2655">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2656">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2656">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2657">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2657">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2658">`expression`.型は、null 許容値型と、対応する null 非許容の値の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2658">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2659">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2659">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2660">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2660">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-2661">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2661">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2662">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2662">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2663">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2663">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2664">単項マイナス演算子は、<paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2664">The unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NegateChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression NegateChecked (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression NegateChecked(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NegateChecked(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ NegateChecked(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2665">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2665">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2666">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2666">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2667">オーバーフロー チェックを行う算術否定演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2667">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an arithmetic negation operation that has overflow checking.</span>
          </span>
          <span data-ttu-id="d5b6d-2668">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2668">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2669">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2669">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NegateChecked" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2670"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2670">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2671"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2671">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2672">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2672">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2673">それ以外の場合は false です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2673">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2674">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2674">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2675">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2675">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2676">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2676">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-2677">If `expression`.型は、単項マイナス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2677">If `expression`.Type is a user-defined type that defines the unary minus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2678">それ以外の場合`expression`です。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2678">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2679">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2679">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2680">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2680">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2681">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2681">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2682">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2682">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2683">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2683">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2684">`expression`.型は、null 許容値型と、対応する null 非許容の値の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2684">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2685">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2685">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2686">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2686">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-2687">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2687">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2688">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2688">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2689">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2689">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2690">
            <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2690">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2691">
            <paramref name="method" /> は <see langword="null" /> で、単項マイナス演算子は <paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2691">
              <paramref name="method" /> is <see langword="null" /> and the unary minus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-2692">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2692">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2693">
            <paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2693">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="New">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2694">
            <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2694">Creates a <see cref="T:System.Linq.Expressions.NewExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="d5b6d-2695">
            <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2695">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2696">引数を受け取らない指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2696">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor that takes no arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2697">
            <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2697">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2698"><xref:System.Linq.Expressions.NewExpression.Arguments%2A>と<xref:System.Linq.Expressions.NewExpression.Members%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2698">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="d5b6d-2699"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティによって表されるコンス トラクターの宣言する型を表します`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2699">The <xref:System.Linq.Expressions.Expression.Type%2A> property represents the declaring type of the constructor represented by `constructor`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2700">
            <paramref name="constructor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2700">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2701">
            <paramref name="constructor" /> が表すコンストラクターには、少なくとも 1 つのパラメーターがあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2701">The constructor that <paramref name="constructor" /> represents has at least one parameter.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-2702">引数を受け取らないコンストラクターを持つ <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2702">A <see cref="T:System.Type" /> that has a constructor that takes no arguments.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2703">指定した型のパラメーターなしのコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2703">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the parameterless constructor of the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2704">
            <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定された型のパラメーターなしのコンストラクターを表す <see cref="F:System.Linq.Expressions.ExpressionType.New" /> に設定された <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="T:System.Reflection.ConstructorInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2704">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property set to the <see cref="T:System.Reflection.ConstructorInfo" /> that represents the constructor without parameters for the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2705">`type`パラメーターはパラメーターなしのコンス トラクターを持つ型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2705">The `type` parameter must represent a type that has a constructor without parameters.</span></span>  
  
 <span data-ttu-id="d5b6d-2706"><xref:System.Linq.Expressions.NewExpression.Arguments%2A>と<xref:System.Linq.Expressions.NewExpression.Members%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>は空のコレクションです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2706">The <xref:System.Linq.Expressions.NewExpression.Arguments%2A> and <xref:System.Linq.Expressions.NewExpression.Members%2A> properties of the resulting <xref:System.Linq.Expressions.NewExpression> are empty collections.</span></span> <span data-ttu-id="d5b6d-2707"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティと等しい`type`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2707">The <xref:System.Linq.Expressions.Expression.Type%2A> property is equal to `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2708">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.New%28System.Type%29>メソッドを作成、<xref:System.Linq.Expressions.NewExpression>を表すパラメーターなしのコンス トラクターを呼び出すことによって、ディクショナリ オブジェクトの新しいインスタンスを構築します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2708">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.New%28System.Type%29> method to create a <xref:System.Linq.Expressions.NewExpression> that represents constructing a new instance of a dictionary object by calling the constructor without parameters.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#10)]
 [!code-vb[System.Linq.Expressions.Expression#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2709">
            <paramref name="type" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2709">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2710">
            <paramref name="type" /> が表す型には、パラメーターなしのコンストラクターがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2710">The type that <paramref name="type" /> represents does not have a constructor without parameters.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="d5b6d-2711">
            <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2711">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-2712">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2712">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2713">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2713">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2714">
            <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2714">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2715">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2715">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2716">場合`arguments`は`null`と見なされます。 空で、および<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2716">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="d5b6d-2717"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>によって表されるコンス トラクターの宣言する型を表す`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2717">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2718"><xref:System.Linq.Expressions.NewExpression.Members%2A>プロパティは空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2718">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2719">
            <paramref name="constructor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2719">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2720">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2720">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2721">
            <paramref name="arguments" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2721">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2722">
            <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2722">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="d5b6d-2723">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2723">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2724">
            <paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2724">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, ParamArray arguments As Expression()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="d5b6d-2725">
            <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2725">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-2726">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2726">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2727">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2727">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2728">
            <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" /> プロパティおよび <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2728">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> and <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2729">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2729">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2730">場合`arguments`は`null`と見なされます。 空で、および<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2730">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="d5b6d-2731"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>によって表されるコンス トラクターの宣言する型を表す`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2731">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2732"><xref:System.Linq.Expressions.NewExpression.Members%2A>プロパティは空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2732">The <xref:System.Linq.Expressions.NewExpression.Members%2A> property is an empty collection.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2733">
            <paramref name="constructor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2733">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2734">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2734">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2735">
            <paramref name="arguments" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2735">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2736">
            <paramref name="arguments" /> の長さが、<paramref name="constructor" /> を表すコンストラクターのパラメーターの数と一致しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2736">The length of <paramref name="arguments" /> does match the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="d5b6d-2737">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2737">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2738">
            <paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2738">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt; members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Collections.Generic.IEnumerable`1&lt;class System.Reflection.MemberInfo&gt; members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Collections.Generic.IEnumerable{System.Reflection.MemberInfo})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), members As IEnumerable(Of MemberInfo)) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, System::Collections::Generic::IEnumerable&lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Collections.Generic.IEnumerable&lt;System.Reflection.MemberInfo&gt;" />
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="d5b6d-2739">
            <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2739">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-2740">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2740">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="d5b6d-2741">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Reflection.MemberInfo" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2741">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2742">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2742">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="d5b6d-2743">コンストラクターが初期化したフィールドにアクセスするメンバーが指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2743">The members that access the constructor initialized fields are specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2744">
            <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2744">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2745">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2745">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2746">場合`arguments`は`null`と見なされます。 空で、および<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2746">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="d5b6d-2747">場合`members`は`null`、<xref:System.Linq.Expressions.NewExpression.Members%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>空のコレクションします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2747">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="d5b6d-2748">場合`members`は`null`、同じ数のとしての要素があります`arguments`の各要素のない必要があります`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2748">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="d5b6d-2749">各要素`members`する必要があります、 <xref:System.Reflection.PropertyInfo>、<xref:System.Reflection.FieldInfo>または<xref:System.Reflection.MethodInfo>によって表されるコンス トラクターの宣言型でインスタンス メンバーを表す`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2749">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2750">プロパティには、プロパティを表す場合、`get`アクセサー。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2750">If it represents a property, the property must have a `get` accessor.</span></span> <span data-ttu-id="d5b6d-2751">対応する要素の`arguments`の各要素に対して`members`必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>メンバーの型に割り当てることのある型を表すプロパティを`members`要素を表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2751">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="d5b6d-2752"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>コンス トラクターの宣言する型を表すを`constructor`を表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2752">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2753">
            <paramref name="constructor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2753">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2754">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2754">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2755">
            <paramref name="arguments" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2755">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2756">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2756">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2757">
            <paramref name="members" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2757">An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2758">
            <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2758">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="d5b6d-2759">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2759">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2760">
            <paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2760">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="d5b6d-2761">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2761">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2762">
            <paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2762">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2763">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2763">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2764">
            <paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2764">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="New">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewExpression New (System.Reflection.ConstructorInfo constructor, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments, params System.Reflection.MemberInfo[] members);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewExpression New(class System.Reflection.ConstructorInfo constructor, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments, class System.Reflection.MemberInfo[] members) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.New(System.Reflection.ConstructorInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression},System.Reflection.MemberInfo[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function New (constructor As ConstructorInfo, arguments As IEnumerable(Of Expression), ParamArray members As MemberInfo()) As NewExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewExpression ^ New(System::Reflection::ConstructorInfo ^ constructor, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments, ... cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ members);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constructor" Type="System.Reflection.ConstructorInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
        <Parameter Name="members" Type="System.Reflection.MemberInfo[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="constructor">
          <span data-ttu-id="d5b6d-2765">
            <see cref="T:System.Reflection.ConstructorInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2765">The <see cref="T:System.Reflection.ConstructorInfo" /> to set the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" /> property equal to.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-2766">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewExpression.Arguments" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2766">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> collection.</span>
          </span>
        </param>
        <param name="members">
          <span data-ttu-id="d5b6d-2767">
            <see cref="T:System.Reflection.MemberInfo" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewExpression.Members" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2767">An array of <see cref="T:System.Reflection.MemberInfo" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewExpression.Members" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2768">指定した引数を持つ指定したコンストラクターの呼び出しを表す <see cref="T:System.Linq.Expressions.NewExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2768">Creates a <see cref="T:System.Linq.Expressions.NewExpression" /> that represents calling the specified constructor with the specified arguments.</span>
          </span>
          <span data-ttu-id="d5b6d-2769">コンストラクターが初期化したフィールドにアクセスするメンバーが配列として指定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2769">The members that access the constructor initialized fields are specified as an array.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2770">
            <see cref="T:System.Linq.Expressions.NewExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.New" />、<see cref="P:System.Linq.Expressions.NewExpression.Constructor" />、および <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.NewExpression.Members" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2770">A <see cref="T:System.Linq.Expressions.NewExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.New" /> and the <see cref="P:System.Linq.Expressions.NewExpression.Constructor" />, <see cref="P:System.Linq.Expressions.NewExpression.Arguments" /> and <see cref="P:System.Linq.Expressions.NewExpression.Members" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2771">`arguments`パラメーターによって表されるコンス トラクターのパラメーターの数と同じ数の要素を含める必要があります`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2771">The `arguments` parameter must contain the same number of elements as the number of parameters for the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2772">場合`arguments`は`null`と見なされます。 空で、および<xref:System.Linq.Expressions.NewExpression.Arguments%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>空のコレクション。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2772">If `arguments` is `null`, it is considered empty, and the <xref:System.Linq.Expressions.NewExpression.Arguments%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span>  
  
 <span data-ttu-id="d5b6d-2773">場合`members`は`null`、<xref:System.Linq.Expressions.NewExpression.Members%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>空のコレクションします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2773">If `members` is `null`, the <xref:System.Linq.Expressions.NewExpression.Members%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> is an empty collection.</span></span> <span data-ttu-id="d5b6d-2774">場合`members`は`null`、同じ数のとしての要素があります`arguments`の各要素のない必要があります`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2774">If `members` is not `null`, it must have the same number of elements as `arguments` and each element must not be `null`.</span></span> <span data-ttu-id="d5b6d-2775">各要素`members`する必要があります、 <xref:System.Reflection.PropertyInfo>、<xref:System.Reflection.FieldInfo>または<xref:System.Reflection.MethodInfo>によって表されるコンス トラクターの宣言型でインスタンス メンバーを表す`constructor`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2775">Each element of `members` must be a <xref:System.Reflection.PropertyInfo>, <xref:System.Reflection.FieldInfo> or <xref:System.Reflection.MethodInfo> that represents an instance member on the declaring type of the constructor represented by `constructor`.</span></span> <span data-ttu-id="d5b6d-2776">プロパティを表す、プロパティが関連付けられているフィールドの値を取得できる必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2776">If it represents a property, the property must be able to retrieve the value of the associated field.</span></span> <span data-ttu-id="d5b6d-2777">対応する要素の`arguments`の各要素に対して`members`必要があります、<xref:System.Linq.Expressions.Expression.Type%2A>メンバーの型に割り当てることのある型を表すプロパティを`members`要素を表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2777">The corresponding element of `arguments` for each element of `members` must have a <xref:System.Linq.Expressions.Expression.Type%2A> property that represents a type that is assignable to the type of the member that the `members` element represents.</span></span>  
  
 <span data-ttu-id="d5b6d-2778"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewExpression>コンス トラクターの宣言する型を表すを`constructor`を表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2778">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewExpression> represents the declaring type of the constructor that `constructor` represents.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2779">
            <paramref name="constructor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2779">
              <paramref name="constructor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2780">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2780">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2781">
            <paramref name="arguments" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2781">An element of <paramref name="arguments" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2782">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2782">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2783">
            <paramref name="members" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2783">An element of <paramref name="members" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2784">
            <paramref name="arguments" /> パラメーターに、<paramref name="constructor" /> が表すコンストラクターのパラメーターの数と同じ数の要素が格納されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2784">The <paramref name="arguments" /> parameter does not contain the same number of elements as the number of parameters for the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="d5b6d-2785">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2785">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2786">
            <paramref name="arguments" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを、<paramref name="constructor" /> を表すコンストラクターの対応するパラメーターの型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2786">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="arguments" /> is not assignable to the type of the corresponding parameter of the constructor that <paramref name="constructor" /> represents.</span>
          </span>
          <span data-ttu-id="d5b6d-2787">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2787">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2788">
            <paramref name="members" /> パラメーターに、<paramref name="arguments" /> と同じ数の要素がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2788">The <paramref name="members" /> parameter does not have the same number of elements as <paramref name="arguments" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2789">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2789">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2790">
            <paramref name="arguments" /> の要素に、<paramref name="members" /> の対応する要素により表されるメンバーの型に代入可能な型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティがあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2790">An element of <paramref name="arguments" /> has a <see cref="P:System.Linq.Expressions.Expression.Type" /> property that represents a type that is not assignable to the type of the member that is represented by the corresponding element of <paramref name="members" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayBounds">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2791">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2791">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-2792">配列の要素の型を表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2792">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="d5b6d-2793">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2793">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2794">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2794">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2795">
            <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2795">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2796"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewArrayExpression>ランクがの長さと等しい、配列型を表す`bounds`要素型があると`type`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2796">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="d5b6d-2797"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`bounds`整数型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2797">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2798">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>文字列配列の作成を表す式ツリーを作成する方法が 2 のランク。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2798">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2799">
            <paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2799">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2800">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2800">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2801">
            <paramref name="bounds" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2801">An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2802">
            <paramref name="bounds" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2802">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayBounds">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayBounds (Type type, params System.Linq.Expressions.Expression[] bounds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayBounds(class System.Type type, class System.Linq.Expressions.Expression[] bounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayBounds(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayBounds(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ bounds);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="bounds" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-2803">配列の要素の型を表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2803">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="bounds">
          <span data-ttu-id="d5b6d-2804">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2804">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2805">指定したランクを持つ配列の作成を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2805">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating an array that has a specified rank.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2806">
            <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2806">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayBounds" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2807"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewArrayExpression>ランクがの長さと等しい、配列型を表す`bounds`要素型があると`type`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2807">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is equal to the length of `bounds` and whose element type is `type`.</span></span>  
  
 <span data-ttu-id="d5b6d-2808"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`bounds`整数型を表す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2808">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `bounds` must represent an integral type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2809">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.NewArrayBounds%2A>文字列配列の作成を表す式ツリーを作成する方法が 2 のランク。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2809">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayBounds%2A> method to create an expression tree that represents creating a string array that has a rank of 2.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#2)]
 [!code-vb[System.Linq.Expressions.Expression#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2810">
            <paramref name="type" /> または <paramref name="bounds" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2810">
              <paramref name="type" /> or <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2811">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2811">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2812">
            <paramref name="bounds" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2812">An element of <paramref name="bounds" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2813">
            <paramref name="bounds" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、整数型を表しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2813">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="bounds" /> does not represent an integral type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NewArrayInit">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2814">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2814">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-2815">配列の要素の型を表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2815">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2816">
            <see cref="T:System.Collections.Generic.IEnumerable\`1" /> コレクションへの読み込みに使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2816">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2817">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2817">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2818">
            <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2818">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2819"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`によって表される型に割り当てることのある型を表す必要があります`type`、場合によっては、その後*引用符で囲まれた*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2819">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-2820">場合にのみ、要素は引用符で囲まないで`type`は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2820">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-2821">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2821">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-2822">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2822">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="d5b6d-2823"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewArrayExpression>型を表します配列ランクは 1 で要素型は`type`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2823">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2824">次の例で使用する方法、 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 1 次元の文字列配列の作成を表す式ツリーを作成するメソッドは文字列式のリストで初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2824">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2825">
            <paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2825">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2826">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2826">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2827">
            <paramref name="initializers" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2827">An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2828">
            <paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> が表す型に代入できない型を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2828">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type that <paramref name="type" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NewArrayInit">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.NewArrayExpression NewArrayInit (Type type, params System.Linq.Expressions.Expression[] initializers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.NewArrayExpression NewArrayInit(class System.Type type, class System.Linq.Expressions.Expression[] initializers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NewArrayInit(System.Type,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::NewArrayExpression ^ NewArrayInit(Type ^ type, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ initializers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.NewArrayExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="initializers" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-2829">配列の要素の型を表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2829">A <see cref="T:System.Type" /> that represents the element type of the array.</span>
          </span>
        </param>
        <param name="initializers">
          <span data-ttu-id="d5b6d-2830">
            <see cref="T:System.Linq.Expressions.Expression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2830">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2831">1 次元配列の作成と、要素のリストからの初期化を表す <see cref="T:System.Linq.Expressions.NewArrayExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2831">Creates a <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that represents creating a one-dimensional array and initializing it from a list of elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2832">
            <see cref="T:System.Linq.Expressions.NewArrayExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> プロパティを含む <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2832">A <see cref="T:System.Linq.Expressions.NewArrayExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NewArrayInit" /> and the <see cref="P:System.Linq.Expressions.NewArrayExpression.Expressions" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2833"><xref:System.Linq.Expressions.Expression.Type%2A>の各要素のプロパティ`initializers`によって表される型に割り当てることのある型を表す必要があります`type`、場合によっては、その後*引用符で囲まれた*です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2833">The <xref:System.Linq.Expressions.Expression.Type%2A> property of each element of `initializers` must represent a type that is assignable to the type represented by `type`, possibly after it is *quoted*.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="d5b6d-2834">場合にのみ、要素は引用符で囲まないで`type`は<xref:System.Linq.Expressions.Expression>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2834">An element will be quoted only if `type` is <xref:System.Linq.Expressions.Expression>.</span></span> <span data-ttu-id="d5b6d-2835">要素をラップする手段を引用符で囲む、<xref:System.Linq.Expressions.ExpressionType.Quote>ノード。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2835">Quoting means the element is wrapped in a <xref:System.Linq.Expressions.ExpressionType.Quote> node.</span></span> <span data-ttu-id="d5b6d-2836">結果として得られるノードは、<xref:System.Linq.Expressions.UnaryExpression>が<xref:System.Linq.Expressions.UnaryExpression.Operand%2A>プロパティは、要素の`initializers`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2836">The resulting node is a <xref:System.Linq.Expressions.UnaryExpression> whose <xref:System.Linq.Expressions.UnaryExpression.Operand%2A> property is the element of `initializers`.</span></span>  
  
 <span data-ttu-id="d5b6d-2837"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.NewArrayExpression>型を表します配列ランクは 1 で要素型は`type`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2837">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.NewArrayExpression> represents an array type whose rank is 1 and whose element type is `type`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2838">次の例で使用する方法、 <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> 1 次元の文字列配列の作成を表す式ツリーを作成するメソッドは文字列式のリストで初期化します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2838">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.NewArrayInit%2A> method to create an expression tree that represents creating a one-dimensional string array that is initialized with a list of string expressions.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#1)]
 [!code-vb[System.Linq.Expressions.Expression#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2839">
            <paramref name="type" /> または <paramref name="initializers" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2839">
              <paramref name="type" /> or <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-2840">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2840">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2841">
            <paramref name="initializers" /> の要素は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2841">An element of <paramref name="initializers" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2842">
            <paramref name="initializers" /> の要素の <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティは、<paramref name="type" /> 型に代入可能な型を表します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2842">The <see cref="P:System.Linq.Expressions.Expression.Type" /> property of an element of <paramref name="initializers" /> represents a type that is not assignable to the type <paramref name="type" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.ExpressionType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Linq.Expressions.ExpressionType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NodeType As ExpressionType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Linq::Expressions::ExpressionType NodeType { System::Linq::Expressions::ExpressionType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2843">この <see cref="T:System.Linq.Expressions.Expression" /> のノード型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2843">Gets the node type of this <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5b6d-2844">
            <see cref="T:System.Linq.Expressions.ExpressionType" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2844">One of the <see cref="T:System.Linq.Expressions.ExpressionType" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2845"><xref:System.Linq.Expressions.Expression.NodeType%2A>プロパティの説明を特殊化されて、<xref:System.Linq.Expressions.Expression>よりその派生型だけです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2845">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property provides a more specialized description of an <xref:System.Linq.Expressions.Expression> than just its derived type.</span></span> <span data-ttu-id="d5b6d-2846">たとえば、<xref:System.Linq.Expressions.BinaryExpression>バイナリ式、除算演算や「より大きい」操作などのさまざまな種類を表すために使用できます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2846">For example, a <xref:System.Linq.Expressions.BinaryExpression> can be used to represent many different kinds of binary expressions, such as a division operation or a "greater than" operation.</span></span> <span data-ttu-id="d5b6d-2847"><xref:System.Linq.Expressions.Expression.NodeType%2A>プロパティを記述してこれらの二項式として<xref:System.Linq.Expressions.ExpressionType.Divide>と<xref:System.Linq.Expressions.ExpressionType.GreaterThan>、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2847">The <xref:System.Linq.Expressions.Expression.NodeType%2A> property would describe these binary expressions as <xref:System.Linq.Expressions.ExpressionType.Divide> and <xref:System.Linq.Expressions.ExpressionType.GreaterThan>, respectively.</span></span>  
  
 <span data-ttu-id="d5b6d-2848">式の静的な CLR 型を<xref:System.Linq.Expressions.Expression>によって表されるを表すオブジェクトを<xref:System.Linq.Expressions.Expression.Type%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2848">The static CLR type of the expression that the <xref:System.Linq.Expressions.Expression> object represents is represented by the <xref:System.Linq.Expressions.Expression.Type%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Not">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2849">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2849">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2850">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2850">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2851">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2851">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2852">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2852">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2853"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2853">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2854"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2854">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2855">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2855">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2856">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2856">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2857">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2857">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2858">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2858">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2859">If `expression`.型は、単項演算子ではなくを定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2859">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2860">それ以外の場合`expression`です。型は、数値またはブール値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2860">Otherwise, if `expression`.Type is a numeric or Boolean type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2861">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2861">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2862">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2862">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2863">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2863">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2864">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2864">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2865">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2865">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2866">`expression`.型は、null 許容値型と、対応する null 非許容の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2866">`expression`.Type is a nullable value type and the corresponding non-nullable type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2867">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2867">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2868">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2868">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-2869">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2869">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2870">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2870">Otherwise, the node is lifted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-2871">次の例は、論理を表す式を作成する方法を示します操作ではありません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2871">The following example demonstrates how to create an expression that represents a logical NOT operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#51)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#51](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#51)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2872">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2872">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2873">単項 NOT 演算子は、<paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2873">The unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Not">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Not (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Not(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Not(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Not(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2874">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2874">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2875">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2875">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2876">ビットごとの補数演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2876">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a bitwise complement operation.</span>
          </span>
          <span data-ttu-id="d5b6d-2877">実装メソッドを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2877">The implementing method can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2878">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2878">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Not" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2879"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2879">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2880"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2880">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2881">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2881">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2882">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2882">Otherwise, they are `false`.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2883">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2883">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2884">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2884">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2885">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2885">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-2886">If `expression`.型は、単項演算子ではなくを定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2886">If `expression`.Type is a user-defined type that defines the unary not operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2887">それ以外の場合`expression`です。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2887">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2888">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2888">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2889">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2889">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2890">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2890">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2891">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2891">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2892">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2892">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2893">`expression`.型は、null 許容値型と、対応する null 非許容の値の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2893">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2894">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2894">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2895">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2895">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-2896">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2896">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2897">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2897">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2898">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2898">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2899">
            <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2899">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2900">
            <paramref name="method" /> は <see langword="null" /> で、単項 NOT 演算子は <paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2900">
              <paramref name="method" /> is <see langword="null" /> and the unary not operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-2901">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2901">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-2902">
            <paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2902">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="NotEqual">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2903">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2903">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2904">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2904">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2905">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2905">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2906">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2906">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2907">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2907">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2908">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2908">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2909"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2909">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2910">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2910">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true`.</span></span> <span data-ttu-id="d5b6d-2911">それ以外の場合は `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2911">Otherwise, it is `false`.</span></span> <span data-ttu-id="d5b6d-2912"><xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> プロパティは常に `false` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2912">The <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is always `false`.</span></span> <span data-ttu-id="d5b6d-2913"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2913">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2914">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2914">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2915">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2915">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2916">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2916">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2917">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`非等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2917">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2918">メソッドの実装は、それ以外の場合、`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2918">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2919">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2919">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2920">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2920">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2921">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2921">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2922">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2922">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2923">次の 2 つの条件が満たされているかどうか、ノードがリフトされており、ノードの種類は<xref:System.Boolean>:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2923">If the following two conditions are satisfied, the node is lifted and the type of the node is <xref:System.Boolean>:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2924">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2924">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2925">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2925">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-2926">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2926">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2927">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2927">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2928">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2928">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-2929">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2929">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2930">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2930">The type of the node is <xref:System.Boolean>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2931">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2931">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2932">非等値演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2932">The inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression NotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, bool liftToNull, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression NotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, bool liftToNull, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.NotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Boolean,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function NotEqual (left As Expression, right As Expression, liftToNull As Boolean, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ NotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, bool liftToNull, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="liftToNull" Type="System.Boolean" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2933">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2933">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2934">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2934">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="liftToNull">
          <span data-ttu-id="d5b6d-2935">
            <see langword="true" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="true" />。<see langword="false" /> を <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> に設定する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2935">
              <see langword="true" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="true" />; <see langword="false" /> to set <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> to <see langword="false" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2936">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2936">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2937">非等価比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2937">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2938">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2938">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.IsLiftedToNull" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2939">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2939">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2940"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2940">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2941">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>プロパティは`true`と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティと等しい`liftToNull`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2941">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> property is `true` and the <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> property is equal to `liftToNull`.</span></span> <span data-ttu-id="d5b6d-2942">それ以外の場合、それらが両方とも`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2942">Otherwise, they are both `false`.</span></span> <span data-ttu-id="d5b6d-2943"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2943">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2944">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2944">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2945">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2945">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2946">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2946">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2947">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2947">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2948">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`非等値演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2948">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the inequality operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2949">メソッドの実装は、それ以外の場合、`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2949">Otherwise, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2950">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2950">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2951">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2951">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2952">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2952">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2953">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2953">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2954">次の 2 つの条件が満たされている場合、ノードはリフトされています。また、ノードの型は null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2954">If the following two conditions are satisfied, the node is lifted; also, the type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2955">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2955">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2956">実装メソッドの戻り値の型は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2956">The return type of the implementing method is <xref:System.Boolean>.</span></span>  
  
 <span data-ttu-id="d5b6d-2957">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2957">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2958">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2958">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2959">ノードの種類は<xref:System.Boolean>します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2959">The type of the node is <xref:System.Boolean>.</span></span>  
  
-   <span data-ttu-id="d5b6d-2960">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2960">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2961">ノードの型が null 許容<xref:System.Boolean>場合`liftToNull`は`true`または<xref:System.Boolean>場合`liftToNull`は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2961">The type of the node is nullable <xref:System.Boolean> if `liftToNull` is `true` or <xref:System.Boolean> if `liftToNull` is `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-2962">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2962">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-2963">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2963">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-2964">
            <paramref name="method" /> は <see langword="null" /> で、非等値演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2964">
              <paramref name="method" /> is <see langword="null" /> and the inequality operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OnesComplement">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2965">1 の補数を表す式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2965">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2966">
            <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2966">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2967">1 の補数を表す式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2967">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2968">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2968">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnesComplement">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression OnesComplement (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression OnesComplement(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OnesComplement(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ OnesComplement(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-2969">
            <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2969">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-2970">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2970">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2971">1 の補数を表す式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2971">Returns the expression representing the ones complement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2972">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2972">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Or">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-2973">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2973">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-2974">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2974">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-2975">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2975">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-2976">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2976">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-2977">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-2977">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-2978">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2978">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-2979"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2979">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-2980">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2980">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-2981">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2981">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-2982"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2982">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-2983">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2983">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-2984">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2984">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-2985">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2985">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-2986">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2986">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2987">それ以外の場合`left`です。型および`right`です。型が整数またはブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2987">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-2988">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2988">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-2989">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2989">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2990">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2990">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2991">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2991">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-2992">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2992">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-2993">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2993">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-2994">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2994">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-2995">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2995">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-2996">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2996">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-2997">ノードの型は、結果の型定義済みのビットごと`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2997">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-2998">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2998">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-2999">ノードの型は、結果の型に定義済みのビットごとの対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-2999">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3000">次のコード例では、論理 OR 演算を表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3000">The following code example shows how to create an expression that represents a logical OR operation.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#28)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3001">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3001">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3002">ビットごとの <see langword="OR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3002">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Or">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Or (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Or(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Or(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Or (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Or(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3003">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3003">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3004">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3004">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3005">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3005">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3006">ビットごとの <see cref="T:System.Linq.Expressions.BinaryExpression" /> 演算を表す <see langword="OR" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3006">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise <see langword="OR" /> operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3007">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Or" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3007">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Or" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3008">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3008">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3009"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3009">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3010">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3010">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3011">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3011">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3012"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3012">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3013">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3013">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3014">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3014">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3015">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3015">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3016">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3016">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3017">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3017">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3018">それ以外の場合`left`です。型および`right`です。型が整数またはブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3018">Otherwise, if `left`.Type and `right`.Type are integral or Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3019">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3019">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3020">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3020">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3021">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3021">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3022">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3022">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3023">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3023">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3024">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3024">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3025">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3025">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3026">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3026">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3027">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3027">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3028">ノードの型は、結果の型定義済みのビットごと`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3028">The type of the node is the result type of the predefined bitwise `OR` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3029">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3029">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3030">ノードの型は、結果の型に定義済みのビットごとの対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3030">The type of the node is the nullable type that corresponds to the result type of the predefined bitwise `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3031">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3031">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3032">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3032">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3033">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="OR" /> 演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3033">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3034">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3034">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3035">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3035">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3036">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3036">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3037">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3037">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3038">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3038">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3039">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3039">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3040">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3040">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3041">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3041">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3042">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3042">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3043">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3043">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3044">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3044">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3045">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3045">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3046">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3046">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-3047">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3047">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3048">ビットごとの OR 代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3048">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise OR assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3049">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3049">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrElse">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3050">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3050">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operator evaluates to <see langword="false" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3051">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3051">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3052">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3052">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3053">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3053">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3054">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3054">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3055">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3055">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3056"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3056">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3057">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3057">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3058">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3058">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3059"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3059">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3060">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3060">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3061">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3061">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3062">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3062">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3063">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3063">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d5b6d-3064">条件付き`OR`(C#) 演算子をオーバー ロードできませんまたは[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3064">The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="d5b6d-3065">ただし、条件付き`OR`ビットごとの演算子が評価される`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3065">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="d5b6d-3066">したがってにユーザー定義のオーバー ロード、ビットごとの`OR`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3066">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="d5b6d-3067">それ以外の場合`left`です。型および`right`です。型がブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3067">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3068">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3068">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3069">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3069">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3070">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3070">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3071">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3071">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3072">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3072">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3073">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが、null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3073">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3074">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3074">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3075">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3075">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3076">`left`.型および`right`です。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3076">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="d5b6d-3077">If `left`.型および`right`です。型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3077">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3078">ノードの型は、定義済みの条件式の結果型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3078">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3079">If `left`.型および`right`です。型は null を許容、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3079">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3080">ノードの型は、定義済みの条件式の結果の型に対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3080">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3081">次のコード例は、論理積を表す式を作成する方法を示しています。`OR`に最初のオペランドが評価される場合にのみ 2 番目のオペランドを評価する操作`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3081">The following code example shows how to create an expression that represents a logical `OR` operation that evaluates the second operand only if the first operand evaluates to `false`.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#29)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3082">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3082">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3083">ビットごとの <see langword="OR" /> 演算子は、<paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3083">The bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-3084">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3084">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3085">
            <paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3085">
              <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="OrElse">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression OrElse (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression OrElse(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.OrElse(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OrElse (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ OrElse(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3086">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3086">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3087">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3087">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3088">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3088">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3089">1 番目のオペランドが <see cref="T:System.Linq.Expressions.BinaryExpression" /> に評価された場合にのみ 2 番目のオペランドを評価する条件付き <see langword="OR" /> 演算を表す <see langword="false" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3089">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a conditional <see langword="OR" /> operation that evaluates the second operand only if the first operand evaluates to <see langword="false" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3090">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3090">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.OrElse" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3091">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3091">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3092"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3092">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3093">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3093">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3094">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3094">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3095"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3095">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3096">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3096">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3097">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3097">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3098">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3098">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3099">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3099">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-3100">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`演算子をオーバー ロードするユーザー定義型を表す`OR`演算子、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3100">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the bitwise `OR` operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="d5b6d-3101">条件付き`OR`(C#) 演算子をオーバー ロードできませんまたは[!INCLUDE[vbprvb](~/includes/vbprvb-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3101">The conditional `OR` operator cannot be overloaded in C# or [!INCLUDE[vbprvb](~/includes/vbprvb-md.md)].</span></span> <span data-ttu-id="d5b6d-3102">ただし、条件付き`OR`ビットごとの演算子が評価される`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3102">However, the conditional `OR` operator is evaluated by using the bitwise `OR` operator.</span></span> <span data-ttu-id="d5b6d-3103">したがってにユーザー定義のオーバー ロード、ビットごとの`OR`演算子は、このノード型のメソッドの実装を指定できます。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3103">Thus, a user-defined overload of the bitwise `OR` operator can be the implementing method for this node type.</span></span>  
  
-   <span data-ttu-id="d5b6d-3104">それ以外の場合`left`です。型および`right`です。型がブール型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3104">Otherwise, if `left`.Type and `right`.Type are Boolean types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3105">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3105">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3106">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3106">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3107">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3107">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3108">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3108">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3109">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3109">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3110">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが、null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3110">`left`.Type and `right`.Type are both value types of which at least one is nullable, and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3111">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3111">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3112">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3112">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3113">`left`.型および`right`です。種類は、同じブール型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3113">`left`.Type and `right`.Type are the same Boolean type.</span></span>  
  
-   <span data-ttu-id="d5b6d-3114">If `left`.型および`right`です。型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3114">If `left`.Type and `right`.Type are non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3115">ノードの型は、定義済みの条件式の結果型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3115">The type of the node is the result type of the predefined conditional `OR` operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3116">If `left`.型および`right`です。型は null を許容、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3116">If `left`.Type and `right`.Type are nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3117">ノードの型は、定義済みの条件式の結果の型に対応する null 許容型`OR`演算子。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3117">The type of the node is the nullable type that corresponds to the result type of the predefined conditional `OR` operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3118">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3118">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3119">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3119">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3120">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type にはビット処理 <see langword="OR" /> 演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3120">
              <paramref name="method" /> is <see langword="null" /> and the bitwise <see langword="OR" /> operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-3121">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3121">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3122">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type と <paramref name="right" />.Type は同じブール型ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3122">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and <paramref name="right" />.Type are not the same Boolean type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Parameter">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3123">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3123">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-3124">パラメーターまたは変数の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3124">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3125">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3125">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3126">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3126">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-3127">次の例で作成する方法、<xref:System.Linq.Expressions.MethodCallExpression>オブジェクトの値を出力、<xref:System.Linq.Expressions.ParameterExpression>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3127">The following example demonstrates how to create a <xref:System.Linq.Expressions.MethodCallExpression> object that prints the value of a <xref:System.Linq.Expressions.ParameterExpression> object.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#49)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#49](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#49)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameter">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Parameter (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Parameter(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Parameter(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Parameter(Type ^ type, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-3128">パラメーターまたは変数の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3128">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-3129">デバッグまたは印刷の目的でのみ使用されるパラメーターまたは変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3129">The name of the parameter or variable, used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3130">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3130">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3131">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> プロパティおよび <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを含む <see cref="P:System.Linq.Expressions.ParameterExpression.Name" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3131">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Parameter" /> and the <see cref="P:System.Linq.Expressions.Expression.Type" /> and <see cref="P:System.Linq.Expressions.ParameterExpression.Name" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3132">
            <paramref name="type" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3132">
              <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3133">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3133">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3134">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3134">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3135">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3135">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3136">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3136">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3137">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3137">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3138">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3138">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3139">式の代入と、それに続く元の式の値を 1 つ減らすデクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3139">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent decrement by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3140">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3140">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PostIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3141">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3141">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3142">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3142">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3143">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3143">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3144">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3144">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PostIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PostIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PostIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PostIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3145">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3145">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3146">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3146">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3147">式の代入と、それに続く元の式の値を 1 つ増やすインクリメントを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3147">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the assignment of the expression followed by a subsequent increment by 1 of the original expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3148">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3148">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Power">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3149">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3149">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3150">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3150">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3151">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3151">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3152">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3152">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3153">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3153">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3154">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3154">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3155"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3155">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3156">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3156">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3157">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3157">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3158"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3158">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3159">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3159">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3160">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3160">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3161">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3161">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3162">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`累乗演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3162">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3163">それ以外の場合`left`です。型および`right`です。型が両方とも<xref:System.Double>では、メソッドの実装<xref:System.Math.Pow%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3163">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3164">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3164">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="d5b6d-3165">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3165">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3166">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3166">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3167">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3167">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3168">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3168">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3169">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3169">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3170">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3170">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3171">指数演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3171">The exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-3172">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3172">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3173">
            <paramref name="left" />.Type や <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3173">
              <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Power">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Power (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Power(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Power(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Power (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Power(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3174">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3174">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3175">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3175">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3176">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3176">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3177">数値の累乗を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3177">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising a number to a power.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3178">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Power" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3178">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Power" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3179">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3179">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3180"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3180">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3181">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3181">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3182">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3182">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3183"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3183">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3184">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3184">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3185">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3185">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3186">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3186">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3187">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドはメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3187">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3188">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`累乗演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3188">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the exponentiation operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3189">それ以外の場合`left`です。型および`right`です。型が両方とも<xref:System.Double>では、メソッドの実装<xref:System.Math.Pow%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3189">Otherwise, if `left`.Type and `right`.Type are both <xref:System.Double>, the implementing method is <xref:System.Math.Pow%2A>.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3190">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3190">Node Type and Lifted versus Non-Lifted</span></span>  
  
-   <span data-ttu-id="d5b6d-3191">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3191">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3192">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3192">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3193">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3193">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3194">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3194">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3195">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3195">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3196">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3196">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3197">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3197">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3198">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には累乗演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3198">
              <paramref name="method" /> is <see langword="null" /> and the exponentiation operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-3199">または</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3199">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3200">
            <paramref name="method" /> は <see langword="null" /> であり、<paramref name="left" />.Type および/または <paramref name="right" />.Type は <see cref="T:System.Double" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3200">
              <paramref name="method" /> is <see langword="null" /> and <paramref name="left" />.Type and/or <paramref name="right" />.Type are not <see cref="T:System.Double" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="PowerAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3201">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3201">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3202">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3202">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3203">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3203">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3204">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3204">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3205">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3205">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3206">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3206">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3207">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3207">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3208">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3208">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3209">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3209">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3210">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3210">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PowerAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression PowerAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression PowerAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PowerAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function PowerAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ PowerAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3211">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3211">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3212">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3212">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3213">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3213">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-3214">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3214">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3215">式を累乗し、結果を元の式に代入する操作を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3215">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents raising an expression to a power and assigning the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3216">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3216">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.PowerAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreDecrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3217">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3217">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3218">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3218">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3219">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3219">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3220">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3220">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreDecrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreDecrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreDecrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreDecrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreDecrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3221">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3221">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3222">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3222">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3223">式の値を 1 つデクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3223">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that decrements the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3224">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3224">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="PreIncrementAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3225">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3225">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3226">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3226">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3227">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3227">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3228">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3228">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreIncrementAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression PreIncrementAssign (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression PreIncrementAssign(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PreIncrementAssign(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ PreIncrementAssign(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3229">演算を適用する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3229">An <see cref="T:System.Linq.Expressions.Expression" /> to apply the operations on.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3230">メソッドの実装を表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3230">A <see cref="T:System.Reflection.MethodInfo" /> that represents the implementing method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3231">式の値を 1 つインクリメントし、結果を元の式に代入する <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3231">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that increments the expression by 1 and assigns the result back to the expression.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3232">結果の式を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3232">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the resultant expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Property">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3233">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3233">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo propertyAccessor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo propertyAccessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ propertyAccessor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyAccessor" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3234">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3234">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="d5b6d-3235">静的プロパティの場合は null を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3235">This can be null for static properties.</span>
          </span>
        </param>
        <param name="propertyAccessor">
          <span data-ttu-id="d5b6d-3236">プロパティ アクセサー メソッドを表す <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3236">The <see cref="T:System.Reflection.MethodInfo" /> that represents a property accessor method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3237">プロパティ アクセサー メソッドを使用することによるプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3237">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property by using a property accessor method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3238">
            <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、<paramref name="expression" /> でアクセスされるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyAccessor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3238">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property accessed in <paramref name="propertyAccessor" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3239"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression.Member%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3239">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="d5b6d-3240">メソッドを表す場合`propertyAccessor`は`static`(`Shared` Visual Basic で)、`expression`できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3240">If the method represented by `propertyAccessor` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3241">
            <paramref name="propertyAccessor" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3241">
              <paramref name="propertyAccessor" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-3242">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3242">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3243">
            <paramref name="propertyAccessor" /> が表すメソッドは <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3243">The method that <paramref name="propertyAccessor" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3244">
            <paramref name="expression" />.Type は、<paramref name="propertyAccessor" /> の表すメソッドの宣言型に割り当てることができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3244">
              <paramref name="expression" />.Type is not assignable to the declaring type of the method represented by <paramref name="propertyAccessor" />.</span>
          </span>
          <span data-ttu-id="d5b6d-3245">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3245">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3246">
            <paramref name="propertyAccessor" /> が表すメソッドは、プロパティ アクセサー メソッドではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3246">The method that <paramref name="propertyAccessor" /> represents is not a property accessor method.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, System.Reflection.PropertyInfo property);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Reflection.PropertyInfo property) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::Reflection::PropertyInfo ^ property);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="property" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3247">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3247">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property equal to.</span>
          </span>
          <span data-ttu-id="d5b6d-3248">静的プロパティの場合は null を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3248">This can be null for static properties.</span>
          </span>
        </param>
        <param name="property">
          <span data-ttu-id="d5b6d-3249">
            <see cref="T:System.Reflection.PropertyInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3249">The <see cref="T:System.Reflection.PropertyInfo" /> to set the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3250">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3250">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3251">
            <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> プロパティおよび <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.MemberExpression.Member" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3251">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> and the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> and <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3252"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>プロパティ<xref:System.Linq.Expressions.MemberExpression.Member%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3252">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of <xref:System.Linq.Expressions.MemberExpression.Member%2A>.</span></span>  
  
 <span data-ttu-id="d5b6d-3253">によって表されるプロパティ場合`property`は`static`(`Shared` Visual Basic で)、`expression`できます`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3253">If the property represented by `property` is `static` (`Shared` in Visual Basic), `expression` can be `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3254">
            <paramref name="property" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3254">
              <paramref name="property" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="d5b6d-3255">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3255">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3256">
            <paramref name="property" /> が表すプロパティは <see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、<paramref name="expression" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3256">The property that <paramref name="property" /> represents is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic) and <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3257">
            <paramref name="expression" />.Type は、<paramref name="property" /> が表すプロパティの宣言型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3257">
              <paramref name="expression" />.Type is not assignable to the declaring type of the property that <paramref name="property" /> represents.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3258">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> に <c>propertyName<see cref="T:System.Linq.Expressions.Expression" /> という名前のプロパティが含まれている </c>。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3258">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property named <c>propertyName</c>.</span>
          </span>
          <span data-ttu-id="d5b6d-3259">静的プロパティの場合は <see langword="null" /> を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3259">This can be <see langword="null" /> for static properties.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="d5b6d-3260">アクセスするプロパティの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3260">The name of a property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3261">プロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3261">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3262">
            <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> により示されるプロパティを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> に設定された <see cref="T:System.Reflection.PropertyInfo" /> プロパティを含む <paramref name="propertyName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3262">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> that represents the property denoted by <paramref name="propertyName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3263"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>のプロパティ、<xref:System.Reflection.PropertyInfo>により示されるプロパティを表す`propertyName`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3263">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> property of the <xref:System.Reflection.PropertyInfo> that represents the property denoted by `propertyName`.</span></span>  
  
 <span data-ttu-id="d5b6d-3264">このメソッドは、検索`expression`です。型およびその基本型の名前を持つプロパティ`propertyName`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3264">This method searches `expression`.Type and its base types for a property that has the name `propertyName`.</span></span> <span data-ttu-id="d5b6d-3265">パブリック プロパティより優先される非パブリック プロパティです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3265">Public properties are given preference over non-public properties.</span></span> <span data-ttu-id="d5b6d-3266">一致するプロパティが見つかった場合、このメソッドは`expression`と<xref:System.Reflection.PropertyInfo>にそのプロパティを表す<xref:System.Linq.Expressions.Expression.Property%2A>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3266">If a matching property is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> that represents that property to <xref:System.Linq.Expressions.Expression.Property%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3267">次の例では、プロパティへのアクセスを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3267">The following example shows how to create an expression that represents accessing a property.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#38)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3268">
            <paramref name="expression" /> または <paramref name="propertyName" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3268">
              <paramref name="expression" /> or <paramref name="propertyName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3269">
            <paramref name="propertyName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティが定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3269">No property named <paramref name="propertyName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, arguments As IEnumerable(Of Expression)) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-3270">プロパティが属するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3270">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="d5b6d-3271">プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3271">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="d5b6d-3272">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3272">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-3273">プロパティのインデックス化に使用する <see cref="T:System.Collections.Generic.IEnumerable`1" /> オブジェクトの <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3273">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3274">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3274">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3275">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3275">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, System.Reflection.PropertyInfo indexer, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, class System.Reflection.PropertyInfo indexer, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Reflection.PropertyInfo,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, indexer As PropertyInfo, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::Reflection::PropertyInfo ^ indexer, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="indexer" Type="System.Reflection.PropertyInfo" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-3276">プロパティが属するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3276">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="d5b6d-3277">プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3277">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="indexer">
          <span data-ttu-id="d5b6d-3278">インデックス化するプロパティを表す <see cref="T:System.Reflection.PropertyInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3278">The <see cref="T:System.Reflection.PropertyInfo" /> that represents the property to index.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-3279">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3279">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3280">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3280">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3281">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3281">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.IndexExpression Property (System.Linq.Expressions.Expression instance, string propertyName, params System.Linq.Expressions.Expression[] arguments);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.IndexExpression Property(class System.Linq.Expressions.Expression instance, string propertyName, class System.Linq.Expressions.Expression[] arguments) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.String,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Property (instance As Expression, propertyName As String, ParamArray arguments As Expression()) As IndexExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::IndexExpression ^ Property(System::Linq::Expressions::Expression ^ instance, System::String ^ propertyName, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ arguments);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.IndexExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="arguments" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="d5b6d-3282">プロパティが属するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3282">The object to which the property belongs.</span>
          </span>
          <span data-ttu-id="d5b6d-3283">プロパティが static (Visual Basic では Shared) の場合は、null にする必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3283">If the property is static/shared, it must be null.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="d5b6d-3284">インデクサーの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3284">The name of the indexer.</span>
          </span>
        </param>
        <param name="arguments">
          <span data-ttu-id="d5b6d-3285">プロパティのインデックス化に使用する <see cref="T:System.Linq.Expressions.Expression" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3285">An array of <see cref="T:System.Linq.Expressions.Expression" /> objects that are used to index the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3286">インデックス付きプロパティへのアクセスを表す <see cref="T:System.Linq.Expressions.IndexExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3286">Creates an <see cref="T:System.Linq.Expressions.IndexExpression" /> representing the access to an indexed property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3287">作成された <see cref="T:System.Linq.Expressions.IndexExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3287">The created <see cref="T:System.Linq.Expressions.IndexExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Property">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression Property (System.Linq.Expressions.Expression expression, Type type, string propertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression Property(class System.Linq.Expressions.Expression expression, class System.Type type, string propertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Property(System.Linq.Expressions.Expression,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ Property(System::Linq::Expressions::Expression ^ expression, Type ^ type, System::String ^ propertyName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="propertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3288">プロパティの格納オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3288">The containing object of the property.</span>
          </span>
          <span data-ttu-id="d5b6d-3289">静的プロパティの場合は null を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3289">This can be null for static properties.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3290">プロパティを格納する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3290">The <see cref="P:System.Linq.Expressions.Expression.Type" /> that contains the property.</span>
          </span>
        </param>
        <param name="propertyName">
          <span data-ttu-id="d5b6d-3291">アクセスするプロパティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3291">The property to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3292">プロパティにアクセスする <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3292">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> accessing a property.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3293">作成された <see cref="T:System.Linq.Expressions.MemberExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3293">The created <see cref="T:System.Linq.Expressions.MemberExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyOrField">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.MemberExpression PropertyOrField (System.Linq.Expressions.Expression expression, string propertyOrFieldName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.MemberExpression PropertyOrField(class System.Linq.Expressions.Expression expression, string propertyOrFieldName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.PropertyOrField(System.Linq.Expressions.Expression,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::MemberExpression ^ PropertyOrField(System::Linq::Expressions::Expression ^ expression, System::String ^ propertyOrFieldName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.MemberExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="propertyOrFieldName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3294">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> に <c>propertyOrFieldName</c> という名前のプロパティまたはフィールドが含まれている <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3294">An <see cref="T:System.Linq.Expressions.Expression" /> whose <see cref="P:System.Linq.Expressions.Expression.Type" /> contains a property or field named <c>propertyOrFieldName</c>.</span>
          </span>
          <span data-ttu-id="d5b6d-3295">静的メンバーの場合は null を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3295">This can be null for static members.</span>
          </span>
        </param>
        <param name="propertyOrFieldName">
          <span data-ttu-id="d5b6d-3296">アクセスするプロパティまたはフィールドの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3296">The name of a property or field to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3297">プロパティまたはフィールドへのアクセスを表す <see cref="T:System.Linq.Expressions.MemberExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3297">Creates a <see cref="T:System.Linq.Expressions.MemberExpression" /> that represents accessing a property or field.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3298">
            <see cref="T:System.Linq.Expressions.MemberExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティ、<see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" /> に設定された <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> プロパティ、および <paramref name="expression" /> によって示されるプロパティまたはフィールドを表す <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> または <see cref="T:System.Reflection.PropertyInfo" /> に設定された <see cref="T:System.Reflection.FieldInfo" /> プロパティを含む <paramref name="propertyOrFieldName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3298">A <see cref="T:System.Linq.Expressions.MemberExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.MemberAccess" />, the <see cref="P:System.Linq.Expressions.MemberExpression.Expression" /> property set to <paramref name="expression" />, and the <see cref="P:System.Linq.Expressions.MemberExpression.Member" /> property set to the <see cref="T:System.Reflection.PropertyInfo" /> or <see cref="T:System.Reflection.FieldInfo" /> that represents the property or field denoted by <paramref name="propertyOrFieldName" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3299"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.MemberExpression>と等しい、<xref:System.Reflection.PropertyInfo.PropertyType%2A>または<xref:System.Reflection.FieldInfo.FieldType%2A>のプロパティ、<xref:System.Reflection.PropertyInfo>または<xref:System.Reflection.FieldInfo>、それぞれ、プロパティまたはにより示されるフィールドを表す`propertyOrFieldName`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3299">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.MemberExpression> is equal to the <xref:System.Reflection.PropertyInfo.PropertyType%2A> or <xref:System.Reflection.FieldInfo.FieldType%2A> properties of the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo>, respectively, that represents the property or field denoted by `propertyOrFieldName`.</span></span>  
  
 <span data-ttu-id="d5b6d-3300">このメソッドは、検索`expression`です。型およびその基本型のプロパティまたはフィールドの名前を持つ`propertyOrFieldName`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3300">This method searches `expression`.Type and its base types for a property or field that has the name `propertyOrFieldName`.</span></span> <span data-ttu-id="d5b6d-3301">パブリック プロパティおよびフィールドより優先される非パブリック プロパティおよびフィールドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3301">Public properties and fields are given preference over non-public properties and fields.</span></span> <span data-ttu-id="d5b6d-3302">また、プロパティより優先されるフィールドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3302">Also, properties are given preference over fields.</span></span> <span data-ttu-id="d5b6d-3303">一致するプロパティまたはフィールドが見つかった場合、このメソッドは、渡します`expression`と<xref:System.Reflection.PropertyInfo>または<xref:System.Reflection.FieldInfo>そのプロパティまたはフィールドを表す<xref:System.Linq.Expressions.Expression.Property%2A>または<xref:System.Linq.Expressions.Expression.Field%2A>、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3303">If a matching property or field is found, this method passes `expression` and the <xref:System.Reflection.PropertyInfo> or <xref:System.Reflection.FieldInfo> that represents that property or field to <xref:System.Linq.Expressions.Expression.Property%2A> or <xref:System.Linq.Expressions.Expression.Field%2A>, respectively.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3304">次の例では、プロパティまたはフィールドへのアクセスを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3304">The following example shows how to create an expression that represents accessing a property or field.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#39)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#39)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3305">
            <paramref name="expression" /> または <paramref name="propertyOrFieldName" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3305">
              <paramref name="expression" /> or <paramref name="propertyOrFieldName" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3306">
            <paramref name="propertyOrFieldName" />.Type またはその基本型では <paramref name="expression" /> という名前のプロパティまたはフィールドが定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3306">No property or field named <paramref name="propertyOrFieldName" /> is defined in <paramref name="expression" />.Type or its base types.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Quote">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Quote (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Quote(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Quote(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Quote(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3307">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3307">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3308">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> 型の定数値を持つ式を表す <see cref="T:System.Linq.Expressions.Expression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3308">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an expression that has a constant value of type <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3309">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3309">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Quote" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3310"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>構築型を表す<xref:System.Linq.Expressions.Expression%601>が型引数によって表される型`expression`です。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3310">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents the constructed type <xref:System.Linq.Expressions.Expression%601>, where the type argument is the type represented by `expression`.Type.</span></span> <span data-ttu-id="d5b6d-3311"><xref:System.Linq.Expressions.UnaryExpression.Method%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3311">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property is `null`.</span></span> <span data-ttu-id="d5b6d-3312">両方<xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A>は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3312">Both <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> are `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3313">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3313">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reduce">
      <MemberSignature Language="C#" Value="public virtual System.Linq.Expressions.Expression Reduce ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression Reduce() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Reduce" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Reduce () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Linq::Expressions::Expression ^ Reduce();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3314">このノードをより単純な式に変形します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3314">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="d5b6d-3315">CanReduce が true を返す場合、これは有効な式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3315">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="d5b6d-3316">このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3316">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3317">単純化された式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3317">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceAndCheck">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceAndCheck ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceAndCheck() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceAndCheck" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceAndCheck () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceAndCheck();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3318">このノードをより単純な式に変形します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3318">Reduces this node to a simpler expression.</span>
          </span>
          <span data-ttu-id="d5b6d-3319">CanReduce が true を返す場合、これは有効な式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3319">If CanReduce returns true, this should return a valid expression.</span>
          </span>
          <span data-ttu-id="d5b6d-3320">このメソッドは、それ自体も単純化する必要がある別のノードを返す場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3320">This method can return another node which itself must be reduced.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3321">単純化された式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3321">The reduced expression.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3322">Reduce とは異なりは、このメソッドは、縮小ノードが特定の不変式を満たすことを確認します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3322">Unlike Reduce, this method checks that the reduced node satisfies certain invariants.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceExtensions">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression ReduceExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression ReduceExtensions() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReduceExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Function ReduceExtensions () As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ ReduceExtensions();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3323">式を既知のノード型 (拡張ノードではない型) に単純化し、それが既に既知の型である場合は単に式を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3323">Reduces the expression to a known node type (that is not an Extension node) or just returns the expression if it is already a known type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3324">単純化された式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3324">The reduced expression.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3325">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3325">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3326">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3326">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3327">参照が等値であるかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3327">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference equality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3328">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3328">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Equal" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNotEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression ReferenceNotEqual (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression ReferenceNotEqual(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ReferenceNotEqual(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ReferenceNotEqual (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ ReferenceNotEqual(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3329">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3329">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3330">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3330">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3331">参照が等値でないかどうかの比較を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3331">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a reference inequality comparison.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3332">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3332">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.NotEqual" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rethrow">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3333">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3333">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Rethrow () As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3334">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3334">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3335">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3335">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rethrow">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Rethrow (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Rethrow(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Rethrow(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Rethrow(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-3336">式の新しい <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3336">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3337">型を指定して、例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3337">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3338">例外の再スローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3338">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a rethrowing of an exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Return">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3339">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3339">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-3340">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3340">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3341">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3341">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3342">Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="target" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3342">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Return (target As LabelTarget, value As Expression) As GotoExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-3343">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3343">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d5b6d-3344">ジャンプ時に関連付けられているラベルに渡される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3344">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3345">return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3345">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement.</span>
          </span>
          <span data-ttu-id="d5b6d-3346">ジャンプ時にラベルに渡す値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3346">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3347">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="target" /> を含む <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3347">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-3348">次の例を含む式を作成する方法を示しています、<xref:System.Linq.Expressions.Expression.Return%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3348">The following example demonstrates how to create an expression that contains the <xref:System.Linq.Expressions.Expression.Return%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#43)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#43)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-3349">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3349">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3350">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3350">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3351">型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3351">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3352">Return と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される null 値を含む <paramref name="type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3352">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Return, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and a null value to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Return">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.GotoExpression Return (System.Linq.Expressions.LabelTarget target, System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.GotoExpression Return(class System.Linq.Expressions.LabelTarget target, class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Return(System.Linq.Expressions.LabelTarget,System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::GotoExpression ^ Return(System::Linq::Expressions::LabelTarget ^ target, System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.GotoExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Linq.Expressions.LabelTarget" />
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="target">
          <span data-ttu-id="d5b6d-3353">
            <see cref="T:System.Linq.Expressions.LabelTarget" /> のジャンプ先の <see cref="T:System.Linq.Expressions.GotoExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3353">The <see cref="T:System.Linq.Expressions.LabelTarget" /> that the <see cref="T:System.Linq.Expressions.GotoExpression" /> will jump to.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="d5b6d-3354">ジャンプ時に関連付けられているラベルに渡される値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3354">The value that will be passed to the associated label upon jumping.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3355">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3355">An <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3356">型を指定して、return ステートメントを表す <see cref="T:System.Linq.Expressions.GotoExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3356">Creates a <see cref="T:System.Linq.Expressions.GotoExpression" /> representing a return statement with the specified type.</span>
          </span>
          <span data-ttu-id="d5b6d-3357">ジャンプ時にラベルに渡す値を指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3357">The value passed to the label upon jumping can be specified.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3358">Continue と等しい <see cref="T:System.Linq.Expressions.GotoExpression" />、<see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> に設定された <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> プロパティ、<paramref name="target" /> に設定された <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティ、およびジャンプ時にジャンプ先のラベルに渡される <paramref name="type" /> を含む <paramref name="value" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3358">A <see cref="T:System.Linq.Expressions.GotoExpression" /> with <see cref="P:System.Linq.Expressions.GotoExpression.Kind" /> equal to Continue, the <see cref="P:System.Linq.Expressions.GotoExpression.Target" /> property set to <paramref name="target" />, the <see cref="P:System.Linq.Expressions.Expression.Type" /> property set to <paramref name="type" />, and <paramref name="value" /> to be passed to the target label upon jumping.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShift">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3359">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3359">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3360">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3360">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3361">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3361">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3362">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3362">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3363">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3363">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3364">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3364">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3365"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3365">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3366">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3366">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3367">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3367">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3368"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3368">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3369">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3369">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3370">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3370">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3371">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3371">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3372">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`右シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3372">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3373">それ以外の場合`left`です。型は、整数型 (のいずれかの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`です。種類は<xref:System.Int32>では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3373">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3374">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3374">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3375">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3375">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3376">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3376">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3377">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3377">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3378">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3378">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3379">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3379">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3380">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3380">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3381">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3381">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3382">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3382">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3383">ノードの型は、定義済みの右シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3383">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3384">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3384">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3385">ノードの型は、定義済みの右シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3385">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3386">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3386">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3387">右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3387">The right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="RightShift">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShift (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShift(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShift(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShift (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShift(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3388">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3388">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3389">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3389">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3390">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3390">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3391">ビットごとの右シフト演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3391">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3392">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3392">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShift" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3393">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3393">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3394"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3394">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3395">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3395">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3396">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3396">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3397"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3397">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3398">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3398">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3399">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3399">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3400">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3400">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3401">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3401">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-3402">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`右シフト演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3402">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the right-shift operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3403">それ以外の場合`left`です。型は、整数型 (のいずれかの<xref:System.Byte>、 <xref:System.SByte>、 <xref:System.Int16>、 <xref:System.UInt16>、 <xref:System.Int32>、 <xref:System.UInt32>、 <xref:System.Int64>、 <xref:System.UInt64>、または対応する null 許容型) と`right`です。種類は<xref:System.Int32>では、メソッドの実装`null`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3403">Otherwise, if `left`.Type is an integral type (one of <xref:System.Byte>, <xref:System.SByte>, <xref:System.Int16>, <xref:System.UInt16>, <xref:System.Int32>, <xref:System.UInt32>, <xref:System.Int64>, <xref:System.UInt64>, or the corresponding nullable types) and `right`.Type is <xref:System.Int32>, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3404">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3404">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3405">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3405">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3406">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3406">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3407">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3407">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3408">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3408">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3409">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3409">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3410">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3410">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3411">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3411">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3412">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3412">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3413">ノードの型は、定義済みの右シフト演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3413">The type of the node is the result type of the predefined right-shift operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3414">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3414">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3415">ノードの型は、定義済みの右シフト演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3415">The type of the node is the nullable type that corresponds to the result type of the predefined right-shift operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3416">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3416">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3417">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3417">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3418">
            <paramref name="method" /> は <see langword="null" /> で、右シフト演算子は <paramref name="left" />.Type と <paramref name="right" />.Type には定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3418">
              <paramref name="method" /> is <see langword="null" /> and the right-shift operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="RightShiftAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3419">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3419">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3420">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3420">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3421">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3421">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3422">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3422">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3423">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3423">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3424">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3424">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3425">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3425">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3426">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3426">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3427">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3427">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3428">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3428">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightShiftAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression RightShiftAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression RightShiftAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RightShiftAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RightShiftAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ RightShiftAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3429">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3429">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3430">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3430">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3431">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3431">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-3432">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3432">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3433">ビットごとの右シフト代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3433">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a bitwise right-shift assignment operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3434">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3434">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RightShiftAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RuntimeVariables">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3435">
            <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3435">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (variables As IEnumerable(Of ParameterExpression)) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="d5b6d-3436">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3436">A collection of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3437">
            <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3437">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3438">
            <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3438">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RuntimeVariables">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables (params System.Linq.Expressions.ParameterExpression[] variables);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.RuntimeVariablesExpression RuntimeVariables(class System.Linq.Expressions.ParameterExpression[] variables) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.RuntimeVariables(System.Linq.Expressions.ParameterExpression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function RuntimeVariables (ParamArray variables As ParameterExpression()) As RuntimeVariablesExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::RuntimeVariablesExpression ^ RuntimeVariables(... cli::array &lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ variables);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.RuntimeVariablesExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="variables" Type="System.Linq.Expressions.ParameterExpression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="variables">
          <span data-ttu-id="d5b6d-3439">
            <see cref="T:System.Linq.Expressions.ParameterExpression" /> コレクションへの読み込みに使用する <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3439">An array of <see cref="T:System.Linq.Expressions.ParameterExpression" /> objects to use to populate the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> collection.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3440">
            <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3440">Creates an instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3441">
            <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> プロパティを含む <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3441">An instance of <see cref="T:System.Linq.Expressions.RuntimeVariablesExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.RuntimeVariables" /> and the <see cref="P:System.Linq.Expressions.RuntimeVariablesExpression.Variables" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Subtract">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3442">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3442">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3443">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3443">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3444">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3444">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3445">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3445">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3446">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3446">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3447">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3447">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3448"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3448">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3449">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3449">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3450">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3450">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3451"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3451">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3452">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3452">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3453">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3453">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3454">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3454">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3455">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3455">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3456">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3456">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3457">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3457">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3458">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3458">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3459">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3459">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3460">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3460">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3461">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3461">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3462">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3462">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3463">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3463">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3464">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3464">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3465">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3465">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3466">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3466">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3467">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3467">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3468">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3468">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3469">次のコード例では、最初の引数からの引数を減算する式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3469">The following code example shows how to create an expression that subtracts the argument from the first argument.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#30)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#30)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3470">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3470">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3471">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3471">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression Subtract (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression Subtract(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Subtract(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Subtract (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ Subtract(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3472">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3472">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3473">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3473">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3474">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3474">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3475">オーバーフロー チェックを行わない算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3475">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3476">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3476">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.Subtract" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3477">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3477">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3478"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3478">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3479">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3479">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3480">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3480">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3481"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3481">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3482">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3482">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3483">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3483">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3484">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3484">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3485">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3485">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-3486">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3486">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3487">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3487">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3488">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3488">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3489">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3489">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3490">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3490">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3491">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3491">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3492">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3492">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3493">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3493">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3494">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3494">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3495">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3495">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3496">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3496">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3497">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3497">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3498">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3498">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3499">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3499">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3500">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3500">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3501">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3501">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3502">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3502">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssign">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3503">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3503">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3504">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3504">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3505">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3505">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3506">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3506">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3507">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3507">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3508">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3508">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3509">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3509">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3510">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3510">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3511">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3511">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3512">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3512">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssign">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssign (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssign(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssign(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssign (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssign(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3513">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3513">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3514">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3514">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3515">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3515">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-3516">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3516">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3517">オーバーフロー チェックを行わない減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3517">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that does not have overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3518">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3518">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssign" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractAssignChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3519">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3519">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3520">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3520">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3521">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3521">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3522">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3522">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3523">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3523">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3524">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3524">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3525">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3525">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3526">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3526">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3527">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3527">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3528">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3528">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtractAssignChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractAssignChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method, System.Linq.Expressions.LambdaExpression conversion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractAssignChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method, class System.Linq.Expressions.LambdaExpression conversion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractAssignChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.LambdaExpression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractAssignChecked (left As Expression, right As Expression, method As MethodInfo, conversion As LambdaExpression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractAssignChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method, System::Linq::Expressions::LambdaExpression ^ conversion);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="conversion" Type="System.Linq.Expressions.LambdaExpression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3529">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3529">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3530">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3530">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3531">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3531">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <param name="conversion">
          <span data-ttu-id="d5b6d-3532">
            <see cref="T:System.Linq.Expressions.LambdaExpression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3532">A <see cref="T:System.Linq.Expressions.LambdaExpression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3533">オーバーフロー チェックを行う減算代入演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3533">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents a subtraction assignment operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3534">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Right" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3534">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractAssignChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Conversion" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubtractChecked">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3535">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3535">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3536">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3536">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3537">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3537">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3538">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3538">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3539">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> プロパティおよび <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3539">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> and <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3540">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3540">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3541"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3541">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3542">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3542">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3543">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3543">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3544"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3544">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3545">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3545">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3546">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3546">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3547">次の規則では、操作の選択の実装メソッドを決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3547">The following rules determine the selected implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3548">場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3548">If the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3549">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3549">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3550">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3550">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3551">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3551">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3552">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3552">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3553">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3553">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3554">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3554">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3555">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3555">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3556">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3556">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3557">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3557">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3558">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3558">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3559">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3559">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3560">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3560">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3561">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3561">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3562">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3562">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3563">減算演算子は <paramref name="left" />.Type および <paramref name="right" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3563">The subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SubtractChecked">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.BinaryExpression SubtractChecked (System.Linq.Expressions.Expression left, System.Linq.Expressions.Expression right, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.BinaryExpression SubtractChecked(class System.Linq.Expressions.Expression left, class System.Linq.Expressions.Expression right, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SubtractChecked(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SubtractChecked (left As Expression, right As Expression, method As MethodInfo) As BinaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::BinaryExpression ^ SubtractChecked(System::Linq::Expressions::Expression ^ left, System::Linq::Expressions::Expression ^ right, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.BinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="right" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="left">
          <span data-ttu-id="d5b6d-3564">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3564">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" /> property equal to.</span>
          </span>
        </param>
        <param name="right">
          <span data-ttu-id="d5b6d-3565">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3565">A <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3566">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3566">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3567">オーバーフロー チェックを行う算術減算演算を表す <see cref="T:System.Linq.Expressions.BinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3567">Creates a <see cref="T:System.Linq.Expressions.BinaryExpression" /> that represents an arithmetic subtraction operation that has overflow checking.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3568">
            <see cref="T:System.Linq.Expressions.BinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" />、<see cref="P:System.Linq.Expressions.BinaryExpression.Left" />、および <see cref="P:System.Linq.Expressions.BinaryExpression.Right" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.BinaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3568">A <see cref="T:System.Linq.Expressions.BinaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.SubtractChecked" /> and the <see cref="P:System.Linq.Expressions.BinaryExpression.Left" />, <see cref="P:System.Linq.Expressions.BinaryExpression.Right" />, and <see cref="P:System.Linq.Expressions.BinaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3569">その結果<xref:System.Linq.Expressions.BinaryExpression>が、<xref:System.Linq.Expressions.BinaryExpression.Method%2A>プロパティ メソッドの実装に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3569">The resulting <xref:System.Linq.Expressions.BinaryExpression> has the <xref:System.Linq.Expressions.BinaryExpression.Method%2A> property set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3570"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3570">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3571">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3571">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3572">それ以外の場合は`false`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3572">Otherwise, they are `false`.</span></span> <span data-ttu-id="d5b6d-3573"><xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> プロパティが `null` です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3573">The <xref:System.Linq.Expressions.BinaryExpression.Conversion%2A> property is `null`.</span></span>  
  
 <span data-ttu-id="d5b6d-3574">次の情報は、メソッドの実装をノードの種類を説明し、ノードを解除するかどうか。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3574">The following information describes the implementing method, the node type, and whether a node is lifted.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3575">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3575">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3576">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3576">The following rules determine the implementing method for the operation :</span></span>  
  
-   <span data-ttu-id="d5b6d-3577">場合`method`はありません`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 2 つの引数を受け取るメソッドは、ノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3577">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes two arguments, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-3578">それ以外の場合、<xref:System.Linq.Expressions.Expression.Type%2A>いずれかのプロパティ`left`または`right`減算演算子をオーバー ロードするユーザー定義型を表す、<xref:System.Reflection.MethodInfo>メソッドがメソッドの実装であることを表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3578">Otherwise, if the <xref:System.Linq.Expressions.Expression.Type%2A> property of either `left` or `right` represents a user-defined type that overloads the subtraction operator, the <xref:System.Reflection.MethodInfo> that represents that method is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3579">それ以外の場合`left`です。型および`right`です。型が数値型、メソッドの実装では`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3579">Otherwise, if `left`.Type and `right`.Type are numeric types, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3580">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3580">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3581">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3581">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3582">If `left`.型および`right`です。型が実装するメソッドの対応する引数の型に割り当てることが、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3582">If `left`.Type and `right`.Type are assignable to the corresponding argument types of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3583">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3583">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3584">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3584">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3585">`left`.型および`right`です。種類は、両方の値型を少なくとも 1 つが null 値を許容し、対応する null 非許容の型が実装するメソッドの対応する引数の型と等しいです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3585">`left`.Type and `right`.Type are both value types of which at least one is nullable and the corresponding non-nullable types are equal to the corresponding argument types of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3586">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3586">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3587">メソッドの実装が場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3587">If the implementing method is `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3588">If `left`.型および`right`です。種類は、両方の null 非許容のノードはリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3588">If `left`.Type and `right`.Type are both non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3589">ノードの型は、定義済みの減算演算子の結果の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3589">The type of the node is the result type of the predefined subtraction operator.</span></span>  
  
-   <span data-ttu-id="d5b6d-3590">If `left`.型および`right`です。種類は、nullable、ノードは、リフトの両方です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3590">If `left`.Type and `right`.Type are both nullable, the node is lifted.</span></span> <span data-ttu-id="d5b6d-3591">ノードの型は、定義済みの減算演算子の結果の型に対応する null 許容型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3591">The type of the node is the nullable type that corresponds to the result type of the predefined subtraction operator.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3592">
            <paramref name="left" /> または <paramref name="right" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3592">
              <paramref name="left" /> or <paramref name="right" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3593">
            <paramref name="method" /> は <see langword="null" /> ではなく、それを表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではなく、またはちょうど 2 つの引数を受け取りません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3593">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly two arguments.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3594">
            <paramref name="method" /> は <see langword="null" /> で、<paramref name="left" />.Type および <paramref name="right" />.Type には減算演算子が定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3594">
              <paramref name="method" /> is <see langword="null" /> and the subtraction operator is not defined for <paramref name="left" />.Type and <paramref name="right" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Switch">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3595">
            <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3595">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="d5b6d-3596">各ケースに対してテストする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3596">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="d5b6d-3597">この switch 式に対するケースのセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3597">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3598">既定のケースのない <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3598">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement without a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3599">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3599">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3600">すべて<xref:System.Linq.Expressions.SwitchCase>内のオブジェクト、<xref:System.Linq.Expressions.SwitchExpression>オブジェクトがあります、同じ型でない限り、<xref:System.Linq.Expressions.SwitchExpression>型を持つ`void`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3600">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="d5b6d-3601">各<xref:System.Linq.Expressions.SwitchCase>オブジェクトが暗黙的な`break`ステートメントでは、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3601">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="d5b6d-3602">場合`switchValue`に一致しない場合にの例外はスローされません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3602">If `switchValue` does not match any of the cases, no exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3603">次の例では、既定の文字種せずスイッチ ステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3603">The following example demonstrates how to create an expression that represents a swtich statement without a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#34)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#34)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="d5b6d-3604">各ケースに対してテストする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3604">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="d5b6d-3605">
            <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3605">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="d5b6d-3606">この switch 式に対するケースのセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3606">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3607">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3607">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3608">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3608">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3609">すべて<xref:System.Linq.Expressions.SwitchCase>内のオブジェクト、<xref:System.Linq.Expressions.SwitchExpression>オブジェクトがあります、同じ型でない限り、<xref:System.Linq.Expressions.SwitchExpression>型を持つ`void`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3609">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="d5b6d-3610">各<xref:System.Linq.Expressions.SwitchCase>オブジェクトが暗黙的な`break`ステートメントでは、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3610">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
 <span data-ttu-id="d5b6d-3611">場合`switchValue`場合に、によって表される既定のケースのいずれかと一致しない`defaultBody`を実行します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3611">If `switchValue` does not match any of the cases, the default case represented by `defaultBody` is run.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3612">次の例では、既定のケースのあるスイッチ ステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3612">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, cases As IEnumerable(Of SwitchCase)) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="d5b6d-3613">各ケースに対してテストする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3613">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="d5b6d-3614">
            <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3614">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="d5b6d-3615">使用する等値比較メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3615">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="d5b6d-3616">この switch 式に対するケースのセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3616">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3617">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3617">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3618">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3618">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Switch (switchValue As Expression, defaultBody As Expression, comparison As MethodInfo, ParamArray cases As SwitchCase()) As SwitchExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="switchValue">
          <span data-ttu-id="d5b6d-3619">各ケースに対してテストする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3619">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="d5b6d-3620">
            <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3620">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="d5b6d-3621">使用する等値比較メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3621">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="d5b6d-3622">この switch 式に対するケースのセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3622">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3623">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3623">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3624">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3624">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt; cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.SwitchCase&gt; cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Collections.Generic.IEnumerable{System.Linq.Expressions.SwitchCase})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.SwitchCase&gt;" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-3625">switch の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3625">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="d5b6d-3626">各ケースに対してテストする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3626">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="d5b6d-3627">
            <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3627">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="d5b6d-3628">使用する等値比較メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3628">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="d5b6d-3629">この switch 式に対するケースのセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3629">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3630">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3630">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3631">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3631">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Switch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchExpression Switch (Type type, System.Linq.Expressions.Expression switchValue, System.Linq.Expressions.Expression defaultBody, System.Reflection.MethodInfo comparison, params System.Linq.Expressions.SwitchCase[] cases);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchExpression Switch(class System.Type type, class System.Linq.Expressions.Expression switchValue, class System.Linq.Expressions.Expression defaultBody, class System.Reflection.MethodInfo comparison, class System.Linq.Expressions.SwitchCase[] cases) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Switch(System.Type,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Reflection.MethodInfo,System.Linq.Expressions.SwitchCase[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchExpression ^ Switch(Type ^ type, System::Linq::Expressions::Expression ^ switchValue, System::Linq::Expressions::Expression ^ defaultBody, System::Reflection::MethodInfo ^ comparison, ... cli::array &lt;System::Linq::Expressions::SwitchCase ^&gt; ^ cases);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="switchValue" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="defaultBody" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="comparison" Type="System.Reflection.MethodInfo" />
        <Parameter Name="cases" Type="System.Linq.Expressions.SwitchCase[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-3632">switch の結果の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3632">The result type of the switch.</span>
          </span>
        </param>
        <param name="switchValue">
          <span data-ttu-id="d5b6d-3633">各ケースに対してテストする値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3633">The value to be tested against each case.</span>
          </span>
        </param>
        <param name="defaultBody">
          <span data-ttu-id="d5b6d-3634">
            <c>switchValue</c> がいずれのケースとも一致しない場合の switch の結果。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3634">The result of the switch if <c>switchValue</c> does not match any of the cases.</span>
          </span>
        </param>
        <param name="comparison">
          <span data-ttu-id="d5b6d-3635">使用する等値比較メソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3635">The equality comparison method to use.</span>
          </span>
        </param>
        <param name="cases">
          <span data-ttu-id="d5b6d-3636">この switch 式に対するケースのセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3636">The set of cases for this switch expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3637">既定のケースがある <see cref="T:System.Linq.Expressions.SwitchExpression" /> ステートメントを表す <see langword="switch" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3637">Creates a <see cref="T:System.Linq.Expressions.SwitchExpression" /> that represents a <see langword="switch" /> statement that has a default case..</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3638">作成された <see cref="T:System.Linq.Expressions.SwitchExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3638">The created <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SwitchCase">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3639">
            <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3639">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt; testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.Expression&gt; testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, testValues As IEnumerable(Of Expression)) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.Expression&gt;" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-3640">case の本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3640">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="d5b6d-3641">case のテスト値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3641">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3642">
            <see cref="T:System.Linq.Expressions.SwitchCase" /> オブジェクトで使用される <see cref="T:System.Linq.Expressions.SwitchExpression" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3642">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> object to be used in a <see cref="T:System.Linq.Expressions.SwitchExpression" /> object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3643">作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3643">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3644">すべて<xref:System.Linq.Expressions.SwitchCase>内のオブジェクト、<xref:System.Linq.Expressions.SwitchExpression>オブジェクトがあります、同じ型でない限り、<xref:System.Linq.Expressions.SwitchExpression>型を持つ`void`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3644">All <xref:System.Linq.Expressions.SwitchCase> objects in a <xref:System.Linq.Expressions.SwitchExpression> object must have the same type, unless the <xref:System.Linq.Expressions.SwitchExpression> has the type `void`.</span></span>  
  
 <span data-ttu-id="d5b6d-3645">各<xref:System.Linq.Expressions.SwitchCase>オブジェクトが暗黙的な`break`ステートメントでは、暗黙的なフォール スルー 1 つの case ラベルから間がないことを意味します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3645">Each <xref:System.Linq.Expressions.SwitchCase> object has an implicit `break` statement, which means that there is no implicit fall through from one case label to another.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3646">次の例では、既定のケースのあるスイッチ ステートメントを表す式を作成する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3646">The following example demonstrates how to create an expression that represents a swtich statement that has a default case.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#35)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#35)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchCase">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SwitchCase SwitchCase (System.Linq.Expressions.Expression body, params System.Linq.Expressions.Expression[] testValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SwitchCase SwitchCase(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression[] testValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SwitchCase(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SwitchCase (body As Expression, ParamArray testValues As Expression()) As SwitchCase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SwitchCase ^ SwitchCase(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::Expression ^&gt; ^ testValues);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SwitchCase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="testValues" Type="System.Linq.Expressions.Expression[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-3647">case の本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3647">The body of the case.</span>
          </span>
        </param>
        <param name="testValues">
          <span data-ttu-id="d5b6d-3648">case のテスト値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3648">The test values of the case.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3649">
            <see cref="T:System.Linq.Expressions.SwitchCase" /> で使用する <see cref="T:System.Linq.Expressions.SwitchExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3649">Creates a <see cref="T:System.Linq.Expressions.SwitchCase" /> for use in a <see cref="T:System.Linq.Expressions.SwitchExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3650">作成された <see cref="T:System.Linq.Expressions.SwitchCase" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3650">The created <see cref="T:System.Linq.Expressions.SwitchCase" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SymbolDocument">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3651">
            <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3651">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="d5b6d-3652">
            <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3652">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3653">
            <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3653">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3654">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3654">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="d5b6d-3655">
            <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3655">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="d5b6d-3656">
            <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3656">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3657">
            <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3657">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3658">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> プロパティおよび <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3658">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="d5b6d-3659">
            <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3659">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="d5b6d-3660">
            <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3660">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="d5b6d-3661">
            <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3661">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3662">
            <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3662">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3663">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3663">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolDocument">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.SymbolDocumentInfo SymbolDocument (string fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.SymbolDocumentInfo SymbolDocument(string fileName, valuetype System.Guid language, valuetype System.Guid languageVendor, valuetype System.Guid documentType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.SymbolDocument(System.String,System.Guid,System.Guid,System.Guid)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SymbolDocument (fileName As String, language As Guid, languageVendor As Guid, documentType As Guid) As SymbolDocumentInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::SymbolDocumentInfo ^ SymbolDocument(System::String ^ fileName, Guid language, Guid languageVendor, Guid documentType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.SymbolDocumentInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
        <Parameter Name="language" Type="System.Guid" />
        <Parameter Name="languageVendor" Type="System.Guid" />
        <Parameter Name="documentType" Type="System.Guid" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="d5b6d-3664">
            <see cref="T:System.String" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3664">A <see cref="T:System.String" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> equal to.</span>
          </span>
        </param>
        <param name="language">
          <span data-ttu-id="d5b6d-3665">
            <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3665">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> equal to.</span>
          </span>
        </param>
        <param name="languageVendor">
          <span data-ttu-id="d5b6d-3666">
            <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3666">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> equal to.</span>
          </span>
        </param>
        <param name="documentType">
          <span data-ttu-id="d5b6d-3667">
            <see cref="T:System.Guid" /> を等しく設定する <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3667">A <see cref="T:System.Guid" /> to set the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3668">
            <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> のインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3668">Creates an instance of <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3669">指定した値に設定された <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" />、<see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" />、および <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> の各プロパティを含む <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3669">A <see cref="T:System.Linq.Expressions.SymbolDocumentInfo" /> that has the <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.FileName" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.Language" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.LanguageVendor" /> and <see cref="P:System.Linq.Expressions.SymbolDocumentInfo.DocumentType" /> properties set to the specified value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Throw">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3670">例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3670">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Throw (value As Expression) As UnaryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d5b6d-3671">
            <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3671">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3672">例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3672">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3673">例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3673">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-3674">次の例で作成する方法、<xref:System.Linq.Expressions.TryExpression>を使用するオブジェクト、<xref:System.Linq.Expressions.Expression.Throw%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3674">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that uses the <xref:System.Linq.Expressions.Expression.Throw%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Throw">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Throw (System.Linq.Expressions.Expression value, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Throw(class System.Linq.Expressions.Expression value, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Throw(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Throw(System::Linq::Expressions::Expression ^ value, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="d5b6d-3675">
            <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3675">An <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3676">式の新しい <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3676">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3677">型を指定して、例外のスローを表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3677">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a throwing of an exception with a given type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3678">例外を表す <see cref="T:System.Linq.Expressions.UnaryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3678">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents the exception.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3679">
            <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3679">Returns a textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3680">
            <see cref="T:System.Linq.Expressions.Expression" /> のテキスト表現。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3680">A textual representation of the <see cref="T:System.Linq.Expressions.Expression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatch">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatch (System.Linq.Expressions.Expression body, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatch(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatch(System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatch (body As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatch(System::Linq::Expressions::Expression ^ body, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-3681">try ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3681">The body of the try block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="d5b6d-3682">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3682">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3683">任意の数の catch ステートメントを指定し、fault ブロックと finally ブロックを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3683">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and neither a fault nor finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3684">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3684">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-3685">次の例で作成する方法、 <xref:System.Linq.Expressions.TryExpression> catch ステートメントを含むオブジェクトです。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3685">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#47)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#47)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryCatchFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryCatchFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally, params System.Linq.Expressions.CatchBlock[] handlers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryCatchFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally, class System.Linq.Expressions.CatchBlock[] handlers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryCatchFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.CatchBlock[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryCatchFinally (body As Expression, finally As Expression, ParamArray handlers As CatchBlock()) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryCatchFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally, ... cli::array &lt;System::Linq::Expressions::CatchBlock ^&gt; ^ handlers);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="handlers" Type="System.Linq.Expressions.CatchBlock[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-3686">try ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3686">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="d5b6d-3687">finally ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3687">The body of the finally block.</span>
          </span>
        </param>
        <param name="handlers">
          <span data-ttu-id="d5b6d-3688">try ブロックに関連付ける catch ステートメントを表す 0 個以上の <see cref="T:System.Linq.Expressions.CatchBlock" /> 式の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3688">The array of zero or more <see cref="T:System.Linq.Expressions.CatchBlock" /> expressions representing the catch statements to be associated with the try block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3689">任意の数の catch ステートメントおよび 1 つの finally ブロックを指定して、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3689">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with any number of catch statements and a finally block.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3690">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3690">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="d5b6d-3691">次の例は、作成する方法を示します、 <xref:System.Linq.Expressions.TryExpression> catch ステートメントを含むオブジェクトと finally ステートメントを使用します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3691">The following example demonstrates how to create a <xref:System.Linq.Expressions.TryExpression> object that contains a catch statement and a finally statement.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#48)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#48)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFault">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFault (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression fault);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFault(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression fault) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFault(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFault (body As Expression, fault As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFault(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ fault);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="fault" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-3692">try ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3692">The body of the try block.</span>
          </span>
        </param>
        <param name="fault">
          <span data-ttu-id="d5b6d-3693">fault ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3693">The body of the fault block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3694">fault ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3694">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a fault block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3695">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3695">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryFinally">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TryExpression TryFinally (System.Linq.Expressions.Expression body, System.Linq.Expressions.Expression finally);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TryExpression TryFinally(class System.Linq.Expressions.Expression body, class System.Linq.Expressions.Expression finally) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryFinally(System.Linq.Expressions.Expression,System.Linq.Expressions.Expression)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryFinally (body As Expression, finally As Expression) As TryExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TryExpression ^ TryFinally(System::Linq::Expressions::Expression ^ body, System::Linq::Expressions::Expression ^ finally);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="finally" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="body">
          <span data-ttu-id="d5b6d-3696">try ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3696">The body of the try block.</span>
          </span>
        </param>
        <param name="finally">
          <span data-ttu-id="d5b6d-3697">finally ブロックの本体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3697">The body of the finally block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3698">finally ブロックを指定し、catch ステートメントを指定せずに、try ブロックを表す <see cref="T:System.Linq.Expressions.TryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3698">Creates a <see cref="T:System.Linq.Expressions.TryExpression" /> representing a try block with a finally block and no catch statements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3699">作成された <see cref="T:System.Linq.Expressions.TryExpression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3699">The created <see cref="T:System.Linq.Expressions.TryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetActionType">
      <MemberSignature Language="C#" Value="public static bool TryGetActionType (Type[] typeArgs, out Type actionType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetActionType(class System.Type[] typeArgs, [out] class System.Type&amp; actionType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetActionType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetActionType (typeArgs As Type(), ByRef actionType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetActionType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % actionType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="actionType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="d5b6d-3700">System.Action デリゲート型の型引数を指定する Type オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3700">An array of Type objects that specify the type arguments for the System.Action delegate type.</span>
          </span>
        </param>
        <param name="actionType">
          <span data-ttu-id="d5b6d-3701">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Action デリゲート型を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3701">When this method returns, contains the generic System.Action delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="d5b6d-3702">
            <c>typeArgs</c> に一致する汎用 System.Action デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3702">Contains null if there is no generic System.Action delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3703">特定の型引数を持つ汎用 System.Action デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3703">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Action delegate type that has specific type arguments.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3704">特定の <paramref name="typeArgs" /> について汎用 System.Action デリゲート型が作成された場合は true。それ以外の場合は false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3704">true if generic System.Action delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetFuncType">
      <MemberSignature Language="C#" Value="public static bool TryGetFuncType (Type[] typeArgs, out Type funcType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetFuncType(class System.Type[] typeArgs, [out] class System.Type&amp; funcType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TryGetFuncType(System.Type[],System.Type@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetFuncType (typeArgs As Type(), ByRef funcType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetFuncType(cli::array &lt;Type ^&gt; ^ typeArgs, [Runtime::InteropServices::Out] Type ^ % funcType);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeArgs" Type="System.Type[]" />
        <Parameter Name="funcType" Type="System.Type&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeArgs">
          <span data-ttu-id="d5b6d-3705">System.Func デリゲート型の型引数を指定する Type オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3705">An array of Type objects that specify the type arguments for the System.Func delegate type.</span>
          </span>
        </param>
        <param name="funcType">
          <span data-ttu-id="d5b6d-3706">このメソッドが返されるときに、特定の型引数を持つ汎用 System.Func デリゲート型を格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3706">When this method returns, contains the generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="d5b6d-3707">
            <c>typeArgs</c> に一致する汎用 System.Func デリゲートがない場合は、null を格納します。このパラメーターは初期化されていない状態で渡されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3707">Contains null if there is no generic System.Func delegate that matches the <c>typeArgs</c>.This parameter is passed uninitialized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3708">特定の型引数を持つ汎用 System.Func デリゲート型を表す <see cref="P:System.Linq.Expressions.Expression.Type" /> オブジェクトを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3708">Creates a <see cref="P:System.Linq.Expressions.Expression.Type" /> object that represents a generic System.Func delegate type that has specific type arguments.</span>
          </span>
          <span data-ttu-id="d5b6d-3709">最後の型引数で、作成するデリゲートの戻り値の型を指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3709">The last type argument specifies the return type of the created delegate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3710">特定の <paramref name="typeArgs" /> について汎用 System.Func デリゲート型が作成された場合は true。それ以外の場合は false。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3710">true if generic System.Func delegate type was created for specific <paramref name="typeArgs" />; false otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual Type Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Type" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.Expression.Type" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Type As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property Type ^ Type { Type ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3711">この <see cref="T:System.Linq.Expressions.Expression" /> が表す式の静的な型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3711">Gets the static type of the expression that this <see cref="T:System.Linq.Expressions.Expression" /> represents.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="d5b6d-3712">式の静的な型を表す <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3712">The <see cref="T:System.Type" /> that represents the static type of the expression.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3713"><xref:System.Linq.Expressions.Expression.NodeType%2A>式ツリー ノードの種類がありますが、<xref:System.Linq.Expressions.Expression.Type%2A>ノードが表す式の静的な共通言語ランタイム (CLR) 型を表します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3713">The <xref:System.Linq.Expressions.Expression.NodeType%2A> is the type of the expression tree node, whereas the <xref:System.Linq.Expressions.Expression.Type%2A> represents the static common language runtime (CLR) type of the expression that the node represents.</span></span> <span data-ttu-id="d5b6d-3714">たとえば、2 つの異なるノード型ノードが持つことができます、同じ<xref:System.Linq.Expressions.Expression.Type%2A>の次のコード例に示すようにします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3714">For example, two nodes with different node types can have the same <xref:System.Linq.Expressions.Expression.Type%2A>, as shown in the following code example.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/cs/program.cs#36)]
 [!code-vb[System.Linq.Expressions.ExpressionDev10#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.linq.expressions.expressiondev10/vb/module1.vb#36)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeAs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression TypeAs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression TypeAs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeAs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ TypeAs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3715">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3715">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3716">
            <see cref="T:System.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3716">A <see cref="T:System.Type" /> to set the <see cref="P:System.Linq.Expressions.Expression.Type" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3717">変換が失敗した場合に <see cref="T:System.Linq.Expressions.UnaryExpression" /> が提供される明示的な参照変換またはボックス化変換を表す <see langword="null" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3717">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit reference or boxing conversion where <see langword="null" /> is supplied if the conversion fails.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3718">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.Expression.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3718">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeAs" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.Expression.Type" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3719"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3719">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is `null`.</span></span> <span data-ttu-id="d5b6d-3720"><xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A>プロパティが両方とも`false`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3720">The <xref:System.Linq.Expressions.UnaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.UnaryExpression.IsLiftedToNull%2A> properties are both `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3721">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29>メソッドを作成、<xref:System.Linq.Expressions.UnaryExpression>を表す nullable 整数型に null 非許容の整数式の参照変換します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3721">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeAs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.UnaryExpression> that represents the reference conversion of a non-nullable integer expression to the nullable integer type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#11)]
 [!code-vb[System.Linq.Expressions.Expression#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3722">
            <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3722">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TypeEqual">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeEqual (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeEqual(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeEqual(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3723">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3723">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="T:System.Linq.Expressions.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3724">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3724">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3725">実行時の型 ID を比較する <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3725">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> that compares run-time type identity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3726">
            <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> プロパティおよび <see cref="T:System.Linq.Expressions.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3726">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="M:System.Linq.Expressions.Expression.TypeEqual(System.Linq.Expressions.Expression,System.Type)" /> and for which the <see cref="T:System.Linq.Expressions.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeIs">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.TypeBinaryExpression TypeIs (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.TypeBinaryExpression TypeIs(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.TypeIs(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::TypeBinaryExpression ^ TypeIs(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.TypeBinaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3727">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3727">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> property equal to.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3728">
            <see cref="P:System.Linq.Expressions.Expression.Type" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3728">A <see cref="P:System.Linq.Expressions.Expression.Type" /> to set the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3729">
            <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3729">Creates a <see cref="T:System.Linq.Expressions.TypeBinaryExpression" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3730">
            <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> プロパティおよび <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> プロパティを含む <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3730">A <see cref="T:System.Linq.Expressions.TypeBinaryExpression" /> for which the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property is equal to <see cref="F:System.Linq.Expressions.ExpressionType.TypeIs" /> and for which the <see cref="P:System.Linq.Expressions.TypeBinaryExpression.Expression" /> and <see cref="P:System.Linq.Expressions.TypeBinaryExpression.TypeOperand" /> properties are set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3731"><xref:System.Linq.Expressions.Expression.Type%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>表す<xref:System.Boolean>です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3731">The <xref:System.Linq.Expressions.Expression.Type%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> represents <xref:System.Boolean>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="d5b6d-3732">次の例で使用する方法、<xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29>メソッドを作成、<xref:System.Linq.Expressions.TypeBinaryExpression>に対して文字列値の型のテストを表す、<xref:System.Int32>型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3732">The following example demonstrates how to use the <xref:System.Linq.Expressions.Expression.TypeIs%28System.Linq.Expressions.Expression%2CSystem.Type%29> method to create a <xref:System.Linq.Expressions.TypeBinaryExpression> that represents a type test of a string value against the <xref:System.Int32> type.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.Expression#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/CS/Expression.cs#12)]
 [!code-vb[System.Linq.Expressions.Expression#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.Expression/VB/Expression.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3733">
            <paramref name="expression" /> または <paramref name="type" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3733">
              <paramref name="expression" /> or <paramref name="type" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="UnaryPlus">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3734">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3734">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3735">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3735">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3736">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3736">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3737">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティおよび指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3737">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property set to the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3738"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3738">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3739"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3739">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3740">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3740">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3741">それ以外の場合は false です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3741">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3742">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3742">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3743">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3743">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3744">If `expression`.型は、単項プラス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3744">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3745">それ以外の場合`expression`です。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3745">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3746">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3746">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3747">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3747">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3748">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3748">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3749">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3749">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3750">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3750">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3751">`expression`.型は、null 許容値型と、対応する null 非許容の値の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3751">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3752">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3752">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3753">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3753">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-3754">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3754">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3755">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3755">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3756">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3756">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3757">単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3757">The unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="UnaryPlus">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression UnaryPlus (System.Linq.Expressions.Expression expression, System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression UnaryPlus(class System.Linq.Expressions.Expression expression, class System.Reflection.MethodInfo method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.UnaryPlus(System.Linq.Expressions.Expression,System.Reflection.MethodInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ UnaryPlus(System::Linq::Expressions::Expression ^ expression, System::Reflection::MethodInfo ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3758">
            <see cref="T:System.Linq.Expressions.Expression" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3758">An <see cref="T:System.Linq.Expressions.Expression" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> property equal to.</span>
          </span>
        </param>
        <param name="method">
          <span data-ttu-id="d5b6d-3759">
            <see cref="T:System.Reflection.MethodInfo" /> プロパティを等しく設定する <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3759">A <see cref="T:System.Reflection.MethodInfo" /> to set the <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> property equal to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3760">単項プラス演算を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3760">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents a unary plus operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3761">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> と等しい <see cref="P:System.Linq.Expressions.Expression.NodeType" /> プロパティと、指定した値に設定された <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> プロパティおよび <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> プロパティを含む <see cref="P:System.Linq.Expressions.UnaryExpression.Method" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3761">A <see cref="T:System.Linq.Expressions.UnaryExpression" /> that has the <see cref="P:System.Linq.Expressions.Expression.NodeType" /> property equal to <see cref="F:System.Linq.Expressions.ExpressionType.UnaryPlus" /> and the <see cref="P:System.Linq.Expressions.UnaryExpression.Operand" /> and <see cref="P:System.Linq.Expressions.UnaryExpression.Method" /> properties set to the specified values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3762"><xref:System.Linq.Expressions.UnaryExpression.Method%2A>結果のプロパティ<xref:System.Linq.Expressions.UnaryExpression>メソッドの実装に設定されています。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3762">The <xref:System.Linq.Expressions.UnaryExpression.Method%2A> property of the resulting <xref:System.Linq.Expressions.UnaryExpression> is set to the implementing method.</span></span> <span data-ttu-id="d5b6d-3763"><xref:System.Linq.Expressions.Expression.Type%2A>プロパティが、ノードの種類に設定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3763">The <xref:System.Linq.Expressions.Expression.Type%2A> property is set to the type of the node.</span></span> <span data-ttu-id="d5b6d-3764">ノードを解除すると場合、<xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A>と<xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A>プロパティが両方とも`true`です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3764">If the node is lifted, the <xref:System.Linq.Expressions.BinaryExpression.IsLifted%2A> and <xref:System.Linq.Expressions.BinaryExpression.IsLiftedToNull%2A> properties are both `true`.</span></span> <span data-ttu-id="d5b6d-3765">それ以外の場合は false です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3765">Otherwise, they are false.</span></span>  
  
#### <a name="implementing-method"></a><span data-ttu-id="d5b6d-3766">メソッドを実装します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3766">Implementing Method</span></span>  
 <span data-ttu-id="d5b6d-3767">次の規則では、操作のメソッドの実装を決定します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3767">The following rules determine the implementing method for the operation:</span></span>  
  
-   <span data-ttu-id="d5b6d-3768">場合`method`は`null`、void 以外を表します`static`(`Shared` Visual Basic で) を 1 つの引数を受け取るメソッドはノードのメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3768">If `method` is not `null` and it represents a non-void, `static` (`Shared` in Visual Basic) method that takes one argument, it is the implementing method for the node.</span></span>  
  
-   <span data-ttu-id="d5b6d-3769">If `expression`.型は、単項プラス演算子を定義するユーザー定義型、<xref:System.Reflection.MethodInfo>を表す演算子はメソッドの実装です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3769">If `expression`.Type is a user-defined type that defines the unary plus operator, the <xref:System.Reflection.MethodInfo> that represents that operator is the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3770">それ以外の場合`expression`です。型が数値型、メソッドの実装は`null`します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3770">Otherwise, if `expression`.Type is a numeric type, the implementing method is `null`.</span></span>  
  
#### <a name="node-type-and-lifted-versus-non-lifted"></a><span data-ttu-id="d5b6d-3771">ノード型と非リフト リフトと</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3771">Node Type and Lifted versus Non-Lifted</span></span>  
 <span data-ttu-id="d5b6d-3772">メソッドの実装がない場合`null`:</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3772">If the implementing method is not `null`:</span></span>  
  
-   <span data-ttu-id="d5b6d-3773">If `expression`.型が実装するメソッドの引数の型に割り当てることは、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3773">If `expression`.Type is assignable to the argument type of the implementing method, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3774">ノードの型は、実装メソッドの戻り値の型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3774">The type of the node is the return type of the implementing method.</span></span>  
  
-   <span data-ttu-id="d5b6d-3775">次の 2 つの条件が満たされている場合、ノードがリフトされており、ノードの型は、実装メソッドの戻り値の型に対応する null 許容型。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3775">If the following two conditions are satisfied, the node is lifted and the type of the node is the nullable type that corresponds to the return type of the implementing method:</span></span>  
  
    -   <span data-ttu-id="d5b6d-3776">`expression`.型は、null 許容値型と、対応する null 非許容の値の型が実装するメソッドの引数型と一致します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3776">`expression`.Type is a nullable value type and the corresponding non-nullable value type is equal to the argument type of the implementing method.</span></span>  
  
    -   <span data-ttu-id="d5b6d-3777">実装メソッドの戻り値の型は、null 非許容値型です。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3777">The return type of the implementing method is a non-nullable value type.</span></span>  
  
 <span data-ttu-id="d5b6d-3778">メソッドの実装が場合`null`、ノードの種類は`expression`します。入力します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3778">If the implementing method is `null`, the type of the node is `expression`.Type.</span></span> <span data-ttu-id="d5b6d-3779">If `expression`.型が null 非許容は、ノードがリフトされていません。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3779">If `expression`.Type is non-nullable, the node is not lifted.</span></span> <span data-ttu-id="d5b6d-3780">それ以外の場合、ノードを解除します。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3780">Otherwise, the node is lifted.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="d5b6d-3781">
            <paramref name="expression" /> は <see langword="null" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3781">
              <paramref name="expression" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="d5b6d-3782">
            <paramref name="method" /> は <see langword="null" /> ではなく、それが表すメソッドは <see langword="void" /> を返し、<see langword="static" /> (Visual Basic では <see langword="Shared" />) ではないか、受け取る引数が 1 つだけではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3782">
              <paramref name="method" /> is not <see langword="null" /> and the method it represents returns <see langword="void" />, is not <see langword="static" /> (<see langword="Shared" /> in Visual Basic), or does not take exactly one argument.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="d5b6d-3783">
            <paramref name="method" /> は <see langword="null" /> で、単項プラス演算子は <paramref name="expression" />.Type に対して定義されていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3783">
              <paramref name="method" /> is <see langword="null" /> and the unary plus operator is not defined for <paramref name="expression" />.Type.</span>
          </span>
          <span data-ttu-id="d5b6d-3784">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3784">-or-</span>
          </span>
          <span data-ttu-id="d5b6d-3785">
            <paramref name="expression" />.Type (または null 許容値型の場合はその対応する null 非許容型) は、<paramref name="method" /> によって表されるメソッドの引数型に代入できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3785">
              <paramref name="expression" />.Type (or its corresponding non-nullable type if it is a nullable value type) is not assignable to the argument type of the method represented by <paramref name="method" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Unbox">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.UnaryExpression Unbox (System.Linq.Expressions.Expression expression, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.UnaryExpression Unbox(class System.Linq.Expressions.Expression expression, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Unbox(System.Linq.Expressions.Expression,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::UnaryExpression ^ Unbox(System::Linq::Expressions::Expression ^ expression, Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.UnaryExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="d5b6d-3786">ボックス化解除する <see cref="T:System.Linq.Expressions.Expression" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3786">An <see cref="T:System.Linq.Expressions.Expression" /> to unbox.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="d5b6d-3787">式の新しい <see cref="T:System.Type" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3787">The new <see cref="T:System.Type" /> of the expression.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3788">明示的なボックス化解除を表す <see cref="T:System.Linq.Expressions.UnaryExpression" /> を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3788">Creates a <see cref="T:System.Linq.Expressions.UnaryExpression" /> that represents an explicit unboxing.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3789">
            <see cref="T:System.Linq.Expressions.UnaryExpression" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3789">An instance of <see cref="T:System.Linq.Expressions.UnaryExpression" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Variable">
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="d5b6d-3790">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3790">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-3791">パラメーターまたは変数の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3791">The type of the parameter or variable.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3792">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3792">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3793">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3793">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public static System.Linq.Expressions.ParameterExpression Variable (Type type, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.Expressions.ParameterExpression Variable(class System.Type type, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.Variable(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Linq::Expressions::ParameterExpression ^ Variable(Type ^ type, System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.ParameterExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="d5b6d-3794">パラメーターまたは変数の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3794">The type of the parameter or variable.</span>
          </span>
        </param>
        <param name="name">
          <span data-ttu-id="d5b6d-3795">パラメーターまたは変数の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3795">The name of the parameter or variable.</span>
          </span>
          <span data-ttu-id="d5b6d-3796">この名前はデバッグまたは印刷の目的でのみ使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3796">This name is used for debugging or printing purpose only.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3797">式ツリーでパラメーターまたは変数を識別するために使用できる <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノードを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3797">Creates a <see cref="T:System.Linq.Expressions.ParameterExpression" /> node that can be used to identify a parameter or a variable in an expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3798">指定した名前および型の <see cref="T:System.Linq.Expressions.ParameterExpression" /> ノード。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3798">A <see cref="T:System.Linq.Expressions.ParameterExpression" /> node with the specified name and type.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitChildren">
      <MemberSignature Language="C#" Value="protected internal virtual System.Linq.Expressions.Expression VisitChildren (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance class System.Linq.Expressions.Expression VisitChildren(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression.VisitChildren(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function VisitChildren (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual System::Linq::Expressions::Expression ^ VisitChildren(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">
          <span data-ttu-id="d5b6d-3799">
            <see cref="T:System.Func`2" /> のインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3799">An instance of <see cref="T:System.Func`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="d5b6d-3800">ノードを単純化し、単純化された式の visitor デリゲートを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3800">Reduces the node and then calls the visitor delegate on the reduced expression.</span>
          </span>
          <span data-ttu-id="d5b6d-3801">ノードを単純化できない場合、このメソッドは例外をスローします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3801">The method throws an exception if the node is not reducible.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="d5b6d-3802">走査中の式、またはツリー内で走査中の式と置き換える式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="d5b6d-3802">The expression being visited, or an expression which should replace it in the tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="d5b6d-3803">ノードの子のすべての要素のロジックを提供するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3803">Override this method to provide logic to walk the node's children.</span></span> <span data-ttu-id="d5b6d-3804">一般的な実装では、ビジターを呼び出します。それぞれの子を参照してくださいと変更それらのいずれかの場合は、それ自体の子が変更された新しいコピーを返す必要があります。</span><span class="sxs-lookup"><span data-stu-id="d5b6d-3804">A typical implementation will call visitor.Visit on each of its children, and if any of them change, should return a new copy of itself with the modified children.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>