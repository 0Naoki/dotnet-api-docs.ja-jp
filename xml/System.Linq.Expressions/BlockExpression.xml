<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="BlockExpression.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5c873b34ae4159fabe8c4af0f401d284d51ecfcaa.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">c873b34ae4159fabe8c4af0f401d284d51ecfcaa</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.BlockExpression">
          <source>Represents a block that contains a sequence of expressions where variables can be defined.</source>
          <target state="translated">変数を定義できる式のシーケンスを格納するブロックを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BlockExpression">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Block%2A&gt;</ph> methods can be used to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Block%2A&gt;</ph>を作成するメソッドを使用することができます、<ph id="ph2">&lt;xref:System.Linq.Expressions.BlockExpression&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BlockExpression">
          <source>The following code example shows how to create a block expression.</source>
          <target state="translated">次のコード例では、ブロックの式を作成する方法を示します。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.BlockExpression">
          <source>The block expression consists of two <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> objects and one <ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph> object.</source>
          <target state="translated">ブロックの式は、2 つの<ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>オブジェクトと 1 つ<ph id="ph2">&lt;xref:System.Linq.Expressions.ConstantExpression&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">このノードを走査するビジター。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">このノード型の特定の Visit メソッドにデスパッチします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> は <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">このノードの走査結果。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">この既定の実装の<ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph>ノード呼び出し<ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">訪問者の派生クラスで複数の特定のメソッドを呼び出すには、このメソッドをオーバーライドして、<ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.BlockExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">ただし、サポートすることがまだ不明な訪問者を呼び出して<ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BlockExpression.Expressions">
          <source>Gets the expressions in this block.</source>
          <target state="translated">このブロック内の式を取得します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BlockExpression.Expressions">
          <source>The read-only collection containing all the expressions in this block.</source>
          <target state="translated">このブロック内のすべての式を格納している読み取り専用コレクション。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BlockExpression.NodeType">
          <source>Returns the node type of this expression.</source>
          <target state="translated">この式のノード型を返します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BlockExpression.NodeType">
          <source>Extension nodes should return <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Extension" /&gt;</ph> when overriding this method.</source>
          <target state="translated">拡張ノードは、このメソッドをオーバーライドする際に <ph id="ph1">&lt;see cref="F:System.Linq.Expressions.ExpressionType.Extension" /&gt;</ph> を返す必要があります。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BlockExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> of the expression.</source>
          <target state="translated">式の <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BlockExpression.Result">
          <source>Gets the last expression in this block.</source>
          <target state="translated">このブロック内の最後の式を取得します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BlockExpression.Result">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> object representing the last expression in this block.</source>
          <target state="translated">このブロックの最後の式を表す <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BlockExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> が表す式の静的な型を取得します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BlockExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BlockExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">式の静的な型を表す <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BlockExpression.Type" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BlockExpression.Variables" /&gt;</ph> property of the result.</source>
          <target state="translated">結果の <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BlockExpression.Variables" /&gt;</ph> プロパティ。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /&gt;</ph> property of the result.</source>
          <target state="translated">結果の <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.BlockExpression.Expressions" /&gt;</ph> プロパティ。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">これに似た式ですが、指定された子を使用する、新しい式を作成します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">すべての子が同じである場合、この式を返します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.BlockExpression.Update(System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression},System.Collections.Generic.IEnumerable{System.Linq.Expressions.Expression})">
          <source>This expression if no children changed, or an expression with the updated children.</source>
          <target state="translated">更新された子を使用した式。子が変更されていない場合はこの式。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.BlockExpression.Variables">
          <source>Gets the variables defined in this block.</source>
          <target state="translated">このブロックで定義されている変数を取得します。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.BlockExpression.Variables">
          <source>The read-only collection containing all the variables defined in this block.</source>
          <target state="translated">このブロックで定義されているすべての変数を格納している読み取り専用コレクション。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>