<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="978f18032b1aec687a3f90531a776cb2a47a2705" /><Meta Name="ms.sourcegitcommit" Value="bc24a3ba616ee1df8b858f9400cae4f058ea3a7e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="06/19/2019" /><Meta Name="ms.locfileid" Value="67244471" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>複数のツリー ノード (DynamicExpression、ElementInit、MethodCallExpression、InvocationExpression、NewExpression および IndexExpression) の引数にアクセスするための内部インターフェイスを提供します。  この API は、内部でだけ使用します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[
      
## Remarks

この API を使用しないでください。  リファクタリング、アセンブリのためにだけパブリックと内部パフォーマンスの最適化に対してのみ存在します。 ツリーのサイズを小さく 2 つの最適化が有効にします。
  
1. これにより、ノードは、上に保持するために、<xref:System.Collections.Generic.IList%601>の代わりに、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>します。  これは、各ノード用の読み取り専用コレクションの割り当てのコストを節約できます。
  
2. 特殊なサブクラスで特定の数の引数をその保留を作成することができます (たとえば、 `Block2`、 `Block2`、 `Block4`)。  これらのノードが両方の割り当てを回避するため、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>とノードにつき 32 バイトを節約できるよう、その要素を格納する配列。  含む、さまざまなノードでこの手法が使用される<xref:System.Linq.Expressions.BlockExpression>、 <xref:System.Linq.Expressions.InvocationExpression>、および<xref:System.Linq.Expressions.MethodCallExpression>します。
            
式ツリーのノードがのオリジナル LINQ プロパティを公開する続行<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>オブジェクト。 この操作をこれらには、配列または配列に通常格納される要素の両方を格納するフィールドを再利用します。
            
コレクションに型指定された配列の場合、<xref:System.Collections.Generic.IList%601>の代わりに<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>します。 ノードが最初に構築されるときに、配列です。  コンパイラまたはユーティリティがこのライブラリでこのインターフェイスを通じて要素にアクセスします。 配列要素へのアクセス先の配列を昇格、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>します。
            
型指定されたフィールドにオブジェクトの場合、最初の引数が格納されている<xref:System.Object>します。 このフィールドを保持するノードが最初に構築されるときに、<xref:System.Linq.Expressions.Expression>の最初の引数。  コンパイラとライブラリのこのユーティリティは、引数をアクセス、もう一度、このインターフェイスを使用すると、最初の引数にアクセサーを使用して、内部`Expression.ReturnObject<T>(System.Object)`を処理するオブジェクトを返すヘルパー メソッド、<xref:System.Linq.Expressions.Expression>または<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>ケース。 ユーザーがアクセスするときに、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>に直接格納するオブジェクトのフィールドが更新される、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>します。
            
重要ですが<xref:System.Linq.Expressions.Expression>プロパティが一貫して返す同じ<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>します。 それ以外の場合、式の訪問者によって使用される、リライター ツリー ウォーカーが解除されます。 返す別の LINQ v1 からの重大な変更の<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>から同じ<xref:System.Linq.Expressions.Expression>ノード。 現時点では、ユーザーは、ノードが変更されたかどうかに通知するオブジェクトの id を使用できます。  格納する、<xref:System.Collections.ObjectModel.ReadOnlyCollection%601>オーバー ロードされたフィールドの両方メモリ使用量を削減し、パブリック API の互換性を維持します。

      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>式ツリー ノードに引数の数を返します。 この API は、内部でだけ使用します。</summary>
        <value><see cref="T:System.Int32" /> として式ツリー ノードに引数の数を返します。</value>
        <remarks>この API を使用しないでください。 リファクタリング、アセンブリのためだけにパブリックでありパフォーマンスの最適化を内部的に使用されます。</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">引数のインデックス。</param>
        <summary><paramref name="index" /> の引数を返し、<paramref name="index" /> が範囲外にある場合にスローします。 この API は、内部でだけ使用します。</summary>
        <returns>インデックスの引数。</returns>
        <remarks>この API を使用しないでください。  これは、アセンブリ リファクタリングのためパブリックのみで、パフォーマンスの最適化のために内部で使用されます。</remarks>
      </Docs>
    </Member>
  </Members>
</Type>