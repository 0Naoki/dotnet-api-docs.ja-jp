<Type Name="Expression&lt;TDelegate&gt;" FullName="System.Linq.Expressions.Expression&lt;TDelegate&gt;">
  <TypeSignature Language="C#" Value="public sealed class Expression&lt;TDelegate&gt; : System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Expression`1&lt;TDelegate&gt; extends System.Linq.Expressions.LambdaExpression" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.Expression`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Expression(Of TDelegate)&#xA;Inherits LambdaExpression" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TDelegate&gt;&#xA;public ref class Expression sealed : System::Linq::Expressions::LambdaExpression" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TDelegate" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Linq.Expressions.LambdaExpression</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <typeparam name="TDelegate"><span data-ttu-id="38b6a-101"><see cref="T:System.Linq.Expressions.Expression`1" /> を表すデリゲートの型。</span><span class="sxs-lookup"><span data-stu-id="38b6a-101">The type of the delegate that the <see cref="T:System.Linq.Expressions.Expression`1" /> represents.</span></span></typeparam>
    <summary><span data-ttu-id="38b6a-102">厳密に型指定されたラムダ式を、式ツリー形式のデータ構造体として表します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-102">Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</span></span> <span data-ttu-id="38b6a-103">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="38b6a-103">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38b6a-104">変数、フィールド、または型を持つパラメーターに、ラムダ式が割り当てられるとき<xref:System.Linq.Expressions.Expression%601>コンパイラは、式ツリーを構築する手順。</span><span class="sxs-lookup"><span data-stu-id="38b6a-104">When a lambda expression is assigned to a variable, field, or parameter whose type is <xref:System.Linq.Expressions.Expression%601>, the compiler emits instructions to build an expression tree.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="38b6a-105">入力する、ラムダ式から変換`Expression<D>`(`Expression(Of D)` Visual Basic で) 場合は、ラムダ式から型のデリゲートへの変換が存在する`D`が存在します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-105">A conversion from a lambda expression to type `Expression<D>` (`Expression(Of D)` in Visual Basic) exists if a conversion from the lambda expression to a delegate of type `D` exists.</span></span> <span data-ttu-id="38b6a-106">ただし、変換が失敗するなどの場合は、ラムダ式の本体は、ブロックします。</span><span class="sxs-lookup"><span data-stu-id="38b6a-106">However, the conversion may fail, for example, if the body of the lambda expression is a block.</span></span> <span data-ttu-id="38b6a-107">これは、デリゲートと式ツリーがオーバー ロードの解決に関して同様に動作することを意味します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-107">This means that delegates and expression trees behave similarly with regard to overload resolution.</span></span>  
  
 <span data-ttu-id="38b6a-108">式ツリーは、ラムダ式のメモリ内データ表現です。</span><span class="sxs-lookup"><span data-stu-id="38b6a-108">The expression tree is an in-memory data representation of the lambda expression.</span></span> <span data-ttu-id="38b6a-109">式ツリーは、透過的と明示的なラムダ式の構造をします。</span><span class="sxs-lookup"><span data-stu-id="38b6a-109">The expression tree makes the structure of the lambda expression transparent and explicit.</span></span> <span data-ttu-id="38b6a-110">他のすべてのデータ構造と同様、式ツリー内のデータと対話できます。</span><span class="sxs-lookup"><span data-stu-id="38b6a-110">You can interact with the data in the expression tree just as you can with any other data structure.</span></span>  
  
 <span data-ttu-id="38b6a-111">データ構造体として式を処理する機能は、検査、変換、およびカスタムの方法で処理されることができる形式でユーザー コードを受信するための Api を使用できます。</span><span class="sxs-lookup"><span data-stu-id="38b6a-111">The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</span></span> <span data-ttu-id="38b6a-112">たとえば、[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]データ アクセスの実装では、この機能を使用して、TRANSACT-SQL ステートメントをデータベースによって評価される式ツリーに変換します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-112">For example, the [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</span></span>  
  
 <span data-ttu-id="38b6a-113">多くの標準クエリ演算子で定義されている、<xref:System.Linq.Queryable>クラスは、型の 1 つまたは複数のパラメーターを持つ<xref:System.Linq.Expressions.Expression%601>します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-113">Many standard query operators defined in the <xref:System.Linq.Queryable> class have one or more parameters of type <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="38b6a-114"><xref:System.Linq.Expressions.Expression.NodeType%2A>の<xref:System.Linq.Expressions.Expression%601>は<xref:System.Linq.Expressions.ExpressionType.Lambda>します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-114">The <xref:System.Linq.Expressions.Expression.NodeType%2A> of an <xref:System.Linq.Expressions.Expression%601> is <xref:System.Linq.Expressions.ExpressionType.Lambda>.</span></span>  
  
 <span data-ttu-id="38b6a-115">使用して、<xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29>または<xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29>メソッドを作成、<xref:System.Linq.Expressions.Expression%601>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="38b6a-115">Use the <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29> or <xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29> method to create an <xref:System.Linq.Expressions.Expression%601> object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38b6a-116">次のコード例では、デリゲートの形式で実行可能コードと、式ツリーの形式でデータの両方のラムダ式を表す方法を示します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-116">The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</span></span> <span data-ttu-id="38b6a-117">使用して実行可能コードに戻る、式ツリーを変換する方法も示します、<xref:System.Linq.Expressions.Expression%601.Compile%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="38b6a-117">It also demonstrates how to turn the expression tree back into executable code by using the <xref:System.Linq.Expressions.Expression%601.Compile%2A> method.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#1)]
 [!code-vb[System.Linq.Expressions.ExpressionT#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Accept">
      <MemberSignature Language="C#" Value="protected internal override System.Linq.Expressions.Expression Accept (System.Linq.Expressions.ExpressionVisitor visitor);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance class System.Linq.Expressions.Expression Accept(class System.Linq.Expressions.ExpressionVisitor visitor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Accept(System.Linq.Expressions.ExpressionVisitor)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function Accept (visitor As ExpressionVisitor) As Expression" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::Linq::Expressions::Expression ^ Accept(System::Linq::Expressions::ExpressionVisitor ^ visitor);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="visitor" Type="System.Linq.Expressions.ExpressionVisitor" />
      </Parameters>
      <Docs>
        <param name="visitor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile () As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="38b6a-118">式ツリーによって記述されたラムダ式を実行可能コードにコンパイルし、ラムダ式を表すデリゲートを生成します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-118">Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="38b6a-119"><see cref="T:System.Linq.Expressions.Expression`1" /> によって記述されたコンパイル済みのラムダ式を表す <paramref name="TDelegate" /> 型のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="38b6a-119">A delegate of type <paramref name="TDelegate" /> that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="38b6a-120"><xref:System.Linq.Expressions.Expression%601.Compile%2A>メソッド型のデリゲートを生成する`TDelegate`実行時にします。</span><span class="sxs-lookup"><span data-stu-id="38b6a-120">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method produces a delegate of type `TDelegate` at runtime.</span></span> <span data-ttu-id="38b6a-121">セマンティクスで説明した動作がそのデリゲートを実行すると、<xref:System.Linq.Expressions.Expression%601>です。</span><span class="sxs-lookup"><span data-stu-id="38b6a-121">When that delegate is executed, it has the behavior described by the semantics of the <xref:System.Linq.Expressions.Expression%601>.</span></span>  
  
 <span data-ttu-id="38b6a-122"><xref:System.Linq.Expressions.Expression%601.Compile%2A>任意の式ツリーの値を取得するメソッドを使用できます。</span><span class="sxs-lookup"><span data-stu-id="38b6a-122">The <xref:System.Linq.Expressions.Expression%601.Compile%2A> method can be used to obtain the value of any expression tree.</span></span> <span data-ttu-id="38b6a-123">最初を使用して、本文として式を持つラムダ式を作成、<xref:System.Linq.Expressions.Expression.Lambda%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="38b6a-123">First, create a lambda expression that has the expression as its body by using the <xref:System.Linq.Expressions.Expression.Lambda%2A> method.</span></span> <span data-ttu-id="38b6a-124">呼び出す<xref:System.Linq.Expressions.Expression%601.Compile%2A>デリゲートを取得し、式の値を取得するデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-124">Then call <xref:System.Linq.Expressions.Expression%601.Compile%2A> to obtain a delegate, and execute the delegate to obtain the value of the expression.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="38b6a-125">次のコード例でどのように<xref:System.Linq.Expressions.Expression%601.Compile%2A>式ツリーを実行するために使用します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-125">The following code example demonstrates how <xref:System.Linq.Expressions.Expression%601.Compile%2A> is used to execute an expression tree.</span></span>  
  
 [!code-csharp[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/CS/ExpressionT.cs#2)]
 [!code-vb[System.Linq.Expressions.ExpressionT#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Expressions.ExpressionT/VB/ExpressionT.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (bool preferInterpretation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(bool preferInterpretation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Compile (preferInterpretation As Boolean) As TDelegate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(bool preferInterpretation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferInterpretation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="preferInterpretation">
          <span data-ttu-id="38b6a-126">その式を解釈された形式にコンパイルすべきことを示す <see langword="true" /> (存在する場合)、それ以外の場合 <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="38b6a-126"><see langword="true" /> to indicate that the expression should be compiled to an interpreted form, if it is available; <see langword="false" /> otherwise.</span></span></param>
        <summary><span data-ttu-id="38b6a-127">式ツリーで記述されたラムダ式を、解釈されたまたはコンパイル済みコードにコンパイルし、そのラムダ式を表すデリゲートを生成します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-127">Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="38b6a-128"><see cref="T:System.Linq.Expressions.Expression`1" /> により記述されたコンパイル済みのラムダ式を表すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="38b6a-128">A delegate that represents the compiled lambda expression described by the <see cref="T:System.Linq.Expressions.Expression`1" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compile">
      <MemberSignature Language="C#" Value="public TDelegate Compile (System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TDelegate Compile(class System.Runtime.CompilerServices.DebugInfoGenerator debugInfoGenerator) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TDelegate Compile(System::Runtime::CompilerServices::DebugInfoGenerator ^ debugInfoGenerator);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TDelegate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugInfoGenerator" Type="System.Runtime.CompilerServices.DebugInfoGenerator" />
      </Parameters>
      <Docs>
        <param name="debugInfoGenerator"><span data-ttu-id="38b6a-129">シーケンス ポイントをマークしたりローカル変数に注釈を付けたりするためにコンパイラが使用するデバッグ情報ジェネレーター。</span><span class="sxs-lookup"><span data-stu-id="38b6a-129">Debugging information generator used by the compiler to mark sequence points and annotate local variables.</span></span></param>
        <summary><span data-ttu-id="38b6a-130">ラムダ式を表すデリゲートを作成します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-130">Produces a delegate that represents the lambda expression.</span></span></summary>
        <returns><span data-ttu-id="38b6a-131">コンパイルされたバージョンのラムダを含んでいるデリゲート。</span><span class="sxs-lookup"><span data-stu-id="38b6a-131">A delegate containing the compiled version of the lambda.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression&lt;TDelegate&gt; Update (System.Linq.Expressions.Expression body, System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt; parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Linq.Expressions.Expression`1&lt;!TDelegate&gt; Update(class System.Linq.Expressions.Expression body, class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.Expressions.ParameterExpression&gt; parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (body As Expression, parameters As IEnumerable(Of ParameterExpression)) As Expression(Of TDelegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression&lt;TDelegate&gt; ^ Update(System::Linq::Expressions::Expression ^ body, System::Collections::Generic::IEnumerable&lt;System::Linq::Expressions::ParameterExpression ^&gt; ^ parameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression&lt;TDelegate&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="System.Linq.Expressions.Expression" />
        <Parameter Name="parameters" Type="System.Collections.Generic.IEnumerable&lt;System.Linq.Expressions.ParameterExpression&gt;" />
      </Parameters>
      <Docs>
        <param name="body"><span data-ttu-id="38b6a-132">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> プロパティ。</span><span class="sxs-lookup"><span data-stu-id="38b6a-132">The <see cref="P:System.Linq.Expressions.LambdaExpression.Body" /> property of the result.</span></span></param>
        <param name="parameters"><span data-ttu-id="38b6a-133">結果の <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> プロパティ。</span><span class="sxs-lookup"><span data-stu-id="38b6a-133">The <see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /> property of the result.</span></span></param>
        <summary><span data-ttu-id="38b6a-134">これに似た式ですが、指定された子を使用する、新しい式を作成します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-134">Creates a new expression that is like this one, but using the supplied children.</span></span> <span data-ttu-id="38b6a-135">すべての子が同じである場合、この式を返します。</span><span class="sxs-lookup"><span data-stu-id="38b6a-135">If all of the children are the same, it will return this expression.</span></span></summary>
        <returns><span data-ttu-id="38b6a-136">子が変更されていない場合はこの式。あるいは、更新された子を持つ式。</span><span class="sxs-lookup"><span data-stu-id="38b6a-136">This expression if no children are changed or an expression with the updated children.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>