<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Expression`1.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5852b4062c851ab4301c9efb34c1ebacc0ca1b9fe.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">852b4062c851ab4301c9efb34c1ebacc0ca1b9fe</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The type of the delegate that the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> represents.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> を表すデリゲートの型。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression`1">
          <source>Represents a strongly typed lambda expression as a data structure in the form of an expression tree.</source>
          <target state="translated">厳密に型指定されたラムダ式を、式ツリー形式のデータ構造体として表します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.Expression`1">
          <source>This class cannot be inherited.</source>
          <target state="translated">このクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>When a lambda expression is assigned to a variable, field, or parameter whose type is <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>, the compiler emits instructions to build an expression tree.</source>
          <target state="translated">変数、フィールド、または型を持つパラメーターに、ラムダ式が割り当てられるとき<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>コンパイラは、式ツリーを構築する手順。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>A conversion from a lambda expression to type <ph id="ph1">`Expression&lt;D&gt;`</ph> (<ph id="ph2">`Expression(Of D)`</ph> in Visual Basic) exists if a conversion from the lambda expression to a delegate of type <ph id="ph3">`D`</ph> exists.</source>
          <target state="translated">入力する、ラムダ式から変換<ph id="ph1">`Expression&lt;D&gt;`</ph>(<ph id="ph2">`Expression(Of D)`</ph> Visual Basic で) 場合は、ラムダ式から型のデリゲートへの変換が存在する<ph id="ph3">`D`</ph>が存在します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>However, the conversion may fail, for example, if the body of the lambda expression is a block.</source>
          <target state="translated">ただし、変換が失敗するなどの場合は、ラムダ式の本体は、ブロックします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>This means that delegates and expression trees behave similarly with regard to overload resolution.</source>
          <target state="translated">これは、デリゲートと式ツリーがオーバー ロードの解決に関して同様に動作することを意味します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The expression tree is an in-memory data representation of the lambda expression.</source>
          <target state="translated">式ツリーは、ラムダ式のメモリ内データ表現です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The expression tree makes the structure of the lambda expression transparent and explicit.</source>
          <target state="translated">式ツリーは、透過的と明示的なラムダ式の構造をします。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>You can interact with the data in the expression tree just as you can with any other data structure.</source>
          <target state="translated">他のすべてのデータ構造と同様、式ツリー内のデータと対話できます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The ability to treat expressions as data structures enables APIs to receive user code in a format that can be inspected, transformed, and processed in a custom manner.</source>
          <target state="translated">データ構造体として式を処理する機能は、検査、変換、およびカスタムの方法で処理されることができる形式でユーザー コードを受信するための Api を使用できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>For example, the <ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph> data access implementation uses this facility to translate expression trees to Transact-SQL statements that can be evaluated by the database.</source>
          <target state="translated">たとえば、<ph id="ph1">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]</ph>データ アクセスの実装では、この機能を使用して、TRANSACT-SQL ステートメントをデータベースによって評価される式ツリーに変換します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>Many standard query operators defined in the <ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph> class have one or more parameters of type <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">多くの標準クエリ演算子で定義されている、<ph id="ph1">&lt;xref:System.Linq.Queryable&gt;</ph>クラスは、型の 1 つまたは複数のパラメーターを持つ<ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> of an <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph>の<ph id="ph2">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>は<ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Lambda&gt;</ph>します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph> or <ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29&gt;</ph> method to create an <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph> object.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Collections.Generic.IEnumerable%7BSystem.Linq.Expressions.ParameterExpression%7D%29&gt;</ph>または<ph id="ph2">&lt;xref:System.Linq.Expressions.Expression.Lambda%60%601%28System.Linq.Expressions.Expression%2CSystem.Linq.Expressions.ParameterExpression%5B%5D%29&gt;</ph>メソッドを作成、<ph id="ph3">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>The following code example demonstrates how to represent a lambda expression both as executable code in the form of a delegate and as data in the form of an expression tree.</source>
          <target state="translated">次のコード例では、デリゲートの形式で実行可能コードと、式ツリーの形式でデータの両方のラムダ式を表す方法を示します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.Expression`1">
          <source>It also demonstrates how to turn the expression tree back into executable code by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method.</source>
          <target state="translated">使用して実行可能コードに戻る、式ツリーを変換する方法も示します、<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>Compiles the lambda expression described by the expression tree into executable code and produces a delegate that represents the lambda expression.</source>
          <target state="translated">式ツリーによって記述されたラムダ式を実行可能コードにコンパイルし、ラムダ式を表すデリゲートを生成します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>A delegate of type <ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> that represents the compiled lambda expression described by the <ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> によって記述されたコンパイル済みのラムダ式を表す <ph id="ph1">&lt;paramref name="TDelegate" /&gt;</ph> 型のデリゲート。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method produces a delegate of type <ph id="ph2">`TDelegate`</ph> at runtime.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph>メソッド型のデリゲートを生成する<ph id="ph2">`TDelegate`</ph>実行時にします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>When that delegate is executed, it has the behavior described by the semantics of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>.</source>
          <target state="translated">セマンティクスで説明した動作がそのデリゲートを実行すると、<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> method can be used to obtain the value of any expression tree.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph>任意の式ツリーの値を取得するメソッドを使用できます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>First, create a lambda expression that has the expression as its body by using the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph> method.</source>
          <target state="translated">最初を使用して、本文として式を持つラムダ式を作成、<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Lambda%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>Then call <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> to obtain a delegate, and execute the delegate to obtain the value of the expression.</source>
          <target state="translated">呼び出す<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph>デリゲートを取得し、式の値を取得するデリゲートを実行します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.Expression`1.Compile">
          <source>The following code example demonstrates how <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph> is used to execute an expression tree.</source>
          <target state="translated">次のコード例でどのように<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression%601.Compile%2A&gt;</ph>式ツリーを実行するために使用します。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to indicate that the expression should be compiled to an interpreted form, if it is available; <ph id="ph2">&lt;see langword="false" /&gt;</ph> otherwise.</source>
          <target state="translated">その式を解釈された形式にコンパイルすべきことを示す <ph id="ph1">&lt;see langword="true" /&gt;</ph> (存在する場合)、それ以外の場合 <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source>Compiles the lambda expression described by the expression tree into interpreted or compiled code and produces a delegate that represents the lambda expression.</source>
          <target state="translated">式ツリーで記述されたラムダ式を、解釈されたまたはコンパイル済みコードにコンパイルし、そのラムダ式を表すデリゲートを生成します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Boolean)">
          <source>A delegate that represents the compiled lambda expression described by the <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression`1" /&gt;</ph> により記述されたコンパイル済みのラムダ式を表すデリゲート。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Debugging information generator used by the compiler to mark sequence points and annotate local variables.</source>
          <target state="translated">シーケンス ポイントをマークしたりローカル変数に注釈を付けたりするためにコンパイラが使用するデバッグ情報ジェネレーター。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>Produces a delegate that represents the lambda expression.</source>
          <target state="translated">ラムダ式を表すデリゲートを作成します。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Compile(System.Runtime.CompilerServices.DebugInfoGenerator)">
          <source>A delegate containing the compiled version of the lambda.</source>
          <target state="translated">コンパイルされたバージョンのラムダを含んでいるデリゲート。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> property of the result.</source>
          <target state="translated">結果の <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Body" /&gt;</ph> プロパティ。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> property of the result.</source>
          <target state="translated">結果の <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.LambdaExpression.Parameters" /&gt;</ph> プロパティ。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>Creates a new expression that is like this one, but using the supplied children.</source>
          <target state="translated">これに似た式ですが、指定された子を使用する、新しい式を作成します。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>If all of the children are the same, it will return this expression.</source>
          <target state="translated">すべての子が同じである場合、この式を返します。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.Expression`1.Update(System.Linq.Expressions.Expression,System.Collections.Generic.IEnumerable{System.Linq.Expressions.ParameterExpression})">
          <source>This expression if no children are changed or an expression with the updated children.</source>
          <target state="translated">子が変更されていない場合はこの式。あるいは、更新された子を持つ式。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>