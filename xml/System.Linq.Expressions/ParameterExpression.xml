<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ParameterExpression.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac571b656fc9c41140d50c77b45eb13c3647fd8669b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">71b656fc9c41140d50c77b45eb13c3647fd8669b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-1.0,netstandard-1.1,netstandard-1.2,netstandard-1.3,netstandard-1.4,netstandard-1.6,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Linq.Expressions.ParameterExpression">
          <source>Represents a named parameter expression.</source>
          <target state="translated">名前付きパラメーター式を表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ParameterExpression">
          <source>Use the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Parameter%2A&gt;</ph> factory method to create a <ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph>.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.Parameter%2A&gt;</ph>ファクトリ メソッドを作成、<ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ParameterExpression">
          <source>The value of the <ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph> property of a <ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph> object is <ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Parameter&gt;</ph>.</source>
          <target state="translated">値、<ph id="ph1">&lt;xref:System.Linq.Expressions.Expression.NodeType%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph>オブジェクトが<ph id="ph3">&lt;xref:System.Linq.Expressions.ExpressionType.Parameter&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Linq.Expressions.ParameterExpression">
          <source>The following example demonstrates how to create a <ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph> object that prints the value of a <ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph> object by using the <ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Parameter%2A&gt;</ph> method.</source>
          <target state="translated">次の例で作成する方法、<ph id="ph1">&lt;xref:System.Linq.Expressions.MethodCallExpression&gt;</ph>オブジェクトの値を出力、<ph id="ph2">&lt;xref:System.Linq.Expressions.ParameterExpression&gt;</ph>オブジェクトを使用して、<ph id="ph3">&lt;xref:System.Linq.Expressions.Expression.Parameter%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The visitor to visit this node with.</source>
          <target state="translated">このノードを走査するビジター。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Dispatches to the specific visit method for this node type.</source>
          <target state="translated">このノード型の特定の Visit メソッドにデスパッチします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>For example, <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> calls the <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph>.</source>
          <target state="translated">たとえば、<ph id="ph1">&lt;see cref="T:System.Linq.Expressions.MethodCallExpression" /&gt;</ph> は <ph id="ph2">&lt;see cref="M:System.Linq.Expressions.ExpressionVisitor.VisitMethodCall(System.Linq.Expressions.MethodCallExpression)" /&gt;</ph> を呼び出します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>The result of visiting this node.</source>
          <target state="translated">このノードの走査結果。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>This default implementation for <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph> nodes calls <ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">この既定の実装の<ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionType.Extension&gt;</ph>ノード呼び出し<ph id="ph2">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>Override this method to call into a more specific method on a derived visitor class of the <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph> class.</source>
          <target state="translated">訪問者の派生クラスで複数の特定のメソッドを呼び出すには、このメソッドをオーバーライドして、<ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Linq.Expressions.ParameterExpression.Accept(System.Linq.Expressions.ExpressionVisitor)">
          <source>However, it should still support unknown visitors by calling <ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>.</source>
          <target state="translated">ただし、サポートすることがまだ不明な訪問者を呼び出して<ph id="ph1">&lt;xref:System.Linq.Expressions.ExpressionVisitor.VisitExtension%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ParameterExpression.IsByRef">
          <source>Indicates that this <bpt id="p1">&lt;c&gt;</bpt>ParameterExpression<ept id="p1">&lt;/c&gt;</ept> is to be treated as a <ph id="ph1">&lt;see langword="ByRef" /&gt;</ph> parameter.</source>
          <target state="translated">この <bpt id="p1">&lt;c&gt;</bpt>ParameterExpression<ept id="p1">&lt;/c&gt;</ept> が <ph id="ph1">&lt;see langword="ByRef" /&gt;</ph> パラメーターとして扱われることを示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ParameterExpression.IsByRef">
          <source>True if this <bpt id="p1">&lt;c&gt;</bpt>ParameterExpression<ept id="p1">&lt;/c&gt;</ept> is a <ph id="ph1">&lt;see langword="ByRef" /&gt;</ph> parameter, otherwise false.</source>
          <target state="translated">この場合は true。 <bpt id="p1">&lt;c&gt;</bpt>ParameterExpression<ept id="p1">&lt;/c&gt;</ept>は、<ph id="ph1">&lt;see langword="ByRef" /&gt;</ph>パラメーター、それ以外の場合は false。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ParameterExpression.Name">
          <source>Gets the name of the parameter or variable.</source>
          <target state="translated">パラメーターまたは変数の名前を取得します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ParameterExpression.Name">
          <source>A <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph> that contains the name of the parameter.</source>
          <target state="translated">パラメーター名を表す <ph id="ph1">&lt;see cref="T:System.String" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ParameterExpression.NodeType">
          <source>Returns the node type of this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph>.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> のノード型を返します。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ParameterExpression.NodeType">
          <source>The <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph> that represents this expression.</source>
          <target state="translated">この式を表す <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.ExpressionType" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="P:System.Linq.Expressions.ParameterExpression.Type">
          <source>Gets the static type of the expression that this <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> represents.</source>
          <target state="translated">この <ph id="ph1">&lt;see cref="T:System.Linq.Expressions.Expression" /&gt;</ph> が表す式の静的な型を取得します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Linq.Expressions.ParameterExpression.Type">
          <source>The <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ParameterExpression.Type" /&gt;</ph> that represents the static type of the expression.</source>
          <target state="translated">式の静的な型を表す <ph id="ph1">&lt;see cref="P:System.Linq.Expressions.ParameterExpression.Type" /&gt;</ph>。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>