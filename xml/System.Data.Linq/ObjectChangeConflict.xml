<Type Name="ObjectChangeConflict" FullName="System.Data.Linq.ObjectChangeConflict">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d2f9a9e022c6d457598d9ad7be9b60d7f6a37a1e" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36689266" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ObjectChangeConflict" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ObjectChangeConflict extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.ObjectChangeConflict" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ObjectChangeConflict" />
  <TypeSignature Language="C++ CLI" Value="public ref class ObjectChangeConflict sealed" />
  <TypeSignature Language="F#" Value="type ObjectChangeConflict = class" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>1 つまたは複数のオプティミスティック同時実行競合がある更新の試行を表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このシナリオでは、データベース内の値は、クライアントによる最後の読み取り以降に更新されているために失敗した更新の試行です。  
  
 次の例では、競合しているオブジェクトに関する情報を取得する方法を示します。  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.objectchangeconflict/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.objectchangeconflict/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="IsDeleted">
      <MemberSignature Language="C#" Value="public bool IsDeleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDeleted" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ObjectChangeConflict.IsDeleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDeleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDeleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDeleted : bool" Usage="System.Data.Linq.ObjectChangeConflict.IsDeleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>競合しているオブジェクトがデータベースから削除されているかどうかを示す値を取得します。</summary>
        <value>オブジェクトが削除されている場合は <see langword="True" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsResolved">
      <MemberSignature Language="C#" Value="public bool IsResolved { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsResolved" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ObjectChangeConflict.IsResolved" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsResolved As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsResolved { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsResolved : bool" Usage="System.Data.Linq.ObjectChangeConflict.IsResolved" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このオブジェクトの競合が既に解決されているかどうかを示す値を取得します。</summary>
        <value>競合が解決されている場合は <see langword="True" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは読み取り専用と、競合が解決済みとして自動的に更新します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberConflicts">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Linq.MemberChangeConflict&gt; MemberConflicts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.Data.Linq.MemberChangeConflict&gt; MemberConflicts" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ObjectChangeConflict.MemberConflicts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberConflicts As ReadOnlyCollection(Of MemberChangeConflict)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Data::Linq::MemberChangeConflict ^&gt; ^ MemberConflicts { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::Data::Linq::MemberChangeConflict ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberConflicts : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Linq.MemberChangeConflict&gt;" Usage="System.Data.Linq.ObjectChangeConflict.MemberConflicts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.Data.Linq.MemberChangeConflict&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>更新が失敗する原因となった、メンバーのすべての競合のコレクションを取得します。</summary>
        <value>メンバーの競合のコレクション。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Object">
      <MemberSignature Language="C#" Value="public object Object { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Object" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.ObjectChangeConflict.Object" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Object As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Object { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Object : obj" Usage="System.Data.Linq.ObjectChangeConflict.Object" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>競合しているオブジェクトを取得します。</summary>
        <value>競合しているオブジェクト。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Resolve">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>メンバーの競合を解決します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public void Resolve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resolve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ObjectChangeConflict.Resolve" />
      <MemberSignature Language="VB.NET" Value="Public Sub Resolve ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resolve();" />
      <MemberSignature Language="F#" Value="member this.Resolve : unit -&gt; unit" Usage="objectChangeConflict.Resolve " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の値を保持し、最新のデータベースの値に一致させるためにベースラインの元の値をリセットすることで、メンバーの競合を解決します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public void Resolve (System.Data.Linq.RefreshMode refreshMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resolve(valuetype System.Data.Linq.RefreshMode refreshMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resolve(System::Data::Linq::RefreshMode refreshMode);" />
      <MemberSignature Language="F#" Value="member this.Resolve : System.Data.Linq.RefreshMode -&gt; unit" Usage="objectChangeConflict.Resolve refreshMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Linq.RefreshMode" />
      </Parameters>
      <Docs>
        <param name="refreshMode">
          <see cref="T:System.Data.Linq.RefreshMode" /> の適切なオプション。</param>
        <summary>指定した <see cref="T:System.Data.Linq.RefreshMode" /> を使用して、メンバーの競合を解決します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の例のさまざまな値を使用してどのような結果が作成される<xref:System.Data.Linq.RefreshMode>です。  
  
   
  
## Examples  
 次の例では、データベースから値を持つ現在の値が上書きされます。  
  
 [!code-csharp[System.Data.Linq.RefreshMode#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.refreshmode/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.RefreshMode#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.refreshmode/vb/module1.vb#1)]  
  
 次の例では、データベースから取得した値を元の値を交換する方法を示します。 現在の値は変更されません。  
  
 [!code-csharp[System.Data.Linq.RefreshMode#2](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.refreshmode/cs/program.cs#2)]
 [!code-vb[System.Data.Linq.RefreshMode#2](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.refreshmode/vb/module1.vb#2)]  
  
 次の例では、現在の値が変更されましたが、その他の値をデータベース内の値の更新は保持します。  
  
 [!code-csharp[System.Data.Linq.RefreshMode#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.refreshmode/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.RefreshMode#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.refreshmode/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Resolve">
      <MemberSignature Language="C#" Value="public void Resolve (System.Data.Linq.RefreshMode refreshMode, bool autoResolveDeletes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Resolve(valuetype System.Data.Linq.RefreshMode refreshMode, bool autoResolveDeletes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.ObjectChangeConflict.Resolve(System.Data.Linq.RefreshMode,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Resolve(System::Data::Linq::RefreshMode refreshMode, bool autoResolveDeletes);" />
      <MemberSignature Language="F#" Value="member this.Resolve : System.Data.Linq.RefreshMode * bool -&gt; unit" Usage="objectChangeConflict.Resolve (refreshMode, autoResolveDeletes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="refreshMode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="autoResolveDeletes" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="refreshMode">
          <see cref="T:System.Data.Linq.RefreshMode" /> の適切なオプション。</param>
        <param name="autoResolveDeletes">
          <see langword="true" /> の場合、既にデータベースには存在しない変更されたオブジェクトにより発生する競合は自動的に解決されます。</param>
        <summary>現在の値を保持し、ベースラインの元の値をリセットすることで、メンバーの競合を解決します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>