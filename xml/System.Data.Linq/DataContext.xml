<Type Name="DataContext" FullName="System.Data.Linq.DataContext">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2c13850ab085a0fd357bd7d4747b2ccdb675c703" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39104682" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class DataContext : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DataContext extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.DataContext" />
  <TypeSignature Language="VB.NET" Value="Public Class DataContext&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataContext : IDisposable" />
  <TypeSignature Language="F#" Value="type DataContext = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="1ce9b-101">LINQ to SQL フレームワークのメイン エントリ ポイントを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="1ce9b-101">Represents the main entry point for the LINQ to SQL framework.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-102"><xref:System.Data.Linq.DataContext>データベース接続経由でマップされているすべてのエンティティのソースです。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-102">The <xref:System.Data.Linq.DataContext> is the source of all entities mapped over a database connection.</span></span> <span data-ttu-id="1ce9b-103">取得したすべてのエンティティに対して行った変更を追跡し、"identity はキャッシュを保持"によって表されるエンティティが 1 つ以上の時間を取得することの保証が同じオブジェクト インスタンスを使用します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-103">It tracks changes that you made to all retrieved entities and maintains an "identity cache" that guarantees that entities retrieved more than one time are represented by using the same object instance.</span></span>  
  
 <span data-ttu-id="1ce9b-104">一般に、<xref:System.Data.Linq.DataContext>一方、アプリケーションは、その用語を定義します。 1 つ"の作業ユニット"の最後のインスタンスは設計されています。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-104">In general, a <xref:System.Data.Linq.DataContext> instance is designed to last for one "unit of work" however your application defines that term.</span></span> <span data-ttu-id="1ce9b-105">A<xref:System.Data.Linq.DataContext>は軽量で、作成するコストではありません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-105">A <xref:System.Data.Linq.DataContext> is lightweight and is not expensive to create.</span></span> <span data-ttu-id="1ce9b-106">一般的な[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]アプリケーションを作成します<xref:System.Data.Linq.DataContext>メソッドのスコープでの論理セットを表す有効期間が短いクラスのメンバーとしてインスタンスのデータベース操作に関連します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-106">A typical [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] application creates <xref:System.Data.Linq.DataContext> instances at method scope or as a member of short-lived classes that represent a logical set of related database operations.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-107">
            <see cref="T:System.Data.Linq.DataContext" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-107">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class.</span>
          </span>
          <span data-ttu-id="1ce9b-108">接続文字列として、ADO.NET 接続文字列を使用できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-108">The connection string you use can be an ADO.NET connection string.</span>
          </span>
          <span data-ttu-id="1ce9b-109">SQL Server Express ファイルまたは SQL Server Compact Edition ファイルにファイル名を指定することもできます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-109">You can also specify a filename to a SQL Server Express or SQL Server Compact file.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (System.Data.IDbConnection connection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.IDbConnection connection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As IDbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::Data::IDbConnection ^ connection);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : System.Data.IDbConnection -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext connection" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.IDbConnection" />
      </Parameters>
      <Docs>
        <param name="connection">
          <span data-ttu-id="1ce9b-110">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] で使用される接続。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-110">The connection used by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-111">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] で使用される接続を参照して、<see cref="T:System.Data.Linq.DataContext" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-111">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing the connection used by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-112">A<xref:System.Data.Linq.DataContext>閉じた接続または接続文字列を指定する場合、必要に応じて、データベース接続を開いたり閉じたりします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-112">A <xref:System.Data.Linq.DataContext> opens and closes a database connection as needed if you provide a closed connection or a connection string.</span></span> <span data-ttu-id="1ce9b-113">一般に、することはありませんを呼び出す`Dispose`上、<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-113">In general, you should never have to call `Dispose` on a <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="1ce9b-114">開いている接続を提供する場合、<xref:System.Data.Linq.DataContext>閉じますはありません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-114">If you provide an open connection, the <xref:System.Data.Linq.DataContext> will not close it.</span></span> <span data-ttu-id="1ce9b-115">そのため、インスタンス化は、<xref:System.Data.Linq.DataContext>に対して開いている接続でこれを行うには相応の理由がないです。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-115">Therefore, do not instantiate a <xref:System.Data.Linq.DataContext> with an open connection unless you have a good reason to do this.</span></span> <span data-ttu-id="1ce9b-116"><xref:System.Transactions> 、トランザクション、<xref:System.Data.Linq.DataContext>開くまたは昇格を回避するために、接続を閉じるされません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-116">In a <xref:System.Transactions> transaction, a <xref:System.Data.Linq.DataContext> will not open or close a connection to avoid promotion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.IDbConnection connection, class System.Data.Linq.Mapping.MappingSource mapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.Data.IDbConnection,System.Data.Linq.Mapping.MappingSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connection As IDbConnection, mapping As MappingSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::Data::IDbConnection ^ connection, System::Data::Linq::Mapping::MappingSource ^ mapping);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : System.Data.IDbConnection * System.Data.Linq.Mapping.MappingSource -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext (connection, mapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="connection" Type="System.Data.IDbConnection" />
        <Parameter Name="mapping" Type="System.Data.Linq.Mapping.MappingSource" />
      </Parameters>
      <Docs>
        <param name="connection">
          <span data-ttu-id="1ce9b-117">.NET Framework によって使用される接続。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-117">The connection used by the .NET Framework.</span>
          </span>
        </param>
        <param name="mapping">
          <span data-ttu-id="1ce9b-118">マッピングのためのソース。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-118">A source for mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-119">接続およびマップ ソースを参照して、<see cref="T:System.Data.Linq.DataContext" /> クラスの新規のインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-119">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a connection and a mapping source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (string fileOrServerOrConnection, System.Data.Linq.Mapping.MappingSource mapping);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileOrServerOrConnection, class System.Data.Linq.Mapping.MappingSource mapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.String,System.Data.Linq.Mapping.MappingSource)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileOrServerOrConnection As String, mapping As MappingSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::String ^ fileOrServerOrConnection, System::Data::Linq::Mapping::MappingSource ^ mapping);" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : string * System.Data.Linq.Mapping.MappingSource -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext (fileOrServerOrConnection, mapping)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileOrServerOrConnection" Type="System.String" />
        <Parameter Name="mapping" Type="System.Data.Linq.Mapping.MappingSource" />
      </Parameters>
      <Docs>
        <param name="fileOrServerOrConnection">
          <span data-ttu-id="1ce9b-120">この引数には、次のいずれかを指定できます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-120">This argument can be any one of the following:</span>
          </span>
          <span data-ttu-id="1ce9b-121">SQL Server Express データベースを格納しているファイルの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-121">The name of a file where a SQL Server Express database resides.</span>
          </span>
          <span data-ttu-id="1ce9b-122">データベースが存在するサーバーの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-122">The name of a server where a database is present.</span>
          </span>
          <span data-ttu-id="1ce9b-123">この場合、ユーザーの既定のデータベースがプロバイダーで使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-123">In this case the provider uses the default database for a user.</span>
          </span>
          <span data-ttu-id="1ce9b-124">完全な接続文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-124">A complete connection string.</span>
          </span> [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="1ce9b-125"> はプロバイダーに渡すだけで、文字列は変更しません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-125"> just passes the string to the provider without modification.</span></span></param>
        <param name="mapping">
          <span data-ttu-id="1ce9b-126">マッピングのためのソース。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-126">A source for mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-127">ファイル ソースおよびマップ ソースを参照して、<see cref="T:System.Data.Linq.DataContext" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-127">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source and a mapping source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public DataContext (string fileOrServerOrConnection);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileOrServerOrConnection) cil managed" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileOrServerOrConnection As String)" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::String ^ fileOrServerOrConnection);" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="C#" Value="public DataContext (string connectionString);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string connectionString) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.#ctor(System.String)" FrameworkAlternate="xamarinmac-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (connectionString As String)" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; DataContext(System::String ^ connectionString);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="new System.Data.Linq.DataContext : string -&gt; System.Data.Linq.DataContext" Usage="new System.Data.Linq.DataContext connectionString" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileOrServerOrConnection" Type="System.String" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-3.5;netframework-4.0" />
        <Parameter Name="connectionString" Type="System.String" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="fileOrServerOrConnection">
          <span data-ttu-id="1ce9b-128">この引数には、次のいずれかを指定できます: SQL Server Express データベースを格納しているファイルの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-128">This argument can be any one of the following: The name of a file where a SQL Server Express database resides.</span>
          </span>
          <span data-ttu-id="1ce9b-129">データベースが存在するサーバーの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-129">The name of a server where a database is present.</span>
          </span>
          <span data-ttu-id="1ce9b-130">この場合、ユーザーの既定のデータベースがプロバイダーで使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-130">In this case the provider uses the default database for a user.</span>
          </span>
          <span data-ttu-id="1ce9b-131">完全な接続文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-131">A complete connection string.</span>
          </span>
          <span data-ttu-id="1ce9b-132">LINQ to SQL はプロバイダーに渡すだけで、文字列は変更しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-132">LINQ to SQL just passes the string to the provider without modification.</span>
          </span>
        </param>
        <param name="connectionString">
          <span data-ttu-id="1ce9b-133">この引数には、次のいずれかを指定できます: SQL Server Express データベースを格納しているファイルの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-133">This argument can be any one of the following: The name of a file where a SQL Server Express database resides.</span>
          </span>
          <span data-ttu-id="1ce9b-134">データベースが存在するサーバーの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-134">The name of a server where a database is present.</span>
          </span>
          <span data-ttu-id="1ce9b-135">この場合、ユーザーの既定のデータベースがプロバイダーで使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-135">In this case the provider uses the default database for a user.</span>
          </span>
          <span data-ttu-id="1ce9b-136">完全な接続文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-136">A complete connection string.</span>
          </span>
          <span data-ttu-id="1ce9b-137">LINQ to SQL はプロバイダーに渡すだけで、文字列は変更しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-137">LINQ to SQL just passes the string to the provider without modification.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-138">ファイル ソースを参照して、<see cref="T:System.Data.Linq.DataContext" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-138">Initializes a new instance of the <see cref="T:System.Data.Linq.DataContext" /> class by referencing a file source.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeConflicts">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ChangeConflictCollection ChangeConflicts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.ChangeConflictCollection ChangeConflicts" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.ChangeConflicts" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ChangeConflicts As ChangeConflictCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::ChangeConflictCollection ^ ChangeConflicts { System::Data::Linq::ChangeConflictCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ChangeConflicts : System.Data.Linq.ChangeConflictCollection" Usage="System.Data.Linq.DataContext.ChangeConflicts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ChangeConflictCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-139">
            <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> が呼び出されたときに同時実行の競合を発生させたオブジェクトのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-139">Gets a collection of objects that caused concurrency conflicts when <see cref="M:System.Data.Linq.DataContext.SubmitChanges" /> was called.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-140">同時実行の競合を引き起こしたオブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-140">A collection of objects that caused concurrency conflicts.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-141">どのコレクション反復処理できる競合情報を取得するのには、次の例です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-141">The following example shows how the collection can be iterated over to retrieve conflict information.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.objectchangeconflict/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.ObjectChangeConflict#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.objectchangeconflict/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandTimeout">
      <MemberSignature Language="C#" Value="public int CommandTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CommandTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.CommandTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property CommandTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CommandTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.CommandTimeout : int with get, set" Usage="System.Data.Linq.DataContext.CommandTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-142">既定のタイムアウト期限ではクエリがタイムアウトする場合に、クエリのタイムアウト期限の値を増やす整数値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-142">Gets or sets a value that increases the time-out period for queries that would otherwise time out during the default time-out period.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-143">既定のタイムアウト期限ではクエリがタイムアウトする場合に、クエリのタイムアウト期限の値を増やす整数値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-143">An integer value that increases the time-out period for queries that would otherwise time out during the default time-out period.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-144">このプロパティを取得または生成されたコマンドを実行するために使用するコマンドのタイムアウトの設定 (`IDbCommands`)。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-144">This property gets or sets the command time-out used to execute generated commands (`IDbCommands`).</span></span> <span data-ttu-id="1ce9b-145">詳細については、「<xref:System.Data.IDbCommand.CommandTimeout%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-145">For more information, see <xref:System.Data.IDbCommand.CommandTimeout%2A>.</span></span>  
  
 <span data-ttu-id="1ce9b-146">ときにこのプロパティが設定されていない、既定値の<xref:System.Data.IDbCommand.CommandTimeout%2A>クエリ コマンドの実行に使用します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-146">When this property is not set, the default value of <xref:System.Data.IDbCommand.CommandTimeout%2A> is used for query command execution.</span></span> <span data-ttu-id="1ce9b-147">この既定値は、記憶域プロバイダーによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-147">This default value is set by the storage provider.</span></span> <span data-ttu-id="1ce9b-148">この値が 0 以外の値に設定されている場合に、一部のプロバイダーが例外をスロー可能性がありますに注意してください。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-148">Note that some providers may throw exceptions if this value is set to a non-zero value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Connection">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbConnection Connection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbConnection Connection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Connection" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Connection As DbConnection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbConnection ^ Connection { System::Data::Common::DbConnection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Connection : System.Data.Common.DbConnection" Usage="System.Data.Linq.DataContext.Connection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbConnection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-149">フレームワークによって使用される接続を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-149">Gets the connection used by the framework.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-150">フレームワークによって使用される接続。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-150">The connection used by the framework.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-151">このプロパティを使用して、リレーショナルの ADO.NET コードと相互運用することができます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-151">You can use this property to interoperate with relational ADO.NET code.</span></span>  
  
 <span data-ttu-id="1ce9b-152">ユーザーが明示的に開いている場合を除き、返される接続は閉じられます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-152">The returned connection will be closed unless it has been explicitly opened by the user.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDatabase">
      <MemberSignature Language="C#" Value="public void CreateDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.CreateDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateDatabase();" />
      <MemberSignature Language="F#" Value="member this.CreateDatabase : unit -&gt; unit" Usage="dataContext.CreateDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-153">サーバー上にデータベースを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-153">Creates a database on the server.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-154">データベースの名前は、次のアルゴリズムを使用して派生します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-154">The name of the database is derived by using the following algorithm:</span></span>  
  
1. <span data-ttu-id="1ce9b-155">データベースに接続文字列で識別される場合は、その名前が使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-155">If a database is identified in the connection string, its name is used.</span></span>  
1. <span data-ttu-id="1ce9b-156">場合、<xref:System.Data.Linq.Mapping.DatabaseAttribute>属性が存在する場合は、その<xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A>プロパティは、データベースの名前として使用されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-156">If a <xref:System.Data.Linq.Mapping.DatabaseAttribute> attribute is present, its <xref:System.Data.Linq.Mapping.DatabaseAttribute.Name%2A> property is used as the name of the database.</span></span>  
1. <span data-ttu-id="1ce9b-157">接続文字列と厳密に型指定されたデータベースのタグがない場合は<xref:System.Data.Linq.DataContext>を使用すると同じ名前を持つデータベース、<xref:System.Data.Linq.DataContext>クラスの継承を作成します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-157">If there is no database tag in the connection string and a strongly typed <xref:System.Data.Linq.DataContext> is used, a database that has the same name as the <xref:System.Data.Linq.DataContext> inheriting class is created.</span></span>  
1. <span data-ttu-id="1ce9b-158">場合は、弱い型指定された<xref:System.Data.Linq.DataContext>が使用すると、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-158">If a weakly typed <xref:System.Data.Linq.DataContext> is used, an exception is thrown.</span></span>  
1. <span data-ttu-id="1ce9b-159">場合、<xref:System.Data.Linq.DataContext>が作成されたファイル名を使用すると、そのファイル名に対応するデータベースが作成されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-159">If the <xref:System.Data.Linq.DataContext> has been created by using a file name, the database corresponding to that file name is created.</span></span>  
     
  
## Examples  
 <span data-ttu-id="1ce9b-160">次のコードでは、一時的なデータベースを設定し、それを削除する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-160">The following code shows how to set up a temporary database and then remove it.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.DataContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMethodCallQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="protected internal System.Linq.IQueryable&lt;TResult&gt; CreateMethodCallQuery&lt;TResult&gt; (object instance, System.Reflection.MethodInfo methodInfo, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance class System.Linq.IQueryable`1&lt;!!TResult&gt; CreateMethodCallQuery&lt;TResult&gt;(object instance, class System.Reflection.MethodInfo methodInfo, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.CreateMethodCallQuery``1(System.Object,System.Reflection.MethodInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Linq::IQueryable&lt;TResult&gt; ^ CreateMethodCallQuery(System::Object ^ instance, System::Reflection::MethodInfo ^ methodInfo, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.CreateMethodCallQuery : obj * System.Reflection.MethodInfo * obj[] -&gt; System.Linq.IQueryable&lt;'Result&gt;" Usage="dataContext.CreateMethodCallQuery (instance, methodInfo, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1ce9b-161">返されるコレクション内の要素の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-161">The type of the elements in the returned collection.</span>
          </span>
        </typeparam>
        <param name="instance">
          <span data-ttu-id="1ce9b-162">メソッド呼び出しのインスタンス (現在のオブジェクト)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-162">The instance of the method invocation (the current object).</span>
          </span>
        </param>
        <param name="methodInfo">
          <span data-ttu-id="1ce9b-163">データベース メソッドに対応する CLR メソッドを指定する <see cref="T:System.Reflection.MethodInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-163">The <see cref="T:System.Reflection.MethodInfo" /> that identifies the CLR method that corresponds to a database method.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="1ce9b-164">コマンドに渡すパラメーターの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-164">The array of parameters to be passed to the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-165">指定した CLR メソッドに関連付けられているテーブル値データベース関数を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-165">Executes the table-valued database function associated with the specified CLR method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-166">データベース クエリによって返される結果値のコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-166">A collection of resultant values returned by the database query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-167"><xref:System.Data.Linq.DataContext.CreateMethodCallQuery%2A>メソッドは自動的に生成されたコードで使用し、データベース関数をプロキシとして機能します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-167">The <xref:System.Data.Linq.DataContext.CreateMethodCallQuery%2A> method is used in automatically generated code and acts as a proxy to database functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DatabaseExists">
      <MemberSignature Language="C#" Value="public bool DatabaseExists ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool DatabaseExists() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.DatabaseExists" />
      <MemberSignature Language="VB.NET" Value="Public Function DatabaseExists () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool DatabaseExists();" />
      <MemberSignature Language="F#" Value="member this.DatabaseExists : unit -&gt; bool" Usage="dataContext.DatabaseExists " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-168">関連するデータベースを開くことができるかどうかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-168">Determines whether the associated database can be opened.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-169">指定したデータベースを開くことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-169">
              <see langword="true" /> if the specified database can be opened; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-170">このメソッドで接続を使用して、<xref:System.Data.Linq.DataContext.Connection%2A>プロパティを関連付けられたデータベースを開こうとします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-170">This method uses the connection in the <xref:System.Data.Linq.DataContext.Connection%2A> property to attempt to open the associated database.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ce9b-171">次の例では、このメソッドを使用して、データベースが既に存在するかどうか確認します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-171">The following example uses this method to determine whether a database already exists.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.DataContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeferredLoadingEnabled">
      <MemberSignature Language="C#" Value="public bool DeferredLoadingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DeferredLoadingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.DeferredLoadingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property DeferredLoadingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DeferredLoadingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DeferredLoadingEnabled : bool with get, set" Usage="System.Data.Linq.DataContext.DeferredLoadingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-172">1 対多または 1 対 1 のリレーションシップを遅延読み込みするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-172">Gets or sets a value that indicates whether to delay-load one-to-many or one-to-one relationships.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-173">遅延読み込みが有効の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-173">
              <see langword="true" /> if deferred loading is enabled; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-174">リレーションシップが一対一、一対多である場合、空のコレクションが返される場合、コードからのアクセスをする null これらのリレーションシップのいずれかが返されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-174">When the code accesses one of these relationships, null is returned if the relationship is one-to-one, and an empty collection is returned if it is one-to-many.</span></span> <span data-ttu-id="1ce9b-175">リレーションシップを設定しても入力できる、<xref:System.Data.Linq.DataContext.LoadOptions%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-175">The relationships can still be filled by setting the <xref:System.Data.Linq.DataContext.LoadOptions%2A> property.</span></span>  
  
 <span data-ttu-id="1ce9b-176">このプロパティの主なシナリオでは、オブジェクト モデルの一部を抽出して (たとえば、Web サービス) に送信できるようにします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-176">The main scenario for this property is to enable you to extract a piece of the object model and send it out (for example, to a Web service).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ce9b-177">このプロパティ設定されている場合`false`クエリが実行された後、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-177">If this property is set to `false` after a query has been executed, an exception is thrown.</span></span> <span data-ttu-id="1ce9b-178">参照してください、**有効なモード**詳細については後述します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-178">See the **Valid Modes** section below for more information.</span></span>  
  
## <a name="valid-modes"></a><span data-ttu-id="1ce9b-179">有効なモード</span><span class="sxs-lookup"><span data-stu-id="1ce9b-179">Valid modes</span></span>  
 <span data-ttu-id="1ce9b-180">遅延読み込みでは、オブジェクトの追跡が必要です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-180">Deferred loading requires object tracking.</span></span> <span data-ttu-id="1ce9b-181">次の 3 つのモードのみでは有効です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-181">Only the following three modes are valid:</span></span>  
  
-   <span data-ttu-id="1ce9b-182"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `false`.</span><span class="sxs-lookup"><span data-stu-id="1ce9b-182"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `false`.</span></span> <span data-ttu-id="1ce9b-183"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> 無視され、推論`false`します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-183"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> is ignored and inferred to be `false`.</span></span> <span data-ttu-id="1ce9b-184">この動作は読み取り専用<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-184">This behavior corresponds to a read-only <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="1ce9b-185"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `true`.</span><span class="sxs-lookup"><span data-stu-id="1ce9b-185"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> = `true`.</span></span> <span data-ttu-id="1ce9b-186"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> = `false`.</span><span class="sxs-lookup"><span data-stu-id="1ce9b-186"><xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> = `false`.</span></span> <span data-ttu-id="1ce9b-187">このような状況に対応する、<xref:System.Data.Linq.DataContext>を使用して、オブジェクト グラフを読み込むユーザーできる<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>がディレクティブでは遅延読み込みを有効になりません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-187">This situation corresponds to a <xref:System.Data.Linq.DataContext> that allows users to load an object graph by using <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> directives, but it does not enable deferred loading.</span></span>  
  
-   <span data-ttu-id="1ce9b-188">設定する`true`します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-188">Both are set to `true`.</span></span> <span data-ttu-id="1ce9b-189">既定値です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-189">This is the default.</span></span>  
  
 <span data-ttu-id="1ce9b-190">クエリが実行された後は、フラグを変更できません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-190">The flags may not be changed after a query has been executed.</span></span> <span data-ttu-id="1ce9b-191">使用して最初のクエリの実行後に変更<xref:System.Data.Linq.DataContext>例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-191">Any change after the execution of the first query that uses that <xref:System.Data.Linq.DataContext> throws an exception.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteDatabase">
      <MemberSignature Language="C#" Value="public void DeleteDatabase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteDatabase() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.DeleteDatabase" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteDatabase ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteDatabase();" />
      <MemberSignature Language="F#" Value="member this.DeleteDatabase : unit -&gt; unit" Usage="dataContext.DeleteDatabase " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-192">関連付けられているデータベースを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-192">Deletes the associated database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-193">このメソッドで接続を使用して、<xref:System.Data.Linq.DataContext.Connection%2A>プロパティを削除するデータベースを識別します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-193">This method uses the connection in the <xref:System.Data.Linq.DataContext.Connection%2A> property to identify the database to be deleted.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ce9b-194">次の例では、一時的に作成されたデータベースを削除する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-194">The following example shows how to delete a database that has been temporarily created.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#1)]
 [!code-vb[System.Data.Linq.DataContext#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Data.Linq.DataContext.Dispose" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-195">
            <see cref="T:System.Data.Linq.DataContext" /> クラスによって使用されているリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-195">Releases the resources used by the <see cref="T:System.Data.Linq.DataContext" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="dataContext.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-196">
            <see cref="T:System.Data.Linq.DataContext" /> クラスの現在のインスタンスによって使用されているすべてのリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-196">Releases all resources used by the current instance of the <see cref="T:System.Data.Linq.DataContext" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="dataContext.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="1ce9b-197">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-197">
              <see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-198">使用されるアンマネージ リソースを解放、<see cref="T:System.Data.Linq.DataContext" />クラスし、オプションでマネージ リソースも解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-198">Releases the unmanaged resources used by the <see cref="T:System.Data.Linq.DataContext" /> class and optionally releases the managed resource.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteCommand">
      <MemberSignature Language="C#" Value="public int ExecuteCommand (string command, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ExecuteCommand(string command, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteCommand(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteCommand (command As String, ParamArray parameters As Object()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ExecuteCommand(System::String ^ command, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteCommand : string * obj[] -&gt; int" Usage="dataContext.ExecuteCommand (command, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="command">
          <span data-ttu-id="1ce9b-199">実行する SQL コマンド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-199">The SQL command to be executed.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="1ce9b-200">コマンドに渡すパラメーターの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-200">The array of parameters to be passed to the command.</span>
          </span>
          <span data-ttu-id="1ce9b-201">以下の動作に注意してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-201">Note the following behavior:</span>
          </span>
          <span data-ttu-id="1ce9b-202">配列内のオブジェクトの数が、コマンド文字列で特定された最大数より小さい場合、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-202">If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</span>
          </span>
          <span data-ttu-id="1ce9b-203">配列にコマンド文字列で参照されないオブジェクトが含まれている場合、例外はスローされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-203">If the array contains objects that are not referenced in the command string, no exception is thrown.</span>
          </span>
          <span data-ttu-id="1ce9b-204">パラメーターのいずれかが null の場合、<see langword="DBNull.Value" /> に変換されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-204">If any one of the parameters is null, it is converted to <see langword="DBNull.Value" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-205">データベース上で SQL コマンドを直接実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-205">Executes SQL commands directly on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-206">コマンドの実行によって変更された行の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-206">The number of rows modified by the executed command.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-207">このメソッドは、ケースのパススルー メカニズム、[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]は特定のシナリオを十分に提供しません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-207">This method is a pass-through mechanism for cases where [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not adequately provide for a particular scenario.</span></span>  
  
 <span data-ttu-id="1ce9b-208">コマンドの構文は、ADO.NET の作成に使用する構文とほぼ同じ`DataCommand`します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-208">The syntax for the command is almost the same as the syntax used to create an ADO.NET `DataCommand`.</span></span> <span data-ttu-id="1ce9b-209">唯一の違いは、パラメーターを指定する方法です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-209">The only difference is in how the parameters are specified.</span></span> <span data-ttu-id="1ce9b-210">具体的には、中かっこ ({...}) で囲み、パラメーターを指定し、それらを列挙の 0 から始まります。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-210">Specifically, you specify parameters by enclosing them in braces ({…}) and enumerate them starting from 0.</span></span> <span data-ttu-id="1ce9b-211">パラメーターは、パラメーター配列で均等に番号付きのオブジェクトに関連付けられます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-211">The parameter is associated with the equally numbered object in the parameters array.</span></span>  
  
 <span data-ttu-id="1ce9b-212">`ExecuteQuery` `ExecuteCommand`パラメーター置換の引数の変数の数を指定できます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-212">`ExecuteQuery` and `ExecuteCommand` allow you to specify a variable number of arguments for parameter substitution.</span></span> <span data-ttu-id="1ce9b-213">ExecuteQuery を呼び出すときに、パラメーターを指定するたとえば、\<TResult >:</span><span class="sxs-lookup"><span data-stu-id="1ce9b-213">For example, you can specify the parameters when invoking ExecuteQuery\<TResult>:</span></span>  
  
```  
db.ExecuteQuery<Customer>("select * from dbo.Customers where City = {0}", "London");  
```  
  
 <span data-ttu-id="1ce9b-214">また、別の例。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-214">And, another example:</span></span>  
  
```  
db.ExecuteCommand("UPDATE Products SET QuantityPerUnit = {0} WHERE ProductID = {1}", "24 boxes", 5);  
```  
  
 <span data-ttu-id="1ce9b-215">次の例では、接続を開き、SQL を渡す`UPDATE`SQL エンジンにコマンド。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-215">The following example opens a connection and passes a SQL `UPDATE` command to the SQL engine.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqCommunicatingWithDatabase#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqCommunicatingWithDatabase/cs/Program.cs#3)]
 [!code-vb[DLinqCommunicatingWithDatabase#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqCommunicatingWithDatabase/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDynamicDelete">
      <MemberSignature Language="C#" Value="protected internal void ExecuteDynamicDelete (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ExecuteDynamicDelete(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteDynamicDelete(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ExecuteDynamicDelete (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void ExecuteDynamicDelete(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteDynamicDelete : obj -&gt; unit" Usage="dataContext.ExecuteDynamicDelete entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="1ce9b-216">削除するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-216">The entity to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-217">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] に削除操作のための動的 SQL の生成と実行を行うタスクを再度代行させるために、削除用のオーバーライド メソッド内部で実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-217">Executes, inside delete override methods, to redelegate to [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] the task of generating and executing dynamic SQL for delete operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-218">以下を参照してください。<xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A></span><span class="sxs-lookup"><span data-stu-id="1ce9b-218">See <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDynamicInsert">
      <MemberSignature Language="C#" Value="protected internal void ExecuteDynamicInsert (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ExecuteDynamicInsert(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteDynamicInsert(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ExecuteDynamicInsert (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void ExecuteDynamicInsert(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteDynamicInsert : obj -&gt; unit" Usage="dataContext.ExecuteDynamicInsert entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="1ce9b-219">挿入するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-219">The entity to be inserted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-220">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] に挿入操作のための動的 SQL を生成し実行するタスクの処理を再度代行させるために、挿入用のオーバーライド メソッド内部で実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-220">Executes, inside insert override methods, to redelegate to [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] the task of generating and executing dynamic SQL for insert operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-221">次の考慮事項に注意してください。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-221">Note the following considerations:</span></span>  
  
-   <span data-ttu-id="1ce9b-222">使用に対しては、保護された修飾子をメソッドには、ためサブクラス化する必要があります<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-222">Because the method has a protected modifier, its use requires subclassing <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="1ce9b-223">この操作は内部で呼び出されない場合、例外がスローされます、<xref:System.Data.Linq.DataContext.SubmitChanges%2A>操作。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-223">An exception is thrown if this operation is not called inside a <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.</span></span> <span data-ttu-id="1ce9b-224">スタンドアロンの操作の対象外として呼び出されるものではありません、<xref:System.Data.Linq.DataContext.SubmitChanges%2A>操作。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-224">It is not intended to be called as a stand-alone operation outside the scope of a <xref:System.Data.Linq.DataContext.SubmitChanges%2A> operation.</span></span> <span data-ttu-id="1ce9b-225"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> 自体の呼び出しメソッドをオーバーライド実装されていてオーバーライド メソッド内部で呼び出される前のメソッドが対象としています。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-225"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> itself calls override methods if they are implemented and the previous methods are intended to be called inside the override methods.</span></span>  
  
-   <span data-ttu-id="1ce9b-226">正しいエンティティを渡すため、開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-226">It is the responsibility of the developer to pass in the correct entity.</span></span> <span data-ttu-id="1ce9b-227">実装は、渡されたエンティティが追跡されることを確認します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-227">The implementation verifies that the passed-in entity is tracked.</span></span> <span data-ttu-id="1ce9b-228">ただし、順序を維持し、または 2 回、同じエンティティに渡す、開発者の責任を勧めします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-228">However, it is the responsibility of the developer to maintain the order or pass in the same entity two times.</span></span>  
  
-   <span data-ttu-id="1ce9b-229">正しい動的 API を呼び出すと、開発者の役目です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-229">It is the responsibility of the developer to invoke the correct dynamic API.</span></span> <span data-ttu-id="1ce9b-230">たとえば、`Update`のみメソッドをオーバーライドして、<xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A>メソッドを呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-230">For example, in the `Update` override method, only the <xref:System.Data.Linq.DataContext.ExecuteDynamicUpdate%2A> method can be called.</span></span> <span data-ttu-id="1ce9b-231">呼び出した動的メソッドが対象の操作に一致するかどうかについて、[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] は、検出や検査は行いません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-231">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not detect or verify whether the invoked dynamic method matches the applicable operation.</span></span> <span data-ttu-id="1ce9b-232">結果は、適切でないメソッドが呼び出された場合、未定義 (などを呼び出す<xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A>を更新するオブジェクトの)。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-232">The results are undefined if an inapplicable method is called (for example, calling <xref:System.Data.Linq.DataContext.ExecuteDynamicDelete%2A> for an object to be updated).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteDynamicUpdate">
      <MemberSignature Language="C#" Value="protected internal void ExecuteDynamicUpdate (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void ExecuteDynamicUpdate(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteDynamicUpdate(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub ExecuteDynamicUpdate (entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void ExecuteDynamicUpdate(System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.ExecuteDynamicUpdate : obj -&gt; unit" Usage="dataContext.ExecuteDynamicUpdate entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="1ce9b-233">更新するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-233">The entity to be updated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-234">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] に更新操作のための動的 SQL の生成と実行を行うタスクの処理を再度代行させるために、更新用のオーバーライド メソッド内部で実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-234">Executes, inside update override methods, to redelegate to [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] the task of generating and executing dynamic SQL for update operations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-235">以下を参照してください。<xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A></span><span class="sxs-lookup"><span data-stu-id="1ce9b-235">See <xref:System.Data.Linq.DataContext.ExecuteDynamicInsert%2A>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteMethodCall">
      <MemberSignature Language="C#" Value="protected System.Data.Linq.IExecuteResult ExecuteMethodCall (object instance, System.Reflection.MethodInfo methodInfo, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance class System.Data.Linq.IExecuteResult ExecuteMethodCall(object instance, class System.Reflection.MethodInfo methodInfo, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteMethodCall(System.Object,System.Reflection.MethodInfo,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Data::Linq::IExecuteResult ^ ExecuteMethodCall(System::Object ^ instance, System::Reflection::MethodInfo ^ methodInfo, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteMethodCall : obj * System.Reflection.MethodInfo * obj[] -&gt; System.Data.Linq.IExecuteResult" Usage="dataContext.ExecuteMethodCall (instance, methodInfo, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.IExecuteResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="instance" Type="System.Object" />
        <Parameter Name="methodInfo" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="instance">
          <span data-ttu-id="1ce9b-236">メソッド呼び出しのインスタンス (現在のオブジェクト)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-236">The instance of the method invocation (the current object).</span>
          </span>
        </param>
        <param name="methodInfo">
          <span data-ttu-id="1ce9b-237">データベース メソッドに対応する CLR メソッドを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-237">Identifies the CLR method that corresponds to a database method.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="1ce9b-238">コマンドに渡すパラメーターの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-238">The array of parameters to be passed to the command.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-239">指定した CLR メソッドに関連付けられているストアド データベース プロシージャまたはスカラー関数を実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-239">Executes the stored database procedure or scalar function associated with the specified CLR method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-240">指定したメソッドを実行した結果 (戻り値と出力パラメーター)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-240">The result (the return value and output parameters) of executing the specified method.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-241"><xref:System.Data.Linq.DataContext.ExecuteMethodCall%2A>メソッドは自動的に生成されたコードで使用し、データベース関数をプロキシとして機能します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-241">The <xref:System.Data.Linq.DataContext.ExecuteMethodCall%2A> method is used in automatically generated code and acts as a proxy to database functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteQuery">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable ExecuteQuery (Type elementType, string query, params object[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable ExecuteQuery(class System.Type elementType, string query, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteQuery(System.Type,System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteQuery (elementType As Type, query As String, ParamArray parameters As Object()) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ ExecuteQuery(Type ^ elementType, System::String ^ query, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteQuery : Type * string * obj[] -&gt; System.Collections.IEnumerable" Usage="dataContext.ExecuteQuery (elementType, query, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="elementType">
          <span data-ttu-id="1ce9b-242">返される <see cref="T:System.Collections.Generic.IEnumerable`1" /> の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-242">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.</span>
          </span>
          <span data-ttu-id="1ce9b-243">オブジェクト内のフィールドまたはプロパティに対して、クエリの結果内の列の一致を行うアルゴリズムは、以下のように動作します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-243">The algorithm for matching columns in the result of the query to fields or properties in the object works as follows:</span>
          </span>
          <span data-ttu-id="1ce9b-244">フィールドまたはプロパティが特定の列名に割り当てられている場合は、その列名が結果セットに存在する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-244">If a field or property is mapped to a particular column name, that column name is expected in the resultset.</span>
          </span>
          <span data-ttu-id="1ce9b-245">フィールドまたはプロパティが割り当てられていない場合は、フィールドまたはプロパティと同じ名前の列が結果セットに存在する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-245">If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</span>
          </span>
          <span data-ttu-id="1ce9b-246">比較では、まず大文字と小文字が区別されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-246">The comparison is performed by looking for a case-sensitive match first.</span>
          </span>
          <span data-ttu-id="1ce9b-247">一致するものが見つからない場合は、大文字と小文字を区別せずに以降の検索が実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-247">If this match is not found, a subsequent search occurs for a case-insensitive match.</span>
          </span>
          <span data-ttu-id="1ce9b-248">このクエリは、以下の条件がすべて当てはまる場合、(遅延読み込みされる場合を除いて) オブジェクトの追跡されるフィールドおよびプロパティをすべて返す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-248">The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:</span>
          </span>
          <span data-ttu-id="1ce9b-249">
            <c>T</c> が、<see cref="T:System.Data.Linq.DataContext" /> によって明示的に追跡されるエンティティである場合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-249">
              <c>T</c> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
          <span data-ttu-id="1ce9b-250">
            <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> は <see langword="true" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-250">
              <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="1ce9b-251">そのエンティティに主キーがある場合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-251">The entity has a primary key.</span>
          </span>
          <span data-ttu-id="1ce9b-252">それ以外の場合は、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-252">Otherwise an exception is thrown.</span>
          </span>
        </param>
        <param name="query">
          <span data-ttu-id="1ce9b-253">実行する SQL クエリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-253">The SQL query to be executed.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="1ce9b-254">コマンドに渡すパラメーターの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-254">The array of parameters to be passed to the command.</span>
          </span>
          <span data-ttu-id="1ce9b-255">以下の動作に注意してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-255">Note the following behavior:</span>
          </span>
          <span data-ttu-id="1ce9b-256">配列内のオブジェクトの数が、コマンド文字列で特定された最大数より小さい場合、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-256">If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</span>
          </span>
          <span data-ttu-id="1ce9b-257">配列にコマンド文字列で参照されないオブジェクトが含まれている場合、例外はスローされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-257">If the array contains objects that are not referenced in the command string, no exception is thrown.</span>
          </span>
          <span data-ttu-id="1ce9b-258">パラメーターが <see langword="null" /> の場合は、<see langword="DBNull.Value" /> に変換されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-258">If a parameter is <see langword="null" />, it is converted to <see langword="DBNull.Value" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-259">データベース上で SQL クエリを直接実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-259">Executes SQL queries directly on the database.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-260">クエリによって返されるオブジェクトの <see cref="T:System.Collections.Generic.IEnumerable`1" /> コレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-260">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> collection of objects returned by the query.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; ExecuteQuery&lt;TResult&gt; (string query, params object[] parameters) where TResult : new();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; ExecuteQuery&lt;.ctor TResult&gt;(string query, object[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.ExecuteQuery``1(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function ExecuteQuery(Of TResult As New) (query As String, ParamArray parameters As Object()) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; where TResult : gcnew() System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ ExecuteQuery(System::String ^ query, ... cli::array &lt;System::Object ^&gt; ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.ExecuteQuery : string * obj[] -&gt; seq&lt;'Result (requires 'Result : (new : unit -&gt; 'Result))&gt; (requires 'Result : (new : unit -&gt; 'Result))" Usage="dataContext.ExecuteQuery (query, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="query" Type="System.String" />
        <Parameter Name="parameters" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1ce9b-261">返されるコレクション内の要素の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-261">The type of the elements in the returned collection.</span>
          </span>
        </typeparam>
        <param name="query">
          <span data-ttu-id="1ce9b-262">実行する SQL クエリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-262">The SQL query to be executed.</span>
          </span>
        </param>
        <param name="parameters">
          <span data-ttu-id="1ce9b-263">コマンドに渡すパラメーターの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-263">The array of parameters to be passed to the command.</span>
          </span>
          <span data-ttu-id="1ce9b-264">以下の動作に注意してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-264">Note the following behavior:</span>
          </span>
          <span data-ttu-id="1ce9b-265">配列内のオブジェクトの数が、コマンド文字列で特定された最大数より小さい場合、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-265">If the number of objects in the array is less than the highest number identified in the command string, an exception is thrown.</span>
          </span>
          <span data-ttu-id="1ce9b-266">配列にコマンド文字列で参照されないオブジェクトが含まれている場合、例外はスローされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-266">If the array contains objects that are not referenced in the command string, no exception is thrown.</span>
          </span>
          <span data-ttu-id="1ce9b-267">パラメーターが null の場合は、<see langword="DBNull.Value" /> に変換されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-267">If a parameter is null, it is converted to <see langword="DBNull.Value" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-268">データベース上で SQL クエリを直接実行して、オブジェクトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-268">Executes SQL queries directly on the database and returns objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-269">クエリによって返されるオブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-269">A collection of objects returned by the query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-270">このメソッドは、ケースのパススルー メカニズム、[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]は特定のシナリオを提供しません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-270">This method is a pass-through mechanism for cases where [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not provide for a particular scenario.</span></span>  
  
 <span data-ttu-id="1ce9b-271">オブジェクトのプロパティおよびフィールドに、クエリの結果に列の一致のアルゴリズムはように動作します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-271">The algorithm for matching columns in the result of the query to fields and properties in the object works as follows:</span></span>  
  
-   <span data-ttu-id="1ce9b-272">フィールドまたはプロパティが特定の列名に割り当てられている場合は、その列名が結果セットに存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-272">If a field or property is mapped to a particular column name, that column name is expected in the resultset.</span></span>  
  
-   <span data-ttu-id="1ce9b-273">フィールドまたはプロパティが割り当てられていない場合は、フィールドまたはプロパティと同じ名前の列が結果セットに存在する必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-273">If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</span></span>  
  
-   <span data-ttu-id="1ce9b-274">大文字と小文字の最初を検索して比較されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-274">The comparison is performed by first looking for a case-sensitive match.</span></span> <span data-ttu-id="1ce9b-275">このような一致が見つからない場合は、大文字と小文字の以降の検索が発生します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-275">If such a match is not found, a subsequent search occurs for a case-insensitive match.</span></span>  
  
-   <span data-ttu-id="1ce9b-276">クエリは、すべての追跡対象のフィールドと (遅延読み込みされる場合を除いて) オブジェクトのプロパティを返す必要があります、次のすべてが true の場合。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-276">The query must return all the tracked fields and properties of the object (apart from those subject to deferred loading) when all the following are true:</span></span>  
  
    -   <span data-ttu-id="1ce9b-277">場合`<T>`エンティティに明示的にでは、追跡、<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-277">If `<T>` is an entity explicitly tracked by the <xref:System.Data.Linq.DataContext>.</span></span>  
  
    -   <span data-ttu-id="1ce9b-278">ObjectTrackingEnabled は true です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-278">ObjectTrackingEnabled is true.</span></span>  
  
    -   <span data-ttu-id="1ce9b-279">そのエンティティに主キーがある場合。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-279">The entity has a primary key.</span></span>  
  
     <span data-ttu-id="1ce9b-280">それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-280">Otherwise an exception is thrown.</span></span>  
  
-   <span data-ttu-id="1ce9b-281">その他のすべてのケースで、クエリは、追跡されるフィールドおよびオブジェクトのプロパティのサブセットのみを取得できます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-281">In all other cases, the query can retrieve just a subset of the tracked fields and properties for the object.</span></span>  
  
 <span data-ttu-id="1ce9b-282">次の c# スニペットは、このメソッドの 1 つの使用を示しています。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-282">The following C# snippet shows one use for this method:</span></span>  
  
```  
var customers = db.ExecuteQuery<Customer>(@"SELECT CustomerID, CompanyName, ContactName, ContactTitle,   
   Address, City, Region, PostalCode, Country, Phone, Fax  
   FROM   dbo.Customers  
   WHERE  City = {0}", "London");  
  
foreach (Customer c in customers)  
   Console.WriteLine(c.ContactName);  
```  
  
 <span data-ttu-id="1ce9b-283">Visual basic</span><span class="sxs-lookup"><span data-stu-id="1ce9b-283">In Visual Basic</span></span>  
  
```  
Dim customers = db.ExecuteQuery(Of Customer)("SELECT CustomerID, _    CompanyName, ContactName, ContactTitle, _  
   Address, City, Region, PostalCode, Country, Phone, Fax _  
   FROM dbo.Customers _  
WHERE City = {0}", "London")  
  
For Each c As Customer In customers  
    Console.WriteLine(c.ContactName)  
Next  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetChangeSet">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ChangeSet GetChangeSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.ChangeSet GetChangeSet() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetChangeSet" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChangeSet () As ChangeSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Linq::ChangeSet ^ GetChangeSet();" />
      <MemberSignature Language="F#" Value="member this.GetChangeSet : unit -&gt; System.Data.Linq.ChangeSet" Usage="dataContext.GetChangeSet " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ChangeSet</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-284">
            <see cref="T:System.Data.Linq.DataContext" /> で追跡される変更されたオブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-284">Gets the modified objects tracked by <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-285">オブジェクトのセットが、3 つの読み取り専用のコレクションとして返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-285">The set of objects is returned as three read-only collections.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-286">次の考慮事項に注意してください。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-286">Note the following considerations:</span></span>  
  
-   <span data-ttu-id="1ce9b-287"><xref:System.Data.Linq.DataContext.GetChangeSet%2A> insert の推論などの副作用があるし、削除の操作時に通常実行される可能性があります<xref:System.Data.Linq.DataContext.SubmitChanges%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-287"><xref:System.Data.Linq.DataContext.GetChangeSet%2A> might have side effects, such as inference of insert and delete operations that are usually performed at the time of <xref:System.Data.Linq.DataContext.SubmitChanges%2A>.</span></span> <span data-ttu-id="1ce9b-288">など、次の操作で使用されるオブジェクトは、次の一覧で対応する、推論される操作を作成できます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-288">For example, objects that are used in the following operations can create corresponding inferred operations in the following list:</span></span>  
  
    -   <span data-ttu-id="1ce9b-289"><xref:System.Data.Linq.EntitySet%601.Add%2A> <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-289"><xref:System.Data.Linq.EntitySet%601.Add%2A> to <xref:System.Data.Linq.Table%601.InsertOnSubmit%2A>.</span></span>  
  
    -   <span data-ttu-id="1ce9b-290"><xref:System.Data.Linq.EntityRef%601> null の代入 (可能性があるので、<xref:System.Data.Linq.EntitySet%601.Remove%2A>に<xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-290"><xref:System.Data.Linq.EntityRef%601> assignment to null (possibly because of <xref:System.Data.Linq.EntitySet%601.Remove%2A> to <xref:System.Data.Linq.Table%601.DeleteOnSubmit%2A>.</span></span>  
  
-   <span data-ttu-id="1ce9b-291">外部キー制約に従って、セットを順序付けされない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-291">The set may not be ordered according to foreign key constraints.</span></span>  
  
-   <span data-ttu-id="1ce9b-292">データベースによって生成された値 (たとえば、プライマリと外部キーの値、タイムスタンプ、およびなど) は使用できません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-292">Database-generated values (for example, primary and foreign key values, timestamps, and so forth) are not available.</span></span> <span data-ttu-id="1ce9b-293">このような情報は、データベース コマンドを実行し、取得した情報 (たとえば、主キーから外部キー) が反映が必要です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-293">Such information requires database command execution and perhaps the propagation of retrieved information (for example, foreign key from primary key).</span></span>  
  
-   <span data-ttu-id="1ce9b-294">変更されたオブジェクトのセットは、呼び出し時に計算されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-294">The set of changed objects is computed at the time of the call.</span></span> <span data-ttu-id="1ce9b-295">後続の呼び出し<xref:System.Data.Linq.DataContext.SubmitChanges%2A>追加の変更が加えられた場合、別のセットを生成できます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-295">Subsequent calls to <xref:System.Data.Linq.DataContext.SubmitChanges%2A> can produce a different set if additional changes are made.</span></span>  
  
 <span data-ttu-id="1ce9b-296">変更がなかったときに、出力は次のようです。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-296">Output when no changes have been made appears as follows:</span></span>  
  
 `{Added: 0, Removed: 0, Modified: 0}`  
  
   
  
## Examples  
 [!code-csharp[DLinqDebuggingSupport#2](~/samples/snippets/csharp/VS_Snippets_Data/DLinqDebuggingSupport/cs/Program.cs#2)]
 [!code-vb[DLinqDebuggingSupport#2](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqDebuggingSupport/vb/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCommand">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbCommand GetCommand (System.Linq.IQueryable query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Common.DbCommand GetCommand(class System.Linq.IQueryable query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetCommand(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCommand (query As IQueryable) As DbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Common::DbCommand ^ GetCommand(System::Linq::IQueryable ^ query);" />
      <MemberSignature Language="F#" Value="member this.GetCommand : System.Linq.IQueryable -&gt; System.Data.Common.DbCommand" Usage="dataContext.GetCommand query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="query">
          <span data-ttu-id="1ce9b-297">SQL コマンド情報を取得するクエリ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-297">The query whose SQL command information is to be retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-298">[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] によって生成される SQL コマンドの情報を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-298">Gets the information about SQL commands generated by [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)].</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-299">要求したコマンド情報オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-299">The requested command information object.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-300">このメソッドは影響しません、getter のみ<xref:System.Data.Linq.DataContext>状態。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-300">This method is only a getter and does not affect <xref:System.Data.Linq.DataContext> state.</span></span>  
  
 <span data-ttu-id="1ce9b-301">次の考慮事項に注意してください。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-301">Note the following considerations:</span></span>  
  
-   <span data-ttu-id="1ce9b-302">引数は、null 以外である必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-302">The argument must be non-null.</span></span> <span data-ttu-id="1ce9b-303">それ以外の場合、null の引数の例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-303">Otherwise, a null argument exception is thrown.</span></span>  
  
-   <span data-ttu-id="1ce9b-304">通常のクエリ変換の例外が中にスローされた[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]変換できないクエリのクエリの実行が適用されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-304">Normal query translation exceptions thrown during [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] query execution apply for a query that cannot be translated.</span></span>  
  
-   <span data-ttu-id="1ce9b-305">最初のクエリ コマンドのみが返されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-305">Only the first query command is returned.</span></span> <span data-ttu-id="1ce9b-306">具体的には、その他のコマンド一括読み込みに使用される (<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>) は含まれません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-306">Specifically, additional commands that are used for eager loading (<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>) are not included.</span></span>  
  
-   <span data-ttu-id="1ce9b-307"><xref:System.Data.Linq.DataContext> コマンドを使用して、ユーザーが何を追跡しません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-307"><xref:System.Data.Linq.DataContext> does not track what the user does with the command.</span></span> <span data-ttu-id="1ce9b-308">たとえば返されたコマンドの実行から結果は追跡されませんには影響しません<xref:System.Data.Linq.DataContext>状態。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-308">For example, results from the execution of the returned command are not tracked and do not affect <xref:System.Data.Linq.DataContext> state.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqDebuggingSupport#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqDebuggingSupport/cs/Program.cs#3)]
 [!code-vb[DLinqDebuggingSupport#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqDebuggingSupport/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDbCommand">
      <MemberSignature Language="C#" Value="public System.Data.IDbCommand GetIDbCommand (System.Linq.IQueryable query);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.IDbCommand GetIDbCommand(class System.Linq.IQueryable query) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetIDbCommand(System.Linq.IQueryable)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetIDbCommand (query As IQueryable) As IDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::IDbCommand ^ GetIDbCommand(System::Linq::IQueryable ^ query);" />
      <MemberSignature Language="F#" Value="member this.GetIDbCommand : System.Linq.IQueryable -&gt; System.Data.IDbCommand" Usage="dataContext.GetIDbCommand query" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="query" Type="System.Linq.IQueryable" />
      </Parameters>
      <Docs>
        <param name="query">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTable">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ITable GetTable (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.ITable GetTable(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetTable(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Linq::ITable ^ GetTable(Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetTable : Type -&gt; System.Data.Linq.ITable" Usage="dataContext.GetTable type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ITable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="1ce9b-309">返されるオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-309">The type of the objects to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-310">
            <paramref name="type" /> パラメーターで定義される型のオブジェクトのコレクションを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-310">Returns a collection of objects of a particular type, where the type is defined by the <paramref name="type" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-311">
            <paramref name="type" /> パラメーターで定義されたオブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-311">A collection of objects defined by the <paramref name="type" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-312">これは弱く型指定されたバージョンの<xref:System.Data.Linq.DataContext.GetTable%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-312">This is a weakly typed version of <xref:System.Data.Linq.DataContext.GetTable%2A>.</span></span> <span data-ttu-id="1ce9b-313">弱く型指定されたバージョンであるため、クエリを動的に構築する比較的一般的な方法は重要です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-313">It is important to have a weakly typed version because it is a relatively common practice to construct queries dynamically.</span></span> <span data-ttu-id="1ce9b-314">リフレクションを使用して、適切なジェネリック メソッドを呼び出すアプリケーションを強制する便利なできなくなります。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-314">It would be inconvenient to force the application to use reflection to call the correct generic method.</span></span>  
  
 <span data-ttu-id="1ce9b-315">特定の型のコレクションがない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-315">If there is no collection for a particular type, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTable&lt;TEntity&gt;">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Table&lt;TEntity&gt; GetTable&lt;TEntity&gt; () where TEntity : class;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.Table`1&lt;!!TEntity&gt; GetTable&lt;class TEntity&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.GetTable``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetTable(Of TEntity As Class) () As Table(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TEntity&gt;&#xA; where TEntity : class System::Data::Linq::Table&lt;TEntity&gt; ^ GetTable();" />
      <MemberSignature Language="F#" Value="member this.GetTable : unit -&gt; System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt; (requires 'Entity : null)" Usage="dataContext.GetTable " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Table&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TEntity">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TEntity">
          <span data-ttu-id="1ce9b-316">返されるオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-316">The type of the objects to be returned.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="1ce9b-317">
            <paramref name="TEntity" /> パラメーターで定義される型のオブジェクトのコレクションを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-317">Returns a collection of objects of a particular type, where the type is defined by the <paramref name="TEntity" /> parameter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-318">
            <paramref name="TEntity" /> パラメーターで定義されたオブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-318">A collection of objects defined by the <paramref name="TEntity" /> parameter.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-319">このメソッドは、クエリのメイン エントリ ポイントです。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-319">This method is the main entry point for querying.</span></span> <span data-ttu-id="1ce9b-320">ときに、厳密に型指定された<xref:System.Data.Linq.DataContext>が作成された、新規生成されたプロパティをこのメソッドの呼び出しをカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-320">When a strongly typed <xref:System.Data.Linq.DataContext> is created, new generated properties encapsulate calls to this method.</span></span> <span data-ttu-id="1ce9b-321">たとえば、`Customers`を返すプロパティが生成される`GetTable<Customer>`します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-321">For example, a `Customers` property is generated that returns `GetTable<Customer>`.</span></span>  
  
 <span data-ttu-id="1ce9b-322">特定の型のコレクションがない場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-322">If there is no collection for a particular type, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadOptions">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataLoadOptions LoadOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataLoadOptions LoadOptions" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.LoadOptions" />
      <MemberSignature Language="VB.NET" Value="Public Property LoadOptions As DataLoadOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataLoadOptions ^ LoadOptions { System::Data::Linq::DataLoadOptions ^ get(); void set(System::Data::Linq::DataLoadOptions ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LoadOptions : System.Data.Linq.DataLoadOptions with get, set" Usage="System.Data.Linq.DataContext.LoadOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataLoadOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-323">この <see cref="T:System.Data.Linq.DataLoadOptions" /> に関連付けられた <see cref="T:System.Data.Linq.DataContext" /> を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-323">Gets or sets the <see cref="T:System.Data.Linq.DataLoadOptions" /> associated with this <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-324">関連するデータのプリフェッチ読み込みのオプション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-324">The prefetch load options for related data.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-325">このプロパティを取得または遅延読み込みされるメンバーと関連コレクションのメンバシップのプリフェッチの動作の定義に使用するオプションを設定します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-325">This property gets or sets the options that are used to define prefetch behavior for deferred-loaded members and membership of related collections.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Log">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Log { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Log" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Log" />
      <MemberSignature Language="VB.NET" Value="Public Property Log As TextWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::TextWriter ^ Log { System::IO::TextWriter ^ get(); void set(System::IO::TextWriter ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Log : System.IO.TextWriter with get, set" Usage="System.Data.Linq.DataContext.Log" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-326">SQL クエリまたはコマンドの書き込み先を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-326">Gets or sets the destination to write the SQL query or command.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-327">コマンドを書き込むために使用する <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-327">The <see cref="T:System.IO.TextReader" /> to use for writing the command.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-328">このプロパティを設定`null`コマンドのログ記録を無効にします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-328">Set this property to `null` to disable command logging.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="1ce9b-329">次の例は、クエリの結果を表示する前に、コンソール ウィンドウに生成された SQL を表示します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-329">The following example displays generated SQL in the console window before it displays the results of the query.</span></span>  
  
 [!code-csharp[System.Data.Linq.DataContext#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Data.Linq.DataContext/cs/Program.cs#2)]
 [!code-vb[System.Data.Linq.DataContext#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Data.Linq.DataContext/vb/Module1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Mapping">
      <MemberSignature Language="C#" Value="public System.Data.Linq.Mapping.MetaModel Mapping { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.Mapping.MetaModel Mapping" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Mapping" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mapping As MetaModel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::Mapping::MetaModel ^ Mapping { System::Data::Linq::Mapping::MetaModel ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Mapping : System.Data.Linq.Mapping.MetaModel" Usage="System.Data.Linq.DataContext.Mapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.Mapping.MetaModel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-330">マッピングの基になる <see cref="T:System.Data.Linq.Mapping.MetaModel" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-330">Gets the <see cref="T:System.Data.Linq.Mapping.MetaModel" /> on which the mapping is based.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-331">データベース オブジェクトとドメイン オブジェクト間のマッピング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-331">The mapping between a database and domain objects.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObjectTrackingEnabled">
      <MemberSignature Language="C#" Value="public bool ObjectTrackingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ObjectTrackingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property ObjectTrackingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ObjectTrackingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ObjectTrackingEnabled : bool with get, set" Usage="System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-332">オブジェクトの追跡が有効かどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-332">Gets or sets a value that indicates whether object tracking is enabled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-333">追跡が有効になっている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-333">
              <see langword="true" /> if the object tracking is enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="1ce9b-334">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-334">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-335">このプロパティを設定`false`追跡するために以下の項目があるため、取得時にパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-335">Setting this property to `false` improves performance at retrieval time, because there are fewer items to track.</span></span>  
  
 <span data-ttu-id="1ce9b-336">例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-336">An exception is thrown:</span></span>  
  
-   <span data-ttu-id="1ce9b-337">プロパティ設定されている場合`false`クエリが実行された後にします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-337">If the property is set to `false` after a query has been executed.</span></span>  
  
     <span data-ttu-id="1ce9b-338">詳細については、有効なモード」セクションを参照してください。<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-338">For more information, see the Valid Modes section in <xref:System.Data.Linq.DataContext>.</span></span>  
  
-   <span data-ttu-id="1ce9b-339">プロパティ設定されている場合`false`と<xref:System.Data.Linq.DataContext.SubmitChanges%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-339">If the property is set to `false` and <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span>  
  
 <span data-ttu-id="1ce9b-340">場合<xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A>は`false`、<xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A>は無視され、として扱われます`false`します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-340">If <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> is `false`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> is ignored and treated as `false`.</span></span> <span data-ttu-id="1ce9b-341">ここで、<xref:System.Data.Linq.DataContext>は読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-341">In this case, the <xref:System.Data.Linq.DataContext> is read-only.</span></span>  
  
 <span data-ttu-id="1ce9b-342"><xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> が `true` の場合、<xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> は `false` です。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-342">If <xref:System.Data.Linq.DataContext.ObjectTrackingEnabled%2A> is `true`, <xref:System.Data.Linq.DataContext.DeferredLoadingEnabled%2A> is `false`.</span></span> <span data-ttu-id="1ce9b-343">この場合、<xref:System.Data.Linq.DataContext>を使用して、オブジェクト グラフを読み込むことができます<xref:System.Data.Linq.DataLoadOptions.LoadWith%2A>ディレクティブでは、遅延読み込みを有効にしません。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-343">In this case, <xref:System.Data.Linq.DataContext> allows you to load an object graph by using <xref:System.Data.Linq.DataLoadOptions.LoadWith%2A> directives, but does not enable deferred loading.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryCacheEnabled">
      <MemberSignature Language="C#" Value="public bool QueryCacheEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool QueryCacheEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.QueryCacheEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property QueryCacheEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool QueryCacheEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.QueryCacheEnabled : bool with get, set" Usage="System.Data.Linq.DataContext.QueryCacheEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Refresh">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-344">データベース内のデータを使用してオブジェクトの状態を更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-344">Refreshes object state by using data in the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-345">このメソッドは、後に別の試行の状態は、項目を表示するとエラーにオプティミスティック同時実行制御に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-345">This method is useful after an optimistic concurrency error to bring items into a state for another attempt.</span></span> <span data-ttu-id="1ce9b-346">オブジェクトのプロパティ、プリミティブ型のフィールドの状態を更新します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-346">It updates the state of the primitive fields and properties on the objects.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="1ce9b-347">オブジェクトがある場合、*多く*一対多のリレーションシップ オブジェクトで外部キーの側が設定され、リレーションシップの他方の側のオブジェクトへのポインターは、新しい値に設定されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-347">If an object is on the *many* side of a one-to-many relationship, the foreign key on the object will be set and the object pointer for the other side of the relationship will be set to the new value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Linq.RefreshMode mode, System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Linq.RefreshMode mode, class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (mode As RefreshMode, entities As IEnumerable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Linq::RefreshMode mode, System::Collections::IEnumerable ^ entities);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Linq.RefreshMode * System.Collections.IEnumerable -&gt; unit" Usage="dataContext.Refresh (mode, entities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="1ce9b-348">オプティミスティック同時実行競合の処理方法を指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-348">A value that specifies how optimistic concurrency conflicts are handled.</span>
          </span>
        </param>
        <param name="entities">
          <span data-ttu-id="1ce9b-349">更新されるエンティティのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-349">The collection of entities to be refreshed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-350">指定したモードに従ってエンティティ オブジェクトのコレクションを更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-350">Refreshes a collection of entity objects according to the specified mode.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Linq.RefreshMode mode, object entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Linq.RefreshMode mode, object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (mode As RefreshMode, entity As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Linq::RefreshMode mode, System::Object ^ entity);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Linq.RefreshMode * obj -&gt; unit" Usage="dataContext.Refresh (mode, entity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="1ce9b-351">オプティミスティック同時実行競合の処理方法を指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-351">A value that specifies how optimistic concurrency conflicts are handled.</span>
          </span>
        </param>
        <param name="entity">
          <span data-ttu-id="1ce9b-352">更新するオブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-352">The object to be refreshed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-353">指定したモードに従ってエンティティ オブジェクトを更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-353">Refreshes an entity object according to the specified mode.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh (System.Data.Linq.RefreshMode mode, params object[] entities);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh(valuetype System.Data.Linq.RefreshMode mode, object[] entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Refresh(System.Data.Linq.RefreshMode,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh (mode As RefreshMode, ParamArray entities As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh(System::Data::Linq::RefreshMode mode, ... cli::array &lt;System::Object ^&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.Refresh : System.Data.Linq.RefreshMode * obj[] -&gt; unit" Usage="dataContext.Refresh (mode, entities)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Data.Linq.RefreshMode" />
        <Parameter Name="entities" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="1ce9b-354">オプティミスティック同時実行競合の処理方法を指定する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-354">A value that specifies how optimistic concurrency conflicts are handled.</span>
          </span>
        </param>
        <param name="entities">
          <span data-ttu-id="1ce9b-355">更新するエンティティ オブジェクトの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-355">The array of entity objects to be refreshed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-356">指定したモードに従ってエンティティ オブジェクトの配列を更新します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-356">Refreshes an array of entity objects according to the specified mode.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SubmitChanges">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-357">挿入、更新、または削除される変更されたオブジェクトのセットを計算し、該当するコマンドを実行してデータベースを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-357">Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-358">オーバーライド メソッドが insert、update、または削除の存在する場合<xref:System.Data.Linq.DataContext.SubmitChanges%2A>、既定ではなく、これらのメソッドを実行します。[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]コマンド。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-358">If override methods are present for insert, update, or delete, <xref:System.Data.Linq.DataContext.SubmitChanges%2A> executes these methods instead of the default [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] commands.</span></span>  
  
 <span data-ttu-id="1ce9b-359"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> トランザクションが開始され、例外が発生した場合はロールバックが中に<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を実行します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-359"><xref:System.Data.Linq.DataContext.SubmitChanges%2A> starts a transaction and will roll back if an exception occurs while <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is executing.</span></span> <span data-ttu-id="1ce9b-360">ただし、これはロールバックされません変更メモリ内や、によって追跡、 <xref:System.Data.Linq.DataContext>。 これらの変更は手動でロールバックする必要があります。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-360">However, this does not roll back the changes in memory or tracked by the <xref:System.Data.Linq.DataContext>; those changes will need to be rolled back manually.</span></span> <span data-ttu-id="1ce9b-361">新しいインスタンスを使用することができます、<xref:System.Data.Linq.DataContext>場合メモリ内の変更は破棄されます。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-361">You can start with a new instance of the <xref:System.Data.Linq.DataContext> if the changes in memory are to be discarded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SubmitChanges">
      <MemberSignature Language="C#" Value="public void SubmitChanges ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SubmitChanges() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.SubmitChanges" />
      <MemberSignature Language="VB.NET" Value="Public Sub SubmitChanges ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SubmitChanges();" />
      <MemberSignature Language="F#" Value="member this.SubmitChanges : unit -&gt; unit" Usage="dataContext.SubmitChanges " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-362">挿入、更新、または削除される変更されたオブジェクトのセットを計算し、該当するコマンドを実行してデータベースを変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-362">Computes the set of modified objects to be inserted, updated, or deleted, and executes the appropriate commands to implement the changes to the database.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-363">オーバーライド メソッドが insert、update、または削除の存在する場合<xref:System.Data.Linq.DataContext.SubmitChanges%2A>、既定ではなく、これらのメソッドを実行します。[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]コマンド。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-363">If override methods are present for insert, update, or delete, <xref:System.Data.Linq.DataContext.SubmitChanges%2A> executes these methods instead of the default [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] commands.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitChanges">
      <MemberSignature Language="C#" Value="public virtual void SubmitChanges (System.Data.Linq.ConflictMode failureMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SubmitChanges(valuetype System.Data.Linq.ConflictMode failureMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.SubmitChanges(System.Data.Linq.ConflictMode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub SubmitChanges (failureMode As ConflictMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SubmitChanges(System::Data::Linq::ConflictMode failureMode);" />
      <MemberSignature Language="F#" Value="abstract member SubmitChanges : System.Data.Linq.ConflictMode -&gt; unit&#xA;override this.SubmitChanges : System.Data.Linq.ConflictMode -&gt; unit" Usage="dataContext.SubmitChanges failureMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="failureMode" Type="System.Data.Linq.ConflictMode" />
      </Parameters>
      <Docs>
        <param name="failureMode">
          <span data-ttu-id="1ce9b-364">送信が失敗したときに実行するアクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-364">The action to be taken if the submission fails.</span>
          </span>
          <span data-ttu-id="1ce9b-365">有効な引数は次のとおりです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-365">Valid arguments are as follows:</span>
          </span>
          <see cref="F:System.Data.Linq.ConflictMode.FailOnFirstConflict" />
          <see cref="F:System.Data.Linq.ConflictMode.ContinueOnConflict" />
        </param>
        <summary>
          <span data-ttu-id="1ce9b-366">取得したオブジェクトに対して行われた変更を、基になるデータベースに送信し、送信が失敗したときに実行するアクションを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-366">Sends changes that were made to retrieved objects to the underlying database, and specifies the action to be taken if the submission fails.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-367">既定の障害モードは<xref:System.Data.Linq.ConflictMode.FailOnFirstConflict>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-367">Default failure mode is <xref:System.Data.Linq.ConflictMode.FailOnFirstConflict>.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.ConflictModeEnumeration#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.conflictmodeenumeration/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.ConflictModeEnumeration#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.conflictmodeenumeration/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transaction">
      <MemberSignature Language="C#" Value="public System.Data.Common.DbTransaction Transaction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Common.DbTransaction Transaction" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.DataContext.Transaction" />
      <MemberSignature Language="VB.NET" Value="Public Property Transaction As DbTransaction" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Common::DbTransaction ^ Transaction { System::Data::Common::DbTransaction ^ get(); void set(System::Data::Common::DbTransaction ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transaction : System.Data.Common.DbTransaction with get, set" Usage="System.Data.Linq.DataContext.Transaction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.DbTransaction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-368">データベースにアクセスするために使用する [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] のローカル トランザクションを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-368">Gets or sets a local transaction for the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] to use to access the database.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="1ce9b-369">クエリおよびコマンドの実行中に <see cref="T:System.Data.Linq.DataContext" /> によって使用されるトランザクション オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-369">The transaction object used by the <see cref="T:System.Data.Linq.DataContext" /> when executing queries and commands.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-370">このプロパティの主なシナリオは、リレーショナルとの相互運用[!INCLUDE[vstecado](~/includes/vstecado-md.md)]コード。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-370">The primary scenario for this property is interoperability with relational [!INCLUDE[vstecado](~/includes/vstecado-md.md)] code.</span></span> <span data-ttu-id="1ce9b-371">たとえば、独自に作成するときにこのプロパティを使用して`Create` / `Update` / `Delete`を設定する方法、`Transaction`プロパティを ADO`Command`オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-371">For example, use this property when you write your own `Create`/`Update`/`Delete` methods to set the `Transaction` property on the ADO `Command` object.</span></span>  
  
 <span data-ttu-id="1ce9b-372">次の点に注意してください。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-372">Note the following:</span></span>  
  
-   <span data-ttu-id="1ce9b-373">このプロパティが明示的に設定されていない場合、get アクセス操作子は null を返します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-373">If this property has not been explicitly set, the getter returns null.</span></span>  
  
-   <span data-ttu-id="1ce9b-374">コードが実行している場合、<xref:System.Transactions.Transaction>コンテキスト、このプロパティの設定は、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-374">If the code is executing in a <xref:System.Transactions.Transaction> context, setting this property throws an exception.</span></span>  
  
-   <span data-ttu-id="1ce9b-375">このプロパティが設定され、新しい場合<xref:System.Transactions.Transaction>が開かれると、例外がスローされて、クエリや更新プログラムを実行するとします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-375">If this property is set and a new <xref:System.Transactions.Transaction> is opened, an exception is thrown when a query or update is executed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Translate">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="1ce9b-376">既存の <see cref="T:System.Data.IDataReader" /> をオブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-376">Converts an existing <see cref="T:System.Data.IDataReader" /> to objects.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="1ce9b-377">内の行ごと、<xref:System.Data.IDataReader>内のオブジェクトに変換されます、<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-377">Each row in the <xref:System.Data.IDataReader> is converted to an object in the <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
```  
public IEnumerable<T> Translate<T>(IDataReader reader) {}  
```  
  
 <span data-ttu-id="1ce9b-378">説明: このメソッドは、既存の変換に使用されます<xref:System.Data.Common.DbDataReader>オブジェクトにします。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-378">Description: This method is used to convert an existing <xref:System.Data.Common.DbDataReader> to objects.</span></span> <span data-ttu-id="1ce9b-379">内の行ごと、<xref:System.Data.Common.DbDataReader>内のオブジェクトに変換されます、<xref:System.Collections.Generic.IEnumerable%601>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-379">Each row in the <xref:System.Data.Common.DbDataReader> is converted to an object in the <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="1ce9b-380">**ジェネリック パラメーター:**</span><span class="sxs-lookup"><span data-stu-id="1ce9b-380">**Generic parameters:**</span></span>  
  
 <span data-ttu-id="1ce9b-381">`T`:「<xref:System.Data.Linq.DataContext.ExecuteQuery%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-381">`T`: See <xref:System.Data.Linq.DataContext.ExecuteQuery%2A>.</span></span>  
  
 <span data-ttu-id="1ce9b-382">**パラメーター:**</span><span class="sxs-lookup"><span data-stu-id="1ce9b-382">**Parameters:**</span></span>  
  
 <span data-ttu-id="1ce9b-383">`Query`: コマンドの説明を参照してください<xref:System.Data.Linq.DataContext.ExecuteCommand%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-383">`Query`: See the description for command under <xref:System.Data.Linq.DataContext.ExecuteCommand%2A>.</span></span>  
  
 <span data-ttu-id="1ce9b-384">`Parameters`: パラメーターの説明を参照してください<xref:System.Data.Linq.DataContext.ExecuteCommand%2A>します。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-384">`Parameters`: See the description for parameters under <xref:System.Data.Linq.DataContext.ExecuteCommand%2A>.</span></span>  
  
 <span data-ttu-id="1ce9b-385">**戻り値の型。**</span><span class="sxs-lookup"><span data-stu-id="1ce9b-385">**Return type:**</span></span>  
  
 <span data-ttu-id="1ce9b-386"><xref:System.Collections.Generic.IEnumerable%601>: 変換によって返されるオブジェクトのコレクション。</span><span class="sxs-lookup"><span data-stu-id="1ce9b-386"><xref:System.Collections.Generic.IEnumerable%601>: collection of objects returned by the conversion.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public System.Data.Linq.IMultipleResults Translate (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Data.Linq.IMultipleResults Translate(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Translate(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate (reader As DbDataReader) As IMultipleResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Data::Linq::IMultipleResults ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader -&gt; System.Data.Linq.IMultipleResults" Usage="dataContext.Translate reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.IMultipleResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <span data-ttu-id="1ce9b-387">変換される <see cref="T:System.Data.IDataReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-387">The <see cref="T:System.Data.IDataReader" /> to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-388">既存の <see cref="T:System.Data.Common.DbDataReader" /> をオブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-388">Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-389">変換によって返されるオブジェクトのリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-389">A list of objects returned by the conversion.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerable Translate (Type elementType, System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.IEnumerable Translate(class System.Type elementType, class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Translate(System.Type,System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate (elementType As Type, reader As DbDataReader) As IEnumerable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::IEnumerable ^ Translate(Type ^ elementType, System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : Type * System.Data.Common.DbDataReader -&gt; System.Collections.IEnumerable" Usage="dataContext.Translate (elementType, reader)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementType" Type="System.Type" />
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <param name="elementType">
          <span data-ttu-id="1ce9b-390">返される <see cref="T:System.Collections.Generic.IEnumerable`1" /> の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-390">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.</span>
          </span>
          <span data-ttu-id="1ce9b-391">オブジェクト内のフィールドおよびプロパティに対して、結果内の列の一致を行うアルゴリズムは、以下のように動作します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-391">The algorithm for matching columns in the result to fields and properties in the object works as follows:</span>
          </span>
          <span data-ttu-id="1ce9b-392">フィールドまたはプロパティが特定の列名に割り当てられている場合は、その列名が結果セットに存在する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-392">If a field or property is mapped to a particular column name, that column name is expected in the resultset.</span>
          </span>
          <span data-ttu-id="1ce9b-393">フィールドまたはプロパティが割り当てられていない場合は、フィールドまたはプロパティと同じ名前の列が結果セットに存在する必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-393">If a field or property is not mapped, a column with the same name as the field or property is expected in the resultset.</span>
          </span>
          <span data-ttu-id="1ce9b-394">比較では、まず大文字と小文字が区別されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-394">The comparison is performed by looking for a case-sensitive match first.</span>
          </span>
          <span data-ttu-id="1ce9b-395">一致するものが見つからない場合は、大文字と小文字を区別せずに以降の検索が実行されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-395">If this match is not found, a subsequent search is occurs for a case-insensitive match.</span>
          </span>
          <span data-ttu-id="1ce9b-396">このクエリは、以下の条件がすべて当てはまる場合、(遅延読み込みされる場合を除いて) オブジェクトの追跡されるフィールドおよびプロパティをすべて返す必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-396">The query must return all the tracked fields and properties of the object (except those that are loaded on a deferred basis) when all the following conditions are true:</span>
          </span>
          <span data-ttu-id="1ce9b-397">
            <c>T</c> が、<see cref="T:System.Data.Linq.DataContext" /> によって明示的に追跡されるエンティティである場合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-397">
              <c>T</c> is an entity explicitly tracked by the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
          <span data-ttu-id="1ce9b-398">
            <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> は <see langword="true" />です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-398">
              <see cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" /> is <see langword="true" />.</span>
          </span>
          <span data-ttu-id="1ce9b-399">そのエンティティに主キーがある場合。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-399">The entity has a primary key.</span>
          </span>
          <span data-ttu-id="1ce9b-400">それ以外の場合は、例外がスローされます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-400">Otherwise an exception is thrown.</span>
          </span>
        </param>
        <param name="reader">
          <span data-ttu-id="1ce9b-401">変換される <see cref="T:System.Data.IDataReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-401">The <see cref="T:System.Data.IDataReader" /> to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-402">既存の <see cref="T:System.Data.Common.DbDataReader" /> をオブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-402">Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-403">変換によって返されるオブジェクトのリスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-403">A list of objects returned by the conversion.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TResult&gt; Translate&lt;TResult&gt; (System.Data.Common.DbDataReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Translate&lt;TResult&gt;(class System.Data.Common.DbDataReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.DataContext.Translate``1(System.Data.Common.DbDataReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function Translate(Of TResult) (reader As DbDataReader) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Translate(System::Data::Common::DbDataReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.Translate : System.Data.Common.DbDataReader -&gt; seq&lt;'Result&gt;" Usage="dataContext.Translate reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reader" Type="System.Data.Common.DbDataReader" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="1ce9b-404">返される <see cref="T:System.Collections.Generic.IEnumerable`1" /> の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-404">The type of the <see cref="T:System.Collections.Generic.IEnumerable`1" /> to be returned.</span>
          </span>
        </typeparam>
        <param name="reader">
          <span data-ttu-id="1ce9b-405">変換される <see cref="T:System.Data.IDataReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-405">The <see cref="T:System.Data.IDataReader" /> to be converted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="1ce9b-406">既存の <see cref="T:System.Data.Common.DbDataReader" /> をオブジェクトに変換します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-406">Converts an existing <see cref="T:System.Data.Common.DbDataReader" /> to objects.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="1ce9b-407">変換によって返されるオブジェクトのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="1ce9b-407">A collection of objects returned by the conversion.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>