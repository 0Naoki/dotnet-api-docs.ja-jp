<Type Name="Table&lt;TEntity&gt;" FullName="System.Data.Linq.Table&lt;TEntity&gt;">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7a935203582f80a7162cd75a71bfec6653d9c492" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37680577" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Table&lt;TEntity&gt; : System.Collections.Generic.IEnumerable&lt;TEntity&gt;, System.ComponentModel.IListSource, System.Data.Linq.ITable, System.Linq.IQueryable&lt;TEntity&gt;, System.Linq.IQueryProvider where TEntity : class" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Table`1&lt;class TEntity&gt; extends System.Object implements class System.Collections.Generic.IEnumerable`1&lt;!TEntity&gt;, class System.Collections.IEnumerable, class System.ComponentModel.IListSource, class System.Data.Linq.ITable, class System.Linq.IQueryable, class System.Linq.IQueryable`1&lt;!TEntity&gt;, class System.Linq.IQueryProvider" />
  <TypeSignature Language="DocId" Value="T:System.Data.Linq.Table`1" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Table(Of TEntity)&#xA;Implements IEnumerable(Of TEntity), IListSource, IQueryable(Of TEntity), IQueryProvider, ITable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TEntity&gt;&#xA; where TEntity : classpublic ref class Table sealed : System::Collections::Generic::IEnumerable&lt;TEntity&gt;, System::ComponentModel::IListSource, System::Data::Linq::ITable, System::Linq::IQueryable&lt;TEntity&gt;, System::Linq::IQueryProvider" />
  <TypeSignature Language="F#" Value="type Table&lt;'Entity (requires 'Entity : null)&gt; = class&#xA;    interface ITable&#xA;    interface IQueryProvider&#xA;    interface IListSource&#xA;    interface seq&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IEnumerable&#xA;    interface IQueryable&lt;'Entity (requires 'Entity : null)&gt;&#xA;    interface IQueryable" />
  <AssemblyInfo>
    <AssemblyName>System.Data.Linq</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TEntity">
      <Constraints>
        <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.IListSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Data.Linq.ITable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable&lt;TEntity&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TEntity">
      <span data-ttu-id="15995-101">テーブル内のデータの型。</span>
      <span class="sxs-lookup">
        <span data-stu-id="15995-101">The type of the data in the table.</span>
      </span>
    </typeparam>
    <summary>
      <span data-ttu-id="15995-102">基になるデータベース内で特定の種類のテーブルを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="15995-102">Represents a table for a particular type in the underlying database.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-103">このクラスを使用すると、テーブルに対してクエリを実行し、追加、削除、およびオブジェクトをアタッチできます。</span><span class="sxs-lookup"><span data-stu-id="15995-103">This class enables you to query over the table and add, remove, and attach objects.</span></span>  
  
 <span data-ttu-id="15995-104">アプリケーションがアクセスできる、<xref:System.Data.Linq.Table%601>を介してインスタンス<xref:System.Data.Linq.DataContext.GetTable%2A>または厳密に型指定の厳密に型指定されたプロパティを使用して<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="15995-104">An application can access a <xref:System.Data.Linq.Table%601> instance via <xref:System.Data.Linq.DataContext.GetTable%2A> or by using a strongly typed property for the strongly typed <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="15995-105">つまり、デザイナーでは、DataContext オブジェクトを生成するときは、各テーブルを表すプロパティを生成します。</span><span class="sxs-lookup"><span data-stu-id="15995-105">That is, when the designer generates a DataContext object, it generates properties to represent each Table.</span></span> <span data-ttu-id="15995-106">例:</span><span class="sxs-lookup"><span data-stu-id="15995-106">For example:</span></span>  
  
```  
[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SignOffTool")]  
public partial class DataClasses1DataContext : System.Data.Linq.DataContext {  
   public System.Data.Linq.Table<User> Users {  
      get {  
         return this.GetTable<User>();  
      }  
   }  
}  
```  
  
 <span data-ttu-id="15995-107">この厳密に型指定の DataContext を取得するユーザーのプロパティにアクセスできます`Table<User>`します。</span><span class="sxs-lookup"><span data-stu-id="15995-107">For this strongly typed DataContext, you can access the Users property to get `Table<User>`.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName="Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="15995-108">
            <see cref="T:System.Data.Linq.DataContext" /> にエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-108">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-109">使用して、`Attach`いずれかで作成されたエンティティを持つメソッド<xref:System.Data.Linq.DataContext>バックアップ (または削除操作の更新を実行するという意図) で逆シリアル化し、クライアントにシリアル化します。</span><span class="sxs-lookup"><span data-stu-id="15995-109">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back (with the intention to perform an update or delete operation).</span></span> <span data-ttu-id="15995-110">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-110">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="15995-111">しようとしないで`Attach`エンティティをシリアル化を通じてデタッチされていません。</span><span class="sxs-lookup"><span data-stu-id="15995-111">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="15995-112">シリアル化されていないエンティティ、エンティティが 2 番目のデータ コンテキストによって追跡された場合、予期しない結果を引き起こす可能性のある遅延ローダーを使用した関連付けを維持します。</span><span class="sxs-lookup"><span data-stu-id="15995-112">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 <span data-ttu-id="15995-113">新しいエンティティがアタッチされている場合の遅延ローダーをすべての子コレクション (たとえば、`EntitySet`関連付けられているテーブルからエンティティのコレクション) 初期化されます。</span><span class="sxs-lookup"><span data-stu-id="15995-113">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="15995-114">ときに<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、コレクションの電源が入れられます子のメンバー、`Unmodified`状態。</span><span class="sxs-lookup"><span data-stu-id="15995-114">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="15995-115">子コレクションのメンバーを更新するを明示的に呼び出す必要があります`Attach`し、そのエンティティを指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-115">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="15995-116">`Attach` 指定されたオブジェクトのオブジェクト グラフ内のすべてのエンティティをアタッチします。</span><span class="sxs-lookup"><span data-stu-id="15995-116">`Attach` attaches all entities in the object graph of the provided object.</span></span> <span data-ttu-id="15995-117">たとえば、次の c# コード。</span><span class="sxs-lookup"><span data-stu-id="15995-117">For example, the following C# code:</span></span>  
  
```  
using (SampleDataContext db = new SampleDataContext()) {  
    Employee employee = new Employee { employeeId = 1 };  
  
    Master master = new Master();  
    master.Employee = employee;  
  
    Child child = new Child();  
    child.Employee = employee;  
  
    db.Employees.Attach(employee);  
  
    master.Child = child;  
  
    db.Masters.InsertOnSubmit(master);  
  
    db.SubmitChanges();  
}  
  
```  
  
 <span data-ttu-id="15995-118">同等の Visual Basic コードに示します。</span><span class="sxs-lookup"><span data-stu-id="15995-118">The equivalent Visual Basic code is:</span></span>  
  
```  
Using db As New SampleDataContext()    Dim employee As New Employee With { .employeeId = 1 }  
  
    Dim master As New Master()  
    master.Employee = employee  
  
    Dim child As New Child()  
    child.Employee = employee  
  
    db.Employees.Attach(employee)  
  
    master.Child = child  
  
    db.Masters.InsertOnSubmit(master)  
  
    db.SubmitChanges()  
  
End Using  
```  
  
 <span data-ttu-id="15995-119">呼び出す`Attach`で`Employee`ために、従業員、マスター、および子をアタッチ、`Employee`マスターと子の両方のリレーションシップがあります。</span><span class="sxs-lookup"><span data-stu-id="15995-119">Calling `Attach` on `Employee` attaches employee, master, and child, because the `Employee` has relationships to both master and child.</span></span> <span data-ttu-id="15995-120">明示的に呼び出す必要がある`InsertOnSubmit`から状態を変更する接続に挿入します。</span><span class="sxs-lookup"><span data-stu-id="15995-120">You must explicitly call `InsertOnSubmit` to change the state from attached to inserted.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity -&gt; unit" Usage="table.Attach entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-121">アタッチするエンティティの元の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-121">The original values of the entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-122">オプティミスティック同時実行チェックで元の値が必要なときに、接続解除されたエンティティまたは "デタッチ" されたエンティティを新しい <see cref="T:System.Data.Linq.DataContext" /> にアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-122">Attaches a disconnected or "detached" entity to a new <see cref="T:System.Data.Linq.DataContext" /> when original values are required for optimistic concurrency checks.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-123">使用して、`Attach`いずれかで作成されたエンティティを持つメソッド<xref:System.Data.Linq.DataContext>クライアントにシリアル化および逆シリアル化し、更新を実行または削除の操作に戻る。</span><span class="sxs-lookup"><span data-stu-id="15995-123">Use the `Attach` methods with entities that have been created in one <xref:System.Data.Linq.DataContext>, serialized to a client, and then deserialized back to perform an update or delete operation.</span></span> <span data-ttu-id="15995-124">新しい<xref:System.Data.Linq.DataContext>手段を持ちませんの元の値がどのような切り離されたエンティティのかを追跡するには、クライアントがこれらの値を指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-124">Because the new <xref:System.Data.Linq.DataContext> has no way of tracking what the original values were for a disconnected entity, the client is responsible for supplying those values.</span></span> <span data-ttu-id="15995-125">このバージョンの<xref:System.Data.Linq.Table%601.Attach%2A>エンティティは元の値の状態であると見なされます。</span><span class="sxs-lookup"><span data-stu-id="15995-125">In this version of <xref:System.Data.Linq.Table%601.Attach%2A>, the entity is assumed to be in its original value state.</span></span> <span data-ttu-id="15995-126">このメソッドを呼び出した後に更新できます、フィールドなど、クライアントから送信される追加のデータと。</span><span class="sxs-lookup"><span data-stu-id="15995-126">After calling this method, you can then update its fields, for example with additional data sent from the client.</span></span>  
  
 <span data-ttu-id="15995-127">新しいエンティティがアタッチされている場合の遅延ローダーをすべての子コレクション (たとえば、`EntitySet`関連付けられているテーブルからエンティティのコレクション) 初期化されます。</span><span class="sxs-lookup"><span data-stu-id="15995-127">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="15995-128">ときに<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、コレクションの電源が入れられます子のメンバー、`Unmodified`状態。</span><span class="sxs-lookup"><span data-stu-id="15995-128">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="15995-129">子コレクションのメンバーを更新するを明示的に呼び出す必要があります`Attach`し、そのエンティティを指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-129">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="15995-130">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-130">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="15995-131">しようとしないで`Attach`エンティティをシリアル化を通じてデタッチされていません。</span><span class="sxs-lookup"><span data-stu-id="15995-131">Do not try to `Attach` an entity that has not been detached through serialization.</span></span> <span data-ttu-id="15995-132">シリアル化されていないエンティティ、エンティティが 2 番目のデータ コンテキストによって追跡された場合、予期しない結果を引き起こす可能性のある遅延ローダーを使用した関連付けを維持します。</span><span class="sxs-lookup"><span data-stu-id="15995-132">Entities that have not been serialized still maintain associations with deferred loaders that can cause unexpected results if the entity becomes tracked by a second data context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * bool -&gt; unit" Usage="table.Attach (entity, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-133">アタッチするエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-133">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="15995-134">エンティティを変更されたとしてアタッチする場合は <see langword="true" />。エンティティを変更されていないとしてアタッチする場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-134">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attach the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-135">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-135">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-136">アタッチする場合*変更済みとして*エンティティのバージョンのメンバーを宣言する必要があるか、または更新の競合の確認に参加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="15995-136">If attaching *as modified*, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="15995-137">新しいエンティティがアタッチされている場合の遅延ローダーをすべての子コレクション (たとえば、`EntitySet`関連付けられているテーブルからエンティティのコレクション) 初期化されます。</span><span class="sxs-lookup"><span data-stu-id="15995-137">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="15995-138">ときに<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、コレクションの電源が入れられます子のメンバー、`Unmodified`状態。</span><span class="sxs-lookup"><span data-stu-id="15995-138">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="15995-139">子コレクションのメンバーを更新するを明示的に呼び出す必要があります`Attach`し、そのエンティティを指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-139">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attach">
      <MemberSignature Language="C#" Value="public void Attach (TEntity entity, TEntity original);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Attach(!TEntity entity, !TEntity original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.Attach(`0,`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Attach (entity As TEntity, original As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Attach(TEntity entity, TEntity original);" />
      <MemberSignature Language="F#" Value="member this.Attach : 'Entity * 'Entity -&gt; unit" Usage="table.Attach (entity, original)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
        <Parameter Name="original" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-140">アタッチするエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-140">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="15995-141">元の状態を格納しているデータ メンバーと同じ種類のエンティティのインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-141">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-142">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> に、エンティティおよびその元の状態を指定して、エンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-142">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-143">次の例では、`Customer`オブジェクトは既に正しく構成されています。</span><span class="sxs-lookup"><span data-stu-id="15995-143">In the following example, the `Customer` object is already correctly configured.</span></span> <span data-ttu-id="15995-144">呼び出すことができます`Attach`更新プログラムを再生する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="15995-144">You can call `Attach` without having to replay the updates.</span></span>  
  
 <span data-ttu-id="15995-145">新しいエンティティがアタッチされている場合の遅延ローダーをすべての子コレクション (たとえば、`EntitySet`関連付けられているテーブルからエンティティのコレクション) 初期化されます。</span><span class="sxs-lookup"><span data-stu-id="15995-145">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="15995-146">ときに<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、コレクションの電源が入れられます子のメンバー、`Unmodified`状態。</span><span class="sxs-lookup"><span data-stu-id="15995-146">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="15995-147">子コレクションのメンバーを更新するを明示的に呼び出す必要があります`Attach`し、そのエンティティを指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-147">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 [!code-csharp[DLinqNTier#4](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#4)]
 [!code-vb[DLinqNTier#4](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AttachAll&lt;TSubEntity&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="15995-148">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-148">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-149">変更として接続する場合、エンティティはバージョン メンバーを宣言する必要があるか、または、更新の競合の確認に参加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="15995-149">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span>  
  
 <span data-ttu-id="15995-150">新しいエンティティがアタッチされている場合の遅延ローダーをすべての子コレクション (たとえば、`EntitySet`関連付けられているテーブルからエンティティのコレクション) 初期化されます。</span><span class="sxs-lookup"><span data-stu-id="15995-150">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="15995-151">ときに<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、コレクションの電源が入れられます子のメンバー、`Unmodified`状態。</span><span class="sxs-lookup"><span data-stu-id="15995-151">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="15995-152">子コレクションのメンバーを更新するを明示的に呼び出す必要があります`Attach`し、そのエンティティを指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-152">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="15995-153">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-153">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.AttachAll entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="15995-154">アタッチするエンティティの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-154">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="15995-155">エンティティのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-155">The collection of entities.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-156">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-156">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-157">このメソッドは、新しいコレクションのすべてのエンティティをアタッチします<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="15995-157">This method attaches all entities of a collection to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="15995-158">新しいエンティティがアタッチされている場合の遅延ローダーをすべての子コレクション (たとえば、`EntitySet`関連付けられているテーブルからエンティティのコレクション) 初期化されます。</span><span class="sxs-lookup"><span data-stu-id="15995-158">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="15995-159">ときに<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、コレクションの電源が入れられます子のメンバー、`Unmodified`状態。</span><span class="sxs-lookup"><span data-stu-id="15995-159">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="15995-160">子コレクションのメンバーを更新するを明示的に呼び出す必要があります`Attach`し、そのエンティティを指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-160">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
 <span data-ttu-id="15995-161">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-161">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachAll&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void AttachAll&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities, bool asModified) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachAll&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.AttachAll``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AttachAll(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity), asModified As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void AttachAll(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities, bool asModified);" />
      <MemberSignature Language="F#" Value="member this.AttachAll : seq&lt;#'Entity&gt; * bool -&gt; unit" Usage="table.AttachAll (entities, asModified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="15995-162">アタッチするエンティティの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-162">The type of entities to attach.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="15995-163">エンティティのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-163">The collection of entities.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="15995-164">オブジェクトにタイムスタンプまたは RowVersion メンバーが含まれている場合は <see langword="true" />、元の値がオプティミスティック同時実行チェックで使用されている場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-164">
              <see langword="true" /> if the object has a timestamp or RowVersion member; <see langword="false" /> if original values are being used for the optimistic concurrency check.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-165">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-165">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-166">このメソッドは、コレクションのすべてのエンティティをアタッチ、<xref:System.Data.Linq.DataContext>いずれかで、*変更*または*未変更*状態。</span><span class="sxs-lookup"><span data-stu-id="15995-166">This method attaches all entities of a collection to the <xref:System.Data.Linq.DataContext> in either a *modified* or *unmodified* state.</span></span> <span data-ttu-id="15995-167">変更として接続する場合、エンティティはバージョン メンバーを宣言する必要があるか、または、更新の競合の確認に参加する必要があります。</span><span class="sxs-lookup"><span data-stu-id="15995-167">If attaching as modified, the entity must either declare a version member or must not participate in update conflict checking.</span></span> <span data-ttu-id="15995-168">未変更としてアタッチ、エンティティは元の値を表すと見なされます。</span><span class="sxs-lookup"><span data-stu-id="15995-168">If attaching as unmodified, the entity is assumed to represent the original value.</span></span> <span data-ttu-id="15995-169">前に、クライアントからの他の情報でこのメソッドを呼び出した後、エンティティのフィールドを変更できる<xref:System.Data.Linq.DataContext.SubmitChanges%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="15995-169">After calling this method, the entity's fields can be modified with other information from the client before <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="15995-170">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-170">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="15995-171">新しいエンティティがアタッチされている場合の遅延ローダーをすべての子コレクション (たとえば、`EntitySet`関連付けられているテーブルからエンティティのコレクション) 初期化されます。</span><span class="sxs-lookup"><span data-stu-id="15995-171">When a new entity is attached, deferred loaders for any child collections (for example, `EntitySet` collections of entities from associated tables) are initialized.</span></span> <span data-ttu-id="15995-172">ときに<xref:System.Data.Linq.DataContext.SubmitChanges%2A>を呼び出すと、コレクションの電源が入れられます子のメンバー、`Unmodified`状態。</span><span class="sxs-lookup"><span data-stu-id="15995-172">When <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called, members of the child collections are put into an `Unmodified` state.</span></span> <span data-ttu-id="15995-173">子コレクションのメンバーを更新するを明示的に呼び出す必要があります`Attach`し、そのエンティティを指定します。</span><span class="sxs-lookup"><span data-stu-id="15995-173">To update members of a child collection, you must explicitly call `Attach` and specify that entity.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="15995-174">次の例は、更新する方法を示しています、`Order`別オブジェクト<xref:System.Data.Linq.DataContext>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="15995-174">The following example shows how you can update an `Order` object on a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="15995-175">この例では、データベースに接続しているし、行ったことを[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)](この例では、Northwind サンプル データベース) では、そのファイル。</span><span class="sxs-lookup"><span data-stu-id="15995-175">The example assumes that you have a connection to a database and have made a [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] file for it (in this case, the Northwind sample database).</span></span>  
  
 [!code-csharp[DLinqNTier#1](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#1)]
 [!code-vb[DLinqNTier#1](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#1)]  
  
 <span data-ttu-id="15995-176">次の例では、アタッチするエンティティ オブジェクトが別のオブジェクトの外部キー リレーションシップとキャッシュに格納されているがアタッチされていません。</span><span class="sxs-lookup"><span data-stu-id="15995-176">In the following example, an entity object to be attached has a foreign key relation with another object and is stored in the cache but not attached.</span></span> <span data-ttu-id="15995-177">呼び出すと<xref:System.Data.Linq.DataContext.SubmitChanges%2A>、`ChangeProcessor`を追加、`Insert`すべての外部キー オブジェクトを操作します。</span><span class="sxs-lookup"><span data-stu-id="15995-177">When you call <xref:System.Data.Linq.DataContext.SubmitChanges%2A>, the `ChangeProcessor` adds an `Insert` operation for all the foreign key objects.</span></span> <span data-ttu-id="15995-178">これは、エンティティ インスタンスが別の再利用する場合の副作用<xref:System.Data.Linq.DataContext>インスタンス。</span><span class="sxs-lookup"><span data-stu-id="15995-178">This is a side-effect when an entity instance is re-used in a different <xref:System.Data.Linq.DataContext> instance.</span></span> <span data-ttu-id="15995-179">このため、[!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]オブジェクトの再利用をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="15995-179">For this reason, [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)] does not support re-use of objects.</span></span>  
  
 [!code-csharp[DlinqNTier#7](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#7)]
 [!code-vb[DlinqNTier#7](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#7)]  
  
 <span data-ttu-id="15995-180">次の例では、顧客 A がすべての注文をキャンセルし、顧客 B は、それらの所有権を取得したが、シナリオを示します。</span><span class="sxs-lookup"><span data-stu-id="15995-180">The following example shows a scenario in which Customer A has canceled all orders and Customer B has taken ownership of them.</span></span> <span data-ttu-id="15995-181">同時に、顧客 A のすべての注文を割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="15995-181">You can attach all orders of Customer A at the same time.</span></span>  
  
 [!code-csharp[DlinqNTier#3](~/samples/snippets/csharp/VS_Snippets_Data/DLinqNTier/cs/Program.cs#3)]
 [!code-vb[DlinqNTier#3](~/samples/snippets/visualbasic/VS_Snippets_Data/DLinqNTier/vb/Module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public System.Data.Linq.DataContext Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.Linq.DataContext Context" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As DataContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::Linq::DataContext ^ Context { System::Data::Linq::DataContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Context : System.Data.Linq.DataContext" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.Context" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.DataContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="15995-182">この <see cref="T:System.Data.Linq.DataContext" /> を取得するために使用されている <see cref="T:System.Data.Linq.Table`1" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-182">Gets the <see cref="T:System.Data.Linq.DataContext" /> that has been used to retrieve this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="15995-183">このテーブルを取得するために使用したデータ コンテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-183">The data context that has been used to retrieve this table.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void DeleteAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void DeleteAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.DeleteAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.DeleteAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="15995-184">削除する要素の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-184">The type of the elements to delete.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="15995-185">削除するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-185">The entities to delete.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-186">コレクションのすべてのエンティティを <see langword="pending delete" /> 状態にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-186">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-187">このメソッドを使用して、削除の保留中状態に格納されるエンティティは非表示にならない後までのクエリ結果から<xref:System.Data.Linq.DataContext.SubmitChanges%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="15995-187">Entities that are put into the pending delete state with this method do not disappear from query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="15995-188">削除する前に、切り離されたエンティティをアタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="15995-188">Disconnected entities must be attached before they can be deleted.</span></span> <span data-ttu-id="15995-189">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-189">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 <span data-ttu-id="15995-190">次の c# スニペットは、このメソッドの 1 つの使用を示しています。</span><span class="sxs-lookup"><span data-stu-id="15995-190">The following C# snippet shows one use for this method:</span></span>  
  
```  
IEnumerable<Customer> customersWithoutOrders = (from c in db.Customers  
   where c.Orders.Count == 0  
   select c).ToList();  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders);  
db.SubmitChanges();  
```  
  
 <span data-ttu-id="15995-191">Visual basic の場合。</span><span class="sxs-lookup"><span data-stu-id="15995-191">In Visual Basic:</span></span>  
  
```  
Dim customersWithoutOrders As IEnumerable(Of Customer) = (From c In db.Customers _   
    Where c.Orders.Count = 0 _   
    Select c).ToList()  
  
db.Customers.DeleteAllOnSubmit(customersWithoutOrders)  
db.SubmitChanges()  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteOnSubmit">
      <MemberSignature Language="C#" Value="public void DeleteOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DeleteOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.DeleteOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DeleteOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DeleteOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.DeleteOnSubmit : 'Entity -&gt; unit" Usage="table.DeleteOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-192">削除するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-192">The entity to be deleted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-193">このテーブルのエンティティを <see langword="pending delete" /> 状態にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-193">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-194">後まで、クエリ結果から削除されたエンティティは消えません<xref:System.Data.Linq.DataContext.SubmitChanges%2A>が呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="15995-194">The removed entity does not disappear from the query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> is called.</span></span> <span data-ttu-id="15995-195">削除する前に、切り離されたエンティティをアタッチ最初にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="15995-195">Disconnected entities must first be attached before they can be deleted.</span></span> <span data-ttu-id="15995-196">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-196">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="15995-197"> は連鎖削除操作をサポートせず、認識もしません。</span><span class="sxs-lookup"><span data-stu-id="15995-197"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="15995-198">設定する必要がありますこれに対する制約を持つテーブルの行を削除する場合、`ON DELETE CASCADE`データベース内の外部キー制約でルールまたは独自のコードを使用して、まず親オブジェクトが削除されないようにする子オブジェクトを削除します。</span><span class="sxs-lookup"><span data-stu-id="15995-198">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="15995-199">それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="15995-199">Otherwise, an exception is thrown.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#3](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#3)]
 [!code-vb[System.Data.Linq.Table#3](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;TEntity&gt; GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator(Of TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="member this.GetEnumerator : unit -&gt; System.Collections.Generic.IEnumerator&lt;'Entity (requires 'Entity : null)&gt;" Usage="table.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="15995-200">コレクションを反復処理する列挙子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-200">Gets an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-201">コレクションの反復処理に使用できる列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-201">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetModifiedMembers">
      <MemberSignature Language="C#" Value="public System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Data.Linq.ModifiedMemberInfo[] GetModifiedMembers(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetModifiedMembers(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetModifiedMembers (entity As TEntity) As ModifiedMemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ GetModifiedMembers(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetModifiedMembers : 'Entity -&gt; System.Data.Linq.ModifiedMemberInfo[]" Usage="table.GetModifiedMembers entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-202">配列の取得元となるエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-202">The entity from which to get the array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-203">現在の値と元の値が格納されている変更されたメンバーの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-203">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-204">現在の値と元の値が格納されている変更されたメンバーの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-204">An array of modified members that contain their current and original values.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNewBindingList">
      <MemberSignature Language="C#" Value="public System.ComponentModel.IBindingList GetNewBindingList ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.ComponentModel.IBindingList GetNewBindingList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetNewBindingList" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNewBindingList () As IBindingList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::ComponentModel::IBindingList ^ GetNewBindingList();" />
      <MemberSignature Language="F#" Value="member this.GetNewBindingList : unit -&gt; System.ComponentModel.IBindingList" Usage="table.GetNewBindingList " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.IBindingList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="15995-205">データ ソースへのバインドのための新しいリストを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-205">Creates a new list for binding to a data source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-206">データ ソースへのバインドのための新しい <see cref="T:System.ComponentModel.IBindingList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-206">A new <see cref="T:System.ComponentModel.IBindingList" /> for binding to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-207">返された一覧は、追加、削除、挿入、更新、およびなどの標準的な操作をサポートしていますが、保存は、プログラマが明示的に管理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="15995-207">The returned list supports standard operations, such as additions, deletions, insertions, and updates, but saves must be explicitly managed by the programmer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOriginalEntityState">
      <MemberSignature Language="C#" Value="public TEntity GetOriginalEntityState (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !TEntity GetOriginalEntityState(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.GetOriginalEntityState(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetOriginalEntityState (entity As TEntity) As TEntity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TEntity GetOriginalEntityState(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.GetOriginalEntityState : 'Entity -&gt; 'Entity" Usage="table.GetOriginalEntityState entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TEntity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-208">元の状態を返す対象のエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-208">The entity whose original state is to be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-209">エンティティの元の状態を格納している <see cref="T:System.Data.Linq.Table`1" /> インスタンスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-209">Returns a <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-210">エンティティの元の状態を格納している <see cref="T:System.Data.Linq.Table`1" /> インスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-210">A <see cref="T:System.Data.Linq.Table`1" /> instance that contains the original state of the entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-211">このメソッドは、いずれかが作成されたか、現在接続されているために、エンティティの元の状態を返します<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="15995-211">This method returns the original state of an entity since it was either created or attached to the current <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="15995-212">シリアル化および逆シリアル化されたエンティティの元の状態を独立した追跡メカニズムによって提供され、新しいエンティティがアタッチされているときに指定する必要があります<xref:System.Data.Linq.DataContext>します。</span><span class="sxs-lookup"><span data-stu-id="15995-212">The original state of an entity that has been serialized and deserialized must be provided by an independent tracking mechanism and supplied when the entity is attached to a new <xref:System.Data.Linq.DataContext>.</span></span> <span data-ttu-id="15995-213">詳細については、次を参照してください。[データの取得および CUD 操作 (LINQ to SQL) の N 層アプリケーションで](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md)します。</span><span class="sxs-lookup"><span data-stu-id="15995-213">For more information, see [Data Retrieval and CUD Operations in N-Tier Applications (LINQ to SQL)](~/docs/framework/data/adonet/sql/linq/data-retrieval-and-cud-operations-in-n-tier-applications.md).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAllOnSubmit&lt;TSubEntity&gt;">
      <MemberSignature Language="C#" Value="public void InsertAllOnSubmit&lt;TSubEntity&gt; (System.Collections.Generic.IEnumerable&lt;TSubEntity&gt; entities) where TSubEntity : TEntity;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAllOnSubmit&lt;(!TEntity) TSubEntity&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSubEntity&gt; entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertAllOnSubmit``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAllOnSubmit(Of TSubEntity As TEntity) (entities As IEnumerable(Of TSubEntity))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSubEntity&gt;&#xA; where TSubEntity : TEntity void InsertAllOnSubmit(System::Collections::Generic::IEnumerable&lt;TSubEntity&gt; ^ entities);" />
      <MemberSignature Language="F#" Value="member this.InsertAllOnSubmit : seq&lt;#'Entity&gt; -&gt; unit" Usage="table.InsertAllOnSubmit entities" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSubEntity">
          <Constraints>
            <BaseTypeName>TEntity</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.Generic.IEnumerable&lt;TSubEntity&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSubEntity">
          <span data-ttu-id="15995-214">挿入する要素の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-214">The type of the elements to insert.</span>
          </span>
        </typeparam>
        <param name="entities">
          <span data-ttu-id="15995-215">追加するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-215">The entities to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-216">
            <see langword="pending insert" /> 状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-216">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in a <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-217">後までのクエリ結果に追加されたエンティティがされません<xref:System.Data.Linq.DataContext.SubmitChanges%2A>が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="15995-217">The added entities will not be in query results until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOnSubmit">
      <MemberSignature Language="C#" Value="public void InsertOnSubmit (TEntity entity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertOnSubmit(!TEntity entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.InsertOnSubmit(`0)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertOnSubmit (entity As TEntity)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertOnSubmit(TEntity entity);" />
      <MemberSignature Language="F#" Value="member this.InsertOnSubmit : 'Entity -&gt; unit" Usage="table.InsertOnSubmit entity" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="TEntity" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-218">追加するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-218">The entity to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-219">
            <see langword="pending insert" /> 状態のエンティティをこの <see cref="T:System.Data.Linq.Table`1" /> に追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-219">Adds an entity in a <see langword="pending insert" /> state to this <see cref="T:System.Data.Linq.Table`1" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-220">追加したエンティティは後までは、このテーブルからのクエリの結果に表示されません<xref:System.Data.Linq.DataContext.SubmitChanges%2A>が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="15995-220">The added entity will not appear in query results from this table until after <xref:System.Data.Linq.DataContext.SubmitChanges%2A> has been called.</span></span>  
  
   
  
## Examples  
 [!code-csharp[System.Data.Linq.Table#1](~/samples/snippets/csharp/VS_Snippets_Data/system.data.linq.table/cs/program.cs#1)]
 [!code-vb[System.Data.Linq.Table#1](~/samples/snippets/visualbasic/VS_Snippets_Data/system.data.linq.table/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.Linq.ITable.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="15995-221">この <see cref="T:System.Data.Linq.Table`1" /> インスタンスに含まれているエンティティの型に主キーがあるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-221">Gets a value that indicates whether the type of the entities contained in this <see cref="T:System.Data.Linq.Table`1" /> instance has a primary key.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="15995-222">エンティティ型に主キーがない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-222">
              <see langword="true" /> if the entity type does not have a primary key; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IEnumerator&lt;TEntity&gt; IEnumerable&lt;TEntity&gt;.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IEnumerator`1&lt;!TEntity&gt; System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#Generic#IEnumerable&lt;TEntity&gt;#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator(Of TEntity) Implements IEnumerable(Of TEntity).GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IEnumerator&lt;TEntity&gt; ^ System.Collections.Generic.IEnumerable&lt;TEntity&gt;.GetEnumerator() = System::Collections::Generic::IEnumerable&lt;TEntity&gt;::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.Generic.IEnumerable`1.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;TEntity&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="15995-223">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-223">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-224">コレクションの反復処理に使用できる列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-224">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="15995-225">コレクションを反復処理する列挙子を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-225">Returns an enumerator that iterates through the collection.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-226">コレクションの反復処理に使用できる列挙子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-226">An enumerator that can be used to iterate through the collection.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-227">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-227">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-228">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Collections.Generic.IEnumerable%601> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-228">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Collections.Generic.IEnumerable%601> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.ContainsListCollection">
      <MemberSignature Language="C#" Value="bool System.ComponentModel.IListSource.ContainsListCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#ComponentModel#IListSource#ContainsListCollection" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ContainsListCollection As Boolean Implements IListSource.ContainsListCollection" />
      <MemberSignature Language="C++ CLI" Value="property bool System.ComponentModel.IListSource.ContainsListCollection { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.ComponentModel.IListSource.ContainsListCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="15995-229">コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-229">Gets a value that indicates whether the collection is a collection of <see cref="T:System.Collections.IList" /> objects.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="15995-230">コレクションが <see cref="T:System.Collections.IList" /> オブジェクトのコレクションである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-230">
              <see langword="true" /> if the collection is a collection of <see cref="T:System.Collections.IList" /> objects; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-231">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-231">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-232">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-232">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ComponentModel.IListSource.GetList">
      <MemberSignature Language="C#" Value="System.Collections.IList IListSource.GetList ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IList System.ComponentModel.IListSource.GetList() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#ComponentModel#IListSource#GetList" />
      <MemberSignature Language="VB.NET" Value="Function GetList () As IList Implements IListSource.GetList" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IList ^ System.ComponentModel.IListSource.GetList() = System::ComponentModel::IListSource::GetList;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="15995-233">それ自体は <see cref="T:System.Collections.IList" /> を実装していないオブジェクトから、データ ソースに連結できる <see cref="T:System.Collections.IList" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-233">Returns an <see cref="T:System.Collections.IList" /> that can be bound to a data source from an object that does not implement an <see cref="T:System.Collections.IList" /> itself.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-234">データ ソースにバインドできる <see cref="T:System.Collections.IList" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-234">An <see cref="T:System.Collections.IList" /> that can be bound to a data source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-235">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-235">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-236">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.ComponentModel.IListSource> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-236">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.ComponentModel.IListSource> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.Attach">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="15995-237">逆シリアル化されたエンティティを、データベースで更新または削除できるように <see cref="T:System.Data.Linq.DataContext" /> の新しいインスタンスに関連付けることができます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-237">Allows deserialized entities to be associated with a new instance of a <see cref="T:System.Data.Linq.DataContext" /> so that they can be updated or deleted from the database.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-238">アタッチするエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-238">The entity to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-239">変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-239">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in an unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-240">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-240">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-241">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-241">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, asModified As Boolean) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, bool asModified) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-242">アタッチするエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-242">The entity to be attached.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="15995-243">エンティティを変更されたとしてアタッチする場合は <see langword="true" />。エンティティを変更されていないとしてアタッチする場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-243">
              <see langword="true" /> to attach the entity as modified; <see langword="false" /> to attached the entity as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-244">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-244">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-245">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-245">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-246">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-246">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.Attach">
      <MemberSignature Language="C#" Value="void ITable.Attach (object entity, object original);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.Attach(object entity, object original) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#Attach(System.Object,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Attach (entity As Object, original As Object) Implements ITable.Attach" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.Attach(System::Object ^ entity, System::Object ^ original) = System::Data::Linq::ITable::Attach;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.Attach(System.Object,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
        <Parameter Name="original" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-247">アタッチするエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-247">The entity to be attached.</span>
          </span>
        </param>
        <param name="original">
          <span data-ttu-id="15995-248">元の状態を格納しているデータ メンバーと同じ種類のエンティティのインスタンス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-248">An instance of the same entity type with data members that contain the original values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-249">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> に、エンティティおよびその元の状態を指定して、エンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-249">Attaches an entity to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state by specifying both the entity and its original state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-250">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-250">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-251">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-251">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="System.Data.Linq.ITable.AttachAll">
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="15995-252">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-252">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="15995-253">アタッチされるエンティティのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-253">The collection of entities to be attached.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-254">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-254">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-255">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-255">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-256">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-256">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.AttachAll">
      <MemberSignature Language="C#" Value="void ITable.AttachAll (System.Collections.IEnumerable entities, bool asModified);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.AttachAll(class System.Collections.IEnumerable entities, bool asModified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#AttachAll(System.Collections.IEnumerable,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Sub AttachAll (entities As IEnumerable, asModified As Boolean) Implements ITable.AttachAll" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.AttachAll(System::Collections::IEnumerable ^ entities, bool asModified) = System::Data::Linq::ITable::AttachAll;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.AttachAll(System.Collections.IEnumerable,System.Boolean)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
        <Parameter Name="asModified" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="15995-257">アタッチされるエンティティのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-257">The collection of entities to be attched.</span>
          </span>
        </param>
        <param name="asModified">
          <span data-ttu-id="15995-258">エンティティを変更されたとしてアタッチする場合は <see langword="true" />。エンティティを変更されていないとしてアタッチする場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-258">
              <see langword="true" /> to attach the entities as modified; <see langword="false" /> to attach the entities as unmodified.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-259">変更された状態または変更されていない状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティをアタッチします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-259">Attaches all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in either a modified or unmodified state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-260">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-260">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-261">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-261">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteAllOnSubmit (entities As IEnumerable) Implements ITable.DeleteAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::DeleteAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="15995-262">削除されるエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-262">The entities being removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-263">コレクションのすべてのエンティティを <see langword="pending delete" /> 状態にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-263">Puts all entities from the collection into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-264">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-264">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-265">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-265">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.DeleteOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.DeleteOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.DeleteOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#DeleteOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub DeleteOnSubmit (entity As Object) Implements ITable.DeleteOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.DeleteOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::DeleteOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.DeleteOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-266">削除するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-266">The entity to be removed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-267">このテーブルのエンティティを <see langword="pending delete" /> 状態にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-267">Puts an entity from this table into a <see langword="pending delete" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-268">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-268">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-269">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-269">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
> [!NOTE]
>  [!INCLUDE[vbtecdlinq](~/includes/vbtecdlinq-md.md)]<span data-ttu-id="15995-270"> は連鎖削除操作をサポートせず、認識もしません。</span><span class="sxs-lookup"><span data-stu-id="15995-270"> does not support or recognize cascade-delete operations.</span></span> <span data-ttu-id="15995-271">設定する必要がありますこれに対する制約を持つテーブルの行を削除する場合、`ON DELETE CASCADE`データベース内の外部キー制約でルールまたは独自のコードを使用して、まず親オブジェクトが削除されないようにする子オブジェクトを削除します。</span><span class="sxs-lookup"><span data-stu-id="15995-271">If you want to delete a row in a table that has constraints against it, you must either set the `ON DELETE CASCADE` rule in the foreign-key constraint in the database, or use your own code to first delete the child objects that prevent the parent object from being deleted.</span></span> <span data-ttu-id="15995-272">それ以外の場合は、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="15995-272">Otherwise, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetModifiedMembers">
      <MemberSignature Language="C#" Value="System.Data.Linq.ModifiedMemberInfo[] ITable.GetModifiedMembers (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance valuetype System.Data.Linq.ModifiedMemberInfo[] System.Data.Linq.ITable.GetModifiedMembers(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetModifiedMembers(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetModifiedMembers (entity As Object) As ModifiedMemberInfo() Implements ITable.GetModifiedMembers" />
      <MemberSignature Language="C++ CLI" Value=" virtual cli::array &lt;System::Data::Linq::ModifiedMemberInfo&gt; ^ System.Data.Linq.ITable.GetModifiedMembers(System::Object ^ entity) = System::Data::Linq::ITable::GetModifiedMembers;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetModifiedMembers(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.Linq.ModifiedMemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-273">変更されたメンバーの取得元となるエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-273">The entity from which to obtain the modified members.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-274">現在の値と元の値が格納されている変更されたメンバーの配列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-274">Returns an array of modified members that contain their current and original values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-275">変更されたメンバーの配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-275">An array of modified members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-276">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-276">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-277">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-277">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.GetOriginalEntityState">
      <MemberSignature Language="C#" Value="object ITable.GetOriginalEntityState (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Data.Linq.ITable.GetOriginalEntityState(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#GetOriginalEntityState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function GetOriginalEntityState (entity As Object) As Object Implements ITable.GetOriginalEntityState" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Data.Linq.ITable.GetOriginalEntityState(System::Object ^ entity) = System::Data::Linq::ITable::GetOriginalEntityState;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.GetOriginalEntityState(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("NOT IMPLEMENTED YET")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-278">アクセスする元の状態を持つエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-278">The entity whose original state is to be accessed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-279">特定のエンティティの元の値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-279">Retrieves original values of a given entity.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-280">元のエンティティのコピー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-280">A copy of the original entity.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-281">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-281">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-282">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-282">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertAllOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertAllOnSubmit (System.Collections.IEnumerable entities);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertAllOnSubmit(class System.Collections.IEnumerable entities) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertAllOnSubmit(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertAllOnSubmit (entities As IEnumerable) Implements ITable.InsertAllOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertAllOnSubmit(System::Collections::IEnumerable ^ entities) = System::Data::Linq::ITable::InsertAllOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertAllOnSubmit(System.Collections.IEnumerable)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entities" Type="System.Collections.IEnumerable" />
      </Parameters>
      <Docs>
        <param name="entities">
          <span data-ttu-id="15995-283">追加されるエンティティのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-283">The collection of entities to be added.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-284">
            <see langword="pending insert" /> 状態の <see cref="T:System.Data.Linq.DataContext" /> にコレクションのすべてのエンティティを追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-284">Adds all entities of a collection to the <see cref="T:System.Data.Linq.DataContext" /> in an <see langword="pending insert" /> state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-285">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-285">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-286">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-286">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.Linq.ITable.InsertOnSubmit">
      <MemberSignature Language="C#" Value="void ITable.InsertOnSubmit (object entity);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Data.Linq.ITable.InsertOnSubmit(object entity) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Data#Linq#ITable#InsertOnSubmit(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub InsertOnSubmit (entity As Object) Implements ITable.InsertOnSubmit" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Data.Linq.ITable.InsertOnSubmit(System::Object ^ entity) = System::Data::Linq::ITable::InsertOnSubmit;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Data.Linq.ITable.InsertOnSubmit(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entity" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="entity">
          <span data-ttu-id="15995-287">追加するエンティティ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-287">The entity to add.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-288">
            <see langword="pending insert" /> 状態のエンティティをこのテーブルに追加します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-288">Adds an entity in a <see langword="pending insert" /> state to this table.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-289">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-289">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-290">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Data.Linq.ITable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-290">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Data.Linq.ITable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.ElementType">
      <MemberSignature Language="C#" Value="Type System.Linq.IQueryable.ElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Linq.IQueryable.ElementType" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#ElementType" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property ElementType As Type Implements IQueryable.ElementType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System.Linq.IQueryable.ElementType { Type ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.ElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="15995-291">このオブジェクトに関連付けられた式ツリーが実行されたときに返される要素の型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-291">Gets the type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="15995-292">このオブジェクトに関連付けられた式ツリーが実行されたときに返される要素の型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-292">The type of the element(s) that are returned when the expression tree associated with this object is executed.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-293">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-293">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-294">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-294">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Expression">
      <MemberSignature Language="C#" Value="System.Linq.Expressions.Expression System.Linq.IQueryable.Expression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.Expressions.Expression System.Linq.IQueryable.Expression" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Expression" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Expression As Expression Implements IQueryable.Expression" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::Expressions::Expression ^ System.Linq.IQueryable.Expression { System::Linq::Expressions::Expression ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.Expression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="15995-295">
            <see cref="T:System.Linq.IQueryable" /> のこのインスタンスに関連付けられている式ツリーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-295">Gets the expression tree that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="15995-296">
            <see cref="T:System.Linq.Expressions.Expression" /> のこのインスタンスに関連付けられている <see cref="T:System.Linq.IQueryable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-296">The <see cref="T:System.Linq.Expressions.Expression" /> that is associated with this instance of <see cref="T:System.Linq.IQueryable" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-297">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-297">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-298">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-298">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryable.Provider">
      <MemberSignature Language="C#" Value="System.Linq.IQueryProvider System.Linq.IQueryable.Provider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Linq.IQueryProvider System.Linq.IQueryable.Provider" />
      <MemberSignature Language="DocId" Value="P:System.Data.Linq.Table`1.System#Linq#IQueryable#Provider" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Provider As IQueryProvider Implements IQueryable.Provider" />
      <MemberSignature Language="C++ CLI" Value="property System::Linq::IQueryProvider ^ System.Linq.IQueryable.Provider { System::Linq::IQueryProvider ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Data.Linq.Table&lt;'Entity (requires 'Entity : null)&gt;.System.Linq.IQueryable.Provider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="15995-299">このデータ ソースに関連付けられたクエリ プロバイダーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-299">Gets the query provider that is associated with this data source.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="15995-300">このデータ ソースに関連付けられた <see cref="T:System.Linq.IQueryProvider" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-300">The <see cref="T:System.Linq.IQueryProvider" /> that is associated with this data source.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-301">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-301">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-302">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryable> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-302">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryable> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable IQueryProvider.CreateQuery (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable System.Linq.IQueryProvider.CreateQuery(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Linq::IQueryable ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="15995-303">評価を実行するためのクエリ式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-303">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-304">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" /> オブジェクトを構築します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-304">Constructs an <see cref="T:System.Linq.IQueryable" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-305">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-305">An <see cref="T:System.Linq.IQueryable" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-306">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-306">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-307">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-307">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="System.Linq.IQueryable&lt;TResult&gt; IQueryProvider.CreateQuery&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Linq.IQueryable`1&lt;!!TResult&gt; System.Linq.IQueryProvider.CreateQuery&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#CreateQuery``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual System::Linq::IQueryable&lt;TResult&gt; ^ System.Linq.IQueryProvider.CreateQuery(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::CreateQuery;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IQueryable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="15995-308">テーブル内のデータの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-308">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="15995-309">評価を実行するためのクエリ式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-309">The query expression from which the evaluation is performed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-310">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" /> オブジェクトを構築します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-310">Constructs an <see cref="T:System.Linq.IQueryable`1" /> object that can evaluate the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-311">指定した式ツリーによって表されるクエリを評価できる <see cref="T:System.Linq.IQueryable`1" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-311">An <see cref="T:System.Linq.IQueryable`1" /> that can evaluate the query represented by the specified expression tree.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-312">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-312">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-313">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-313">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute">
      <MemberSignature Language="C#" Value="object IQueryProvider.Execute (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.Linq.IQueryProvider.Execute(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="15995-314">実行するクエリ式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-314">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-315">指定した式ツリーによって表されるクエリを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-315">Executes the query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-316">指定したクエリの実行結果の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-316">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-317">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-317">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-318">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-318">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Linq.IQueryProvider.Execute&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="TResult IQueryProvider.Execute&lt;TResult&gt; (System.Linq.Expressions.Expression expression);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance !!TResult System.Linq.IQueryProvider.Execute&lt;TResult&gt;(class System.Linq.Expressions.Expression expression) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.System#Linq#IQueryProvider#Execute``1(System.Linq.Expressions.Expression)" />
      <MemberSignature Language="C++ CLI" Value="generic &lt;typename TResult&gt;&#xA; virtual TResult System.Linq.IQueryProvider.Execute(System::Linq::Expressions::Expression ^ expression) = System::Linq::IQueryProvider::Execute;" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="expression" Type="System.Linq.Expressions.Expression" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="15995-319">テーブル内のデータの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-319">The type of the data in the table.</span>
          </span>
        </typeparam>
        <param name="expression">
          <span data-ttu-id="15995-320">実行するクエリ式。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-320">The query expression to execute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="15995-321">指定した式ツリーによって表される、厳密に型指定されたクエリを実行します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-321">Executes the strongly-typed query represented by a specified expression tree.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-322">指定したクエリの実行結果の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-322">The value that results from executing the specified query.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="15995-323">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="15995-323">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="15995-324">これは、<xref:System.Data.Linq.Table%601> のインスタンスが <xref:System.Linq.IQueryProvider> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="15995-324">It can be used only when the <xref:System.Data.Linq.Table%601> instance is cast to an <xref:System.Linq.IQueryProvider> interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.Linq.Table`1.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="table.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data.Linq</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="15995-325">テーブルを表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-325">Returns a string that represents the table.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="15995-326">テーブルの文字列表現。</span>
          <span class="sxs-lookup">
            <span data-stu-id="15995-326">A string representation of the table.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>