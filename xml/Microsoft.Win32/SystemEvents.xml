<Type Name="SystemEvents" FullName="Microsoft.Win32.SystemEvents">
  <TypeSignature Language="C#" Value="public sealed class SystemEvents" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SystemEvents extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Win32.SystemEvents" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SystemEvents" />
  <TypeSignature Language="C++ CLI" Value="public ref class SystemEvents sealed" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="f2678-101">システム イベント通知へのアクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="f2678-101">Provides access to system event notifications.</span></span> <span data-ttu-id="f2678-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="f2678-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2678-103"><xref:Microsoft.Win32.SystemEvents>クラスには、特定の種類のシステム イベントに応答する機能が用意されています。</span><span class="sxs-lookup"><span data-stu-id="f2678-103">The <xref:Microsoft.Win32.SystemEvents> class provides the ability to respond to specific types of system events.</span></span>  
  
 <span data-ttu-id="f2678-104">システム イベントが発生すると、システム イベントを監視するスレッドを使用して、イベントにアタッチされているすべてのデリゲートが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f2678-104">When a system event is raised, any delegates attached to the event are called using the thread that monitors for system events.</span></span> <span data-ttu-id="f2678-105">したがってから、イベント ハンドラーのスレッド セーフの呼び出しをする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-105">Therefore, you should make any calls from your event handlers thread-safe.</span></span> <span data-ttu-id="f2678-106">使用することができますが、このクラスのメンバーとして公開されていないシステム イベントを呼び出す必要がある場合、<xref:Microsoft.Win32.SystemEvents.InvokeOnEventsThread%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="f2678-106">If you need to call a system event that is not exposed as a member of this class, you can use the <xref:Microsoft.Win32.SystemEvents.InvokeOnEventsThread%2A> method.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-107">その他のアプリケーションが機能しないことがありますので、システムのイベント ハンドラーを発生させるスレッドの時間のかかる処理を実行しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-107">Do not perform time-consuming processing on the thread that raises a system event handler because it might prevent other applications from functioning.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2678-108">一部のシステム イベントを発生しない可能性が[!INCLUDE[windowsver](~/includes/windowsver-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="f2678-108">Some system events might not be raised on [!INCLUDE[windowsver](~/includes/windowsver-md.md)].</span></span> <span data-ttu-id="f2678-109">アプリケーションがで期待どおりに機能することを確認することを確認する[!INCLUDE[windowsver](~/includes/windowsver-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="f2678-109">Be sure to verify that your application works as expected on [!INCLUDE[windowsver](~/includes/windowsver-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2678-110">このセクションには、2 つの例が含まれています。</span><span class="sxs-lookup"><span data-stu-id="f2678-110">This section contains two examples.</span></span> <span data-ttu-id="f2678-111">最初の例では、通常のアプリケーションでシステム イベントを使用する方法と、2 番目の例は、Windows サービスでシステム イベントを使用する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2678-111">The first example shows how to use system events in an ordinary application, and the second example shows how to use system events in a Windows service.</span></span>  
  
 <span data-ttu-id="f2678-112">**例 1**</span><span class="sxs-lookup"><span data-stu-id="f2678-112">**Example 1**</span></span>  
  
 <span data-ttu-id="f2678-113">次のコード例では、一部のシステム イベントに関心を登録し、それらのイベントが発生するを待機します。</span><span class="sxs-lookup"><span data-stu-id="f2678-113">The following code example registers interest in some system events and then waits for any of those events to occur.</span></span> <span data-ttu-id="f2678-114">ような出力は、ユーザーは、ディスプレイの解像度を変更した場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-114">The output shown occurs if the user changes the display resolution.</span></span>  
  
 [!code-cpp[SystemEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SystemEvents/cpp/SystemEvents.cpp#1)]
 [!code-csharp[SystemEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SystemEvents/CS/SystemEvents.cs#1)]
 [!code-vb[SystemEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SystemEvents/VB/SystemEvents.vb#1)]  
  
 <span data-ttu-id="f2678-115">**例 2**</span><span class="sxs-lookup"><span data-stu-id="f2678-115">**Example 2**</span></span>  
  
 <span data-ttu-id="f2678-116">次のコード例に示しますを処理する非常にシンプルな Windows サービス、<xref:Microsoft.Win32.SystemEvents.TimeChanged>と<xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="f2678-116">The following code example demonstrates a very simple Windows service that handles the <xref:Microsoft.Win32.SystemEvents.TimeChanged> and <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanged> events.</span></span> <span data-ttu-id="f2678-117">この例には、という名前のサービスが含まれています。 `SimpleService`、という名前のフォーム`HiddenForm`、およびインストーラーです。</span><span class="sxs-lookup"><span data-stu-id="f2678-117">The example includes a service named `SimpleService`, a form named `HiddenForm`, and an installer.</span></span> <span data-ttu-id="f2678-118">フォームは、システム イベントで必要とされるメッセージ ループを提供します。</span><span class="sxs-lookup"><span data-stu-id="f2678-118">The form provides the message loop that is required by system events.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2678-119">サービスは、デスクトップと対話することが許可されている場合を除き、メッセージ ループがありません。</span><span class="sxs-lookup"><span data-stu-id="f2678-119">Services do not have message loops, unless they are allowed to interact with the desktop.</span></span> <span data-ttu-id="f2678-120">メッセージ ループは、非表示のフォームによって提供されていない、この例のように、サービスをローカル システム アカウントで実行する必要があり、デスクトップとの対話を有効にする手動の介入が必要です。</span><span class="sxs-lookup"><span data-stu-id="f2678-120">If the message loop is not provided by a hidden form, as in this example, the service must be run under the local system account, and manual intervention is required to enable interaction with the desktop.</span></span> <span data-ttu-id="f2678-121">管理者を確認する必要があります手動で、**デスクトップとの対話をサービスに許可**チェック ボックスをオン、**ログオン**サービスのプロパティ ダイアログ ボックスのタブです。</span><span class="sxs-lookup"><span data-stu-id="f2678-121">That is, the administrator must manually check the **Allow service to interact with desktop** check box on the **Log On** tab of the service properties dialog box.</span></span> <span data-ttu-id="f2678-122">その場合は、メッセージ ループは自動的に提供します。</span><span class="sxs-lookup"><span data-stu-id="f2678-122">In that case, a message loop is automatically provided.</span></span> <span data-ttu-id="f2678-123">このオプションは、サービスがローカル システム アカウントで実行時にのみ使用します。</span><span class="sxs-lookup"><span data-stu-id="f2678-123">This option is available only when the service is run under the local system account.</span></span> <span data-ttu-id="f2678-124">デスクトップとの対話は、プログラムで有効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="f2678-124">Interaction with the desktop cannot be enabled programmatically.</span></span>  
  
 <span data-ttu-id="f2678-125">この例では、サービスのインスタンスを実行するスレッドが開始`HiddenForm`です。</span><span class="sxs-lookup"><span data-stu-id="f2678-125">The service in this example starts a thread that runs an instance of `HiddenForm`.</span></span> <span data-ttu-id="f2678-126">イベントでは、フックされ、フォームで処理することができます。</span><span class="sxs-lookup"><span data-stu-id="f2678-126">The events are hooked up and handled in the form.</span></span> <span data-ttu-id="f2678-127">フォームが完全に読み込まれている最初; かどうかを確認する、フォームの load イベントにイベントをフックする必要があります。それ以外の場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-127">The events must be hooked up in the load event of the form, to make sure that the form is completely loaded first; otherwise the events will not be raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2678-128">この例では、必要なすべてのコードを通常 Visual Studio のデザイナーで生成されるフォームの初期化コードを含むを提供します。</span><span class="sxs-lookup"><span data-stu-id="f2678-128">The example provides all the necessary code, including the form initialization code typically generated by Visual Studio designers.</span></span> <span data-ttu-id="f2678-129">Visual Studio でサービスを開発している場合は、2 番目の部分クラスを省略して、使用することができます、**プロパティ**をゼロに境界線スタイルを非表示のフォームの幅と高さを設定するウィンドウ<xref:System.Windows.Forms.FormBorderStyle.None?displayProperty=nameWithType>、およびするウィンドウの状態<xref:System.Windows.Forms.FormWindowState.Minimized?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="f2678-129">If you are developing your service in Visual Studio, you can omit the second partial class and use the **Properties** window to set the height and width of the hidden form to zero, the border style to <xref:System.Windows.Forms.FormBorderStyle.None?displayProperty=nameWithType>, and the window state to <xref:System.Windows.Forms.FormWindowState.Minimized?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="f2678-130">例を実行します。</span><span class="sxs-lookup"><span data-stu-id="f2678-130">To run the example:</span></span>  
  
1.  <span data-ttu-id="f2678-131">コマンドラインからコードをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="f2678-131">Compile the code from the command line.</span></span> <span data-ttu-id="f2678-132">ソース ファイルを使用する名前は重要ではありません。</span><span class="sxs-lookup"><span data-stu-id="f2678-132">The name that you use for the source file is not important.</span></span>  
  
2.  <span data-ttu-id="f2678-133">使用して、コマンドラインからサービスをインストール、 [Installutil.exe (インストーラー ツール)](~/docs/framework/tools/installutil-exe-installer-tool.md)ユーティリティです。</span><span class="sxs-lookup"><span data-stu-id="f2678-133">Install the service from the command line using the [Installutil.exe (Installer Tool)](~/docs/framework/tools/installutil-exe-installer-tool.md) utility.</span></span> <span data-ttu-id="f2678-134">たとえば、`InstallUtil example.exe`場合は、ソース ファイルの名前は`example.cs`または`example.vb`です。</span><span class="sxs-lookup"><span data-stu-id="f2678-134">For example, `InstallUtil example.exe` if the source file name is `example.cs` or `example.vb`.</span></span> <span data-ttu-id="f2678-135">管理者は、サービスをインストールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-135">You must be an administrator to install the service.</span></span>  
  
3.  <span data-ttu-id="f2678-136">サービスを開始するのにには、サービス コンソールを使用します。</span><span class="sxs-lookup"><span data-stu-id="f2678-136">Use the Services console to start the service.</span></span>  
  
4.  <span data-ttu-id="f2678-137">システム時刻を変更するか、マウスのプロパティなどのユーザー設定を変更します。</span><span class="sxs-lookup"><span data-stu-id="f2678-137">Change the system time, or change user preferences, such as mouse properties.</span></span>  
  
5.  <span data-ttu-id="f2678-138">内のメッセージを表示、**アプリケーション**イベント ビューアーのカテゴリ。</span><span class="sxs-lookup"><span data-stu-id="f2678-138">View the messages in the **Application** category of Event Viewer.</span></span>  
  
6.  <span data-ttu-id="f2678-139">サービスを停止するのにには、サービス コンソールを使用します。</span><span class="sxs-lookup"><span data-stu-id="f2678-139">Use the Services console to stop the service.</span></span>  
  
7.  <span data-ttu-id="f2678-140">使用してコマンドラインからサービスをアンインストール、`/u`オプション。</span><span class="sxs-lookup"><span data-stu-id="f2678-140">Uninstall the service from the command line by using the `/u` option.</span></span> <span data-ttu-id="f2678-141">たとえば、`InstallUtil /u example.exe` のようにします。</span><span class="sxs-lookup"><span data-stu-id="f2678-141">For example, `InstallUtil /u example.exe`.</span></span>  
  
 [!code-csharp[ManagedWindowsService#1](~/samples/snippets/csharp/VS_Snippets_CLR/ManagedWindowsService/cs/source.cs#1)]
 [!code-vb[ManagedWindowsService#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/ManagedWindowsService/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.NamedPermissionSet"><span data-ttu-id="f2678-142">システム リソースへのフル アクセスできます。</span><span class="sxs-lookup"><span data-stu-id="f2678-142">for full access to system resources.</span></span> <span data-ttu-id="f2678-143">値を要求:<see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />です。</span><span class="sxs-lookup"><span data-stu-id="f2678-143">Demand values: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="f2678-144">関連付けられた状態。</span><span class="sxs-lookup"><span data-stu-id="f2678-144">Associated state:</span></span></permission>
    <altmember cref="T:Microsoft.Win32.PowerModeChangedEventHandler" />
    <altmember cref="T:Microsoft.Win32.SessionEndedEventHandler" />
    <altmember cref="T:Microsoft.Win32.SessionEndingEventHandler" />
    <altmember cref="T:Microsoft.Win32.SessionSwitchEventHandler" />
    <altmember cref="T:Microsoft.Win32.TimerElapsedEventHandler" />
    <altmember cref="T:Microsoft.Win32.UserPreferenceChangedEventHandler" />
    <altmember cref="T:Microsoft.Win32.UserPreferenceChangingEventHandler" />
  </Docs>
  <Members>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static IntPtr CreateTimer (int interval);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int CreateTimer(int32 interval) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.SystemEvents.CreateTimer(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateTimer (interval As Integer) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr CreateTimer(int interval);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="interval"><span data-ttu-id="f2678-145">タイマー通知の間隔 (ミリ秒) を指定します。</span><span class="sxs-lookup"><span data-stu-id="f2678-145">Specifies the interval between timer notifications, in milliseconds.</span></span></param>
        <summary><span data-ttu-id="f2678-146">システム イベント ウィンドウに関連付けられた新しいウィンドウ タイマーを作成します。</span><span class="sxs-lookup"><span data-stu-id="f2678-146">Creates a new window timer associated with the system events window.</span></span></summary>
        <returns><span data-ttu-id="f2678-147">新しいタイマーの ID。</span><span class="sxs-lookup"><span data-stu-id="f2678-147">The ID of the new timer.</span></span></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="f2678-148">間隔が 0 以下です。</span><span class="sxs-lookup"><span data-stu-id="f2678-148">The interval is less than or equal to zero.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-149">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-149">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-150">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-150">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-151">システム イベント ウィンドウ スレッドの作成が成功しなかったか、タイマーの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-151">The attempt to create a system events window thread did not succeed, or the attempt to create the timer did not succeed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="DisplaySettingsChanged">
      <MemberSignature Language="C#" Value="public static event EventHandler DisplaySettingsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DisplaySettingsChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event DisplaySettingsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ DisplaySettingsChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-152">ユーザーが表示設定を変更すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-152">Occurs when the user changes the display settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-153">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-153">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2678-154">次のコード例では、監視、<xref:Microsoft.Win32.SystemEvents.DisplaySettingsChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="f2678-154">The following code example demonstrates how to monitor the <xref:Microsoft.Win32.SystemEvents.DisplaySettingsChanged> event.</span></span> <span data-ttu-id="f2678-155">このコード例に示されている例の一部である、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-155">This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
 [!code-cpp[SystemEvents#2](~/samples/snippets/cpp/VS_Snippets_Winforms/SystemEvents/cpp/SystemEvents.cpp#2)]
 [!code-csharp[SystemEvents#2](~/samples/snippets/csharp/VS_Snippets_Winforms/SystemEvents/CS/SystemEvents.cs#2)]
 [!code-vb[SystemEvents#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SystemEvents/VB/SystemEvents.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-156">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-156">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-157">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-157">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-158">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-158">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanging" />
      </Docs>
    </Member>
    <Member MemberName="DisplaySettingsChanging">
      <MemberSignature Language="C#" Value="public static event EventHandler DisplaySettingsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DisplaySettingsChanging" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event DisplaySettingsChanging As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ DisplaySettingsChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-159">表示設定が変更されているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-159">Occurs when the display settings are changing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-160">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-160">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-161">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-161">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-162">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-162">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-163">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-163">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="E:Microsoft.Win32.SystemEvents.DisplaySettingsChanged" />
      </Docs>
    </Member>
    <Member MemberName="EventsThreadShutdown">
      <MemberSignature Language="C#" Value="public static event EventHandler EventsThreadShutdown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EventsThreadShutdown" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.EventsThreadShutdown" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event EventsThreadShutdown As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ EventsThreadShutdown;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-164">システム イベントを待機するスレッドが終了する前に発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-164">Occurs before the thread that listens for system events is terminated.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2678-165">このイベントは、システム イベントをリッスンしているスレッドが終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-165">This event is raised as the thread that listens for system events is about to be terminated.</span></span> <span data-ttu-id="f2678-166">システム イベントのデリゲートは、システム イベントをリッスンしているスレッドを使用して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f2678-166">System event delegates are invoked using the thread that listens for system events.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-167">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-167">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-168">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-168">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-169">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-169">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-170">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-170">The attempt to create a system events window thread did not succeed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InstalledFontsChanged">
      <MemberSignature Language="C#" Value="public static event EventHandler InstalledFontsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler InstalledFontsChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.InstalledFontsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event InstalledFontsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ InstalledFontsChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-171">ユーザーがシステム フォントを追加するか、またはシステム フォントを削除すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-171">Occurs when the user adds fonts to or removes fonts from the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-172">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-172">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-173">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-173">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-174">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-174">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-175">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-175">The attempt to create a system events window thread did not succeed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="InvokeOnEventsThread">
      <MemberSignature Language="C#" Value="public static void InvokeOnEventsThread (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void InvokeOnEventsThread(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.SystemEvents.InvokeOnEventsThread(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub InvokeOnEventsThread (method As Delegate)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void InvokeOnEventsThread(Delegate ^ method);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="f2678-176">システム イベントを待機するスレッドを使って呼び出すデリゲート。</span><span class="sxs-lookup"><span data-stu-id="f2678-176">A delegate to invoke using the thread that listens for system events.</span></span></param>
        <summary><span data-ttu-id="f2678-177">システム イベントを待機するスレッドを使って指定したデリゲートを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="f2678-177">Invokes the specified delegate using the thread that listens for system events.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2678-178">このメソッドを使用するといつでもシステム イベントを処理する必要のあるによってそれ以外の場合に公開されませんが、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-178">You can use this method any time that you need to handle a system event that is not exposed otherwise by the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
 <span data-ttu-id="f2678-179">このメソッドを呼び出すときに指定されたデリゲートは、アプリケーションがシステム イベントの処理に使用しているスレッドで呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="f2678-179">When you call this method, the specified delegate will be invoked by the thread that your application is using to process system events.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-180">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-180">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-181">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-181">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-182">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-182">The attempt to create a system events window thread did not succeed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="KillTimer">
      <MemberSignature Language="C#" Value="public static void KillTimer (IntPtr timerId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void KillTimer(native int timerId) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Win32.SystemEvents.KillTimer(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub KillTimer (timerId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void KillTimer(IntPtr timerId);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timerId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="timerId"><span data-ttu-id="f2678-183">終了するタイマーの ID。</span><span class="sxs-lookup"><span data-stu-id="f2678-183">The ID of the timer to terminate.</span></span></param>
        <summary><span data-ttu-id="f2678-184">特定の ID によって指定されたタイマーが終了します。</span><span class="sxs-lookup"><span data-stu-id="f2678-184">Terminates the timer specified by the given id.</span></span></summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-185">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-185">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-186">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-186">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-187">システム イベント ウィンドウ スレッドの作成が成功しなかったか、タイマーの終了が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-187">The attempt to create a system events window thread did not succeed, or the attempt to terminate the timer did not succeed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LowMemory">
      <MemberSignature Language="C#" Value="public static event EventHandler LowMemory;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LowMemory" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.LowMemory" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event LowMemory As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ LowMemory;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-188">システムで使用可能な RAM が不足すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-188">Occurs when the system is running out of available RAM.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2678-189">このイベントは、WM_COMPACTING メッセージをラップします。</span><span class="sxs-lookup"><span data-stu-id="f2678-189">This event wraps the WM_COMPACTING message.</span></span> <span data-ttu-id="f2678-190">このメッセージは、システムでは、30 から 60 秒間隔でのシステム時刻の 12.5% 以上要しているメモリを圧縮することが検出された場合、すべての最上位ウィンドウに送信されます。</span><span class="sxs-lookup"><span data-stu-id="f2678-190">This message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory.</span></span> <span data-ttu-id="f2678-191">これは、システム メモリが不足していることを示します。</span><span class="sxs-lookup"><span data-stu-id="f2678-191">This indicates that system memory is low.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2678-192">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-192">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-193">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-193">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-194">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-194">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-195">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-195">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-196">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-196">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-197">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-197">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-198">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-198">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <block subset="none" type="usage">
          <para><span data-ttu-id="f2678-199">このメッセージは、16 ビットの Windows ベースのアプリケーションとの互換性のためだけに提供されます。</span><span class="sxs-lookup"><span data-stu-id="f2678-199">This message is provided only for compatibility with 16-bit Windows-based applications.</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PaletteChanged">
      <MemberSignature Language="C#" Value="public static event EventHandler PaletteChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaletteChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.PaletteChanged" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event PaletteChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ PaletteChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-200">ユーザーが、別のパレットを使用するアプリケーションに切り替えると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-200">Occurs when the user switches to an application that uses a different palette.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-201">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-201">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-202">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-202">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-203">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-203">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-204">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-204">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2678-205">次のコード例では、監視、<xref:Microsoft.Win32.SystemEvents.PaletteChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="f2678-205">The following code example demonstrates how to monitor the <xref:Microsoft.Win32.SystemEvents.PaletteChanged> event.</span></span> <span data-ttu-id="f2678-206">このコード例に示されている例の一部である、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-206">This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
 [!code-cpp[SystemEvents#2](~/samples/snippets/cpp/VS_Snippets_Winforms/SystemEvents/cpp/SystemEvents.cpp#2)]
 [!code-csharp[SystemEvents#2](~/samples/snippets/csharp/VS_Snippets_Winforms/SystemEvents/CS/SystemEvents.cs#2)]
 [!code-vb[SystemEvents#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SystemEvents/VB/SystemEvents.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-207">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-207">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-208">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-208">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-209">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-209">The attempt to create a system events window thread did not succeed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="PowerModeChanged">
      <MemberSignature Language="C#" Value="public static event Microsoft.Win32.PowerModeChangedEventHandler PowerModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Win32.PowerModeChangedEventHandler PowerModeChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.PowerModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event PowerModeChanged As PowerModeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event Microsoft::Win32::PowerModeChangedEventHandler ^ PowerModeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.PowerModeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-210">ユーザーがシステムを中断または再開すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-210">Occurs when the user suspends or resumes the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-211">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-211">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-212">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-212">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-213">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-213">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-214">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-214">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-215">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-215">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-216">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-216">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-217">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-217">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="T:Microsoft.Win32.PowerModeChangedEventArgs" />
        <altmember cref="T:Microsoft.Win32.PowerModeChangedEventHandler" />
        <altmember cref="T:Microsoft.Win32.PowerModes" />
      </Docs>
    </Member>
    <Member MemberName="SessionEnded">
      <MemberSignature Language="C#" Value="public static event Microsoft.Win32.SessionEndedEventHandler SessionEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Win32.SessionEndedEventHandler SessionEnded" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.SessionEnded" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event SessionEnded As SessionEndedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event Microsoft::Win32::SessionEndedEventHandler ^ SessionEnded;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SessionEndedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-218">ユーザーがシステムからログオフするか、システムをシャットダウンすると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-218">Occurs when the user is logging off or shutting down the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-219">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-219">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-220">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-220">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-221">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-221">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-222">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-222">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-223">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-223">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-224">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-224">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-225">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-225">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="T:Microsoft.Win32.SessionEndedEventArgs" />
        <altmember cref="T:Microsoft.Win32.SessionEndedEventHandler" />
        <altmember cref="T:Microsoft.Win32.SessionEndReasons" />
      </Docs>
    </Member>
    <Member MemberName="SessionEnding">
      <MemberSignature Language="C#" Value="public static event Microsoft.Win32.SessionEndingEventHandler SessionEnding;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Win32.SessionEndingEventHandler SessionEnding" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.SessionEnding" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event SessionEnding As SessionEndingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event Microsoft::Win32::SessionEndingEventHandler ^ SessionEnding;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SessionEndingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-226">ユーザーがシステムからログオフしようとした場合、またはシステムをシャットダウンしようとした場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-226">Occurs when the user is trying to log off or shut down the system.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2678-227">これは、キャンセルできるイベントです。</span><span class="sxs-lookup"><span data-stu-id="f2678-227">This is a cancelable event.</span></span> <span data-ttu-id="f2678-228">設定、<xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A>プロパティを`true`セッションが引き続き実行を要求します。</span><span class="sxs-lookup"><span data-stu-id="f2678-228">Setting the <xref:Microsoft.Win32.SessionEndingEventArgs.Cancel%2A> property to `true` will request that the session continues to run.</span></span> <span data-ttu-id="f2678-229">セッションは終了しませんされるという保証が提供されません。</span><span class="sxs-lookup"><span data-stu-id="f2678-229">It provides no guarantee that the session will not end.</span></span>  
  
 <span data-ttu-id="f2678-230">使用している場合<xref:Microsoft.Win32.SystemEvents.SessionEnding>システム logoff や再起動を検出するために Windows フォームでは決定的な方法を決定するかどうか、<xref:System.Windows.Forms.Form.Closing>イベントは、このイベントの前に発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-230">If you are using <xref:Microsoft.Win32.SystemEvents.SessionEnding> in a Windows form to detect a system logoff or reboot, there is no deterministic way to decide whether the <xref:System.Windows.Forms.Form.Closing> event will fire before this event.</span></span>  
  
 <span data-ttu-id="f2678-231">前に特別なタスクを実行したい場合<xref:System.Windows.Forms.Form.Closing>はことを確認する必要があります、発生した<xref:Microsoft.Win32.SystemEvents.SessionEnding>する前に発生<xref:System.Windows.Forms.Form.Closing>です。</span><span class="sxs-lookup"><span data-stu-id="f2678-231">If you want to perform some special tasks before <xref:System.Windows.Forms.Form.Closing> is fired, you need to ensure that <xref:Microsoft.Win32.SystemEvents.SessionEnding> fires before <xref:System.Windows.Forms.Form.Closing>.</span></span> <span data-ttu-id="f2678-232">これを行うには、トラップする必要があります、`WM_QUERYENDSESSION`オーバーライドすることで、フォームで、`WndProc`関数。</span><span class="sxs-lookup"><span data-stu-id="f2678-232">To do this, you need to trap the `WM_QUERYENDSESSION` in the form by overriding the `WndProc` function.</span></span>  <span data-ttu-id="f2678-233">この例では、これを行う方法を示します。</span><span class="sxs-lookup"><span data-stu-id="f2678-233">This example demonstrates how to do this.</span></span>  
  
```vb  
Private Shared WM_QUERYENDSESSION As Integer = &H11  
 Private Shared systemShutdown As Boolean = False  
 Protected Overrides Sub WndProc(ByRef m As System.Windows.Forms.Message)  
     If m.Msg = WM_QUERYENDSESSION Then  
         MessageBox.Show("queryendsession: this is a logoff, shutdown, or reboot")  
         systemShutdown = True  
     End If  
     ' If this is WM_QUERYENDSESSION, the closing event should be raised in the base WndProc.  
     MyBase.WndProc(m)  
 End Sub 'WndProc   
 Private Sub Form1_Closing(ByVal sender As System.Object, ByVal e As System.ComponentModel.CancelEventArgs) Handles MyBase.Closing  
     If (systemShutdown) Then  
     ' Reset the variable because the user might cancel the shutdown.  
         systemShutdown = False  
         If (System.Windows.Forms.DialogResult.Yes = _  
                 MessageBox.Show("My application", "Do you want to save your work before logging off?", MessageBoxButtons.YesNo)) Then  
                 e.Cancel = True  
         Else  
                 e.Cancel = False  
         End If  
     End If  
 End Sub  
  
```  
  
```csharp  
private static int WM_QUERYENDSESSION = 0x11;  
private static bool systemShutdown = false;  
protected override void WndProc(ref System.Windows.Forms.Message m)  
{  
    if (m.Msg==WM_QUERYENDSESSION)  
    {  
        MessageBox.Show("queryendsession: this is a logoff, shutdown, or reboot");  
        systemShutdown = true;  
    }  
  
    // If this is WM_QUERYENDSESSION, the closing event should be  
    // raised in the base WndProc.  
    base.WndProc(ref m);  
  
} //WndProc   
  
private void Form1_Closing(  
    System.Object sender,   
    System.ComponentModel.CancelEventArgs e)  
{  
    if (systemShutdown)  
        // Reset the variable because the user might cancel the   
        // shutdown.  
    {  
        systemShutdown = false;  
        if (DialogResult.Yes==MessageBox.Show("My application",   
            "Do you want to save your work before logging off?",   
            MessageBoxButtons.YesNo))  
        {  
            e.Cancel = true;  
        }  
        else  
        {  
            e.Cancel = false;  
        }  
    }  
}  
```  
  
> [!IMPORTANT]
>  <span data-ttu-id="f2678-234">コンソール アプリケーションは発生せず、<xref:Microsoft.Win32.SystemEvents.SessionEnding>イベント。</span><span class="sxs-lookup"><span data-stu-id="f2678-234">Console applications do not raise the <xref:Microsoft.Win32.SystemEvents.SessionEnding> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="f2678-235">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-235">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-236">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-236">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-237">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-237">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-238">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-238">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-239">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-239">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-240">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-240">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-241">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-241">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="T:Microsoft.Win32.SessionEndingEventArgs" />
        <altmember cref="T:Microsoft.Win32.SessionEndingEventHandler" />
        <altmember cref="T:Microsoft.Win32.SessionEndReasons" />
      </Docs>
    </Member>
    <Member MemberName="SessionSwitch">
      <MemberSignature Language="C#" Value="public static event Microsoft.Win32.SessionSwitchEventHandler SessionSwitch;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Win32.SessionSwitchEventHandler SessionSwitch" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.SessionSwitch" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event SessionSwitch As SessionSwitchEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event Microsoft::Win32::SessionSwitchEventHandler ^ SessionSwitch;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.SessionSwitchEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-242">現在ログインしているユーザーが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-242">Occurs when the currently logged-in user has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-243">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-243">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-244">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-244">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-245">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-245">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-246">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-246">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-247">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-247">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-248">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-248">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-249">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-249">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="T:Microsoft.Win32.SessionSwitchEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="TimeChanged">
      <MemberSignature Language="C#" Value="public static event EventHandler TimeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TimeChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.TimeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event TimeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ TimeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-250">ユーザーがシステム時間を変更すると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-250">Occurs when the user changes the time on the system clock.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-251">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-251">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-252">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-252">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-253">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-253">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-254">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-254">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-255">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-255">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-256">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-256">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-257">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-257">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="P:System.DateTime.Now" />
      </Docs>
    </Member>
    <Member MemberName="TimerElapsed">
      <MemberSignature Language="C#" Value="public static event Microsoft.Win32.TimerElapsedEventHandler TimerElapsed;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Win32.TimerElapsedEventHandler TimerElapsed" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.TimerElapsed" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event TimerElapsed As TimerElapsedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event Microsoft::Win32::TimerElapsedEventHandler ^ TimerElapsed;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.TimerElapsedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-258">ウィンドウ タイマー間隔が経過したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-258">Occurs when a windows timer interval has expired.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-259">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-259">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-260">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-260">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-261">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-261">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-262">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-262">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-263">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-263">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-264">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-264">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-265">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-265">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="T:Microsoft.Win32.TimerElapsedEventArgs" />
        <altmember cref="T:Microsoft.Win32.TimerElapsedEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="UserPreferenceChanged">
      <MemberSignature Language="C#" Value="public static event Microsoft.Win32.UserPreferenceChangedEventHandler UserPreferenceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Win32.UserPreferenceChangedEventHandler UserPreferenceChanged" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.UserPreferenceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event UserPreferenceChanged As UserPreferenceChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event Microsoft::Win32::UserPreferenceChangedEventHandler ^ UserPreferenceChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.UserPreferenceChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-266">ユーザー設定が変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-266">Occurs when a user preference has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-267">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-267">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-268">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-268">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-269">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-269">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-270">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-270">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-271">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-271">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-272">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-272">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-273">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-273">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="T:Microsoft.Win32.UserPreferenceChangedEventArgs" />
        <altmember cref="T:Microsoft.Win32.UserPreferenceChangedEventHandler" />
        <altmember cref="T:Microsoft.Win32.UserPreferenceCategory" />
      </Docs>
    </Member>
    <Member MemberName="UserPreferenceChanging">
      <MemberSignature Language="C#" Value="public static event Microsoft.Win32.UserPreferenceChangingEventHandler UserPreferenceChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class Microsoft.Win32.UserPreferenceChangingEventHandler UserPreferenceChanging" />
      <MemberSignature Language="DocId" Value="E:Microsoft.Win32.SystemEvents.UserPreferenceChanging" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event UserPreferenceChanging As UserPreferenceChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event Microsoft::Win32::UserPreferenceChangingEventHandler ^ UserPreferenceChanging;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO("Currently does nothing on Mono")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.UserPreferenceChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="f2678-274">ユーザー設定を変更しているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-274">Occurs when a user preference is changing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="f2678-275">このイベントは、メッセージ ポンプが実行されている場合にのみ発生します。</span><span class="sxs-lookup"><span data-stu-id="f2678-275">This event is only raised if the message pump is running.</span></span> <span data-ttu-id="f2678-276">Windows サービスで非表示のフォームを使用またはメッセージ ポンプが手動で開始された場合を除き、このイベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="f2678-276">In a Windows service, unless a hidden form is used or the message pump has been started manually, this event will not be raised.</span></span> <span data-ttu-id="f2678-277">Windows サービスで非表示のフォームを使用して、システム イベントを処理する方法を示すコード例については、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-277">For a code example that shows how to handle system events by using a hidden form in a Windows service, see the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="f2678-278">これは、静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークは発生時に、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-278">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2678-279">次のコード例では、監視、<xref:Microsoft.Win32.SystemEvents.UserPreferenceChanging>イベント。</span><span class="sxs-lookup"><span data-stu-id="f2678-279">The following code example demonstrates how to monitor the <xref:Microsoft.Win32.SystemEvents.UserPreferenceChanging> event.</span></span> <span data-ttu-id="f2678-280">このコード例に示されている例の一部である、<xref:Microsoft.Win32.SystemEvents>クラスです。</span><span class="sxs-lookup"><span data-stu-id="f2678-280">This code example is part of a larger example provided for the <xref:Microsoft.Win32.SystemEvents> class.</span></span>  
  
 [!code-cpp[SystemEvents#2](~/samples/snippets/cpp/VS_Snippets_Winforms/SystemEvents/cpp/SystemEvents.cpp#2)]
 [!code-csharp[SystemEvents#2](~/samples/snippets/csharp/VS_Snippets_Winforms/SystemEvents/CS/SystemEvents.cs#2)]
 [!code-vb[SystemEvents#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SystemEvents/VB/SystemEvents.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="f2678-281">システム イベント通知は、現在のコンテキストではサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="f2678-281">System event notifications are not supported under the current context.</span></span> <span data-ttu-id="f2678-282">たとえば、サーバー プロセスがグローバル システム イベント通知をサポートしていない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="f2678-282">Server processes, for example, might not support global system event notifications.</span></span></exception>
        <exception cref="T:System.Runtime.InteropServices.ExternalException"><span data-ttu-id="f2678-283">システム イベント ウィンドウ スレッドの作成が成功しませんでした。</span><span class="sxs-lookup"><span data-stu-id="f2678-283">The attempt to create a system events window thread did not succeed.</span></span></exception>
        <altmember cref="T:Microsoft.Win32.UserPreferenceChangingEventArgs" />
        <altmember cref="T:Microsoft.Win32.UserPreferenceChangingEventHandler" />
        <altmember cref="T:Microsoft.Win32.UserPreferenceCategory" />
      </Docs>
    </Member>
  </Members>
</Type>