<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CodeDomProvider.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">9575d09f-9d72-4690-889e-b83c405ca4563cd6391acbb63e22a350d0f119e03fa9818cfdba.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">3cd6391acbb63e22a350d0f119e03fa9818cfdba</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">254e16ae65e82f4aa59360cd8572b36b6b5b2f80</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/05/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Provides a base class for <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> の実装の基本クラスを提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class is abstract.</source>
          <target state="translated">このクラスは抽象クラスです。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> can be used to create and retrieve instances of code generators and code compilers.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>を作成し、コード ジェネレーター、コード コンパイラのインスタンスを取得するために使用できます。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</source>
          <target state="translated">コード ジェネレーターを使用して特定の言語のコードを生成でき、コード コンパイラを使用してコードをアセンブリにコンパイルできます。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the methods made available in the code generator and code compiler are available directly from the code provider.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>メソッドで使用できるコード ジェネレーター、コード コンパイラがコード プロバイダーから直接使用します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>You do not need to call <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> to access the methods, and those methods are marked as obsolete.</source>
          <target state="translated">呼び出す必要はありません<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>または<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>にアクセスするメソッド、およびこれらのメソッドは、不使用とマークします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This applies to preexisting as well as new code provider implementations.</source>
          <target state="translated">これは、新しいコード プロバイダーの実装だけでなく、既存の適用されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>実装通常コード生成やコード コンパイルのインターフェイスを提供および 1 つのプログラミング言語のコンパイルを管理するコードを生成するためです。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Several languages are supported by <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations that ship with the <ph id="ph2">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>.</source>
          <target state="translated">サポートされているいくつかの言語<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>に付属している実装、<ph id="ph2">[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>These languages include C#, Visual Basic, C++, and JScript.</source>
          <target state="translated">これらの言語には、c#、Visual Basic、C++、および JScript が含まれます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Developers or compiler vendors can implement the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> and <ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> interfaces and provide a <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> that extends CodeDOM support to other programming languages.</source>
          <target state="translated">開発者またはコンパイラ販売元が実装することができます、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>と<ph id="ph2">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>インターフェイスおよび提供、 <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> CodeDOM 他のプログラミング言語のサポートを拡張します。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>ファイル (Machine.config) が追加の構成設定を追加するには、開発者やコンパイラ販売元のメカニズムを提供するマシンの構成の<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class provides static methods to discover and enumerate the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>クラスを検出し、列挙の静的メソッドを提供、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>コンピューターに実装します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method returns the settings for all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph>メソッドは、すべての設定を返します<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>コンピューターに実装します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method returns the settings for a specific <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation, based on the programming language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>メソッドは、特定の設定を返します<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>プログラミング言語の名前に基づく実装します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>メソッドのインスタンスを返します、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>特定の言語の実装です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>For more details on language provider settings in the configuration file, see <bpt id="p1">[</bpt>Compiler and Language Provider Settings Schema<ept id="p1">](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)</ept>.</source>
          <target state="translated">構成ファイルの言語プロバイダー設定の詳細については、次を参照してください。<bpt id="p1">[</bpt>コンパイラおよび言語プロバイダー設定のスキーマ<ept id="p1">](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)</ept>です。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class makes a link demand and an inheritance demand at the class level.</source>
          <target state="translated">このクラスは、リンク確認要求し、クラス レベルの継承確認要求を使用します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A <ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown if either the immediate caller or the derived class does not have full trust permission.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Security.SecurityException&gt;</ph>が、直前の呼び出し元または派生クラスのいずれかに完全信頼のアクセス許可がない場合にスローされます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>For details about security demands, see <bpt id="p1">[</bpt>Link Demands<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept> and <bpt id="p2">[</bpt>Inheritance Demands<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>.</source>
          <target state="translated">セキュリティ要求の詳細については、「<bpt id="p1">[</bpt>リンク確認要求<ept id="p1">](~/docs/framework/misc/link-demands.md)</ept>と<bpt id="p2">[</bpt>継承確認要求<ept id="p2">](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)</ept>です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The following example program can generate and compile source code based on a CodeDOM model of a program that prints "Hello World" using the <ph id="ph1">&lt;xref:System.Console&gt;</ph> class.</source>
          <target state="translated">次のサンプル プログラムは生成し、"Hello World"を使用して印刷するプログラムの CodeDOM モデルに基づくソース コードをコンパイル、<ph id="ph1">&lt;xref:System.Console&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>A Windows Forms user interface is provided.</source>
          <target state="translated">Windows フォーム ユーザー インターフェイスを提供します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>The user can select the target programming language from several selections: C#, Visual Basic, and JScript.</source>
          <target state="translated">ユーザーがプログラミングいくつかの選択肢から言語を選択できます。 c#、Visual Basic、および JScript です。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">このクラスは、部分的に信頼されたコードでは使用できません。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>for full trust for inheritors.</source>
          <target state="translated">継承時の完全な信頼。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>This class cannot be inherited by partially trusted code.</source>
          <target state="translated">部分信頼コードでこのクラスは継承できません。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>, <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>, and <ph id="ph4">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>.</source>
          <target state="translated">.NET Framework バージョン 1.0 および 1.1 では、コード プロバイダーの構成の実装の<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>、 <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>、 <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>、および<ph id="ph4">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, the <ph id="ph2">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>, <ph id="ph3">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>, and <ph id="ph4">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> methods are obsolete, and the methods of <ph id="ph5">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> and <ph id="ph6">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> are directly available in the <ph id="ph7">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>、 <ph id="ph2">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>、 <ph id="ph3">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>、および<ph id="ph4">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>メソッドは廃止されましたが、および方法<ph id="ph5">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>と<ph id="ph6">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>で直接利用、<ph id="ph7">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>You should override those methods in your code provider implementation and not call the base methods.</source>
          <target state="translated">コード プロバイダーの実装でこれらのメソッドをオーバーライドして、基本メソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.#ctor">
          <source>This class cannot be used by partially trusted code.</source>
          <target state="translated">このクラスは、部分的に信頼されたコードでは使用できません。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the settings for the compilation.</source>
          <target state="translated">コンパイルの設定を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that indicates the code to compile.</source>
          <target state="translated">コンパイルするコードを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>Compiles an assembly based on the <ph id="ph1">&lt;see cref="N:System.CodeDom" /&gt;</ph> trees contained in the specified array of <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> objects, using the specified compiler settings.</source>
          <target state="translated">指定したコンパイラ設定を使用して、指定した <ph id="ph1">&lt;see cref="N:System.CodeDom" /&gt;</ph> オブジェクトの配列に含まれている <ph id="ph2">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> ツリーに基づいてアセンブリをコンパイルします。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of the compilation.</source>
          <target state="translated">コンパイルの結果を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード コンパイラを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the settings for the compilation.</source>
          <target state="translated">コンパイルの設定を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>An array of the names of the files to compile.</source>
          <target state="translated">コンパイルするファイルの名前の配列。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</source>
          <target state="translated">指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of compilation.</source>
          <target state="translated">コンパイルの結果を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード コンパイラを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> object that indicates the compiler settings for this compilation.</source>
          <target state="translated">このコンパイルのコンパイラ設定を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerParameters" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>An array of source code strings to compile.</source>
          <target state="translated">コンパイルするソース コード文字列の配列。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</source>
          <target state="translated">指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> object that indicates the results of compilation.</source>
          <target state="translated">コンパイルの結果を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerResults" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph> method for compatibility with preexisting providers that use code compilers.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /&gt;</ph>コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code compiler.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード コンパイラを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>When overridden in a derived class, creates a new code compiler.</source>
          <target state="translated">派生クラスでオーバーライドされると、新しいコード コンパイラを作成します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> that can be used for compilation of <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> ベースのソース コードをコンパイルするために使用できる <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">このメソッドは廃止されていますが、<ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph> methods that are directly available in the code provider.</source>
          <target state="translated">呼び出す、推奨される方法は、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeCompiler&gt;</ph>コード プロバイダーで直接使用できるメソッドです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, you should implement the <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph> members in the <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class and throw a <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> when this method is called.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>、実装する必要があります、<ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeCompiler" /&gt;</ph>内のメンバー、<ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>クラスし、スロー、<ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>このメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The string for which to create an escaped identifier.</source>
          <target state="translated">エスケープ識別子作成の対象となる文字列。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Creates an escaped identifier for the specified value.</source>
          <target state="translated">指定した値のエスケープ識別子を作成します。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The escaped identifier for the value.</source>
          <target state="translated">その値のエスケープ識別子。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A&gt;</ph> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A&gt;</ph> テスト識別子が予約されているいずれかと競合するかどうか、または言語のキーワードを場合は、言語固有のエスケープ コードの書式設定と同じ名前を返します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>This is referred to an escaped identifier.</source>
          <target state="translated">これは、エスケープされた識別子に呼ばれます。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The escaped identifier contains the same <ph id="ph1">`value`</ph> but has escape-code formatting added to differentiate the identifier from the keyword.</source>
          <target state="translated">エスケープされた識別子を含む同じ<ph id="ph1">`value`</ph>識別子、キーワードと区別するのには追加エスケープ コードの書式設定が、します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Two implementation examples are preceding the <ph id="ph1">`value`</ph> with "@" or bracketing the <ph id="ph2">`value`</ph> with "[" and "]".</source>
          <target state="translated">2 つの実装の例では、先頭、<ph id="ph1">`value`</ph>と"@"ひとまとめにして、または、<ph id="ph2">`value`</ph>で"["および"]"です。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>When overridden in a derived class, creates a new code generator.</source>
          <target state="translated">派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> ベースのソース コードを生成するために使用できる <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>This method is obsolete in the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>.</source>
          <target state="translated">このメソッドは廃止されていますが、<ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>です。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>The recommended alternative is to call the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> methods that are directly available in the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
          <target state="translated">呼び出す、推奨される方法は、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>で直接使用できる方法は、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>, you should implement the <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> members in the <ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> class and throw a <ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph> when this method is called.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]</ph>、実装する必要があります、<ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>内のメンバー、<ph id="ph3">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph>クラスし、スロー、<ph id="ph4">&lt;see cref="T:System.NotSupportedException" /&gt;</ph>このメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to use to output.</source>
          <target state="translated">出力に使用する <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>When overridden in a derived class, creates a new code generator using the specified <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> for output.</source>
          <target state="translated">派生クラスでオーバーライドされると、出力用に指定されている <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> を使用して、新しいコード ジェネレーターを作成します。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> ベースのソース コードを生成するために使用できる <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>This method uses the specified <ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph> for output.</source>
          <target state="translated">このメソッドは、指定された使用<ph id="ph1">&lt;xref:System.IO.TextWriter&gt;</ph>出力用です。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>This method supports more optimized code generation that incrementally updates the source code.</source>
          <target state="translated">このメソッドは、ソース コードの増分更新を複数の最適化されたコード生成をサポートします。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
          <target state="translated">基本クラス実装の呼び出し、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>メソッドで、廃止されていますが、<ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>され、その結果、<ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>場合、<ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>オブジェクトは返されません。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>The file name to output to.</source>
          <target state="translated">出力ファイル名。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>When overridden in a derived class, creates a new code generator using the specified file name for output.</source>
          <target state="translated">派生クラスでオーバーライドされると、出力用に指定されているファイル名を使用して、新しいコード ジェネレーターを作成します。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> that can be used to generate <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph> based source code representations.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> ベースのソース コードを生成するために使用できる <ph id="ph2">&lt;see cref="N:System.CodeDom" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>This method uses the specified file name for output.</source>
          <target state="translated">このメソッドは、指定したファイル名の出力を使用します。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)">
          <source>The base class implementation calls the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method, which is obsolete in the <ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph> and results in a <ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph> if an <ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> object is not returned.</source>
          <target state="translated">基本クラス実装の呼び出し、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>メソッドで、廃止されていますが、<ph id="ph2">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>され、その結果、<ph id="ph3">&lt;xref:System.NotSupportedException&gt;</ph>場合、<ph id="ph4">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>オブジェクトは返されません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>When overridden in a derived class, creates a new code parser.</source>
          <target state="translated">派生クラスでオーバーライドされると、新しいコード パーサーを作成します。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>An <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph> that can be used to parse source code.</source>
          <target state="translated">ソース コードを解析するために使用できる <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser">
          <source>The base implementation always returns <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">基本実装では、常に <ph id="ph1">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="T:System.CodeDom.Compiler.CodeDomProvider">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language.</source>
          <target state="translated">指定した言語の <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> インスタンスを取得します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The language name.</source>
          <target state="translated">言語名。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language.</source>
          <target state="translated">指定した言語の <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> インスタンスを取得します。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>A CodeDOM provider that is implemented for the specified language name.</source>
          <target state="translated">指定した言語名に対して実装される CodeDOM プロバイダー。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated">このメソッドは、いくつかのプロバイダーのいずれかをオプションで使用するアプリケーションでコード プロバイダーのインスタンスを作成する最もよく使用します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> allows you to specify at run time the code provider you wish to instantiate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> インスタンスを作成するコード プロバイダーを実行時に指定できます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method.</source>
          <target state="translated">どのコード プロバイダーを使用してデザイン時にわかっている場合そのコード プロバイダーのインスタンスを作成しないでを使用して、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> instance for a specific language name; it is similar to calling the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph> method with the language provider type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>メソッドを返します、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>特定言語の名前のインスタンス以外の呼び出しに似ていますが、<ph id="ph3">&lt;xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType&gt;</ph>言語プロバイダーの種類を持つメソッドです。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> when you want to dynamically find a configured provider implementation for a language name.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>言語名に対して構成されているプロバイダーの実装を動的に検索する場合。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If more than one provider implementation is configured for the language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> returns a provider instance for the last matching configuration element.</source>
          <target state="translated">言語の名前、1 つ以上のプロバイダー実装が構成されている場合<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>最後の一致する構成要素のプロバイダーのインスタンスを返します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> method overload when you want a specific language provider implementation.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph>メソッドのオーバー ロードする場合、特定の言語プロバイダーの実装です。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>For example, use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method to get a provider instance that supports the language name <ph id="ph2">`"CSharp"`</ph>; use the <ph id="ph3">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph> method overload to get a provider instance specifically for the <ph id="ph4">&lt;xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType&gt;</ph> implementation.</source>
          <target state="translated">たとえば、使用、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>言語の名前をサポートするプロバイダーのインスタンスを取得するメソッド<ph id="ph2">`"CSharp"`</ph>; を使用して、<ph id="ph3">&lt;xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType&gt;</ph>専用のプロバイダーのインスタンスを取得するメソッドのオーバー ロード、<ph id="ph4">&lt;xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType&gt;</ph>実装します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>You should use the [<ph id="ph1">\]</ph>, CultureInfo, Object<ph id="ph2">\&lt;</ph>xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType&gt; method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</source>
          <target state="translated">使用する必要があります、[<ph id="ph1">\]</ph>、CultureInfo オブジェクトを使用して<ph id="ph2">\&lt;</ph>xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType &gt; メソッドの言語用の複数のコード プロバイダーがあり、特定のコード プロバイダーをインスタンス化したい場合。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>メソッドでは、少なくとも 1 つのプロバイダーの実装が特定の言語をサポートしているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>.</source>
          <target state="translated">使用して言語名を検証する<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>に渡す前に<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>If you pass an unsupported language name to <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> is thrown.</source>
          <target state="translated">サポートされていない言語名を渡す場合<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>、<ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph>がスローされます。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method can be used to determine all <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the <bpt id="p1">[</bpt><ph id="ph3">&amp;lt;</ph>system.codedom<ph id="ph4">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph>を特定するメソッドを使用できます<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>、開発者やで識別されるコンパイラ ベンダーによって提供される追加の実装を含むコンピューターの実装、 <bpt id="p1">[</bpt> <ph id="ph3">&amp;lt;</ph>system.codedom<ph id="ph4">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>マシン構成ファイル (Machine.config) でします。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph> method returns an instance of a <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A&gt;</ph>メソッドのインスタンスを返します、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>特定の言語の実装です。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">言語名では区別されません。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">次のコード例を決定、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>入力言語と表示言語プロバイダーの構成設定の実装です。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> does not have a configured provider on this computer.</source>
          <target state="translated">このコンピューターには、<ph id="ph1">&lt;paramref name="language" /&gt;</ph> の構成済みのプロバイダーがありません。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>The language name.</source>
          <target state="translated">言語名。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>A collection of provider options from the configuration file.</source>
          <target state="translated">構成ファイルのプロバイダー オプションのコレクション。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> instance for the specified language and provider options.</source>
          <target state="translated">指定された言語オプションおよびプロバイダー オプションの <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> インスタンスを取得します。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>A CodeDOM provider that is implemented for the specified language name and options.</source>
          <target state="translated">指定した言語名およびオプションに対して実装される CodeDOM プロバイダー。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</source>
          <target state="translated">このメソッドは、いくつかのプロバイダーのいずれかをオプションで使用するアプリケーションでコード プロバイダーのインスタンスを作成する最もよく使用します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> enables you to specify at run time the version of the code provider you want to instantiate.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> 実行時にインスタンスを作成するコード プロバイダーのバージョンを指定できます。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> method.</source>
          <target state="translated">どのコード プロバイダーを使用してデザイン時にわかっている場合を使用せずにそのコード プロバイダーのインスタンスを作成する必要があります、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Use <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph> when you want to dynamically find a configured provider implementation for a specific language and options.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29&gt;</ph>特定の言語とオプションの構成プロバイダーの実装を動的に検索する場合。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>Language names are case-insensitive.</source>
          <target state="translated">言語名では区別されません。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>For information about supported provider options, see the specific CodeDOM provider documentation.</source>
          <target state="translated">サポートされているプロバイダー オプションについては、特定の CodeDOM プロバイダーのマニュアルを参照してください。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</ph> method.</source>
          <target state="translated">プロバイダーを検証して、言語の名前の 2 つ以上のプロバイダー実装が構成されている場合、プロバイダーの呼び出しについては、の「解説」セクションを参照してください、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})">
          <source>The following example shows how to create an instance of a provider by using the <ph id="ph1">`providerOptions`</ph> parameter.</source>
          <target state="translated">次の例を使用して、プロバイダーのインスタンスを作成する方法を示しています、<ph id="ph1">`providerOptions`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The string for which to generate a valid identifier.</source>
          <target state="translated">有効な識別子生成の対象となる文字列。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Creates a valid identifier for the specified value.</source>
          <target state="translated">指定した値の有効な識別子を作成します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>A valid identifier for the specified value.</source>
          <target state="translated">指定した値の有効な識別子。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A&gt;</ph> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A&gt;</ph> 識別子が予約されていると競合しているかどうかをテストまたは言語のキーワード、しかどうか、有効な識別子を返すしようという名前が競合しません。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</source>
          <target state="translated">From キーワード; 識別子を区別するために返される識別子が若干変更されて通常たとえば、名前可能性があります前にアンダー スコア (「_ _」) です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>Gets the default file name extension to use for source code files in the current language.</source>
          <target state="translated">現在の言語のソース コード ファイルに使用する既定のファイル名拡張子を取得します。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>A file name extension corresponding to the extension of the source files of the current language.</source>
          <target state="translated">現在の言語のソース ファイルの拡張子に対応するファイル名拡張子。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The base implementation always returns <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph>.</source>
          <target state="translated">基本実装では、常に <ph id="ph1">&lt;see cref="F:System.String.Empty" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</source>
          <target state="translated">このプロパティは、ファイル名拡張子を生成または使用する必要がありますを示すコード ジェネレーター、コード コンパイラによって使用します。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The following code example creates an instance of <ph id="ph1">&lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType&gt;</ph>.</source>
          <target state="translated">次のコード例のインスタンスを作成する<ph id="ph1">&lt;xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension">
          <source>The example displays the provider name, hash code and default file name extension for the new provider instance.</source>
          <target state="translated">プロバイダーの名前、ハッシュ コード、および既定のファイル名拡張子プロバイダーの新しいインスタンスを表示します。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> for which to generate code.</source>
          <target state="translated">コード生成の対象となる <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which the output code is sent.</source>
          <target state="translated">出力コードの送信先となる <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">コードを生成するために使用するオプションを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">指定した CodeDOM (Code Document Object Model) コンパイル単位のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph> method to generate code for a "Hello World" application from a <ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>.</source>
          <target state="translated">次のコード例の使用を示しています、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A&gt;</ph>から"Hello World"アプリケーション用のコードを生成する方法を<ph id="ph2">&lt;xref:System.CodeDom.CodeCompileUnit&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>This example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> class.</source>
          <target state="translated">この例に示されている例の一部である、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> object that indicates the expression for which to generate code.</source>
          <target state="translated">コード生成の対象となる式を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeExpression" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">出力コードの送信先となる <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">コードを生成するために使用するオプションを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">指定した CodeDOM (Code Document Object Model) 式のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMember" /&gt;</ph> object that indicates the member for which to generate code.</source>
          <target state="translated">コード生成の対象となるメンバーを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeMember" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">出力コードの送信先となる <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">コードを生成するために使用するオプションを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">指定した CodeDOM (Code Document Object Model) メンバー宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base class implementation throws a <ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>.</source>
          <target state="translated">基本クラス実装をスロー、<ph id="ph1">&lt;xref:System.NotImplementedException&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>See <ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType&gt;</ph> for documentation describing an implementation of this method.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType&gt;</ph>ドキュメントについては、このメソッドの実装を記述します。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The following code example shows the use of the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A&gt;</ph> method as implemented by the <ph id="ph2">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph> and <ph id="ph3">&lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt;</ph> classes.</source>
          <target state="translated">次のコード例の使用を示しています、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A&gt;</ph>メソッドによって実装される、<ph id="ph2">&lt;xref:Microsoft.CSharp.CSharpCodeProvider&gt;</ph>と<ph id="ph3">&lt;xref:Microsoft.VisualBasic.VBCodeProvider&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>This method is not overridden in a derived class.</source>
          <target state="translated">このメソッドは、派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeNamespace" /&gt;</ph> object that indicates the namespace for which to generate code.</source>
          <target state="translated">コード生成の対象となる名前空間を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeNamespace" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">出力コードの送信先となる <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">コードを生成するために使用するオプションを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">指定した CodeDOM (Code Document Object Model) 名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeStatement" /&gt;</ph> containing the CodeDOM elements for which to generate code.</source>
          <target state="translated">コード生成の対象となる CodeDOM 要素を格納する <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeStatement" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">出力コードの送信先となる <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">コードを生成するために使用するオプションを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">指定した CodeDOM (Code Document Object Model) ステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> object that indicates the type for which to generate code.</source>
          <target state="translated">コード生成の対象となる型を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeDeclaration" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> to which output code is sent.</source>
          <target state="translated">出力コードの送信先となる <ph id="ph1">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph> that indicates the options to use for generating code.</source>
          <target state="translated">コードを生成するために使用するオプションを示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</source>
          <target state="translated">指定した CodeDOM (Code Document Object Model) 型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>Returns the language provider and compiler configuration settings for this computer.</source>
          <target state="translated">このコンピューターの言語プロバイダーおよびコンパイラの構成設定を返します。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>An array of type <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> representing the settings of all configured <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementations.</source>
          <target state="translated">構成済みのすべての <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> 実装の設定を表す <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 型の配列。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>Use the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph> method to enumerate the language provider settings on a computer.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A&gt;</ph>コンピューターの言語プロバイダー設定を列挙するメソッド。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>In the <ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>, the default language providers supplied by the .NET Framework are not specified in the <bpt id="p1">[</bpt><ph id="ph2">&amp;lt;</ph>system.codedom<ph id="ph3">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</source>
          <target state="translated"><ph id="ph1">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]</ph>、.NET Framework によって提供される既定の言語プロバイダーがで指定されていない、 <bpt id="p1">[</bpt> <ph id="ph2">&amp;lt;</ph>system.codedom<ph id="ph3">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>コンパイラ構成セクションし、削除することはできませんのでこのメソッドは、既定のプロバイダーおよび構成ファイルで指定されたすべての情報を返します。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider.</source>
          <target state="translated">次のコード例では、コンピューターの言語プロバイダーを列挙し、各言語プロバイダーの構成およびコンパイラ設定を表示します。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>A language name.</source>
          <target state="translated">言語名。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>Returns the language provider and compiler configuration settings for the specified language.</source>
          <target state="translated">指定した言語の言語プロバイダーおよびコンパイラの構成設定を返します。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> object populated with settings of the configured <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation.</source>
          <target state="translated">構成済みの <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CompilerInfo" /&gt;</ph> 実装の設定で作成された <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>マシンの構成のファイル、言語プロバイダーとコンパイラ構成設定を含む各<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>コンピューターに実装します。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>For information about machine configuration files, see the Machine Configuration Files section in <bpt id="p1">[</bpt>Configuring Apps<ept id="p1">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>.</source>
          <target state="translated">マシン構成ファイルについては、のマシン構成ファイルのセクションを参照してください。<bpt id="p1">[</bpt>構成アプリ<ept id="p1">](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)</ept>です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> method searches each provider configuration element for the specified language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>メソッドは、指定した言語の名前の各プロバイダーの構成要素を検索します。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The returned <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance contains the configured language provider and compiler settings.</source>
          <target state="translated">返された<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>インスタンスに構成された言語プロバイダーおよびコンパイラ設定が含まれています。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method checks whether at least one provider implementation supports a specific language.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>メソッドでは、少なくとも 1 つのプロバイダーの実装が特定の言語をサポートしているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>You can validate a language name using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>.</source>
          <target state="translated">使用して言語名を検証する<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>に渡す前に<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This prevents throwing a <ph id="ph1">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> when you access the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> instance for an unsupported language name.</source>
          <target state="translated">これにより、スロー、<ph id="ph1">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph>にアクセスするとき、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>サポートされていない言語名のインスタンス。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>If more than one provider implementation is configured for the input language name, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph> returns the settings from the last matching provider configuration element.</source>
          <target state="translated">入力言語の名前、1 つ以上のプロバイダー実装が構成されている場合<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A&gt;</ph>構成要素最後の一致するプロバイダーからの設定を返します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">言語名では区別されません。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">次のコード例を決定、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>入力言語と表示言語プロバイダーの構成設定の実装です。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> does not have a configured provider on this computer.</source>
          <target state="translated">このコンピューターには、<ph id="ph1">&lt;paramref name="language" /&gt;</ph> の構成済みのプロバイダーがありません。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>The type of object to retrieve a type converter for.</source>
          <target state="translated">型コンバーターを取得する対象のオブジェクトの型。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>Gets a <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified data type.</source>
          <target state="translated">指定したデータ ソースの <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>A <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified type, or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if a <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> for the specified type cannot be found.</source>
          <target state="translated">指定した型の <ph id="ph1">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph>。指定した型の <ph id="ph3">&lt;see cref="T:System.ComponentModel.TypeConverter" /&gt;</ph> が見つからない場合は <ph id="ph2">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)">
          <source>A derived class can override this method to provide specific types of type converters for specific data types.</source>
          <target state="translated">派生クラスでは、特定のデータ型の特定の種類の型コンバーターを提供するには、このメソッドをオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>A file name extension.</source>
          <target state="translated">ファイル名拡張子。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>Returns a language name associated with the specified file name extension, as configured in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> compiler configuration section.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> のコンパイラ構成セクションに構成されている、指定したファイル名拡張子に関連付けられた言語名を返します。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>A language name associated with the file name extension, as configured in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> compiler configuration settings.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> のコンパイラ構成設定に構成されている、ファイル名拡張子に関連付けられた言語名。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>、マシンの構成では、ファイル (Machine.config) は、各言語プロバイダーとコンパイラ構成設定を含まれています<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>に実装します。コンピューターです。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> method searches each provider configuration element for the specified file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>メソッドは、指定したファイル名拡張子の各プロバイダーの構成要素を検索します。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method checks whether at least one provider implementation supports a specific file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph>メソッドでは、少なくとも 1 つのプロバイダーの実装が特定のファイル名拡張子をサポートしているかどうかを確認します。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>You can validate a file name extension using <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> before passing it to <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>.</source>
          <target state="translated">使用してファイル名拡張子を検証する<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph>に渡す前に<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This prevents <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> from throwing a <ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph> for an unsupported file name extension.</source>
          <target state="translated">これにより、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>からスロー、<ph id="ph2">&lt;xref:System.Configuration.ConfigurationException?displayProperty=nameWithType&gt;</ph>サポートされないファイル名拡張子。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the first language name for that provider.</source>
          <target state="translated">入力ファイル名拡張子をサポートするプロバイダーの実装が存在しているし、そのプロバイダー用に構成された複数のサポートされている言語<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>そのプロバイダーの最初の言語名を返します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>If more than one provider implementation is configured for the input file name extension, <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph> returns the language name from the last matching provider configuration element.</source>
          <target state="translated">入力ファイル名拡張子に対して複数のプロバイダー実装が構成されている場合<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A&gt;</ph>構成要素を最後の一致するプロバイダーから言語の名前を返します。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>Language names and file name extensions are case-insensitive.</source>
          <target state="translated">言語の名前とファイル名拡張子は区別されません。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input file name extension and displays the configured settings for the language provider.</source>
          <target state="translated">次のコード例を決定、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>入力ファイル名拡張子と表示言語プロバイダーの構成設定の実装です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> does not have a configured language provider on this computer.</source>
          <target state="translated">このコンピューターには、<ph id="ph1">&lt;paramref name="extension" /&gt;</ph> の構成済みの言語プロバイダーがありません。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> that indicates the type to return.</source>
          <target state="translated">返される型を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>Gets the type indicated by the specified <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> で示される型を取得します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>A text representation of the specified type, formatted for the language in which code is generated by this code generator.</source>
          <target state="translated">このコード ジェネレーターによってコードを生成する際に使用する言語用に書式設定された、指定した型のテキスト表現。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In Visual Basic, for example, passing in a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> for the <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> type will return "Integer".</source>
          <target state="translated">たとえば、Visual Basic では、<ph id="ph1">&lt;see cref="T:System.CodeDom.CodeTypeReference" /&gt;</ph> 型の <ph id="ph2">&lt;see cref="T:System.Int32" /&gt;</ph> を渡すと、"Integer" が返されます。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>A file name extension.</source>
          <target state="translated">ファイル名拡張子。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>Tests whether a file name extension has an associated <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation configured on the computer.</source>
          <target state="translated">コンピューター上に、ファイル名拡張子の関連する <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 実装が構成されているかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation is configured for the specified file name extension; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したファイル名拡張子に対して、<ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 実装が構成されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>、マシンの構成では、ファイル (Machine.config) は、各言語プロバイダーとコンパイラ構成設定を含まれています<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>に実装します。コンピューターです。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph> method searches the provider configuration elements for the specified file name extension.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A&gt;</ph>メソッドは、指定したファイル名拡張子のプロバイダー構成要素を検索します。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>File name extensions are case-insensitive.</source>
          <target state="translated">ファイル名拡張子は区別されません。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input file name extension and displays the configured settings for the language provider.</source>
          <target state="translated">次のコード例を決定、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>入力ファイル名拡張子と表示言語プロバイダーの構成設定の実装です。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="extension" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="extension" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The language name.</source>
          <target state="translated">言語名。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>Tests whether a language has a <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation configured on the computer.</source>
          <target state="translated">コンピューター上に、言語の <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 実装が構成されているかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if a <ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> implementation is configured for the specified language; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定した言語に対して、<ph id="ph2">&lt;see cref="T:System.CodeDom.Compiler.CodeDomProvider" /&gt;</ph> 実装が構成されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <bpt id="p1">[</bpt><ph id="ph1">&amp;lt;</ph>system.codedom<ph id="ph2">&amp;gt;</ph> Element<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept> in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation on the computer.</source>
          <target state="translated"><bpt id="p1">[</bpt> <ph id="ph1">&amp;lt;</ph>System.codedom<ph id="ph2">&amp;gt;</ph>要素<ept id="p1">](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)</ept>、マシンの構成では、ファイル (Machine.config) は、各言語プロバイダーとコンパイラ構成設定を含まれています<ph id="ph3">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>に実装します。コンピューターです。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph> method searches the provider configuration elements for the specified language name.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A&gt;</ph>メソッドは、指定した言語の名前のプロバイダー構成要素を検索します。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>Language names are case-insensitive.</source>
          <target state="translated">言語名では区別されません。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The following code example determines the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph> implementation for an input language and displays the configured settings for the language provider.</source>
          <target state="translated">次のコード例を決定、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider&gt;</ph>入力言語と表示言語プロバイダーの構成設定の実装です。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>This code example is part of a larger example provided for the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph> class.</source>
          <target state="translated">このコード例に示されている例の一部である、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.CompilerInfo&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The <ph id="ph1">&lt;paramref name="language" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="language" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>for full trust for the immediate caller.</source>
          <target state="translated">直前の呼び出し元に対する完全な信頼。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)">
          <source>This member cannot be used by partially trusted code.</source>
          <target state="translated">このメンバーは、部分的に信頼されているコードから使用することはできません。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The value to verify as a valid identifier.</source>
          <target state="translated">有効な識別子かどうかを検査する値。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Returns a value that indicates whether the specified value is a valid identifier for the current language.</source>
          <target state="translated">指定した値が現在の言語で有効な識別子かどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the <ph id="ph2">&lt;paramref name="value" /&gt;</ph> parameter is a valid identifier; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph2">&lt;paramref name="value" /&gt;</ph> パラメーターが有効な識別子である場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph3">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>This method tests whether an identifier is valid.</source>
          <target state="translated">このメソッドは、識別子が有効かどうかをテストします。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A&gt;</ph> method is provider specific.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A&gt;</ph>メソッドは、プロバイダー固有です。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Identifiers that are valid for one provider might not be valid for other providers.</source>
          <target state="translated">1 つのプロバイダーに対して有効な識別子を他のプロバイダーの有効なことができない可能性があります。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If <ph id="ph1">`value`</ph> contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</source>
          <target state="translated">場合<ph id="ph1">`value`</ph>文字が含まれています、ASCII 文字の範囲外のコードのコンパイルに使用されるすべての言語識別子を確認します。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>When overriding <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /&gt;</ph> in a derived class, design the method to return <ph id="ph2">&lt;see langword="true" /&gt;</ph> only if the value fits the rules of the language and does not conflict with a keyword.</source>
          <target state="translated">オーバーライドする場合<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /&gt;</ph>派生クラスでを返す方法の設計<ph id="ph2">&lt;see langword="true" /&gt;</ph>言語の規則に適合させますであり、キーワードと競合していない場合にのみです。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
          <source>Gets a language features identifier.</source>
          <target state="translated">言語機能識別子を取得します。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.LanguageOptions" /&gt;</ph> that indicates special features of the language.</source>
          <target state="translated">言語の特殊な機能を示す <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.LanguageOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> object that is used to read the code to be parsed.</source>
          <target state="translated">解析するコードの読み取りに使用する <ph id="ph1">&lt;see cref="T:System.IO.TextReader" /&gt;</ph> オブジェクト。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>Compiles the code read from the specified text stream into a <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>.</source>
          <target state="translated">指定したテキスト ストリームから読み取ったコードを <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> にコンパイルします。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>A <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph> that contains a representation of the parsed code.</source>
          <target state="translated">コードの解析後の表現を格納する <ph id="ph1">&lt;see cref="T:System.CodeDom.CodeCompileUnit" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeParser&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>The base-class method creates a parser in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph> method for compatibility with preexisting providers that use code parsers.</source>
          <target state="translated">基本クラスのメソッドでは、パーサーを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /&gt;</ph>コード パーサーを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeParser" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code parser.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード パーサーを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>Returns a value indicating whether the specified code generation support is provided.</source>
          <target state="translated">指定したコードを生成できるかどうかを示す値を返します。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the specified code generation support is provided; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">指定したコードを生成できる場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>This method can be called with a number of <ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary <ph id="ph2">`OR`</ph> operator (&amp;#124;).</source>
          <target state="translated">数がこのメソッドを呼び出すことができる<ph id="ph1">&lt;xref:System.CodeDom.Compiler.GeneratorSupport&gt;</ph>バイナリと共に、適切な機能フラグのセットを結合することで、一連の機能をテストするには、一度にフラグ<ph id="ph2">`OR`</ph>演算子 (&amp;#124;)。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>In the .NET Framework versions 1.0 and 1.1, this method is provided by the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation that is returned by the <ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph> method of the provider.</source>
          <target state="translated">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装によって返される、<ph id="ph2">&lt;xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A&gt;</ph>プロバイダーのメソッドです。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</source>
          <target state="translated">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>If the code provider does not override this method, the <ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph> implementation is called by the base class.</source>
          <target state="translated">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<ph id="ph1">&lt;xref:System.CodeDom.Compiler.ICodeGenerator&gt;</ph>実装は、基本クラスによって呼び出されます。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>Neither this method nor the <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method is overridden in a derived class.</source>
          <target state="translated">このメソッドと <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> メソッドは、いずれも派生クラスでオーバーライドされません。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>If you override this method, you must not call the corresponding method of the base class.</source>
          <target state="translated">このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>The base-class method creates a generator in the derived class using the obsolete <ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph> method for compatibility with preexisting providers that use code generators.</source>
          <target state="translated">基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<ph id="ph1">&lt;see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /&gt;</ph>コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>The base-class method then calls the equivalent method in the <ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph> implementation to perform this function.</source>
          <target state="translated">基本クラスのメソッドを順に呼び出して、相当するメソッド、<ph id="ph1">&lt;see cref="T:System.CodeDom.Compiler.ICodeGenerator" /&gt;</ph>実装にこの機能を実行します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)">
          <source>You will get a <ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph> if you call the base-class method from a code provider that does not use a code generator.</source>
          <target state="translated">表示される、<ph id="ph1">&lt;see cref="T:System.NotImplementedException" /&gt;</ph>コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>