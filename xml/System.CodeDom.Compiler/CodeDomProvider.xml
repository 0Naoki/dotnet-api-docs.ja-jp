<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7588628e87d936c09691dbad99340e7d04707208" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49144720" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> の実装の基本クラスを提供します。 このクラスは抽象クラスです。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.CodeDom.Compiler.CodeDomProvider>作成およびコード ジェネレーターとコード コンパイラのインスタンスを取得するために使用できます。 コード ジェネレーターを使用して特定の言語のコードを生成でき、コード コンパイラを使用してコードをアセンブリにコンパイルできます。  
  
> [!NOTE]
>  [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]、プロパティ、メソッドのコード ジェネレーターで利用できるし、コード コンパイラはコード プロバイダーから直接使用できます。 呼び出す必要はありません<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>または<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>にアクセスするメソッド、およびこれらのメソッドは不使用とマークします。 これは、既存および新しいコード プロバイダーの実装に適用されます。  
  
 A<xref:System.CodeDom.Compiler.CodeDomProvider>実装が生成やコードのコンパイル インターフェイス コードを生成すると、1 つのプログラミング言語のコンパイルを管理する通常のコードに提供します。 によって複数の言語がサポートされている<xref:System.CodeDom.Compiler.CodeDomProvider>に付属の実装、[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]します。 これらの言語には、c#、Visual Basic、C++、および JScript が含まれます。 開発者やコンパイラ ベンダーが実装することができます、<xref:System.CodeDom.Compiler.ICodeGenerator>と<xref:System.CodeDom.Compiler.ICodeCompiler>インターフェイスし、提供を<xref:System.CodeDom.Compiler.CodeDomProvider>他のプログラミング言語に CodeDOM のサポートを拡張します。  
  
 [ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)ファイル (Machine.config) がの追加の構成設定を追加するには、開発者やコンパイラベンダーのメカニズムを提供するマシンの構成の<xref:System.CodeDom.Compiler.CodeDomProvider>実装します。  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider>クラスには静的メソッドを検出し、列挙、<xref:System.CodeDom.Compiler.CodeDomProvider>コンピューターに実装します。 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>メソッドは、すべての設定を返します<xref:System.CodeDom.Compiler.CodeDomProvider>コンピューターに実装します。 <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>メソッドは、特定の設定を返します<xref:System.CodeDom.Compiler.CodeDomProvider>プログラミング言語の名前に基づいて実装します。 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッドのインスタンスを返します、<xref:System.CodeDom.Compiler.CodeDomProvider>言語固有の実装。  
  
 構成ファイルの言語プロバイダー設定の詳細については、次を参照してください。[コンパイラおよび言語プロバイダー設定のスキーマ](~/docs/framework/configure-apps/file-schema/compiler/index.md)します。  
  
> [!NOTE]
>  このクラスは、リンク確認要求し、クラス レベルで継承確認要求を使用します。 A<xref:System.Security.SecurityException>直前の呼び出し元または派生クラスのいずれかに完全な信頼のアクセス許可がない場合にスローされます。 セキュリティ要求の詳細については、次を参照してください。[リンク確認要求](~/docs/framework/misc/link-demands.md)と[継承確認要求](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/x4yx82e6(v=vs.100))します。  
  
   
  
## Examples  
 次のサンプル プログラムは生成し、"Hello World"を使用して出力するプログラムの CodeDOM モデルに基づくソース コードをコンパイル、<xref:System.Console>クラス。 Windows フォームのユーザー インターフェイスが提供されます。 ユーザーがプログラミング言語がいくつかの選択肢からターゲットを選択できます。 c#、Visual Basic、および JScript です。  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このクラスは、部分的に信頼されたコードでは使用できません。</permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">継承クラスの完全な信頼。 部分的に信頼されたコードでは、このクラスを継承できません。</permission>
    <block subset="none" type="overrides">
      <para>.NET Framework バージョン 1.0 および 1.1 では、コード プロバイダーの構成の実装の<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />、 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />、 <see cref="T:System.CodeDom.Compiler.ICodeParser" />、および<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />します。 [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />、 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />、および<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />メソッドは廃止のメソッドと<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />と<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />で直接使用可能な<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />クラス。 コード プロバイダーの実装でこれらのメソッドをオーバーライドして、基本メソッドを呼び出さないでください。</para>
    </block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
    <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">コンパイラおよび言語プロバイダー設定のスキーマ</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このクラスは、部分的に信頼されたコードでは使用できません。</permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
        <param name="compilationUnits">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> 型の配列。</param>
        <summary>指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> オブジェクトの配列に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーに基づいてアセンブリをコンパイルします。</summary>
        <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeCompiler>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeCompiler>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード コンパイラを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="fileNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
        <param name="fileNames">コンパイルするファイルの名前の配列。</param>
        <summary>指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</summary>
        <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeCompiler>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeCompiler>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード コンパイラを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="sources" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">このコンパイルのコンパイラ設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</param>
        <param name="sources">コンパイルするソース コード文字列の配列。</param>
        <summary>指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</summary>
        <returns>コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeCompiler>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeCompiler>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード コンパイラを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeCompiler interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、新しいコード コンパイラを作成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> ベースのソース コードをコンパイルするために使用できる <see cref="N:System.CodeDom" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]します。 推奨される代替手段は、<xref:System.CodeDom.Compiler.ICodeCompiler>コード プロバイダーで直接利用できるメソッド。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、実装する必要があります、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />内のメンバー、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />クラスし、スロー、<see cref="T:System.NotSupportedException" />このメソッドが呼び出されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">エスケープ識別子作成の対象となる文字列。</param>
        <summary>指定した値のエスケープ識別子を作成します。</summary>
        <returns>その値のエスケープ識別子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> テスト id が予約されているいずれかと競合するかどうか、または言語キーワード、そうである場合は、言語固有のエスケープ コードの書式設定と同じ名前を返します。 これは、エスケープされた識別子に呼ばれます。 エスケープされた識別子を含む同じ`value`が、キーワード、識別子を区別するために追加のエスケープ コードの書式設定されています。 2 つの実装の例では、先頭、`value`に"@"の角かっこまたは、`value`に"["と"]"。  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeGenerator interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]します。 推奨される代替手段は、<xref:System.CodeDom.Compiler.ICodeGenerator>で直接使用できる方法は、<xref:System.CodeDom.Compiler.CodeDomProvider>クラス。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、実装する必要があります、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />内のメンバー、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />クラスし、スロー、<see cref="T:System.NotSupportedException" />このメソッドが呼び出されます。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">出力に使用する <see cref="T:System.IO.TextWriter" />。</param>
        <summary>派生クラスでオーバーライドされると、出力用に指定されている <see cref="T:System.IO.TextWriter" /> を使用して、新しいコード ジェネレーターを作成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、指定した<xref:System.IO.TextWriter>出力します。 このメソッドは、ソース コードの増分更新を複数の最適化されたコード生成をサポートします。  
  
> [!NOTE]
>  基本クラス実装の呼び出し、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>メソッドで、廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]され、結果に、<xref:System.NotSupportedException>場合、<xref:System.CodeDom.Compiler.ICodeGenerator>オブジェクトは返されません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">出力ファイル名。</param>
        <summary>派生クラスでオーバーライドされると、出力用に指定されているファイル名を使用して、新しいコード ジェネレーターを作成します。</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、出力の指定したファイル名を使用します。  
  
> [!NOTE]
>  基本クラス実装の呼び出し、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>メソッドで、廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]され、結果に、<xref:System.NotSupportedException>場合、<xref:System.CodeDom.Compiler.ICodeGenerator>オブジェクトは返されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinmac-3.0">
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1">
          <AttributeName>System.Obsolete("Callers should not use the ICodeParser interface and should instead use the methods directly on the CodeDomProvider class. Those inheriting from CodeDomProvider must still implement this interface, and should exclude this warning or also obsolete this method.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>派生クラスでオーバーライドされると、新しいコード パーサーを作成します。</summary>
        <returns>ソース コードを解析するために使用できる <see cref="T:System.CodeDom.Compiler.ICodeParser" />。 基本実装では、常に <see langword="null" /> を返します。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">言語名。</param>
        <summary>指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</summary>
        <returns>指定した言語名に対して実装される CodeDOM プロバイダー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、必要に応じていくつかのプロバイダーのいずれかを使用するアプリケーションでコード プロバイダーのインスタンスを作成に最もよく使用します。 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> 実行時にインスタンス化するコード プロバイダーを指定することができます。 コードを使用するプロバイダーは、デザイン時にわかっている場合、コード プロバイダーのインスタンスを作成しないでを使用して、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッド。  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッドを返します。 を<xref:System.CodeDom.Compiler.CodeDomProvider>インスタンスに対して特定の言語の名前。 これには、呼び出しに似ています、<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>言語プロバイダーの種類を持つメソッド。 使用<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>言語名に対して構成されているプロバイダーの実装を動的に検索する場合。  
  
 言語の名前、複数のプロバイダーの実装が構成されている場合<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>最後の一致する構成要素のプロバイダーのインスタンスを返します。  
  
 使用して、<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>メソッドのオーバー ロードする場合、特定の言語プロバイダーの実装。 などを使用して、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>言語名をサポートするプロバイダーのインスタンスを取得するメソッドを`"CSharp"`; を使用して、<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>専用のプロバイダー インスタンスを取得するメソッドのオーバー ロード、<xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType>実装します。 使用する必要があります、[\]、CultureInfo オブジェクトを使用して\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType > メソッドの言語の複数のコード プロバイダーがあり、特定のコード プロバイダーをインスタンス化したい場合。  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>メソッドは、少なくとも 1 つのプロバイダーの実装が特定の言語をサポートしているかどうかを確認します。 使用して言語名を検証する<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>に渡す前に<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>します。 サポートされていない言語名を渡す場合<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>がスローされます。  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>メソッドを使用して、すべて特定<xref:System.CodeDom.Compiler.CodeDomProvider>実装を開発者やで指定されているコンパイラ ベンダーによって提供される追加の実装を含め、コンピュータで、 [ &lt;system.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)マシン構成ファイル (Machine.config)。  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッドのインスタンスを返します、<xref:System.CodeDom.Compiler.CodeDomProvider>言語固有の実装。  
  
 言語名が、区別されます。  
  
   
  
## Examples  
 次のコード例の決定、<xref:System.CodeDom.Compiler.CodeDomProvider>実装の入力言語および言語プロバイダーの構成設定が表示されます。 このコード例が示されている例の一部、<xref:System.CodeDom.Compiler.CompilerInfo>クラス。  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="language">言語名。</param>
        <param name="providerOptions">構成ファイルのプロバイダー オプションのコレクション。</param>
        <summary>指定された言語オプションおよびプロバイダー オプションの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</summary>
        <returns>指定した言語名およびオプションに対して実装される CodeDOM プロバイダー。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  このメソッドは、必要に応じていくつかのプロバイダーのいずれかを使用するアプリケーションでコード プロバイダーのインスタンスを作成に最もよく使用します。 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> 実行時にインスタンス化するコード プロバイダーのバージョンを指定できます。 コードを使用するプロバイダーは、デザイン時にわかっている場合は、使用する代わりにそのコード プロバイダーのインスタンスを作成する必要があります、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>メソッド。  
  
 使用<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>動的に特定の言語とオプションの構成済みのプロバイダーの実装を検索する場合。 言語名が、区別されます。 サポートされているプロバイダーのオプションについては、特定の CodeDOM プロバイダーのマニュアルを参照してください。  
  
 プロバイダーの検証と言語の名前には、複数のプロバイダーの実装が構成されている場合、プロバイダーの呼び出しについては、「解説」を参照してください、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29>メソッド。  
  
   
  
## Examples  
 次の例を使用して、プロバイダーのインスタンスを作成する方法を示しています、`providerOptions`パラメーター。  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">有効な識別子生成の対象となる文字列。</param>
        <summary>指定した値の有効な識別子を作成します。</summary>
        <returns>指定した値の有効な識別子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> 識別子は予約済みと競合するかどうかをテストまたは言語キーワードかどうか、有効な識別子を返す名の試みとは競合しません。 キーワードは、識別子を区別するために、返された識別子が若干変更されて通常たとえば、アンダー スコア (_) 文字、名の前可能性があります。  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の言語のソース コード ファイルに使用する既定のファイル名拡張子を取得します。</summary>
        <value>現在の言語のソース ファイルの拡張子に対応するファイル名拡張子。 基本実装では、常に <see cref="F:System.String.Empty" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、どのようなファイル拡張子を生成または使用する必要がありますを示すコード ジェネレーターとコード コンパイラによって使用されます。  
  
   
  
## Examples  
 次のコード例は、のインスタンスを作成します。<xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>します。 プロバイダーの名前、ハッシュ コードと既定のファイル名拡張子プロバイダーの新しいインスタンスを表示します。  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="compileUnit">コード生成の対象となる <see cref="T:System.CodeDom.CodeCompileUnit" />。</param>
        <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
        <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
        <summary>指定した CodeDOM (Code Document Object Model) コンパイル単位のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
   
  
## Examples  
 次のコード例の使用を示しています、<xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A>から"Hello World"アプリケーションのコードを生成するメソッドを<xref:System.CodeDom.CodeCompileUnit>します。 この例が示されている例の一部、<xref:System.CodeDom.Compiler.CodeDomProvider>クラス。  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="expression">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</param>
        <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
        <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
        <summary>指定した CodeDOM (Code Document Object Model) 式のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="member">コード生成の対象となるメンバーを示す <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクト。</param>
        <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
        <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
        <summary>指定した CodeDOM (Code Document Object Model) メンバー宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 基本クラスの実装をスローする<xref:System.NotImplementedException>します。 参照してください<xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType>ドキュメントについてはこのメソッドの実装を記述します。  
  
   
  
## Examples  
 次のコード例の使用を示しています、<xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A>メソッドによって実装される、<xref:Microsoft.CSharp.CSharpCodeProvider>と<xref:Microsoft.VisualBasic.VBCodeProvider>クラス。  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドは、派生クラスでオーバーライドされません。</exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeNamespace">コード生成の対象となる名前空間を示す <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクト。</param>
        <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
        <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
        <summary>指定した CodeDOM (Code Document Object Model) 名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="statement">コード生成の対象となる CodeDOM 要素を格納する <see cref="T:System.CodeDom.CodeStatement" />。</param>
        <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
        <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
        <summary>指定した CodeDOM (Code Document Object Model) ステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeType">コード生成の対象となる型を示す <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</param>
        <param name="writer">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</param>
        <param name="options">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</param>
        <summary>指定した CodeDOM (Code Document Object Model) 型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このコンピューターの言語プロバイダーおよびコンパイラの構成設定を返します。</summary>
        <returns>構成済みのすべての <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定を表す <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 型の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>コンピューターの言語プロバイダー設定を列挙するメソッド。  
  
> [!NOTE]
>  [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]、.NET Framework によって提供される既定の言語プロバイダーがで指定されていない、 [ &lt;system.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)コンパイラ構成セクションし、削除することはできませんのでこのメソッドは、既定のプロバイダーと構成ファイルで指定されたいずれかに関する情報を返します。  
  
   
  
## Examples  
 次のコード例では、コンピューターの言語プロバイダーを列挙し、各言語プロバイダーの構成とコンパイラ設定を表示します。 このコード例が示されている例の一部、<xref:System.CodeDom.Compiler.CompilerInfo>クラス。  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">コンパイラおよび言語プロバイダー設定のスキーマ</related>
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">言語名。</param>
        <summary>指定した言語の言語プロバイダーおよびコンパイラの構成設定を返します。</summary>
        <returns>構成済みの <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定で作成された <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)ファイルにはで構成にはそれぞれの言語プロバイダーとコンパイラ構成設定が含まれています<xref:System.CodeDom.Compiler.CodeDomProvider>コンピューターに実装します。 マシンの構成ファイルについては、マシンの構成ファイルのセクションを参照してください。[構成アプリ](~/docs/framework/configure-apps/index.md)します。 <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>メソッドは、指定された言語名の各プロバイダーの構成要素を検索します。 返された<xref:System.CodeDom.Compiler.CompilerInfo>インスタンスには、構成済みの言語プロバイダーおよびコンパイラ設定が含まれています。  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>メソッドは、少なくとも 1 つのプロバイダーの実装が特定の言語をサポートしているかどうかを確認します。 使用して言語名を検証する<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>に渡す前に<xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>します。 これにより、スロー、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>にアクセスするとき、<xref:System.CodeDom.Compiler.CompilerInfo>サポートされていない言語名のインスタンス。  
  
 入力言語の名前、複数のプロバイダーの実装が構成されている場合<xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>構成要素最後の一致するプロバイダーからの設定を返します。  
  
 言語名が、区別されます。  
  
   
  
## Examples  
 次のコード例の決定、<xref:System.CodeDom.Compiler.CodeDomProvider>実装の入力言語および言語プロバイダーの構成設定が表示されます。 このコード例が示されている例の一部、<xref:System.CodeDom.Compiler.CompilerInfo>クラス。  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <paramref name="language" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">コンパイラおよび言語プロバイダー設定のスキーマ</related>
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">型コンバーターを取得する対象のオブジェクトの型。</param>
        <summary>指定したデータ ソースの <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</summary>
        <returns>指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。指定した型の <see cref="T:System.ComponentModel.TypeConverter" /> が見つからない場合は <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 派生クラスでは、特定のデータ型の特定の種類の型コンバーターを提供するには、このメソッドをオーバーライドできます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">ファイル名拡張子。</param>
        <summary>
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成セクションに構成されている、指定したファイル名拡張子に関連付けられた言語名を返します。</summary>
        <returns>
          <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成設定に構成されている、ファイル名拡張子に関連付けられた言語名。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)ファイル (Machine.config) で構成にはそれぞれの言語プロバイダーとコンパイラ構成設定が含まれています<xref:System.CodeDom.Compiler.CodeDomProvider>実装で、コンピューター。 <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>メソッドは、指定したファイル名拡張子の各プロバイダーの構成要素を検索します。  
  
 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>メソッドは、少なくとも 1 つのプロバイダーの実装が特定のファイル名拡張子をサポートしているかどうかを確認します。 使用してファイル名拡張子を検証する<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>に渡す前に<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>します。 これにより、<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>からスロー、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>のサポートされていないファイル名拡張子。  
  
 プロバイダーの実装は、入力ファイル名拡張子をサポートしているし、そのプロバイダー用に構成された複数のサポートされている言語がある場合<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>そのプロバイダーの最初の言語名を返します。 入力ファイル名拡張子に 1 つ以上のプロバイダーの実装が構成されている場合<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>構成要素最後の一致するプロバイダーからの言語の名前を返します。  
  
 言語名とファイル名拡張子が区別されます。  
  
   
  
## Examples  
 次のコード例の決定、<xref:System.CodeDom.Compiler.CodeDomProvider>実装は、入力ファイル名拡張子および言語プロバイダーの構成設定が表示されます。 このコード例が示されている例の一部、<xref:System.CodeDom.Compiler.CompilerInfo>クラス。  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">このコンピューターには、<paramref name="extension" /> の構成済みの言語プロバイダーがありません。</exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <paramref name="extension" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">コンパイラおよび言語プロバイダー設定のスキーマ</related>
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type">返される型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</param>
        <summary>指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</summary>
        <returns>このコード ジェネレーターによってコードを生成する際に使用する言語用に書式設定された、指定した型のテキスト表現。 たとえば、Visual Basic では、<see cref="T:System.CodeDom.CodeTypeReference" /> 型の <see cref="T:System.Int32" /> を渡すと、"Integer" が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">ファイル名拡張子。</param>
        <summary>コンピューター上に、ファイル名拡張子の関連する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</summary>
        <returns>指定したファイル名拡張子に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)ファイル (Machine.config) で構成にはそれぞれの言語プロバイダーとコンパイラ構成設定が含まれています<xref:System.CodeDom.Compiler.CodeDomProvider>実装で、コンピューター。 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>メソッドは、指定したファイル名拡張子のプロバイダー構成要素を検索します。  
  
 ファイル名拡張子が、区別されます。  
  
   
  
## Examples  
 次のコード例の決定、<xref:System.CodeDom.Compiler.CodeDomProvider>実装は、入力ファイル名拡張子および言語プロバイダーの構成設定が表示されます。 このコード例が示されている例の一部、<xref:System.CodeDom.Compiler.CompilerInfo>クラス。  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="extension" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">コンパイラおよび言語プロバイダー設定のスキーマ</related>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">言語名。</param>
        <summary>コンピューター上に、言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</summary>
        <returns>指定した言語に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)ファイル (Machine.config) で構成にはそれぞれの言語プロバイダーとコンパイラ構成設定が含まれています<xref:System.CodeDom.Compiler.CodeDomProvider>実装で、コンピューター。 <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>メソッドは、指定された言語名のプロバイダー構成要素を検索します。  
  
 言語名が、区別されます。  
  
   
  
## Examples  
 次のコード例の決定、<xref:System.CodeDom.Compiler.CodeDomProvider>実装の入力言語および言語プロバイダーの構成設定が表示されます。 このコード例が示されている例の一部、<xref:System.CodeDom.Compiler.CompilerInfo>クラス。  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="language" /> が <see langword="null" /> です。</exception>
        <exception cref="T:System.Security.SecurityException">呼び出し元に、必要なアクセス許可がありません。</exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">直前の呼び出し元に対する完全な信頼。 このメンバーは、部分的に信頼されているコードから使用することはできません。</permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
        <related type="Article" href="~/docs/framework/configure-apps/file-schema/compiler/index.md">コンパイラおよび言語プロバイダー設定のスキーマ</related>
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">有効な識別子かどうかを検査する値。</param>
        <summary>指定した値が現在の言語で有効な識別子かどうかを示す値を返します。</summary>
        <returns>
          <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、識別子が有効かどうかをテストします。 <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A>メソッドは、特定のプロバイダー。 1 つのプロバイダーに対して有効な識別子をその他のプロバイダーの有効なことができない可能性があります。 場合`value`文字が含まれています、ASCII 文字の範囲外のコードをコンパイルする場合に使用するすべての言語識別子を確認します。  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>オーバーライドするときに<see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />を返すメソッドを設計、派生クラスで<see langword="true" />値は、言語の規則に適合し、キーワードと競合しない場合にのみです。  
  
このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>言語機能識別子を取得します。</summary>
        <value>言語の特殊な機能を示す <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="codeStream">解析するコードの読み取りに使用する <see cref="T:System.IO.TextReader" /> オブジェクト。</param>
        <summary>指定したテキスト ストリームから読み取ったコードを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</summary>
        <returns>コードの解析後の表現を格納する <see cref="T:System.CodeDom.CodeCompileUnit" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeParser>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeParser>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、パーサーを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />コード パーサーを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeParser" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード パーサーを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netcore-2.1;netframework-4.8;dotnet-plat-ext-2.1" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport">検査するコード生成サポートの種類を示す <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクト。</param>
        <param name="supports">検査するコード生成サポートの種類を示す <see cref="T:System.CodeDom.Compiler.GeneratorSupport" /> オブジェクト。</param>
        <summary>指定したコードを生成できるかどうかを示す値を返します。</summary>
        <returns>指定したコードを生成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 数がこのメソッドを呼び出すことが<xref:System.CodeDom.Compiler.GeneratorSupport>バイナリと共に、適切な機能フラグのセットを結合することで、一連の機能をテストするには、一度にフラグ`OR`演算子 (&#124;)。  
  
> [!NOTE]
>  .NET Framework バージョン 1.0 および 1.1 では、このメソッドがによって提供される、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッド。 バージョン 2.0 では、このメソッドを呼び出されますコード プロバイダーに直接コード プロバイダーがオーバーライドされていない場合でもできます。 コード プロバイダーは、このメソッドをオーバーライドしない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>基本クラスによって実装が呼び出されます。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</exception>
        <block subset="none" type="overrides">
          <para>このメソッドをオーバーライドする場合、基底クラスの対応するメソッドを呼び出さないでください。 基底クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッド。 基底クラスのメソッド同等のメソッドを呼び出して、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装はこの機能を実行します。 表示されます、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基底クラスのメソッドを呼び出す場合。</para>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>