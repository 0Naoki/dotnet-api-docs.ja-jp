<Type Name="CodeDomProvider" FullName="System.CodeDom.Compiler.CodeDomProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c00ef54e956a8f875ecf66668178f9222eacafe4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36647507" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeDomProvider : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CodeDomProvider extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.CodeDom.Compiler.CodeDomProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeDomProvider&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeDomProvider abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type CodeDomProvider = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.CodeDom</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="53bc6-101">
        <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> の実装の基本クラスを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53bc6-101">Provides a base class for <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span>
      </span>
      <span data-ttu-id="53bc6-102">このクラスは抽象クラスです。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53bc6-102">This class is abstract.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-103">A<xref:System.CodeDom.Compiler.CodeDomProvider>を作成し、コード ジェネレーター、コード コンパイラのインスタンスを取得するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-103">A <xref:System.CodeDom.Compiler.CodeDomProvider> can be used to create and retrieve instances of code generators and code compilers.</span></span> <span data-ttu-id="53bc6-104">コード ジェネレーターを使用して特定の言語のコードを生成でき、コード コンパイラを使用してコードをアセンブリにコンパイルできます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-104">Code generators can be used to generate code in a particular language, and code compilers can be used to compile code into assemblies.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-105">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]メソッドで使用できるコード ジェネレーター、コード コンパイラがコード プロバイダーから直接使用します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-105">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the methods made available in the code generator and code compiler are available directly from the code provider.</span></span> <span data-ttu-id="53bc6-106">呼び出す必要はありません<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>または<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>にアクセスするメソッド、およびこれらのメソッドは、不使用とマークします。</span><span class="sxs-lookup"><span data-stu-id="53bc6-106">You do not need to call <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> or <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> to access the methods, and those methods are marked as obsolete.</span></span> <span data-ttu-id="53bc6-107">これは、新しいコード プロバイダーの実装だけでなく、既存の適用されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-107">This applies to preexisting as well as new code provider implementations.</span></span>  
  
 <span data-ttu-id="53bc6-108">A<xref:System.CodeDom.Compiler.CodeDomProvider>実装通常コード生成やコード コンパイルのインターフェイスを提供および 1 つのプログラミング言語のコンパイルを管理するコードを生成するためです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-108">A <xref:System.CodeDom.Compiler.CodeDomProvider> implementation typically provides code generation and/or code compilation interfaces for generating code and managing compilation for a single programming language.</span></span> <span data-ttu-id="53bc6-109">サポートされているいくつかの言語<xref:System.CodeDom.Compiler.CodeDomProvider>に付属している実装、[!INCLUDE[winsdklong](~/includes/winsdklong-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-109">Several languages are supported by <xref:System.CodeDom.Compiler.CodeDomProvider> implementations that ship with the [!INCLUDE[winsdklong](~/includes/winsdklong-md.md)].</span></span> <span data-ttu-id="53bc6-110">これらの言語には、c#、Visual Basic、C++、および JScript が含まれます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-110">These languages include C#, Visual Basic, C++, and JScript.</span></span> <span data-ttu-id="53bc6-111">開発者またはコンパイラ販売元が実装することができます、<xref:System.CodeDom.Compiler.ICodeGenerator>と<xref:System.CodeDom.Compiler.ICodeCompiler>インターフェイスおよび提供、 <xref:System.CodeDom.Compiler.CodeDomProvider> CodeDOM 他のプログラミング言語のサポートを拡張します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-111">Developers or compiler vendors can implement the <xref:System.CodeDom.Compiler.ICodeGenerator> and <xref:System.CodeDom.Compiler.ICodeCompiler> interfaces and provide a <xref:System.CodeDom.Compiler.CodeDomProvider> that extends CodeDOM support to other programming languages.</span></span>  
  
 <span data-ttu-id="53bc6-112">[ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)ファイル (Machine.config) が追加の構成設定を追加するには、開発者やコンパイラ販売元のメカニズムを提供するマシンの構成の<xref:System.CodeDom.Compiler.CodeDomProvider>実装します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-112">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) provides a mechanism for developers and compiler vendors to add configuration settings for additional <xref:System.CodeDom.Compiler.CodeDomProvider> implementations.</span></span>  
  
 <span data-ttu-id="53bc6-113"><xref:System.CodeDom.Compiler.CodeDomProvider>クラスを検出し、列挙の静的メソッドを提供、<xref:System.CodeDom.Compiler.CodeDomProvider>コンピューターに実装します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-113">The <xref:System.CodeDom.Compiler.CodeDomProvider> class provides static methods to discover and enumerate the <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="53bc6-114"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>メソッドは、すべての設定を返します<xref:System.CodeDom.Compiler.CodeDomProvider>コンピューターに実装します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-114">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method returns the settings for all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer.</span></span> <span data-ttu-id="53bc6-115"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>メソッドは、特定の設定を返します<xref:System.CodeDom.Compiler.CodeDomProvider>プログラミング言語の名前に基づく実装します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-115">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method returns the settings for a specific <xref:System.CodeDom.Compiler.CodeDomProvider> implementation, based on the programming language name.</span></span> <span data-ttu-id="53bc6-116"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッドのインスタンスを返します、<xref:System.CodeDom.Compiler.CodeDomProvider>特定の言語の実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-116">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="53bc6-117">構成ファイルの言語プロバイダー設定の詳細については、次を参照してください。[コンパイラおよび言語プロバイダー設定のスキーマ](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8)です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-117">For more details on language provider settings in the configuration file, see [Compiler and Language Provider Settings Schema](http://msdn.microsoft.com/library/c020b139-8699-4f0d-9ac9-70d0c5b2a8c8).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-118">このクラスは、リンク確認要求し、クラス レベルの継承確認要求を使用します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-118">This class makes a link demand and an inheritance demand at the class level.</span></span> <span data-ttu-id="53bc6-119">A<xref:System.Security.SecurityException>が、直前の呼び出し元または派生クラスのいずれかに完全信頼のアクセス許可がない場合にスローされます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-119">A <xref:System.Security.SecurityException> is thrown if either the immediate caller or the derived class does not have full trust permission.</span></span> <span data-ttu-id="53bc6-120">セキュリティ要求の詳細については、「[リンク確認要求](~/docs/framework/misc/link-demands.md)と[継承確認要求](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9)です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-120">For details about security demands, see [Link Demands](~/docs/framework/misc/link-demands.md) and [Inheritance Demands](http://msdn.microsoft.com/library/28b9adbb-8f08-4f10-b856-dbf59eb932d9).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-121">次のサンプル プログラムは生成し、"Hello World"を使用して印刷するプログラムの CodeDOM モデルに基づくソース コードをコンパイル、<xref:System.Console>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-121">The following example program can generate and compile source code based on a CodeDOM model of a program that prints "Hello World" using the <xref:System.Console> class.</span></span> <span data-ttu-id="53bc6-122">Windows フォーム ユーザー インターフェイスを提供します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-122">A Windows Forms user interface is provided.</span></span> <span data-ttu-id="53bc6-123">ユーザーがプログラミングいくつかの選択肢から言語を選択できます。 c#、Visual Basic、および JScript です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-123">The user can select the target programming language from several selections: C#, Visual Basic, and JScript.</span></span>  
  
 [!code-cpp[CodeDomExample#1](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#1)]
 [!code-csharp[CodeDomExample#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#1)]
 [!code-vb[CodeDomExample#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
      <span data-ttu-id="53bc6-124">直前の呼び出し元に対する完全な信頼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53bc6-124">for full trust for the immediate caller.</span>
      </span>
      <span data-ttu-id="53bc6-125">このクラスは、部分的に信頼されたコードでは使用できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53bc6-125">This class cannot be used by partially trusted code.</span>
      </span>
    </permission>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">
      <span data-ttu-id="53bc6-126">継承時の完全な信頼。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53bc6-126">for full trust for inheritors.</span>
      </span>
      <span data-ttu-id="53bc6-127">部分信頼コードでこのクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="53bc6-127">This class cannot be inherited by partially trusted code.</span>
      </span>
    </permission>
    <block subset="none" type="overrides">
      <span data-ttu-id="53bc6-128">
        <para>.NET Framework バージョン 1.0 および 1.1 では、コード プロバイダーの構成の実装の<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />、 <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />、 <see cref="T:System.CodeDom.Compiler.ICodeParser" />、および<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />です。[です。INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />、 <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />、および<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />メソッドは廃止されましたが、および方法<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />と<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />で直接利用、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />クラスです。コード プロバイダーの実装でこれらのメソッドをオーバーライドして、基本メソッドを呼び出さないでください。</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="53bc6-128">
          <para>In the .NET Framework versions 1.0 and 1.1, code providers consist of implementations of <see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, <see cref="T:System.CodeDom.Compiler.ICodeGenerator" />, <see cref="T:System.CodeDom.Compiler.ICodeParser" />, and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" />. In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />, <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />, and <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> methods are obsolete, and the methods of <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> and <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> are directly available in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class. You should override those methods in your code provider implementation and not call the base methods.</para>
        </span>
      </span>
    </block>
    <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
    <altmember cref="T:Microsoft.CSharp.CSharpCodeProvider" />
    <altmember cref="T:Microsoft.VisualBasic.VBCodeProvider" />
    <altmember cref="T:Microsoft.JScript.JScriptCodeProvider" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeDomProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeDomProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-129">
            <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-129">Initializes a new instance of the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="53bc6-130">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-130">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53bc6-131">このクラスは、部分的に信頼されたコードでは使用できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-131">This class cannot be used by partially trusted code.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromDom">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom (System.CodeDom.Compiler.CompilerParameters options, params System.CodeDom.CodeCompileUnit[] compilationUnits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromDom(class System.CodeDom.Compiler.CompilerParameters options, class System.CodeDom.CodeCompileUnit[] compilationUnits) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromDom(System.CodeDom.Compiler.CompilerParameters,System.CodeDom.CodeCompileUnit[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromDom (options As CompilerParameters, ParamArray compilationUnits As CodeCompileUnit()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromDom(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::CodeDom::CodeCompileUnit ^&gt; ^ compilationUnits);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromDom : System.CodeDom.Compiler.CompilerParameters * System.CodeDom.CodeCompileUnit[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromDom (options, compilationUnits)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="compilationUnits" Type="System.CodeDom.CodeCompileUnit[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="53bc6-132">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-132">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span>
          </span>
        </param>
        <param name="compilationUnits">
          <span data-ttu-id="53bc6-133">コンパイルするコードを示す <see cref="T:System.CodeDom.CodeCompileUnit" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-133">An array of type <see cref="T:System.CodeDom.CodeCompileUnit" /> that indicates the code to compile.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-134">指定したコンパイラ設定を使用して、指定した <see cref="N:System.CodeDom" /> オブジェクトの配列に含まれている <see cref="T:System.CodeDom.CodeCompileUnit" /> ツリーに基づいてアセンブリをコンパイルします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-134">Compiles an assembly based on the <see cref="N:System.CodeDom" /> trees contained in the specified array of <see cref="T:System.CodeDom.CodeCompileUnit" /> objects, using the specified compiler settings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-135">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-135">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of the compilation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-136">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeCompiler>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-136">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-137">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-137">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-138">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeCompiler>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-138">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-139">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-139">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-140">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード コンパイラを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-140">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromFile">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile (System.CodeDom.Compiler.CompilerParameters options, params string[] fileNames);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromFile(class System.CodeDom.Compiler.CompilerParameters options, string[] fileNames) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromFile(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromFile (options As CompilerParameters, ParamArray fileNames As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromFile(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ fileNames);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromFile : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromFile (options, fileNames)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="fileNames" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="53bc6-141">コンパイルの設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-141">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the settings for the compilation.</span>
          </span>
        </param>
        <param name="fileNames">
          <span data-ttu-id="53bc6-142">コンパイルするファイルの名前の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-142">An array of the names of the files to compile.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-143">指定したコンパイラ設定を使用して、指定したファイルに格納されているソース コードからアセンブリをコンパイルします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-143">Compiles an assembly from the source code contained in the specified files, using the specified compiler settings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-144">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-144">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-145">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeCompiler>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-145">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-146">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-146">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-147">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeCompiler>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-147">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-148">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-148">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-149">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード コンパイラを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-149">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CompileAssemblyFromSource">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource (System.CodeDom.Compiler.CompilerParameters options, params string[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.CompilerResults CompileAssemblyFromSource(class System.CodeDom.Compiler.CompilerParameters options, string[] sources) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CompileAssemblyFromSource(System.CodeDom.Compiler.CompilerParameters,System.String[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CompileAssemblyFromSource (options As CompilerParameters, ParamArray sources As String()) As CompilerResults" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::CompilerResults ^ CompileAssemblyFromSource(System::CodeDom::Compiler::CompilerParameters ^ options, ... cli::array &lt;System::String ^&gt; ^ sources);" />
      <MemberSignature Language="F#" Value="abstract member CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults&#xA;override this.CompileAssemblyFromSource : System.CodeDom.Compiler.CompilerParameters * string[] -&gt; System.CodeDom.Compiler.CompilerResults" Usage="codeDomProvider.CompileAssemblyFromSource (options, sources)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerResults</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.CodeDom.Compiler.CompilerParameters" />
        <Parameter Name="sources" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">
          <span data-ttu-id="53bc6-150">このコンパイルのコンパイラ設定を示す <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-150">A <see cref="T:System.CodeDom.Compiler.CompilerParameters" /> object that indicates the compiler settings for this compilation.</span>
          </span>
        </param>
        <param name="sources">
          <span data-ttu-id="53bc6-151">コンパイルするソース コード文字列の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-151">An array of source code strings to compile.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-152">指定したコンパイラ設定を使用して、ソース コードが格納されている指定した文字列の配列からアセンブリをコンパイルします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-152">Compiles an assembly from the specified array of strings containing source code, using the specified compiler settings.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-153">コンパイルの結果を示す <see cref="T:System.CodeDom.Compiler.CompilerResults" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-153">A <see cref="T:System.CodeDom.Compiler.CompilerResults" /> object that indicates the results of compilation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-154">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeCompiler>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-154">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-155">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-155">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-156">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeCompiler>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-156">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeCompiler> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-157">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-157">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-158">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />コード コンパイラを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード コンパイラを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-158">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" /> method for compatibility with preexisting providers that use code compilers. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code compiler.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.CompilerParameters" />
        <altmember cref="T:System.CodeDom.Compiler.CompilerResults" />
      </Docs>
    </Member>
    <Member MemberName="CreateCompiler">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeCompiler CreateCompiler ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeCompiler CreateCompiler() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateCompiler" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateCompiler () As ICodeCompiler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeCompiler ^ CreateCompiler();" />
      <MemberSignature Language="F#" Value="abstract member CreateCompiler : unit -&gt; System.CodeDom.Compiler.ICodeCompiler" Usage="codeDomProvider.CreateCompiler " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeCompiler is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeCompiler</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-159">派生クラスでオーバーライドされると、新しいコード コンパイラを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-159">When overridden in a derived class, creates a new code compiler.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-160">
            <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> ベースのソース コードをコンパイルするために使用できる <see cref="N:System.CodeDom" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-160">An <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> that can be used for compilation of <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-161">このメソッドは廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-161">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="53bc6-162">呼び出す、推奨される方法は、<xref:System.CodeDom.Compiler.ICodeCompiler>コード プロバイダーで直接使用できるメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-162">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeCompiler> methods that are directly available in the code provider.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-163">
            <para>[です。実装する必要があります INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、<see cref="T:System.CodeDom.Compiler.ICodeCompiler" />内のメンバー、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />クラスし、スロー、<see cref="T:System.NotSupportedException" />このメソッドが呼び出されます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-163">
              <para>In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeCompiler" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateEscapedIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateEscapedIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateEscapedIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateEscapedIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateEscapedIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateEscapedIdentifier : string -&gt; string&#xA;override this.CreateEscapedIdentifier : string -&gt; string" Usage="codeDomProvider.CreateEscapedIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="53bc6-164">エスケープ識別子作成の対象となる文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-164">The string for which to create an escaped identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-165">指定した値のエスケープ識別子を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-165">Creates an escaped identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-166">その値のエスケープ識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-166">The escaped identifier for the value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-167"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> テスト識別子が予約されているいずれかと競合するかどうか、または言語のキーワードを場合は、言語固有のエスケープ コードの書式設定と同じ名前を返します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-167"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateEscapedIdentifier%2A> tests whether the identifier conflicts with any reserved or language keywords, and if so, returns an equivalent name with language-specific escape code formatting.</span></span> <span data-ttu-id="53bc6-168">これは、エスケープされた識別子に呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-168">This is referred to an escaped identifier.</span></span> <span data-ttu-id="53bc6-169">エスケープされた識別子を含む同じ`value`識別子、キーワードと区別するのには追加エスケープ コードの書式設定が、します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-169">The escaped identifier contains the same `value` but has escape-code formatting added to differentiate the identifier from the keyword.</span></span> <span data-ttu-id="53bc6-170">2 つの実装の例では、先頭、`value`と"@"ひとまとめにして、または、`value`で"["および"]"です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-170">Two implementation examples are preceding the `value` with "@" or bracketing the `value` with "[" and "]".</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-171">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-171">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-172">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-172">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-173">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-173">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-174">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-174">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-175">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-175">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateGenerator">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-176">派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-176">When overridden in a derived class, creates a new code generator.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public abstract System.CodeDom.Compiler.ICodeGenerator CreateGenerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function CreateGenerator () As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator();" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : unit -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeGenerator is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-177">派生クラスでオーバーライドされると、新しいコード ジェネレーターを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-177">When overridden in a derived class, creates a new code generator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-178">
            <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-178">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-179">このメソッドは廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-179">This method is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)].</span></span> <span data-ttu-id="53bc6-180">呼び出す、推奨される方法は、<xref:System.CodeDom.Compiler.ICodeGenerator>で直接使用できる方法は、<xref:System.CodeDom.Compiler.CodeDomProvider>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-180">The recommended alternative is to call the <xref:System.CodeDom.Compiler.ICodeGenerator> methods that are directly available in the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-181">
            <para>[です。実装する必要があります INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />内のメンバー、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" />クラスし、スロー、<see cref="T:System.NotSupportedException" />このメソッドが呼び出されます。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-181">
              <para>In the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)], you should implement the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> members in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> class and throw a <see cref="T:System.NotSupportedException" /> when this method is called.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (System.IO.TextWriter output);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(class System.IO.TextWriter output) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (output As TextWriter) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::IO::TextWriter ^ output);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : System.IO.TextWriter -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator output" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="output" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="output">
          <span data-ttu-id="53bc6-182">出力に使用する <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-182">A <see cref="T:System.IO.TextWriter" /> to use to output.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-183">派生クラスでオーバーライドされると、出力用に指定されている <see cref="T:System.IO.TextWriter" /> を使用して、新しいコード ジェネレーターを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-183">When overridden in a derived class, creates a new code generator using the specified <see cref="T:System.IO.TextWriter" /> for output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-184">
            <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-184">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-185">このメソッドは、指定された使用<xref:System.IO.TextWriter>出力用です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-185">This method uses the specified <xref:System.IO.TextWriter> for output.</span></span> <span data-ttu-id="53bc6-186">このメソッドは、ソース コードの増分更新を複数の最適化されたコード生成をサポートします。</span><span class="sxs-lookup"><span data-stu-id="53bc6-186">This method supports more optimized code generation that incrementally updates the source code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-187">基本クラス実装の呼び出し、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>メソッドで、廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]され、その結果、<xref:System.NotSupportedException>場合、<xref:System.CodeDom.Compiler.ICodeGenerator>オブジェクトは返されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-187">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.TextWriter" />
      </Docs>
    </Member>
    <Member MemberName="CreateGenerator">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeGenerator CreateGenerator (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeGenerator CreateGenerator(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateGenerator (fileName As String) As ICodeGenerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeGenerator ^ CreateGenerator(System::String ^ fileName);" />
      <MemberSignature Language="F#" Value="abstract member CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator&#xA;override this.CreateGenerator : string -&gt; System.CodeDom.Compiler.ICodeGenerator" Usage="codeDomProvider.CreateGenerator fileName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeGenerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">
          <span data-ttu-id="53bc6-188">出力ファイル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-188">The file name to output to.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-189">派生クラスでオーバーライドされると、出力用に指定されているファイル名を使用して、新しいコード ジェネレーターを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-189">When overridden in a derived class, creates a new code generator using the specified file name for output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-190">
            <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> ベースのソース コードを生成するために使用できる <see cref="N:System.CodeDom" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-190">An <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> that can be used to generate <see cref="N:System.CodeDom" /> based source code representations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-191">このメソッドは、指定したファイル名の出力を使用します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-191">This method uses the specified file name for output.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-192">基本クラス実装の呼び出し、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>メソッドで、廃止されていますが、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]され、その結果、<xref:System.NotSupportedException>場合、<xref:System.CodeDom.Compiler.ICodeGenerator>オブジェクトは返されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-192">The base class implementation calls the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method, which is obsolete in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] and results in a <xref:System.NotSupportedException> if an <xref:System.CodeDom.Compiler.ICodeGenerator> object is not returned.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParser">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.ICodeParser CreateParser ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.Compiler.ICodeParser CreateParser() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateParser () As ICodeParser" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::Compiler::ICodeParser ^ CreateParser();" />
      <MemberSignature Language="F#" Value="abstract member CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser&#xA;override this.CreateParser : unit -&gt; System.CodeDom.Compiler.ICodeParser" Usage="codeDomProvider.CreateParser " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("ICodeParser is obsolete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.ICodeParser</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-193">派生クラスでオーバーライドされると、新しいコード パーサーを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-193">When overridden in a derived class, creates a new code parser.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-194">ソース コードを解析するために使用できる <see cref="T:System.CodeDom.Compiler.ICodeParser" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-194">An <see cref="T:System.CodeDom.Compiler.ICodeParser" /> that can be used to parse source code.</span>
          </span>
          <span data-ttu-id="53bc6-195">基本実装では、常に <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-195">The base implementation always returns <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateProvider">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-196">指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-196">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="53bc6-197">言語名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-197">The language name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-198">指定した言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-198">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-199">指定した言語名に対して実装される CodeDOM プロバイダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-199">A CodeDOM provider that is implemented for the specified language name.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-200">このメソッドは、いくつかのプロバイダーのいずれかをオプションで使用するアプリケーションでコード プロバイダーのインスタンスを作成する最もよく使用します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-200">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="53bc6-201"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> インスタンスを作成するコード プロバイダーを実行時に指定できます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-201"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> allows you to specify at run time the code provider you wish to instantiate.</span></span> <span data-ttu-id="53bc6-202">どのコード プロバイダーを使用してデザイン時にわかっている場合そのコード プロバイダーのインスタンスを作成しないでを使用して、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-202">If you know at design time which code provider is to be used, you should create an instance of that code provider rather than use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method.</span></span>  
  
 <span data-ttu-id="53bc6-203"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッドを返します、<xref:System.CodeDom.Compiler.CodeDomProvider>特定言語の名前のインスタンス以外の呼び出しに似ていますが、<xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType>言語プロバイダーの種類を持つメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-203">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns a <xref:System.CodeDom.Compiler.CodeDomProvider> instance for a specific language name; it is similar to calling the <xref:System.Activator.CreateInstance%2A?displayProperty=nameWithType> method with the language provider type.</span></span> <span data-ttu-id="53bc6-204">使用して<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>言語名に対して構成されているプロバイダーの実装を動的に検索する場合。</span><span class="sxs-lookup"><span data-stu-id="53bc6-204">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> when you want to dynamically find a configured provider implementation for a language name.</span></span>  
  
 <span data-ttu-id="53bc6-205">言語の名前、1 つ以上のプロバイダー実装が構成されている場合<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>最後の一致する構成要素のプロバイダーのインスタンスを返します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-205">If more than one provider implementation is configured for the language name, <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> returns a provider instance for the last matching configuration element.</span></span>  
  
 <span data-ttu-id="53bc6-206">使用して、<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>メソッドのオーバー ロードする場合、特定の言語プロバイダーの実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-206">Use the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> method overload when you want a specific language provider implementation.</span></span> <span data-ttu-id="53bc6-207">たとえば、使用、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>言語の名前をサポートするプロバイダーのインスタンスを取得するメソッド`"CSharp"`; を使用して、<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType>専用のプロバイダーのインスタンスを取得するメソッドのオーバー ロード、<xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType>実装します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-207">For example, use the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method to get a provider instance that supports the language name `"CSharp"`; use the <xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%29?displayProperty=nameWithType> method overload to get a provider instance specifically for the <xref:Microsoft.CSharp.CSharpCodeProvider?displayProperty=nameWithType> implementation.</span></span> <span data-ttu-id="53bc6-208">使用する必要があります、[\]、CultureInfo オブジェクトを使用して\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType > メソッドの言語用の複数のコード プロバイダーがあり、特定のコード プロバイダーをインスタンス化したい場合。</span><span class="sxs-lookup"><span data-stu-id="53bc6-208">You should use the [\], CultureInfo, Object\<xref:System.Activator.CreateInstance%28System.Type%2CSystem.Reflection.BindingFlags%2CSystem.Reflection.Binder%2CSystem.Object%5B%5D%2CSystem.Globalization.CultureInfo%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> method if you have multiple code providers for a language and you desire to instantiate a specific code provider.</span></span>  
  
 <span data-ttu-id="53bc6-209"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>メソッドでは、少なくとも 1 つのプロバイダーの実装が特定の言語をサポートしているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-209">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="53bc6-210">使用して言語名を検証する<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>に渡す前に<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-210">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>.</span></span> <span data-ttu-id="53bc6-211">サポートされていない言語名を渡す場合<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-211">If you pass an unsupported language name to <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> is thrown.</span></span>  
  
 <span data-ttu-id="53bc6-212"><xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>を特定するメソッドを使用できます<xref:System.CodeDom.Compiler.CodeDomProvider>、開発者やで識別されるコンパイラ ベンダーによって提供される追加の実装を含むコンピューターの実装、 [ &lt;system.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)マシン構成ファイル (Machine.config) でします。</span><span class="sxs-lookup"><span data-stu-id="53bc6-212">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method can be used to determine all <xref:System.CodeDom.Compiler.CodeDomProvider> implementations on a computer, including additional implementations provided by developers and compiler vendors that are identified in the [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config).</span></span>  
  
 <span data-ttu-id="53bc6-213"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A>メソッドのインスタンスを返します、<xref:System.CodeDom.Compiler.CodeDomProvider>特定の言語の実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-213">The <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%2A> method returns an instance of a <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for a specific language.</span></span>  
  
 <span data-ttu-id="53bc6-214">言語名では区別されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-214">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-215">次のコード例を決定、<xref:System.CodeDom.Compiler.CodeDomProvider>入力言語と表示言語プロバイダーの構成設定の実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-215">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="53bc6-216">このコード例に示されている例の一部である、<xref:System.CodeDom.Compiler.CompilerInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-216">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <span data-ttu-id="53bc6-217">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-217">The <paramref name="language" /> does not have a configured provider on this computer.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="53bc6-218">
            <paramref name="language" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-218">The <paramref name="language" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="53bc6-219">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-219">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="53bc6-220">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-220">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53bc6-221">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-221">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CreateProvider">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CodeDomProvider CreateProvider (string language, System.Collections.Generic.IDictionary&lt;string,string&gt; providerOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CodeDomProvider CreateProvider(string language, class System.Collections.Generic.IDictionary`2&lt;string, string&gt; providerOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String,System.Collections.Generic.IDictionary{System.String,System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateProvider (language As String, providerOptions As IDictionary(Of String, String)) As CodeDomProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CodeDomProvider ^ CreateProvider(System::String ^ language, System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ providerOptions);" />
      <MemberSignature Language="F#" Value="static member CreateProvider : string * System.Collections.Generic.IDictionary&lt;string, string&gt; -&gt; System.CodeDom.Compiler.CodeDomProvider" Usage="System.CodeDom.Compiler.CodeDomProvider.CreateProvider (language, providerOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
        <Parameter Name="providerOptions" Type="System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="53bc6-222">言語名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-222">The language name.</span>
          </span>
        </param>
        <param name="providerOptions">
          <span data-ttu-id="53bc6-223">構成ファイルのプロバイダー オプションのコレクション。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-223">A collection of provider options from the configuration file.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-224">指定された言語オプションおよびプロバイダー オプションの <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> インスタンスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-224">Gets a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> instance for the specified language and provider options.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-225">指定した言語名およびオプションに対して実装される CodeDOM プロバイダー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-225">A CodeDOM provider that is implemented for the specified language name and options.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-226">このメソッドは、いくつかのプロバイダーのいずれかをオプションで使用するアプリケーションでコード プロバイダーのインスタンスを作成する最もよく使用します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-226">This method is most commonly used to create an instance of a code provider in an application that may optionally use one of several providers.</span></span> <span data-ttu-id="53bc6-227"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> 実行時にインスタンスを作成するコード プロバイダーのバージョンを指定できます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-227"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> enables you to specify at run time the version of the code provider you want to instantiate.</span></span> <span data-ttu-id="53bc6-228">どのコード プロバイダーを使用してデザイン時にわかっている場合を使用せずにそのコード プロバイダーのインスタンスを作成する必要があります、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-228">If you know at design time which code provider is to be used, you should create an instance of that code provider instead of using the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> method.</span></span>  
  
 <span data-ttu-id="53bc6-229">使用して<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29>特定の言語とオプションの構成プロバイダーの実装を動的に検索する場合。</span><span class="sxs-lookup"><span data-stu-id="53bc6-229">Use <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%2CSystem.Collections.Generic.IDictionary%7BSystem.String%2CSystem.String%7D%29> when you want to dynamically find a configured provider implementation for a specific language and options.</span></span> <span data-ttu-id="53bc6-230">言語名では区別されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-230">Language names are case-insensitive.</span></span> <span data-ttu-id="53bc6-231">サポートされているプロバイダー オプションについては、特定の CodeDOM プロバイダーのマニュアルを参照してください。</span><span class="sxs-lookup"><span data-stu-id="53bc6-231">For information about supported provider options, see the specific CodeDOM provider documentation.</span></span>  
  
 <span data-ttu-id="53bc6-232">プロバイダーを検証して、言語の名前の 2 つ以上のプロバイダー実装が構成されている場合、プロバイダーの呼び出しについては、の「解説」セクションを参照してください、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-232">For information about validating a provider and calling a provider if more than one provider implementation is configured for the language name, see the Remarks section of the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateProvider%28System.String%29> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-233">次の例を使用して、プロバイダーのインスタンスを作成する方法を示しています、`providerOptions`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="53bc6-233">The following example shows how to create an instance of a provider by using the `providerOptions` parameter.</span></span>  
  
 [!code-csharp[CodeDomProvider.ProviderOptions#1](~/samples/snippets/csharp/VS_Snippets_CLR/codedomprovider.provideroptions/cs/program.cs#1)]
 [!code-vb[CodeDomProvider.ProviderOptions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/codedomprovider.provideroptions/vb/program.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual string CreateValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string CreateValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CreateValidIdentifier (value As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ CreateValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member CreateValidIdentifier : string -&gt; string&#xA;override this.CreateValidIdentifier : string -&gt; string" Usage="codeDomProvider.CreateValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="53bc6-234">有効な識別子生成の対象となる文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-234">The string for which to generate a valid identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-235">指定した値の有効な識別子を作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-235">Creates a valid identifier for the specified value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-236">指定した値の有効な識別子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-236">A valid identifier for the specified value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-237"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> 識別子が予約されていると競合しているかどうかをテストまたは言語のキーワード、しかどうか、有効な識別子を返すしようという名前が競合しません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-237"><xref:System.CodeDom.Compiler.CodeDomProvider.CreateValidIdentifier%2A> tests whether the identifier conflicts with reserved or language keywords, and if so, attempts to return a valid identifier name that does not conflict.</span></span> <span data-ttu-id="53bc6-238">From キーワード; 識別子を区別するために返される識別子が若干変更されて通常たとえば、名前可能性があります前にアンダー スコア (「_ _」) です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-238">Usually the returned identifier is only slightly modified to differentiate the identifier from the keyword; for example, the name might be preceded by the underscore ("_") character.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-239">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-239">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-240">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-240">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-241">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-241">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-242">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-242">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-243">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-243">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="FileExtension">
      <MemberSignature Language="C#" Value="public virtual string FileExtension { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileExtension" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property FileExtension As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ FileExtension { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileExtension : string" Usage="System.CodeDom.Compiler.CodeDomProvider.FileExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-244">現在の言語のソース コード ファイルに使用する既定のファイル名拡張子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-244">Gets the default file name extension to use for source code files in the current language.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="53bc6-245">現在の言語のソース ファイルの拡張子に対応するファイル名拡張子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-245">A file name extension corresponding to the extension of the source files of the current language.</span>
          </span>
          <span data-ttu-id="53bc6-246">基本実装では、常に <see cref="F:System.String.Empty" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-246">The base implementation always returns <see cref="F:System.String.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-247">このプロパティは、ファイル名拡張子を生成または使用する必要がありますを示すコード ジェネレーター、コード コンパイラによって使用します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-247">This property is used by code generators and code compilers to indicate what file extensions should be generated or used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-248">次のコード例のインスタンスを作成する<xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-248">The following code example creates an instance of <xref:Microsoft.VisualBasic.VBCodeProvider?displayProperty=nameWithType>.</span></span> <span data-ttu-id="53bc6-249">プロバイダーの名前、ハッシュ コード、および既定のファイル名拡張子プロバイダーの新しいインスタンスを表示します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-249">The example displays the provider name, hash code and default file name extension for the new provider instance.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#3)]
 [!code-csharp[CodeDom_CompilerInfo#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#3)]
 [!code-vb[CodeDom_CompilerInfo#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromCompileUnit">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromCompileUnit (System.CodeDom.CodeCompileUnit compileUnit, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromCompileUnit(class System.CodeDom.CodeCompileUnit compileUnit, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit(System.CodeDom.CodeCompileUnit,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromCompileUnit (compileUnit As CodeCompileUnit, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromCompileUnit(System::CodeDom::CodeCompileUnit ^ compileUnit, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromCompileUnit : System.CodeDom.CodeCompileUnit * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromCompileUnit (compileUnit, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="compileUnit">
          <span data-ttu-id="53bc6-250">コード生成の対象となる <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-250">A <see cref="T:System.CodeDom.CodeCompileUnit" /> for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="53bc6-251">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-251">The <see cref="T:System.IO.TextWriter" /> to which the output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="53bc6-252">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-252">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-253">指定した CodeDOM (Code Document Object Model) コンパイル単位のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-253">Generates code for the specified Code Document Object Model (CodeDOM) compilation unit and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-254">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-254">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-255">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-255">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-256">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-256">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-257">次のコード例の使用を示しています、<xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A>から"Hello World"アプリケーション用のコードを生成する方法を<xref:System.CodeDom.CodeCompileUnit>です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-257">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromCompileUnit%2A> method to generate code for a "Hello World" application from a <xref:System.CodeDom.CodeCompileUnit>.</span></span> <span data-ttu-id="53bc6-258">この例に示されている例の一部である、<xref:System.CodeDom.Compiler.CodeDomProvider>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-258">This example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CodeDomProvider> class.</span></span>  
  
 [!code-cpp[CodeDomExample#3](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDomExample/CPP/source.cpp#3)]
 [!code-csharp[CodeDomExample#3](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDomExample/CS/source.cs#3)]
 [!code-vb[CodeDomExample#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDomExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-259">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-259">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-260">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-260">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromExpression">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromExpression (System.CodeDom.CodeExpression expression, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromExpression(class System.CodeDom.CodeExpression expression, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromExpression(System.CodeDom.CodeExpression,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromExpression (expression As CodeExpression, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromExpression(System::CodeDom::CodeExpression ^ expression, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromExpression : System.CodeDom.CodeExpression * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromExpression (expression, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="System.CodeDom.CodeExpression" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="expression">
          <span data-ttu-id="53bc6-261">コード生成の対象となる式を示す <see cref="T:System.CodeDom.CodeExpression" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-261">A <see cref="T:System.CodeDom.CodeExpression" /> object that indicates the expression for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="53bc6-262">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-262">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="53bc6-263">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-263">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-264">指定した CodeDOM (Code Document Object Model) 式のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-264">Generates code for the specified Code Document Object Model (CodeDOM) expression and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-265">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-265">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-266">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-266">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-267">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-267">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-268">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-268">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-269">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-269">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeExpression" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromMember (System.CodeDom.CodeTypeMember member, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromMember(class System.CodeDom.CodeTypeMember member, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember(System.CodeDom.CodeTypeMember,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromMember (member As CodeTypeMember, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromMember(System::CodeDom::CodeTypeMember ^ member, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromMember : System.CodeDom.CodeTypeMember * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromMember (member, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="member" Type="System.CodeDom.CodeTypeMember" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="member">
          <span data-ttu-id="53bc6-270">コード生成の対象となるメンバーを示す <see cref="T:System.CodeDom.CodeTypeMember" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-270">A <see cref="T:System.CodeDom.CodeTypeMember" /> object that indicates the member for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="53bc6-271">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-271">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="53bc6-272">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-272">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-273">指定した CodeDOM (Code Document Object Model) メンバー宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-273">Generates code for the specified Code Document Object Model (CodeDOM) member declaration and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-274">基本クラス実装をスロー、<xref:System.NotImplementedException>です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-274">The base class implementation throws a <xref:System.NotImplementedException>.</span></span> <span data-ttu-id="53bc6-275">参照してください<xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType>ドキュメントについては、このメソッドの実装を記述します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-275">See <xref:Microsoft.CSharp.CSharpCodeProvider.GenerateCodeFromMember%2A?displayProperty=nameWithType> for documentation describing an implementation of this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-276">次のコード例の使用を示しています、<xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A>メソッドによって実装される、<xref:Microsoft.CSharp.CSharpCodeProvider>と<xref:Microsoft.VisualBasic.VBCodeProvider>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-276">The following code example shows the use of the <xref:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromMember%2A> method as implemented by the <xref:Microsoft.CSharp.CSharpCodeProvider> and <xref:Microsoft.VisualBasic.VBCodeProvider> classes.</span></span>  
  
 [!code-csharp[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/cs/program.cs#1)]
 [!code-vb[CodeDom_GenerateCodeFromMember#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_GenerateCodeFromMember/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-277">このメソッドは、派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-277">This method is not overridden in a derived class.</span>
          </span>
        </exception>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeMember" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromNamespace">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromNamespace (System.CodeDom.CodeNamespace codeNamespace, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromNamespace(class System.CodeDom.CodeNamespace codeNamespace, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromNamespace(System.CodeDom.CodeNamespace,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromNamespace(System::CodeDom::CodeNamespace ^ codeNamespace, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromNamespace : System.CodeDom.CodeNamespace * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromNamespace (codeNamespace, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeNamespace">
          <span data-ttu-id="53bc6-278">コード生成の対象となる名前空間を示す <see cref="T:System.CodeDom.CodeNamespace" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-278">A <see cref="T:System.CodeDom.CodeNamespace" /> object that indicates the namespace for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="53bc6-279">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-279">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="53bc6-280">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-280">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-281">指定した CodeDOM (Code Document Object Model) 名前空間のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-281">Generates code for the specified Code Document Object Model (CodeDOM) namespace and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-282">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-282">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-283">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-283">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-284">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-284">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-285">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-285">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-286">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-286">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeNamespace" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromStatement">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromStatement (System.CodeDom.CodeStatement statement, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromStatement(class System.CodeDom.CodeStatement statement, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromStatement(System.CodeDom.CodeStatement,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromStatement (statement As CodeStatement, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromStatement(System::CodeDom::CodeStatement ^ statement, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromStatement : System.CodeDom.CodeStatement * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromStatement (statement, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="statement" Type="System.CodeDom.CodeStatement" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="statement">
          <span data-ttu-id="53bc6-287">コード生成の対象となる CodeDOM 要素を格納する <see cref="T:System.CodeDom.CodeStatement" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-287">A <see cref="T:System.CodeDom.CodeStatement" /> containing the CodeDOM elements for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="53bc6-288">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-288">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="53bc6-289">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-289">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-290">指定した CodeDOM (Code Document Object Model) ステートメントのコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-290">Generates code for the specified Code Document Object Model (CodeDOM) statement and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-291">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-291">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-292">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-292">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-293">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-293">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-294">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-294">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-295">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-295">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeStatement" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GenerateCodeFromType">
      <MemberSignature Language="C#" Value="public virtual void GenerateCodeFromType (System.CodeDom.CodeTypeDeclaration codeType, System.IO.TextWriter writer, System.CodeDom.Compiler.CodeGeneratorOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCodeFromType(class System.CodeDom.CodeTypeDeclaration codeType, class System.IO.TextWriter writer, class System.CodeDom.Compiler.CodeGeneratorOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GenerateCodeFromType(System.CodeDom.CodeTypeDeclaration,System.IO.TextWriter,System.CodeDom.Compiler.CodeGeneratorOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub GenerateCodeFromType (codeType As CodeTypeDeclaration, writer As TextWriter, options As CodeGeneratorOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void GenerateCodeFromType(System::CodeDom::CodeTypeDeclaration ^ codeType, System::IO::TextWriter ^ writer, System::CodeDom::Compiler::CodeGeneratorOptions ^ options);" />
      <MemberSignature Language="F#" Value="abstract member GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit&#xA;override this.GenerateCodeFromType : System.CodeDom.CodeTypeDeclaration * System.IO.TextWriter * System.CodeDom.Compiler.CodeGeneratorOptions -&gt; unit" Usage="codeDomProvider.GenerateCodeFromType (codeType, writer, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeType" Type="System.CodeDom.CodeTypeDeclaration" />
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="options" Type="System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Parameters>
      <Docs>
        <param name="codeType">
          <span data-ttu-id="53bc6-296">コード生成の対象となる型を示す <see cref="T:System.CodeDom.CodeTypeDeclaration" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-296">A <see cref="T:System.CodeDom.CodeTypeDeclaration" /> object that indicates the type for which to generate code.</span>
          </span>
        </param>
        <param name="writer">
          <span data-ttu-id="53bc6-297">出力コードの送信先となる <see cref="T:System.IO.TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-297">The <see cref="T:System.IO.TextWriter" /> to which output code is sent.</span>
          </span>
        </param>
        <param name="options">
          <span data-ttu-id="53bc6-298">コードを生成するために使用するオプションを示す <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-298">A <see cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" /> that indicates the options to use for generating code.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-299">指定した CodeDOM (Code Document Object Model) 型宣言のコードを生成し、指定したオプションを使用して、指定したテキスト ライターに生成されたコードを送信します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-299">Generates code for the specified Code Document Object Model (CodeDOM) type declaration and sends it to the specified text writer, using the specified options.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-300">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-300">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-301">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-301">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-302">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-302">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-303">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-303">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-304">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-304">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.IO.TextWriter" />
        <altmember cref="T:System.CodeDom.CodeTypeDeclaration" />
        <altmember cref="T:System.CodeDom.Compiler.CodeGeneratorOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetAllCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo[] GetAllCompilerInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAllCompilerInfo () As CompilerInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static cli::array &lt;System::CodeDom::Compiler::CompilerInfo ^&gt; ^ GetAllCompilerInfo();" />
      <MemberSignature Language="F#" Value="static member GetAllCompilerInfo : unit -&gt; System.CodeDom.Compiler.CompilerInfo[]" Usage="System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-305">このコンピューターの言語プロバイダーおよびコンパイラの構成設定を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-305">Returns the language provider and compiler configuration settings for this computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-306">構成済みのすべての <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定を表す <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 型の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-306">An array of type <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> representing the settings of all configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementations.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-307">使用して、<xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A>コンピューターの言語プロバイダー設定を列挙するメソッド。</span><span class="sxs-lookup"><span data-stu-id="53bc6-307">Use the <xref:System.CodeDom.Compiler.CodeDomProvider.GetAllCompilerInfo%2A> method to enumerate the language provider settings on a computer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-308">[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]、.NET Framework によって提供される既定の言語プロバイダーがで指定されていない、 [ &lt;system.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)コンパイラ構成セクションし、削除することはできませんのでこのメソッドは、既定のプロバイダーおよび構成ファイルで指定されたすべての情報を返します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-308">In the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], the default language providers supplied by the .NET Framework are not specified in the [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) compiler configuration section and cannot be removed, so this method returns information about the default providers and any specified in the configuration file.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-309">次のコード例では、コンピューターの言語プロバイダーを列挙し、各言語プロバイダーの構成およびコンパイラ設定を表示します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-309">The following code example enumerates the language providers on the computer and displays the configuration and compiler settings for each language provider.</span></span> <span data-ttu-id="53bc6-310">このコード例に示されている例の一部である、<xref:System.CodeDom.Compiler.CompilerInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-310">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#8](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#8)]
 [!code-csharp[CodeDom_CompilerInfo#8](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#8)]
 [!code-vb[CodeDom_CompilerInfo#8](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="53bc6-311">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-311">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="53bc6-312">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-312">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53bc6-313">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-313">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
      </Docs>
    </Member>
    <Member MemberName="GetCompilerInfo">
      <MemberSignature Language="C#" Value="public static System.CodeDom.Compiler.CompilerInfo GetCompilerInfo (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.CodeDom.Compiler.CompilerInfo GetCompilerInfo(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetCompilerInfo (language As String) As CompilerInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::CodeDom::Compiler::CompilerInfo ^ GetCompilerInfo(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member GetCompilerInfo : string -&gt; System.CodeDom.Compiler.CompilerInfo" Usage="System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.CompilerInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="53bc6-314">言語名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-314">A language name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-315">指定した言語の言語プロバイダーおよびコンパイラの構成設定を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-315">Returns the language provider and compiler configuration settings for the specified language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-316">構成済みの <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> 実装の設定で作成された <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-316">A <see cref="T:System.CodeDom.Compiler.CompilerInfo" /> object populated with settings of the configured <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-317">[ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)マシンの構成のファイル、言語プロバイダーとコンパイラ構成設定を含む各<xref:System.CodeDom.Compiler.CodeDomProvider>コンピューターに実装します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-317">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="53bc6-318">マシン構成ファイルについては、のマシン構成ファイルのセクションを参照してください。[構成アプリ](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f)です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-318">For information about machine configuration files, see the Machine Configuration Files section in [Configuring Apps](http://msdn.microsoft.com/library/86bd26d3-737e-4484-9782-19b17f34cd1f).</span></span> <span data-ttu-id="53bc6-319"><xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>メソッドは、指定した言語の名前の各プロバイダーの構成要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-319">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> method searches each provider configuration element for the specified language name.</span></span> <span data-ttu-id="53bc6-320">返された<xref:System.CodeDom.Compiler.CompilerInfo>インスタンスに構成された言語プロバイダーおよびコンパイラ設定が含まれています。</span><span class="sxs-lookup"><span data-stu-id="53bc6-320">The returned <xref:System.CodeDom.Compiler.CompilerInfo> instance contains the configured language provider and compiler settings.</span></span>  
  
 <span data-ttu-id="53bc6-321"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>メソッドでは、少なくとも 1 つのプロバイダーの実装が特定の言語をサポートしているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-321">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method checks whether at least one provider implementation supports a specific language.</span></span> <span data-ttu-id="53bc6-322">使用して言語名を検証する<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>に渡す前に<xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-322">You can validate a language name using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>.</span></span> <span data-ttu-id="53bc6-323">これにより、スロー、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>にアクセスするとき、<xref:System.CodeDom.Compiler.CompilerInfo>サポートされていない言語名のインスタンス。</span><span class="sxs-lookup"><span data-stu-id="53bc6-323">This prevents throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> when you access the <xref:System.CodeDom.Compiler.CompilerInfo> instance for an unsupported language name.</span></span>  
  
 <span data-ttu-id="53bc6-324">入力言語の名前、1 つ以上のプロバイダー実装が構成されている場合<xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A>構成要素最後の一致するプロバイダーからの設定を返します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-324">If more than one provider implementation is configured for the input language name, <xref:System.CodeDom.Compiler.CodeDomProvider.GetCompilerInfo%2A> returns the settings from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="53bc6-325">言語名では区別されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-325">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-326">次のコード例を決定、<xref:System.CodeDom.Compiler.CodeDomProvider>入力言語と表示言語プロバイダーの構成設定の実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-326">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="53bc6-327">このコード例に示されている例の一部である、<xref:System.CodeDom.Compiler.CompilerInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-327">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">
          <span data-ttu-id="53bc6-328">このコンピューターには、<paramref name="language" /> の構成済みのプロバイダーがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-328">The <paramref name="language" /> does not have a configured provider on this computer.</span>
          </span>
        </exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <span data-ttu-id="53bc6-329">
            <paramref name="language" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-329">The <paramref name="language" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="53bc6-330">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-330">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="53bc6-331">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-331">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53bc6-332">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-332">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="T:System.CodeDom.Compiler.CompilerInfo" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetConverter">
      <MemberSignature Language="C#" Value="public virtual System.ComponentModel.TypeConverter GetConverter (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.ComponentModel.TypeConverter GetConverter(class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetConverter(System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::ComponentModel::TypeConverter ^ GetConverter(Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetConverter : Type -&gt; System.ComponentModel.TypeConverter&#xA;override this.GetConverter : Type -&gt; System.ComponentModel.TypeConverter" Usage="codeDomProvider.GetConverter type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.TypeConverter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="53bc6-333">型コンバーターを取得する対象のオブジェクトの型。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-333">The type of object to retrieve a type converter for.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-334">指定したデータ ソースの <see cref="T:System.ComponentModel.TypeConverter" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-334">Gets a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified data type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-335">指定した型の <see cref="T:System.ComponentModel.TypeConverter" />。指定した型の <see cref="T:System.ComponentModel.TypeConverter" /> が見つからない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-335">A <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type, or <see langword="null" /> if a <see cref="T:System.ComponentModel.TypeConverter" /> for the specified type cannot be found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-336">派生クラスでは、特定のデータ型の特定の種類の型コンバーターを提供するには、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-336">A derived class can override this method to provide specific types of type converters for specific data types.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.TypeConverter" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguageFromExtension">
      <MemberSignature Language="C#" Value="public static string GetLanguageFromExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetLanguageFromExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguageFromExtension (extension As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::String ^ GetLanguageFromExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member GetLanguageFromExtension : string -&gt; string" Usage="System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">
          <span data-ttu-id="53bc6-337">ファイル名拡張子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-337">A file name extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-338">
            <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成セクションに構成されている、指定したファイル名拡張子に関連付けられた言語名を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-338">Returns a language name associated with the specified file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration section.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-339">
            <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> のコンパイラ構成設定に構成されている、ファイル名拡張子に関連付けられた言語名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-339">A language name associated with the file name extension, as configured in the <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> compiler configuration settings.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-340">[ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)、マシンの構成では、ファイル (Machine.config) は、各言語プロバイダーとコンパイラ構成設定を含まれています<xref:System.CodeDom.Compiler.CodeDomProvider>に実装します。コンピューターです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-340">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="53bc6-341"><xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>メソッドは、指定したファイル名拡張子の各プロバイダーの構成要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-341">The <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> method searches each provider configuration element for the specified file name extension.</span></span>  
  
 <span data-ttu-id="53bc6-342"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>メソッドでは、少なくとも 1 つのプロバイダーの実装が特定のファイル名拡張子をサポートしているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-342">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method checks whether at least one provider implementation supports a specific file name extension.</span></span> <span data-ttu-id="53bc6-343">使用してファイル名拡張子を検証する<xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>に渡す前に<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-343">You can validate a file name extension using <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> before passing it to <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>.</span></span> <span data-ttu-id="53bc6-344">これにより、<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>からスロー、<xref:System.Configuration.ConfigurationException?displayProperty=nameWithType>サポートされないファイル名拡張子。</span><span class="sxs-lookup"><span data-stu-id="53bc6-344">This prevents <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> from throwing a <xref:System.Configuration.ConfigurationException?displayProperty=nameWithType> for an unsupported file name extension.</span></span>  
  
 <span data-ttu-id="53bc6-345">入力ファイル名拡張子をサポートするプロバイダーの実装が存在しているし、そのプロバイダー用に構成された複数のサポートされている言語<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>そのプロバイダーの最初の言語名を返します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-345">If a provider implementation supports the input file name extension, and there are multiple supported languages configured for that provider, then <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the first language name for that provider.</span></span> <span data-ttu-id="53bc6-346">入力ファイル名拡張子に対して複数のプロバイダー実装が構成されている場合<xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A>構成要素を最後の一致するプロバイダーから言語の名前を返します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-346">If more than one provider implementation is configured for the input file name extension, <xref:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension%2A> returns the language name from the last matching provider configuration element.</span></span>  
  
 <span data-ttu-id="53bc6-347">言語の名前とファイル名拡張子は区別されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-347">Language names and file name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-348">次のコード例を決定、<xref:System.CodeDom.Compiler.CodeDomProvider>入力ファイル名拡張子と表示言語プロバイダーの構成設定の実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-348">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="53bc6-349">このコード例に示されている例の一部である、<xref:System.CodeDom.Compiler.CompilerInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-349">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Configuration.ConfigurationException">
          <span data-ttu-id="53bc6-350">このコンピューターには、<paramref name="extension" /> の構成済みの言語プロバイダーがありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-350">The <paramref name="extension" /> does not have a configured language provider on this computer.</span>
          </span>
        </exception>
        <exception cref="T:System.Configuration.ConfigurationErrorsException">
          <span data-ttu-id="53bc6-351">
            <paramref name="extension" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-351">The <paramref name="extension" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="53bc6-352">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-352">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="53bc6-353">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-353">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53bc6-354">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-354">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetTypeOutput">
      <MemberSignature Language="C#" Value="public virtual string GetTypeOutput (System.CodeDom.CodeTypeReference type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetTypeOutput(class System.CodeDom.CodeTypeReference type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.GetTypeOutput(System.CodeDom.CodeTypeReference)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetTypeOutput (type As CodeTypeReference) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetTypeOutput(System::CodeDom::CodeTypeReference ^ type);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string&#xA;override this.GetTypeOutput : System.CodeDom.CodeTypeReference -&gt; string" Usage="codeDomProvider.GetTypeOutput type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.CodeDom.CodeTypeReference" />
      </Parameters>
      <Docs>
        <param name="type">
          <span data-ttu-id="53bc6-355">返される型を示す <see cref="T:System.CodeDom.CodeTypeReference" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-355">A <see cref="T:System.CodeDom.CodeTypeReference" /> that indicates the type to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-356">指定した <see cref="T:System.CodeDom.CodeTypeReference" /> で示される型を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-356">Gets the type indicated by the specified <see cref="T:System.CodeDom.CodeTypeReference" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-357">このコード ジェネレーターによってコードを生成する際に使用する言語用に書式設定された、指定した型のテキスト表現。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-357">A text representation of the specified type, formatted for the language in which code is generated by this code generator.</span>
          </span>
          <span data-ttu-id="53bc6-358">たとえば、Visual Basic では、<see cref="T:System.CodeDom.CodeTypeReference" /> 型の <see cref="T:System.Int32" /> を渡すと、"Integer" が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-358">In Visual Basic, for example, passing in a <see cref="T:System.CodeDom.CodeTypeReference" /> for the <see cref="T:System.Int32" /> type will return "Integer".</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-359">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-359">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-360">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-360">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-361">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-361">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-362">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-362">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-363">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-363">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDefinedExtension">
      <MemberSignature Language="C#" Value="public static bool IsDefinedExtension (string extension);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedExtension(string extension) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedExtension (extension As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedExtension(System::String ^ extension);" />
      <MemberSignature Language="F#" Value="static member IsDefinedExtension : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension extension" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extension" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extension">
          <span data-ttu-id="53bc6-364">ファイル名拡張子。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-364">A file name extension.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-365">コンピューター上に、ファイル名拡張子の関連する <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-365">Tests whether a file name extension has an associated <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-366">指定したファイル名拡張子に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-366">
              <see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified file name extension; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-367">[ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)、マシンの構成では、ファイル (Machine.config) は、各言語プロバイダーとコンパイラ構成設定を含まれています<xref:System.CodeDom.Compiler.CodeDomProvider>に実装します。コンピューターです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-367">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="53bc6-368"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A>メソッドは、指定したファイル名拡張子のプロバイダー構成要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-368">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedExtension%2A> method searches the provider configuration elements for the specified file name extension.</span></span>  
  
 <span data-ttu-id="53bc6-369">ファイル名拡張子は区別されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-369">File name extensions are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-370">次のコード例を決定、<xref:System.CodeDom.Compiler.CodeDomProvider>入力ファイル名拡張子と表示言語プロバイダーの構成設定の実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-370">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input file name extension and displays the configured settings for the language provider.</span></span> <span data-ttu-id="53bc6-371">このコード例に示されている例の一部である、<xref:System.CodeDom.Compiler.CompilerInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-371">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#5](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#5)]
 [!code-csharp[CodeDom_CompilerInfo#5](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#5)]
 [!code-vb[CodeDom_CompilerInfo#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="53bc6-372">
            <paramref name="extension" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-372">The <paramref name="extension" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="53bc6-373">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-373">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="53bc6-374">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-374">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53bc6-375">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-375">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.GetLanguageFromExtension(System.String)" />
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsDefinedLanguage">
      <MemberSignature Language="C#" Value="public static bool IsDefinedLanguage (string language);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDefinedLanguage(string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDefinedLanguage (language As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDefinedLanguage(System::String ^ language);" />
      <MemberSignature Language="F#" Value="static member IsDefinedLanguage : string -&gt; bool" Usage="System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage language" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="language">
          <span data-ttu-id="53bc6-376">言語名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-376">The language name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-377">コンピューター上に、言語の <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されているかどうかを調べます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-377">Tests whether a language has a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation configured on the computer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-378">指定した言語に対して、<see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> 実装が構成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-378">
              <see langword="true" /> if a <see cref="T:System.CodeDom.Compiler.CodeDomProvider" /> implementation is configured for the specified language; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-379">[ &lt;System.codedom&gt;要素](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md)、マシンの構成では、ファイル (Machine.config) は、各言語プロバイダーとコンパイラ構成設定を含まれています<xref:System.CodeDom.Compiler.CodeDomProvider>に実装します。コンピューターです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-379">The [&lt;system.codedom&gt; Element](~/docs/framework/configure-apps/file-schema/compiler/system-codedom-element.md) in the machine configuration file (Machine.config) contains the language provider and compiler configuration settings for each <xref:System.CodeDom.Compiler.CodeDomProvider> implementation on the computer.</span></span> <span data-ttu-id="53bc6-380"><xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A>メソッドは、指定した言語の名前のプロバイダー構成要素を検索します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-380">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsDefinedLanguage%2A> method searches the provider configuration elements for the specified language name.</span></span>  
  
 <span data-ttu-id="53bc6-381">言語名では区別されません。</span><span class="sxs-lookup"><span data-stu-id="53bc6-381">Language names are case-insensitive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="53bc6-382">次のコード例を決定、<xref:System.CodeDom.Compiler.CodeDomProvider>入力言語と表示言語プロバイダーの構成設定の実装です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-382">The following code example determines the <xref:System.CodeDom.Compiler.CodeDomProvider> implementation for an input language and displays the configured settings for the language provider.</span></span> <span data-ttu-id="53bc6-383">このコード例に示されている例の一部である、<xref:System.CodeDom.Compiler.CompilerInfo>クラスです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-383">This code example is part of a larger example provided for the <xref:System.CodeDom.Compiler.CompilerInfo> class.</span></span>  
  
 [!code-cpp[CodeDom_CompilerInfo#6](~/samples/snippets/cpp/VS_Snippets_CLR/CodeDom_CompilerInfo/CPP/source.cpp#6)]
 [!code-csharp[CodeDom_CompilerInfo#6](~/samples/snippets/csharp/VS_Snippets_CLR/CodeDom_CompilerInfo/CS/source.cs#6)]
 [!code-vb[CodeDom_CompilerInfo#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/CodeDom_CompilerInfo/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="53bc6-384">
            <paramref name="language" /> が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-384">The <paramref name="language" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="53bc6-385">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-385">The caller does not have the required permission.</span>
          </span>
        </exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.LinkDemand">
          <span data-ttu-id="53bc6-386">直前の呼び出し元に対する完全な信頼。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-386">for full trust for the immediate caller.</span>
          </span>
          <span data-ttu-id="53bc6-387">このメンバーは、部分的に信頼されているコードから使用することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-387">This member cannot be used by partially trusted code.</span>
          </span>
        </permission>
        <altmember cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateProvider(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsValidIdentifier">
      <MemberSignature Language="C#" Value="public virtual bool IsValidIdentifier (string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidIdentifier(string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsValidIdentifier (value As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsValidIdentifier(System::String ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IsValidIdentifier : string -&gt; bool&#xA;override this.IsValidIdentifier : string -&gt; bool" Usage="codeDomProvider.IsValidIdentifier value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="53bc6-388">有効な識別子かどうかを検査する値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-388">The value to verify as a valid identifier.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-389">指定した値が現在の言語で有効な識別子かどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-389">Returns a value that indicates whether the specified value is a valid identifier for the current language.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-390">
            <paramref name="value" /> パラメーターが有効な識別子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-390">
              <see langword="true" /> if the <paramref name="value" /> parameter is a valid identifier; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-391">このメソッドは、識別子が有効かどうかをテストします。</span><span class="sxs-lookup"><span data-stu-id="53bc6-391">This method tests whether an identifier is valid.</span></span> <span data-ttu-id="53bc6-392"><xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A>メソッドは、プロバイダー固有です。</span><span class="sxs-lookup"><span data-stu-id="53bc6-392">The <xref:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier%2A> method is provider specific.</span></span> <span data-ttu-id="53bc6-393">1 つのプロバイダーに対して有効な識別子を他のプロバイダーの有効なことができない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="53bc6-393">Identifiers that are valid for one provider might not be valid for other providers.</span></span> <span data-ttu-id="53bc6-394">場合`value`文字が含まれています、ASCII 文字の範囲外のコードのコンパイルに使用されるすべての言語識別子を確認します。</span><span class="sxs-lookup"><span data-stu-id="53bc6-394">If `value` contains characters outside of the ASCII character range, check the identifier for all the languages that might be used to compile the code.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-395">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-395">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-396">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-396">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-397">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-397">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-398">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-398">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-399">
            <para>オーバーライドする場合<see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" />派生クラスでを返す方法の設計<see langword="true" />言語の規則に適合させますであり、キーワードと競合していない場合にのみです。このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-399">
              <para>When overriding <see cref="M:System.CodeDom.Compiler.CodeDomProvider.IsValidIdentifier(System.String)" /> in a derived class, design the method to return <see langword="true" /> only if the value fits the rules of the language and does not conflict with a keyword.  If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="LanguageOptions">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.Compiler.LanguageOptions LanguageOptions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.CodeDom.Compiler.LanguageOptions LanguageOptions" />
      <MemberSignature Language="DocId" Value="P:System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LanguageOptions As LanguageOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::CodeDom::Compiler::LanguageOptions LanguageOptions { System::CodeDom::Compiler::LanguageOptions get(); };" />
      <MemberSignature Language="F#" Value="member this.LanguageOptions : System.CodeDom.Compiler.LanguageOptions" Usage="System.CodeDom.Compiler.CodeDomProvider.LanguageOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.Compiler.LanguageOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="53bc6-400">言語機能識別子を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-400">Gets a language features identifier.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="53bc6-401">言語の特殊な機能を示す <see cref="T:System.CodeDom.Compiler.LanguageOptions" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-401">A <see cref="T:System.CodeDom.Compiler.LanguageOptions" /> that indicates special features of the language.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeCompileUnit Parse (System.IO.TextReader codeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeCompileUnit Parse(class System.IO.TextReader codeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Parse(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Parse (codeStream As TextReader) As CodeCompileUnit" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeCompileUnit ^ Parse(System::IO::TextReader ^ codeStream);" />
      <MemberSignature Language="F#" Value="abstract member Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit&#xA;override this.Parse : System.IO.TextReader -&gt; System.CodeDom.CodeCompileUnit" Usage="codeDomProvider.Parse codeStream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeCompileUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="codeStream" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="codeStream">
          <span data-ttu-id="53bc6-402">解析するコードの読み取りに使用する <see cref="T:System.IO.TextReader" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-402">A <see cref="T:System.IO.TextReader" /> object that is used to read the code to be parsed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="53bc6-403">指定したテキスト ストリームから読み取ったコードを <see cref="T:System.CodeDom.CodeCompileUnit" /> にコンパイルします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-403">Compiles the code read from the specified text stream into a <see cref="T:System.CodeDom.CodeCompileUnit" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-404">コードの解析後の表現を格納する <see cref="T:System.CodeDom.CodeCompileUnit" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-404">A <see cref="T:System.CodeDom.CodeCompileUnit" /> that contains a representation of the parsed code.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-405">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeParser>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-405">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeParser> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateParser%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-406">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-406">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-407">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeParser>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-407">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeParser> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-408">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-408">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-409">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、パーサーを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" />コード パーサーを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeParser" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード パーサーを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-409">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a parser in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateParser" /> method for compatibility with preexisting providers that use code parsers. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeParser" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code parser.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.CodeDom.CodeCompileUnit" />
        <altmember cref="T:System.IO.TextReader" />
      </Docs>
    </Member>
    <Member MemberName="Supports">
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport generatorSupport) cil managed" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport generatorSupport);" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="C#" Value="public virtual bool Supports (System.CodeDom.Compiler.GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Supports(valuetype System.CodeDom.Compiler.GeneratorSupport supports) cil managed" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="DocId" Value="M:System.CodeDom.Compiler.CodeDomProvider.Supports(System.CodeDom.Compiler.GeneratorSupport)" FrameworkAlternate="xamarinmac-3.0;netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Supports (supports As GeneratorSupport) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Supports(System::CodeDom::Compiler::GeneratorSupport supports);" FrameworkAlternate="xamarinmac-3.0" />
      <MemberSignature Language="F#" Value="abstract member Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool&#xA;override this.Supports : System.CodeDom.Compiler.GeneratorSupport -&gt; bool" Usage="codeDomProvider.Supports supports" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.CodeDom</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="generatorSupport" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="netcore-2.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2" />
        <Parameter Name="supports" Type="System.CodeDom.Compiler.GeneratorSupport" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="generatorSupport">To be added.</param>
        <param name="supports">To be added.</param>
        <summary>
          <span data-ttu-id="53bc6-410">指定したコードを生成できるかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-410">Returns a value indicating whether the specified code generation support is provided.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="53bc6-411">指定したコードを生成できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-411">
              <see langword="true" /> if the specified code generation support is provided; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="53bc6-412">数がこのメソッドを呼び出すことができる<xref:System.CodeDom.Compiler.GeneratorSupport>バイナリと共に、適切な機能フラグのセットを結合することで、一連の機能をテストするには、一度にフラグ`OR`演算子 (&#124;)。</span><span class="sxs-lookup"><span data-stu-id="53bc6-412">This method can be called with a number of <xref:System.CodeDom.Compiler.GeneratorSupport> flags at once to test for a set of capabilities by joining a set of appropriate capability flags together with a binary `OR` operator (&#124;).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="53bc6-413">.NET Framework version 1.0 および 1.1 では、このメソッドが用意されて、<xref:System.CodeDom.Compiler.ICodeGenerator>実装によって返される、<xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A>プロバイダーのメソッドです。</span><span class="sxs-lookup"><span data-stu-id="53bc6-413">In the .NET Framework versions 1.0 and 1.1, this method is provided by the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation that is returned by the <xref:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator%2A> method of the provider.</span></span> <span data-ttu-id="53bc6-414">バージョン 2.0 ではコード プロバイダーがオーバーライドされていない場合でもにこのメソッド コード プロバイダーを直接呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-414">In version 2.0, this method can be called directly on the code provider even if it is not overridden by the code provider.</span></span> <span data-ttu-id="53bc6-415">コード プロバイダーがこのメソッドをオーバーライドしていない場合、<xref:System.CodeDom.Compiler.ICodeGenerator>実装は、基本クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="53bc6-415">If the code provider does not override this method, the <xref:System.CodeDom.Compiler.ICodeGenerator> implementation is called by the base class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">
          <span data-ttu-id="53bc6-416">このメソッドと <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> メソッドは、いずれも派生クラスでオーバーライドされません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-416">Neither this method nor the <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method is overridden in a derived class.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="53bc6-417">
            <para>このメソッドをオーバーライドする場合、対応する、基本クラスのメソッドを呼び出さないでください。基本クラスのメソッドでは、ジェネレーターを作成、古い形式を使用して派生クラスで<see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" />コード ジェネレーターを使用する既存のプロバイダーとの互換性のためのメソッドです。基本クラスのメソッドを順に呼び出して、相当するメソッド、<see cref="T:System.CodeDom.Compiler.ICodeGenerator" />実装にこの機能を実行します。表示される、<see cref="T:System.NotImplementedException" />コード ジェネレーターを使用しないコード プロバイダーから基本クラスのメソッドを呼び出す場合。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="53bc6-417">
              <para>If you override this method, you must not call the corresponding method of the base class. The base-class method creates a generator in the derived class using the obsolete <see cref="M:System.CodeDom.Compiler.CodeDomProvider.CreateGenerator" /> method for compatibility with preexisting providers that use code generators. The base-class method then calls the equivalent method in the <see cref="T:System.CodeDom.Compiler.ICodeGenerator" /> implementation to perform this function. You will get a <see cref="T:System.NotImplementedException" /> if you call the base-class method from a code provider that does not use a code generator.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.CodeDom.Compiler.GeneratorSupport" />
      </Docs>
    </Member>
  </Members>
</Type>