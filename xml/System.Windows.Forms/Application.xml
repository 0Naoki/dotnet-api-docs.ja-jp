<Type Name="Application" FullName="System.Windows.Forms.Application">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e752222af6c6569cb55bfb9498e89168045d4932" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51870457" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Application" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Application extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Application" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Application" />
  <TypeSignature Language="C++ CLI" Value="public ref class Application sealed" />
  <TypeSignature Language="F#" Value="type Application = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e34d5-101">Windows メッセージを処理するために、アプリケーションを開始および停止するメソッドや、アプリケーションについての情報を取得するためのプロパティなど、アプリケーションを管理するための <see langword="static" /> メソッドおよびプロパティを提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e34d5-101">Provides <see langword="static" /> methods and properties to manage an application, such as methods to start and stop an application, to process Windows messages, and properties to get information about an application.</span>
      </span>
      <span data-ttu-id="e34d5-102">このクラスは継承できません。</span>
      <span class="sxs-lookup">
        <span data-stu-id="e34d5-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-103"><xref:System.Windows.Forms.Application>クラスのアプリケーションとスレッドを開始および停止して、次のように、Windows メッセージを処理するメソッドがあります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-103">The <xref:System.Windows.Forms.Application> class has methods to start and stop applications and threads, and to process Windows messages, as follows:</span></span>  
  
-   <span data-ttu-id="e34d5-104"><xref:System.Windows.Forms.Application.Run%2A> 現在のスレッドで、アプリケーション メッセージ ループを開始し、必要に応じて、フォームを表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-104"><xref:System.Windows.Forms.Application.Run%2A> starts an application message loop on the current thread and, optionally, makes a form visible.</span></span>  
  
-   <span data-ttu-id="e34d5-105"><xref:System.Windows.Forms.Application.Exit%2A> または<xref:System.Windows.Forms.Application.ExitThread%2A>メッセージ ループを停止します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-105"><xref:System.Windows.Forms.Application.Exit%2A> or <xref:System.Windows.Forms.Application.ExitThread%2A> stops a message loop.</span></span>  
  
-   <span data-ttu-id="e34d5-106"><xref:System.Windows.Forms.Application.DoEvents%2A> ループになっているプログラムは、メッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-106"><xref:System.Windows.Forms.Application.DoEvents%2A> processes messages while your program is in a loop.</span></span>  
  
-   <span data-ttu-id="e34d5-107"><xref:System.Windows.Forms.Application.AddMessageFilter%2A> Windows メッセージを監視するアプリケーション メッセージ ポンプにメッセージ フィルターを追加します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-107"><xref:System.Windows.Forms.Application.AddMessageFilter%2A> adds a message filter to the application message pump to monitor Windows messages.</span></span>  
  
-   <span data-ttu-id="e34d5-108"><xref:System.Windows.Forms.IMessageFilter> により、イベントの発生を停止またはイベント ハンドラーを呼び出す前に特別な操作を実行できます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-108"><xref:System.Windows.Forms.IMessageFilter> lets you stop an event from being raised or perform special operations before invoking an event handler.</span></span>  
  
 <span data-ttu-id="e34d5-109">このクラスは<xref:System.Windows.Forms.Application.CurrentCulture%2A>と<xref:System.Windows.Forms.Application.CurrentInputLanguage%2A>カルチャの現在のスレッドの情報を取得または設定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-109">This class has <xref:System.Windows.Forms.Application.CurrentCulture%2A> and <xref:System.Windows.Forms.Application.CurrentInputLanguage%2A> properties to get or set culture information for the current thread.</span></span>  
  
 <span data-ttu-id="e34d5-110">このクラスのインスタンスを作成することはできません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-110">You cannot create an instance of this class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-111">次のコード例は、フォームのリスト ボックス内の番号を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-111">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="e34d5-112">クリックするたびに`button1`アプリケーションの一覧に別の番号を追加します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-112">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="e34d5-113">`Main`メソッド呼び出し<xref:System.Windows.Forms.Application.Run%2A>フォームを作成すると、アプリケーションを起動する`listBox1`と`button1`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-113">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1` and `button1`.</span></span> <span data-ttu-id="e34d5-114">ユーザーがクリックすると`button1`、`button1_Click`メソッドが表示されます、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-114">When the user clicks `button1`, the `button1_Click` method displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="e34d5-115">ユーザーがクリックした場合`No`上、 <xref:System.Windows.Forms.MessageBox>、`button1_Click`メソッドの一覧に数値を追加します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-115">If the user clicks `No` on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds a number to the list.</span></span> <span data-ttu-id="e34d5-116">ユーザーがクリックした場合`Yes`、アプリケーション呼び出し<xref:System.Windows.Forms.Application.Exit%2A>をキューに残りのすべてのメッセージを処理し、終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-116">If the user clicks `Yes`, the application calls <xref:System.Windows.Forms.Application.Exit%2A> to process all remaining messages in the queue and then to quit.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-117">呼び出し<xref:System.Windows.Forms.Application.Exit%2A>部分信頼では失敗します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-117">The call to <xref:System.Windows.Forms.Application.Exit%2A> will fail in partial trust.</span></span>  
  
 [!code-cpp[Classic Application Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application Example/CS/source.cs#1)]
 [!code-vb[Classic Application Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddMessageFilter">
      <MemberSignature Language="C#" Value="public static void AddMessageFilter (System.Windows.Forms.IMessageFilter value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddMessageFilter(class System.Windows.Forms.IMessageFilter value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub AddMessageFilter (value As IMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void AddMessageFilter(System::Windows::Forms::IMessageFilter ^ value);" />
      <MemberSignature Language="F#" Value="static member AddMessageFilter : System.Windows.Forms.IMessageFilter -&gt; unit" Usage="System.Windows.Forms.Application.AddMessageFilter value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.IMessageFilter" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e34d5-118">インストールする <see cref="T:System.Windows.Forms.IMessageFilter" /> インターフェイスの実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-118">The implementation of the <see cref="T:System.Windows.Forms.IMessageFilter" /> interface you want to install.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-119">メッセージ フィルターを追加して、ルーティング先にルーティングされる Windows メッセージを監視します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-119">Adds a message filter to monitor Windows messages as they are routed to their destinations.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-120">特定のイベントが発生していることを防ぐために、またはイベントをイベント ハンドラーに渡される前に特別な操作を実行するメッセージ フィルターを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-120">Use a message filter to prevent specific events from being raised or to perform special operations for an event before it is passed to an event handler.</span></span> <span data-ttu-id="e34d5-121">メッセージ フィルターは、特定のスレッドに固有です。</span><span class="sxs-lookup"><span data-stu-id="e34d5-121">Message filters are unique to a specific thread.</span></span>  
  
 <span data-ttu-id="e34d5-122">メッセージがディスパッチされていることを防ぐために、`value`このメソッドに渡すパラメーターのインスタンスをオーバーライドする必要があります、<xref:System.Windows.Forms.IMessageFilter.PreFilterMessage%2A>メッセージを処理するコードを持つメソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-122">To prevent a message from being dispatched, the `value` parameter instance that you pass to this method must override the <xref:System.Windows.Forms.IMessageFilter.PreFilterMessage%2A> method with the code to handle the message.</span></span> <span data-ttu-id="e34d5-123">メソッドは `false`を返します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-123">The method must return `false`.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e34d5-124">アプリケーションのメッセージ ポンプにメッセージ フィルターを追加すると、パフォーマンスが低下することができます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-124">Adding message filters to the message pump for an application can degrade performance.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-125">次のコード例と呼ばれるメッセージ フィルターを作成する`TestMessageFilter`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-125">The following code example creates a message filter called `TestMessageFilter`.</span></span> <span data-ttu-id="e34d5-126">このフィルターは、マウスの左ボタンに関連するすべてのメッセージをブロックします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-126">This filter blocks all messages relating to the left mouse button.</span></span> <span data-ttu-id="e34d5-127">メッセージ フィルターを使用するには、実装を提供する必要があります、<xref:System.Windows.Forms.IMessageFilter>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="e34d5-127">Before you can use a message filter, you must provide an implementation for the <xref:System.Windows.Forms.IMessageFilter> interface.</span></span>  
  
 [!code-cpp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CS/source.cs#1)]
 [!code-vb[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e34d5-128">アンマネージ コードを呼び出す直前の呼び出し元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-128">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="e34d5-129">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-129">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="AllowQuit">
      <MemberSignature Language="C#" Value="public static bool AllowQuit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool AllowQuit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.AllowQuit" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property AllowQuit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool AllowQuit { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.AllowQuit : bool" Usage="System.Windows.Forms.Application.AllowQuit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-130">呼び出し元がこのアプリケーションを終了できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-130">Gets a value indicating whether the caller can quit this application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-131">呼び出し元がこのアプリケーションを終了できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-131">
              <see langword="true" /> if the caller can quit this application; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-132">このプロパティを返します`false`から呼び出された場合、 <xref:System.Windows.Forms.Control> Web ブラウザー内でホストされています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-132">This property returns `false` if it is called from a <xref:System.Windows.Forms.Control> being hosted within a Web browser.</span></span> <span data-ttu-id="e34d5-133">つまり、<xref:System.Windows.Forms.Control>を終了できません、<xref:System.Windows.Forms.Application>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-133">Thus, the <xref:System.Windows.Forms.Control> cannot quit the <xref:System.Windows.Forms.Application>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplicationExit">
      <MemberSignature Language="C#" Value="public static event EventHandler ApplicationExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ApplicationExit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ApplicationExit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ApplicationExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ ApplicationExit;" />
      <MemberSignature Language="F#" Value="member this.ApplicationExit : EventHandler " Usage="member this.ApplicationExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-134">アプリケーションをシャットダウンしようとすると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-134">Occurs when the application is about to shut down.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-135">イベント ハンドラーをアタッチする必要があります、<xref:System.Windows.Forms.Application.Exit%2A>ハンドルされていないを実行するアプリケーションの実行が停止する前にタスクが必要です。</span><span class="sxs-lookup"><span data-stu-id="e34d5-135">You must attach the event handlers to the <xref:System.Windows.Forms.Application.Exit%2A> event to perform unhandled, required tasks before the application stops running.</span></span> <span data-ttu-id="e34d5-136">このアプリケーション、またはガベージ コレクションがクリアされなかったオブジェクトの破棄によって開かれたファイルを閉じることができます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-136">You can close files opened by this application, or dispose of objects that garbage collection did not reclaim.</span></span>  
  
 <span data-ttu-id="e34d5-137">これは、静的イベントであるためで、このイベントにアタッチされているすべてのイベント ハンドラーをデタッチする必要があります、<xref:System.Windows.Forms.Application.ApplicationExit>イベント ハンドラー自体。</span><span class="sxs-lookup"><span data-stu-id="e34d5-137">Because this is a static event, you must detach any event handlers attached to this event in the <xref:System.Windows.Forms.Application.ApplicationExit> event handler itself.</span></span> <span data-ttu-id="e34d5-138">これらのハンドラーを接続解除しないでイベントに接続したまま、され、メモリを消費する続行されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-138">If you do not detach these handlers, they will remain attached to the event and continue to consume memory.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-139">次のコード例では、2 つのフォームを表示し、両方のフォームが閉じられたときに、アプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-139">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="e34d5-140">アプリケーションを起動し、終了、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-140">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="e34d5-141">この例では、<xref:System.Windows.Forms.Application.ApplicationExit>を知り、フォームの位置は、ファイルに永続化するとき、およびイベント、`FileStream`閉じる必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-141">This example demonstrates using the <xref:System.Windows.Forms.Application.ApplicationExit> event to know when the form positions should be persisted to the file, and when the `FileStream` should be closed.</span></span>  
  
 <span data-ttu-id="e34d5-142">クラスは、`MyApplicationContext`継承<xref:System.Windows.Forms.ApplicationContext>各フォームが閉じられるし、はどちらも、ときに、現在のスレッドを終了するときの追跡とします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-142">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track of when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="e34d5-143">クラスが閉じているときに、各フォームの位置を記憶します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-143">The class remembers the position of each form when it is closed.</span></span> <span data-ttu-id="e34d5-144">ときに、<xref:System.Windows.Forms.Application.ApplicationExit>イベントが発生する、クラスでは、ユーザーのそれぞれの位置をファイルに書き込みます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-144">When the <xref:System.Windows.Forms.Application.ApplicationExit> event occurs, the class writes the positions of each for the user to the file.</span></span> <span data-ttu-id="e34d5-145">フォームの位置データがという名前のファイルに格納されている`appdata.txt`によって決定の場所に作成される<xref:System.Windows.Forms.Application.UserAppDataPath%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-145">The form position data is stored in a file titled `appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="e34d5-146">`Main`メソッド呼び出し`Application.Run(context)`に基づいてアプリケーションを開始する、<xref:System.Windows.Forms.ApplicationContext>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-146">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="e34d5-147">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.ApplicationContext>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="e34d5-147">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="e34d5-148">参照してください<xref:System.Windows.Forms.ApplicationContext>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="e34d5-148">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="CommonAppDataPath">
      <MemberSignature Language="C#" Value="public static string CommonAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CommonAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CommonAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommonAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CommonAppDataPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAppDataPath : string" Usage="System.Windows.Forms.Application.CommonAppDataPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-149">すべてのユーザーが共有するアプリケーション データのパスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-149">Gets the path for the application data that is shared among all users.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-150">すべてのユーザーが共有するアプリケーション データのパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-150">The path for the application data that is shared among all users.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-151">パスが存在しない場合は、次の形式で 1 つ作成されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-151">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="e34d5-152">*基本パス*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="e34d5-152">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>  
  
 <span data-ttu-id="e34d5-153"><xref:System.Windows.Forms.Application.ProductVersion%2A> メインの実行可能ファイルを含むアセンブリが含まれているが最初に検索、`AssemblyInformationalVersion`属性。</span><span class="sxs-lookup"><span data-stu-id="e34d5-153"><xref:System.Windows.Forms.Application.ProductVersion%2A> first looks to see if the assembly containing the main executable has the `AssemblyInformationalVersion` attribute on it.</span></span> <span data-ttu-id="e34d5-154">この属性が存在する場合は、両方の使用<xref:System.Windows.Forms.Application.ProductVersion%2A>と<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-154">If this attribute exists, it is used for both <xref:System.Windows.Forms.Application.ProductVersion%2A> and <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.</span></span> <span data-ttu-id="e34d5-155">両方のプロパティをこの属性が存在しない場合、実行可能ファイルのバージョンが代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-155">If this attribute does not exist, both properties use the version of the executable file instead.</span></span>  
  
 <span data-ttu-id="e34d5-156">Windows フォーム アプリケーションの配置を使用しているかどうかによって異なる、パスになります[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-156">The path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="e34d5-157">アプリケーションは、C:\Documents and Settings でユーザーごとのアプリケーション キャッシュに格納されている\\*username*ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-157">applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span> <span data-ttu-id="e34d5-158">詳細については、次を参照してください。[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-158">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.CommonAppDataRegistry" />
      </Docs>
    </Member>
    <Member MemberName="CommonAppDataRegistry">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.RegistryKey CommonAppDataRegistry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Win32.RegistryKey CommonAppDataRegistry" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CommonAppDataRegistry" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CommonAppDataRegistry As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Win32::RegistryKey ^ CommonAppDataRegistry { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CommonAppDataRegistry : Microsoft.Win32.RegistryKey" Usage="System.Windows.Forms.Application.CommonAppDataRegistry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-159">すべてのユーザーが共有するアプリケーション データのレジストリ キーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-159">Gets the registry key for the application data that is shared among all users.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-160">すべてのユーザーが共有するアプリケーション データのレジストリ キーを表す <see cref="T:Microsoft.Win32.RegistryKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-160">A <see cref="T:Microsoft.Win32.RegistryKey" /> representing the registry key of the application data that is shared among all users.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-161">キーが存在しない場合は、次の形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-161">If the key does not exist, it is created in the following format:</span></span>  
  
 <span data-ttu-id="e34d5-162">LocalMachine\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="e34d5-162">LocalMachine\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public static string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CompanyName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CompanyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ CompanyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompanyName : string" Usage="System.Windows.Forms.Application.CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-163">アプリケーションに関連付けられている会社名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-163">Gets the company name associated with the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-164">会社名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-164">The company name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e34d5-165">次のコード例では、このプロパティを取得し、テキスト ボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-165">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="e34d5-166">この例では、する必要があります`textBox1`がフォームに配置されています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-166">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CompanyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CompanyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CompanyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CompanyName Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CompanyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CompanyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductName" />
        <altmember cref="P:System.Windows.Forms.Application.ProductVersion" />
        <altmember cref="T:System.Reflection.AssemblyCompanyAttribute" />
      </Docs>
    </Member>
    <Member MemberName="CurrentCulture">
      <MemberSignature Language="C#" Value="public static System.Globalization.CultureInfo CurrentCulture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Globalization.CultureInfo CurrentCulture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CurrentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentCulture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Globalization::CultureInfo ^ CurrentCulture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentCulture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Forms.Application.CurrentCulture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-167">現在のスレッドのカルチャ情報を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-167">Gets or sets the culture information for the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-168">現在のスレッドのカルチャ情報を表す <see cref="T:System.Globalization.CultureInfo" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-168">A <see cref="T:System.Globalization.CultureInfo" /> representing the culture information for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e34d5-169">次のコード例では、このプロパティを取得し、テキスト ボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-169">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="e34d5-170">この例では、する必要があります`textBox1`がフォームに配置されています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-170">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CurrentCulture Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CurrentCulture Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CurrentCulture Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CurrentCulture Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="e34d5-171">このプロパティを設定するすべてのウィンドウ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-171">for all windows to set this property.</span>
          </span>
          <span data-ttu-id="e34d5-172">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-172">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Forms.InputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.InputLanguage CurrentInputLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.InputLanguage CurrentInputLanguage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.CurrentInputLanguage" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CurrentInputLanguage As InputLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::InputLanguage ^ CurrentInputLanguage { System::Windows::Forms::InputLanguage ^ get(); void set(System::Windows::Forms::InputLanguage ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CurrentInputLanguage : System.Windows.Forms.InputLanguage with get, set" Usage="System.Windows.Forms.Application.CurrentInputLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InputLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-173">現在のスレッドの現在の入力言語を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-173">Gets or sets the current input language for the current thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-174">現在のスレッドの現在の入力言語を表す <see cref="T:System.Windows.Forms.InputLanguage" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-174">An <see cref="T:System.Windows.Forms.InputLanguage" /> representing the current input language for the current thread.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e34d5-175">次のコード例では、このプロパティを取得し、テキスト ボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-175">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="e34d5-176">この例では、する必要があります`textBox1`がフォームに配置されています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-176">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/CS/source.cs#1)]
 [!code-vb[Classic Application.CurrentInputLanguage Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.CurrentInputLanguage Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e34d5-177">アンマネージ コードを呼び出す直前の呼び出し元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-177">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="e34d5-178">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-178">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Globalization.CultureInfo" />
        <altmember cref="T:System.Windows.Forms.InputLanguage" />
      </Docs>
    </Member>
    <Member MemberName="DoEvents">
      <MemberSignature Language="C#" Value="public static void DoEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DoEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.DoEvents" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub DoEvents ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void DoEvents();" />
      <MemberSignature Language="F#" Value="static member DoEvents : unit -&gt; unit" Usage="System.Windows.Forms.Application.DoEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-179">メッセージ キューに現在ある Windows メッセージをすべて処理します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-179">Processes all Windows messages currently in the message queue.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-180">Windows フォームを実行するときにイベントを処理するを待機し、新しいフォームを作成します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-180">When you run a Windows Form, it creates the new form, which then waits for events to handle.</span></span> <span data-ttu-id="e34d5-181">フォームは、イベントを処理するたびに、そのイベントに関連付けられているすべてのコードを処理します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-181">Each time the form handles an event, it processes all the code associated with that event.</span></span> <span data-ttu-id="e34d5-182">その他のすべてのイベントは、キューで待機します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-182">All other events wait in the queue.</span></span> <span data-ttu-id="e34d5-183">コードでは、イベントを処理するときに、アプリケーションは応答しません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-183">While your code handles the event, your application does not respond.</span></span> <span data-ttu-id="e34d5-184">たとえば、ウィンドウが再描画されない別のウィンドウが手前にドラッグした場合。</span><span class="sxs-lookup"><span data-stu-id="e34d5-184">For example, the window does not repaint if another window is dragged on top.</span></span>  
  
 <span data-ttu-id="e34d5-185">呼び出す場合<xref:System.Windows.Forms.Application.DoEvents%2A>コードでは、アプリケーションが他のイベントを処理できます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-185">If you call <xref:System.Windows.Forms.Application.DoEvents%2A> in your code, your application can handle the other events.</span></span> <span data-ttu-id="e34d5-186">例では、データを追加するフォームがある場合、<xref:System.Windows.Forms.ListBox>追加<xref:System.Windows.Forms.Application.DoEvents%2A>上にある別のウィンドウがドラッグされると、コードに、フォームを再描画します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-186">For example, if you have a form that adds data to a <xref:System.Windows.Forms.ListBox> and add <xref:System.Windows.Forms.Application.DoEvents%2A> to your code, your form repaints when another window is dragged over it.</span></span> <span data-ttu-id="e34d5-187">削除する場合<xref:System.Windows.Forms.Application.DoEvents%2A>、コードから、フォームが再描画されないボタンの click イベント ハンドラーが完了するまで実行します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-187">If you remove <xref:System.Windows.Forms.Application.DoEvents%2A> from your code, your form will not repaint until the click event handler of the button is finished executing.</span></span> <span data-ttu-id="e34d5-188">メッセージングの詳細については、次を参照してください。 [Windows フォームでのユーザー入力](~/docs/framework/winforms/user-input-in-windows-forms.md)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-188">For more information on messaging, see [User Input in Windows Forms](~/docs/framework/winforms/user-input-in-windows-forms.md).</span></span>  
  
 <span data-ttu-id="e34d5-189">Visual Basic 6.0 とは異なり、<xref:System.Windows.Forms.Application.DoEvents%2A>メソッドは呼び出しません、<xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-189">Unlike Visual Basic 6.0, the <xref:System.Windows.Forms.Application.DoEvents%2A> method does not call the <xref:System.Threading.Thread.Sleep%2A?displayProperty=nameWithType> method.</span></span>  
  
 <span data-ttu-id="e34d5-190">通常、メッセージを処理するループ内でこのメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-190">Typically, you use this method in a loop to process messages.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e34d5-191">このメソッドを呼び出すと、現在のスレッドを待機しているウィンドウのすべてのメッセージの処理中に中断するが、します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-191">Calling this method causes the current thread to be suspended while all waiting window messages are processed.</span></span> <span data-ttu-id="e34d5-192">メッセージにによりトリガーされるようにイベントが、アプリケーション コードの他の領域は実行可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-192">If a message causes an event to be triggered, then other areas of your application code may execute.</span></span> <span data-ttu-id="e34d5-193">これには、アプリケーションをデバッグするが困難な予期しない動作が発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-193">This can cause your application to exhibit unexpected behaviors that are difficult to debug.</span></span> <span data-ttu-id="e34d5-194">操作または長い時間がかかる計算を実行する場合は、新しいスレッド上でこれらの操作を実行することをお勧めは多くの場合。</span><span class="sxs-lookup"><span data-stu-id="e34d5-194">If you perform operations or computations that take a long time, it is often preferable to perform those operations on a new thread.</span></span> <span data-ttu-id="e34d5-195">非同期プログラミングの詳細については、次を参照してください。[非同期プログラミング モデル (APM)](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-195">For more information about asynchronous programming, see [Asynchronous Programming Model (APM)](~/docs/standard/asynchronous-programming-patterns/asynchronous-programming-model-apm.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-196">次のコード例に示しますを使用して、<xref:System.Windows.Forms.Application.DoEvents%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-196">The following code example demonstrates using the <xref:System.Windows.Forms.Application.DoEvents%2A> method.</span></span> <span data-ttu-id="e34d5-197">ユーザーがからグラフィック ファイルを選択できる例を実行すると、<xref:System.Windows.Forms.OpenFileDialog>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-197">When the example runs, a user can select graphics files from an <xref:System.Windows.Forms.OpenFileDialog>.</span></span> <span data-ttu-id="e34d5-198">選択したファイルは、フォームに表示されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-198">The selected files are displayed in the form.</span></span> <span data-ttu-id="e34d5-199"><xref:System.Windows.Forms.Application.DoEvents%2A>メソッド強制的に開いている各グラフィックス ファイルのフォームの再描画します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-199">The <xref:System.Windows.Forms.Application.DoEvents%2A> method forces a repaint of the form for each graphics file opened.</span></span> <span data-ttu-id="e34d5-200">この例を実行するには、格納しているフォームに次のコードを貼り付け、<xref:System.Windows.Forms.PictureBox>という名前の`PictureBox1`、<xref:System.Windows.Forms.OpenFileDialog>という名前`OpenFileDialog1`、という名前のボタンと`fileButton`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-200">To run this example, paste the following code in a form containing a <xref:System.Windows.Forms.PictureBox> named `PictureBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, and a button named `fileButton`.</span></span> <span data-ttu-id="e34d5-201">呼び出す、`InitializePictureBox`と`InitializeOpenFileDialog`フォームのコンス トラクターのメソッドまたは`Load`メソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-201">Call the `InitializePictureBox` and `InitializeOpenFileDialog` methods from the form's constructor or `Load` method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-202">追加する場合、Visual Studio で、<xref:System.Windows.Forms.OpenFileDialog>をドラッグ操作を使用してフォームには、次のように変更する必要が`InitializeOpenFileDialog`メソッドの新しいインスタンスを作成する行を削除することによって<xref:System.Windows.Forms.OpenFileDialog>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-202">In Visual Studio, if you add an <xref:System.Windows.Forms.OpenFileDialog> to your form by using a drag operation, you will have to modify the following `InitializeOpenFileDialog` method by removing the line that creates a new instance of <xref:System.Windows.Forms.OpenFileDialog>.</span></span>  
  
 <span data-ttu-id="e34d5-203">例もする必要があります、<xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType>のイベント、<xref:System.Windows.Forms.Button>コントロールと<xref:System.Windows.Forms.FileDialog.FileOk>のイベント、<xref:System.Windows.Forms.OpenFileDialog>の例で定義されているイベント ハンドラーに接続しています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-203">The example also requires that the <xref:System.Windows.Forms.Control.Click?displayProperty=nameWithType> event of the <xref:System.Windows.Forms.Button> control and the <xref:System.Windows.Forms.FileDialog.FileOk> event of the <xref:System.Windows.Forms.OpenFileDialog> are connected to the event handlers defined in the example.</span></span> <span data-ttu-id="e34d5-204">例が実行されている場合は、ボタンをクリックして、ダイアログ ボックスを表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-204">When the example is running, display the dialog box by clicking the button.</span></span>  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.Run" />
      </Docs>
    </Member>
    <Member MemberName="EnableVisualStyles">
      <MemberSignature Language="C#" Value="public static void EnableVisualStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void EnableVisualStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.EnableVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub EnableVisualStyles ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void EnableVisualStyles();" />
      <MemberSignature Language="F#" Value="static member EnableVisualStyles : unit -&gt; unit" Usage="System.Windows.Forms.Application.EnableVisualStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-205">アプリケーションで visual スタイルを有効にします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-205">Enables visual styles for the application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-206">このメソッドは、アプリケーションの visual スタイルを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-206">This method enables visual styles for the application.</span></span> <span data-ttu-id="e34d5-207">Visual スタイルでは、色、フォント、およびオペレーティング システムのテーマを形成する他のビジュアル要素が。</span><span class="sxs-lookup"><span data-stu-id="e34d5-207">Visual styles are the colors, fonts, and other visual elements that form an operating system theme.</span></span> <span data-ttu-id="e34d5-208">Visual スタイルを使用して、コントロールと、オペレーティング システムがサポートしている場合は、コントロールが描画されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-208">Controls will draw with visual styles if the control and the operating system support it.</span></span> <span data-ttu-id="e34d5-209">影響を与えるに<xref:System.Windows.Forms.Application.EnableVisualStyles>は、アプリケーションでコントロールを作成する前に呼び出す必要があります通常、<xref:System.Windows.Forms.Application.EnableVisualStyles>の最初の行には、`Main`関数。</span><span class="sxs-lookup"><span data-stu-id="e34d5-209">To have an effect, <xref:System.Windows.Forms.Application.EnableVisualStyles> must be called before creating any controls in the application; typically, <xref:System.Windows.Forms.Application.EnableVisualStyles> is the first line in the `Main` function.</span></span> <span data-ttu-id="e34d5-210">個別のマニフェストを呼び出すときに visual スタイルを有効にする必要はありません<xref:System.Windows.Forms.Application.EnableVisualStyles>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-210">A separate manifest is not required to enable visual styles when calling <xref:System.Windows.Forms.Application.EnableVisualStyles>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-211">.NET Framework 2.0 では、前に、`FlatStyle`プロパティから派生するコントロールなど、一部のコントロールの<xref:System.Windows.Forms.ButtonBase>に設定する必要がある<xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType>visual スタイルで描画するコントロールの順序で。</span><span class="sxs-lookup"><span data-stu-id="e34d5-211">Prior to the .NET Framework 2.0, the `FlatStyle` property of some controls, such as controls that derive from <xref:System.Windows.Forms.ButtonBase>, had to be set to <xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType> in order for the controls to be drawn with visual styles.</span></span> <span data-ttu-id="e34d5-212">.NET Framework 2.0 で記述されたアプリケーションでは、必要に応じてこれはありません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-212">In applications written with the .NET Framework 2.0, this is no longer necessary.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-213">このメソッドには、Internet Explorer でホストされているコントロールの効果はありません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-213">This method will have no effect for controls hosted in Internet Explorer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-214">次のコード例は、呼び出し元を示します<xref:System.Windows.Forms.Application.EnableVisualStyles%2A>で、`Main`アプリケーションの visual スタイルを有効にする関数。</span><span class="sxs-lookup"><span data-stu-id="e34d5-214">The following code example demonstrates calling <xref:System.Windows.Forms.Application.EnableVisualStyles%2A> in the `Main` function to enable visual styles for the application.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Application.EnableVisualStyles#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Application.EnableVisualStyles/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.RenderWithVisualStyles" />
        <altmember cref="P:System.Windows.Forms.Application.VisualStyleState" />
        <altmember cref="T:System.Windows.Forms.FlatStyle" />
      </Docs>
    </Member>
    <Member MemberName="EnterThreadModal">
      <MemberSignature Language="C#" Value="public static event EventHandler EnterThreadModal;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnterThreadModal" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.EnterThreadModal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event EnterThreadModal As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ EnterThreadModal;" />
      <MemberSignature Language="F#" Value="member this.EnterThreadModal : EventHandler " Usage="member this.EnterThreadModal : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-215">アプリケーションがモーダル状態に入ろうとすると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-215">Occurs when the application is about to enter a modal state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="e34d5-216">静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークが発生するとき、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-216">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-217">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-217">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="e34d5-218">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Application.EnterThreadModal>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-218">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.EnterThreadModal> event.</span></span> <span data-ttu-id="e34d5-219">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-219">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="e34d5-220">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-220">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="e34d5-221">コード例を実行する Windows フォームに貼り付けることと、イベント ハンドラーに関連付けられていることを確認、<xref:System.Windows.Forms.Application.EnterThreadModal>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-221">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.EnterThreadModal> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#3)]
 [!code-vb[System.Windows.Forms.EventExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e34d5-222">必要があります<see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" />イベントをリッスンするアクセス許可。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-222">Requires <see cref="P:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode" /> permission to listen to the event.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ExecutablePath">
      <MemberSignature Language="C#" Value="public static string ExecutablePath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ExecutablePath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ExecutablePath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ExecutablePath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ExecutablePath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecutablePath : string" Usage="System.Windows.Forms.Application.ExecutablePath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-223">アプリケーションを開始した実行可能ファイルのパスを、ファイル名を含めて取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-223">Gets the path for the executable file that started the application, including the executable name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-224">アプリケーションを開始した実行可能ファイルのパスおよびファイル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-224">The path and executable name for the executable file that started the application.</span>
          </span>
          <span data-ttu-id="e34d5-225">このパスは、Windows フォーム アプリケーションが [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] を使用して配置されているかどうかによって異なります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-225">This path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span>
          </span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="e34d5-226">アプリケーションは、C:\Documents and Settings でユーザーごとのアプリケーション キャッシュに格納されている\\*username*ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-226">applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span><span data-ttu-id="e34d5-227">詳細については、次を参照してください。[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-227">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span></value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="e34d5-228">パスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-228">for getting the path.</span>
          </span>
          <span data-ttu-id="e34d5-229">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-229">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Exit">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-230">終了する必要があるすべてのメッセージ ポンプを通知し、メッセージが処理されると、すべてのアプリケーション ウィンドウを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-230">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Exit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit();" />
      <MemberSignature Language="F#" Value="static member Exit : unit -&gt; unit" Usage="System.Windows.Forms.Application.Exit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-231">終了する必要があるすべてのメッセージ ポンプを通知し、メッセージが処理されると、すべてのアプリケーション ウィンドウを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-231">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-232"><xref:System.Windows.Forms.Application.Exit%2A>メソッドは、すべてのスレッドで実行中のすべてのメッセージ ループを停止して、アプリケーションのすべてのウィンドウを閉じます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-232">The <xref:System.Windows.Forms.Application.Exit%2A> method stops all running message loops on all threads and closes all windows of the application.</span></span> <span data-ttu-id="e34d5-233">このメソッドは、アプリケーションを終了するを必ずしも強制しません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-233">This method does not necessarily force the application to exit.</span></span> <span data-ttu-id="e34d5-234"><xref:System.Windows.Forms.Application.Exit%2A>とメッセージ ループ内でメソッドの呼び出し元通常<xref:System.Windows.Forms.Application.Run%2A>を返します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-234">The <xref:System.Windows.Forms.Application.Exit%2A> method is typically called from within a message loop, and forces <xref:System.Windows.Forms.Application.Run%2A> to return.</span></span> <span data-ttu-id="e34d5-235">現在のスレッドのみのメッセージ ループを終了するには、呼び出す<xref:System.Windows.Forms.Application.ExitThread%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-235">To exit a message loop for the current thread only, call <xref:System.Windows.Forms.Application.ExitThread%2A>.</span></span>  
  
 <span data-ttu-id="e34d5-236"><xref:System.Windows.Forms.Application.Exit%2A> 次のイベントが発生し、関連付けられている条件付きアクションを実行します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-236"><xref:System.Windows.Forms.Application.Exit%2A> raises the following events and performs the associated conditional actions:</span></span>  
  
-   <span data-ttu-id="e34d5-237">A<xref:System.Windows.Forms.Form.FormClosing>によって表されるすべてのフォームのイベントは、<xref:System.Windows.Forms.Application.OpenForms%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-237">A <xref:System.Windows.Forms.Form.FormClosing> event is raised for every form represented by the <xref:System.Windows.Forms.Application.OpenForms%2A> property.</span></span> <span data-ttu-id="e34d5-238">このイベントは、設定によって取り消されることができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.Windows.Forms.FormClosingEventArgs>パラメーターを`true`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-238">This event can be canceled by setting the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of their <xref:System.Windows.Forms.FormClosingEventArgs> parameter to `true`.</span></span>  
  
-   <span data-ttu-id="e34d5-239">イベントをキャンセルの 1 つ以上のハンドラーのかどうかは<xref:System.Windows.Forms.Application.Exit%2A>せず、さらにアクションを返します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-239">If one of more of the handlers cancels the event, then <xref:System.Windows.Forms.Application.Exit%2A> returns without further action.</span></span> <span data-ttu-id="e34d5-240">それ以外の場合、<xref:System.Windows.Forms.Form.FormClosed>すべてのフォームのイベントが発生し、実行中のすべてのメッセージ ループとフォームが閉じられます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-240">Otherwise, a <xref:System.Windows.Forms.Form.FormClosed> event is raised for every open form, then all running message loops and forms are closed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-241"><xref:System.Windows.Forms.Application.Exit%2A>メソッドを発生させない、<xref:System.Windows.Forms.Form.Closed>と<xref:System.Windows.Forms.Form.Closing>としての廃止のイベント[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-241">The <xref:System.Windows.Forms.Application.Exit%2A> method does not raise the <xref:System.Windows.Forms.Form.Closed> and <xref:System.Windows.Forms.Form.Closing> events, which are obsolete as of [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-242">次のコード例は、フォームのリスト ボックス内の番号を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-242">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="e34d5-243">クリックするたびに`button1`アプリケーションの一覧に別の番号を追加します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-243">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="e34d5-244">`Main`メソッド呼び出し<xref:System.Windows.Forms.Application.Run%2A>フォームを作成すると、アプリケーションを起動する`listBox1`、および`button1`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-244">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1`, and `button1`.</span></span> <span data-ttu-id="e34d5-245">ユーザーがクリックすると`button1`、`button1_Click`メソッドは、リスト ボックスには、1 ~ 3 の番号を追加し、表示、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-245">When the user clicks `button1`, the `button1_Click` method adds numbers one to three to the list box, and displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="e34d5-246">ユーザーがクリックした場合**いいえ**上、 <xref:System.Windows.Forms.MessageBox>、`button1_Click`メソッドの一覧に別の番号を追加します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-246">If the user clicks **No** on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds another number to the list.</span></span> <span data-ttu-id="e34d5-247">ユーザーがクリックした場合 **[はい]**、アプリケーション呼び出し<xref:System.Windows.Forms.Application.Exit%2A>キューに残りのすべてのメッセージを処理し、終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-247">If the user clicks **Yes**, the application calls <xref:System.Windows.Forms.Application.Exit%2A>, to process all remaining messages in the queue and then to quit.</span></span>  
  
 <span data-ttu-id="e34d5-248">この例では、する必要があります`listBox1`と`button1`インスタンス化され、フォーム上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-248">The example requires that `listBox1` and `button1` have been instantiated and placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.Exit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.Exit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.Exit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.Exit Example/CS/source.cs#1)]
 [!code-vb[Classic Application.Exit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.Exit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e34d5-249">アンマネージ コードを呼び出す直前の呼び出し元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-249">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="e34d5-250">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-250">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.Run" />
        <altmember cref="P:System.Windows.Forms.Application.OpenForms" />
        <altmember cref="E:System.Windows.Forms.Form.Closed" />
        <altmember cref="E:System.Windows.Forms.Form.Closing" />
      </Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Exit(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Exit(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Exit (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Exit(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member Exit : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="System.Windows.Forms.Application.Exit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e34d5-251">アプリケーション内の <see cref="T:System.Windows.Forms.Form" /> が終了をキャンセルしたかどうかを示す値を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-251">Returns whether any <see cref="T:System.Windows.Forms.Form" /> within the application cancelled the exit.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-252">終了する必要があるすべてのメッセージ ポンプを通知し、メッセージが処理されると、すべてのアプリケーション ウィンドウを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-252">Informs all message pumps that they must terminate, and then closes all application windows after the messages have been processed.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityException">
          <span data-ttu-id="e34d5-253">実行を終了するためのアクセス許可をアプリケーション スレッドです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-253">For permission to terminate a running application thread.</span>
          </span>
          <span data-ttu-id="e34d5-254">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-254">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="ExitThread">
      <MemberSignature Language="C#" Value="public static void ExitThread ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ExitThread() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.ExitThread" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ExitThread ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ExitThread();" />
      <MemberSignature Language="F#" Value="static member ExitThread : unit -&gt; unit" Usage="System.Windows.Forms.Application.ExitThread " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-255">現在のスレッドのメッセージ ループを終了し、スレッドのウィンドウをすべて閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-255">Exits the message loop on the current thread and closes all windows on the thread.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-256">このメソッドを使用すると、現在のスレッドのメッセージ ループを終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-256">Use this method to exit the message loop of the current thread.</span></span> <span data-ttu-id="e34d5-257">このメソッドの呼び出しは、<xref:System.Windows.Forms.Application.Run%2A>を返す現在のスレッドにします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-257">This method causes the call to <xref:System.Windows.Forms.Application.Run%2A> for the current thread to return.</span></span> <span data-ttu-id="e34d5-258">アプリケーション全体を終了するには、呼び出す<xref:System.Windows.Forms.Application.Exit%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-258">To exit the entire application, call <xref:System.Windows.Forms.Application.Exit%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e34d5-259">アンマネージ コードを呼び出す直前の呼び出し元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-259">for the immediate caller to call unmanaged code.</span>
          </span>
          <span data-ttu-id="e34d5-260">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-260">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
      </Docs>
    </Member>
    <Member MemberName="FilterMessage">
      <MemberSignature Language="C#" Value="public static bool FilterMessage (ref System.Windows.Forms.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool FilterMessage(valuetype System.Windows.Forms.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.FilterMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FilterMessage (ByRef message As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool FilterMessage(System::Windows::Forms::Message % message);" />
      <MemberSignature Language="F#" Value="static member FilterMessage :  -&gt; bool" Usage="System.Windows.Forms.Application.FilterMessage message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="message">
          <span data-ttu-id="e34d5-261">フィルター処理の対象となる Windows イベント メッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-261">The Windows event message to filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-262">ウィンドウ メッセージに対してフィルターを実行し、変更したメッセージのコピーを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-262">Runs any filters against a window message, and returns a copy of the modified message.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e34d5-263">フィルターが処理された場合は <see langword="True" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-263">
              <see langword="True" /> if the filters were processed; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Idle">
      <MemberSignature Language="C#" Value="public static event EventHandler Idle;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Idle" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.Idle" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event Idle As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ Idle;" />
      <MemberSignature Language="F#" Value="member this.Idle : EventHandler " Usage="member this.Idle : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-264">アプリケーションが処理を完了し、アイドル状態に入ろうとすると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-264">Occurs when the application finishes processing and is about to enter the idle state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-265">ために必要なタスクがある場合、スレッドがアイドル状態になると、前にこのイベントに添付します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-265">If you have tasks that you must perform before the thread becomes idle, attach them to this event.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e34d5-266">静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークが発生するとき、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-266">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-267">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-267">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="e34d5-268">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Application.Idle>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-268">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.Idle> event.</span></span> <span data-ttu-id="e34d5-269">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-269">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="e34d5-270">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-270">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="e34d5-271">コード例を実行する Windows フォームに貼り付けることと、イベント ハンドラーに関連付けられていることを確認、<xref:System.Windows.Forms.Application.Idle>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-271">To run the example code, paste it into a Windows Form and make sure that the event handler is associated with the <xref:System.Windows.Forms.Application.Idle> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#2)]
 [!code-vb[System.Windows.Forms.EventExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeaveThreadModal">
      <MemberSignature Language="C#" Value="public static event EventHandler LeaveThreadModal;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LeaveThreadModal" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.LeaveThreadModal" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event LeaveThreadModal As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ LeaveThreadModal;" />
      <MemberSignature Language="F#" Value="member this.LeaveThreadModal : EventHandler " Usage="member this.LeaveThreadModal : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-272">アプリケーションがモーダル状態を終了するときに発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-272">Occurs when the application is about to leave a modal state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!CAUTION]
>  <span data-ttu-id="e34d5-273">静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークが発生するとき、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-273">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-274">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-274">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="e34d5-275">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Application.LeaveThreadModal>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-275">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.LeaveThreadModal> event.</span></span> <span data-ttu-id="e34d5-276">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-276">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="e34d5-277">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-277">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="e34d5-278">コード例を実行する Windows フォームに貼り付けることと、イベント ハンドラーに関連付けられていることを確認、<xref:System.Windows.Forms.Application.LeaveThreadModal>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-278">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.LeaveThreadModal> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#4)]
 [!code-vb[System.Windows.Forms.EventExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalUserAppDataPath">
      <MemberSignature Language="C#" Value="public static string LocalUserAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string LocalUserAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.LocalUserAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property LocalUserAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ LocalUserAppDataPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalUserAppDataPath : string" Usage="System.Windows.Forms.Application.LocalUserAppDataPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-279">ローカルで非ローミング ユーザーのアプリケーション データのパスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-279">Gets the path for the application data of a local, non-roaming user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-280">ローカルで非ローミング ユーザーのアプリケーション データのパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-280">The path for the application data of a local, non-roaming user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-281">ローカル ユーザーは、ユーザー プロファイルを持つが、ユーザーがログオンをシステムに格納されているいずれかです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-281">A local user is one whose user profile is stored on the system on which the user logged on.</span></span> <span data-ttu-id="e34d5-282">パスが存在しない場合は、次の形式で 1 つ作成されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-282">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="e34d5-283">*基本パス*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="e34d5-283">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 <span data-ttu-id="e34d5-284">通常の基本パスは C:\Documents and Settings\\*username*\Local Settings\Application データ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-284">A typical base path is C:\Documents and Settings\\*username*\Local Settings\Application Data.</span></span> <span data-ttu-id="e34d5-285">このパスになります、ただしを使用して、Windows フォーム アプリケーションがデプロイされている場合[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-285">This path will be different, however, if the Windows Forms application is deployed by using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="e34d5-286">その他のすべてのアプリケーションから分離された独自のアプリケーション データ ディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-286">creates its own application data directory that is isolated from all other applications.</span></span> <span data-ttu-id="e34d5-287">詳細については、次を参照してください。[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-287">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-288">次のコード例では、2 つのフォームを表示し、両方のフォームが閉じられたときに、アプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-288">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="e34d5-289">アプリケーションを起動し、終了、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-289">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="e34d5-290">この例を使用して、 <xref:System.Windows.Forms.Application.UserAppDataPath%2A> 、ユーザーのアプリケーション データを格納するプロパティ、<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>代わりに使用できます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-290">Although this example demonstrates using the <xref:System.Windows.Forms.Application.UserAppDataPath%2A> property to store application data for the user, the <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A> can be used instead.</span></span>  
  
 <span data-ttu-id="e34d5-291">`MyApplicationContext`クラスから継承<xref:System.Windows.Forms.ApplicationContext>し、各フォームが閉じられるし、はどちらも、ときに、現在のスレッドを終了するときは常に追跡します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-291">The `MyApplicationContext` class inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="e34d5-292">クラスは、ユーザーの各フォームの位置を格納します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-292">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="e34d5-293">フォームの位置データがという名前のファイルに格納されている`Appdata.txt`によって決定の場所に作成される<xref:System.Windows.Forms.Application.UserAppDataPath%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-293">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="e34d5-294">`Main`メソッド呼び出し`Application.Run(context)`に基づいてアプリケーションを開始する、<xref:System.Windows.Forms.ApplicationContext>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-294">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="e34d5-295">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.ApplicationContext>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="e34d5-295">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="e34d5-296">いくつかのコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-296">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e34d5-297">参照してください<xref:System.Windows.Forms.ApplicationContext>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="e34d5-297">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MessageLoop">
      <MemberSignature Language="C#" Value="public static bool MessageLoop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool MessageLoop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.MessageLoop" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MessageLoop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool MessageLoop { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MessageLoop : bool" Usage="System.Windows.Forms.Application.MessageLoop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-298">このスレッドにメッセージ ループが存在するかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-298">Gets a value indicating whether a message loop exists on this thread.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-299">メッセージ ループが存在する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-299">
              <see langword="true" /> if a message loop exists; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-300">非管理対象のアプリケーションなどの他の環境で Windows フォームをホストするときにこのプロパティは常に返します`false`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-300">When hosting Windows Forms in other environments, such as unmanaged applications, this property will always return `false`.</span></span> <span data-ttu-id="e34d5-301">使用<xref:System.Windows.Forms.Application.RegisterMessageLoop%2A>にホスティング環境がまだアクティブなメッセージ ループをかどうかに Windows フォームを指示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-301">Use <xref:System.Windows.Forms.Application.RegisterMessageLoop%2A> to instruct Windows Forms if the hosting environment still has an active message loop.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OleRequired">
      <MemberSignature Language="C#" Value="public static System.Threading.ApartmentState OleRequired ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Threading.ApartmentState OleRequired() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.OleRequired" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function OleRequired () As ApartmentState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Threading::ApartmentState OleRequired();" />
      <MemberSignature Language="F#" Value="static member OleRequired : unit -&gt; System.Threading.ApartmentState" Usage="System.Windows.Forms.Application.OleRequired " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ApartmentState</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-302">現在のスレッドで OLE を初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-302">Initializes OLE on the current thread.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e34d5-303">
            <see cref="T:System.Threading.ApartmentState" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-303">One of the <see cref="T:System.Threading.ApartmentState" /> values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-304">呼び出す前にこのメソッドを呼び出す`Microsoft.Win32`OLE を必要とするメソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-304">Call this method before calling any `Microsoft.Win32` method that requires OLE.</span></span> <span data-ttu-id="e34d5-305"><xref:System.Windows.Forms.Application.OleRequired%2A> まず、現在のスレッドで OLE が初期化されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-305"><xref:System.Windows.Forms.Application.OleRequired%2A> first checks to see if OLE has been initialized on the current thread.</span></span> <span data-ttu-id="e34d5-306">それ以外の場合は、ole、スレッドを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-306">If not, it initializes the thread for OLE.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-307">スレッドは、直接 OLE メソッドを呼び出す、しない限り、このメソッドを呼び出す必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-307">Unless a thread calls OLE methods directly, you do not need to call this method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="public static void OnThreadException (Exception t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void OnThreadException(class System.Exception t) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub OnThreadException (t As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void OnThreadException(Exception ^ t);" />
      <MemberSignature Language="F#" Value="static member OnThreadException : Exception -&gt; unit" Usage="System.Windows.Forms.Application.OnThreadException t" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="t">
          <span data-ttu-id="e34d5-308">スローされた例外を表す <see cref="T:System.Exception" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-308">An <see cref="T:System.Exception" /> that represents the exception that was thrown.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-309">
            <see cref="E:System.Windows.Forms.Application.ThreadException" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-309">Raises the <see cref="E:System.Windows.Forms.Application.ThreadException" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-310">呼び出す<xref:System.Windows.Forms.Application.OnThreadException%2A>アプリケーションの処理が停止する例外が発生します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-310">Call <xref:System.Windows.Forms.Application.OnThreadException%2A> to raise an exception that will halt processing of the application.</span></span>  
  
 <span data-ttu-id="e34d5-311"><xref:System.Windows.Forms.Application>クラスには、<xref:System.Windows.Forms.Application.ThreadException>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-311">The <xref:System.Windows.Forms.Application> class has a <xref:System.Windows.Forms.Application.ThreadException> event.</span></span> <span data-ttu-id="e34d5-312">未処理の例外に必要なカスタム処理を実行するには、このイベントにイベント ハンドラーをアタッチできます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-312">You can attach an event handler to this event to do whatever custom processing you need for unhandled exceptions.</span></span> <span data-ttu-id="e34d5-313">イベント ハンドラーをアタッチしない場合<xref:System.Windows.Forms.Application.OnThreadException%2A>されていると、エラーをユーザーに通知するダイアログ ボックスを表示する必要があります。 既定の動作を実行します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-313">If you do not attach an event handler, <xref:System.Windows.Forms.Application.OnThreadException%2A> will execute the default behavior, which involves displaying a dialog box to inform the user that there has been an error.</span></span>  
  
 <span data-ttu-id="e34d5-314"><xref:System.Windows.Forms.Application.OnThreadException%2A> Windows フォームによって所有されているスレッドのみ発生する未処理の例外の既定の例外動作を実装します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-314"><xref:System.Windows.Forms.Application.OnThreadException%2A> only implements default exception behavior for unhandled exceptions that occur on threads owned by Windows Forms.</span></span> <span data-ttu-id="e34d5-315">他のスレッドで未処理の例外は、<xref:System.AppDomain.UnhandledException>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-315">Unhandled exceptions on other threads are handled by the <xref:System.AppDomain.UnhandledException> event.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenForms">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.FormCollection OpenForms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.FormCollection OpenForms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.OpenForms" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property OpenForms As FormCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::FormCollection ^ OpenForms { System::Windows::Forms::FormCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OpenForms : System.Windows.Forms.FormCollection" Usage="System.Windows.Forms.Application.OpenForms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FormCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-316">アプリケーションが所有している、開かれたフォームのコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-316">Gets a collection of open forms owned by the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-317">アプリケーションによって所有されている、現在開いているすべてのフォームが格納された <see cref="T:System.Windows.Forms.FormCollection" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-317">A <see cref="T:System.Windows.Forms.FormCollection" /> containing all the currently open forms owned by this application.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-318"><xref:System.Windows.Forms.Application.OpenForms%2A>プロパティは、アプリケーションによって所有されているフォームの読み取り専用コレクションを表します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-318">The <xref:System.Windows.Forms.Application.OpenForms%2A> property represents a read-only collection of forms owned by the application.</span></span> <span data-ttu-id="e34d5-319">インデックスの位置またはこのコレクションを検索することができます、<xref:System.Windows.Forms.Control.Name%2A>の<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-319">This collection can be searched by index position or by the <xref:System.Windows.Forms.Control.Name%2A> of the <xref:System.Windows.Forms.Form>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="e34d5-320">呼び出し元で定義されているすべてのウィンドウにアクセスするためのアクセス許可が必要、<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" />の値、<see cref="T:System.Security.Permissions.UIPermissionWindow" />列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-320">Caller must have permission to access all windows, as defined by the <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /> value of the <see cref="T:System.Security.Permissions.UIPermissionWindow" /> enumeration.</span>
          </span>
        </permission>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="T:System.Windows.Forms.FormCollection" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public static string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ProductName" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ProductName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ProductName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductName : string" Usage="System.Windows.Forms.Application.ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-321">このアプリケーションに関連付けられている製品名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-321">Gets the product name associated with this application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-322">製品名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-322">The product name.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-323">`ProductName` 現在のアプリケーションのメイン フォームを含むアセンブリのメタデータから取得されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-323">`ProductName` is taken from the metadata of the assembly containing the main form of the current application.</span></span> <span data-ttu-id="e34d5-324">これを設定するには設定を<xref:System.Reflection.AssemblyProductAttribute>アセンブリ マニフェスト内で。</span><span class="sxs-lookup"><span data-stu-id="e34d5-324">You can set it by setting <xref:System.Reflection.AssemblyProductAttribute> inside of your assembly manifest.</span></span> <span data-ttu-id="e34d5-325">詳細については、次を参照してください。[アセンブリ マニフェスト](~/docs/framework/app-domains/assembly-manifest.md)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-325">For more information, see [Assembly Manifest](~/docs/framework/app-domains/assembly-manifest.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-326">次のコード例では、このプロパティを取得し、テキスト ボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-326">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="e34d5-327">この例では、する必要があります`textBox1`がフォームに配置されています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-327">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.ProductName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ProductName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ProductName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ProductName Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ProductName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ProductName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductVersion" />
        <altmember cref="P:System.Windows.Forms.Application.CompanyName" />
        <altmember cref="T:System.Reflection.AssemblyProductAttribute" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public static string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.ProductVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ProductVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ ProductVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductVersion : string" Usage="System.Windows.Forms.Application.ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-328">このアプリケーションに関連付けられている製品のバージョンを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-328">Gets the product version associated with this application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-329">製品のバージョン。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-329">The product version.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-330">通常、バージョン番号として表示されます*メジャー番号*。 *。マイナー番号*.*ビルド番号*.*プライベート パート番号*します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-330">Typically, a version number displays as *major number*.*minor number*.*build number*.*private part number*.</span></span> <span data-ttu-id="e34d5-331">アセンブリ マニフェスト内でアセンブリのバージョンを設定して明示的に設定できます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-331">You can set it explicitly by setting the assembly version within your assembly manifest.</span></span> <span data-ttu-id="e34d5-332">詳細については、次を参照してください。[アセンブリ マニフェスト](~/docs/framework/app-domains/assembly-manifest.md)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-332">For more information, see [Assembly Manifest](~/docs/framework/app-domains/assembly-manifest.md).</span></span>  
  
 <span data-ttu-id="e34d5-333"><xref:System.Windows.Forms.Application.ProductVersion%2A> メインの実行可能ファイルを含むアセンブリが含まれているが最初に検索、`AssemblyInformationalVersion`属性。</span><span class="sxs-lookup"><span data-stu-id="e34d5-333"><xref:System.Windows.Forms.Application.ProductVersion%2A> first looks to see if the assembly containing the main executable has the `AssemblyInformationalVersion` attribute on it.</span></span> <span data-ttu-id="e34d5-334">この属性が存在する場合は、両方の使用<xref:System.Windows.Forms.Application.ProductVersion%2A>と<xref:System.Windows.Forms.Application.CommonAppDataPath%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-334">If this attribute exists, it is used for both <xref:System.Windows.Forms.Application.ProductVersion%2A> and <xref:System.Windows.Forms.Application.CommonAppDataPath%2A>.</span></span> <span data-ttu-id="e34d5-335">両方のプロパティをこの属性が存在しない場合、実行可能ファイルのバージョンが代わりに使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-335">If this attribute does not exist, both properties use the version of the executable file instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-336">次のコード例では、このプロパティを取得し、テキスト ボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-336">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="e34d5-337">この例では、する必要があります`textBox1`がフォームに配置されています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-337">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.ProductVersion Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ProductVersion Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ProductVersion Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ProductVersion Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ProductVersion Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ProductVersion Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.ProductName" />
        <altmember cref="P:System.Windows.Forms.Application.CompanyName" />
        <altmember cref="T:System.Reflection.AssemblyVersionAttribute" />
      </Docs>
    </Member>
    <Member MemberName="RaiseIdle">
      <MemberSignature Language="C#" Value="public static void RaiseIdle (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RaiseIdle(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RaiseIdle(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RaiseIdle (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RaiseIdle(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="static member RaiseIdle : EventArgs -&gt; unit" Usage="System.Windows.Forms.Application.RaiseIdle e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="e34d5-338">
            <see cref="T:System.EventArgs" /> イベントに渡す <see cref="E:System.Windows.Forms.Application.Idle" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-338">The <see cref="T:System.EventArgs" /> objects to pass to the <see cref="E:System.Windows.Forms.Application.Idle" /> event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-339">ホストされているシナリオで <see cref="E:System.Windows.Forms.Application.Idle" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-339">Raises the <see cref="E:System.Windows.Forms.Application.Idle" /> event in hosted scenarios.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-340">このメソッドは、アンマネージ アプリケーションなどの別の環境で Windows フォームをホストする場合に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-340">This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</span></span> <span data-ttu-id="e34d5-341">呼び出す必要があります<xref:System.Windows.Forms.Application.RaiseIdle%2A>ホスト アプリケーションがアイドル状態に入ったとき。</span><span class="sxs-lookup"><span data-stu-id="e34d5-341">You should call <xref:System.Windows.Forms.Application.RaiseIdle%2A> when the hosting application enters an idle state.</span></span> <span data-ttu-id="e34d5-342">これにより、一部の Windows フォーム コントロールおよびユーザーがアプリケーションと対話していないときに、重要なバック グラウンド処理を実行するコンポーネント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-342">This enables some Windows Forms controls and components to do important background work while the user is not interacting with the application.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Application.Idle" />
      </Docs>
    </Member>
    <Member MemberName="RegisterMessageLoop">
      <MemberSignature Language="C#" Value="public static void RegisterMessageLoop (System.Windows.Forms.Application.MessageLoopCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterMessageLoop(class System.Windows.Forms.Application/MessageLoopCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RegisterMessageLoop (callback As Application.MessageLoopCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RegisterMessageLoop(System::Windows::Forms::Application::MessageLoopCallback ^ callback);" />
      <MemberSignature Language="F#" Value="static member RegisterMessageLoop : System.Windows.Forms.Application.MessageLoopCallback -&gt; unit" Usage="System.Windows.Forms.Application.RegisterMessageLoop callback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.Windows.Forms.Application+MessageLoopCallback" />
      </Parameters>
      <Docs>
        <param name="callback">
          <span data-ttu-id="e34d5-343">ホスト環境が依然としてメッセージを送信しているかどうかを Windows フォームでチェックする必要がある場合に呼び出すメソッド。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-343">The method to call when Windows Forms needs to check if the hosting environment is still sending messages.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-344">メッセージ ループがホストされている環境で実行されているかどうかをチェックするためのコールバックを登録します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-344">Registers a callback for checking whether the message loop is running in hosted environments.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-345">このメソッドは、アンマネージ アプリケーションなどの別の環境で Windows フォームをホストする場合に使用されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-345">This method is used when hosting Windows Forms in another environment, such as an unmanaged application.</span></span> <span data-ttu-id="e34d5-346">ホストの環境では、<xref:System.Windows.Forms.Application.MessageLoop%2A>プロパティは常に Windows フォームでは、メッセージは処理されていない場合は false に返します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-346">In hosted environments, the <xref:System.Windows.Forms.Application.MessageLoop%2A> property will always return false if Windows Forms is not processing messages.</span></span> <span data-ttu-id="e34d5-347">このコールバックを使用して、ホスティング環境がまだメッセージを処理してかどうかを Windows フォームに通知します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-347">Use this callback to tell Windows Forms if the hosting environment is still processing messages.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Application.MessageLoopCallback" />
      </Docs>
    </Member>
    <Member MemberName="RemoveMessageFilter">
      <MemberSignature Language="C#" Value="public static void RemoveMessageFilter (System.Windows.Forms.IMessageFilter value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveMessageFilter(class System.Windows.Forms.IMessageFilter value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.RemoveMessageFilter(System.Windows.Forms.IMessageFilter)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RemoveMessageFilter (value As IMessageFilter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RemoveMessageFilter(System::Windows::Forms::IMessageFilter ^ value);" />
      <MemberSignature Language="F#" Value="static member RemoveMessageFilter : System.Windows.Forms.IMessageFilter -&gt; unit" Usage="System.Windows.Forms.Application.RemoveMessageFilter value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.IMessageFilter" />
      </Parameters>
      <Docs>
        <param name="value">
          <span data-ttu-id="e34d5-348">アプリケーションから削除する <see cref="T:System.Windows.Forms.IMessageFilter" /> の実装。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-348">The implementation of the <see cref="T:System.Windows.Forms.IMessageFilter" /> to remove from the application.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-349">アプリケーションのメッセージ ポンプからメッセージ フィルターを削除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-349">Removes a message filter from the message pump of the application.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-350">ディスパッチされる前に、Windows メッセージをキャプチャする必要がなくなったときに、メッセージ フィルターを削除できます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-350">You can remove a message filter when you no longer want to capture Windows messages before they are dispatched.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-351">メッセージ フィルターを使用するには、実装を提供する必要があります、<xref:System.Windows.Forms.IMessageFilter>インターフェイス。</span><span class="sxs-lookup"><span data-stu-id="e34d5-351">Before you can use a message filter, you must provide an implementation for the <xref:System.Windows.Forms.IMessageFilter> interface.</span></span> <span data-ttu-id="e34d5-352">次のクラスと呼ばれるメッセージ フィルターを作成する`TestMessageFilter`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-352">The following class creates a message filter called `TestMessageFilter`.</span></span> <span data-ttu-id="e34d5-353">このフィルターは、マウスの左ボタンに関連するすべてのメッセージをブロックします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-353">This filter blocks all messages relating to the left mouse button.</span></span>  
  
 [!code-cpp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/CS/source.cs#1)]
 [!code-vb[Classic Application.RemoveMessageFilter Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.RemoveMessageFilter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="RenderWithVisualStyles">
      <MemberSignature Language="C#" Value="public static bool RenderWithVisualStyles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool RenderWithVisualStyles" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.RenderWithVisualStyles" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property RenderWithVisualStyles As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool RenderWithVisualStyles { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderWithVisualStyles : bool" Usage="System.Windows.Forms.Application.RenderWithVisualStyles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-354">現在のアプリケーションが visual スタイルを使用してコントロールを描画しているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-354">Gets a value specifying whether the current application is drawing controls with visual styles.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-355">アプリケーション ウィンドウのクライアント領域のコントロールで visual スタイルが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-355">
              <see langword="true" /> if visual styles are enabled for controls in the client area of application windows; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-356">カスタム コントロールを描画する場合は、このプロパティを使用して、外観は、アプリケーションでは、他のコントロールと一貫性のあるように、visual スタイルの有無にコントロールを描画するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-356">If you are drawing a custom control, use this property to decide whether to draw the control with or without visual styles, so that its appearance is consistent with other controls in the application.</span></span>  
  
 <span data-ttu-id="e34d5-357">次の表に、4 つの条件を満たす必要がある<xref:System.Windows.Forms.Application.RenderWithVisualStyles%2A>を返す`true`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-357">The following table shows the four conditions that must exist for <xref:System.Windows.Forms.Application.RenderWithVisualStyles%2A> to return `true`.</span></span>  
  
|<span data-ttu-id="e34d5-358">条件</span><span class="sxs-lookup"><span data-stu-id="e34d5-358">Condition</span></span>|<span data-ttu-id="e34d5-359">説明</span><span class="sxs-lookup"><span data-stu-id="e34d5-359">Description</span></span>|  
|---------------|-----------------|  
|<span data-ttu-id="e34d5-360">オペレーティング システムが visual スタイルをサポートしています</span><span class="sxs-lookup"><span data-stu-id="e34d5-360">The operating system supports visual styles</span></span>|<span data-ttu-id="e34d5-361">この条件を個別に確認するには、 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS%2A> クラスの <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-361">To verify this condition separately, use the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsSupportedByOS%2A> property of the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> class.</span></span>|  
|<span data-ttu-id="e34d5-362">ユーザーがオペレーティング システムで visual スタイルを有効に</span><span class="sxs-lookup"><span data-stu-id="e34d5-362">The user has enabled visual styles in the operating system</span></span>|<span data-ttu-id="e34d5-363">この条件を個別に確認するには、 <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser%2A> クラスの <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-363">To verify this condition separately, use the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation.IsEnabledByUser%2A> property of the <xref:System.Windows.Forms.VisualStyles.VisualStyleInformation> class.</span></span>|  
|<span data-ttu-id="e34d5-364">アプリケーションで視覚スタイルが有効になっています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-364">Visual styles are enabled in the application</span></span>|<span data-ttu-id="e34d5-365">アプリケーションで視覚スタイルを有効にするには、 <xref:System.Windows.Forms.Application.EnableVisualStyles> メソッドを呼び出すか、ComCtl32.dll バージョン 6 以降をコントロールの描画に使用することを指定するアプリケーション マニフェストを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-365">Visual styles can be enabled in an application by calling the <xref:System.Windows.Forms.Application.EnableVisualStyles> method or by using an application manifest that specifies that ComCtl32.dll version 6 or later will be used to draw controls.</span></span>|  
|<span data-ttu-id="e34d5-366">Visual スタイルは、アプリケーション ウィンドウのクライアント領域を描画するために使用されています</span><span class="sxs-lookup"><span data-stu-id="e34d5-366">Visual styles are being used to draw the client area of application windows</span></span>|<span data-ttu-id="e34d5-367">この条件を個別に確認するには、 <xref:System.Windows.Forms.Application.VisualStyleState%2A> クラスの <xref:System.Windows.Forms.Application> プロパティを使用し、その値が <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAreaEnabled?displayProperty=nameWithType> または <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAndNonClientAreasEnabled?displayProperty=nameWithType>になっていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-367">To verify this condition separately, use the <xref:System.Windows.Forms.Application.VisualStyleState%2A> property of the <xref:System.Windows.Forms.Application> class and verify that it has the value <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAreaEnabled?displayProperty=nameWithType> or <xref:System.Windows.Forms.VisualStyles.VisualStyleState.ClientAndNonClientAreasEnabled?displayProperty=nameWithType>.</span></span>|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Restart">
      <MemberSignature Language="C#" Value="public static void Restart ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Restart() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Restart" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Restart ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Restart();" />
      <MemberSignature Language="F#" Value="static member Restart : unit -&gt; unit" Usage="System.Windows.Forms.Application.Restart " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-368">アプリケーションをシャットダウンし、直後に新しいインスタンスを開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-368">Shuts down the application and starts a new instance immediately.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-369">呼び出し元の最も一般的な理由`Restart`からダウンロードしたアプリケーションの新しいバージョンを開始する[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]を使用して、`Update`または`UpdateAsync`メソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-369">The most common reason for calling `Restart` is to start a new version of the application that you have downloaded through [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] using the `Update` or `UpdateAsync` method.</span></span>  
  
 <span data-ttu-id="e34d5-370">最初に実行されるコンテキストでは、アプリケーションが再起動されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-370">Applications are restarted in the context in which they were initially run.</span></span> <span data-ttu-id="e34d5-371">アプリケーションのメイン実行可能ファイルを直接指し示す URL を使用して、アプリケーションを起動した場合、同じ URL に再起動されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-371">If your application was started using a URL pointing directly to the application's main executable file, it will be restarted using the same URL.</span></span> <span data-ttu-id="e34d5-372">アプリケーションの場合、[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]アプリケーションを使用して、再起動は[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-372">If your application is a [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] application, it will be restarted using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span>  
  
 <span data-ttu-id="e34d5-373">最初に実行されたときに、アプリケーションがコマンド ライン オプションが指定されていた場合<xref:System.Windows.Forms.Application.Restart%2A>と同じオプションを使用してアプリケーションを起動します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-373">If your application was originally supplied command-line options when it first executed, <xref:System.Windows.Forms.Application.Restart%2A> will launch the application again with the same options.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="e34d5-374">Windows フォーム アプリケーションのコードではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-374">Your code is not a Windows Forms application.</span>
          </span>
          <span data-ttu-id="e34d5-375">このコンテキストではこのメソッドを呼び出すことはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-375">You cannot call this method in this context.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e34d5-376">必要があります<see cref="M:System.Security.Permissions.SecurityPermission.IsUnrestricted" />権限。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-376">Requires <see cref="M:System.Security.Permissions.SecurityPermission.IsUnrestricted" /> permission.</span>
          </span>
        </permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="Run">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-377">現在のスレッドで標準のアプリケーション メッセージ ループの実行を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-377">Begins running a standard application message loop on the current thread.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run();" />
      <MemberSignature Language="F#" Value="static member Run : unit -&gt; unit" Usage="System.Windows.Forms.Application.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-378">現在のスレッドで標準のアプリケーション メッセージ ループの実行を、フォームなしで開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-378">Begins running a standard application message loop on the current thread, without a form.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-379">Win32 ベースまたは Windows フォームで、アプリケーション メッセージ ループは、マウス クリックやキーボード入力などのユーザー イベントを処理するコード内のルーチンです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-379">In a Win32-based or Windows Forms application, a message loop is a routine in code that processes user events, such as mouse clicks and keyboard strokes.</span></span> <span data-ttu-id="e34d5-380">すべて実行中の Windows ベースのアプリケーションでは、メイン メッセージ ループと呼ばれる、アクティブなメッセージ ループが必要です。</span><span class="sxs-lookup"><span data-stu-id="e34d5-380">Every running Windows-based application requires an active message loop, called the main message loop.</span></span> <span data-ttu-id="e34d5-381">メイン メッセージ ループが閉じられたときに、アプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-381">When the main message loop is closed, the application exits.</span></span> <span data-ttu-id="e34d5-382">Windows フォームでは、このループを閉じたときに、<xref:System.Windows.Forms.Application.Exit%2A>メソッドが呼び出されたとき、または、<xref:System.Windows.Forms.Application.ExitThread%2A>メイン メッセージ ループを実行しているスレッドでメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-382">In Windows Forms, this loop is closed when the <xref:System.Windows.Forms.Application.Exit%2A> method is called, or when the <xref:System.Windows.Forms.Application.ExitThread%2A> method is called on the thread that is running the main message loop.</span></span>  
  
 <span data-ttu-id="e34d5-383">ほとんどの Windows フォーム開発者は、このバージョンのメソッドを使用する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-383">Most Windows Forms developers will not need to use this version of the method.</span></span> <span data-ttu-id="e34d5-384">使用する必要があります、<xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.Form%29>メイン フォームが閉じられたときに、アプリケーションが終了するように、メイン フォーム アプリケーションを起動するオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-384">You should use the <xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.Form%29> overload to start an application with a main form, so that the application terminates when the main form is closed.</span></span> <span data-ttu-id="e34d5-385">その他のすべての状況では、使用、<xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.ApplicationContext%29>の指定をサポートする、オーバー ロード、<xref:System.Windows.Forms.ApplicationContext>オブジェクト、アプリケーションの有効期間の制御を強化します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-385">For all other situations, use the <xref:System.Windows.Forms.Application.Run%28System.Windows.Forms.ApplicationContext%29> overload, which supports supplying an <xref:System.Windows.Forms.ApplicationContext> object for better control over the lifetime of the application.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e34d5-386">メイン メッセージ ループが既にこのスレッドで実行中です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-386">A main message loop is already running on this thread.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Windows.Forms.ApplicationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Windows.Forms.ApplicationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run(System.Windows.Forms.ApplicationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (context As ApplicationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Windows::Forms::ApplicationContext ^ context);" />
      <MemberSignature Language="F#" Value="static member Run : System.Windows.Forms.ApplicationContext -&gt; unit" Usage="System.Windows.Forms.Application.Run context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.ApplicationContext" />
      </Parameters>
      <Docs>
        <param name="context">
          <span data-ttu-id="e34d5-387">アプリケーションが実行される <see cref="T:System.Windows.Forms.ApplicationContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-387">An <see cref="T:System.Windows.Forms.ApplicationContext" /> in which the application is run.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-388">
            <see cref="T:System.Windows.Forms.ApplicationContext" /> を使用して、現在のスレッドで標準のアプリケーション メッセージ ループの実行を開始します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-388">Begins running a standard application message loop on the current thread, with an <see cref="T:System.Windows.Forms.ApplicationContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-389">メッセージ ループの実行まで<xref:System.Windows.Forms.Application.Exit%2A>または<xref:System.Windows.Forms.Application.ExitThread%2A>と呼びますまたは<xref:System.Windows.Forms.Application.ThreadExit>コンテキスト オブジェクトでイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-389">The message loop runs until <xref:System.Windows.Forms.Application.Exit%2A> or <xref:System.Windows.Forms.Application.ExitThread%2A> is called or the <xref:System.Windows.Forms.Application.ThreadExit> event is raised on the context object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-390">例では、2 つの形式を表示し、両方のフォームが閉じられたときにアプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-390">The example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="e34d5-391">アプリケーションを起動し、終了、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-391">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="e34d5-392">この例では、使用、 <xref:System.Windows.Forms.ApplicationContext>、と共に、`Application.Run(context)`メソッドは、アプリケーションの起動時に、複数のフォームを表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-392">This example demonstrates how to use an <xref:System.Windows.Forms.ApplicationContext>, along with the `Application.Run(context)` method, to display multiple forms when the application starts.</span></span>  
  
 <span data-ttu-id="e34d5-393">クラスは、`MyApplicationContext`継承<xref:System.Windows.Forms.ApplicationContext>し、各フォームが閉じられるし、はどちらも、ときに、現在のスレッドを終了するときは常に追跡します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-393">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="e34d5-394">クラスは、ユーザーの各フォームの位置を格納します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-394">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="e34d5-395">フォームの位置データがという名前のファイルに格納されている`Appdata.txt`によって決定の場所に作成される<xref:System.Windows.Forms.Application.UserAppDataPath%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-395">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="e34d5-396">`Main`メソッド呼び出し`Application.Run(context)`に基づいてアプリケーションを開始する、<xref:System.Windows.Forms.ApplicationContext>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-396">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="e34d5-397">コードを`AppForm1`と`AppForm2`簡略にするためのフォームが示されていません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-397">The code for the `AppForm1` and `AppForm2` forms is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e34d5-398">参照してください、<xref:System.Windows.Forms.ApplicationContext>コード全体のクラスの概要。</span><span class="sxs-lookup"><span data-stu-id="e34d5-398">See the <xref:System.Windows.Forms.ApplicationContext> class overview for the whole code listing.</span></span>  
  
 [!code-cpp[Application#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#2)]
 [!code-csharp[Application#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#2)]
 [!code-vb[Application#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e34d5-399">メイン メッセージ ループが既にこのスレッドで実行中です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-399">A main message loop is already running on this thread.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run (System.Windows.Forms.Form mainForm);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Run(class System.Windows.Forms.Form mainForm) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.Run(System.Windows.Forms.Form)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Run (mainForm As Form)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Run(System::Windows::Forms::Form ^ mainForm);" />
      <MemberSignature Language="F#" Value="static member Run : System.Windows.Forms.Form -&gt; unit" Usage="System.Windows.Forms.Application.Run mainForm" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mainForm" Type="System.Windows.Forms.Form" />
      </Parameters>
      <Docs>
        <param name="mainForm">
          <span data-ttu-id="e34d5-400">表示するフォームを表す <see cref="T:System.Windows.Forms.Form" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-400">A <see cref="T:System.Windows.Forms.Form" /> that represents the form to make visible.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-401">現在のスレッドで標準のアプリケーション メッセージ ループの実行を開始し、指定したフォームを表示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-401">Begins running a standard application message loop on the current thread, and makes the specified form visible.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-402">通常、アプリケーションの main 関数では、このメソッドを呼び出すし、アプリケーションのメイン ウィンドウを渡します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-402">Typically, the main function of an application calls this method and passes to it the main window of the application.</span></span>  
  
 <span data-ttu-id="e34d5-403">このメソッドは、イベント ハンドラーを追加、`mainForm`のパラメーター、<xref:System.Windows.Forms.Form.Closed>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-403">This method adds an event handler to the `mainForm` parameter for the <xref:System.Windows.Forms.Form.Closed> event.</span></span> <span data-ttu-id="e34d5-404">イベント ハンドラー呼び出し<xref:System.Windows.Forms.Application.ExitThread%2A>アプリケーションをクリーンアップします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-404">The event handler calls <xref:System.Windows.Forms.Application.ExitThread%2A> to clean up the application.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-405"><xref:System.Windows.Forms.Control.Dispose%2A>のメソッド、<xref:System.Windows.Forms.Form>クラスがこのメソッドの戻り値の前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-405">The <xref:System.Windows.Forms.Control.Dispose%2A> method of the <xref:System.Windows.Forms.Form> class will be called prior to the return of this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-406">次のコード例は、フォームのリスト ボックス内の番号を一覧表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-406">The following code example lists numbers in a list box on a form.</span></span> <span data-ttu-id="e34d5-407">クリックするたびに`button1`アプリケーションの一覧に別の番号を追加します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-407">Each time you click `button1`, the application adds another number to the list.</span></span>  
  
 <span data-ttu-id="e34d5-408">`Main`メソッド呼び出し<xref:System.Windows.Forms.Application.Run%2A>フォームを作成すると、アプリケーションを起動する`listBox1`、および`button1`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-408">The `Main` method calls <xref:System.Windows.Forms.Application.Run%2A> to start the application, which creates the form, `listBox1`, and `button1`.</span></span> <span data-ttu-id="e34d5-409">ユーザーがクリックすると`button1`、`button1_Click`メソッドは、リスト ボックスには、1 ~ 3 の番号を追加し、表示、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-409">When the user clicks `button1`, the `button1_Click` method adds numbers one to three to the list box, and displays a <xref:System.Windows.Forms.MessageBox>.</span></span> <span data-ttu-id="e34d5-410">ユーザーがクリックした場合**いいえ**上、 <xref:System.Windows.Forms.MessageBox>、`button1_Click`メソッドの一覧に別の番号を追加します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-410">If the user clicks **No** on the <xref:System.Windows.Forms.MessageBox>, the `button1_Click` method adds another number to the list.</span></span> <span data-ttu-id="e34d5-411">ユーザーがクリックした場合 **[はい]**、アプリケーション呼び出し<xref:System.Windows.Forms.Application.Exit%2A>をキューに残りのすべてのメッセージを処理し、終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-411">If the user clicks **Yes**, the application calls <xref:System.Windows.Forms.Application.Exit%2A> to process all remaining messages in the queue and then to quit.</span></span>  
  
 <span data-ttu-id="e34d5-412">この例では、する必要があります`listBox1`と`button1`作成して、フォーム上に配置します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-412">The example requires that `listBox1` and `button1` have been created and placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.Exit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.Exit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.Exit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.Exit Example/CS/source.cs#1)]
 [!code-vb[Classic Application.Exit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.Exit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e34d5-413">メイン メッセージ ループが既に現在のスレッドで実行中です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-413">A main message loop is already running on the current thread.</span>
          </span>
        </exception>
        <altmember cref="M:System.Windows.Forms.Application.Exit" />
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="SafeTopLevelCaptionFormat">
      <MemberSignature Language="C#" Value="public static string SafeTopLevelCaptionFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string SafeTopLevelCaptionFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.SafeTopLevelCaptionFormat" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property SafeTopLevelCaptionFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ SafeTopLevelCaptionFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SafeTopLevelCaptionFormat : string with get, set" Usage="System.Windows.Forms.Application.SafeTopLevelCaptionFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-414">警告見出しと共に表示された場合にトップレベル ウィンドウのキャプションに適用する書式指定文字列を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-414">Gets or sets the format string to apply to top-level window captions when they are displayed with a warning banner.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-415">トップレベル ウィンドウのキャプションに適用する書式指定文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-415">The format string to apply to top-level window captions.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="e34d5-416">このプロパティを設定するすべてのウィンドウ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-416">for all windows to set this property.</span>
          </span>
          <span data-ttu-id="e34d5-417">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-417">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="SetCompatibleTextRenderingDefault">
      <MemberSignature Language="C#" Value="public static void SetCompatibleTextRenderingDefault (bool defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetCompatibleTextRenderingDefault(bool defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetCompatibleTextRenderingDefault (defaultValue As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetCompatibleTextRenderingDefault(bool defaultValue);" />
      <MemberSignature Language="F#" Value="static member SetCompatibleTextRenderingDefault : bool -&gt; unit" Usage="System.Windows.Forms.Application.SetCompatibleTextRenderingDefault defaultValue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="defaultValue" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="defaultValue">
          <span data-ttu-id="e34d5-418">新しいコントロールに適用する既定値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-418">The default value to use for new controls.</span>
          </span>
          <span data-ttu-id="e34d5-419">
            <see langword="true" /> の場合、<c>UseCompatibleTextRendering</c> をサポートする新しいコントロールは、テキスト レンダリングに [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] ベースの <see cref="T:System.Drawing.Graphics" /> クラスを使用します。<see langword="false" /> の場合、新しいコントロールは [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] ベースの <see cref="T:System.Windows.Forms.TextRenderer" /> クラスを使用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-419">If <see langword="true" />, new controls that support <c>UseCompatibleTextRendering</c> use the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] based <see cref="T:System.Drawing.Graphics" /> class for text rendering; if <see langword="false" />, new controls use the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] based <see cref="T:System.Windows.Forms.TextRenderer" /> class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-420">特定のコントロールで定義された <c>UseCompatibleTextRendering</c> プロパティにアプリケーション全体で有効な既定値を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-420">Sets the application-wide default for the <c>UseCompatibleTextRendering</c> property defined on certain controls.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-421">特定の Windows フォーム コントロールは、いずれかを使用して、テキストを描画できます、<xref:System.Windows.Forms.TextRenderer>クラスに基づく、[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]グラフィックス ライブラリ、または<xref:System.Drawing.Graphics>クラスに基づいています、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]グラフィックス ライブラリ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-421">Certain Windows Forms controls can render their text using either the <xref:System.Windows.Forms.TextRenderer> class, which is based on the [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] graphics library, or the <xref:System.Drawing.Graphics> class, which is based on the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] graphics library.</span></span> <span data-ttu-id="e34d5-422">この変更が行われた、[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]パフォーマンスとローカリゼーションの問題が原因[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-422">This change was made in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] because of performance and localization issues with [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)].</span></span> <span data-ttu-id="e34d5-423">使用<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A>の既定値を設定する、`UseCompatibleTextRendering`サポートしているコントロールのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-423">Use <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> to set the default value of the `UseCompatibleTextRendering` property for controls that support it.</span></span>  
  
 <span data-ttu-id="e34d5-424">`UseCompatibleTextRendering`プロパティは、そのレンダリング テキストを使用して Windows フォーム コントロールの間のビジュアルの互換性を提供するためのもの、<xref:System.Windows.Forms.TextRenderer>クラスと[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]と[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]を使用してカスタムのテキストレンダリングを実行するアプリケーション<xref:System.Drawing.Graphics>クラス。</span><span class="sxs-lookup"><span data-stu-id="e34d5-424">The `UseCompatibleTextRendering` property is intended to provide visual compatibility between Windows Forms controls that render text using the <xref:System.Windows.Forms.TextRenderer> class and [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] and [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)] applications that perform custom text rendering using the <xref:System.Drawing.Graphics> class.</span></span> <span data-ttu-id="e34d5-425">ほとんどの場合、アプリケーションはからアップグレードされていない場合に[!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)]または[!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)]、しておくことをお勧め`UseCompatibleTextRendering`の既定値に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-425">In most cases, if your application is not being upgraded from [!INCLUDE[net_v10_short](~/includes/net-v10-short-md.md)] or [!INCLUDE[net_v11_short](~/includes/net-v11-short-md.md)], it is recommended that you leave `UseCompatibleTextRendering` set to the default value of `false`.</span></span>  
  
 <span data-ttu-id="e34d5-426">[!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)]ベース<xref:System.Windows.Forms.TextRenderer>クラスで導入された、[!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)]パフォーマンスを向上させることをテキストの外観を改善、および国際対応フォントのサポートを改善します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-426">The [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] based <xref:System.Windows.Forms.TextRenderer> class was introduced in the [!INCLUDE[dnprdnlong](~/includes/dnprdnlong-md.md)] to improve performance, make text look better, and improve support for international fonts.</span></span> <span data-ttu-id="e34d5-427">以前のバージョンので、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]、[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]ベース<xref:System.Drawing.Graphics>クラスを使用してすべてのテキスト レンダリングを実行します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-427">In earlier versions of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] based <xref:System.Drawing.Graphics> class was used to perform all text rendering.</span></span> [!INCLUDE[ndptecgdi](~/includes/ndptecgdi-md.md)] <span data-ttu-id="e34d5-428">文字の空白文字と単語から異なる方法での折り返しを計算[!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-428">calculates character spacing and word wrapping differently from [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)].</span></span> <span data-ttu-id="e34d5-429">使用する Windows フォーム アプリケーションで、<xref:System.Drawing.Graphics>クラスのテキストを表示するために、これが原因で使用するコントロールのテキスト<xref:System.Windows.Forms.TextRenderer>に、アプリケーションの他のテキストは異なります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-429">In a Windows Forms application that uses the <xref:System.Drawing.Graphics> class to render text, this could cause the text for controls that use <xref:System.Windows.Forms.TextRenderer> to appear different from the other text in the application.</span></span> <span data-ttu-id="e34d5-430">この非互換性を解決するには、設定することができます、`UseCompatibleTextRendering`プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-430">To resolve this incompatibility, you can set the `UseCompatibleTextRendering` property to `true`.</span></span> <span data-ttu-id="e34d5-431">設定する`UseCompatibleTextRendering`に`true`アプリケーションでサポートされているすべてのコントロールを呼び出し、<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A>メソッドのパラメーターを持つ`true`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-431">To set `UseCompatibleTextRendering` to `true` for all supported controls in the application, call the <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> method with a parameter of `true`.</span></span>  
  
 <span data-ttu-id="e34d5-432">Internet Explorer などの別のアプリケーションで、Windows フォームのコードがホストされている場合、このメソッドを呼び出すことはありません必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-432">You should never call this method if your Windows Forms code is hosted in another application, such as Internet Explorer.</span></span> <span data-ttu-id="e34d5-433">スタンドアロンの Windows フォーム アプリケーションでは、このメソッドを呼び出すだけです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-433">Only call this method in stand-alone Windows Forms applications.</span></span>  
  
   
  
## Examples  
  
> [!IMPORTANT]
>  <span data-ttu-id="e34d5-434">既定値を設定する`UseCompatibleTextRendering`で[!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)]後を参照してください。 または<xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-434">To set the default value for `UseCompatibleTextRendering` in [!INCLUDE[vbprvblong](~/includes/vbprvblong-md.md)] or later, see <xref:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering%2A?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="e34d5-435">[!INCLUDE[csprcslong](~/includes/csprcslong-md.md)]以降への呼び出し<xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A>Program.cs ファイルが自動的に生成します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-435">In [!INCLUDE[csprcslong](~/includes/csprcslong-md.md)] or later, a call to <xref:System.Windows.Forms.Application.SetCompatibleTextRenderingDefault%2A> is automatically generated in the Program.cs file.</span></span> <span data-ttu-id="e34d5-436">既定のテキスト レンダリングを変更するには、生成されたコードを変更します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-436">To change the text rendering default, modify the generated code.</span></span>  
  
```scr  
static class Program  
{  
    /// <summary>  
    /// The main entry point for the application.  
    /// </summary>  
    [STAThread]  
    static void Main()  
    {  
        Application.EnableVisualStyles();  
        Application.SetCompatibleTextRenderingDefault(false);  
        Application.Run(new Form1());  
    }  
}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e34d5-437">このメソッドは、Windows フォーム アプリケーションによって最初のウィンドウが作成される前にしか呼び出すことができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-437">You can only call this method before the first window is created by your Windows Forms application.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Forms.ButtonBase.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.CheckedListBox.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.GroupBox.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.Label.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.LinkLabel.UseCompatibleTextRendering" />
        <altmember cref="P:System.Windows.Forms.PropertyGrid.UseCompatibleTextRendering" />
        <altmember cref="P:Microsoft.VisualBasic.ApplicationServices.WindowsFormsApplicationBase.UseCompatibleTextRendering" />
        <altmember cref="M:System.Drawing.Text.PrivateFontCollection.AddMemoryFont(System.IntPtr,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SetSuspendState">
      <MemberSignature Language="C#" Value="public static bool SetSuspendState (System.Windows.Forms.PowerState state, bool force, bool disableWakeEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SetSuspendState(valuetype System.Windows.Forms.PowerState state, bool force, bool disableWakeEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetSuspendState(System.Windows.Forms.PowerState,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function SetSuspendState (state As PowerState, force As Boolean, disableWakeEvent As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool SetSuspendState(System::Windows::Forms::PowerState state, bool force, bool disableWakeEvent);" />
      <MemberSignature Language="F#" Value="static member SetSuspendState : System.Windows.Forms.PowerState * bool * bool -&gt; bool" Usage="System.Windows.Forms.Application.SetSuspendState (state, force, disableWakeEvent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Windows.Forms.PowerState" />
        <Parameter Name="force" Type="System.Boolean" />
        <Parameter Name="disableWakeEvent" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="e34d5-438">移行後の電源の動作モードを示す <see cref="T:System.Windows.Forms.PowerState" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-438">A <see cref="T:System.Windows.Forms.PowerState" /> indicating the power activity mode to which to transition.</span>
          </span>
        </param>
        <param name="force">
          <span data-ttu-id="e34d5-439">すぐに、強制的に中断モードにする場合は <see langword="true" />。Windows からすべてのアプリケーションに中断の要求が送られるようにする場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-439">
              <see langword="true" /> to force the suspended mode immediately; <see langword="false" /> to cause Windows to send a suspend request to every application.</span>
          </span>
        </param>
        <param name="disableWakeEvent">
          <span data-ttu-id="e34d5-440">システムの電源ステータスの復元が wake イベントでアクティブにならないようにするには <see langword="true" />。システムの電源ステータスの復元が wake イベントでアクティブになるようにするには <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-440">
              <see langword="true" /> to disable restoring the system's power status to active on a wake event, <see langword="false" /> to enable restoring the system's power status to active on a wake event.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-441">システムを中断または休止状態にするか、システムが中断または休止状態になるよう要求します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-441">Suspends or hibernates the system, or requests that the system be suspended or hibernated.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e34d5-442">システムが中断中の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-442">
              <see langword="true" /> if the system is being suspended, otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-443">20 秒以内、アプリケーションが中断の要求に応答しない場合、Windows は、応答のない状態であると、アプリケーションするスリープ状態にするか、終了を決定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-443">If an application does not respond to a suspend request within 20 seconds, Windows determines that it is in a non-responsive state, and that the application can either be put to sleep or terminated.</span></span> <span data-ttu-id="e34d5-444">後のアプリケーションは、中断の要求に応答するただし、かかるリソースをクリーンアップして、アクティブなプロセスをシャット ダウンする必要がある任意の時間。</span><span class="sxs-lookup"><span data-stu-id="e34d5-444">Once an application responds to a suspend request, however, it can take whatever time it needs to clean up resources and shut down active processes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.PowerState" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetUnhandledExceptionMode">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-445">未処理の例外への対応方法をアプリケーションに指示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-445">Instructs the application how to respond to unhandled exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e34d5-446">次のコード例では、Windows フォーム スレッドと他のスレッドで発生する例外の発生する例外のイベント ハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-446">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="e34d5-447">設定<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>すべての例外は、アプリケーションのユーザー構成ファイルの設定に関係なく、アプリケーションによって処理されるようにします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-447">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="e34d5-448">使用して、 <xref:System.Windows.Forms.Application.ThreadException> UI スレッドの例外を処理するイベントと<xref:System.AppDomain.UnhandledException>非 UI スレッドの例外を処理するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-448">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="e34d5-449"><xref:System.AppDomain.UnhandledException>アプリケーションを防ぐことはできませんの終了、例では、単にエラーがログに終了する前に、アプリケーション イベント ログ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-449">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="e34d5-450">この例では、2 つを定義した<xref:System.Windows.Forms.Button>コントロール、`button1`と`button2`の<xref:System.Windows.Forms.Form>クラス。</span><span class="sxs-lookup"><span data-stu-id="e34d5-450">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetUnhandledExceptionMode">
      <MemberSignature Language="C#" Value="public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetUnhandledExceptionMode(valuetype System.Windows.Forms.UnhandledExceptionMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetUnhandledExceptionMode (mode As UnhandledExceptionMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode mode);" />
      <MemberSignature Language="F#" Value="static member SetUnhandledExceptionMode : System.Windows.Forms.UnhandledExceptionMode -&gt; unit" Usage="System.Windows.Forms.Application.SetUnhandledExceptionMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.UnhandledExceptionMode" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="e34d5-451">キャッチされない例外がスローされた場合に必要なアプリケーションの動作方法を説明する <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-451">An <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> value describing how the application should behave if an exception is thrown without being caught.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-452">未処理の例外への対応方法をアプリケーションに指示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-452">Instructs the application how to respond to unhandled exceptions.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-453">すべての Windows フォームによってスローされた例外をキャッチするがよくあります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-453">It is often not feasible to catch all of the exceptions thrown by Windows Forms.</span></span> <span data-ttu-id="e34d5-454">このメソッドを使用して、Windows フォーム コンポーネントによってスローされたすべての未処理の例外をキャッチして操作を続行するかどうか、または、それらをユーザーに公開して実行を停止するかどうか、アプリケーションに指示できます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-454">Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</span></span>  
  
 <span data-ttu-id="e34d5-455">呼び出す<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>を使用して、アプリケーションのメイン フォームのインスタンスを作成する前に、<xref:System.Windows.Forms.Application.Run%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-455">Call <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> before you instantiate the main form of your application using the <xref:System.Windows.Forms.Application.Run%2A> method.</span></span>  
  
 <span data-ttu-id="e34d5-456">作成していないスレッドで発生する例外をキャッチし、使用して、Windows フォームによって所有されている、<xref:System.AppDomain.UnhandledException>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e34d5-456">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-457">次のコード例では、Windows フォーム スレッドと他のスレッドで発生する例外の発生する例外のイベント ハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-457">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="e34d5-458">設定<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>すべての例外は、アプリケーションのユーザー構成ファイルの設定に関係なく、アプリケーションによって処理されるようにします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-458">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="e34d5-459">使用して、 <xref:System.Windows.Forms.Application.ThreadException> UI スレッドの例外を処理するイベントと<xref:System.AppDomain.UnhandledException>非 UI スレッドの例外を処理するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-459">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="e34d5-460"><xref:System.AppDomain.UnhandledException>アプリケーションを防ぐことはできませんの終了、例では、単にエラーがログに終了する前に、アプリケーション イベント ログ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-460">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="e34d5-461">この例では、2 つを定義した<xref:System.Windows.Forms.Button>コントロール、`button1`と`button2`の<xref:System.Windows.Forms.Form>クラス。</span><span class="sxs-lookup"><span data-stu-id="e34d5-461">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e34d5-462">アプリケーションが最初のウィンドウを作成した後に、例外モードを設定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-462">You cannot set the exception mode after the application has created its first window.</span>
          </span>
        </exception>
        <altmember cref="T:System.Windows.Forms.UnhandledExceptionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetUnhandledExceptionMode">
      <MemberSignature Language="C#" Value="public static void SetUnhandledExceptionMode (System.Windows.Forms.UnhandledExceptionMode mode, bool threadScope);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetUnhandledExceptionMode(valuetype System.Windows.Forms.UnhandledExceptionMode mode, bool threadScope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SetUnhandledExceptionMode (mode As UnhandledExceptionMode, threadScope As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetUnhandledExceptionMode(System::Windows::Forms::UnhandledExceptionMode mode, bool threadScope);" />
      <MemberSignature Language="F#" Value="static member SetUnhandledExceptionMode : System.Windows.Forms.UnhandledExceptionMode * bool -&gt; unit" Usage="System.Windows.Forms.Application.SetUnhandledExceptionMode (mode, threadScope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.UnhandledExceptionMode" />
        <Parameter Name="threadScope" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode">
          <span data-ttu-id="e34d5-463">キャッチされない例外がスローされた場合に必要なアプリケーションの動作方法を説明する <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-463">An <see cref="T:System.Windows.Forms.UnhandledExceptionMode" /> value describing how the application should behave if an exception is thrown without being caught.</span>
          </span>
        </param>
        <param name="threadScope">
          <span data-ttu-id="e34d5-464">スレッド例外モードを設定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-464">
              <see langword="true" /> to set the thread exception mode; otherwise, <see langword="false" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e34d5-465">未処理の例外に応答する方法をアプリケーションに指示し、オプションでスレッド固有の動作を適用します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-465">Instructs the application how to respond to unhandled exceptions, optionally applying thread-specific behavior.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-466">すべての Windows フォームによってスローされた例外をキャッチするがよくあります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-466">It is often not feasible to catch all of the exceptions thrown by Windows Forms.</span></span> <span data-ttu-id="e34d5-467">このメソッドを使用して、Windows フォーム コンポーネントによってスローされたすべての未処理の例外をキャッチして操作を続行するかどうか、または、それらをユーザーに公開して実行を停止するかどうか、アプリケーションに指示できます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-467">Using this method, you can instruct your application whether it should catch all unhandled exceptions thrown by Windows Forms components and continue operating, or whether it should expose them to the user and halt execution.</span></span>  
  
 <span data-ttu-id="e34d5-468">呼び出す<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>を使用して、アプリケーションのメイン フォームのインスタンスを作成する前に、<xref:System.Windows.Forms.Application.Run%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="e34d5-468">Call <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> before you instantiate the main form of your application using the <xref:System.Windows.Forms.Application.Run%2A> method.</span></span>  
  
 <span data-ttu-id="e34d5-469">ときに`threadScope`は`true`、スレッド例外モードを設定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-469">When `threadScope` is `true`, the thread exception mode is set.</span></span> <span data-ttu-id="e34d5-470">スレッド例外モードが場合、アプリケーション例外モードをオーバーライド`mode`に設定されていない<xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-470">The thread exception mode overrides the application exception mode if `mode` is not set to <xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>.</span></span>  
  
 <span data-ttu-id="e34d5-471">ときに`threadScope`は`false`、アプリケーション例外モードを設定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-471">When `threadScope` is `false`, the application exception mode is set.</span></span> <span data-ttu-id="e34d5-472">含まれるすべてのスレッドのアプリケーション例外モードが使用される、<xref:System.Windows.Forms.UnhandledExceptionMode.Automatic>モード。</span><span class="sxs-lookup"><span data-stu-id="e34d5-472">The application exception mode is used for all threads that have the <xref:System.Windows.Forms.UnhandledExceptionMode.Automatic> mode.</span></span> <span data-ttu-id="e34d5-473">アプリケーション例外モードを設定しても、現在のスレッドの設定には影響しません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-473">Setting the application exception mode does not affect the setting of the current thread.</span></span>  
  
 <span data-ttu-id="e34d5-474">作成していないスレッドで発生する例外をキャッチし、使用して、Windows フォームによって所有されている、<xref:System.AppDomain.UnhandledException>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e34d5-474">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-475">次のコード例では、Windows フォーム スレッドと他のスレッドで発生する例外の発生する例外のイベント ハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-475">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="e34d5-476">設定<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>すべての例外は、アプリケーションのユーザー構成ファイルの設定に関係なく、アプリケーションによって処理されるようにします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-476">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="e34d5-477">使用して、 <xref:System.Windows.Forms.Application.ThreadException> UI スレッドの例外を処理するイベントと<xref:System.AppDomain.UnhandledException>非 UI スレッドの例外を処理するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-477">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="e34d5-478"><xref:System.AppDomain.UnhandledException>アプリケーションを防ぐことはできませんの終了、例では、単にエラーがログに終了する前に、アプリケーション イベント ログ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-478">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="e34d5-479">この例では、2 つを定義した<xref:System.Windows.Forms.Button>コントロール、`button1`と`button2`の<xref:System.Windows.Forms.Form>クラス。</span><span class="sxs-lookup"><span data-stu-id="e34d5-479">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e34d5-480">アプリケーションが最初のウィンドウを作成した後に、例外モードを設定することはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-480">You cannot set the exception mode after the application has created its first window.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="StartupPath">
      <MemberSignature Language="C#" Value="public static string StartupPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string StartupPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.StartupPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property StartupPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ StartupPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StartupPath : string" Usage="System.Windows.Forms.Application.StartupPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-481">アプリケーションを開始した実行可能ファイルの、ファイル名を含まないパスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-481">Gets the path for the executable file that started the application, not including the executable name.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-482">アプリケーションを開始した実行可能ファイルのパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-482">The path for the executable file that started the application.</span>
          </span>
          <span data-ttu-id="e34d5-483">このパスは、Windows フォーム アプリケーションが [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] を使用して配置されているかどうかによって異なります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-483">This path will be different depending on whether the Windows Forms application is deployed using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span>
          </span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="e34d5-484">アプリケーションは、C:\Documents and Settings でユーザーごとのアプリケーション キャッシュに格納されている\\*username*ディレクトリ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-484">applications are stored in a per-user application cache in the C:\Documents and Settings\\*username* directory.</span></span><span data-ttu-id="e34d5-485">詳細については、次を参照してください。[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-485">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="e34d5-486">次のコード例では、このプロパティを取得し、テキスト ボックスにその値を表示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-486">The following code example gets this property and displays its value in a text box.</span></span> <span data-ttu-id="e34d5-487">この例では、する必要があります`textBox1`がフォームに配置されています。</span><span class="sxs-lookup"><span data-stu-id="e34d5-487">The example requires that `textBox1` has been placed on a form.</span></span>  
  
 [!code-cpp[Classic Application.StartupPath Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.StartupPath Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.StartupPath Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.StartupPath Example/CS/source.cs#1)]
 [!code-vb[Classic Application.StartupPath Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.StartupPath Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">
          <span data-ttu-id="e34d5-488">パスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-488">for getting the path.</span>
          </span>
          <span data-ttu-id="e34d5-489">関連付けられた列挙体。 <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-489">Associated enumeration: <see cref="T:System.Security.Permissions.FileIOPermissionAccess" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ThreadException">
      <MemberSignature Language="C#" Value="public static event System.Threading.ThreadExceptionEventHandler ThreadException;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Threading.ThreadExceptionEventHandler ThreadException" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ThreadException" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ThreadException As ThreadExceptionEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event System::Threading::ThreadExceptionEventHandler ^ ThreadException;" />
      <MemberSignature Language="F#" Value="member this.ThreadException : System.Threading.ThreadExceptionEventHandler " Usage="member this.ThreadException : System.Threading.ThreadExceptionEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.ThreadExceptionEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-490">トラップされないスレッドの例外がスローされると、発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-490">Occurs when an untrapped thread exception is thrown.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-491">このイベントは、Windows フォーム スレッドで発生する例外を未処理のハンドルのそれ以外の場合に、Windows フォーム アプリケーションを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-491">This event allows your Windows Forms application to handle otherwise unhandled exceptions that occur in Windows Forms threads.</span></span> <span data-ttu-id="e34d5-492">イベント ハンドラーをアタッチ、<xref:System.Windows.Forms.Application.ThreadException>不明な状態でアプリケーションにそのままにこれらの例外を処理するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-492">Attach your event handlers to the <xref:System.Windows.Forms.Application.ThreadException> event to deal with these exceptions, which will leave your application in an unknown state.</span></span> <span data-ttu-id="e34d5-493">可能であれば、構造化例外処理ブロックで例外を処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-493">Where possible, exceptions should be handled by a structured exception handling block.</span></span>  
  
 <span data-ttu-id="e34d5-494">このコールバックは、Windows フォーム スレッドのハンドルされない例外を設定して使用するかどうかを変更する<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-494">You can change whether this callback is used for unhandled Windows Forms thread exceptions by setting <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>.</span></span> <span data-ttu-id="e34d5-495">作成していないスレッドで発生する例外をキャッチし、使用して、Windows フォームによって所有されている、<xref:System.AppDomain.UnhandledException>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e34d5-495">To catch exceptions that occur in threads not created and owned by Windows Forms, use the <xref:System.AppDomain.UnhandledException> event handler.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e34d5-496">呼び出す前にこのイベントのアクティブ化が欠落しないことを保証するハンドラーをアタッチする必要があります<xref:System.Windows.Application.Run%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-496">To guarantee that no activations of this event are missed, you must attach a handler before you call <xref:System.Windows.Application.Run%2A?displayProperty=nameWithType>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e34d5-497">静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークが発生するとき、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-497">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-498">次のコード例では、Windows フォーム スレッドと他のスレッドで発生する例外の発生する例外のイベント ハンドラーを設定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-498">The following code example sets event handlers for exceptions that occur on Windows Forms threads and exceptions that occur on other threads.</span></span> <span data-ttu-id="e34d5-499">設定<xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A>すべての例外は、アプリケーションのユーザー構成ファイルの設定に関係なく、アプリケーションによって処理されるようにします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-499">It sets <xref:System.Windows.Forms.Application.SetUnhandledExceptionMode%2A> so that all exceptions are handled by the application, regardless of the settings in the application's user configuration file.</span></span> <span data-ttu-id="e34d5-500">使用して、 <xref:System.Windows.Forms.Application.ThreadException> UI スレッドの例外を処理するイベントと<xref:System.AppDomain.UnhandledException>非 UI スレッドの例外を処理するイベントです。</span><span class="sxs-lookup"><span data-stu-id="e34d5-500">It uses the <xref:System.Windows.Forms.Application.ThreadException> event to handle UI thread exceptions, and the <xref:System.AppDomain.UnhandledException> event to handle non-UI thread exceptions.</span></span> <span data-ttu-id="e34d5-501"><xref:System.AppDomain.UnhandledException>アプリケーションを防ぐことはできませんの終了、例では、単にエラーがログに終了する前に、アプリケーション イベント ログ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-501">Since <xref:System.AppDomain.UnhandledException> cannot prevent an application from terminating, the example simply logs the error in the application event log before termination.</span></span>  
  
 <span data-ttu-id="e34d5-502">この例では、2 つを定義した<xref:System.Windows.Forms.Button>コントロール、`button1`と`button2`の<xref:System.Windows.Forms.Form>クラス。</span><span class="sxs-lookup"><span data-stu-id="e34d5-502">This example assumes that you have defined two <xref:System.Windows.Forms.Button> controls, `button1` and `button2`, on your <xref:System.Windows.Forms.Form> class.</span></span>  
  
 [!code-cpp[Classic Application.ThreadException Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Application.ThreadException Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Application.ThreadException Example/CS/source.cs#1)]
 [!code-vb[Classic Application.ThreadException Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Application.ThreadException Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">
          <span data-ttu-id="e34d5-503">このイベントにハンドラーを追加するときに、アンマネージ コードを呼び出す直前の呼び出し元。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-503">for the immediate caller to call unmanaged code when adding a handler to this event.</span>
          </span>
          <span data-ttu-id="e34d5-504">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-504">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
          </span>
        </permission>
      </Docs>
    </Member>
    <Member MemberName="ThreadExit">
      <MemberSignature Language="C#" Value="public static event EventHandler ThreadExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ThreadExit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Application.ThreadExit" />
      <MemberSignature Language="VB.NET" Value="Public Shared Custom Event ThreadExit As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static event EventHandler ^ ThreadExit;" />
      <MemberSignature Language="F#" Value="member this.ThreadExit : EventHandler " Usage="member this.ThreadExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-505">スレッドをシャットダウンしようとすると発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-505">Occurs when a thread is about to shut down.</span>
          </span>
          <span data-ttu-id="e34d5-506">アプリケーションのメイン スレッドをシャットダウンしようとすると、まずこのイベントが発生し、続いて <see cref="E:System.Windows.Forms.Application.ApplicationExit" /> イベントが発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-506">When the main thread for an application is about to be shut down, this event is raised first, followed by an <see cref="E:System.Windows.Forms.Application.ApplicationExit" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-507">イベント ハンドラーをアタッチする必要があります、<xref:System.Windows.Forms.Application.ThreadExit>を実行するイベントがハンドルされていない、必須のタスクを実行しているスレッドを停止する前にします。</span><span class="sxs-lookup"><span data-stu-id="e34d5-507">You must attach the event handlers to the <xref:System.Windows.Forms.Application.ThreadExit> event to perform any unhandled, required tasks before the thread stops running.</span></span> <span data-ttu-id="e34d5-508">このスレッド、またはガベージ コレクターがクリアされなかったオブジェクトの破棄によって開かれたファイルを閉じます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-508">Close files opened by this thread, or dispose of objects that the garbage collector did not reclaim.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="e34d5-509">静的イベントであるため、アプリケーションが破棄されると、またはメモリ リークが発生するとき、イベント ハンドラーをデタッチする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-509">Because this is a static event, you must detach your event handlers when your application is disposed, or memory leaks will result.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-510">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-510">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="e34d5-511">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Application.ThreadExit>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-511">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Application.ThreadExit> event.</span></span> <span data-ttu-id="e34d5-512">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-512">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="e34d5-513">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-513">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="e34d5-514">コード例を実行する Windows フォームに貼り付けることと、イベント ハンドラーに関連付けられていることを確認、<xref:System.Windows.Forms.Application.ThreadExit>イベント。</span><span class="sxs-lookup"><span data-stu-id="e34d5-514">To run the example code, paste it into a Windows Forms and ensure that the event handler is associated with the <xref:System.Windows.Forms.Application.ThreadExit> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#6)]
 [!code-vb[System.Windows.Forms.EventExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Application.ExitThread" />
      </Docs>
    </Member>
    <Member MemberName="UnregisterMessageLoop">
      <MemberSignature Language="C#" Value="public static void UnregisterMessageLoop ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnregisterMessageLoop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Application.UnregisterMessageLoop" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub UnregisterMessageLoop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UnregisterMessageLoop();" />
      <MemberSignature Language="F#" Value="static member UnregisterMessageLoop : unit -&gt; unit" Usage="System.Windows.Forms.Application.UnregisterMessageLoop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-515">
            <see cref="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" /> によってなされたメッセージ ループ コールバックを登録解除します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-515">Unregisters the message loop callback made with <see cref="M:System.Windows.Forms.Application.RegisterMessageLoop(System.Windows.Forms.Application.MessageLoopCallback)" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserAppDataPath">
      <MemberSignature Language="C#" Value="public static string UserAppDataPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string UserAppDataPath" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UserAppDataPath" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserAppDataPath As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::String ^ UserAppDataPath { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserAppDataPath : string" Usage="System.Windows.Forms.Application.UserAppDataPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-516">ユーザーのアプリケーション データのパスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-516">Gets the path for the application data of a user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-517">ユーザーのアプリケーション データのパス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-517">The path for the application data of a user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-518">パスが存在しない場合は、次の形式で 1 つ作成されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-518">If a path does not exist, one is created in the following format:</span></span>  
  
 <span data-ttu-id="e34d5-519">*基本パス*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="e34d5-519">*Base Path*\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>  
  
 <span data-ttu-id="e34d5-520">このパスに格納されたデータは、ローミングが有効になっているユーザー プロファイルの一部です。</span><span class="sxs-lookup"><span data-stu-id="e34d5-520">Data stored in this path is part of user profile that is enabled for roaming.</span></span> <span data-ttu-id="e34d5-521">ローミング ユーザーは、ネットワーク内の 1 つ以上のコンピューターで動作します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-521">A roaming user works on more than one computer in a network.</span></span> <span data-ttu-id="e34d5-522">ローミング ユーザーのユーザー プロファイルは、ネットワーク上のサーバーに保持され、ユーザーがログオンしたときに、システムに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-522">The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</span></span> <span data-ttu-id="e34d5-523">、ローミングと見なすユーザー プロファイルのオペレーティング システムは、ローミング プロファイルをサポートする必要があり、それを有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-523">For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</span></span>  
  
 <span data-ttu-id="e34d5-524">通常の基本パスは C:\Documents and Settings\\*username*\Application Data です。</span><span class="sxs-lookup"><span data-stu-id="e34d5-524">A typical base path is C:\Documents and Settings\\*username*\Application Data.</span></span> <span data-ttu-id="e34d5-525">このパスになります、ただしを使用して、Windows フォーム アプリケーションがデプロイされている場合[!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-525">This path will be different, however, if the Windows Forms application is deployed by using [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)].</span></span> [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] <span data-ttu-id="e34d5-526">その他のすべてのアプリケーションから分離された独自のアプリケーション データ ディレクトリを作成します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-526">creates its own application data directory that is isolated from all other applications.</span></span> <span data-ttu-id="e34d5-527">詳細については、次を参照してください。[ローカルへのアクセスとリモート データには、ClickOnce アプリケーション](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d)します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-527">For more information, see [Accessing Local and Remote Data in ClickOnce Applications](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-528">次のコード例では、2 つのフォームを表示し、両方のフォームが閉じられたときに、アプリケーションを終了します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-528">The following code example displays two forms and exits the application when both forms are closed.</span></span> <span data-ttu-id="e34d5-529">アプリケーションを起動し、終了、各フォームの位置が記憶されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-529">When the application starts and exits, the position of each form is remembered.</span></span> <span data-ttu-id="e34d5-530">この例では、<xref:System.Windows.Forms.Application.UserAppDataPath%2A>ユーザーのアプリケーション データを格納するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="e34d5-530">This example demonstrates using the <xref:System.Windows.Forms.Application.UserAppDataPath%2A> property to store application data for the user.</span></span>  
  
 <span data-ttu-id="e34d5-531">クラスは、`MyApplicationContext`継承<xref:System.Windows.Forms.ApplicationContext>し、各フォームが閉じられるし、はどちらも、ときに、現在のスレッドを終了するときは常に追跡します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-531">The class `MyApplicationContext` inherits from <xref:System.Windows.Forms.ApplicationContext> and keeps track when each form is closed, and exits the current thread when they both are.</span></span> <span data-ttu-id="e34d5-532">クラスは、ユーザーの各フォームの位置を格納します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-532">The class stores the positions of each form for the user.</span></span> <span data-ttu-id="e34d5-533">フォームの位置データがという名前のファイルに格納されている`Appdata.txt`によって決定の場所に作成される<xref:System.Windows.Forms.Application.UserAppDataPath%2A>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-533">The form position data is stored in a file titled `Appdata.txt` that is created in the location determined by <xref:System.Windows.Forms.Application.UserAppDataPath%2A>.</span></span> <span data-ttu-id="e34d5-534">`Main`メソッド呼び出し`Application.Run(context)`に基づいてアプリケーションを開始する、<xref:System.Windows.Forms.ApplicationContext>します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-534">The `Main` method calls `Application.Run(context)` to start the application given the <xref:System.Windows.Forms.ApplicationContext>.</span></span>  
  
 <span data-ttu-id="e34d5-535">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.ApplicationContext>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="e34d5-535">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.ApplicationContext> class overview.</span></span> <span data-ttu-id="e34d5-536">いくつかのコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-536">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e34d5-537">参照してください<xref:System.Windows.Forms.ApplicationContext>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="e34d5-537">See <xref:System.Windows.Forms.ApplicationContext> for the whole code listing.</span></span>  
  
 [!code-cpp[Application#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Application/CPP/source.cpp#5)]
 [!code-csharp[Application#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Application/CS/source.cs#5)]
 [!code-vb[Application#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Application/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Application.UserAppDataRegistry" />
      </Docs>
    </Member>
    <Member MemberName="UserAppDataRegistry">
      <MemberSignature Language="C#" Value="public static Microsoft.Win32.RegistryKey UserAppDataRegistry { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Microsoft.Win32.RegistryKey UserAppDataRegistry" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UserAppDataRegistry" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property UserAppDataRegistry As RegistryKey" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property Microsoft::Win32::RegistryKey ^ UserAppDataRegistry { Microsoft::Win32::RegistryKey ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UserAppDataRegistry : Microsoft.Win32.RegistryKey" Usage="System.Windows.Forms.Application.UserAppDataRegistry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Win32.RegistryKey</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-538">ユーザーのアプリケーション データのレジストリ キーを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-538">Gets the registry key for the application data of a user.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-539">ユーザー固有のアプリケーション データのレジストリ キーを表す <see cref="T:Microsoft.Win32.RegistryKey" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-539">A <see cref="T:Microsoft.Win32.RegistryKey" /> representing the registry key for the application data specific to the user.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-540">キーが存在しない場合は、次の形式で作成されます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-540">If the key does not exist, it is created in the following format:</span></span>  
  
 <span data-ttu-id="e34d5-541">CurrentUser\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span><span class="sxs-lookup"><span data-stu-id="e34d5-541">CurrentUser\Software\\<xref:System.Windows.Forms.Application.CompanyName%2A>\\<xref:System.Windows.Forms.Application.ProductName%2A>\\<xref:System.Windows.Forms.Application.ProductVersion%2A></span></span>   
  
 <span data-ttu-id="e34d5-542">このキーに格納されたデータは、ローミングが有効になっているユーザー プロファイルの一部です。</span><span class="sxs-lookup"><span data-stu-id="e34d5-542">Data stored in this key is part of user profile that is enabled for roaming.</span></span> <span data-ttu-id="e34d5-543">ローミング ユーザーは、ネットワーク内の 1 つ以上のコンピューターで動作します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-543">A roaming user works on more than one computer in a network.</span></span> <span data-ttu-id="e34d5-544">ローミング ユーザーのユーザー プロファイルは、ネットワーク上のサーバーに保持され、ユーザーがログオンしたときに、システムに読み込まれます。</span><span class="sxs-lookup"><span data-stu-id="e34d5-544">The user profile for a roaming user is kept on a server on the network and is loaded onto a system when the user logs on.</span></span> <span data-ttu-id="e34d5-545">、ローミングと見なすユーザー プロファイルのオペレーティング システムは、ローミング プロファイルをサポートする必要があり、それを有効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="e34d5-545">For a user profile to be considered for roaming, the operating system must support roaming profiles and it must be enabled.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.SystemInformation" />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public static bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.UseWaitCursor" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property UseWaitCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool UseWaitCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseWaitCursor : bool with get, set" Usage="System.Windows.Forms.Application.UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-546">アプリケーションの開いているフォームすべてに待機カーソルを使用するかどうかについて、取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-546">Gets or sets whether the wait cursor is used for all open forms of the application.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-547">すべての開いているフォームで待機カーソルが使用される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-547">
              <see langword="true" /> is the wait cursor is used for all open forms; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-548">このプロパティを設定すると`true`、<xref:System.Windows.Forms.Control.UseWaitCursor%2A>アプリケーション内のすべての開いているフォームのプロパティに設定する`true`します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-548">When this property is set to `true`, the <xref:System.Windows.Forms.Control.UseWaitCursor%2A> property of all open forms in the application will be set to `true`.</span></span> <span data-ttu-id="e34d5-549">この呼び出しは、すべてのフォームにこのプロパティが設定されるまでは返されません。</span><span class="sxs-lookup"><span data-stu-id="e34d5-549">This call will not return until this property has been set on all forms.</span></span> <span data-ttu-id="e34d5-550">実行時間の長い操作、およびすべてのアプリケーション形式で、操作がまだ処理されていることを指定するした場合は、このプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-550">Use this property when you have a long-running operation, and want to indicate in all application forms that the operation is still processing.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisualStyleState">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.VisualStyles.VisualStyleState VisualStyleState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.VisualStyles.VisualStyleState VisualStyleState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Application.VisualStyleState" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property VisualStyleState As VisualStyleState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::VisualStyles::VisualStyleState VisualStyleState { System::Windows::Forms::VisualStyles::VisualStyleState get(); void set(System::Windows::Forms::VisualStyles::VisualStyleState value); };" />
      <MemberSignature Language="F#" Value="member this.VisualStyleState : System.Windows.Forms.VisualStyles.VisualStyleState with get, set" Usage="System.Windows.Forms.Application.VisualStyleState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.VisualStyles.VisualStyleState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="e34d5-551">アプリケーション ウィンドウに visual スタイルをどのように適用するかを指定する値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-551">Gets a value that specifies how visual styles are applied to application windows.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="e34d5-552">
            <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleState" /> 値のビットごとの組み合わせ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="e34d5-552">A bitwise combination of the <see cref="T:System.Windows.Forms.VisualStyles.VisualStyleState" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e34d5-553">これは、<xref:System.Windows.Forms.Application.VisualStyleState%2A>プロパティは、クライアント領域やアプリケーション ウィンドウの非クライアント領域で visual スタイルが有効かどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="e34d5-553">This <xref:System.Windows.Forms.Application.VisualStyleState%2A> property determines whether visual styles are enabled in client areas or nonclient areas of application windows.</span></span> <span data-ttu-id="e34d5-554">メイン フォームのコンス トラクター内で一般的には、このプロパティを設定する必要がありますまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="e34d5-554">Generally, this property should be set within the main form's constructor or <xref:System.Windows.Forms.Form.Load> event handler.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e34d5-555">次のコード例のセット、<xref:System.Windows.Forms.Application.VisualStyleState%2A>プロパティのいずれかを<xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType>内の値、<xref:System.Windows.Forms.Control.Click>のイベント ハンドラーを<xref:System.Windows.Forms.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="e34d5-555">The following code example sets the <xref:System.Windows.Forms.Application.VisualStyleState%2A> property to one of the <xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> values within the <xref:System.Windows.Forms.Control.Click> event handler for a <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="e34d5-556">このコード例が示されている例の一部、<xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType>列挙体。</span><span class="sxs-lookup"><span data-stu-id="e34d5-556">This code example is part of a larger example provided for the <xref:System.Windows.Forms.VisualStyles.VisualStyleState?displayProperty=nameWithType> enumeration.</span></span>  
  
 [!code-cpp[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/cpp/visualstylestate.cpp#10)]
 [!code-csharp[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/CS/visualstylestate.cs#10)]
 [!code-vb[System.Windows.Forms.VisualStyles.VisualStyleState#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.VisualStyles.VisualStyleState/VB/visualstylestate.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>