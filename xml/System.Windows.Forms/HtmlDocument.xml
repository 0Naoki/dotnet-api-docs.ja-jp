<Type Name="HtmlDocument" FullName="System.Windows.Forms.HtmlDocument">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ed4bf637c479156f7003d2c17a0807086453c823" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70474048" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlDocument" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlDocument extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlDocument" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlDocument" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlDocument sealed" />
  <TypeSignature Language="F#" Value="type HtmlDocument = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Windows.Forms.WebBrowser" /> コントロールでホストされている HTML ドキュメントに、トップレベルのプログラムによるアクセスを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument>Internet Explorer のドキュメントオブジェクト (HTML ドキュメントオブジェクトモデル (DOM) とも呼ばれます) に関するマネージラッパーを提供します。 の<xref:System.Windows.Forms.HtmlDocument>インスタンスを取得するには<xref:System.Windows.Forms.WebBrowser.Document%2A> 、 <xref:System.Windows.Forms.WebBrowser>コントロールのプロパティを使用します。  
  
 HTML ドキュメント内の HTML タグは、入れ子にすることができます。 <xref:System.Windows.Forms.HtmlDocument>したがって<xref:System.Windows.Forms.HtmlElement> 、子がクラスのインスタンスであるドキュメントツリーを表します。 単純な HTML ファイルのコード例を次に示します。  
  
```  
<HTML>  
    <BODY>  
        <DIV name="Span1">Simple HTML Form</DIV>  
        <FORM>  
            <SPAN name="TextLabel">Enter Your Name:</SPAN>  
            <INPUT type="text" size="20" name="Text1">  
        </FORM>  
    </BODY>  
</HTML>  
```  
  
 この例では<xref:System.Windows.Forms.HtmlDocument> 、は、 `HTML`タグ内のドキュメント全体を表します。 、 `BODY` <xref:System.Windows.Forms.HtmlElement> 、およびの `SPAN` 各タグは、個々のオブジェクトによって表されます。 `FORM` `DIV`  
  
 このツリー内の要素にアクセスするには、いくつかの方法があります。 プロパティを使用して、 `BODY`タグとそのすべての子にアクセスします。 <xref:System.Windows.Forms.HtmlDocument.Body%2A> プロパティ<xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>は、ユーザー入力<xref:System.Windows.Forms.HtmlElement>フォーカスのある HTML ページ上の要素のを提供します。 HTML ページ内のすべての要素に名前を付けることができます。コレクション<xref:System.Windows.Forms.HtmlDocument.All%2A>では、インデックスと<xref:System.Windows.Forms.HtmlElement>して名前を使用して、各にアクセスできます。 <xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A>は、 <xref:System.Windows.Forms.HtmlElementCollection> <xref:System.Windows.Forms.HtmlElement> や `TABLE` など、特定の HTML タグ名を持つすべてのオブジェクトのを返します。 `DIV` <xref:System.Windows.Forms.HtmlDocument.GetElementById%2A>は、指定し<xref:System.Windows.Forms.HtmlElement>た一意の ID に対応する1つのを返します。 <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A>は、 <xref:System.Windows.Forms.HtmlElement>指定されたマウスポインター座標で画面に表示されるを返します。  
  
 また、コレクション<xref:System.Windows.Forms.HtmlDocument.Forms%2A>および<xref:System.Windows.Forms.HtmlDocument.Images%2A>コレクションを使用して、ユーザー入力フォームとグラフィックスを表す要素を反復処理することもできます。  
  
 <xref:System.Windows.Forms.HtmlDocument>は`IHTMLDocument` `IHTMLDocument2` 、Internet `IHTMLDocument4` Explorer の DHTML DOM によって実装されているアンマネージインターフェイス (、、、 ) に基づいています。 `IHTMLDocument3` これらのアンマネージインターフェイスで最も頻繁に使用されるプロパティとメソッド<xref:System.Windows.Forms.HtmlDocument>のみがによって公開されます。 <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A>プロパティを使用して、他のすべてのプロパティおよびメソッドに直接アクセスできます。このプロパティは、必要なアンマネージインターフェイスポインターにキャストできます。  
  
 HTML ドキュメントには、 <xref:System.Windows.Forms.WebBrowser>コントロール内の異なるウィンドウであるフレームを含めることができます。 各フレームには、独自の HTML ページが表示されます。 コレクションは、プロパティを<xref:System.Windows.Forms.HtmlDocument.Window%2A>使用して取得できます。 <xref:System.Windows.Forms.HtmlWindow.Frames%2A> また、 <xref:System.Windows.Forms.HtmlDocument.Window%2A>プロパティを使用して、表示されるページのサイズを変更したり、ドキュメントをスクロールしたり、警告やプロンプトをユーザーに表示したりすることもできます。  
  
 <xref:System.Windows.Forms.HtmlDocument>HTML ページをホストするときに処理することが予想される最も一般的なイベントを公開します。 インターフェイスによって直接公開されていないイベントの場合は、を使用<xref:System.Windows.Forms.HtmlDocument.AttachEventHandler%2A>してイベントのハンドラーを追加できます。  
  
 HTML ファイルには`SCRIPT` 、JScript や VBScript など、アクティブなスクリプト言語のいずれかで記述されたコードをカプセル化するタグを含めることができます。 メソッド<xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A>は、 `SCRIPT`タグで定義されたプロパティとメソッドを実行するためのを提供します。  
  
> [!NOTE]
>  のプロパティ、メソッド、およびイベント<xref:System.Windows.Forms.HtmlDocument>のほとんどは、アンマネージ DOM の場合と同じ名前を保持してい[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]ますが、との一貫性を保つために一部が変更されています。  
  
   
  
## Examples  
 次のコード例では、Northwind データベースのデータを使用`HTML TABLE`して<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>、を使用して動的にを作成します。 また、`TD` `TR`メソッドも使用されます。まず、セル (要素) を行 (要素) に追加し、次にテーブルに行を追加して、最後にテーブルを現在のドキュメントの末尾に追加します。 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> このコード例では、アプリケーションにと<xref:System.Windows.Forms.WebBrowser>いう名前`WebBrowser1`のコントロールが必要です。 このコードは、ドキュメントが読み込まれた後に呼び出す必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/Document">ドキュメント-Web Api</related>
    <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752574(v=vs.85)">IHTMLDocument2 インターフェイス</related>
  </Docs>
  <Members>
    <Member MemberName="ActiveElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement ActiveElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement ActiveElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ActiveElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ ActiveElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ActiveElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.ActiveElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在ユーザーの入力フォーカスがある <see cref="T:System.Windows.Forms.HtmlElement" /> を提供します。</summary>
        <value>現在ユーザーの入力フォーカスがある <see cref="T:System.Windows.Forms.HtmlElement" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドキュメントにフォーカスがあり、ドキュメントの要素がフォーカスされていない場合<xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>は、 `<BODY>`タグに対応する要素を返します。  
  
 ドキュメントにフォーカスがない場合は、 <xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>を`null`返します。  
  
 入力フォーカスを持つ現在`TD`の要素が HTML `TABLE`タグ内のセル () である<xref:System.Windows.Forms.HtmlDocument.ActiveElement%2A>場合、は`TABLE`要素を含む要素を返します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752581(v=vs.85)">activeElement プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="ActiveLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ActiveLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ActiveLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ActiveLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ActiveLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ActiveLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ActiveLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがハイパーリンクをクリックしたときのハイパーリンクの <see cref="T:System.Drawing.Color" /> を取得または設定します。</summary>
        <value>アクティブなリンクの <see cref="T:System.Drawing.Color" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 リンクは、ユーザーがクリックしたときにアクティブになります。 ナビゲーションの前にリンクの色を変更するには、このプロパティを変更します。  
  
 の<xref:System.Drawing.Color> `Alpha`型は値をサポートしていますが、HTML DOM ではサポートされていません。 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] したがって`Alpha` 、このプロパティに割り当てられている場合、による影響はありません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752564.aspx">alinkColor プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="All">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection All { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection All" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.All" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property All As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ All { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.All : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.All" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.HtmlElementCollection" /> のインスタンスを取得します。これは、ドキュメントのすべての <see cref="T:System.Windows.Forms.HtmlElement" /> オブジェクトを格納します。</summary>
        <value>ドキュメント内のすべての要素の <see cref="T:System.Windows.Forms.HtmlElementCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コレクション<xref:System.Windows.Forms.HtmlDocument.All%2A>は、ドキュメントツリー内の位置に関係なく、HTML ドキュメント内の任意の要素へのランダムアクセスを提供します。 名前、ID、またはインデックスを使用して HTML ドキュメント内の任意の要素にアクセスするには、これを使用します。 また、ドキュメント内のすべての要素を反復処理することもできます。  
  
 `HEAD` や `TITLE` などの一部の要素には、名前が関連付けられていません。 他のすべての要素の名前は、HTML ファイルの作成者によって割り当てられた場合のみになります。 名前のない要素には、ID またはインデックスを使用してアクセスできます。  
  
 要素を<xref:System.Windows.Forms.HtmlDocument.All%2A>コレクションに直接追加することはできません。これは、 `HTML`タグの外側にある HTML ファイル内のすべての要素が親要素を持つ必要があるためです。 ツリーに新しい要素を<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>追加する<xref:System.Windows.Forms.HtmlElement>には、のメソッドまたはプロパティを使用します。 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>  
  
   
  
## Examples  
 次のコード例では、ドキュメント内のすべての要素を反復`Enabled=True`処理し、を設定して、ドキュメントの読み込み中にユーザーが入力できないように、既定で無効になっている可能性のあるすべての要素を有効にします。 このコード例では、アプリケーションにと<xref:System.Windows.Forms.WebBrowser>いう名前`WebBrowser1`のコントロールが含まれている必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.HtmlDocument#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752582.aspx">すべてのプロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">処理するイベントの名前。</param>
        <param name="eventHandler">イベントを処理するマネージド コード。</param>
        <summary>指定した HTML DOM イベントのイベント ハンドラーを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドキュメントの読み込みが完了するまで、ドキュメントまたはそのオブジェクトの1つにイベントをアタッチしないでください。 このメソッドを呼び出す必要がある最も早い<xref:System.Windows.Forms.WebBrowser.DocumentCompleted>方法は、 <xref:System.Windows.Forms.WebBrowser>コントロールのイベントです。  
  
 このメソッドを使用すると、によって公開されて<xref:System.Windows.Forms.HtmlDocument>いないアンマネージ DOM イベントにハンドラーをアタッチできます。 使用できるアンマネージ DOM イベントの詳細については、「[マネージ HTML ドキュメントオブジェクトモデルの非公開メンバーへのアクセス](~/docs/framework/winforms/controls/accessing-unexposed-members-on-the-managed-html-document-object-model.md)」および「IHTMLDocument インターフェイス: [IHTMLDocument](https://go.microsoft.com/fwlink/?LinkId=104882)、 [IHTMLDocument2](https://go.microsoft.com/fwlink/?LinkId=104884)、 [IHTMLDocument3](https://go.microsoft.com/fwlink/?LinkId=104886)」を参照してください。[IHTMLDocument4](https://go.microsoft.com/fwlink/?LinkId=104887)、 [IHTMLDocument5](https://go.microsoft.com/fwlink/?LinkId=104888)。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752535.aspx">attachEvent メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>HTML ドキュメントの背景色を取得または設定します。</summary>
        <value>ドキュメントの背景の <see cref="T:System.Drawing.Color" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.BackColor%2A>他の要素が画面の領域を占有していない場合は、が表示されます。  
  
 の<xref:System.Drawing.Color> `Alpha`型は値をサポートしていますが、HTML DOM ではサポートされていません。 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] したがって`Alpha` 、このプロパティに割り当てられている場合、による影響はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752565.aspx">bgColor プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Body">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement Body { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement Body" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Body" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Body As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ Body { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Body : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlDocument.Body" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><c>BODY</c> タグの <see cref="T:System.Windows.Forms.HtmlElement" /> を取得します。</summary>
        <value><c>BODY タグ</c>の<see cref="T:System.Windows.Forms.HtmlElement" />オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML ドキュメントは、次の2つの主要なセクションに分割されます。  
  
-   `HEAD`。ドキュメントのタイトル、任意のドキュメントメタデータ、および`SCRIPT`要素が含まれています。  
  
-   `BODY`。ドキュメントの画面上の外観に関係するすべての要素が含まれています。  
  
 に同等`Head`の<xref:System.Windows.Forms.HtmlDocument>プロパティはありません。 `HEAD`要素を取得するには<xref:System.Windows.Forms.HtmlDocument.GetElementsByTagName%2A>、を使用します。  
  
   
  
## Examples  
 次のコード例では、 `DIV` <xref:System.Windows.Forms.HtmlElement.AppendChild%2A>メソッドを使用して新しい要素を作成し、ドキュメントの末尾に追加します。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlDocument#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752585.aspx">body プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Click : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがドキュメント内の任意の場所をクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、ドキュメントをクリックして要素を検索し、 <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A>を使用して要素を Web ページの上部に揃えます。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752611.aspx">onclick イベント</related>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuShowing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler ContextMenuShowing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.ContextMenuShowing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuShowing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ ContextMenuShowing;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.ContextMenuShowing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがドキュメントのコンテキスト メニューの表示を要求したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、ドキュメントまたはドキュメント内の要素でマウスを右クリックすると、要素に固有の既定のコンテキストメニューが表示されます。 このイベントを使用して、コンテキストメニューの表示をキャンセルし、独自のメニューを表示します。  
  
   
  
## Examples  
 <xref:System.Windows.Forms.HtmlDocument.ContextMenuShowing>イベントをキャプチャし、それを使用してを<xref:System.Windows.Forms.ContextMenuStrip>表示するコード例を次に示します。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms536914.aspx">oncontextmenu イベント</related>
      </Docs>
    </Member>
    <Member MemberName="Cookie">
      <MemberSignature Language="C#" Value="public string Cookie { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Cookie" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberSignature Language="VB.NET" Value="Public Property Cookie As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Cookie { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cookie : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Cookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このドキュメントに関連付けられている HTTP クッキーを取得または設定します。</summary>
        <value>セミコロンで各クッキーを区切った、クッキーのリストを格納する <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.Cookie%2A> の <xref:System.Windows.Forms.HtmlDocument> プロパティは、Web ページに設定されているすべての cookie を公開します。  
  
 *Cookie*は、特定の Web ページに関連付けられている任意の名前と値のペアです。 Web 開発者は、cookie を使用して、ユーザーが Web サイトにアクセスしたり、Web サイトに戻ったりするタイミングを追跡します。 Cookie は、cookie あると呼ばれる複数の部分で構成され、次の項目を決定します。  
  
-   クッキーが適用されるドキュメントセット。ドメインとパス。  
  
-   クッキーの名前と値。  
  
-   クッキーの有効期限。  
  
-   セキュリティで保護された接続を使用してのみ、cookie を送信できるかどうかを指定します。  
  
 プロパティ<xref:System.Windows.Forms.HtmlDocument.Cookie%2A>には、複数の cookie を含めることができます。  
  
 プロパティは<xref:System.Windows.Forms.HtmlDocument.Cookie%2A> 、一度に1つの cookie を設定するためにのみ使用できます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752569.aspx">cookie プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="CreateElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement CreateElement (string elementTag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement CreateElement(string elementTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.CreateElement(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateElement (elementTag As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ CreateElement(System::String ^ elementTag);" />
      <MemberSignature Language="F#" Value="member this.CreateElement : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.CreateElement elementTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementTag">作成する HTML 要素の名前。</param>
        <summary>指定した HTML タグの種類の新しい <see langword="HtmlElement" /> を作成します。</summary>
        <returns>指定したタグの種類の新しい要素。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `elementTag`または`FRAME` `IFRAME`を除く、Internet Explorer でサポートされている HTML タグのいずれかを指定できます。  
  
 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>現在のドキュメントツリーにアタッチされていない要素を返します。 要素をドキュメントに追加するに<xref:System.Windows.Forms.HtmlElement.InsertAdjacentElement%2A>は、メソッドまたは<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>メソッドを使用します。  
  
 このメソッドは、コントロールの<xref:System.Windows.Forms.WebBrowser> <xref:System.Windows.Forms.WebBrowser.DocumentText%2A> **[ソースの表示]** コンテキストメニューコマンドまたは<xref:System.Windows.Forms.WebBrowser>コントロールのプロパティと<xref:System.Windows.Forms.WebBrowser.DocumentStream%2A>プロパティを使用する場合、既存のドキュメントのソースコードの状態には影響しません。  
  
 を使用<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>して新しい要素を作成する場合、などの特定の`Name`プロパティを設定することはできません。 Name 属性を設定する必要がある場合は、ドキュメント内の別のオブジェクト<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>のプロパティに HTML として割り当てます。  
  
   
  
## Examples  
 次のコード例では、Northwind データベースのデータを使用して、 <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A>を使用して HTML テーブルを作成します。 また、`TD` `TR`メソッドも使用されます。まず、セル (要素) を行 (要素) に追加し、次にテーブルに行を追加して、最後にテーブルを現在のドキュメントの末尾に追加します。 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> このコード例では、アプリケーションにと<xref:System.Windows.Forms.WebBrowser>いう`WebBrowser1`コントロールが必要です。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlDocument#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752570.aspx">createElement メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="DefaultEncoding">
      <MemberSignature Language="C#" Value="public string DefaultEncoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultEncoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DefaultEncoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultEncoding { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultEncoding : string" Usage="System.Windows.Forms.HtmlDocument.DefaultEncoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のドキュメントに既定で使用されるエンコーディングを取得します。</summary>
        <value>ページが最初に表示されたときにブラウザーが使用するエンコーディングを表す <see cref="T:System.String" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定のエンコーディングは、ページが最初に読み込まれたときに、マネージ HTML ドキュメントオブジェクトモデル (DOM) が使用しようとするエンコーディングです。 このエンコードは、Internet Explorer の**エンコード**設定から、またはページ内`META`に埋め込まれたタグから派生します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms537500.aspx">文字セット認識</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ms533714.aspx">defaultCharset プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlDocument.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">処理を終了するイベントの名前。</param>
        <param name="eventHandler">イベントを処理するマネージド コード。</param>
        <summary>HTML DOM の指定したイベントからイベント ハンドラーを削除します。</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752539.aspx">detachEvent メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public string Domain { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Domain" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Domain" />
      <MemberSignature Language="VB.NET" Value="Public Property Domain As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Domain { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Domain : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>セキュリティのためにこのドキュメントのドメインを記述する文字列を取得または設定します。</summary>
        <value>有効なドメイン。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、異なるフレーム内の2つの Web ページは、script を使用して互いのコンテンツにアクセスできません。さら `www.microsoft.com` に、このインスタンスでは、異なるドメインと見なされます。 `docs.microsoft.com` 同じトップレベルドメインのページに対してクロスフレームスクリプトを有効にするには、 <xref:System.Windows.Forms.HtmlDocument.Domain%2A>プロパティに新しい値を割り当てることができます。 前の URL の例では<xref:System.Windows.Forms.HtmlDocument.Domain%2A> 、を microsoft.com に設定すると、両方のページが互いに通信できるようになります。  
  
 プロパティに割り当てら<xref:System.Windows.Forms.HtmlDocument.Domain%2A>れた文字列は、有効なトップレベルドメインである必要があります。 前の URL の例では、を<xref:System.Windows.Forms.HtmlDocument.Domain%2A> microsoft.com に設定できますが、.com には設定できません。これにより、インターネット上の任意のページでページの内容のスクリプトを作成できます。  
  
 プロパティを使用し<xref:System.Windows.Forms.HtmlDocument.Domain%2A>て、2つの異なるプロトコルを使用してアクセスされるページに対してクロスフレームスクリプトを有効にすることはできません。 ページ内の1つのフレームが Web サーバー (http://プロトコル) から取得され、別のフレームがファイルシステム (file://) プロトコルに由来する場合、 <xref:System.Windows.Forms.HtmlDocument.Domain%2A>プロパティの値に関係なく相互に通信することはできません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><c>Domain</c> プロパティの引数は、ドメイン ネーム システム (DNS: Domain Name System) 規則に従った有効なドメイン名である必要があります。</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752575.aspx">ドメインプロパティ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ms533028.aspx">クロスフレームスクリプトとセキュリティについて</related>
        <related type="Article" href="https://msdn.microsoft.com/library/ms535250.aspx">frame オブジェクト</related>
      </Docs>
    </Member>
    <Member MemberName="DomDocument">
      <MemberSignature Language="C#" Value="public object DomDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomDocument" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomDocument As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomDocument { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomDocument : obj" Usage="System.Windows.Forms.HtmlDocument.DomDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.HtmlDocument" /> のアンマネージ インターフェイスへのポインターを取得します。</summary>
        <value>アンマネージドキュメントへの<c>IDispatch</c>ポインターを表す。 <see cref="T:System.Object" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument>は、COM で記述された Internet Explorer ドキュメントオブジェクトモデル (DOM) のラッパーです。 など、基になる COM インターフェイスの非公開プロパティやメソッドにアクセスする必要が`IHTMLDocument2`ある場合は、このオブジェクトを使用してクエリを実行できます。  
  
 アンマネージインターフェイスを使用するには、MSHTML ライブラリ (mshtml) をアプリケーションにインポートします。 ただし、 `IDispatch::Invoke`メソッドを使用して、非公開のプロパティとメソッドを実行することもできます。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.HtmlDocument.DomDocument%2A> 、を`IHTMLDocument2`ポインターにキャストし、 `lastModified`プロパティの値を表示します。これは、ドキュメントの所有者が最後にコンテンツを更新した日時を示します。 このコード例では、という<xref:System.Windows.Forms.Button>名前`Button6`のをフォームに持っている必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlDocument#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アクセス<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />許可の場合。 関連付けられた列挙型:<see cref="T:System.Security.Permissions.SecurityPermissionFlag" /></permission>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/windows/internet-explorer/ie-developer/platform-apis/aa752574(v=vs.85)">IHTMLDocument2 インターフェイス</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=128638">MSHTML リファレンス</related>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public string Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Encoding { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このドキュメントの文字エンコーディングを取得または設定します。</summary>
        <value>現在の文字エンコーディングを表す <see cref="T:System.String" />。</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms537500.aspx">文字セット認識</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752566.aspx">charset プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlDocument.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">テストするオブジェクト。</param>
        <summary>指定したオブジェクトと現在のオブジェクトとを比較し、等しいかどうかをテストします。</summary>
        <returns>オブジェクトが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecCommand">
      <MemberSignature Language="C#" Value="public void ExecCommand (string command, bool showUI, object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ExecCommand(string command, bool showUI, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.ExecCommand(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ExecCommand (command As String, showUI As Boolean, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ExecCommand(System::String ^ command, bool showUI, System::Object ^ value);" />
      <MemberSignature Language="F#" Value="member this.ExecCommand : string * bool * obj -&gt; unit" Usage="htmlDocument.ExecCommand (command, showUI, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="command" Type="System.String" />
        <Parameter Name="showUI" Type="System.Boolean" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="command">実行するコマンド名です。</param>
        <param name="showUI">コマンド固有のダイアログ ボックスまたはメッセージ ボックスをユーザーに表示するかどうか。</param>
        <param name="value">コマンドを使用して代入する値。 すべてのコマンドに適用されるわけではありません。</param>
        <summary>ドキュメントに対して指定したコマンドを実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A>は、で<xref:System.Windows.Forms.HtmlDocument>公開されているメソッドがない、多数のコマンドから成る配列を公開します。 を<xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A>使用すると、新しい HTML 要素の挿入、テキストの選択と書式設定、キャッシュされた認証資格情報のクリアを行うことができます。 コマンドの完全な一覧については、「[コマンド識別子](https://go.microsoft.com/fwlink/?LinkId=198814)」を参照してください。  
  
> [!NOTE]
>  Copy などの特定のコマンドには戻り値があります。 の現在の<xref:System.Windows.Forms.HtmlDocument.ExecCommand%2A>実装では、呼び出しから戻り値を取得することはできません。 戻り値を取得するには、代わりに、 <xref:System.Windows.Forms.HtmlDocument.DomDocument%2A>参照に対応するアンマネージメソッドを使用します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms536419.aspx">execCommand メソッド</related>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=198814">コマンド識別子</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlDocument.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ユーザーの入力フォーカスを現在のドキュメントに設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 現在<xref:System.Windows.Forms.HtmlDocument.Focus%2A>コントロールにフォーカスがない<xref:System.Windows.Forms.WebBrowser>場合、を呼び出すと、コントロールにフォーカスが設定されます。 ドキュメントがの`FRAME`内部でホストされている場合、このメソッドは`FRAME`内`FRAMESET`のにフォーカスを移します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">フォームにフォーカスを設定する権限。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /> 関連付けられた列挙型:<see cref="T:System.Security.Permissions.UIPermissionWindow" /></permission>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752527.aspx">フォーカス方法</related>
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Focused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.HtmlDocument.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメントにユーザーの入力フォーカスがあるかどうかを示す値を取得します。</summary>
        <value>ドキュメントにフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.Focus" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.Focusing" />
        <altmember cref="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      </Docs>
    </Member>
    <Member MemberName="Focusing">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Focusing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Focusing" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Focusing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Focusing As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Focusing;" />
      <MemberSignature Language="F#" Value="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Focusing : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメントがフォーカスを得る前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.Focusing>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.HtmlDocument> `HtmlDocument1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.Focusing>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#424](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#424)]
 [!code-vb[System.Windows.Forms.EventExamples#424](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#424)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752520.aspx">onfocusin イベント</related>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメントのテキストの色を取得または設定します。</summary>
        <value>ドキュメントのテキストの色。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Drawing.Color> <xref:System.Drawing.Color>の型は値をサポートしていますが、HTML DOM ではサポートされていません。 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]  `Alpha` したがって`Alpha` 、このプロパティに割り当てられている場合、による影響はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752580.aspx">fgColor プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Forms">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Forms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Forms" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Forms" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Forms As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Forms { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Forms : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Forms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメント内のすべての <c>&lt;FORM&gt;</c> 要素のコレクションを取得します。</summary>
        <value>ドキュメント内の<c>&lt;フォーム &gt;</c>要素の。 <see cref="T:System.Windows.Forms.HtmlElementCollection" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 HTML ドキュメントには、データをサーバー `FORM`に送信するための入力フィールドを持つ1つ以上の要素が含まれている場合があります。  
  
 を`FORM` <xref:System.Windows.Forms.HtmlElement.InvokeMember%2A>取得し、メソッドを使用してその`Submit`メソッドを呼び出すことによって、をプログラムで送信できます。 <xref:System.Windows.Forms.HtmlElement>  
  
 新しい`FORM`をドキュメントに追加するには、新しい`FORM`タグを文字列として作成<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>し、それを<xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> HTML DOM に追加した要素のプロパティに割り当てるか、またはメソッドを使用してプロパティを設定します。<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>を使用 <xref:System.Windows.Forms.HtmlElement.AppendChild%2A> して、既存の要素の子として追加します。  
  
   
  
## Examples  
 次のコード例では、Web ページ`Form`上のすべての要素を反復処理し、すべてのユーザー入力をクリアして、フォームを既定値に戻します。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#4)]
 [!code-vb[System.Windows.Forms.HtmlDocument#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752591.aspx">forms プロパティ</related>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752432.aspx">IHTMLFormElement インターフェイス</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementById">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementById (id As String) As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="member this.GetElementById : string -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">取得する要素の ID 属性。</param>
        <summary>要素の <c>ID</c> 属性を検索キーとして使用して、1 つの <see cref="T:System.Windows.Forms.HtmlElement" /> を取得します。</summary>
        <returns>指定した値と同じ <c>ID</c> 属性を持つ最初のオブジェクト、または <see langword="null" /> が見つからない場合は <paramref name="id" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同じ ID 値を持つ複数の要素がドキュメント内に存在する<xref:System.Windows.Forms.HtmlDocument.GetElementById%2A>場合、は最初に見つかった要素を返します。  
  
   
  
## Examples  
 次のコード例では、 `TABLE`ドキュメントからという名前のを取得し、行数をカウントして、Web ページに結果を表示します。 このコード例では、という<xref:System.Windows.Forms.WebBrowser>名前`WebBrowser1`のコントロールがプロジェクトにあり、 `ID`属性が`Table1`で`TABLE`ある Web ページを読み込んでいる必要があります。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlDocument#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752543.aspx">Document.getelementbyid メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementFromPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement GetElementFromPoint (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElement GetElementFromPoint(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElement ^ GetElementFromPoint(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.GetElementFromPoint : System.Drawing.Point -&gt; System.Windows.Forms.HtmlElement" Usage="htmlDocument.GetElementFromPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">ドキュメントの左上隅を基準とした、画面上の要素の (x,y) 位置。</param>
        <summary>指定されたクライアント座標にある HTML 要素を取得します。</summary>
        <returns>ドキュメント内の指定した画面位置にある <see cref="T:System.Windows.Forms.HtmlElement" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.GetElementFromPoint%2A>クライアント座標を使用します。この座標では、ドキュメントの左上隅に値 (0, 0) が割り当てられます。 カーソルの現在位置のクライアント座標は、 <xref:System.Windows.Forms.HtmlWindow.Position%2A>プロパティを使用して取得できます。  
  
   
  
## Examples  
 次のコード例では、ドキュメントをクリックして要素を検索し、 <xref:System.Windows.Forms.HtmlElement.ScrollIntoView%2A>を使用して要素を Web ページの上部に揃えます。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#7)]
 [!code-vb[System.Windows.Forms.HtmlDocument#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752576.aspx">elementFromPoint メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="GetElementsByTagName">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection GetElementsByTagName (string tagName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlElementCollection GetElementsByTagName(string tagName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetElementsByTagName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementsByTagName (tagName As String) As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlElementCollection ^ GetElementsByTagName(System::String ^ tagName);" />
      <MemberSignature Language="F#" Value="member this.GetElementsByTagName : string -&gt; System.Windows.Forms.HtmlElementCollection" Usage="htmlDocument.GetElementsByTagName tagName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagName">取得する <see cref="T:System.Windows.Forms.HtmlElement" /> オブジェクトの HTML タグの名前。</param>
        <summary>指定した HTML タグを持つ要素のコレクションを取得します。</summary>
        <returns>タグ名が <paramref name="tagName" /> 引数と同じである要素のコレクション。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 多くの場合、HTML `META`ページはタグを使用して、ドキュメントに関する任意の情報を埋め込みます。 次の html コード例では、html `META`ドキュメント内のすべてのタグを取得`META`し、という`Description`名前のタグを検索して、ユーザーに表示します。 このコード例では、アプリケーションにと<xref:System.Windows.Forms.WebBrowser>いう名前`WebBrowser1`のコントロールが必要です。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#6)]
 [!code-vb[System.Windows.Forms.HtmlDocument#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752545.aspx">getElementsByTagName メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlDocument.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このオブジェクトのハッシュ コードを取得します。</summary>
        <returns>このオブジェクトのインメモリ ハッシュを表す <see cref="T:System.Int32" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Images { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Images" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Images" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Images As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Images { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Images : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Images" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメント内のすべてのイメージ タグのコレクションを取得します。</summary>
        <value>ドキュメント内の IMG タグごとに 1 つある <see cref="T:System.Windows.Forms.HtmlElement" /> オブジェクトのコレクションです。 要素は、格納されている順序でコレクションから返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.Images%2A>オブジェクトの<xref:System.Windows.Forms.HtmlElement>コレクションを返します。 `ALT`によっ`SRC`て直接 <xref:System.Windows.Forms.HtmlElement.GetAttribute%2A> 公開されない属性 (やなど) にアクセスするには、メソッドを使用します。 <xref:System.Windows.Forms.HtmlElement>  
  
 新しいイメージをドキュメントに追加する`IMG`には、新しいタグを文字列として作成し、それを HTML <xref:System.Windows.Forms.HtmlElement.InnerHtml%2A> <xref:System.Windows.Forms.HtmlDocument.CreateElement%2A> DOM に追加した要素のプロパティに割り当てます。または、メソッドを使用して<xref:System.Windows.Forms.HtmlElement.SetAttribute%2A>プロパティを設定し、として追加します。を使用する<xref:System.Windows.Forms.HtmlElement.AppendChild%2A>既存の要素の子。  
  
   
  
## Examples  
 次のコード例では`ALT` 、ドキュメント内のすべてのイメージの属性を調べ、値が`ALT`まだ設定されていない場合は既定の属性を設定します。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlDocument#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752593.aspx">images プロパティ</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeScript">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>HTML ページで定義されたアクティブ スクリプト関数を実行します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、Web ページ内のスクリプトの内容を実行します。 このコード例では、次の Web ページが読み込まれている必要があります。  
  
```  
<HTML>  
<SCRIPT>  
function test(name, address) {  
window.alert("Name is " + name + "; address is " + address);  
}  
</SCRIPT>  
  
<BODY>  
</BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string -&gt; obj" Usage="htmlDocument.InvokeScript scriptName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">呼び出されるスクリプト メソッドの名前。</param>
        <summary>HTML ページで定義されたアクティブ スクリプト関数を実行します。</summary>
        <returns>アクティブ スクリプト呼び出しによって返されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって<xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A>返されるオブジェクトの基になる型は異なります。 呼び出されたアクティブスクリプト関数が、文字列や整数などのスカラーデータを返す場合は、文字列として返されます。 JScript または VBScript の`new`演算子を使用して作成されたオブジェクトなど、スクリプトベースのオブジェクトが返された場合は、型`Object`になります。 (を呼び出し<xref:System.Object.GetType%2A> 、を使用<xref:System.Type.InvokeMember%2A>して、このようなオブジェクトに対して呼び出しを行うことができます)。`DIV`または`Object`などの HTML DOM 要素を返す場合は、型になります。 MSHTML にプロジェクト参照を追加した場合は、になります。 `TABLE`ただし、DLL は、特定のアンマネージ DOM 型にキャストされます。  
  
 JScript や VBScript など、ユーザーのコンピューターにインストールされている任意のアクティブスクリプト言語で記述された任意の関数を呼び出すことができます。  
  
 <xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A>ユーザーが Internet Explorer でスクリプトの実行を明示的に無効にした場合、または Web ページの現在のセキュリティ構成で許可されていない場合、は何も実行しません。  
  
   
  
## Examples  
 次のコード例では、Web ページ内のスクリプトの内容を実行します。 このコード例では、アプリケーション<xref:System.Windows.Forms.WebBrowser>にがという名前`WebBrowser1`で、次の Web ページが読み込まれている必要があります。  
  
```  
<HTML>  
  
    <HEAD>  
        <TITLE>Invoke Script Sample</TITLE>  
  
        <SCRIPT>  
            function MyObject() {  
                this.Data = "Data for my private object.";  
            }  
            // Return a string.  
            function test() {  
                return("This is a test.");  
            }  
            // Return a JScript object.  
            function testJScriptObject() {  
                return(new(MyObject));  
            }  
            // Return a DOM element.  
            function testElement() {  
                return(div1);  
            }  
        </SCRIPT>  
    </HEAD>  
  
    <BODY>  
  
        <DIV id="div1">  
        </DIV>  
  
    </BODY>  
  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#12)]
 [!code-vb[System.Windows.Forms.HtmlDocument#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeScript">
      <MemberSignature Language="C#" Value="public object InvokeScript (string scriptName, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object InvokeScript(string scriptName, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.InvokeScript(System.String,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function InvokeScript (scriptName As String, args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeScript(System::String ^ scriptName, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="member this.InvokeScript : string * obj[] -&gt; obj" Usage="htmlDocument.InvokeScript (scriptName, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="scriptName">呼び出されるスクリプト メソッドの名前。</param>
        <param name="args">スクリプト メソッドに渡す引数。</param>
        <summary>HTML ページで定義されたアクティブ スクリプト関数を実行します。</summary>
        <returns>アクティブ スクリプト呼び出しによって返されたオブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって<xref:System.Windows.Forms.HtmlDocument.InvokeScript%2A>返されるオブジェクトの基になる型は異なります。 呼び出されたアクティブスクリプト関数が、文字列や整数などのスカラーデータを返す場合は、文字列として返されます。 JScript または VBScript の`new`演算子を使用して作成されたオブジェクトなど、スクリプトベースのオブジェクトが返された場合は、型`Object`になります。 (を呼び出し<xref:System.Object.GetType%2A> 、を使用<xref:System.Type.InvokeMember%2A>して、このようなオブジェクトに対して呼び出しを行うことができます)。`DIV`または`Object`などの HTML DOM 要素を返す場合は、型になります。 MSHTML にプロジェクト参照を追加した場合は、になります。 `TABLE`ただし、DLL は、特定のアンマネージ DOM 型にキャストされます。  
  
 JScript や VBScript など、ユーザーのコンピューターにインストールされている任意のアクティブスクリプト言語で記述された任意の関数を呼び出すことができます。  
  
 ユーザーが Internet Explorer でスクリプトの実行を明示的に無効にした場合、または Web ページの現在のセキュリティ構成で許可されていない場合、このメソッドは何も実行しません。  
  
   
  
## Examples  
 次のコード例では、Web ページ内のスクリプトの内容を実行します。 このコード例では、アプリケーション<xref:System.Windows.Forms.WebBrowser>にがという名前`WebBrowser1`で、次の Web ページが読み込まれている必要があります。  
  
```  
<HTML>  
    <SCRIPT>  
        function test(name, address) {  
            window.alert("Name is " + name + "; address is " + address);  
        }  
    </SCRIPT>  
  
    <BODY>  
    </BODY>  
</HTML>  
  
```  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlDocument#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color LinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color LinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property LinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color LinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.LinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.LinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ハイパーリンクの色を取得または設定します。</summary>
        <value>現在のドキュメント内のハイパーリンクの色。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の<xref:System.Drawing.Color> `Alpha`型は値をサポートしていますが、HTML DOM ではサポートされていません。 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] したがって`Alpha` 、このプロパティに割り当てられている場合、による影響はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752608.aspx">linkColor プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Links">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElementCollection Links { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElementCollection Links" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Links" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Links As HtmlElementCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElementCollection ^ Links { System::Windows::Forms::HtmlElementCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Links : System.Windows.Forms.HtmlElementCollection" Usage="System.Windows.Forms.HtmlDocument.Links" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この HTML ドキュメント内のすべてのハイパーリンクのリストを取得します。</summary>
        <value><see cref="T:System.Windows.Forms.HtmlElementCollection" /> オブジェクトの <see cref="T:System.Windows.Forms.HtmlElement" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコレクションには`A`、HTML で、、 `AREA`タグ`LINK`を使用して作成されたすべてのリンクが含まれます。  
  
 この<xref:System.Windows.Forms.HtmlElement>コレクションに含まれるオブジェクトは、アン`IHTMLLinkElement`マネージインターフェイスをカプセル化します。 基になるインターフェイスのプロパティに安全にアクセスするに<xref:System.Windows.Forms.HtmlElement.GetAttribute%2A>は、メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752595.aspx">links プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="LosingFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LosingFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LosingFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.LosingFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LosingFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LosingFocus;" />
      <MemberSignature Language="F#" Value="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LosingFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールからフォーカスが失われるときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.LosingFocus>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.HtmlDocument> `HtmlDocument1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.LosingFocus>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#425](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#425)]
 [!code-vb[System.Windows.Forms.EventExamples#425](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#425)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752521.aspx">onfocusout イベント</related>
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseDown : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがマウスの左ボタンをクリックしたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントは、イベントの<xref:System.Windows.Forms.HtmlDocument.Click>前に発生します。 <xref:System.Windows.Forms.HtmlDocument.MouseDown>  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseDown>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポート<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>する<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>には、メッセージをに置き換える<xref:System.Windows.Forms.TextBox>か、または複数行に追加することを検討してください。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.HtmlDocument> `HtmlDocument1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseDown>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#426](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#426)]
 [!code-vb[System.Windows.Forms.EventExamples#426](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#426)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752619.aspx">onmousedown イベント</related>
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseLeave : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスがドキュメント上から外れた時点で発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseLeave>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポート<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>する<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>には、メッセージをに置き換える<xref:System.Windows.Forms.TextBox>か、または複数行に追加することを検討してください。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.HtmlDocument> `HtmlDocument1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseLeave>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#427](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#427)]
 [!code-vb[System.Windows.Forms.EventExamples#427](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#427)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/ms536948.aspx">onmouseout イベント</related>
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseMove : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスがドキュメント上を移動すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseMove>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポート<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>する<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>には、メッセージをに置き換える<xref:System.Windows.Forms.TextBox>か、または複数行に追加することを検討してください。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.HtmlDocument> `HtmlDocument1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseMove>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#428](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#428)]
 [!code-vb[System.Windows.Forms.EventExamples#428](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#428)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752620.aspx">onmousemove イベント</related>
      </Docs>
    </Member>
    <Member MemberName="MouseOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseOver As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseOver;" />
      <MemberSignature Language="F#" Value="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseOver : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウスがドキュメント上を移動すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを処理の詳細については[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseOver>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポート<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>する<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>には、メッセージをに置き換える<xref:System.Windows.Forms.TextBox>か、または複数行に追加することを検討してください。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.HtmlDocument> `HtmlDocument1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseOver>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#429](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#429)]
 [!code-vb[System.Windows.Forms.EventExamples#429](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#429)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752622.aspx">onmouseover イベント</related>
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.MouseUp : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがマウスの左ボタンを離したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseUp>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。 複数のイベントまたは頻繁に発生するイベントについてレポート<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>する<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>には、メッセージをに置き換える<xref:System.Windows.Forms.TextBox>か、または複数行に追加することを検討してください。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.HtmlDocument> `HtmlDocument1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.HtmlDocument.MouseUp>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#430](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#430)]
 [!code-vb[System.Windows.Forms.EventExamples#430](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#430)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752623.aspx">onmouseup イベント</related>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Equality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">比較する 1 番目のインスタンス。</param>
        <param name="right">比較する 2 番目のインスタンス。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.HtmlDocument" /> のインスタンスが同じ値を表しているかどうかを示す値を返します。</summary>
        <returns>指定したインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子の同等の方法は次のようになります。<xref:System.Windows.Forms.HtmlDocument.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlDocument left, System.Windows.Forms.HtmlDocument right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlDocument left, class System.Windows.Forms.HtmlDocument right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.op_Inequality(System.Windows.Forms.HtmlDocument,System.Windows.Forms.HtmlDocument)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlDocument, right As HtmlDocument) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlDocument ^ left, System::Windows::Forms::HtmlDocument ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlDocument * System.Windows.Forms.HtmlDocument -&gt; bool" Usage="System.Windows.Forms.HtmlDocument.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlDocument" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlDocument" />
      </Parameters>
      <Docs>
        <param name="left">比較する 1 番目のインスタンス。</param>
        <param name="right">比較する 2 番目のインスタンス。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.HtmlDocument" /> のインスタンスが同じ値を表していないかどうかを示す値を返します。</summary>
        <returns>指定したインスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument OpenNew (bool replaceInHistory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlDocument OpenNew(bool replaceInHistory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (replaceInHistory As Boolean) As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlDocument ^ OpenNew(bool replaceInHistory);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : bool -&gt; System.Windows.Forms.HtmlDocument" Usage="htmlDocument.OpenNew replaceInHistory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="replaceInHistory" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="replaceInHistory">新しいウィンドウの移動によって、DOM の移動履歴内の前の要素が置換されるかどうか。</param>
        <summary><see cref="M:System.Windows.Forms.HtmlDocument.Write(System.String)" /> メソッドと共に使用する新しい <see cref="T:System.Windows.Forms.HtmlDocument" /> を取得します。</summary>
        <returns>書き込み用の新しいドキュメント。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A>は、変数など、関連付けられているすべての状態を含む、以前に読み込まれたドキュメントをクリアします。 で<xref:System.Windows.Forms.WebBrowser>は、ナビゲーションイベントが発生しません。  
  
 <xref:System.Windows.Forms.HtmlDocument.OpenNew%2A>常に現在のウィンドウに新しいドキュメントを作成します。 ドキュメントを新しいウィンドウで開くには、 <xref:System.Windows.Forms.HtmlWindow.Open%2A> <xref:System.Windows.Forms.HtmlWindow>クラスのメソッドを使用します。  
  
   
  
## Examples  
 次のコード例では、 <xref:System.Windows.Forms.HtmlDocument.Write%2A>メソッドを使用して新しいドキュメントを書き込むために DOM を準備します。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752628.aspx">open メソッド</related>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public bool RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Property RightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RightToLeft { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : bool with get, set" Usage="System.Windows.Forms.HtmlDocument.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在のドキュメントでのテキストの方向を取得または設定します。</summary>
        <value>テキストを右から左に描画する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A>は、コードまたは HTML のいずれかで明示的に設定されていない限り、値を持ちません。  
  
 Windows フォームコントロールの<xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> プロパティとは異なり、マネージ HTML DOM では、ラテンテキストの方向には影響 <xref:System.Windows.Forms.HtmlDocument.RightToLeft%2A> しません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752540.aspx">dir プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Stop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Stop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlDocument.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Stop As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Stop;" />
      <MemberSignature Language="F#" Value="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Stop : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>別の Web ページへの移動が中断されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プログラムコードが<xref:System.Windows.Forms.WebBrowser.Stop%2A> <xref:System.Windows.Forms.WebBrowser>コントロールのメソッドを呼び出すと、Web ページの読み込みが停止します。 ネットワークの停止や Web サイトの誤動作によって発生<xref:System.Windows.Forms.HtmlDocument.Stop>するナビゲーションエラーは発生しません。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、 `Stop`イベントが発生したときに Windows フォームアプリケーションのステータスバーをリセットします。 このコード例では、アプリケーションに<xref:System.Windows.Forms.StatusBar>という`StatusBar1`名前のコントロールが必要です。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752561.aspx">onstop イベント</related>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.HtmlDocument.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在の HTML ドキュメント内の <c>&lt;TITLE&gt;</c> タグのテキスト値を取得または設定します。</summary>
        <value>現在のドキュメントのタイトル。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ユーザーが<xref:System.Windows.Forms.HtmlDocument.Title%2A>判読できる名前を使用してドキュメントを識別するには、プロパティを使用します。  
  
 このプロパティへの変更は、 <xref:System.Windows.Forms.WebBrowser.DocumentTitle%2A> <xref:System.Windows.Forms.WebBrowser>コントロールのプロパティにも反映されます。  
  
   
  
## Examples  
 次のコード例では、リンクの場所としてドキュメントの URL を使用し、リンクテキストとしてドキュメントのタイトルを使用して、現在のドキュメントへの HTML ハイパーリンクを作成します。 このコード例では、アプリケーションにと<xref:System.Windows.Forms.WebBrowser>いう名前`WebBrowser1`のコントロールが必要です。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#14)]
 [!code-vb[System.Windows.Forms.HtmlDocument#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#14)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.WebBrowser.DocumentTitle" />
        <altmember cref="T:System.Windows.Forms.WebBrowser" />
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlDocument.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このドキュメントの場所を記述する URL を取得します。</summary>
        <value>このドキュメントの URL を表す <see cref="T:System.Uri" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは読み取り専用です。 新しいドキュメントに移動するには、 <xref:System.Windows.Forms.WebBrowser.Url%2A> <xref:System.Windows.Forms.WebBrowser>コントロールのプロパティを使用します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisitedLinkColor">
      <MemberSignature Language="C#" Value="public System.Drawing.Color VisitedLinkColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color VisitedLinkColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberSignature Language="VB.NET" Value="Public Property VisitedLinkColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color VisitedLinkColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.VisitedLinkColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.HtmlDocument.VisitedLinkColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが既にアクセスした HTML ページへのリンクの色を取得または設定します。</summary>
        <value>アクセスしたリンクの色。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 の`Color` `Alpha`型は値をサポートしていますが、HTML DOM ではサポートされていません。 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] したがって`Alpha` 、このプロパティに割り当てられている場合、による影響はありません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.HtmlDocument.BackColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.ForeColor" />
        <altmember cref="P:System.Windows.Forms.HtmlDocument.LinkColor" />
        <related type="Article" href="https://msdn.microsoft.com/library/aa752638.aspx">vlinkColor プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Window">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Window { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Window" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlDocument.Window" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Window As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Window { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Window : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlDocument.Window" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このドキュメントに関連付けられている <see cref="T:System.Windows.Forms.HtmlWindow" /> を取得します。</summary>
        <value>このドキュメントのウィンドウ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべての HTML ドキュメントには、ウィンドウと呼ばれる HTML DOM オブジェクトがあり<xref:System.Windows.Forms.HtmlHistory>ます。これを使用すると、ドキュメントの画面サイズを操作したり、新しいウィンドウを開いたり、などの重要なオブジェクトにアクセスしたりすることができます。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/aa752599.aspx">parentWindow プロパティ</related>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Write(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlDocument.Write(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Write (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Write(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.Write : string -&gt; unit" Usage="htmlDocument.Write text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">ドキュメントに書き込まれる HTML テキスト。</param>
        <summary>新しい HTML ページを出力します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 へ<xref:System.Windows.Forms.HtmlDocument.Write%2A>のすべての呼び出しは、の呼び出しに<xref:System.Windows.Forms.HtmlDocument.OpenNew%2A>先行する必要があります。これにより、現在のドキュメントとそのすべての変数がクリアされます。 を<xref:System.Windows.Forms.HtmlDocument.Write%2A>呼び出すと、新しい HTML ドキュメントがその場所に作成されます。 ドキュメントの特定の部分のみを変更するには、適切<xref:System.Windows.Forms.HtmlElement>なを取得<xref:System.Windows.Forms.HtmlElement.InnerHtml%2A>し、そのプロパティを設定します。  
  
 および`HTML` <xref:System.Windows.Forms.HtmlDocument.Write%2A> タグを含む、有効な HTML ドキュメント全体をメソッドを使用して記述することをお勧めします。 `BODY` ただし、HTML 要素だけを記述した場合は、ドキュメントオブジェクトモデル (DOM) によってこれらの要素が提供されます。  
  
   
  
## Examples  
 新しい<xref:System.Windows.Forms.HtmlDocument>を開き、新しい HTML ファイルを書き込むコード例を次に示します。  
  
 [!code-csharp[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.HtmlDocument#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlDocument/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.HtmlDocument.OpenNew(System.Boolean)" />
        <related type="Article" href="https://msdn.microsoft.com/library/default.asp?url=/workshop/browser/mshtml/reference/ifaces/document2/write.asp">write メソッド</related>
      </Docs>
    </Member>
  </Members>
</Type>
