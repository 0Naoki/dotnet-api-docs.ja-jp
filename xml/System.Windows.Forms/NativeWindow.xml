<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b630f0b25c5228ede23f6c9148474edc66d269bd" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70639264" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="e92d4-101">ウィンドウ ハンドルとウィンドウ プロシージャの下位のカプセル化を提供します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-101">Provides a low-level encapsulation of a window handle and a window procedure.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-102">このクラスは、ウィンドウクラスの作成と登録を自動的に管理します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="e92d4-103">ウィンドウは、ウィンドウハンドルに関連付けられている場合、ガベージコレクションの対象にはなりません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="e92d4-104">適切なガベージコレクションを確実に行うには、を使用<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>して手動<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>でハンドルを破棄するか、を使用して解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="e92d4-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e92d4-105"><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドは、WM_NCDESTROY メッセージが処理されるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="e92d4-106">つまり、手動でを呼び出す<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>必要がない場合には、これを行うことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="e92d4-107">クラス<xref:System.Windows.Forms.NativeWindow>には<xref:System.Windows.Forms.NativeWindow.Handle%2A>、ハンドルを管理するための、 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>、、、および<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>の各プロパティとメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-108">次のコード例は、ウィンドウプロシージャでのオペレーティングシステムのメッセージの受信と、特定のオペレーティングシステムウィンドウのクラス名を持つウィンドウの作成を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="e92d4-109">この例では、これを実現<xref:System.Windows.Forms.NativeWindow>するを継承する2つのクラスを作成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="e92d4-110">クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="e92d4-111">クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="e92d4-112">ハンドルは、イベントとイベントに<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>基づい<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>て割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="e92d4-113">ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`</span><span class="sxs-lookup"><span data-stu-id="e92d4-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="e92d4-114">クラス`MyNativeWindow`は、をに`BUTTON`設定して<xref:System.Windows.Forms.CreateParams.ClassName%2A> 、新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="e92d4-115">クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="e92d4-116">直前の呼び出し元がアンマネージコードを呼び出す場合は。</span><span class="sxs-lookup"><span data-stu-id="e92d4-116">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="e92d4-117">関連付けられた列挙型:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="e92d4-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e92d4-118"><see cref="T:System.Windows.Forms.NativeWindow" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-119">これは、コンパイラ<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>によって提供される既定のコンストラクターです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="e92d4-120">クラス<xref:System.Windows.Forms.NativeWindow>には、アプリケーションドメイン全体のメッセージハンドラーとハッシュテーブルを初期化する静的コンストラクターもあります。</span><span class="sxs-lookup"><span data-stu-id="e92d4-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e92d4-121">ウィンドウに割り当てるハンドル。</span><span class="sxs-lookup"><span data-stu-id="e92d4-121">The handle to assign to this window.</span></span></param>
        <summary><span data-ttu-id="e92d4-122">ウィンドウにハンドルを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-122">Assigns a handle to this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A>パラメーターに送信された`handle`ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="e92d4-124">ハンドル<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>のウィンドウプロシージャを既定のウィンドウプロシージャにリセットするには、を使用します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="e92d4-125">メソッドは、 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>メソッドを呼び出して、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティの値が変更されたことを示します。 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A></span><span class="sxs-lookup"><span data-stu-id="e92d4-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e92d4-126">割り当てるハンドルを別のアプリケーションプロセス内に配置することはできません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-127">次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="e92d4-128">この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="e92d4-129">クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="e92d4-130">クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="e92d4-131">ハンドルは、イベントと<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベントに基づいて割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="e92d4-132">ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`</span><span class="sxs-lookup"><span data-stu-id="e92d4-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="e92d4-133">このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="e92d4-134">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e92d4-135">コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="e92d4-136">ウィンドウには既にハンドルが割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-136">This window already has a handle.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="e92d4-137">関連付けられたネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="e92d4-137">The windows procedure for the associated native window could not be retrieved.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp"><span data-ttu-id="e92d4-138">ウィンドウの作成パラメーターを指定する <see cref="T:System.Windows.Forms.CreateParams" />。</span><span class="sxs-lookup"><span data-stu-id="e92d4-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span></span></param>
        <summary><span data-ttu-id="e92d4-139">作成パラメーターを指定してウィンドウとそのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-139">Creates a window and its handle with the specified creation parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-140">パラメーター `cp`は、ウィンドウとそのハンドルを作成するために`CreateWindowEx`ネイティブの Win32 メソッドに渡される値を指定します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="e92d4-141">フィールドがでない`null`場合、新しく作成されたウィンドウハンドルは、指定されたクラスを継承します。 <xref:System.Windows.Forms.CreateParams.ClassName%2A></span><span class="sxs-lookup"><span data-stu-id="e92d4-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="e92d4-142">たとえば、がに<xref:System.Windows.Forms.CreateParams.ClassName%2A> `BUTTON`設定されている場合、新しく作成されたウィンドウ`BUTTON`は Win32 ウィンドウクラスに基づきます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="e92d4-143">オブジェクトのプロパティは、 <xref:System.Windows.Forms.CreateParams.Param%2A>構造体と`null`して宣言されたクラスのインスタンスを参照するか、参照する必要があります。 <xref:System.Windows.Forms.CreateParams.ClassName%2A></span><span class="sxs-lookup"><span data-stu-id="e92d4-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="e92d4-144">このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="e92d4-145">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e92d4-146">コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e92d4-147">指定されたクラス名は、オペレーティングシステムに登録されています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-148">次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="e92d4-149">この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="e92d4-150">クラス`MyNativeWindow`は、をに`BUTTON`設定して<xref:System.Windows.Forms.CreateParams.ClassName%2A> 、新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="e92d4-151">これにより、Win32 ボタンウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-151">This creates a Win32 button window.</span></span> <span data-ttu-id="e92d4-152">ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="e92d4-153">クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="e92d4-154">この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e92d4-155">コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="e92d4-156">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="e92d4-157">ネイティブ ウィンドウを作成しようとしたときに、オペレーティング システムでリソース不足が発生しました。</span><span class="sxs-lookup"><span data-stu-id="e92d4-157">The operating system ran out of resources when trying to create the native window.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="e92d4-158">ネイティブ Windows API で指定されたウィンドウを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="e92d4-158">The native Windows API could not create the specified window.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="e92d4-159">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。つまり、<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> プロパティが <see cref="F:System.IntPtr.Zero" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="e92d4-160">トップレベルウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-160">to create a top-level window.</span></span> <span data-ttu-id="e92d4-161">このアクセス許可は、ウィンドウスタイルが子でない場合、またはウィンドウに親がない場合にのみ要求されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span></span> <span data-ttu-id="e92d4-162">関連付けられた列挙型:<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span><span class="sxs-lookup"><span data-stu-id="e92d4-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="e92d4-163">現在処理中のメッセージ。</span><span class="sxs-lookup"><span data-stu-id="e92d4-163">The message that is currently being processed.</span></span></param>
        <summary><span data-ttu-id="e92d4-164">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-164">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-165">通常、 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>メソッドを呼び出すのは、ウィンドウメッセージを受信し、既定のウィンドウプロシージャでメッセージを処理する場合のみです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="e92d4-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>ウィンドウにウィンドウメッセージを送信するためにを呼び出すことはできません。代わりに Win32 `SendMessage`関数を呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="e92d4-167">プロパティが0の<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> <xref:System.Windows.Forms.NativeWindow.Handle%2A>ときにを呼び出すと、エラーになります。</span><span class="sxs-lookup"><span data-stu-id="e92d4-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e92d4-168">派生クラスでこのメソッドをオーバーライドして、特定のネイティブウィンドウまたは .NET Windows フォーム<see cref="T:System.Windows.Forms.Control" />に対する一般化されたカスタムメッセージ処理を実装します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-168">Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />.</span></span> <span data-ttu-id="e92d4-169">カスタム処理は、このメソッドの基本クラスの実装を呼び出す前、後、またはその代わりに実行できます。これにより、標準のメッセージ処理が実行されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-169">Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</span></span>  
  
<span data-ttu-id="e92d4-170">これに対して、アプリケーションに対してカスタマイズされたメッセージ処理<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />を追加する<see cref="T:System.Windows.Forms.Application" />には、クラスのメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-170">In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e92d4-171">ウィンドウとそのハンドルを破棄します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-171">Destroys the window and its handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-172">このメソッドは、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>に関連付けられているウィンドウを破棄し、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 0 に設定し、メソッドを呼び出して変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-172">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="e92d4-173">通常、を呼び出す<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>のは、ネイティブウィンドウが終了したときだけです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-173">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e92d4-174">クラス<xref:System.Windows.Forms.NativeWindow>は、関連付けられているウィンドウを自動的に破棄し、WM_DESTROY メッセージに応答してそのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-174">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e92d4-175">ウィンドウに関連付けられているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-175">Releases the resources associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-176">メソッド<xref:System.Windows.Forms.NativeWindow.Finalize%2A>は、現在<xref:System.Windows.Forms.NativeWindow>のインスタンスに関連付けられている Win32 派生クラスを削除し、ハンドルを解放して、関連付けられているウィンドウに WM_CLOSE メッセージをポストします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-176">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="e92d4-177">ウィンドウのハンドル。</span><span class="sxs-lookup"><span data-stu-id="e92d4-177">A handle to a window.</span></span></param>
        <summary><span data-ttu-id="e92d4-178">指定したハンドルに関連付けられているウィンドウを取得します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-178">Retrieves the window associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="e92d4-179">指定したハンドルに関連付けられている <see cref="T:System.Windows.Forms.NativeWindow" />。</span><span class="sxs-lookup"><span data-stu-id="e92d4-179">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span></span> <span data-ttu-id="e92d4-180">ハンドルに関連付けられているウィンドウがない場合は、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-180">This method returns <see langword="null" /> when the handle does not have an associated window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-181">別のメソッドからハンドルを受け取った場合は、このメソッドを使用して、ハンドルに関連付けられているウィンドウを取得します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-181">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="e92d4-182">ハンドルは、現在のプロセス内の<xref:System.Windows.Forms.NativeWindow>別のによって既に`null`所有されている必要があります。それ以外の場合は、が返されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-182">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="e92d4-183">ウィンドウのハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-183">Gets the handle for this window.</span></span></summary>
        <value><span data-ttu-id="e92d4-184">正常に実行された場合は、関連する Win32 ネイティブ ウィンドウへのハンドルを表す <see cref="T:System.IntPtr" />。ウィンドウに関連付けられているハンドルがない場合は 0。</span><span class="sxs-lookup"><span data-stu-id="e92d4-184">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-185">ウィンドウまたはコントロールのハンドルを必要とする Windows API メソッドを呼び出すときに、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-185">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-186">次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-186">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="e92d4-187">この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-187">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="e92d4-188">また、この例では<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 、が<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更されたときに通知されるようにメソッドをオーバーライドする方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-188">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="e92d4-189">クラス`MyNativeWindow`は、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> [設定] ボタンを使用して新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-189">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="e92d4-190">これにより、Win32 ボタンウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-190">This creates a Win32 button window.</span></span> <span data-ttu-id="e92d4-191">ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-191">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="e92d4-192">クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-192">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="e92d4-193">この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-193">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e92d4-194">コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-194">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="e92d4-195">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-195">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e92d4-196">ウィンドウのハンドルが変更されたときに呼び出される通知メソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-196">Specifies a notification method that is called when the handle for a window is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-197">このメソッドは、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティの値が変更されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-197">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-198">次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-198">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="e92d4-199">この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-199">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="e92d4-200">また、この例では<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 、が<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更されたときに通知されるようにメソッドをオーバーライドする方法も示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-200">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="e92d4-201">クラス`MyNativeWindow`は、をに`BUTTON`設定して<xref:System.Windows.Forms.CreateParams.ClassName%2A> 、新しいウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-201">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="e92d4-202">これにより、Win32 ボタンウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-202">This creates a Win32 button window.</span></span> <span data-ttu-id="e92d4-203">ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-203">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="e92d4-204">クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-204">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="e92d4-205">この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-205">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="e92d4-206">このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-206">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="e92d4-207">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-207">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e92d4-208">コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-208">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e92d4-209">コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-209">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="e92d4-210">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-210">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e92d4-211">ウィンドウハンドルに加えられた変更を追跡するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-211">Override this method to track changes that are made to the window handle.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="e92d4-212">未処理のスレッド例外を指定する <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="e92d4-212">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span></span></param>
        <summary><span data-ttu-id="e92d4-213">派生クラスでオーバーライドされた場合、未処理のスレッド例外を管理します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-213">When overridden in a derived class, manages an unhandled thread exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-214">通常、 <xref:System.Windows.Forms.Application.OnThreadException%2A>はスレッドの例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-214">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="e92d4-215">ウィンドウに関連付けられているハンドルを解放します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-215">Releases the handle associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-216">このメソッドは、ウィンドウハンドルを破棄しません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-216">This method does not destroy the window handle.</span></span> <span data-ttu-id="e92d4-217">代わりに、ハンドルのウィンドウプロシージャを既定のウィンドウプロシージャに設定します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-217">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="e92d4-218">このメソッドは<xref:System.Windows.Forms.NativeWindow.Handle%2A> 、プロパティを0に<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>設定し、を呼び出して変更を反映します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-218">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="e92d4-219">ウィンドウは、Windows がハンドルを破棄したことを示すネイティブ Win32 WM_NCDESTROY メッセージを受信すると、このメソッドを自動的に呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-219">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-220">次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-220">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="e92d4-221">この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-221">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="e92d4-222">クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-222">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="e92d4-223">クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-223">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="e92d4-224">ハンドルは、イベントとイベントに<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>基づい<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>て割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-224">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="e92d4-225">ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`</span><span class="sxs-lookup"><span data-stu-id="e92d4-225">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="e92d4-226">このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-226">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="e92d4-227">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-227">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e92d4-228">コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-228">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="e92d4-229">現在の Windows メッセージに関連付けられている <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="e92d4-229">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span></span></param>
        <summary><span data-ttu-id="e92d4-230">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-230">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e92d4-231">このメソッドは、ウィンドウのハンドルにウィンドウメッセージが送信されるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-231">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e92d4-232">次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-232">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="e92d4-233">この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。</span><span class="sxs-lookup"><span data-stu-id="e92d4-233">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="e92d4-234">クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-234">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="e92d4-235">クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="e92d4-235">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="e92d4-236">ハンドルは、イベントと<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベントに基づいて割り当てられます。</span><span class="sxs-lookup"><span data-stu-id="e92d4-236">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="e92d4-237">ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`</span><span class="sxs-lookup"><span data-stu-id="e92d4-237">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="e92d4-238">このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。</span><span class="sxs-lookup"><span data-stu-id="e92d4-238">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="e92d4-239">簡潔にするために、一部のコードは表示されません。</span><span class="sxs-lookup"><span data-stu-id="e92d4-239">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="e92d4-240">コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="e92d4-240">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="e92d4-241">特定のメッセージ処理を実装するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="e92d4-241">Override this method to implement specific message processing.</span></span> <span data-ttu-id="e92d4-242"><c>Base を呼び出します。</c>処理されないメッセージの WndProc。</span><span class="sxs-lookup"><span data-stu-id="e92d4-242">Call <c>base.WndProc</c> for unhandled messages.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>
