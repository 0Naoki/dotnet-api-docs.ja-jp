<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b630f0b25c5228ede23f6c9148474edc66d269bd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69183002" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ウィンドウ ハンドルとウィンドウ プロシージャの下位のカプセル化を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、ウィンドウクラスの作成と登録を自動的に管理します。  
  
 ウィンドウは、ウィンドウハンドルに関連付けられている場合、ガベージコレクションの対象にはなりません。 適切なガベージコレクションを確実に行うには、を使用<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>して手動<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>でハンドルを破棄するか、を使用して解放する必要があります。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドは、WM_NCDESTROY メッセージが処理されるときに呼び出されます。 つまり、手動でを呼び出す<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>必要がない場合には、これを行うことをお勧めします。  
  
 クラス<xref:System.Windows.Forms.NativeWindow>には<xref:System.Windows.Forms.NativeWindow.Handle%2A>、ハンドルを管理するための、 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>、、、および<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>の各プロパティとメソッドが用意されています。  
  
   
  
## Examples  
 次のコード例は、ウィンドウプロシージャでのオペレーティングシステムのメッセージの受信と、特定のオペレーティングシステムウィンドウのクラス名を持つウィンドウの作成を示しています。 この例では、これを実現<xref:System.Windows.Forms.NativeWindow>するを継承する2つのクラスを作成します。  
  
 クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。 クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示します。 ハンドルは、イベントとイベントに<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>基づい<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>て割り当てられます。 ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`  
  
 クラス`MyNativeWindow`は、をに`BUTTON`設定して<xref:System.Windows.Forms.CreateParams.ClassName%2A> 、新しいウィンドウを作成します。 クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">直前の呼び出し元がアンマネージコードを呼び出す場合は。 関連付けられた列挙型:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.NativeWindow" /> クラスのインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、コンパイラ<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>によって提供される既定のコンストラクターです。 クラス<xref:System.Windows.Forms.NativeWindow>には、アプリケーションドメイン全体のメッセージハンドラーとハッシュテーブルを初期化する静的コンストラクターもあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">ウィンドウに割り当てるハンドル。</param>
        <summary>ウィンドウにハンドルを割り当てます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>パラメーターに送信された`handle`ウィンドウメッセージをインターセプトします。 ハンドル<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>のウィンドウプロシージャを既定のウィンドウプロシージャにリセットするには、を使用します。  
  
 メソッドは、 <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>メソッドを呼び出して、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティの値が変更されたことを示します。 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>  
  
> [!NOTE]
>  割り当てるハンドルを別のアプリケーションプロセス内に配置することはできません。  
  
   
  
## Examples  
 次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。 この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。  
  
 クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。 クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示しています。 ハンドルは、イベントと<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベントに基づいて割り当てられます。 ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`  
  
 このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。 簡潔にするために、一部のコードは表示されません。 コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">ウィンドウには既にハンドルが割り当てられています。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">関連付けられたネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">ウィンドウの作成パラメーターを指定する <see cref="T:System.Windows.Forms.CreateParams" />。</param>
        <summary>作成パラメーターを指定してウィンドウとそのハンドルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 パラメーター `cp`は、ウィンドウとそのハンドルを作成するために`CreateWindowEx`ネイティブの Win32 メソッドに渡される値を指定します。  
  
 フィールドがでない`null`場合、新しく作成されたウィンドウハンドルは、指定されたクラスを継承します。 <xref:System.Windows.Forms.CreateParams.ClassName%2A> たとえば、がに<xref:System.Windows.Forms.CreateParams.ClassName%2A> `BUTTON`設定されている場合、新しく作成されたウィンドウ`BUTTON`は Win32 ウィンドウクラスに基づきます。 オブジェクトのプロパティは、 <xref:System.Windows.Forms.CreateParams.Param%2A>構造体と`null`して宣言されたクラスのインスタンスを参照するか、参照する必要があります。 <xref:System.Windows.Forms.CreateParams.ClassName%2A>  
  
 このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。 簡潔にするために、一部のコードは表示されません。 コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。  
  
> [!NOTE]
>  指定されたクラス名は、オペレーティングシステムに登録されています。  
  
   
  
## Examples  
 次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。 この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。  
  
 クラス`MyNativeWindow`は、をに`BUTTON`設定して<xref:System.Windows.Forms.CreateParams.ClassName%2A> 、新しいウィンドウを作成します。 これにより、Win32 ボタンウィンドウが作成されます。 ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。 クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。 この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">ネイティブ ウィンドウを作成しようとしたときに、オペレーティング システムでリソース不足が発生しました。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">ネイティブ Windows API で指定されたウィンドウを作成できませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。つまり、<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> プロパティが <see cref="F:System.IntPtr.Zero" /> ではありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">トップレベルウィンドウを作成します。 このアクセス許可は、ウィンドウスタイルが子でない場合、またはウィンドウに親がない場合にのみ要求されます。 関連付けられた列挙型:<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">現在処理中のメッセージ。</param>
        <summary>ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>メソッドを呼び出すのは、ウィンドウメッセージを受信し、既定のウィンドウプロシージャでメッセージを処理する場合のみです。 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>ウィンドウにウィンドウメッセージを送信するためにを呼び出すことはできません。代わりに Win32 `SendMessage`関数を呼び出してください。  
  
 プロパティが0の<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> <xref:System.Windows.Forms.NativeWindow.Handle%2A>ときにを呼び出すと、エラーになります。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスでこのメソッドをオーバーライドして、特定のネイティブウィンドウまたは .NET Windows フォーム<see cref="T:System.Windows.Forms.Control" />に対する一般化されたカスタムメッセージ処理を実装します。 カスタム処理は、このメソッドの基本クラスの実装を呼び出す前、後、またはその代わりに実行できます。これにより、標準のメッセージ処理が実行されます。  
  
これに対して、アプリケーションに対してカスタマイズされたメッセージ処理<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />を追加する<see cref="T:System.Windows.Forms.Application" />には、クラスのメソッドを使用します。</para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウとそのハンドルを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>に関連付けられているウィンドウを破棄し、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 0 に設定し、メソッドを呼び出して変更を反映します。 通常、を呼び出す<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>のは、ネイティブウィンドウが終了したときだけです。  
  
> [!NOTE]
>  クラス<xref:System.Windows.Forms.NativeWindow>は、関連付けられているウィンドウを自動的に破棄し、WM_DESTROY メッセージに応答してそのリソースを解放します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウに関連付けられているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Windows.Forms.NativeWindow.Finalize%2A>は、現在<xref:System.Windows.Forms.NativeWindow>のインスタンスに関連付けられている Win32 派生クラスを削除し、ハンドルを解放して、関連付けられているウィンドウに WM_CLOSE メッセージをポストします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">ウィンドウのハンドル。</param>
        <summary>指定したハンドルに関連付けられているウィンドウを取得します。</summary>
        <returns>指定したハンドルに関連付けられている <see cref="T:System.Windows.Forms.NativeWindow" />。 ハンドルに関連付けられているウィンドウがない場合は、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 別のメソッドからハンドルを受け取った場合は、このメソッドを使用して、ハンドルに関連付けられているウィンドウを取得します。 ハンドルは、現在のプロセス内の<xref:System.Windows.Forms.NativeWindow>別のによって既に`null`所有されている必要があります。それ以外の場合は、が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのハンドルを取得します。</summary>
        <value>正常に実行された場合は、関連する Win32 ネイティブ ウィンドウへのハンドルを表す <see cref="T:System.IntPtr" />。ウィンドウに関連付けられているハンドルがない場合は 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ウィンドウまたはコントロールのハンドルを必要とする Windows API メソッドを呼び出すときに、このメソッドを使用します。  
  
   
  
## Examples  
 次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。 この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。 また、この例では<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 、が<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更されたときに通知されるようにメソッドをオーバーライドする方法も示しています。  
  
 クラス`MyNativeWindow`は、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> [設定] ボタンを使用して新しいウィンドウを作成します。 これにより、Win32 ボタンウィンドウが作成されます。 ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。 クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。 この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウのハンドルが変更されたときに呼び出される通知メソッドを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティの値が変更されたときに呼び出されます。  
  
   
  
## Examples  
 次のコード例は、特定のオペレーティングシステムウィンドウのクラス名を使用してウィンドウを作成する方法を示しています。 この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。 また、この例では<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 、が<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更されたときに通知されるようにメソッドをオーバーライドする方法も示しています。  
  
 クラス`MyNativeWindow`は、をに`BUTTON`設定して<xref:System.Windows.Forms.CreateParams.ClassName%2A> 、新しいウィンドウを作成します。 これにより、Win32 ボタンウィンドウが作成されます。 ボタンの位置とサイズは、追加のウィンドウスタイルを指定することによって設定されます。 クラスは、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを使用し、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして、受信されたウィンドウメッセージをインターセプトする方法を示します。 この例では WM_ACTIVATEAPP メッセージを検索しますが、実際のプログラムでは、作成された型に固有のウィンドウメッセージを置き換えることができます。  
  
 このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。 簡潔にするために、一部のコードは表示されません。 コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなくウィンドウの親にウィンドウメッセージが送信されます。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>ウィンドウハンドルに加えられた変更を追跡するには、このメソッドをオーバーライドします。</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">未処理のスレッド例外を指定する <see cref="T:System.Exception" />。</param>
        <summary>派生クラスでオーバーライドされた場合、未処理のスレッド例外を管理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、 <xref:System.Windows.Forms.Application.OnThreadException%2A>はスレッドの例外を処理します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウに関連付けられているハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ウィンドウハンドルを破棄しません。 代わりに、ハンドルのウィンドウプロシージャを既定のウィンドウプロシージャに設定します。 このメソッドは<xref:System.Windows.Forms.NativeWindow.Handle%2A> 、プロパティを0に<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>設定し、を呼び出して変更を反映します。  
  
 ウィンドウは、Windows がハンドルを破棄したことを示すネイティブ Win32 WM_NCDESTROY メッセージを受信すると、このメソッドを自動的に呼び出します。  
  
   
  
## Examples  
 次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。 この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。  
  
 クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。 クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示しています。 ハンドルは、イベントとイベントに<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>基づい<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>て割り当てられます。 ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`  
  
 このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。 簡潔にするために、一部のコードは表示されません。 コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">現在の Windows メッセージに関連付けられている <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ウィンドウのハンドルにウィンドウメッセージが送信されるときに呼び出されます。  
  
   
  
## Examples  
 次のコード例は、ウィンドウプロシージャでオペレーティングシステムウィンドウメッセージを傍受する方法を示しています。 この例では、を<xref:System.Windows.Forms.NativeWindow>継承するクラスを作成して、これを実現します。  
  
 クラス`MyNativeWindowListener`は、コンストラクターに渡されるフォームのウィンドウプロシージャにフックし、 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドをオーバーライドして`WM_ACTIVATEAPP`ウィンドウメッセージをインターセプトします。 クラスは、メソッド<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>メソッドを使用して、 <xref:System.Windows.Forms.NativeWindow>が使用するウィンドウハンドルを識別する方法を示しています。 ハンドルは、イベントと<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベントに基づいて割り当てられます。 ウィンドウメッセージを受信すると、クラスは`form1.ApplicationActivated`メソッドを呼び出します。 `WM_ACTIVATEAPP`  
  
 このコードは、 <xref:System.Windows.Forms.NativeWindow>クラスの概要に示されている例から抜粋したものです。 簡潔にするために、一部のコードは表示されません。 コード<xref:System.Windows.Forms.NativeWindow>全体の一覧については、「」を参照してください。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>特定のメッセージ処理を実装するには、このメソッドをオーバーライドします。 <c>Base を呼び出します。</c>処理されないメッセージの WndProc。</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>
