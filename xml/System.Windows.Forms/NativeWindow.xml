<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39979288" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ウィンドウ ハンドルとウィンドウ プロシージャの下位のカプセル化を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスは、ウィンドウ クラスの作成と登録に自動的に管理します。  
  
 ウィンドウ ハンドルに関連付けられているときに、ウィンドウはガベージ コレクションの対象ではありません。 適切なガベージ コレクションのために、ハンドルする必要がありますか、破棄を使用して手動で<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>を使用して解放または<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>へのメッセージが処理されるときに、メソッドが呼び出されます。 つまり、どの場合では手動で呼び出す必要はない場合がある<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>が、これを行うことをお勧めします。  
  
 <xref:System.Windows.Forms.NativeWindow>クラスには、次のプロパティとハンドルを管理する方法が用意されています: <xref:System.Windows.Forms.NativeWindow.Handle%2A>、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>、および<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>します。  
  
   
  
## Examples  
 次のコード例では、ウィンドウ プロシージャ、および特定のオペレーティング システムのウィンドウ クラス名でウィンドウを作成するオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 例では、2 つのクラスを継承するクラスを作成します<xref:System.Windows.Forms.NativeWindow>これを実現します。  
  
 `MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトするメソッド、`WM_ACTIVATEAPP`ウィンドウ メッセージ。 クラスの使用を示して、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別するメソッド、<xref:System.Windows.Forms.NativeWindow>が使用されます。 ハンドルが割り当てに基づいて、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。 ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。  
  
 `MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定`BUTTON`します。 クラスの使用方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライドを行う、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す直前の呼び出し元。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.NativeWindow" /> クラスのインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、既定値<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>コンパイラによって提供されるコンス トラクター。 <xref:System.Windows.Forms.NativeWindow>クラスにもアプリケーション ドメイン全体のメッセージ ハンドラーとハッシュ テーブルを初期化する静的コンス トラクターがあります。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">ウィンドウに割り当てるハンドル。</param>
        <summary>ウィンドウにハンドルを割り当てます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> 送信されたウィンドウ メッセージを途中受信、`handle`パラメーター。 使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャにリセットします。  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>メソッドの呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>ことを示すメソッドの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更されました。  
  
> [!NOTE]
>  ハンドルを割り当てるには、別のアプリケーション プロセスですることはできません。  
  
   
  
## Examples  
 次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。  
  
 `MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>インターセプトする方法、`WM_ACTIVATEAPP`ウィンドウ メッセージ。 クラスの使用を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>どのウィンドウを識別するメソッドの処理、<xref:System.Windows.Forms.NativeWindow>が使用されます。 基に、ハンドルを割り当て、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。 ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。  
  
 このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。 いくつかのコードは、簡潔さを優先するためには表示されません。 参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">ウィンドウには既にハンドルが割り当てられています。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">関連付けられたネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">ウィンドウの作成パラメーターを指定する <see cref="T:System.Windows.Forms.CreateParams" />。</param>
        <summary>作成パラメーターを指定してウィンドウとそのハンドルを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cp`ネイティブ Win32 に渡される値を指定するパラメーター`CreateWindowEx`ウィンドウとそのハンドルを作成します。  
  
 ときに、<xref:System.Windows.Forms.CreateParams.ClassName%2A>フィールドがない`null`、新しく作成したウィンドウ ハンドルを指定したクラスから継承します。 たとえば場合、<xref:System.Windows.Forms.CreateParams.ClassName%2A>に設定されている`BUTTON`、新しく作成されたウィンドウは、Win32 に基づいて`BUTTON`ウィンドウ クラス。 <xref:System.Windows.Forms.CreateParams.Param%2A>のプロパティ、<xref:System.Windows.Forms.CreateParams.ClassName%2A>オブジェクトがある必要がありますか`null`または構造体として宣言されたクラスのインスタンスを参照します。  
  
 このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。 いくつかのコードは、簡潔さを優先するためには表示されません。 参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。  
  
> [!NOTE]
>  指定されたクラス名は、オペレーティング システムに登録されます。  
  
   
  
## Examples  
 次のコード例では、特定のオペレーティング システムのウィンドウ クラス名でウィンドウの作成を示します。 継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。  
  
 `MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定`BUTTON`します。 これには、Win32 のボタン ウィンドウが作成されます。 追加のウィンドウ スタイルを指定すると、ボタンのサイズと場所に設定されます。 クラスは、使用する方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライド、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。 WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えられますことができます。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">ネイティブ ウィンドウを作成しようとしたときに、オペレーティング システムでリソース不足が発生しました。</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Win32 ネイティブ API が指定されたウィンドウを作成できませんでした。</exception>
        <exception cref="T:System.InvalidOperationException">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。つまり、<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> プロパティが <see cref="F:System.IntPtr.Zero" /> ではありません。</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">最上位ウィンドウを作成します。 ウィンドウ スタイルが子ではない場合、またはウィンドウには、親がない場合にのみ、このアクセス許可が要求されます。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">現在処理中のメッセージ。</param>
        <summary>ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、のみを呼び出す、<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>メソッド ウィンドウ メッセージを受け取り、メッセージを処理する既定のウィンドウ プロシージャを希望するとします。 <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> ウィンドウをウィンドウ メッセージを送信する呼び出すことはできません。Win32 呼び出し`SendMessage`関数を使用します。  
  
 呼び出すとエラーが<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>ときに、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティは 0。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>一般化されたカスタム メッセージの特定のネイティブ ウィンドウまたは .NET Windows フォームの処理を実装する派生クラスでは、このメソッドをオーバーライド<see cref="T:System.Windows.Forms.Control" />します。前に、後、または、標準のメッセージの処理を実行します。 このメソッドの基本クラス実装への呼び出しではなく、カスタム処理を実行できます。これに対し、カスタマイズした追加するメッセージ処理アプリケーションは行うことができます、<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />のメソッド、<see cref="T:System.Windows.Forms.Application" />クラス。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウとそのハンドルを破棄します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドに関連付けられているウィンドウの破棄、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>、設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0、および呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>メソッドは、変更を反映するようにします。 通常、のみを呼び出す<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>ネイティブ ウィンドウを完了したら。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow>クラスに自動的には関連付けられているウィンドウを破棄し、WM_DESTROY メッセージへの応答でそのリソースを解放します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウに関連付けられているリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A>メソッドに現在関連付けられている Win32 の派生クラスを削除する<xref:System.Windows.Forms.NativeWindow>インスタンス ハンドルを解放する、WM_CLOSE メッセージ、関連付けられているウィンドウをポストします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">ウィンドウのハンドル。</param>
        <summary>指定したハンドルに関連付けられているウィンドウを取得します。</summary>
        <returns>指定したハンドルに関連付けられている <see cref="T:System.Windows.Forms.NativeWindow" />。 ハンドルに関連付けられているウィンドウがない場合は、このメソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 別のメソッドからのハンドルを受信する場合は、ハンドルに関連付けられているウィンドウを取得するこのメソッドを使用します。 ハンドルは、別によって既に所有する必要があります<xref:System.Windows.Forms.NativeWindow>、現在のプロセス以外の場合、`null`が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ウィンドウのハンドルを取得します。</summary>
        <value>正常に実行された場合は、関連する Win32 ネイティブ ウィンドウへのハンドルを表す <see cref="T:System.IntPtr" />。ウィンドウに関連付けられているハンドルがない場合は 0。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ウィンドウやコントロールのハンドルを必要とする Windows API のメソッドを呼び出すときに、このメソッドを使用します。  
  
   
  
## Examples  
 次のコード例では、特定のオペレーティング システムのウィンドウ クラス名でウィンドウの作成を示します。 継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。 オーバーライドも示します、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>時に通知がメソッド、<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更します。  
  
 `MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>ボタンに設定します。 これには、Win32 のボタン ウィンドウが作成されます。 追加のウィンドウ スタイルを指定すると、ボタンのサイズと場所に設定されます。 クラスは、使用する方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライド、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。 WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージと実際のプログラムでに置き換えられます可能性があります。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウのハンドルが変更されたときに呼び出される通知メソッドを指定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドが呼び出されるときの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更されました。  
  
   
  
## Examples  
 次のコード例では、特定のオペレーティング システムのウィンドウ クラス名でウィンドウの作成を示します。 継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。 オーバーライドも示します、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>時に通知がメソッド、<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更します。  
  
 `MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定`BUTTON`します。 これには、Win32 のボタン ウィンドウが作成されます。 追加のウィンドウ スタイルを指定すると、ボタンのサイズと場所に設定されます。 クラスは、使用する方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライド、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。 WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えられますことができます。  
  
 このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。 いくつかのコードは、簡潔さを優先するためには表示されません。 参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。  
  
> [!NOTE]
>  コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。 詳細については、Windows プラットフォーム SDK を参照してください。  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>ウィンドウ ハンドルに加えられた変更を追跡するには、このメソッドをオーバーライドします。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">未処理のスレッド例外を指定する <see cref="T:System.Exception" />。</param>
        <summary>派生クラスでオーバーライドされた場合、未処理のスレッド例外を管理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、<xref:System.Windows.Forms.Application.OnThreadException%2A>スレッドの例外のハンドル。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>ウィンドウに関連付けられているハンドルを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、ウィンドウ ハンドルを破棄しません。 代わりに、ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャに設定します。 設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0 に呼び出し<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>変更が反映されます。  
  
 Windows のハンドルが破棄されたことを示すネイティブの Win32 へメッセージを受信した場合、ウィンドウは自動的にこのメソッドを呼び出します。  
  
   
  
## Examples  
 次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。  
  
 `MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>インターセプトする方法、`WM_ACTIVATEAPP`ウィンドウ メッセージ。 クラスの使用を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別するメソッド、<xref:System.Windows.Forms.NativeWindow>が使用されます。 ハンドルが割り当てに基づいて、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。 ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。  
  
 このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。 いくつかのコードは、簡潔さを優先するためには表示されません。 参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">現在の Windows メッセージに関連付けられている <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary>ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ウィンドウのハンドルをウィンドウ メッセージが送信されるときに、このメソッドが呼び出されます。  
  
   
  
## Examples  
 次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。 継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。  
  
 `MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトするメソッド、`WM_ACTIVATEAPP`ウィンドウ メッセージ。 クラスの使用を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別するメソッド、<xref:System.Windows.Forms.NativeWindow>が使用されます。 基に、ハンドルを割り当て、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。 ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。  
  
 このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。 いくつかのコードは、簡潔さを優先するためには表示されません。 参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>特定のメッセージの処理を実装するには、このメソッドをオーバーライドします。呼び出す<c>ベース。WndProc</c>未処理のメッセージ。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>