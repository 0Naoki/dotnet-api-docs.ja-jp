<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary><span data-ttu-id="01a72-101">ウィンドウ ハンドルとウィンドウ プロシージャの下位のカプセル化を提供します。</span><span class="sxs-lookup"><span data-stu-id="01a72-101">Provides a low-level encapsulation of a window handle and a window procedure.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-102">このクラスは、ウィンドウ クラスの作成と登録を自動的に管理します。</span><span class="sxs-lookup"><span data-stu-id="01a72-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="01a72-103">ウィンドウ ハンドルに関連付けられている場合、ウィンドウはガベージ コレクションの対象ではできません。</span><span class="sxs-lookup"><span data-stu-id="01a72-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="01a72-104">適切なガベージ コレクション ハンドルする必要がありますか、破棄を使用して手動で<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>を使用して解放または<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>です。</span><span class="sxs-lookup"><span data-stu-id="01a72-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01a72-105"><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>へのメッセージが処理されるときに、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="01a72-106">つまり、どの場合にする必要はありませんを手動で呼び出す場合があります<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>が、これを行うことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="01a72-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="01a72-107"><xref:System.Windows.Forms.NativeWindow>クラスには、次のプロパティとハンドルを管理する方法が用意されています: <xref:System.Windows.Forms.NativeWindow.Handle%2A>、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>、および<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>です。</span><span class="sxs-lookup"><span data-stu-id="01a72-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01a72-108">次のコード例では、ウィンドウ プロシージャ、および特定のオペレーティング システムのウィンドウ クラス名でウィンドウを作成するオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="01a72-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="01a72-109">継承する 2 つのクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="01a72-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="01a72-110">`MyNativeWindowListener`クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトするメソッド、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="01a72-111">クラスは、の使用法を示しています、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別する方法、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="01a72-112">ハンドルが割り当てに基づいて、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="01a72-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="01a72-113">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="01a72-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="01a72-114">`MyNativeWindow`クラスの新しいウィンドウを作成する、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 'éý'`BUTTON`です。</span><span class="sxs-lookup"><span data-stu-id="01a72-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="01a72-115">クラスの使用方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドをオーバーライドする、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>切片ウィンドウのメッセージが受信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="01a72-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01a72-116">アンマネージ コードを呼び出す即時呼び出し元がします。</span><span class="sxs-lookup"><span data-stu-id="01a72-116">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="01a72-117">関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01a72-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01a72-118">
          <see cref="T:System.Windows.Forms.NativeWindow" /> クラスのインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="01a72-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-119">これは、既定値<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>コンス トラクターがコンパイラによって指定します。</span><span class="sxs-lookup"><span data-stu-id="01a72-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="01a72-120"><xref:System.Windows.Forms.NativeWindow>クラスにも、ドメイン全体のメッセージ ハンドラーにアプリケーションとハッシュ テーブルを初期化する静的コンス トラクターがあります。</span><span class="sxs-lookup"><span data-stu-id="01a72-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="01a72-121">ウィンドウに割り当てるハンドル。</span><span class="sxs-lookup"><span data-stu-id="01a72-121">The handle to assign to this window.</span></span></param>
        <summary><span data-ttu-id="01a72-122">ウィンドウにハンドルを割り当てます。</span><span class="sxs-lookup"><span data-stu-id="01a72-122">Assigns a handle to this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> 送信されたウィンドウ メッセージを途中受信、`handle`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="01a72-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="01a72-124">使用して<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャにリセットします。</span><span class="sxs-lookup"><span data-stu-id="01a72-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="01a72-125"><xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>メソッドの呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>ことを示すメソッドの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更されました。</span><span class="sxs-lookup"><span data-stu-id="01a72-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01a72-126">ハンドルを割り当てるには、別のアプリケーション プロセスですることはできません。</span><span class="sxs-lookup"><span data-stu-id="01a72-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01a72-127">次のコード例では、ウィンドウ プロシージャでのオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="01a72-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="01a72-128">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="01a72-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="01a72-129">`MyNativeWindowListener`クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトする方法、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="01a72-130">クラスの使用方法を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>どのウィンドウを識別する方法を処理、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="01a72-131">基に、ハンドルを割り当て、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="01a72-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="01a72-132">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="01a72-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="01a72-133">このコードに示した例からの抜粋、<xref:System.Windows.Forms.NativeWindow>クラスの概要です。</span><span class="sxs-lookup"><span data-stu-id="01a72-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="01a72-134">一部のコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="01a72-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="01a72-135">参照してください<xref:System.Windows.Forms.NativeWindow>コード全体をします。</span><span class="sxs-lookup"><span data-stu-id="01a72-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><span data-ttu-id="01a72-136">ウィンドウには既にハンドルが割り当てられています。</span><span class="sxs-lookup"><span data-stu-id="01a72-136">This window already has a handle.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="01a72-137">関連付けられたネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</span><span class="sxs-lookup"><span data-stu-id="01a72-137">The windows procedure for the associated native window could not be retrieved.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp"><span data-ttu-id="01a72-138">ウィンドウの作成パラメーターを指定する <see cref="T:System.Windows.Forms.CreateParams" />。</span><span class="sxs-lookup"><span data-stu-id="01a72-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span></span></param>
        <summary><span data-ttu-id="01a72-139">作成パラメーターを指定してウィンドウとそのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="01a72-139">Creates a window and its handle with the specified creation parameters.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-140">`cp`パラメーターは、ネイティブ Win32 に渡される値を指定`CreateWindowEx`ウィンドウとそのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="01a72-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="01a72-141">ときに、<xref:System.Windows.Forms.CreateParams.ClassName%2A>フィールドではありません`null`、新しく作成したウィンドウ ハンドルを指定したクラスから継承します。</span><span class="sxs-lookup"><span data-stu-id="01a72-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="01a72-142">たとえば場合、<xref:System.Windows.Forms.CreateParams.ClassName%2A>に設定されている`BUTTON`、新しく作成されたウィンドウは、Win32 に基づいて`BUTTON`ウィンドウ クラスです。</span><span class="sxs-lookup"><span data-stu-id="01a72-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="01a72-143"><xref:System.Windows.Forms.CreateParams.Param%2A>のプロパティ、<xref:System.Windows.Forms.CreateParams.ClassName%2A>オブジェクトがある必要がありますか、`null`または構造体として宣言されたクラスのインスタンスを参照します。</span><span class="sxs-lookup"><span data-stu-id="01a72-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="01a72-144">このコードに示した例からの抜粋、<xref:System.Windows.Forms.NativeWindow>クラスの概要です。</span><span class="sxs-lookup"><span data-stu-id="01a72-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="01a72-145">一部のコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="01a72-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="01a72-146">参照してください<xref:System.Windows.Forms.NativeWindow>コード全体をします。</span><span class="sxs-lookup"><span data-stu-id="01a72-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01a72-147">オペレーティング システムで提供されるクラス名を登録します。</span><span class="sxs-lookup"><span data-stu-id="01a72-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01a72-148">次のコード例では、ウィンドウを作成すると、特定のオペレーティング システムのウィンドウ クラス名を示します。</span><span class="sxs-lookup"><span data-stu-id="01a72-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="01a72-149">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="01a72-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="01a72-150">`MyNativeWindow`クラスの新しいウィンドウを作成する、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 'éý'`BUTTON`です。</span><span class="sxs-lookup"><span data-stu-id="01a72-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="01a72-151">これにより、Win32 ボタン ウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-151">This creates a Win32 button window.</span></span> <span data-ttu-id="01a72-152">ボタンのサイズと場所が設定、追加のウィンドウ スタイルを指定するとします。</span><span class="sxs-lookup"><span data-stu-id="01a72-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="01a72-153">クラスを使用する方法を示しています、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>切片ウィンドウのメッセージが受信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="01a72-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="01a72-154">WM_ACTIVATEAPP メッセージをこの例で、これで置換できる実際のプログラムで作成した型に対応するウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01a72-155">一部のコントロール型は、ウィンドウの代わりに、ウィンドウの親にウィンドウ メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="01a72-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="01a72-156">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="01a72-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException"><span data-ttu-id="01a72-157">ネイティブ ウィンドウを作成しようとしたときに、オペレーティング システムでリソース不足が発生しました。</span><span class="sxs-lookup"><span data-stu-id="01a72-157">The operating system ran out of resources when trying to create the native window.</span></span></exception>
        <exception cref="T:System.ComponentModel.Win32Exception"><span data-ttu-id="01a72-158">Win32 ネイティブ API が指定されたウィンドウを作成できませんでした。</span><span class="sxs-lookup"><span data-stu-id="01a72-158">The native Win32 API could not create the specified window.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="01a72-159">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。つまり、<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> プロパティが <see cref="F:System.IntPtr.Zero" /> ではありません。</span><span class="sxs-lookup"><span data-stu-id="01a72-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="01a72-160">最上位レベルのウィンドウを作成します。</span><span class="sxs-lookup"><span data-stu-id="01a72-160">to create a top-level window.</span></span> <span data-ttu-id="01a72-161">ウィンドウ スタイルが子ではない場合、またはウィンドウには、親がない場合にのみ、このアクセス許可が要求されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span></span> <span data-ttu-id="01a72-162">関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span><span class="sxs-lookup"><span data-stu-id="01a72-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="01a72-163">現在処理中のメッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-163">The message that is currently being processed.</span></span></param>
        <summary><span data-ttu-id="01a72-164">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="01a72-164">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-165">通常、のみを呼び出す、<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>メソッド ウィンドウ メッセージを受け取り、メッセージを処理する既定のウィンドウ プロシージャを希望するとします。</span><span class="sxs-lookup"><span data-stu-id="01a72-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="01a72-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> ウィンドウをウィンドウ メッセージを送信する呼び出すことはできません。Win32 を呼び出す`SendMessage`関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="01a72-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="01a72-167">呼び出すとエラーは<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>ときに、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが 0 にします。</span><span class="sxs-lookup"><span data-stu-id="01a72-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="01a72-168">このメソッドを汎用化されたカスタム メッセージの特定のネイティブ ウィンドウまたは .NET Windows フォームの処理を実装する派生クラスでオーバーライド<see cref="T:System.Windows.Forms.Control" />です。</span><span class="sxs-lookup"><span data-stu-id="01a72-168">Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />.</span></span> <span data-ttu-id="01a72-169">前に、後、またはこのメソッドは、標準のメッセージ処理を実行の基本クラスの実装への呼び出しではなく、カスタム処理を実行することができます。</span><span class="sxs-lookup"><span data-stu-id="01a72-169">Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</span></span>  
  
 <span data-ttu-id="01a72-170">これに対し、カスタマイズした追加するメッセージの処理でアプリケーションを実行できるため、<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />のメソッド、<see cref="T:System.Windows.Forms.Application" />クラスです。</span><span class="sxs-lookup"><span data-stu-id="01a72-170">In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</span></span></para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01a72-171">ウィンドウとそのハンドルを破棄します。</span><span class="sxs-lookup"><span data-stu-id="01a72-171">Destroys the window and its handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-172">このメソッドに関連付けられているウィンドウの破棄、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>、設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0 であり、呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>変更を反映するようにメソッドです。</span><span class="sxs-lookup"><span data-stu-id="01a72-172">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="01a72-173">通常、のみを呼び出す<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>したらネイティブ ウィンドウを使用します。</span><span class="sxs-lookup"><span data-stu-id="01a72-173">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01a72-174"><xref:System.Windows.Forms.NativeWindow>クラスに自動的には関連付けられているウィンドウを破棄し、WM_DESTROY メッセージへの応答でそのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="01a72-174">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01a72-175">ウィンドウに関連付けられているリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="01a72-175">Releases the resources associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-176"><xref:System.Windows.Forms.NativeWindow.Finalize%2A>メソッドに現在関連付けられている Win32 派生クラスを削除する<xref:System.Windows.Forms.NativeWindow>インスタンス ハンドルを解放する、関連付けられたウィンドウに WM_CLOSE メッセージをポストします。</span><span class="sxs-lookup"><span data-stu-id="01a72-176">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="01a72-177">ウィンドウのハンドル。</span><span class="sxs-lookup"><span data-stu-id="01a72-177">A handle to a window.</span></span></param>
        <summary><span data-ttu-id="01a72-178">指定したハンドルに関連付けられているウィンドウを取得します。</span><span class="sxs-lookup"><span data-stu-id="01a72-178">Retrieves the window associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="01a72-179">指定したハンドルに関連付けられている <see cref="T:System.Windows.Forms.NativeWindow" />。</span><span class="sxs-lookup"><span data-stu-id="01a72-179">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span></span> <span data-ttu-id="01a72-180">ハンドルに関連付けられているウィンドウがない場合は、このメソッドは <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="01a72-180">This method returns <see langword="null" /> when the handle does not have an associated window.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-181">別のメソッドからハンドルを受信する場合は、このメソッドを使用したハンドルに関連付けられているウィンドウを取得します。</span><span class="sxs-lookup"><span data-stu-id="01a72-181">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="01a72-182">別のハンドルを所有する必要があります既に<xref:System.Windows.Forms.NativeWindow>、現在のプロセスです。 それ以外の場合、`null`が返されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-182">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01a72-183">ウィンドウのハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="01a72-183">Gets the handle for this window.</span></span></summary>
        <value><span data-ttu-id="01a72-184">正常に実行された場合は、関連する Win32 ネイティブ ウィンドウへのハンドルを表す <see cref="T:System.IntPtr" />。ウィンドウに関連付けられているハンドルがない場合は 0。</span><span class="sxs-lookup"><span data-stu-id="01a72-184">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-185">ウィンドウまたはコントロールのハンドルを必要とする Windows API のメソッドを呼び出すときは、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="01a72-185">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01a72-186">次のコード例では、ウィンドウを作成すると、特定のオペレーティング システムのウィンドウ クラス名を示します。</span><span class="sxs-lookup"><span data-stu-id="01a72-186">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="01a72-187">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="01a72-187">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="01a72-188">この例のオーバーライド、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>ときに通知するメソッド、<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更します。</span><span class="sxs-lookup"><span data-stu-id="01a72-188">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="01a72-189">`MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>ボタンに設定します。</span><span class="sxs-lookup"><span data-stu-id="01a72-189">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="01a72-190">これにより、Win32 ボタン ウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-190">This creates a Win32 button window.</span></span> <span data-ttu-id="01a72-191">ボタンのサイズと場所が設定、追加のウィンドウ スタイルを指定するとします。</span><span class="sxs-lookup"><span data-stu-id="01a72-191">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="01a72-192">クラスを使用する方法を示しています、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>切片ウィンドウのメッセージが受信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="01a72-192">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="01a72-193">WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えることができます。</span><span class="sxs-lookup"><span data-stu-id="01a72-193">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01a72-194">一部のコントロール型は、ウィンドウの代わりに、ウィンドウの親にウィンドウ メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="01a72-194">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="01a72-195">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="01a72-195">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01a72-196">ウィンドウのハンドルが変更されたときに呼び出される通知メソッドを指定します。</span><span class="sxs-lookup"><span data-stu-id="01a72-196">Specifies a notification method that is called when the handle for a window is changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-197">このメソッドが呼び出されたときの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更されました。</span><span class="sxs-lookup"><span data-stu-id="01a72-197">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01a72-198">次のコード例では、ウィンドウを作成すると、特定のオペレーティング システムのウィンドウ クラス名を示します。</span><span class="sxs-lookup"><span data-stu-id="01a72-198">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="01a72-199">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="01a72-199">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="01a72-200">この例のオーバーライド、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>ときに通知するメソッド、<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更します。</span><span class="sxs-lookup"><span data-stu-id="01a72-200">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="01a72-201">`MyNativeWindow`クラスの新しいウィンドウを作成する、 <xref:System.Windows.Forms.CreateParams.ClassName%2A> 'éý'`BUTTON`です。</span><span class="sxs-lookup"><span data-stu-id="01a72-201">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="01a72-202">これにより、Win32 ボタン ウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-202">This creates a Win32 button window.</span></span> <span data-ttu-id="01a72-203">ボタンのサイズと場所が設定、追加のウィンドウ スタイルを指定するとします。</span><span class="sxs-lookup"><span data-stu-id="01a72-203">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="01a72-204">クラスを使用する方法を示しています、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドを上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>切片ウィンドウのメッセージが受信するメソッド。</span><span class="sxs-lookup"><span data-stu-id="01a72-204">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="01a72-205">WM_ACTIVATEAPP メッセージをこの例で、これで置換できる実際のプログラムで作成した型に対応するウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-205">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="01a72-206">このコードに示した例からの抜粋、<xref:System.Windows.Forms.NativeWindow>クラスの概要です。</span><span class="sxs-lookup"><span data-stu-id="01a72-206">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="01a72-207">一部のコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="01a72-207">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="01a72-208">参照してください<xref:System.Windows.Forms.NativeWindow>コード全体をします。</span><span class="sxs-lookup"><span data-stu-id="01a72-208">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01a72-209">一部のコントロール型は、ウィンドウの代わりに、ウィンドウの親にウィンドウ メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="01a72-209">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="01a72-210">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="01a72-210">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="01a72-211">ウィンドウ ハンドルに加えられた変更を追跡するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="01a72-211">Override this method to track changes that are made to the window handle.</span></span></para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="01a72-212">未処理のスレッド例外を指定する <see cref="T:System.Exception" />。</span><span class="sxs-lookup"><span data-stu-id="01a72-212">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span></span></param>
        <summary><span data-ttu-id="01a72-213">派生クラスでオーバーライドされた場合、未処理のスレッド例外を管理します。</span><span class="sxs-lookup"><span data-stu-id="01a72-213">When overridden in a derived class, manages an unhandled thread exception.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-214">通常、<xref:System.Windows.Forms.Application.OnThreadException%2A>スレッドの例外を処理します。</span><span class="sxs-lookup"><span data-stu-id="01a72-214">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01a72-215">ウィンドウに関連付けられているハンドルを解放します。</span><span class="sxs-lookup"><span data-stu-id="01a72-215">Releases the handle associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-216">このメソッドは、ウィンドウ ハンドルを破棄しません。</span><span class="sxs-lookup"><span data-stu-id="01a72-216">This method does not destroy the window handle.</span></span> <span data-ttu-id="01a72-217">代わりに、既定のウィンドウ プロシージャをハンドルのウィンドウ プロシージャを設定します。</span><span class="sxs-lookup"><span data-stu-id="01a72-217">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="01a72-218">設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0 と呼び出し<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>変更を反映するようにします。</span><span class="sxs-lookup"><span data-stu-id="01a72-218">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="01a72-219">Windows のハンドルが破棄されることを示す、ネイティブ Win32 へメッセージを受信した場合、ウィンドウは自動的にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="01a72-219">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01a72-220">次のコード例では、ウィンドウ プロシージャでのオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="01a72-220">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="01a72-221">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="01a72-221">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="01a72-222">`MyNativeWindowListener`クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトする方法、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-222">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="01a72-223">クラスの使用方法を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別する方法、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-223">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="01a72-224">ハンドルが割り当てに基づいて、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="01a72-224">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="01a72-225">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="01a72-225">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="01a72-226">このコードに示した例からの抜粋、<xref:System.Windows.Forms.NativeWindow>クラスの概要です。</span><span class="sxs-lookup"><span data-stu-id="01a72-226">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="01a72-227">一部のコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="01a72-227">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="01a72-228">参照してください<xref:System.Windows.Forms.NativeWindow>コード全体をします。</span><span class="sxs-lookup"><span data-stu-id="01a72-228">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="01a72-229">現在の Windows メッセージに関連付けられている <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="01a72-229">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span></span></param>
        <summary><span data-ttu-id="01a72-230">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="01a72-230">Invokes the default window procedure associated with this window.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01a72-231">このメソッドは、ウィンドウのハンドルをウィンドウ メッセージを送信するときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-231">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01a72-232">次のコード例では、ウィンドウ プロシージャでのオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="01a72-232">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="01a72-233">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="01a72-233">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="01a72-234">`MyNativeWindowListener`クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトするメソッド、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-234">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="01a72-235">クラスの使用方法を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別する方法、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="01a72-235">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="01a72-236">基に、ハンドルを割り当て、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="01a72-236">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="01a72-237">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッドです。</span><span class="sxs-lookup"><span data-stu-id="01a72-237">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="01a72-238">このコードに示した例からの抜粋、<xref:System.Windows.Forms.NativeWindow>クラスの概要です。</span><span class="sxs-lookup"><span data-stu-id="01a72-238">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="01a72-239">一部のコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="01a72-239">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="01a72-240">参照してください<xref:System.Windows.Forms.NativeWindow>コード全体をします。</span><span class="sxs-lookup"><span data-stu-id="01a72-240">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para><span data-ttu-id="01a72-241">特定のメッセージ処理を実装するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="01a72-241">Override this method to implement specific message processing.</span></span> <span data-ttu-id="01a72-242">呼び出す<c>ベースです。WndProc</c>の未処理のメッセージ。</span><span class="sxs-lookup"><span data-stu-id="01a72-242">Call <c>base.WndProc</c> for unhandled messages.</span></span></para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>