<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="NativeWindow.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5d4a3ca7cdea7a8179f3cad217bcd84e9c7f3aad2.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d4a3ca7cdea7a8179f3cad217bcd84e9c7f3aad2</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Windows.Forms.NativeWindow">
          <source>Provides a low-level encapsulation of a window handle and a window procedure.</source>
          <target state="translated">ウィンドウ ハンドルとウィンドウ プロシージャの下位のカプセル化を提供します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>This class automatically manages window class creation and registration.</source>
          <target state="translated">このクラスは、ウィンドウ クラスの作成と登録を自動的に管理します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>A window is not eligible for garbage collection when it is associated with a window handle.</source>
          <target state="translated">ウィンドウ ハンドルに関連付けられている場合、ウィンドウはガベージ コレクションの対象ではできません。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>To ensure proper garbage collection, handles must either be destroyed manually using <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> or released using <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.</source>
          <target state="translated">適切なガベージ コレクション ハンドルする必要がありますか、破棄を使用して手動で<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>を使用して解放または<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> method is called when the WM_NCDESTROY message is processed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>へのメッセージが処理されるときに、メソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>This means there are cases in which when you do not need to manually call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>, but it is good practice to do so.</source>
          <target state="translated">つまり、どの場合にする必要はありませんを手動で呼び出す場合があります<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>が、これを行うことをお勧めします。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class provides the following properties and methods to manage handles: <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>, <ph id="ph4">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>, <ph id="ph5">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>, and <ph id="ph6">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスには、次のプロパティとハンドルを管理する方法が用意されています: <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>、 <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>、 <ph id="ph4">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>、 <ph id="ph5">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>、および<ph id="ph6">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</source>
          <target state="translated">次のコード例では、ウィンドウ プロシージャ、および特定のオペレーティング システムのウィンドウ クラス名でウィンドウを作成するオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The example creates two classes that inherit from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> that accomplish this.</source>
          <target state="translated">継承する 2 つのクラスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>これを実現します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph>クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>をインターセプトするメソッド、<ph id="ph3">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージ。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The class demonstrates the usage of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify the window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">クラスは、の使用法を示しています、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>ウィンドウ ハンドルを識別する方法、<ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>が使用されます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The handle is assign based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">ハンドルが割り当てに基づいて、<ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">ときに、<ph id="ph1">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージを受信すると、クラスの呼び出し、<ph id="ph2">`form1.ApplicationActivated`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to <ph id="ph3">`BUTTON`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph>クラスの新しいウィンドウを作成する、 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 'éý'<ph id="ph3">`BUTTON`</ph>です。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>The class demonstrates using the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and overriding the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">クラスの使用方法を示します、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>メソッドをオーバーライドする、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>切片ウィンドウのメッセージが受信するメソッド。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>for the immediate caller to call unmanaged code.</source>
          <target state="translated">アンマネージ コードを呼び出す即時呼び出し元がします。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Windows.Forms.NativeWindow">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.#ctor">
          <source>Initializes an instance of the <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph> class.</source>
          <target state="translated">
          <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph> クラスのインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.#ctor">
          <source>This is the default <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.%23ctor%2A&gt;</ph> constructor provided by the compiler.</source>
          <target state="translated">これは、既定値<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.%23ctor%2A&gt;</ph>コンス トラクターがコンパイラによって指定します。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.#ctor">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスにも、ドメイン全体のメッセージ ハンドラーにアプリケーションとハッシュ テーブルを初期化する静的コンス トラクターがあります。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The handle to assign to this window.</source>
          <target state="translated">ウィンドウに割り当てるハンドル。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>Assigns a handle to this window.</source>
          <target state="translated">ウィンドウにハンドルを割り当てます。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> intercepts window messages sent to the <ph id="ph2">`handle`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> 送信されたウィンドウ メッセージを途中受信、<ph id="ph2">`handle`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>Use <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> to reset the handle's window procedure to the default window procedure.</source>
          <target state="translated">使用して<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャにリセットします。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> method calls the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to indicate that the value of the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>メソッドの呼び出し、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph>ことを示すメソッドの値、<ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>プロパティが変更されました。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The handle to assign cannot be in a different application process.</source>
          <target state="translated">ハンドルを割り当てるには、別のアプリケーション プロセスですることはできません。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure.</source>
          <target state="translated">次のコード例では、ウィンドウ プロシージャでのオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">継承するクラスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>これを実現します。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercepts the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph>クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>をインターセプトする方法、<ph id="ph3">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージ。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The class demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify which window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">クラスの使用方法を示します、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>どのウィンドウを識別する方法を処理、<ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>が使用されます。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The handle is assigned based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">基に、ハンドルを割り当て、<ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">ときに、<ph id="ph1">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージを受信すると、クラスの呼び出し、<ph id="ph2">`form1.ApplicationActivated`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">このコードに示した例からの抜粋、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスの概要です。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">一部のコードは、簡潔さを優先するためには表示されません。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>コード全体をします。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>This window already has a handle.</source>
          <target state="translated">ウィンドウには既にハンドルが割り当てられています。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)">
          <source>The windows procedure for the associated native window could not be retrieved.</source>
          <target state="translated">関連付けられたネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.CreateParams" /&gt;</ph> that specifies the creation parameters for this window.</source>
          <target state="translated">ウィンドウの作成パラメーターを指定する <ph id="ph1">&lt;see cref="T:System.Windows.Forms.CreateParams" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Creates a window and its handle with the specified creation parameters.</source>
          <target state="translated">作成パラメーターを指定してウィンドウとそのハンドルを作成します。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The <ph id="ph1">`cp`</ph> parameter specifies the values that are passed to the native Win32 <ph id="ph2">`CreateWindowEx`</ph> method to create a window and its handle.</source>
          <target state="translated"><ph id="ph1">`cp`</ph>パラメーターは、ネイティブ Win32 に渡される値を指定<ph id="ph2">`CreateWindowEx`</ph>ウィンドウとそのハンドルを作成します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>When the <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> field is not <ph id="ph2">`null`</ph>, the newly created window handle inherits from the specified class.</source>
          <target state="translated">ときに、<ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph>フィールドではありません<ph id="ph2">`null`</ph>、新しく作成したウィンドウ ハンドルを指定したクラスから継承します。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>For example, if <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> is set to <ph id="ph2">`BUTTON`</ph>, the newly created window is based on the Win32 <ph id="ph3">`BUTTON`</ph> window class.</source>
          <target state="translated">たとえば場合、<ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph>に設定されている<ph id="ph2">`BUTTON`</ph>、新しく作成されたウィンドウは、Win32 に基づいて<ph id="ph3">`BUTTON`</ph>ウィンドウ クラスです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Param%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> object must either be <ph id="ph3">`null`</ph> or reference an instance of a class that was declared as a structure.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.CreateParams.Param%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph>オブジェクトがある必要がありますか、<ph id="ph3">`null`</ph>または構造体として宣言されたクラスのインスタンスを参照します。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">このコードに示した例からの抜粋、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスの概要です。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">一部のコードは、簡潔さを優先するためには表示されません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>コード全体をします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The class name provided is registered with the operating system.</source>
          <target state="translated">オペレーティング システムで提供されるクラス名を登録します。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The following code example demonstrates creating a window with a specific operating system window class name.</source>
          <target state="translated">次のコード例では、ウィンドウを作成すると、特定のオペレーティング システムのウィンドウ クラス名を示します。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">継承するクラスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>これを実現します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to <ph id="ph3">`BUTTON`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph>クラスの新しいウィンドウを作成する、 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 'éý'<ph id="ph3">`BUTTON`</ph>です。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>This creates a Win32 button window.</source>
          <target state="translated">これにより、Win32 ボタン ウィンドウが作成されます。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The location and size of the button is set, along with specifying additional window styles.</source>
          <target state="translated">ボタンのサイズと場所が設定、追加のウィンドウ スタイルを指定するとします。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The class demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and override the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">クラスを使用する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>メソッドを上書き、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>切片ウィンドウのメッセージが受信するメソッド。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</source>
          <target state="translated">WM_ACTIVATEAPP メッセージをこの例で、これで置換できる実際のプログラムで作成した型に対応するウィンドウ メッセージ。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Some control types send their window messages to the window parent instead of the window.</source>
          <target state="translated">一部のコントロール型は、ウィンドウの代わりに、ウィンドウの親にウィンドウ メッセージを送信します。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>See the Windows Platform SDK for more information.</source>
          <target state="translated">詳細については、Windows プラットフォーム SDK を参照してください。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The operating system ran out of resources when trying to create the native window.</source>
          <target state="translated">ネイティブ ウィンドウを作成しようとしたときに、オペレーティング システムでリソース不足が発生しました。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The native Win32 API could not create the specified window.</source>
          <target state="translated">Win32 ネイティブ API が指定されたウィンドウを作成できませんでした。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>The handle of the current native window is already assigned; in explanation, the <ph id="ph1">&lt;see cref="P:System.Windows.Forms.NativeWindow.Handle" /&gt;</ph> property is not equal to <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph>.</source>
          <target state="translated">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。つまり、<ph id="ph1">&lt;see cref="P:System.Windows.Forms.NativeWindow.Handle" /&gt;</ph> プロパティが <ph id="ph2">&lt;see cref="F:System.IntPtr.Zero" /&gt;</ph> ではありません。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>to create a top-level window.</source>
          <target state="translated">最上位レベルのウィンドウを作成します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>This permission is only demanded if the window style is not a child or if the window does not have a parent.</source>
          <target state="translated">ウィンドウ スタイルが子ではない場合、またはウィンドウには、親がない場合にのみ、このアクセス許可が要求されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)">
          <source>Associated enumeration: <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></source>
          <target state="translated">関連する列挙。 <ph id="ph1">&lt;see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /&gt;</ph></target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>The message that is currently being processed.</source>
          <target state="translated">現在処理中のメッセージ。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Invokes the default window procedure associated with this window.</source>
          <target state="translated">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Typically, you only call the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> method when you are intercepting window messages and would like the default window procedure to handle the message.</source>
          <target state="translated">通常、のみを呼び出す、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph>メソッド ウィンドウ メッセージを受け取り、メッセージを処理する既定のウィンドウ プロシージャを希望するとします。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> should not be called to send a window message to the window; call the Win32 <ph id="ph2">`SendMessage`</ph> function instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> ウィンドウをウィンドウ メッセージを送信する呼び出すことはできません。Win32 を呼び出す<ph id="ph2">`SendMessage`</ph>関数を使用します。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>It is an error to call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph> when the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property is 0.</source>
          <target state="translated">呼び出すとエラーは<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DefWndProc%2A&gt;</ph>ときに、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>プロパティが 0 にします。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>.</source>
          <target state="translated">このメソッドを汎用化されたカスタム メッセージの特定のネイティブ ウィンドウまたは .NET Windows フォームの処理を実装する派生クラスでオーバーライド<ph id="ph1">&lt;see cref="T:System.Windows.Forms.Control" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.</source>
          <target state="translated">前に、後、またはこのメソッドは、標準のメッセージ処理を実行の基本クラスの実装への呼び出しではなく、カスタム処理を実行することができます。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)">
          <source>In contrast, adding customized message handling for an application can be accomplished through the <ph id="ph1">&lt;see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /&gt;</ph> method of the <ph id="ph2">&lt;see cref="T:System.Windows.Forms.Application" /&gt;</ph> class.</source>
          <target state="translated">これに対し、カスタマイズした追加するメッセージの処理でアプリケーションを実行できるため、<ph id="ph1">&lt;see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /&gt;</ph>のメソッド、<ph id="ph2">&lt;see cref="T:System.Windows.Forms.Application" /&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>Destroys the window and its handle.</source>
          <target state="translated">ウィンドウとそのハンドルを破棄します。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>This method destroys the window associated with the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>, sets the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0, and calls the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to reflect the change.</source>
          <target state="translated">このメソッドに関連付けられているウィンドウの破棄、 <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>、設定、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>プロパティを 0 であり、呼び出し、<ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph>変更を反映するようにメソッドです。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>Typically, you only call <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph> when you are done with the native window.</source>
          <target state="translated">通常、のみを呼び出す<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A&gt;</ph>したらネイティブ ウィンドウを使用します。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.DestroyHandle">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスに自動的には関連付けられているウィンドウを破棄し、WM_DESTROY メッセージへの応答でそのリソースを解放します。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.Finalize">
          <source>Releases the resources associated with this window.</source>
          <target state="translated">ウィンドウに関連付けられているリソースを解放します。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.Finalize">
          <source>The <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Finalize%2A&gt;</ph> method removes the Win32 derived class associated with the current <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Finalize%2A&gt;</ph>メソッドに現在関連付けられている Win32 派生クラスを削除する<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>インスタンス ハンドルを解放する、関連付けられたウィンドウに WM_CLOSE メッセージをポストします。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>A handle to a window.</source>
          <target state="translated">ウィンドウのハンドル。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>Retrieves the window associated with the specified handle.</source>
          <target state="translated">指定したハンドルに関連付けられているウィンドウを取得します。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph> associated with the specified handle.</source>
          <target state="translated">指定したハンドルに関連付けられている <ph id="ph1">&lt;see cref="T:System.Windows.Forms.NativeWindow" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>This method returns <ph id="ph1">&lt;see langword="null" /&gt;</ph> when the handle does not have an associated window.</source>
          <target state="translated">ハンドルに関連付けられているウィンドウがない場合は、このメソッドは <ph id="ph1">&lt;see langword="null" /&gt;</ph> を返します。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>If you receive a handle from another method, use this method to retrieve the window associated with the handle.</source>
          <target state="translated">別のメソッドからハンドルを受信する場合は、このメソッドを使用したハンドルに関連付けられているウィンドウを取得します。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)">
          <source>The handle must already be owned by another <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> in the current process; otherwise, <ph id="ph2">`null`</ph> is returned.</source>
          <target state="translated">別のハンドルを所有する必要があります既に<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>、現在のプロセスです。 それ以外の場合、<ph id="ph2">`null`</ph>が返されます。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Gets the handle for this window.</source>
          <target state="translated">ウィンドウのハンドルを取得します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>If successful, an <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</source>
          <target state="translated">正常に実行された場合は、関連する Win32 ネイティブ ウィンドウへのハンドルを表す <ph id="ph1">&lt;see cref="T:System.IntPtr" /&gt;</ph>。ウィンドウに関連付けられているハンドルがない場合は 0。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Use this method when calling Windows API methods that require a handle for a window or control.</source>
          <target state="translated">ウィンドウまたはコントロールのハンドルを必要とする Windows API のメソッドを呼び出すときは、このメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The following code example demonstrates creating a window with a specific operating system window class name.</source>
          <target state="translated">次のコード例では、ウィンドウを作成すると、特定のオペレーティング システムのウィンドウ クラス名を示します。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">継承するクラスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>これを実現します。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The example also demonstrates overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to be notified when the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> changes.</source>
          <target state="translated">この例のオーバーライド、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph>ときに通知するメソッド、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>変更します。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to BUTTON.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph>クラスの新しいウィンドウを作成する、<ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph>ボタンに設定します。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>This creates a Win32 button window.</source>
          <target state="translated">これにより、Win32 ボタン ウィンドウが作成されます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The location and size of the button is set, along with specifying additional window styles.</source>
          <target state="translated">ボタンのサイズと場所が設定、追加のウィンドウ スタイルを指定するとします。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>The class demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and override the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">クラスを使用する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>メソッドを上書き、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>切片ウィンドウのメッセージが受信するメソッド。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</source>
          <target state="translated">WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えることができます。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>Some control types send their window messages to the window parent instead of the window.</source>
          <target state="translated">一部のコントロール型は、ウィンドウの代わりに、ウィンドウの親にウィンドウ メッセージを送信します。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Windows.Forms.NativeWindow.Handle">
          <source>See the Windows Platform SDK for more information.</source>
          <target state="translated">詳細については、Windows プラットフォーム SDK を参照してください。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Specifies a notification method that is called when the handle for a window is changed.</source>
          <target state="translated">ウィンドウのハンドルが変更されたときに呼び出される通知メソッドを指定します。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>This method is invoked when the value of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property has changed.</source>
          <target state="translated">このメソッドが呼び出されたときの値、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>プロパティが変更されました。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The following code example demonstrates creating a window with a specific operating system window class name.</source>
          <target state="translated">次のコード例では、ウィンドウを作成すると、特定のオペレーティング システムのウィンドウ クラス名を示します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">継承するクラスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>これを実現します。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The example also demonstrates overriding the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> method to be notified when the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> changes.</source>
          <target state="translated">この例のオーバーライド、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph>ときに通知するメソッド、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>変更します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The <ph id="ph1">`MyNativeWindow`</ph> class creates a new window with the <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> set to <ph id="ph3">`BUTTON`</ph>.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindow`</ph>クラスの新しいウィンドウを作成する、 <ph id="ph2">&lt;xref:System.Windows.Forms.CreateParams.ClassName%2A&gt;</ph> 'éý'<ph id="ph3">`BUTTON`</ph>です。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>This creates a Win32 button window.</source>
          <target state="translated">これにより、Win32 ボタン ウィンドウが作成されます。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The location and size of the button is set, along with specifying additional window styles.</source>
          <target state="translated">ボタンのサイズと場所が設定、追加のウィンドウ スタイルを指定するとします。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>The class demonstrates how to use the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph> method and override the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept window messages that are received.</source>
          <target state="translated">クラスを使用する方法を示しています、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.CreateHandle%2A&gt;</ph>メソッドを上書き、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>切片ウィンドウのメッセージが受信するメソッド。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</source>
          <target state="translated">WM_ACTIVATEAPP メッセージをこの例で、これで置換できる実際のプログラムで作成した型に対応するウィンドウ メッセージ。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">このコードに示した例からの抜粋、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスの概要です。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">一部のコードは、簡潔さを優先するためには表示されません。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>コード全体をします。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Some control types send their window messages to the window parent instead of the window.</source>
          <target state="translated">一部のコントロール型は、ウィンドウの代わりに、ウィンドウの親にウィンドウ メッセージを送信します。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>See the Windows Platform SDK for more information.</source>
          <target state="translated">詳細については、Windows プラットフォーム SDK を参照してください。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnHandleChange">
          <source>Override this method to track changes that are made to the window handle.</source>
          <target state="translated">ウィンドウ ハンドルに加えられた変更を追跡するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)">
          <source>An <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph> that specifies the unhandled thread exception.</source>
          <target state="translated">未処理のスレッド例外を指定する <ph id="ph1">&lt;see cref="T:System.Exception" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)">
          <source>When overridden in a derived class, manages an unhandled thread exception.</source>
          <target state="translated">派生クラスでオーバーライドされた場合、未処理のスレッド例外を管理します。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)">
          <source>Typically, <ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph> handles thread exceptions.</source>
          <target state="translated">通常、<ph id="ph1">&lt;xref:System.Windows.Forms.Application.OnThreadException%2A&gt;</ph>スレッドの例外を処理します。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>Releases the handle associated with this window.</source>
          <target state="translated">ウィンドウに関連付けられているハンドルを解放します。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>This method does not destroy the window handle.</source>
          <target state="translated">このメソッドは、ウィンドウ ハンドルを破棄しません。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>Instead, it sets the handle's window procedure to the default window procedure.</source>
          <target state="translated">代わりに、既定のウィンドウ プロシージャをハンドルのウィンドウ プロシージャを設定します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>It sets the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph> property to 0 and calls <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph> to reflect the change.</source>
          <target state="translated">設定、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.Handle%2A&gt;</ph>プロパティを 0 と呼び出し<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A&gt;</ph>変更を反映するようにします。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</source>
          <target state="translated">Windows のハンドルが破棄されることを示す、ネイティブ Win32 へメッセージを受信した場合、ウィンドウは自動的にこのメソッドを呼び出します。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure.</source>
          <target state="translated">次のコード例では、ウィンドウ プロシージャでのオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">継承するクラスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>これを実現します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercepts the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph>クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>をインターセプトする方法、<ph id="ph3">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージ。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The class demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify the window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">クラスの使用方法を示します、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>ウィンドウ ハンドルを識別する方法、<ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>が使用されます。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>The handle is assign based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">ハンドルが割り当てに基づいて、<ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">ときに、<ph id="ph1">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージを受信すると、クラスの呼び出し、<ph id="ph2">`form1.ApplicationActivated`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">このコードに示した例からの抜粋、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスの概要です。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">一部のコードは、簡潔さを優先するためには表示されません。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.ReleaseHandle">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>コード全体をします。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph> that is associated with the current Windows message.</source>
          <target state="translated">現在の Windows メッセージに関連付けられている <ph id="ph1">&lt;see cref="T:System.Windows.Forms.Message" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Invokes the default window procedure associated with this window.</source>
          <target state="translated">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>This method is called when a window message is sent to the handle of the window.</source>
          <target state="translated">このメソッドは、ウィンドウのハンドルをウィンドウ メッセージを送信するときに呼び出されます。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The following code example demonstrates intercepting operating system window messages in a window procedure.</source>
          <target state="translated">次のコード例では、ウィンドウ プロシージャでのオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The example creates a class that inherits from <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> to accomplish this.</source>
          <target state="translated">継承するクラスを作成する例では、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>これを実現します。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The <ph id="ph1">`MyNativeWindowListener`</ph> class hooks into the window procedure of the form passed into the constructor, and overrides the <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph> method to intercept the <ph id="ph3">`WM_ACTIVATEAPP`</ph> window message.</source>
          <target state="translated"><ph id="ph1">`MyNativeWindowListener`</ph>クラス、コンス トラクターに渡されたフォームのウィンドウ プロシージャにフックし、上書き、<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.WndProc%2A&gt;</ph>をインターセプトするメソッド、<ph id="ph3">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージ。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The class demonstrates the use of the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph> methods to identify the window handle the <ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> will use.</source>
          <target state="translated">クラスの使用方法を示します、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow.AssignHandle%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A&gt;</ph>ウィンドウ ハンドルを識別する方法、<ph id="ph3">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>が使用されます。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>The handle is assigned based upon the <ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph> and <ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph> events.</source>
          <target state="translated">基に、ハンドルを割り当て、<ph id="ph1">&lt;xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType&gt;</ph>と<ph id="ph2">&lt;xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType&gt;</ph>イベント。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>When the <ph id="ph1">`WM_ACTIVATEAPP`</ph> window message is received, the class calls the <ph id="ph2">`form1.ApplicationActivated`</ph> method.</source>
          <target state="translated">ときに、<ph id="ph1">`WM_ACTIVATEAPP`</ph>ウィンドウ メッセージを受信すると、クラスの呼び出し、<ph id="ph2">`form1.ApplicationActivated`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>This code is an excerpt from the example shown in the <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> class overview.</source>
          <target state="translated">このコードに示した例からの抜粋、<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>クラスの概要です。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Some code is not shown for the purpose of brevity.</source>
          <target state="translated">一部のコードは、簡潔さを優先するためには表示されません。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>See <ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph> for the whole code listing.</source>
          <target state="translated">参照してください<ph id="ph1">&lt;xref:System.Windows.Forms.NativeWindow&gt;</ph>コード全体をします。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Override this method to implement specific message processing.</source>
          <target state="translated">特定のメッセージ処理を実装するには、このメソッドをオーバーライドします。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)">
          <source>Call <bpt id="p1">&lt;c&gt;</bpt>base.WndProc<ept id="p1">&lt;/c&gt;</ept> for unhandled messages.</source>
          <target state="translated">呼び出す<bpt id="p1">&lt;c&gt;</bpt>ベースです。WndProc<ept id="p1">&lt;/c&gt;</ept>の未処理のメッセージ。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>