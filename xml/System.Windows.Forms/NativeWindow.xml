<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="20f32dfc6b5034cbb067b6294ce9874620a2655a" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37566755" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="b7eb1-101">ウィンドウ ハンドルとウィンドウ プロシージャの下位のカプセル化を提供します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b7eb1-101">Provides a low-level encapsulation of a window handle and a window procedure.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-102">このクラスは、ウィンドウ クラスの作成と登録に自動的に管理します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-102">This class automatically manages window class creation and registration.</span></span>  
  
 <span data-ttu-id="b7eb1-103">ウィンドウ ハンドルに関連付けられているときに、ウィンドウはガベージ コレクションの対象ではありません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-103">A window is not eligible for garbage collection when it is associated with a window handle.</span></span> <span data-ttu-id="b7eb1-104">適切なガベージ コレクションのために、ハンドルする必要がありますか、破棄を使用して手動で<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>を使用して解放または<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-104">To ensure proper garbage collection, handles must either be destroyed manually using <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> or released using <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7eb1-105"><xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>へのメッセージが処理されるときに、メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-105">The <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> method is called when the WM_NCDESTROY message is processed.</span></span> <span data-ttu-id="b7eb1-106">つまり、どの場合では手動で呼び出す必要はない場合がある<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>が、これを行うことをお勧めします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-106">This means there are cases in which when you do not need to manually call <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, but it is good practice to do so.</span></span>  
  
 <span data-ttu-id="b7eb1-107"><xref:System.Windows.Forms.NativeWindow>クラスには、次のプロパティとハンドルを管理する方法が用意されています: <xref:System.Windows.Forms.NativeWindow.Handle%2A>、 <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>、 <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>、および<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-107">The <xref:System.Windows.Forms.NativeWindow> class provides the following properties and methods to manage handles: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7eb1-108">次のコード例では、ウィンドウ プロシージャ、および特定のオペレーティング システムのウィンドウ クラス名でウィンドウを作成するオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-108">The following code example demonstrates intercepting operating system window messages in a window procedure, and creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="b7eb1-109">例では、2 つのクラスを継承するクラスを作成します<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-109">The example creates two classes that inherit from <xref:System.Windows.Forms.NativeWindow> that accomplish this.</span></span>  
  
 <span data-ttu-id="b7eb1-110">`MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトするメソッド、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-110">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="b7eb1-111">クラスの使用を示して、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別するメソッド、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-111">The class demonstrates the usage of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="b7eb1-112">ハンドルが割り当てに基づいて、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-112">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="b7eb1-113">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-113">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="b7eb1-114">`MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定`BUTTON`します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-114">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="b7eb1-115">クラスの使用方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライドを行う、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-115">The class demonstrates using the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and overriding the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span>  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">
      <span data-ttu-id="b7eb1-116">アンマネージ コードを呼び出す直前の呼び出し元。</span>
      <span class="sxs-lookup">
        <span data-stu-id="b7eb1-116">for the immediate caller to call unmanaged code.</span>
      </span>
      <span data-ttu-id="b7eb1-117">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      <span class="sxs-lookup">
        <span data-stu-id="b7eb1-117">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span>
      </span>
    </permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7eb1-118">
            <see cref="T:System.Windows.Forms.NativeWindow" /> クラスのインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-118">Initializes an instance of the <see cref="T:System.Windows.Forms.NativeWindow" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-119">これは、既定値<xref:System.Windows.Forms.NativeWindow.%23ctor%2A>コンパイラによって提供されるコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-119">This is the default <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> constructor provided by the compiler.</span></span> <span data-ttu-id="b7eb1-120"><xref:System.Windows.Forms.NativeWindow>クラスにもアプリケーション ドメイン全体のメッセージ ハンドラーとハッシュ テーブルを初期化する静的コンス トラクターがあります。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-120">The <xref:System.Windows.Forms.NativeWindow> class also has a static constructor that initializes application domain-wide message handlers and hash tables.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="b7eb1-121">ウィンドウに割り当てるハンドル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-121">The handle to assign to this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7eb1-122">ウィンドウにハンドルを割り当てます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-122">Assigns a handle to this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> 送信されたウィンドウ メッセージを途中受信、`handle`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-123"><xref:System.Windows.Forms.NativeWindow.WndProc%2A> intercepts window messages sent to the `handle` parameter.</span></span> <span data-ttu-id="b7eb1-124">使用<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャにリセットします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-124">Use <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> to reset the handle's window procedure to the default window procedure.</span></span>  
  
 <span data-ttu-id="b7eb1-125"><xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>メソッドの呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>ことを示すメソッドの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更されました。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-125">The <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> method calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to indicate that the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7eb1-126">ハンドルを割り当てるには、別のアプリケーション プロセスですることはできません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-126">The handle to assign cannot be in a different application process.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7eb1-127">次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-127">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="b7eb1-128">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-128">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="b7eb1-129">`MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>インターセプトする方法、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-129">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="b7eb1-130">クラスの使用を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>どのウィンドウを識別するメソッドの処理、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-130">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify which window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="b7eb1-131">基に、ハンドルを割り当て、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-131">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="b7eb1-132">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-132">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="b7eb1-133">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-133">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="b7eb1-134">いくつかのコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-134">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="b7eb1-135">参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-135">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="b7eb1-136">ウィンドウには既にハンドルが割り当てられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-136">This window already has a handle.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="b7eb1-137">関連付けられたネイティブ ウィンドウのウィンドウ プロシージャを取得できませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-137">The windows procedure for the associated native window could not be retrieved.</span>
          </span>
        </exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">
          <span data-ttu-id="b7eb1-138">ウィンドウの作成パラメーターを指定する <see cref="T:System.Windows.Forms.CreateParams" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-138">A <see cref="T:System.Windows.Forms.CreateParams" /> that specifies the creation parameters for this window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7eb1-139">作成パラメーターを指定してウィンドウとそのハンドルを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-139">Creates a window and its handle with the specified creation parameters.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-140">`cp`ネイティブ Win32 に渡される値を指定するパラメーター`CreateWindowEx`ウィンドウとそのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-140">The `cp` parameter specifies the values that are passed to the native Win32 `CreateWindowEx` method to create a window and its handle.</span></span>  
  
 <span data-ttu-id="b7eb1-141">ときに、<xref:System.Windows.Forms.CreateParams.ClassName%2A>フィールドがない`null`、新しく作成したウィンドウ ハンドルを指定したクラスから継承します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-141">When the <xref:System.Windows.Forms.CreateParams.ClassName%2A> field is not `null`, the newly created window handle inherits from the specified class.</span></span> <span data-ttu-id="b7eb1-142">たとえば場合、<xref:System.Windows.Forms.CreateParams.ClassName%2A>に設定されている`BUTTON`、新しく作成されたウィンドウは、Win32 に基づいて`BUTTON`ウィンドウ クラス。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-142">For example, if <xref:System.Windows.Forms.CreateParams.ClassName%2A> is set to `BUTTON`, the newly created window is based on the Win32 `BUTTON` window class.</span></span> <span data-ttu-id="b7eb1-143"><xref:System.Windows.Forms.CreateParams.Param%2A>のプロパティ、<xref:System.Windows.Forms.CreateParams.ClassName%2A>オブジェクトがある必要がありますか`null`または構造体として宣言されたクラスのインスタンスを参照します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-143">The <xref:System.Windows.Forms.CreateParams.Param%2A> property of the <xref:System.Windows.Forms.CreateParams.ClassName%2A> object must either be `null` or reference an instance of a class that was declared as a structure.</span></span>  
  
 <span data-ttu-id="b7eb1-144">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-144">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="b7eb1-145">いくつかのコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-145">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="b7eb1-146">参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-146">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7eb1-147">指定されたクラス名は、オペレーティング システムに登録されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-147">The class name provided is registered with the operating system.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7eb1-148">次のコード例では、特定のオペレーティング システムのウィンドウ クラス名でウィンドウの作成を示します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-148">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="b7eb1-149">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-149">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="b7eb1-150">`MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定`BUTTON`します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-150">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="b7eb1-151">これには、Win32 のボタン ウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-151">This creates a Win32 button window.</span></span> <span data-ttu-id="b7eb1-152">追加のウィンドウ スタイルを指定すると、ボタンのサイズと場所に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-152">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="b7eb1-153">クラスは、使用する方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライド、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-153">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="b7eb1-154">WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えられますことができます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-154">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7eb1-155">コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-155">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="b7eb1-156">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-156">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">
          <span data-ttu-id="b7eb1-157">ネイティブ ウィンドウを作成しようとしたときに、オペレーティング システムでリソース不足が発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-157">The operating system ran out of resources when trying to create the native window.</span>
          </span>
        </exception>
        <exception cref="T:System.ComponentModel.Win32Exception">
          <span data-ttu-id="b7eb1-158">Win32 ネイティブ API が指定されたウィンドウを作成できませんでした。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-158">The native Win32 API could not create the specified window.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="b7eb1-159">現在のネイティブ ウィンドウのハンドルが既に割り当てられています。つまり、<see cref="P:System.Windows.Forms.NativeWindow.Handle" /> プロパティが <see cref="F:System.IntPtr.Zero" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-159">The handle of the current native window is already assigned; in explanation, the <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> property is not equal to <see cref="F:System.IntPtr.Zero" />.</span>
          </span>
        </exception>
        <permission cref="T:System.Security.Permissions.UIPermission">
          <span data-ttu-id="b7eb1-160">最上位ウィンドウを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-160">to create a top-level window.</span>
          </span>
          <span data-ttu-id="b7eb1-161">ウィンドウ スタイルが子ではない場合、またはウィンドウには、親がない場合にのみ、このアクセス許可が要求されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-161">This permission is only demanded if the window style is not a child or if the window does not have a parent.</span>
          </span>
          <span data-ttu-id="b7eb1-162">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-162">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></span>
          </span>
        </permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="b7eb1-163">現在処理中のメッセージ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-163">The message that is currently being processed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7eb1-164">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-164">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-165">通常、のみを呼び出す、<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>メソッド ウィンドウ メッセージを受け取り、メッセージを処理する既定のウィンドウ プロシージャを希望するとします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-165">Typically, you only call the <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> method when you are intercepting window messages and would like the default window procedure to handle the message.</span></span> <span data-ttu-id="b7eb1-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> ウィンドウをウィンドウ メッセージを送信する呼び出すことはできません。Win32 呼び出し`SendMessage`関数を使用します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-166"><xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> should not be called to send a window message to the window; call the Win32 `SendMessage` function instead.</span></span>  
  
 <span data-ttu-id="b7eb1-167">呼び出すとエラーが<xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>ときに、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティは 0。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-167">It is an error to call <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property is 0.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b7eb1-168">
            <para>一般化されたカスタム メッセージの特定のネイティブ ウィンドウまたは .NET Windows フォームの処理を実装する派生クラスでは、このメソッドをオーバーライド<see cref="T:System.Windows.Forms.Control" />します。前に、後、または、標準のメッセージの処理を実行します。 このメソッドの基本クラス実装への呼び出しではなく、カスタム処理を実行できます。これに対し、カスタマイズした追加するメッセージ処理アプリケーションは行うことができます、<see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />のメソッド、<see cref="T:System.Windows.Forms.Application" />クラス。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-168">
              <para>Override this method in a derived class to implement generalized custom message handling for a specific native window or .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Custom processing can be performed before, after, or instead of a call to the base class implementation of this method, which performs standard message processing.  In contrast, adding customized message handling for an application can be accomplished through the <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> method of the <see cref="T:System.Windows.Forms.Application" /> class.</para>
            </span>
          </span>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7eb1-169">ウィンドウとそのハンドルを破棄します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-169">Destroys the window and its handle.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-170">このメソッドに関連付けられているウィンドウの破棄、 <xref:System.Windows.Forms.NativeWindow.Handle%2A>、設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0、および呼び出し、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>メソッドは、変更を反映するようにします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-170">This method destroys the window associated with the <xref:System.Windows.Forms.NativeWindow.Handle%2A>, sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0, and calls the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to reflect the change.</span></span> <span data-ttu-id="b7eb1-171">通常、のみを呼び出す<xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>ネイティブ ウィンドウを完了したら。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-171">Typically, you only call <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> when you are done with the native window.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7eb1-172"><xref:System.Windows.Forms.NativeWindow>クラスに自動的には関連付けられているウィンドウを破棄し、WM_DESTROY メッセージへの応答でそのリソースを解放します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-172">The <xref:System.Windows.Forms.NativeWindow> class automatically will destroy the associated window and release its resources in response to a WM_DESTROY message.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7eb1-173">ウィンドウに関連付けられているリソースを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-173">Releases the resources associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-174"><xref:System.Windows.Forms.NativeWindow.Finalize%2A>メソッドに現在関連付けられている Win32 の派生クラスを削除する<xref:System.Windows.Forms.NativeWindow>インスタンス ハンドルを解放する、WM_CLOSE メッセージ、関連付けられているウィンドウをポストします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-174">The <xref:System.Windows.Forms.NativeWindow.Finalize%2A> method removes the Win32 derived class associated with the current <xref:System.Windows.Forms.NativeWindow> instance, releases the handle, and posts a WM_CLOSE message to the associated window.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">
          <span data-ttu-id="b7eb1-175">ウィンドウのハンドル。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-175">A handle to a window.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7eb1-176">指定したハンドルに関連付けられているウィンドウを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-176">Retrieves the window associated with the specified handle.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="b7eb1-177">指定したハンドルに関連付けられている <see cref="T:System.Windows.Forms.NativeWindow" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-177">The <see cref="T:System.Windows.Forms.NativeWindow" /> associated with the specified handle.</span>
          </span>
          <span data-ttu-id="b7eb1-178">ハンドルに関連付けられているウィンドウがない場合は、このメソッドは <see langword="null" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-178">This method returns <see langword="null" /> when the handle does not have an associated window.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-179">別のメソッドからのハンドルを受信する場合は、ハンドルに関連付けられているウィンドウを取得するこのメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-179">If you receive a handle from another method, use this method to retrieve the window associated with the handle.</span></span> <span data-ttu-id="b7eb1-180">ハンドルは、別によって既に所有する必要があります<xref:System.Windows.Forms.NativeWindow>、現在のプロセス以外の場合、`null`が返されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-180">The handle must already be owned by another <xref:System.Windows.Forms.NativeWindow> in the current process; otherwise, `null` is returned.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b7eb1-181">ウィンドウのハンドルを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-181">Gets the handle for this window.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b7eb1-182">正常に実行された場合は、関連する Win32 ネイティブ ウィンドウへのハンドルを表す <see cref="T:System.IntPtr" />。ウィンドウに関連付けられているハンドルがない場合は 0。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-182">If successful, an <see cref="T:System.IntPtr" /> representing the handle to the associated native Win32 window; otherwise, 0 if no handle is associated with the window.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-183">ウィンドウやコントロールのハンドルを必要とする Windows API のメソッドを呼び出すときに、このメソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-183">Use this method when calling Windows API methods that require a handle for a window or control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7eb1-184">次のコード例では、特定のオペレーティング システムのウィンドウ クラス名でウィンドウの作成を示します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-184">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="b7eb1-185">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-185">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="b7eb1-186">オーバーライドも示します、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>時に通知がメソッド、<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-186">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="b7eb1-187">`MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>ボタンに設定します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-187">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to BUTTON.</span></span> <span data-ttu-id="b7eb1-188">これには、Win32 のボタン ウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-188">This creates a Win32 button window.</span></span> <span data-ttu-id="b7eb1-189">追加のウィンドウ スタイルを指定すると、ボタンのサイズと場所に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-189">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="b7eb1-190">クラスは、使用する方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライド、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-190">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="b7eb1-191">WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージと実際のプログラムでに置き換えられます可能性があります。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-191">Although the example looks for the WM_ACTIVATEAPP message, this could be replaced in a real program with window messages specific to the type created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7eb1-192">コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-192">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="b7eb1-193">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-193">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7eb1-194">ウィンドウのハンドルが変更されたときに呼び出される通知メソッドを指定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-194">Specifies a notification method that is called when the handle for a window is changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-195">このメソッドが呼び出されるときの値、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティが変更されました。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-195">This method is invoked when the value of the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property has changed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7eb1-196">次のコード例では、特定のオペレーティング システムのウィンドウ クラス名でウィンドウの作成を示します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-196">The following code example demonstrates creating a window with a specific operating system window class name.</span></span> <span data-ttu-id="b7eb1-197">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-197">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span> <span data-ttu-id="b7eb1-198">オーバーライドも示します、<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>時に通知がメソッド、<xref:System.Windows.Forms.NativeWindow.Handle%2A>変更します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-198">The example also demonstrates overriding the <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> method to be notified when the <xref:System.Windows.Forms.NativeWindow.Handle%2A> changes.</span></span>  
  
 <span data-ttu-id="b7eb1-199">`MyNativeWindow`クラスの新しいウィンドウを作成する、<xref:System.Windows.Forms.CreateParams.ClassName%2A>設定`BUTTON`します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-199">The `MyNativeWindow` class creates a new window with the <xref:System.Windows.Forms.CreateParams.ClassName%2A> set to `BUTTON`.</span></span> <span data-ttu-id="b7eb1-200">これには、Win32 のボタン ウィンドウが作成されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-200">This creates a Win32 button window.</span></span> <span data-ttu-id="b7eb1-201">追加のウィンドウ スタイルを指定すると、ボタンのサイズと場所に設定されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-201">The location and size of the button is set, along with specifying additional window styles.</span></span> <span data-ttu-id="b7eb1-202">クラスは、使用する方法を示します、<xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>メソッドとオーバーライド、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>メソッドを受信するウィンドウ メッセージをインターセプトします。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-202">The class demonstrates how to use the <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> method and override the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept window messages that are received.</span></span> <span data-ttu-id="b7eb1-203">WM_ACTIVATEAPP メッセージをこの例は、これで作成した型に対応するウィンドウ メッセージに実際のプログラムでに置き換えられますことができます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-203">Although the example looks for the WM_ACTIVATEAPP message, this can be replaced in a real program with window messages specific to the type created.</span></span>  
  
 <span data-ttu-id="b7eb1-204">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-204">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="b7eb1-205">いくつかのコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-205">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="b7eb1-206">参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-206">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="b7eb1-207">コントロールの種類によっては、ウィンドウではなく、ウィンドウの親をウィンドウ メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-207">Some control types send their window messages to the window parent instead of the window.</span></span> <span data-ttu-id="b7eb1-208">詳細については、Windows プラットフォーム SDK を参照してください。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-208">See the Windows Platform SDK for more information.</span></span>  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b7eb1-209">
            <para>ウィンドウ ハンドルに加えられた変更を追跡するには、このメソッドをオーバーライドします。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-209">
              <para>Override this method to track changes that are made to the window handle.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="b7eb1-210">未処理のスレッド例外を指定する <see cref="T:System.Exception" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-210">An <see cref="T:System.Exception" /> that specifies the unhandled thread exception.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7eb1-211">派生クラスでオーバーライドされた場合、未処理のスレッド例外を管理します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-211">When overridden in a derived class, manages an unhandled thread exception.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-212">通常、<xref:System.Windows.Forms.Application.OnThreadException%2A>スレッドの例外のハンドル。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-212">Typically, <xref:System.Windows.Forms.Application.OnThreadException%2A> handles thread exceptions.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="b7eb1-213">ウィンドウに関連付けられているハンドルを解放します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-213">Releases the handle associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-214">このメソッドは、ウィンドウ ハンドルを破棄しません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-214">This method does not destroy the window handle.</span></span> <span data-ttu-id="b7eb1-215">代わりに、ハンドルのウィンドウ プロシージャを既定のウィンドウ プロシージャに設定します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-215">Instead, it sets the handle's window procedure to the default window procedure.</span></span> <span data-ttu-id="b7eb1-216">設定、<xref:System.Windows.Forms.NativeWindow.Handle%2A>プロパティを 0 に呼び出し<xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A>変更が反映されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-216">It sets the <xref:System.Windows.Forms.NativeWindow.Handle%2A> property to 0 and calls <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> to reflect the change.</span></span>  
  
 <span data-ttu-id="b7eb1-217">Windows のハンドルが破棄されたことを示すネイティブの Win32 へメッセージを受信した場合、ウィンドウは自動的にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-217">A window automatically calls this method if it receives a native Win32 WM_NCDESTROY message, indicating that Windows has destroyed the handle.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7eb1-218">次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-218">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="b7eb1-219">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-219">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="b7eb1-220">`MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>インターセプトする方法、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-220">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercepts the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="b7eb1-221">クラスの使用を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別するメソッド、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-221">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="b7eb1-222">ハンドルが割り当てに基づいて、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-222">The handle is assign based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="b7eb1-223">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-223">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="b7eb1-224">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-224">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="b7eb1-225">いくつかのコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-225">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="b7eb1-226">参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-226">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">
          <span data-ttu-id="b7eb1-227">現在の Windows メッセージに関連付けられている <see cref="T:System.Windows.Forms.Message" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-227">A <see cref="T:System.Windows.Forms.Message" /> that is associated with the current Windows message.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b7eb1-228">ウィンドウに関連付けられている既定のウィンドウ プロシージャを呼び出します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-228">Invokes the default window procedure associated with this window.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b7eb1-229">ウィンドウのハンドルをウィンドウ メッセージが送信されるときに、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-229">This method is called when a window message is sent to the handle of the window.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b7eb1-230">次のコード例では、ウィンドウ プロシージャでオペレーティング システムのウィンドウ メッセージを受け取る方法を示します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-230">The following code example demonstrates intercepting operating system window messages in a window procedure.</span></span> <span data-ttu-id="b7eb1-231">継承するクラスを作成する例では、<xref:System.Windows.Forms.NativeWindow>これを実現します。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-231">The example creates a class that inherits from <xref:System.Windows.Forms.NativeWindow> to accomplish this.</span></span>  
  
 <span data-ttu-id="b7eb1-232">`MyNativeWindowListener`クラス、コンス トラクターに渡されるフォームのウィンドウ プロシージャにフックし、上書き、<xref:System.Windows.Forms.NativeWindow.WndProc%2A>をインターセプトするメソッド、`WM_ACTIVATEAPP`ウィンドウ メッセージ。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-232">The `MyNativeWindowListener` class hooks into the window procedure of the form passed into the constructor, and overrides the <xref:System.Windows.Forms.NativeWindow.WndProc%2A> method to intercept the `WM_ACTIVATEAPP` window message.</span></span> <span data-ttu-id="b7eb1-233">クラスの使用を示します、<xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>と<xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ウィンドウ ハンドルを識別するメソッド、<xref:System.Windows.Forms.NativeWindow>が使用されます。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-233">The class demonstrates the use of the <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> and <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> methods to identify the window handle the <xref:System.Windows.Forms.NativeWindow> will use.</span></span> <span data-ttu-id="b7eb1-234">基に、ハンドルを割り当て、<xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-234">The handle is assigned based upon the <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> events.</span></span> <span data-ttu-id="b7eb1-235">ときに、`WM_ACTIVATEAPP`ウィンドウ メッセージを受信すると、クラスの呼び出し、`form1.ApplicationActivated`メソッド。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-235">When the `WM_ACTIVATEAPP` window message is received, the class calls the `form1.ApplicationActivated` method.</span></span>  
  
 <span data-ttu-id="b7eb1-236">このコードは、抜粋の例に示すように、<xref:System.Windows.Forms.NativeWindow>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-236">This code is an excerpt from the example shown in the <xref:System.Windows.Forms.NativeWindow> class overview.</span></span> <span data-ttu-id="b7eb1-237">いくつかのコードは、簡潔さを優先するためには表示されません。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-237">Some code is not shown for the purpose of brevity.</span></span> <span data-ttu-id="b7eb1-238">参照してください<xref:System.Windows.Forms.NativeWindow>全体のコードの一覧。</span><span class="sxs-lookup"><span data-stu-id="b7eb1-238">See <xref:System.Windows.Forms.NativeWindow> for the whole code listing.</span></span>  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="b7eb1-239">
            <para>特定のメッセージの処理を実装するには、このメソッドをオーバーライドします。呼び出す<c>ベース。WndProc</c>未処理のメッセージ。</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="b7eb1-239">
              <para>Override this method to implement specific message processing. Call <c>base.WndProc</c> for unhandled messages.</para>
            </span>
          </span>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>