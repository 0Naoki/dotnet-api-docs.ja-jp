<Type Name="Control" FullName="System.Windows.Forms.Control">
  <Metadata><Meta Name="ms.openlocfilehash" Value="15f0697e24140411c608f9096381b11c01294fca" /><Meta Name="ms.sourcegitcommit" Value="f61362e4134a78bac27d2c8136823a467216f4ab" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="05/15/2019" /><Meta Name="ms.locfileid" Value="65629457" /></Metadata><TypeSignature Language="C#" Value="public class Control : System.ComponentModel.Component, IDisposable, System.ComponentModel.ISynchronizeInvoke, System.Windows.Forms.IBindableComponent, System.Windows.Forms.IDropTarget, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi Control extends System.ComponentModel.Component implements class System.ComponentModel.IComponent, class System.ComponentModel.ISynchronizeInvoke, class System.IDisposable, class System.Windows.Forms.IBindableComponent, class System.Windows.Forms.IDropTarget, class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Control" />
  <TypeSignature Language="VB.NET" Value="Public Class Control&#xA;Inherits Component&#xA;Implements IBindableComponent, IDisposable, IDropTarget, ISynchronizeInvoke, IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class Control : System::ComponentModel::Component, IDisposable, System::ComponentModel::ISynchronizeInvoke, System::Windows::Forms::IBindableComponent, System::Windows::Forms::IDropTarget, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type Control = class&#xA;    inherit Component&#xA;    interface IDropTarget&#xA;    interface ISynchronizeInvoke&#xA;    interface IWin32Window&#xA;    interface IComponent&#xA;    interface IDisposable&#xA;    interface IBindableComponent" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.IComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.ComponentModel.ISynchronizeInvoke</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IBindableComponent</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IDropTarget</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Design.Serialization.DesignerSerializer("System.Windows.Forms.Design.ControlCodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.ComponentModel.Design.Serialization.CodeDomSerializer, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ControlDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="97318-101">視覚的に表現されるコンポーネントであるコントロールの基本クラスを定義します。</span><span class="sxs-lookup"><span data-stu-id="97318-101">Defines the base class for controls, which are components with visual representation.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-102">継承するコントロール クラスを作成、 <xref:System.Windows.Forms.UserControl>、<xref:System.Windows.Forms.Control>クラス、またはその他の Windows フォームからコントロールを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-102">To create your own control class, inherit from the <xref:System.Windows.Forms.UserControl>, <xref:System.Windows.Forms.Control> classes, or from the other Windows Forms provided controls.</span></span> <span data-ttu-id="97318-103">カスタム コントロールを作成する方法の詳細については、次を参照してください。[カスタム Windows フォーム コントロールの開発、.NET Framework と共に](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-103">For more information about authoring custom controls, see [Developing Custom Windows Forms Controls with the .NET Framework](~/docs/framework/winforms/controls/developing-custom-windows-forms-controls.md).</span></span>  
  
 <span data-ttu-id="97318-104"><xref:System.Windows.Forms.Control>クラスは、ユーザーに情報を表示するクラスに必要な非常に基本的な機能を実装します。</span><span class="sxs-lookup"><span data-stu-id="97318-104">The <xref:System.Windows.Forms.Control> class implements very basic functionality required by classes that display information to the user.</span></span> <span data-ttu-id="97318-105">キーボードとポインティング デバイスによるユーザー入力を処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-105">It handles user input through the keyboard and pointing devices.</span></span> <span data-ttu-id="97318-106">メッセージのルーティングとセキュリティを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-106">It handles message routing and security.</span></span> <span data-ttu-id="97318-107">描画を実装しませんが、(その位置とサイズ) のコントロールの境界を定義します。</span><span class="sxs-lookup"><span data-stu-id="97318-107">It defines the bounds of a control (its position and size), although it does not implement painting.</span></span> <span data-ttu-id="97318-108">ウィンドウ ハンドルを提供します (`hWnd`)。</span><span class="sxs-lookup"><span data-stu-id="97318-108">It provides a window handle (`hWnd`).</span></span>  
  
 <span data-ttu-id="97318-109">Windows フォーム コントロールは、子コントロールは、周囲の環境のように表示できるように、アンビエント プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-109">Windows Forms controls use ambient properties so child controls can appear like their surrounding environment.</span></span> <span data-ttu-id="97318-110">*アンビエント プロパティ*いない場合、そのコントロールのプロパティは、設定、親コントロールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97318-110">An *ambient property* is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="97318-111">コントロールがない場合、 <xref:System.Windows.Forms.Control.Parent%2A>、およびプロパティが設定されていない、アンビエント プロパティの値を決定しようとしているコントロール、<xref:System.Windows.Forms.Control.Site%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-111">If the control does not have a <xref:System.Windows.Forms.Control.Parent%2A>, and the property is not set, the control attempts to determine the value of the ambient property through the <xref:System.Windows.Forms.Control.Site%2A> property.</span></span> <span data-ttu-id="97318-112">場合は、サイトがアンビエント プロパティをサポートしていない場合、コントロールは配置されませんが、またはプロパティに設定されていない場合、<xref:System.Windows.Forms.AmbientProperties>コントロールが既定値を使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-112">If the control is not sited, if the site does not support ambient properties, or if the property is not set on the <xref:System.Windows.Forms.AmbientProperties>, the control uses its own default values.</span></span> <span data-ttu-id="97318-113">通常、コントロールの特性を表しますアンビエント プロパティなど<xref:System.Windows.Forms.Control.BackColor%2A>は子コントロールに伝達します。</span><span class="sxs-lookup"><span data-stu-id="97318-113">Typically, an ambient property represents a characteristic of a control, such as <xref:System.Windows.Forms.Control.BackColor%2A>, that is communicated to a child control.</span></span> <span data-ttu-id="97318-114">たとえば、<xref:System.Windows.Forms.Button>が、同じ<xref:System.Windows.Forms.Control.BackColor%2A>親として<xref:System.Windows.Forms.Form>既定では。</span><span class="sxs-lookup"><span data-stu-id="97318-114">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="97318-115">によって提供されるアンビエント プロパティ、<xref:System.Windows.Forms.Control>クラスが含まれます: <xref:System.Windows.Forms.Control.Cursor%2A>、 <xref:System.Windows.Forms.Control.Font%2A>、 <xref:System.Windows.Forms.Control.BackColor%2A>、 <xref:System.Windows.Forms.Control.ForeColor%2A>、および<xref:System.Windows.Forms.Control.RightToLeft%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-115">Ambient properties provided by the <xref:System.Windows.Forms.Control> class include: <xref:System.Windows.Forms.Control.Cursor%2A>, <xref:System.Windows.Forms.Control.Font%2A>, <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.ForeColor%2A>, and <xref:System.Windows.Forms.Control.RightToLeft%2A>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-116">Windows フォーム アプリケーションを visual スタイルをサポートするために、必ず設定して、<xref:System.Windows.Forms.FlatStyle>プロパティを`System`され、実行可能ファイルを含むマニフェストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="97318-116">To make your Windows Forms application support visual styles, be sure to set the <xref:System.Windows.Forms.FlatStyle> property to `System` and include a manifest with your executable.</span></span> <span data-ttu-id="97318-117">マニフェストは、アプリケーション実行可能ファイル内のリソースとして、または実行可能ファイルと同じディレクトリ内にある別のファイルとして含まれている XML ファイルです。</span><span class="sxs-lookup"><span data-stu-id="97318-117">A manifest is an XML file that is included either as a resource within your application executable or as a separate file that resides in the same directory as the executable file.</span></span> <span data-ttu-id="97318-118">マニフェストの例では、例を参照してください、<xref:System.Windows.Forms.FlatStyle>列挙体。</span><span class="sxs-lookup"><span data-stu-id="97318-118">For an example of a manifest, see the Example section of the <xref:System.Windows.Forms.FlatStyle> enumeration.</span></span> <span data-ttu-id="97318-119">詳細については、visual スタイルを使用して、次を参照してください。[視覚スタイル](https://msdn.microsoft.com/library/windows/desktop/bb773187.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-119">For more information about using visual styles, see [Visual Styles](https://msdn.microsoft.com/library/windows/desktop/bb773187.aspx).</span></span>  
  
 <span data-ttu-id="97318-120">Windows フォームが組み込まれており、ユーザー補助のサポートと、音声入力ユーティリティは、画面、キーボード、画面拡大ツールとレビュー担当者のユーティリティなどのユーザー補助クライアント アプリケーションを使用することができる、アプリケーションに関する情報を提供します代替入力デバイス、およびキーボード拡張ユーティリティ。</span><span class="sxs-lookup"><span data-stu-id="97318-120">Windows Forms has accessibility support built in, and provides information about your application that enables it to work with accessibility client applications such as screen enlarger and reviewer utilities, voice input utilities, on-screen keyboards, alternative input devices, and keyboard enhancement utilities.</span></span> <span data-ttu-id="97318-121">ユーザー補助クライアント アプリケーションに追加の情報を提供することがあります。</span><span class="sxs-lookup"><span data-stu-id="97318-121">Sometimes you will want to provide additional information to accessibility client applications.</span></span> <span data-ttu-id="97318-122">この追加情報を提供するための 2 つの方法はあります。</span><span class="sxs-lookup"><span data-stu-id="97318-122">There are two ways of providing this additional information.</span></span> <span data-ttu-id="97318-123">設定することができます、 <xref:System.Windows.Forms.Control.AccessibleName%2A>、 <xref:System.Windows.Forms.Control.AccessibleDescription%2A>、 <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>、および<xref:System.Windows.Forms.Control.AccessibleRole%2A>プロパティの値は、ユーザー補助クライアント アプリケーションに報告されます。</span><span class="sxs-lookup"><span data-stu-id="97318-123">You can set the <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleDescription%2A>, <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> property values, which will be reported to accessibility client applications.</span></span> <span data-ttu-id="97318-124">このメソッドは通常、既存のコントロールの制限付きのユーザー補助情報の提供に使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-124">This method is typically used to provide limited accessibility information for existing controls.</span></span> <span data-ttu-id="97318-125">派生する独自のクラスを記述する代わりに、<xref:System.Windows.Forms.AccessibleObject>または<xref:System.Windows.Forms.Control.ControlAccessibleObject>のために必要な限り多くのユーザー補助情報を提供するクラス。</span><span class="sxs-lookup"><span data-stu-id="97318-125">Alternatively, you can write your own class deriving from the <xref:System.Windows.Forms.AccessibleObject> or <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes, providing as much accessibility information as needed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-126">優れたパフォーマンスを維持するには、コンス トラクターで、コントロールのサイズを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="97318-126">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="97318-127">推奨される方法は、オーバーライドする、<xref:System.Windows.Forms.Control.DefaultSize%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-127">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-128">データ バインドを追加すれば、<xref:System.Windows.Forms.Control>コンス トラクター内。</span><span class="sxs-lookup"><span data-stu-id="97318-128">Do not add data bindings for a <xref:System.Windows.Forms.Control> in its constructor.</span></span> <span data-ttu-id="97318-129">そうと、コード生成でエラーが発生、望ましくない動作が発生することができます。</span><span class="sxs-lookup"><span data-stu-id="97318-129">Doing so will cause errors in code generation and can cause unwanted behavior.</span></span>  
  
 <span data-ttu-id="97318-130">ほとんどのコントロールの<xref:System.Windows.Forms>名前空間をベースとして開発に基になる Windows のコモン コントロールを利用します。</span><span class="sxs-lookup"><span data-stu-id="97318-130">The majority of the controls in the <xref:System.Windows.Forms> namespace use the underlying Windows common control as a base to build on.</span></span> <span data-ttu-id="97318-131">Windows コモン コントロールの詳細については、次を参照してください。[全般コントロール リファレンス](https://msdn.microsoft.com/library/windows/desktop/bb775497.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-131">For more information about the Windows common controls, see [General Control Reference](https://msdn.microsoft.com/library/windows/desktop/bb775497.aspx).</span></span>  
  
 <span data-ttu-id="97318-132">別のプロセスからの Windows フォーム コントロールを識別するために、標準を使用して、`SendMessage`標準への呼び出し。</span><span class="sxs-lookup"><span data-stu-id="97318-132">To identify Windows Forms controls from a separate process, use a standard `SendMessage` call to pass the WM_GETCONTROLNAME message.</span></span> <span data-ttu-id="97318-133">標準は、言語と Windows の階層に依存しません。</span><span class="sxs-lookup"><span data-stu-id="97318-133">WM_GETCONTROLNAME is independent of the language and Windows hierarchy.</span></span> <span data-ttu-id="97318-134">詳細については、トピックでは、"推奨ソリューションの Windows Forms"を参照してください。[を自動化する Windows フォーム](https://msdn.microsoft.com/library/ms996405.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-134">For more information, see the "Recommended Solution for Windows Forms" topic in[Automating Windows Forms](https://msdn.microsoft.com/library/ms996405.aspx).</span></span>  
  
 <span data-ttu-id="97318-135">使用して、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティを複数のスレッドからコントロールへのアクセスを同期します。</span><span class="sxs-lookup"><span data-stu-id="97318-135">Use the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property to synchronize access to the control from multiple threads.</span></span> <span data-ttu-id="97318-136">マルチ スレッドの Windows フォーム コントロールの詳細については、次を参照してください。[方法。Windows フォーム コントロールのスレッド セーフな呼び出しを行う](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</span><span class="sxs-lookup"><span data-stu-id="97318-136">For more information about multithreaded Windows Forms controls, see [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe><span data-ttu-id="97318-137">次のメンバーはスレッド セーフであるだけ: <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />、 <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />、 <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />、 <see cref="P:System.Windows.Forms.Control.InvokeRequired" />、および<see cref="M:System.Windows.Forms.Control.CreateGraphics" />コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-137">Only the following members are thread safe: <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />, <see cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />, <see cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />, <see cref="P:System.Windows.Forms.Control.InvokeRequired" />, and <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-138">呼び出す<see cref="M:System.Windows.Forms.Control.CreateGraphics" />コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-138">Calling <see cref="M:System.Windows.Forms.Control.CreateGraphics" /> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span></threadsafe>
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.ScrollableControl" />
    <altmember cref="T:System.Windows.Forms.ContainerControl" />
    <altmember cref="T:System.ComponentModel.Component" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-139"><see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="97318-139">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-140"><see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを既定の設定で初期化します。</span><span class="sxs-lookup"><span data-stu-id="97318-140">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with default settings.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-141"><xref:System.Windows.Forms.Control>クラスは、Windows フォーム アプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="97318-141">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="97318-142">クラスのインスタンスを作成するこのクラスが通常使用しないため、このコンス トラクターは通常直接呼び出されることがなくは、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-142">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="97318-143">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="97318-143">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="97318-144">テキストを指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="97318-144">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-145"><xref:System.Windows.Forms.Control>クラスは、Windows フォーム アプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="97318-145">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="97318-146">クラスのインスタンスを作成するこのクラスが通常使用しないため、このコンス トラクターは通常直接呼び出されることがなくは、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-146">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="97318-147">このバージョンの<xref:System.Windows.Forms.Control.%23ctor%2A>コンス トラクターに初期設定<xref:System.Windows.Forms.Control.Text%2A>プロパティの値を`text`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="97318-147">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="97318-148">コントロールの親である <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-148">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="97318-149">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="97318-149">The text displayed by the control.</span></span></param>
        <summary><span data-ttu-id="97318-150">テキストを指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを子コントロールとして初期化します。</span><span class="sxs-lookup"><span data-stu-id="97318-150">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-151"><xref:System.Windows.Forms.Control>クラスは、Windows フォーム アプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="97318-151">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="97318-152">クラスのインスタンスを作成するこのクラスが通常使用しないため、このコンス トラクターは通常直接呼び出されることがなくは、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-152">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="97318-153">このバージョンの<xref:System.Windows.Forms.Control.%23ctor%2A>コンス トラクターに初期設定<xref:System.Windows.Forms.Control.Text%2A>プロパティの値を`text`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="97318-153">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="97318-154">コンス トラクターを親コントロールのコントロールを追加することも<xref:System.Windows.Forms.Control.ControlCollection>します。</span><span class="sxs-lookup"><span data-stu-id="97318-154">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text"><span data-ttu-id="97318-155">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="97318-155">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="97318-156">コントロールのコンテナーの左端からのコントロールの <see cref="P:System.Drawing.Point.X" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-156">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="97318-157">値は <see cref="P:System.Windows.Forms.Control.Left" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-157">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="97318-158">コントロールのコンテナーの上端からのコントロールの <see cref="P:System.Drawing.Point.Y" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-158">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="97318-159">値は <see cref="P:System.Windows.Forms.Control.Top" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-159">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="97318-160">コントロールの幅 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-160">The width of the control, in pixels.</span></span> <span data-ttu-id="97318-161">値は <see cref="P:System.Windows.Forms.Control.Width" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-161">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="97318-162">コントロールの高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-162">The height of the control, in pixels.</span></span> <span data-ttu-id="97318-163">値は <see cref="P:System.Windows.Forms.Control.Height" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-163">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="97318-164">テキスト、サイズ、および位置を指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="97318-164">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-165"><xref:System.Windows.Forms.Control>クラスは、Windows フォーム アプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="97318-165">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="97318-166">クラスのインスタンスを作成するこのクラスが通常使用しないため、このコンス トラクターは通常直接呼び出されることがなくは、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-166">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="97318-167">このバージョンの<xref:System.Windows.Forms.Control.%23ctor%2A>コンス トラクターに初期設定<xref:System.Windows.Forms.Control.Text%2A>プロパティの値を`text`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="97318-167">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="97318-168">初期<xref:System.Windows.Forms.Control.Size%2A>と<xref:System.Windows.Forms.Control.Location%2A>によって決まりますが、コントロールの`left`、 `top`、`width`と`height`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="97318-168">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-169">優れたパフォーマンスを維持するには、コンス トラクターで、コントロールのサイズを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="97318-169">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="97318-170">推奨される方法は、オーバーライドする、<xref:System.Windows.Forms.Control.DefaultSize%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-170">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Control (System.Windows.Forms.Control parent, string text, int left, int top, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Control parent, string text, int32 left, int32 top, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.#ctor(System.Windows.Forms.Control,System.String,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (parent As Control, text As String, left As Integer, top As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Control(System::Windows::Forms::Control ^ parent, System::String ^ text, int left, int top, int width, int height);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Control : System.Windows.Forms.Control * string * int * int * int * int -&gt; System.Windows.Forms.Control" Usage="new System.Windows.Forms.Control (parent, text, left, top, width, height)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="parent" Type="System.Windows.Forms.Control" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="left" Type="System.Int32" />
        <Parameter Name="top" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="parent"><span data-ttu-id="97318-171">コントロールの親である <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-171">The <see cref="T:System.Windows.Forms.Control" /> to be the parent of the control.</span></span></param>
        <param name="text"><span data-ttu-id="97318-172">コントロールによって表示されるテキスト。</span><span class="sxs-lookup"><span data-stu-id="97318-172">The text displayed by the control.</span></span></param>
        <param name="left"><span data-ttu-id="97318-173">コントロールのコンテナーの左端からのコントロールの <see cref="P:System.Drawing.Point.X" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-173">The <see cref="P:System.Drawing.Point.X" /> position of the control, in pixels, from the left edge of the control's container.</span></span> <span data-ttu-id="97318-174">値は <see cref="P:System.Windows.Forms.Control.Left" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-174">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Left" /> property.</span></span></param>
        <param name="top"><span data-ttu-id="97318-175">コントロールのコンテナーの上端からのコントロールの <see cref="P:System.Drawing.Point.Y" /> 位置 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-175">The <see cref="P:System.Drawing.Point.Y" /> position of the control, in pixels, from the top edge of the control's container.</span></span> <span data-ttu-id="97318-176">値は <see cref="P:System.Windows.Forms.Control.Top" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-176">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Top" /> property.</span></span></param>
        <param name="width"><span data-ttu-id="97318-177">コントロールの幅 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-177">The width of the control, in pixels.</span></span> <span data-ttu-id="97318-178">値は <see cref="P:System.Windows.Forms.Control.Width" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-178">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Width" /> property.</span></span></param>
        <param name="height"><span data-ttu-id="97318-179">コントロールの高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-179">The height of the control, in pixels.</span></span> <span data-ttu-id="97318-180">値は <see cref="P:System.Windows.Forms.Control.Height" /> プロパティに代入されます。</span><span class="sxs-lookup"><span data-stu-id="97318-180">The value is assigned to the <see cref="P:System.Windows.Forms.Control.Height" /> property.</span></span></param>
        <summary><span data-ttu-id="97318-181">テキスト、サイズ、および位置を指定して、<see cref="T:System.Windows.Forms.Control" /> クラスの新しいインスタンスを子コントロールとして初期化します。</span><span class="sxs-lookup"><span data-stu-id="97318-181">Initializes a new instance of the <see cref="T:System.Windows.Forms.Control" /> class as a child control, with specific text, size, and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-182"><xref:System.Windows.Forms.Control>クラスは、Windows フォーム アプリケーションで使用されるすべてのコントロールの基本クラスです。</span><span class="sxs-lookup"><span data-stu-id="97318-182">The <xref:System.Windows.Forms.Control> class is the base class for all controls used in a Windows Forms application.</span></span> <span data-ttu-id="97318-183">クラスのインスタンスを作成するこのクラスが通常使用しないため、このコンス トラクターは通常直接呼び出されることがなくは、代わりに派生クラスによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-183">Because this class is not typically used to create an instance of the class, this constructor is typically not called directly but is instead called by a derived class.</span></span>  
  
 <span data-ttu-id="97318-184">このバージョンの<xref:System.Windows.Forms.Control.%23ctor%2A>コンス トラクターに初期設定<xref:System.Windows.Forms.Control.Text%2A>プロパティの値を`text`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="97318-184">This version of the <xref:System.Windows.Forms.Control.%23ctor%2A> constructor sets the initial <xref:System.Windows.Forms.Control.Text%2A> property value to the `text` parameter value.</span></span> <span data-ttu-id="97318-185">コンス トラクターを親コントロールのコントロールを追加することも<xref:System.Windows.Forms.Control.ControlCollection>します。</span><span class="sxs-lookup"><span data-stu-id="97318-185">The constructor also adds the control to the parent control's <xref:System.Windows.Forms.Control.ControlCollection>.</span></span> <span data-ttu-id="97318-186">初期<xref:System.Windows.Forms.Control.Size%2A>と<xref:System.Windows.Forms.Control.Location%2A>によって決まりますが、コントロールの`left`、 `top`、`width`と`height`パラメーターの値。</span><span class="sxs-lookup"><span data-stu-id="97318-186">The initial <xref:System.Windows.Forms.Control.Size%2A> and <xref:System.Windows.Forms.Control.Location%2A> of the control are determined by the `left`, `top`, `width` and `height` parameter values.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-187">優れたパフォーマンスを維持するには、コンス トラクターで、コントロールのサイズを設定しないでください。</span><span class="sxs-lookup"><span data-stu-id="97318-187">To maintain better performance, do not set the size of a control in its constructor.</span></span> <span data-ttu-id="97318-188">推奨される方法は、オーバーライドする、<xref:System.Windows.Forms.Control.DefaultSize%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-188">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="AccessibilityNotifyClients">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-189">ユーザー補助クライアント アプリケーションに <see cref="T:System.Windows.Forms.AccessibleEvents" /> を通知します。</span><span class="sxs-lookup"><span data-stu-id="97318-189">Notifies the accessibility client applications of <see cref="T:System.Windows.Forms.AccessibleEvents" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected internal void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, childID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int childID);" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, childID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" />
        <Parameter Name="childID" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="97318-190">ユーザー補助クライアント アプリケーションに通知する <see cref="T:System.Windows.Forms.AccessibleEvents" />。</span><span class="sxs-lookup"><span data-stu-id="97318-190">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="childID"><span data-ttu-id="97318-191">ユーザー補助対象のイベントを通知する子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-191">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="97318-192">指定した子コントロールの指定した <see cref="T:System.Windows.Forms.AccessibleEvents" /> をユーザー補助クライアント アプリケーションに通知します。</span><span class="sxs-lookup"><span data-stu-id="97318-192">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-193">呼び出す必要があります、<xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType>メソッドごとに<xref:System.Windows.Forms.AccessibleEvents>ユーザー補助クライアント アプリケーションの通知されます。</span><span class="sxs-lookup"><span data-stu-id="97318-193">You must call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A?displayProperty=nameWithType> method for each <xref:System.Windows.Forms.AccessibleEvents> the accessibility client applications are to be notified of.</span></span> <span data-ttu-id="97318-194"><xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A>プロパティは、設定または内からメソッドを呼び出して通常、イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-194">The <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method is typically called when a property is set or from within an event handler.</span></span> <span data-ttu-id="97318-195">たとえばを呼び出す、<xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A>メソッドを渡します、<xref:System.Windows.Forms.AccessibleEvents>の値`Hide`からのイベント ハンドラー内で、<xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-195">For example, you might call the <xref:System.Windows.Forms.Control.ControlAccessibleObject.NotifyClients%2A> method and pass in an <xref:System.Windows.Forms.AccessibleEvents> value of `Hide` from within the event handler for the <xref:System.Windows.Forms.Control.VisibleChanged?displayProperty=nameWithType> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-196">ユーザー補助対応のグラフの作成を次のコード例に示しますを使用して、制御、<xref:System.Windows.Forms.AccessibleObject>と<xref:System.Windows.Forms.Control.ControlAccessibleObject>アクセス可能な情報を公開するクラス。</span><span class="sxs-lookup"><span data-stu-id="97318-196">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="97318-197">コントロールは、凡例と共に 2 つの曲線をプロットします。</span><span class="sxs-lookup"><span data-stu-id="97318-197">The control plots two curves along with a legend.</span></span> <span data-ttu-id="97318-198">`ChartControlAccessibleObject`から派生したクラス`ControlAccessibleObject`で使用されて、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>グラフ コントロールのカスタムのアクセス可能な情報を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-198">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="97318-199">グラフの凡例は、実際はないため<xref:System.Windows.Forms.Control>-ベースの制御が描画される代わりに、グラフ コントロールではなく組み込みアクセス可能な情報。</span><span class="sxs-lookup"><span data-stu-id="97318-199">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="97318-200">このため、`ChartControlAccessibleObject`オーバーライド、<xref:System.Windows.Forms.AccessibleObject.GetChild%2A>を返すメソッドを`CurveLegendAccessibleObject`凡例の各部分にアクセスできる情報を表します。</span><span class="sxs-lookup"><span data-stu-id="97318-200">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="97318-201">ユーザー補助対応アプリケーションでは、このコントロールを使用すると、コントロールは、アクセスに必要な情報を提供できます。</span><span class="sxs-lookup"><span data-stu-id="97318-201">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="97318-202">このコードの抜粋は、呼び出し元を示します、<xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-202">This code excerpt demonstrates calling the <xref:System.Windows.Forms.Control.AccessibilityNotifyClients%2A> method.</span></span> <span data-ttu-id="97318-203">参照してください、<xref:System.Windows.Forms.AccessibleObject>完全なコード例では、クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-203">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#5)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#5)]
 [!code-vb[System.Windows.Forms.AccessibleObject#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleEvents" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNotifyClients">
      <MemberSignature Language="C#" Value="protected void AccessibilityNotifyClients (System.Windows.Forms.AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void AccessibilityNotifyClients(valuetype System.Windows.Forms.AccessibleEvents accEvent, int32 objectID, int32 childID) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.AccessibilityNotifyClients(System.Windows.Forms.AccessibleEvents,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub AccessibilityNotifyClients (accEvent As AccessibleEvents, objectID As Integer, childID As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void AccessibilityNotifyClients(System::Windows::Forms::AccessibleEvents accEvent, int objectID, int childID);" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNotifyClients : System.Windows.Forms.AccessibleEvents * int * int -&gt; unit" Usage="control.AccessibilityNotifyClients (accEvent, objectID, childID)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accEvent" Type="System.Windows.Forms.AccessibleEvents" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="objectID" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="childID" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="accEvent"><span data-ttu-id="97318-204">ユーザー補助クライアント アプリケーションに通知する <see cref="T:System.Windows.Forms.AccessibleEvents" />。</span><span class="sxs-lookup"><span data-stu-id="97318-204">The <see cref="T:System.Windows.Forms.AccessibleEvents" /> to notify the accessibility client applications of.</span></span></param>
        <param name="objectID"><span data-ttu-id="97318-205"><see cref="T:System.Windows.Forms.AccessibleObject" /> の識別子。</span><span class="sxs-lookup"><span data-stu-id="97318-205">The identifier of the <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></param>
        <param name="childID"><span data-ttu-id="97318-206">ユーザー補助対象のイベントを通知する子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-206">The child <see cref="T:System.Windows.Forms.Control" /> to notify of the accessible event.</span></span></param>
        <summary><span data-ttu-id="97318-207">指定した子コントロールの指定した <see cref="T:System.Windows.Forms.AccessibleEvents" /> をユーザー補助クライアント アプリケーションに通知します。</span><span class="sxs-lookup"><span data-stu-id="97318-207">Notifies the accessibility client applications of the specified <see cref="T:System.Windows.Forms.AccessibleEvents" /> for the specified child control .</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityObject">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleObject AccessibilityObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AccessibleObject AccessibilityObject" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibilityObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AccessibilityObject As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleObject ^ AccessibilityObject { System::Windows::Forms::AccessibleObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AccessibilityObject : System.Windows.Forms.AccessibleObject" Usage="System.Windows.Forms.Control.AccessibilityObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-208">コントロールに割り当てられた <see cref="T:System.Windows.Forms.AccessibleObject" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-208">Gets the <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></summary>
        <value><span data-ttu-id="97318-209">コントロールに割り当てられた <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="97318-209">The <see cref="T:System.Windows.Forms.AccessibleObject" /> assigned to the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-210">このメソッドから返されるインスタンスを制御するには、オーバーライド、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-210">To control the instance returned from this method, override the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span>  
  
 <span data-ttu-id="97318-211">コントロールに現在割り当てられている <xref:System.Windows.Forms.AccessibleObject> がない場合は、コントロールの新しいインスタンスが作成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-211">If no <xref:System.Windows.Forms.AccessibleObject> is currently assigned to the control, a new instance of one is created.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-212">取得または設定する、<xref:System.Windows.Forms.Control.AccessibilityObject%2A>プロパティへの参照を追加する必要があります、`Accessibility`と一緒にインストールされたアセンブリ、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="97318-212">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
 <span data-ttu-id="97318-213">ユーザー補助オブジェクトの詳細については、次を参照してください。 [Active Accessibility](https://msdn.microsoft.com/library/windows/desktop/dd373592.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-213">For more information about accessible objects, see [Active Accessibility](https://msdn.microsoft.com/library/windows/desktop/dd373592.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDefaultActionDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDefaultActionDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDefaultActionDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDefaultActionDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDefaultActionDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDefaultActionDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-214">アクセシビリティ クライアント アプリケーションで使用されるコントロールの既定のアクションの説明を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-214">Gets or sets the default action description of the control for use by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="97318-215">ユーザー補助クライアント アプリケーションによって使用される、コントロールの既定のアクションの説明。</span><span class="sxs-lookup"><span data-stu-id="97318-215">The default action description of the control for use by accessibility client applications.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-216">オブジェクトの<xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A>プロパティが、ユーザーの視点から、操作のオブジェクトの主な方法について説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-216">An object's <xref:System.Windows.Forms.Control.AccessibleDefaultActionDescription%2A> property describes the object's primary method of manipulation from the user's viewpoint.</span></span> <span data-ttu-id="97318-217">このプロパティは、動詞または動詞の短い語句にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-217">This property should be a verb or a short verb phrase.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-218">すべてのオブジェクトが、既定の操作があるし、一部のオブジェクトは既定のアクションに関連付けられている必要があります、<xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType>プロパティは、次の例のようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-218">Not all objects have default actions, and some objects might have a default action that is related to its <xref:System.Windows.Forms.AccessibleObject.Value%2A?displayProperty=nameWithType> property, such as in the following examples:</span></span>  
  
-   <span data-ttu-id="97318-219">チェック ボックスがオン、オフ「に」の既定のアクションと値の「オン」にします。</span><span class="sxs-lookup"><span data-stu-id="97318-219">A selected check box has a default action of "Uncheck" and a value of "Checked."</span></span>  
  
-   <span data-ttu-id="97318-220">チェック ボックスをオフに「確認」の既定のアクションと値の"オフ"にした場合。</span><span class="sxs-lookup"><span data-stu-id="97318-220">A cleared check box has a default action of "Check" and a value of "Unchecked."</span></span>  
  
-   <span data-ttu-id="97318-221">"Print"というラベルのボタンでは、「キーを押して、」の既定のアクションを持つ値はありません。</span><span class="sxs-lookup"><span data-stu-id="97318-221">A button labeled "Print" has a default action of "Press," with no value.</span></span>  
  
-   <span data-ttu-id="97318-222">ラベルまたは"Printer"を表示するテキスト ボックス コントロールは、既定のアクションはありませんが、「プリンター」の値は</span><span class="sxs-lookup"><span data-stu-id="97318-222">A label or a text box control that shows "Printer" has no default action, but would have a value of "Printer."</span></span>  
  
 <span data-ttu-id="97318-223">ユーザー補助オブジェクトのプロパティの詳細については、次を参照してください。[説明的なプロパティのコンテンツ](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-223">For more information about properties of accessible objects, see [Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.DefaultAction" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleDescription">
      <MemberSignature Language="C#" Value="public string AccessibleDescription { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleDescription" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleDescription" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleDescription As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleDescription { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleDescription : string with get, set" Usage="System.Windows.Forms.Control.AccessibleDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-224">ユーザー補助クライアント アプリケーションによって使用される、コントロールの説明を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-224">Gets or sets the description of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="97318-225">ユーザー補助クライアント アプリケーションによって使用されるコントロールの説明。</span><span class="sxs-lookup"><span data-stu-id="97318-225">The description of the control used by accessibility client applications.</span></span> <span data-ttu-id="97318-226">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-226">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-227">オブジェクトの<xref:System.Windows.Forms.Control.AccessibleDescription%2A>プロパティは、オブジェクトの視覚的な外観の説明テキストを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-227">An object's <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property provides a textual description about an object's visual appearance.</span></span> <span data-ttu-id="97318-228">説明は、視覚や視覚障碍のあるユーザーでは、大きいコンテキストを提供する、主に使用しますが、コンテキスト検索やその他のアプリケーションも使用できます。</span><span class="sxs-lookup"><span data-stu-id="97318-228">The description is primarily used to provide greater context for low-vision or blind users, but can also be used for context searching or other applications.</span></span>  
  
 <span data-ttu-id="97318-229"><xref:System.Windows.Forms.Control.AccessibleDescription%2A>プロパティが、説明では、明らかな場合に必要なか冗長である場合は、オブジェクトに基づく<xref:System.Windows.Forms.Control.AccessibleName%2A>、 <xref:System.Windows.Forms.Control.AccessibleRole%2A>、 <xref:System.Windows.Forms.AccessibleObject.State%2A>、および<xref:System.Windows.Forms.AccessibleObject.Value%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-229">The <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property is needed if the description is not obvious, or if it is redundant based on the object's <xref:System.Windows.Forms.Control.AccessibleName%2A>, <xref:System.Windows.Forms.Control.AccessibleRole%2A>, <xref:System.Windows.Forms.AccessibleObject.State%2A>, and <xref:System.Windows.Forms.AccessibleObject.Value%2A> properties.</span></span> <span data-ttu-id="97318-230">たとえば、"OK"のボタンでは、追加の情報は必要はありませんが、サボテンの画像を表示するボタンは。</span><span class="sxs-lookup"><span data-stu-id="97318-230">For example, a button with "OK" would not need additional information, but a button that shows a picture of a cactus would.</span></span> <span data-ttu-id="97318-231"><xref:System.Windows.Forms.Control.AccessibleName%2A>、および<xref:System.Windows.Forms.Control.AccessibleRole%2A>(とおそらく<xref:System.Windows.Forms.AccessibleObject.Help%2A>) サボテン ボタンのプロパティは、その目的をについて説明しますが、<xref:System.Windows.Forms.Control.AccessibleDescription%2A>プロパティが「サボテンの画像を表示するボタン」などの小さい具体的な情報を伝える。</span><span class="sxs-lookup"><span data-stu-id="97318-231">The <xref:System.Windows.Forms.Control.AccessibleName%2A>, and <xref:System.Windows.Forms.Control.AccessibleRole%2A> (and perhaps <xref:System.Windows.Forms.AccessibleObject.Help%2A>) properties for the cactus button would describe its purpose, but the <xref:System.Windows.Forms.Control.AccessibleDescription%2A> property would convey information that is less tangible, such as "A button that shows a picture of a cactus."</span></span>  
  
 <span data-ttu-id="97318-232">ユーザー補助オブジェクトのプロパティの詳細については、次を参照してください。[説明的なプロパティのコンテンツ](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-232">For more information about properties of accessible objects, see [Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-233">次のコード例のインスタンスを作成する、<xref:System.Windows.Forms.CheckBox>派生クラスで`MyCheckBox`、割り当てます、<xref:System.Drawing.Image>にその<xref:System.Windows.Forms.ButtonBase.Image%2A>プロパティとセット、<xref:System.Windows.Forms.Control.AccessibleName%2A>と<xref:System.Windows.Forms.Control.AccessibleDescription%2A>プロパティ、ため、 <xref:System.Windows.Forms.Control.Text%2A>プロパティは`null`します。</span><span class="sxs-lookup"><span data-stu-id="97318-233">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties, because the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="97318-234">この例が必要です、<xref:System.Windows.Forms.Form>という`MyForm`します。</span><span class="sxs-lookup"><span data-stu-id="97318-234">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Description" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleName">
      <MemberSignature Language="C#" Value="public string AccessibleName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibleName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleName" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AccessibleName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleName : string with get, set" Usage="System.Windows.Forms.Control.AccessibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-235">ユーザー補助クライアント アプリケーションによって使用されるコントロールの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-235">Gets or sets the name of the control used by accessibility client applications.</span></span></summary>
        <value><span data-ttu-id="97318-236">ユーザー補助クライアント アプリケーションによって使用されるコントロールの名前。</span><span class="sxs-lookup"><span data-stu-id="97318-236">The name of the control used by accessibility client applications.</span></span> <span data-ttu-id="97318-237">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-237">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-238"><xref:System.Windows.Forms.Control.AccessibleName%2A>プロパティは、簡単な説明し、内のテキストなど、コンテナー内のオブジェクトを識別するラベルを<xref:System.Windows.Forms.Button>の名前、 <xref:System.Windows.Forms.MenuItem>、または横に表示されるラベルを<xref:System.Windows.Forms.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-238">The <xref:System.Windows.Forms.Control.AccessibleName%2A> property is a label that briefly describes and identifies the object within its container, such as the text in a <xref:System.Windows.Forms.Button>, the name of a <xref:System.Windows.Forms.MenuItem>, or a label displayed next to a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 <span data-ttu-id="97318-239">ユーザー補助オブジェクトのプロパティの詳細については、次を参照してください。、"[説明的なプロパティのコンテンツ](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-239">For more information about properties of accessible objects, see the "[Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-240">次のコード例のインスタンスを作成する、<xref:System.Windows.Forms.CheckBox>派生クラスで`MyCheckBox`、割り当てます、<xref:System.Drawing.Image>にその<xref:System.Windows.Forms.ButtonBase.Image%2A>プロパティとセット、<xref:System.Windows.Forms.Control.AccessibleName%2A>と<xref:System.Windows.Forms.Control.AccessibleDescription%2A>プロパティ、<xref:System.Windows.Forms.Control.Text%2A>プロパティ`null`します。</span><span class="sxs-lookup"><span data-stu-id="97318-240">The following code example creates an instance of a <xref:System.Windows.Forms.CheckBox> derived class, `MyCheckBox`, assigns it an <xref:System.Drawing.Image> to its <xref:System.Windows.Forms.ButtonBase.Image%2A> property and sets the <xref:System.Windows.Forms.Control.AccessibleName%2A> and <xref:System.Windows.Forms.Control.AccessibleDescription%2A> properties since the <xref:System.Windows.Forms.Control.Text%2A> property is `null`.</span></span> <span data-ttu-id="97318-241">この例が必要です、<xref:System.Windows.Forms.Form>という`MyForm`します。</span><span class="sxs-lookup"><span data-stu-id="97318-241">This example requires that you have a <xref:System.Windows.Forms.Form> named `MyForm`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CPP/controlaccessibility.cpp#2)]
 [!code-csharp[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/CS/controlaccessibility.cs#2)]
 [!code-vb[Windows.Forms.Control.ControlAccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.ControlAccessibleObject/VB/controlaccessibility.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Name" />
      </Docs>
    </Member>
    <Member MemberName="AccessibleRole">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AccessibleRole AccessibleRole { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AccessibleRole AccessibleRole" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AccessibleRole" />
      <MemberSignature Language="VB.NET" Value="Public Property AccessibleRole As AccessibleRole" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AccessibleRole AccessibleRole { System::Windows::Forms::AccessibleRole get(); void set(System::Windows::Forms::AccessibleRole value); };" />
      <MemberSignature Language="F#" Value="member this.AccessibleRole : System.Windows.Forms.AccessibleRole with get, set" Usage="System.Windows.Forms.Control.AccessibleRole" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleRole</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-242">コントロールのアクセスできる役割を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-242">Gets or sets the accessible role of the control</span></span></summary>
        <value><span data-ttu-id="97318-243"><see cref="T:System.Windows.Forms.AccessibleRole" /> の値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-243">One of the values of <see cref="T:System.Windows.Forms.AccessibleRole" />.</span></span> <span data-ttu-id="97318-244">既定値は <see langword="Default" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-244">The default is <see langword="Default" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-245"><xref:System.Windows.Forms.Control.AccessibleRole%2A> プロパティは、オブジェクトがどのような種類のユーザー インターフェイス要素であるかを説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-245">The <xref:System.Windows.Forms.Control.AccessibleRole%2A> property describes what kind of user interface element an object is.</span></span> <span data-ttu-id="97318-246">コントロールの役割が決定できない場合、<xref:System.Windows.Forms.Control.AccessibleRole%2A> プロパティは `Default` に設定されます。</span><span class="sxs-lookup"><span data-stu-id="97318-246">If the control's role cannot be determined, the <xref:System.Windows.Forms.Control.AccessibleRole%2A> property is set to `Default`.</span></span>  
  
 <span data-ttu-id="97318-247">ユーザー補助オブジェクトのプロパティの詳細については、次を参照してください。[説明的なプロパティのコンテンツ](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx)します。</span><span class="sxs-lookup"><span data-stu-id="97318-247">For more information about properties of accessible objects, see [Content of Descriptive Properties](https://msdn.microsoft.com/library/windows/desktop/dd318025.aspx).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="97318-248">割り当てられた値がないのいずれか、<see cref="T:System.Windows.Forms.AccessibleRole" />値。</span><span class="sxs-lookup"><span data-stu-id="97318-248">The value assigned is not one of the <see cref="T:System.Windows.Forms.AccessibleRole" /> values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.AccessibleRole" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDescription" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleName" />
        <altmember cref="P:System.Windows.Forms.Control.AccessibleDefaultActionDescription" />
        <altmember cref="P:System.Windows.Forms.AccessibleObject.Role" />
      </Docs>
    </Member>
    <Member MemberName="AllowDrop">
      <MemberSignature Language="C#" Value="public virtual bool AllowDrop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowDrop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AllowDrop" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowDrop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowDrop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowDrop : bool with get, set" Usage="System.Windows.Forms.Control.AllowDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-249">ユーザーがコントロールにドラッグしたデータを、そのコントロールが受け入れることができるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-249">Gets or sets a value indicating whether the control can accept data that the user drags onto it.</span></span></summary>
        <value><span data-ttu-id="97318-250">コントロールでドラッグ アンド ドロップ操作を実行できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-250"><see langword="true" /> if drag-and-drop operations are allowed in the control; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-251">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-251">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-252">次のコード例で、イメージまたはイメージ ファイルをフォームにドラッグして、上の点で、表示するユーザーが削除されます。</span><span class="sxs-lookup"><span data-stu-id="97318-252">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="97318-253"><xref:System.Windows.Forms.Control.OnPaint%2A>メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画する。 それ以外の場合、イメージは、次回の再描画されるまで保持はのみです。</span><span class="sxs-lookup"><span data-stu-id="97318-253">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="97318-254"><xref:System.Windows.Forms.Control.DragEnter>イベント処理メソッドをフォームにドラッグされるデータの種類を決定および適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-254">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="97318-255"><xref:System.Windows.Forms.Control.DragDrop>場合イベント処理メソッドに、フォームのイメージが表示されます、<xref:System.Drawing.Image>データから作成できます。</span><span class="sxs-lookup"><span data-stu-id="97318-255">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="97318-256"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>値は、画面座標、例では、<xref:System.Windows.Forms.Control.PointToClient%2A>クライアント座標に変換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-256">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-257">このプロパティを設定への無制限のクリップボード アクセスの<see langword="true" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-257">for unrestricted Clipboard access to set this property to <see langword="true" />.</span></span> <span data-ttu-id="97318-258">列挙型に関連付けられている:<see langword="AllClipboard" />の値 <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></span><span class="sxs-lookup"><span data-stu-id="97318-258">Associated enumeration: the <see langword="AllClipboard" /> value of <see cref="T:System.Security.Permissions.UIPermissionClipboard" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-259">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.AllowDrop" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.AllowDrop" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-259">When overriding the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-260">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-260">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-261">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.AllowDrop" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-261">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.AllowDrop" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.DragEventArgs" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      </Docs>
    </Member>
    <Member MemberName="Anchor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.AnchorStyles Anchor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AnchorStyles Anchor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Anchor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Anchor As AnchorStyles" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::AnchorStyles Anchor { System::Windows::Forms::AnchorStyles get(); void set(System::Windows::Forms::AnchorStyles value); };" />
      <MemberSignature Language="F#" Value="member this.Anchor : System.Windows.Forms.AnchorStyles with get, set" Usage="System.Windows.Forms.Control.Anchor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AnchorStyles</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-262">コントロールがバインドされるコンテナーの端を取得または設定し、親のサイズ変更時に、コントロールのサイズがどのように変化するかを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-262">Gets or sets the edges of the container to which a control is bound and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="97318-263"><see cref="T:System.Windows.Forms.AnchorStyles" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="97318-263">A bitwise combination of the <see cref="T:System.Windows.Forms.AnchorStyles" /> values.</span></span> <span data-ttu-id="97318-264">既定値は <see langword="Top" /> および <see langword="Left" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-264">The default is <see langword="Top" /> and <see langword="Left" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-265">使用して、<xref:System.Windows.Forms.Control.Anchor%2A>プロパティをコントロールが自動的にサイズ変更、親コントロールのサイズを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-265">Use the <xref:System.Windows.Forms.Control.Anchor%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="97318-266">親コントロールにコントロールを固定すると、アンカーの端の親コントロールがサイズ変更されると、親コントロールの端を基準と同じ位置に保つことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-266">Anchoring a control to its parent control ensures that the anchored edges remain in the same position relative to the edges of the parent control when the parent control is resized.</span></span>  
  
 <span data-ttu-id="97318-267">そのコンテナーの端を 1 つまたは複数のコントロールを固定することができます。</span><span class="sxs-lookup"><span data-stu-id="97318-267">You can anchor a control to one or more edges of its container.</span></span> <span data-ttu-id="97318-268">ある場合など、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.Button>が<xref:System.Windows.Forms.Control.Anchor%2A>プロパティの値に設定されて`Top`と`Bottom`、<xref:System.Windows.Forms.Button>固定、の上端と下端の端までの距離を維持するために拡大<xref:System.Windows.Forms.Form>として、<xref:System.Windows.Forms.Control.Height%2A>の<xref:System.Windows.Forms.Form>が増加します。</span><span class="sxs-lookup"><span data-stu-id="97318-268">For example, if you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> whose <xref:System.Windows.Forms.Control.Anchor%2A> property value is set to `Top` and `Bottom`, the <xref:System.Windows.Forms.Button> is stretched to maintain the anchored distance to the top and bottom edges of the <xref:System.Windows.Forms.Form> as the <xref:System.Windows.Forms.Control.Height%2A> of the <xref:System.Windows.Forms.Form> is increased.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-269"><xref:System.Windows.Forms.Control.Anchor%2A>と<xref:System.Windows.Forms.Control.Dock%2A>プロパティは相互に排他的です。</span><span class="sxs-lookup"><span data-stu-id="97318-269">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="97318-270">一度に 1 つだけを設定でき、最後に、設定が優先されます。</span><span class="sxs-lookup"><span data-stu-id="97318-270">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-271">次のコード例を追加、<xref:System.Windows.Forms.Button>をフォームにし、一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-271">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="97318-272">例は、フォームのサイズと、その相対位置が維持されるように、フォームの右下隅にあるボタンを固定します。</span><span class="sxs-lookup"><span data-stu-id="97318-272">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="97318-273">次に、設定、<xref:System.Windows.Forms.Control.BackgroundImage%2A>と同じサイズにボタンのサイズを変更し、<xref:System.Drawing.Image>します。</span><span class="sxs-lookup"><span data-stu-id="97318-273">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="97318-274">設定し、<xref:System.Windows.Forms.Control.TabStop%2A>に`true`設定と、<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-274">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="97318-275">最後に、処理するイベント ハンドラーを追加、<xref:System.Windows.Forms.Control.Click>ボタンのイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-275">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="97318-276">この例が必要です、<xref:System.Windows.Forms.ImageList>という`imageList1`します。</span><span class="sxs-lookup"><span data-stu-id="97318-276">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-277">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.Anchor" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.Anchor" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-277">When overriding the <see cref="P:System.Windows.Forms.Control.Anchor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Anchor" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-278">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-278">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-279">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.Anchor" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-279">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Anchor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.AnchorStyles" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="AutoScrollOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Point AutoScrollOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point AutoScrollOffset" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoScrollOffset As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Point AutoScrollOffset { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.AutoScrollOffset : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.AutoScrollOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(typeof(System.Drawing.Point), "0, 0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-280"><see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" /> でのこのコントロールのスクロール先を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-280">Gets or sets where this control is scrolled to in <see cref="M:System.Windows.Forms.ScrollableControl.ScrollControlIntoView(System.Windows.Forms.Control)" />.</span></span></summary>
        <value><span data-ttu-id="97318-281">スクロール位置を指定する <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="97318-281">A <see cref="T:System.Drawing.Point" /> specifying the scroll location.</span></span> <span data-ttu-id="97318-282">既定値は、コントロールの左上隅です。</span><span class="sxs-lookup"><span data-stu-id="97318-282">The default is the upper-left corner of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSize">
      <MemberSignature Language="C#" Value="public virtual bool AutoSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.AutoSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AutoSize As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AutoSize { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSize : bool with get, set" Usage="System.Windows.Forms.Control.AutoSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-283">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="97318-283">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="97318-284">有効である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-284"><see langword="true" /> if enabled; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-285">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="97318-285">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AutoSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AutoSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.AutoSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AutoSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AutoSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.AutoSizeChanged : EventHandler " Usage="member this.AutoSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-286">このクラスでは、このイベントは使用されません。</span><span class="sxs-lookup"><span data-stu-id="97318-286">This event is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-287">このクラスでは、このイベントは使用されません。</span><span class="sxs-lookup"><span data-stu-id="97318-287">This event is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-501)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-288">コントロールの背景色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-288">Gets or sets the background color for the control.</span></span></summary>
        <value><span data-ttu-id="97318-289">コントロールの背景色を表す <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="97318-289">A <see cref="T:System.Drawing.Color" /> that represents the background color of the control.</span></span> <span data-ttu-id="97318-290">既定値は <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="97318-290">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-291"><xref:System.Windows.Forms.Control.BackColor%2A>プロパティが透明色をサポートしていない場合を除き、`SupportsTransparentBackColor`の値<xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType>に設定されている`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-291">The <xref:System.Windows.Forms.Control.BackColor%2A> property does not support transparent colors unless the `SupportsTransparentBackColor` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`.</span></span>  
  
 <span data-ttu-id="97318-292"><xref:System.Windows.Forms.Control.BackColor%2A>プロパティは、アンビエント プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-292">The <xref:System.Windows.Forms.Control.BackColor%2A> property is an ambient property.</span></span> <span data-ttu-id="97318-293">アンビエントのプロパティはコントロールのプロパティ セットは、親コントロールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97318-293">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="97318-294">たとえば、<xref:System.Windows.Forms.Button>が、同じ<xref:System.Windows.Forms.Control.BackColor%2A>親として<xref:System.Windows.Forms.Form>既定では。</span><span class="sxs-lookup"><span data-stu-id="97318-294">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="97318-295">アンビエント プロパティの詳細については、次を参照してください。、<xref:System.Windows.Forms.AmbientProperties>クラスまたは<xref:System.Windows.Forms.Control>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-295">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-296">次のコード例のセット、<xref:System.Windows.Forms.Control.BackColor%2A>と<xref:System.Windows.Forms.Control.ForeColor%2A>の既定のシステム カラーをコントロールします。</span><span class="sxs-lookup"><span data-stu-id="97318-296">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="97318-297">コードを再帰的には、コントロールに子コントロールがある場合は自分自身を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-297">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="97318-298">このコード例が必要です、<xref:System.Windows.Forms.Form>を少なくとも 1 つの子コントロールでただし、子コンテナーを制御するような<xref:System.Windows.Forms.Panel>または<xref:System.Windows.Forms.GroupBox>、わかりやすく示すためコントロールが、再帰、独自の子にします。</span><span class="sxs-lookup"><span data-stu-id="97318-298">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-299">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.BackColor" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.BackColor" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-299">When overriding the <see cref="P:System.Windows.Forms.Control.BackColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackColor" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-300">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-300">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-301">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.BackColor" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-301">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.AmbientProperties" />
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="BackColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackColorChanged;" />
      <MemberSignature Language="F#" Value="member this.BackColorChanged : EventHandler " Usage="member this.BackColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-302"><see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-302">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackColor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-303">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.BackColor%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-303">This event is raised if the <xref:System.Windows.Forms.Control.BackColor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-304">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-304">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-305">次のコード例は、イベント ハンドラーを実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-305">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-306"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ*PropertyName* `Changed`にある場合に発生します、対応する*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-306">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-307">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-307">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="97318-308">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-308">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-309">この例が必要です、<xref:System.Windows.Forms.Form>を格納している、<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-309">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.Control.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-310">コントロールに表示される背景イメージを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-310">Gets or sets the background image displayed in the control.</span></span></summary>
        <value><span data-ttu-id="97318-311">コントロールの背景に表示するイメージを表す <see cref="T:System.Drawing.Image" />。</span><span class="sxs-lookup"><span data-stu-id="97318-311">An <see cref="T:System.Drawing.Image" /> that represents the image to display in the background of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
-   <span data-ttu-id="97318-312">使用して、<xref:System.Windows.Forms.Control.BackgroundImage%2A>プロパティをコントロールにグラフィック イメージを配置します。</span><span class="sxs-lookup"><span data-stu-id="97318-312">Use the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property to place a graphic image onto a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-313">背景画像として、色が半透明または透過的なイメージは Windows フォーム コントロールでサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97318-313">Images with translucent or transparent colors are not supported by Windows Forms controls as background images.</span></span>  
>   
>  <span data-ttu-id="97318-314">このプロパティでサポートされていないいる子コントロール<xref:System.Windows.Forms.Form.RightToLeftLayout%2A>プロパティは`true`。</span><span class="sxs-lookup"><span data-stu-id="97318-314">This property is not supported on child controls whose <xref:System.Windows.Forms.Form.RightToLeftLayout%2A> property is `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-315">次のコード例を追加、<xref:System.Windows.Forms.Button>をフォームにし、一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-315">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="97318-316">例は、フォームのサイズと、その相対位置が維持されるように、フォームの右下隅にあるボタンを固定します。</span><span class="sxs-lookup"><span data-stu-id="97318-316">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="97318-317">次に、設定、<xref:System.Windows.Forms.Control.BackgroundImage%2A>と同じサイズにボタンのサイズを変更し、<xref:System.Drawing.Image>します。</span><span class="sxs-lookup"><span data-stu-id="97318-317">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="97318-318">設定し、<xref:System.Windows.Forms.Control.TabStop%2A>に`true`設定と、<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-318">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="97318-319">最後に、処理するイベント ハンドラーを追加、<xref:System.Windows.Forms.Control.Click>ボタンのイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-319">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="97318-320">この例が必要です、<xref:System.Windows.Forms.ImageList>という`imageList1`します。</span><span class="sxs-lookup"><span data-stu-id="97318-320">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-321">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.BackgroundImage" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-321">When overriding the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-322">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-322">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-323">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.BackgroundImage" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-323">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Drawing.Image" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-324"><see cref="P:System.Windows.Forms.Control.BackgroundImage" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-324">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-325">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.BackgroundImage%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-325">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-326">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-326">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-327">次のコード例は、イベント ハンドラーを実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-327">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-328"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ*PropertyName* `Changed`にある場合に発生します、対応する*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-328">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-329">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-329">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="97318-330">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-330">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-331">この例が必要です、<xref:System.Windows.Forms.Form>を格納している、<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-331">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Image" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.Control.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-332"><see cref="T:System.Windows.Forms.ImageLayout" /> 列挙型で定義される背景画像のレイアウトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-332">Gets or sets the background image layout as defined in the <see cref="T:System.Windows.Forms.ImageLayout" /> enumeration.</span></span></summary>
        <value><span data-ttu-id="97318-333"><see cref="T:System.Windows.Forms.ImageLayout" /> の値の 1 つ (<see cref="F:System.Windows.Forms.ImageLayout.Center" />、<see cref="F:System.Windows.Forms.ImageLayout.None" />、<see cref="F:System.Windows.Forms.ImageLayout.Stretch" />、<see cref="F:System.Windows.Forms.ImageLayout.Tile" />、または <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />)。</span><span class="sxs-lookup"><span data-stu-id="97318-333">One of the values of <see cref="T:System.Windows.Forms.ImageLayout" /> (<see cref="F:System.Windows.Forms.ImageLayout.Center" /> , <see cref="F:System.Windows.Forms.ImageLayout.None" />, <see cref="F:System.Windows.Forms.ImageLayout.Stretch" />, <see cref="F:System.Windows.Forms.ImageLayout.Tile" />, or <see cref="F:System.Windows.Forms.ImageLayout.Zoom" />).</span></span> <span data-ttu-id="97318-334">既定値は <see cref="F:System.Windows.Forms.ImageLayout.Tile" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-334"><see cref="F:System.Windows.Forms.ImageLayout.Tile" /> is the default value.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-335">使用して、<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A>プロパティをコントロールに配置したイメージの動作と位置を指定します。</span><span class="sxs-lookup"><span data-stu-id="97318-335">Use the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property to specify the position and behavior of an image you have placed onto a control.</span></span> <span data-ttu-id="97318-336"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> 場合にのみ有効になります、<xref:System.Windows.Forms.Control.BackgroundImage%2A>プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-336"><xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> takes effect only if the <xref:System.Windows.Forms.Control.BackgroundImage%2A> property is set.</span></span>  
  
 <span data-ttu-id="97318-337">設定した場合は、大きなイメージのパフォーマンスを向上できます<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A>以外のものに<xref:System.Windows.Forms.ImageLayout.Tile>します。</span><span class="sxs-lookup"><span data-stu-id="97318-337">You can increase performance for large images if you set <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> to something other than <xref:System.Windows.Forms.ImageLayout.Tile>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="97318-338">指定した列挙値が存在しません。</span><span class="sxs-lookup"><span data-stu-id="97318-338">The specified enumeration value does not exist.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-339"><see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-339">Occurs when the <see cref="P:System.Windows.Forms.Control.BackgroundImageLayout" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-340">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.BackgroundImageLayout%2A>プログラム、またはユーザーの操作によってプロパティが変更されました。</span><span class="sxs-lookup"><span data-stu-id="97318-340">This event is raised if the <xref:System.Windows.Forms.Control.BackgroundImageLayout%2A> property changes either programmatically or by user interaction.</span></span>  
  
 <span data-ttu-id="97318-341">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-341">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-342">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-342">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-343">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-343">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span> <span data-ttu-id="97318-344">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-344">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-345">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-345">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-346">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-346">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-347">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-347">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.BackgroundImageLayoutChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#9)]
 [!code-vb[System.Windows.Forms.EventExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginInvoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-348">コントロールの基になるハンドルが作成されたスレッド上で、非同期的にデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-348">Executes a delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginInvoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginInvoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.BeginInvoke : Delegate -&gt; IAsyncResult" Usage="control.BeginInvoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="97318-349">パラメーターをとらないメソッドへのデリゲート。</span><span class="sxs-lookup"><span data-stu-id="97318-349">A delegate to a method that takes no parameters.</span></span></param>
        <summary><span data-ttu-id="97318-350">コントロールの基になるハンドルが作成されたスレッド上で、指定したデリゲートを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-350">Executes the specified delegate asynchronously on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="97318-351"><see cref="T:System.IAsyncResult" /> 操作の結果を表す <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</span><span class="sxs-lookup"><span data-stu-id="97318-351">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-352">デリゲートを非同期的に呼び出され、このメソッドがすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="97318-352">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="97318-353">このメソッドは、コントロールのハンドルを所有するスレッドからでも、任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-353">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="97318-354">コントロールのハンドルがまだ存在しない場合、このメソッドは、コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、コントロールの親チェーンを検索します。</span><span class="sxs-lookup"><span data-stu-id="97318-354">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="97318-355">適切なハンドルが見つからない場合<xref:System.Windows.Forms.Control.BeginInvoke%2A>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97318-355">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="97318-356">デリゲート メソッド内で例外がトラップされ、アプリケーションの例外トラップ ハンドラーに送信されますと見なされます。</span><span class="sxs-lookup"><span data-stu-id="97318-356">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="97318-357">呼び出すことができます<xref:System.Windows.Forms.Control.EndInvoke%2A>によりが、これが必要ない場合、デリゲートから戻り値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-357">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="97318-358"><xref:System.Windows.Forms.Control.EndInvoke%2A> 戻り値を取得するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-358"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-359">コントロールのほとんどのメソッドのみ呼び出せるスレッドからコントロールが作成されました。</span><span class="sxs-lookup"><span data-stu-id="97318-359">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="97318-360">加え、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティはスレッド セーフであるコントロールの 4 つの方法があります: <xref:System.Windows.Forms.Control.Invoke%2A>、 <xref:System.Windows.Forms.Control.BeginInvoke%2A>、 <xref:System.Windows.Forms.Control.EndInvoke%2A>、および<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-360">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-361">呼び出す<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-361">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="97318-362">他のすべてのメソッド呼び出しにはコントロールのスレッドへの呼び出しをマーシャ リングするのに invoke メソッドのいずれかを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-362">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="97318-363">Invoke メソッドは、常にコントロールのスレッドでコールバックを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-363">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-364">メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97318-364">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-365">次のコード例に示しますを使用して、<xref:System.Windows.Forms.Control.BeginInvoke%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-365">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#2)]
 [!code-csharp[Control_BeginInvoke#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#2)]
 [!code-vb[Control_BeginInvoke#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="97318-366">適切なウィンドウ ハンドルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="97318-366">No appropriate window handle can be found.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-367">アンマネージ コードを呼び出す直前の呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="97318-367">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="97318-368">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="97318-368">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BeginInvoke">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginInvoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginInvoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginInvoke (method As Delegate, ParamArray args As Object()) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginInvoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member BeginInvoke : Delegate * obj[] -&gt; IAsyncResult&#xA;override this.BeginInvoke : Delegate * obj[] -&gt; IAsyncResult" Usage="control.BeginInvoke (method, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.BeginInvoke(System.Delegate,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="97318-369"><paramref name="args" /> パラメーターに指定されている数および型と同じ数および型のパラメーターをとるメソッドへのデリゲート。</span><span class="sxs-lookup"><span data-stu-id="97318-369">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="97318-370">特定のメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="97318-370">An array of objects to pass as arguments to the given method.</span></span> <span data-ttu-id="97318-371">引数が必要ない場合は、<see langword="null" /> を指定できます。</span><span class="sxs-lookup"><span data-stu-id="97318-371">This can be <see langword="null" /> if no arguments are needed.</span></span></param>
        <summary><span data-ttu-id="97318-372">コントロールの基になるハンドルが作成されたスレッド上で、指定した引数で指定したデリゲートを非同期的に実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-372">Executes the specified delegate asynchronously with the specified arguments, on the thread that the control's underlying handle was created on.</span></span></summary>
        <returns><span data-ttu-id="97318-373"><see cref="T:System.IAsyncResult" /> 操作の結果を表す <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</span><span class="sxs-lookup"><span data-stu-id="97318-373">An <see cref="T:System.IAsyncResult" /> that represents the result of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-374">デリゲートを非同期的に呼び出され、このメソッドがすぐに返します。</span><span class="sxs-lookup"><span data-stu-id="97318-374">The delegate is called asynchronously, and this method returns immediately.</span></span> <span data-ttu-id="97318-375">このメソッドは、コントロールのハンドルを所有するスレッドからでも、任意のスレッドから呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-375">You can call this method from any thread, even the thread that owns the control's handle.</span></span> <span data-ttu-id="97318-376">コントロールのハンドルがまだ存在しない場合、このメソッドは、コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、コントロールの親チェーンを検索します。</span><span class="sxs-lookup"><span data-stu-id="97318-376">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="97318-377">適切なハンドルが見つからない場合<xref:System.Windows.Forms.Control.BeginInvoke%2A>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97318-377">If no appropriate handle can be found, <xref:System.Windows.Forms.Control.BeginInvoke%2A> will throw an exception.</span></span> <span data-ttu-id="97318-378">デリゲート メソッド内で例外がトラップされ、アプリケーションの例外トラップ ハンドラーに送信されますと見なされます。</span><span class="sxs-lookup"><span data-stu-id="97318-378">Exceptions within the delegate method are considered untrapped and will be sent to the application's untrapped exception handler.</span></span>  
  
 <span data-ttu-id="97318-379">呼び出すことができます<xref:System.Windows.Forms.Control.EndInvoke%2A>によりが、これが必要ない場合、デリゲートから戻り値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-379">You can call <xref:System.Windows.Forms.Control.EndInvoke%2A> to retrieve the return value from the delegate, if neccesary, but this is not required.</span></span> <span data-ttu-id="97318-380"><xref:System.Windows.Forms.Control.EndInvoke%2A> 戻り値を取得するまでブロックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-380"><xref:System.Windows.Forms.Control.EndInvoke%2A> will block until the return value can be retrieved.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-381">コントロールのほとんどのメソッドのみ呼び出せるスレッドからコントロールが作成されました。</span><span class="sxs-lookup"><span data-stu-id="97318-381">Most methods on a control can only be called from the thread where the control was created.</span></span> <span data-ttu-id="97318-382">加え、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティはスレッド セーフであるコントロールの 4 つの方法があります: <xref:System.Windows.Forms.Control.Invoke%2A>、 <xref:System.Windows.Forms.Control.BeginInvoke%2A>、 <xref:System.Windows.Forms.Control.EndInvoke%2A>、および<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-382">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-383">呼び出す<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-383">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="97318-384">他のすべてのメソッド呼び出しにはコントロールのスレッドへの呼び出しをマーシャ リングするのに invoke メソッドのいずれかを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-384">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span> <span data-ttu-id="97318-385">Invoke メソッドは、常にコントロールのスレッドでコールバックを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-385">The invoke methods always invoke their callbacks on the control's thread.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-386">メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97318-386">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-387">次のコード例に示しますを使用して、<xref:System.Windows.Forms.Control.BeginInvoke%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-387">The following code example demonstrates a use of the <xref:System.Windows.Forms.Control.BeginInvoke%2A> method.</span></span>  
  
 [!code-cpp[Control_BeginInvoke#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_BeginInvoke/CPP/control_begininvoke.cpp#1)]
 [!code-csharp[Control_BeginInvoke#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_BeginInvoke/CS/control_begininvoke.cs#1)]
 [!code-vb[Control_BeginInvoke#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_BeginInvoke/VB/control_begininvoke.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="97318-388">適切なウィンドウ ハンドルが見つかりません。</span><span class="sxs-lookup"><span data-stu-id="97318-388">No appropriate window handle can be found.</span></span></exception>
        <altmember cref="T:System.IAsyncResult" />
        <altmember cref="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.CreateGraphics" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="BindingContext">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.BindingContext BindingContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingContext BindingContext" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.BindingContext" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property BindingContext As BindingContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::BindingContext ^ BindingContext { System::Windows::Forms::BindingContext ^ get(); void set(System::Windows::Forms::BindingContext ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingContext : System.Windows.Forms.BindingContext with get, set" Usage="System.Windows.Forms.Control.BindingContext" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.BindingContext</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-389">コントロールの <see cref="T:System.Windows.Forms.BindingContext" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-389">Gets or sets the <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></summary>
        <value><span data-ttu-id="97318-390">コントロールの <see cref="T:System.Windows.Forms.BindingContext" />。</span><span class="sxs-lookup"><span data-stu-id="97318-390">A <see cref="T:System.Windows.Forms.BindingContext" /> for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-391"><xref:System.Windows.Forms.BindingContext>の<xref:System.Windows.Forms.Control>、1 つを返すために使用<xref:System.Windows.Forms.BindingManagerBase>に含まれるすべてのデータ バインド コントロールの<xref:System.Windows.Forms.Control>します。</span><span class="sxs-lookup"><span data-stu-id="97318-391">The <xref:System.Windows.Forms.BindingContext> of a <xref:System.Windows.Forms.Control> is used to return a single <xref:System.Windows.Forms.BindingManagerBase> for all data-bound controls contained by the <xref:System.Windows.Forms.Control>.</span></span> <span data-ttu-id="97318-392"><xref:System.Windows.Forms.BindingManagerBase>同期されている同じデータ ソースにバインドされているすべてのコントロールを保持します。</span><span class="sxs-lookup"><span data-stu-id="97318-392">The <xref:System.Windows.Forms.BindingManagerBase> keeps all controls that are bound to the same data source synchronized.</span></span> <span data-ttu-id="97318-393">たとえば、設定、<xref:System.Windows.Forms.BindingManagerBase.Position%2A>のプロパティ、<xref:System.Windows.Forms.BindingManagerBase>すべてのデータ バインド コントロールをポイントする基になるリストの項目を指定します。</span><span class="sxs-lookup"><span data-stu-id="97318-393">For example, setting the <xref:System.Windows.Forms.BindingManagerBase.Position%2A> property of the <xref:System.Windows.Forms.BindingManagerBase> specifies the item in the underlying list that all data-bound controls point to.</span></span>  
  
 <span data-ttu-id="97318-394">新たに作成の詳細については<xref:System.Windows.Forms.BindingContext>に割り当てることと、<xref:System.Windows.Forms.Control.BindingContext%2A>プロパティを参照してください、<xref:System.Windows.Forms.BindingContext.%23ctor%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-394">For more information about creating a new <xref:System.Windows.Forms.BindingContext> and assigning it to the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-395">次のコード例では、4 つ作成します<xref:System.Windows.Forms.Binding>5 つのコントロールをバインドするオブジェクト、<xref:System.Windows.Forms.DateTimePicker>と 4 つ<xref:System.Windows.Forms.TextBox>いくつかのデータ ソースへのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-395">The following code example creates four <xref:System.Windows.Forms.Binding> objects to bind five controls, a <xref:System.Windows.Forms.DateTimePicker> and four <xref:System.Windows.Forms.TextBox> controls, to several data sources.</span></span> <span data-ttu-id="97318-396"><xref:System.Windows.Forms.BindingContext>を取得するを使用して、<xref:System.Windows.Forms.BindingManagerBase>データ ソースごとにします。</span><span class="sxs-lookup"><span data-stu-id="97318-396">The <xref:System.Windows.Forms.BindingContext> is then used to get the <xref:System.Windows.Forms.BindingManagerBase> for each data source.</span></span>  
  
 [!code-cpp[Classic BindingContext Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-397">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.BindingContext" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.BindingContext" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-397">When overriding the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.BindingContext" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-398">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-398">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-399">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.BindingContext" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-399">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="BindingContextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BindingContextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BindingContextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.BindingContextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingContextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BindingContextChanged;" />
      <MemberSignature Language="F#" Value="member this.BindingContextChanged : EventHandler " Usage="member this.BindingContextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-400"><see cref="T:System.Windows.Forms.BindingContext" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-400">Occurs when the value of the <see cref="T:System.Windows.Forms.BindingContext" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-401">新しい追加<xref:System.Windows.Forms.BindingContext>を<xref:System.Windows.Forms.Control>を通じて、<xref:System.Windows.Forms.Control.BindingContext%2A>プロパティを参照してください、<xref:System.Windows.Forms.BindingContext.%23ctor%2A>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="97318-401">To add a new <xref:System.Windows.Forms.BindingContext> to the <xref:System.Windows.Forms.Control> through the <xref:System.Windows.Forms.Control.BindingContext%2A> property, see the <xref:System.Windows.Forms.BindingContext.%23ctor%2A> constructor.</span></span>  
  
 <span data-ttu-id="97318-402">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.BindingContext%2A>プロパティが変更されたプログラムの変更、またはユーザーの操作によってです。</span><span class="sxs-lookup"><span data-stu-id="97318-402">This event is raised if the <xref:System.Windows.Forms.Control.BindingContext%2A> property is changed is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-403">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-403">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-404">次のコード例を追加、<xref:System.EventHandler>に委任、<xref:System.Windows.Forms.Control.BindingContextChanged>のイベントを<xref:System.Windows.Forms.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-404">The following code example adds an <xref:System.EventHandler> delegate to the <xref:System.Windows.Forms.Control.BindingContextChanged> event of a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.BindingContextChanged Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/CS/source.cs#1)]
 [!code-vb[Classic Control.BindingContextChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.BindingContextChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
        <altmember cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Bottom">
      <MemberSignature Language="C#" Value="public int Bottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Bottom" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bottom" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Bottom As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Bottom { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Bottom : int" Usage="System.Windows.Forms.Control.Bottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-405">コントロールの下端とコンテナーのクライアント領域の上端の間の距離をピクセルで取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-405">Gets the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="97318-406"><see cref="T:System.Int32" /> は、コントロールの下端とコンテナーのクライアント領域の上端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-406">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-407">このプロパティの値がの合計に等しい、<xref:System.Windows.Forms.Control.Top%2A>プロパティの値、および<xref:System.Windows.Forms.Control.Height%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-407">The value of this property is equal to the sum of the <xref:System.Windows.Forms.Control.Top%2A> property value, and the <xref:System.Windows.Forms.Control.Height%2A> property value.</span></span>  
  
 <span data-ttu-id="97318-408"><xref:System.Windows.Forms.Control.Bottom%2A>プロパティは読み取り専用プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-408">The <xref:System.Windows.Forms.Control.Bottom%2A> property is a read-only property.</span></span> <span data-ttu-id="97318-409">値を変更することでこのプロパティの値を操作することができます、<xref:System.Windows.Forms.Control.Top%2A>または<xref:System.Windows.Forms.Control.Height%2A>プロパティまたは呼び出す、 <xref:System.Windows.Forms.Control.SetBounds%2A>、 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>、 <xref:System.Windows.Forms.Control.UpdateBounds%2A>、または<xref:System.Windows.Forms.Control.SetClientSizeCore%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-409">You can manipulate this property value by changing the value of the <xref:System.Windows.Forms.Control.Top%2A> or <xref:System.Windows.Forms.Control.Height%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-410">次のコード例では、<xref:System.Windows.Forms.Control.Bottom%2A>の下限を定義するプロパティを<xref:System.Windows.Forms.TextBox>コントロール コンテナーのクライアント領域を基準とします。</span><span class="sxs-lookup"><span data-stu-id="97318-410">The following code example uses the <xref:System.Windows.Forms.Control.Bottom%2A> property to define the lower limit of a <xref:System.Windows.Forms.TextBox> control relative to the client area of the container.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle Bounds" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Bounds" />
      <MemberSignature Language="VB.NET" Value="Public Property Bounds As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle Bounds { System::Drawing::Rectangle get(); void set(System::Drawing::Rectangle value); };" />
      <MemberSignature Language="F#" Value="member this.Bounds : System.Drawing.Rectangle with get, set" Usage="System.Windows.Forms.Control.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-411">クライアント以外の要素を含むコントロールの、親コントロールに対する相対的なサイズおよび位置をピクセル単位で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-411">Gets or sets the size and location of the control including its nonclient elements, in pixels, relative to the parent control.</span></span></summary>
        <value><span data-ttu-id="97318-412">クライアント以外の要素を含むコントロールの、親コントロールに対する相対的なサイズおよび位置を表す <see cref="T:System.Drawing.Rectangle" /> (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-412">A <see cref="T:System.Drawing.Rectangle" /> in pixels relative to the parent control that represents the size and location of the control including its nonclient elements.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-413">コントロールの境界には、スクロール バー、罫線、タイトル バー、メニューなどの非クライアント要素が含まれます。</span><span class="sxs-lookup"><span data-stu-id="97318-413">The bounds of the control include the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="97318-414"><xref:System.Windows.Forms.Control.SetBoundsCore%2A>を設定するメソッドが呼び出される、<xref:System.Windows.Forms.Control.Bounds%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-414">The <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method is called to set the <xref:System.Windows.Forms.Control.Bounds%2A> property.</span></span> <span data-ttu-id="97318-415"><xref:System.Windows.Forms.Control.Bounds%2A>プロパティは、常にでは変更されませんその`set`メソッドをオーバーライドするため、 <xref:System.Windows.Forms.Control.SetBoundsCore%2A> 、コードが実行されることを確認する方法と、<xref:System.Windows.Forms.Control.Bounds%2A>プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-415">The <xref:System.Windows.Forms.Control.Bounds%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.Bounds%2A> property is set.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-416">次のコード例では、3 つを作成<xref:System.Windows.Forms.Button>フォームのコントロールし、さまざまなサイズに関連して、場所に関連するプロパティを使用して、そのサイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-416">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="97318-417">この例が必要です、<xref:System.Windows.Forms.Form>少なくとも 300 ピクセルの高さ、幅を持ちます。</span><span class="sxs-lookup"><span data-stu-id="97318-417">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Top" />
        <altmember cref="P:System.Windows.Forms.Control.Left" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
      </Docs>
    </Member>
    <Member MemberName="BringToFront">
      <MemberSignature Language="C#" Value="public void BringToFront ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BringToFront() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.BringToFront" />
      <MemberSignature Language="VB.NET" Value="Public Sub BringToFront ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BringToFront();" />
      <MemberSignature Language="F#" Value="member this.BringToFront : unit -&gt; unit" Usage="control.BringToFront " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-418">コントロールを z オーダーの最前面へ移動します。</span><span class="sxs-lookup"><span data-stu-id="97318-418">Brings the control to the front of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-419">コントロールは、z オーダーの最前面に移動されます。</span><span class="sxs-lookup"><span data-stu-id="97318-419">The control is moved to the front of the z-order.</span></span> <span data-ttu-id="97318-420">コントロールが別のコントロールの子である場合は、子コントロールは、z オーダーの最前面に移動されます。</span><span class="sxs-lookup"><span data-stu-id="97318-420">If the control is a child of another control, the child control is moved to the front of the z-order.</span></span> <span data-ttu-id="97318-421"><xref:System.Windows.Forms.Control.BringToFront%2A> コントロールをトップレベル コントロールでは、または発生しないことをしないのは、<xref:System.Windows.Forms.Control.Paint>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-421"><xref:System.Windows.Forms.Control.BringToFront%2A> does not make a control a top-level control, and it does not raise the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-422">次のコード例は、確実、<xref:System.Windows.Forms.Label>が呼び出すことによって表示されるその<xref:System.Windows.Forms.Control.BringToFront%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-422">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="97318-423">この例が必要です、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.Panel>という名前`panel1`、および<xref:System.Windows.Forms.Label>という名前`label1`します。</span><span class="sxs-lookup"><span data-stu-id="97318-423">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SendToBack" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="CanEnableIme">
      <MemberSignature Language="C#" Value="protected virtual bool CanEnableIme { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanEnableIme" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanEnableIme" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CanEnableIme As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanEnableIme { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanEnableIme : bool" Usage="System.Windows.Forms.Control.CanEnableIme" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-424"><see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティをアクティブな値に設定して、IME サポートを有効にできるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-424">Gets a value indicating whether the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property can be set to an active value, to enable IME support.</span></span></summary>
        <value><span data-ttu-id="97318-425">常に <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="97318-425"><see langword="true" /> in all cases.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-426">派生クラスを返すには、このプロパティをオーバーライドできます`false`IME がサポートされていない場合。</span><span class="sxs-lookup"><span data-stu-id="97318-426">Derived classes can override this property to return `false` if IME is not supported.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocus">
      <MemberSignature Language="C#" Value="public bool CanFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanFocus : bool" Usage="System.Windows.Forms.Control.CanFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-427">コントロールがフォーカスを受け取ることができるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-427">Gets a value indicating whether the control can receive focus.</span></span></summary>
        <value><span data-ttu-id="97318-428">コントロールがフォーカスを受け取ることができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-428"><see langword="true" /> if the control can receive focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-429">コントロールが入力フォーカスを受け取るためには、コントロールがそれに割り当てられているハンドルを持つ必要があります、<xref:System.Windows.Forms.Control.Visible%2A>と<xref:System.Windows.Forms.Control.Enabled%2A>両方の設定が必要`true`コントロールとそのすべての親コントロールとコントロールの両方がフォームにする必要があります、またはコントロールの最も外側にある親フォームがあります。</span><span class="sxs-lookup"><span data-stu-id="97318-429">In order for a control to receive input focus, the control must have a handle assigned to it, and the <xref:System.Windows.Forms.Control.Visible%2A> and <xref:System.Windows.Forms.Control.Enabled%2A> properties must both be set to `true` for both the control and all its parent controls, and the control must be a form or the control's outermost parent must be a form.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-430">次のコード例を指定したフォーカスを設定する<xref:System.Windows.Forms.Control>フォーカスを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-430">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="CanRaiseEvents">
      <MemberSignature Language="C#" Value="protected override bool CanRaiseEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRaiseEvents" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CanRaiseEvents As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool CanRaiseEvents { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRaiseEvents : bool" Usage="System.Windows.Forms.Control.CanRaiseEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-431">コントロールでイベントが発生するかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-431">Determines if events can be raised on the control.</span></span></summary>
        <value><span data-ttu-id="97318-432">コントロールが、イベントが固定されていない ActiveX コントロールとしてホストされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-432"><see langword="true" /> if the control is hosted as an ActiveX control whose events are not frozen; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-433">かどうか、このコントロールは、ActiveX コントロールとしてホストされているが、このプロパティを返します`false`ActiveX コントロールにそのイベントが固定されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-433">If this control is being hosted as an ActiveX control, this property will return `false` if the ActiveX control has its events frozen.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSelect">
      <MemberSignature Language="C#" Value="public bool CanSelect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CanSelect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanSelect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSelect : bool" Usage="System.Windows.Forms.Control.CanSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-434">コントロールを選択できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-434">Gets a value indicating whether the control can be selected.</span></span></summary>
        <value><span data-ttu-id="97318-435">コントロールを選択できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-435"><see langword="true" /> if the control can be selected; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-436">このプロパティを返します`true`場合、 `Selectable` @property<xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType>に設定されている`true`の別のコントロールに含まれるコントロール自体が表示され、有効になっている、およびすべての親コントロールが表示され、有効になっています。</span><span class="sxs-lookup"><span data-stu-id="97318-436">This property returns `true` if the `Selectable` value of <xref:System.Windows.Forms.ControlStyles?displayProperty=nameWithType> is set to `true`, is contained in another control, the control itself is visible and enabled, and all its parent controls are visible and enabled.</span></span>  
  
 <span data-ttu-id="97318-437">次の一覧での Windows フォーム コントロールが選択できずの値を返す`false`の<xref:System.Windows.Forms.Control.CanSelect%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-437">The Windows Forms controls in the following list are not selectable and will return a value of `false` for the <xref:System.Windows.Forms.Control.CanSelect%2A> property.</span></span> <span data-ttu-id="97318-438">これらのコントロールから派生したコントロールも選択できません。</span><span class="sxs-lookup"><span data-stu-id="97318-438">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="97318-439"><xref:System.Windows.Forms.LinkLabel> (この場合、コントロール内にリンクすることはありません)</span><span class="sxs-lookup"><span data-stu-id="97318-439"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-440">次のコード例を指定した選択<xref:System.Windows.Forms.Control>が選択可能な場合。</span><span class="sxs-lookup"><span data-stu-id="97318-440">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
 [!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
 [!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
      </Docs>
    </Member>
    <Member MemberName="Capture">
      <MemberSignature Language="C#" Value="public bool Capture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Capture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Capture" />
      <MemberSignature Language="VB.NET" Value="Public Property Capture As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Capture { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Capture : bool with get, set" Usage="System.Windows.Forms.Control.Capture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-441">コントロールがマウスをキャプチャしたかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-441">Gets or sets a value indicating whether the control has captured the mouse.</span></span></summary>
        <value><span data-ttu-id="97318-442">コントロールがマウスをキャプチャした場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-442"><see langword="true" /> if the control has captured the mouse; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-443">コントロールは、マウスをキャプチャしたら、カーソルがその境界内にあるかどうかを示すマウス入力を受け取ります。</span><span class="sxs-lookup"><span data-stu-id="97318-443">When a control has captured the mouse, it receives mouse input whether or not the cursor is within its borders.</span></span> <span data-ttu-id="97318-444">通常、マウスがドラッグ操作中にのみキャプチャされます。</span><span class="sxs-lookup"><span data-stu-id="97318-444">The mouse is typically only captured during drag operations.</span></span>  
  
 <span data-ttu-id="97318-445">前面のウィンドウには、マウスをキャプチャできます。</span><span class="sxs-lookup"><span data-stu-id="97318-445">Only the foreground window can capture the mouse.</span></span> <span data-ttu-id="97318-446">背景ウィンドウがようにしようとすると、ウィンドウは、マウス カーソルがウィンドウの表示部分内に発生するマウス イベントにのみメッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="97318-446">When a background window attempts to do so, the window receives messages only for mouse events that occur when the mouse cursor is within the visible portion of the window.</span></span> <span data-ttu-id="97318-447">また、前面のウィンドウがマウスをキャプチャした場合でも、ユーザー クリックできます別のウィンドウへの前景色。</span><span class="sxs-lookup"><span data-stu-id="97318-447">Also, even if the foreground window has captured the mouse, the user can still click another window, bringing it to the foreground.</span></span>  
  
 <span data-ttu-id="97318-448">マウスをキャプチャしたら、ショートカット キーは動作しません。</span><span class="sxs-lookup"><span data-stu-id="97318-448">When the mouse is captured, shortcut keys should not work.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-449">次のコード例に示します、<xref:System.Windows.Forms.Control.Capture%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-449">The following code example demonstrates the <xref:System.Windows.Forms.Control.Capture%2A> property.</span></span> <span data-ttu-id="97318-450">格納しているフォームに貼り付けを次のコードのこの例を実行する、 <xref:System.Windows.Forms.Label> label1 と 2 という<xref:System.Windows.Forms.ListBox>listbox1 と listbox2 という名前のコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-450">To run this example paste the following code in a form containing a <xref:System.Windows.Forms.Label> named label1 and two <xref:System.Windows.Forms.ListBox> controls named listbox1 and listbox2.</span></span> <span data-ttu-id="97318-451">フォームおよびコントロールの<xref:System.Windows.Forms.Control.MouseDown>イベントは、この例では、メソッドに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="97318-451">Ensure the form and controls' <xref:System.Windows.Forms.Control.MouseDown> event is associated with the method in this example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlCapture#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlCapture#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlCapture/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-452">このプロパティの値を設定するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-452">for all windows to set this property value.</span></span> <span data-ttu-id="97318-453">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="97318-453">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidation">
      <MemberSignature Language="C#" Value="public bool CausesValidation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CausesValidation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CausesValidation" />
      <MemberSignature Language="VB.NET" Value="Public Property CausesValidation As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CausesValidation { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CausesValidation : bool with get, set" Usage="System.Windows.Forms.Control.CausesValidation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-454">そのコントロールが原因で、フォーカスを受け取ると検証が必要なコントロールに対して、検証が実行されるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-454">Gets or sets a value indicating whether the control causes validation to be performed on any controls that require validation when it receives focus.</span></span></summary>
        <value><span data-ttu-id="97318-455">そのコントロールが原因で、フォーカスを受け取ると検証が必要なコントロールに対して検証が実行される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-455"><see langword="true" /> if the control causes validation to be performed on any controls requiring validation when it receives focus; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-456">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-456">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-457">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-457">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="97318-458"><xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティの値は通常に設定`false`ヘルプ ボタンなどのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-458">The <xref:System.Windows.Forms.Control.CausesValidation%2A> property value is typically set to `false` for controls such as a Help button.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-459">次のコード例は、派生クラスを使用して<xref:System.Windows.Forms.TextBox>しユーザーが入力した電子メール アドレスを検証します。</span><span class="sxs-lookup"><span data-stu-id="97318-459">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="97318-460">標準形式の電子メール アドレスがない場合 (を含む"@" and ".")、検証に失敗、<xref:System.Windows.Forms.ErrorProvider>アイコンが表示され、イベントが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="97318-460">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="97318-461">フォームのボタンのいずれかがその<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-461">One of the buttons on the form has its <xref:System.Windows.Forms.Control.CausesValidation%2A> property set to `false`.</span></span> <span data-ttu-id="97318-462">クリックするか、このボタンにフォーカスの設定は、検証をトリガーしません。</span><span class="sxs-lookup"><span data-stu-id="97318-462">Clicking or setting focus to this button does not trigger validation.</span></span> <span data-ttu-id="97318-463">この例では、する必要があります、 <xref:System.Windows.Forms.TextBox>、<xref:System.Windows.Forms.ErrorProvider>コントロール、および<xref:System.Windows.Forms.Button>フォームで作成されました。</span><span class="sxs-lookup"><span data-stu-id="97318-463">This example requires that a <xref:System.Windows.Forms.TextBox>, an <xref:System.Windows.Forms.ErrorProvider> control, and a <xref:System.Windows.Forms.Button> have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#2)]
 [!code-csharp[Control.Validating#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#2)]
 [!code-vb[Control.Validating#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="CausesValidationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CausesValidationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CausesValidationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CausesValidationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CausesValidationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CausesValidationChanged;" />
      <MemberSignature Language="F#" Value="member this.CausesValidationChanged : EventHandler " Usage="member this.CausesValidationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-464"><see cref="P:System.Windows.Forms.Control.CausesValidation" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-464">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.CausesValidation" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-465">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.CausesValidation%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-465">This event is raised if the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-466">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-466">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="ChangeUICues">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.UICuesEventHandler ChangeUICues;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.UICuesEventHandler ChangeUICues" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ChangeUICues" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ChangeUICues As UICuesEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::UICuesEventHandler ^ ChangeUICues;" />
      <MemberSignature Language="F#" Value="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " Usage="member this.ChangeUICues : System.Windows.Forms.UICuesEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.UICuesEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-467">フォーカスまたはキーボードのユーザー インターフェイス (UI) キューが変更されるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-467">Occurs when the focus or keyboard user interface (UI) cues change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-468">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-468">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-469">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-469">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-470">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.ChangeUICues>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-470">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span> <span data-ttu-id="97318-471">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-471">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-472">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-472">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-473">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-473">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-474">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.ChangeUICues>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-474">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ChangeUICues> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#67](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#67)]
 [!code-vb[System.Windows.Forms.EventExamples#67](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#67)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="CheckForIllegalCrossThreadCalls">
      <MemberSignature Language="C#" Value="public static bool CheckForIllegalCrossThreadCalls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property bool CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property CheckForIllegalCrossThreadCalls As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property bool CheckForIllegalCrossThreadCalls { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckForIllegalCrossThreadCalls : bool with get, set" Usage="System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-475">アプリケーションのデバッグ中に、コントロールの <see cref="P:System.Windows.Forms.Control.Handle" /> プロパティにアクセスする間違ったスレッドによる呼び出しをキャッチするかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-475">Gets or sets a value indicating whether to catch calls on the wrong thread that access a control's <see cref="P:System.Windows.Forms.Control.Handle" /> property when an application is being debugged.</span></span></summary>
        <value><span data-ttu-id="97318-476">間違ったスレッドによる呼び出しをキャッチする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-476"><see langword="true" /> if calls on the wrong thread are caught; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-477">コントロールのスレッドの作成以外のスレッドがそのコントロールのメソッドまたはプロパティのいずれかにアクセスしようとすると、予期しない結果に多くの場合、つながります。</span><span class="sxs-lookup"><span data-stu-id="97318-477">When a thread other than the creating thread of a control tries to access one of that control's methods or properties, it often leads to unpredictable results.</span></span> <span data-ttu-id="97318-478">一般的な無効なスレッドのアクティビティは、コントロールにアクセスする間違ったスレッドで呼び出し<xref:System.Windows.Forms.Control.Handle%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-478">A common invalid thread activity is a call on the wrong thread that accesses the control's <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="97318-479">設定<xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A>に`true`を発見し、デバッグ中に、このスレッドのアクティビティをより簡単に診断します。</span><span class="sxs-lookup"><span data-stu-id="97318-479">Set <xref:System.Windows.Forms.Control.CheckForIllegalCrossThreadCalls%2A> to `true` to find and diagnose this thread activity more easily while debugging.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-480">コントロールがクリックされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-480">Occurs when the control is clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-481"><xref:System.Windows.Forms.Control.Click>イベントを渡します、<xref:System.EventArgs>がイベント ハンドラーにこれを示しているだけクリックが発生したことです。</span><span class="sxs-lookup"><span data-stu-id="97318-481">The <xref:System.Windows.Forms.Control.Click> event passes an <xref:System.EventArgs> to its event handler, so it only indicates that a click has occurred.</span></span> <span data-ttu-id="97318-482">使用して、具体的なマウス情報 (ボタンを数回のクリック、ホイールを回転、または場所の数) が必要な場合、<xref:System.Windows.Forms.Control.MouseClick>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-482">If you need more specific mouse information (button, number of clicks, wheel rotation, or location), use the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="97318-483">ただし、<xref:System.Windows.Forms.Control.MouseClick>以外、マウス、ENTER キーを押すなどのアクションによって、クリックが発生した場合、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="97318-483">However, the <xref:System.Windows.Forms.Control.MouseClick> event will not be raised if the click is caused by action other than that of the mouse, such as pressing the ENTER key.</span></span>  
  
 <span data-ttu-id="97318-484">ダブルクリックは、ユーザーのオペレーティング システムのマウス設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97318-484">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="97318-485">ユーザーは、2 回のクリックではなくダブルクリックと見なされるマウス ボタンのクリック間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="97318-485">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="97318-486"><xref:System.Windows.Forms.Control.Click>たびに、コントロールがダブルクリックされたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-486">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="97318-487">などのイベント ハンドラーがある場合、<xref:System.Windows.Forms.Control.Click>と<xref:System.Windows.Forms.Control.DoubleClick>のイベントを<xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Control.Click>と<xref:System.Windows.Forms.Control.DoubleClick>フォームをダブルクリックし、両方のメソッドが呼び出されるイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-487">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="97318-488">コントロールがダブルクリックされたかどうか、コントロールがサポートされていないこと、 <xref:System.Windows.Forms.Control.DoubleClick> 、イベント、<xref:System.Windows.Forms.Control.Click>イベントを 2 回発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-488">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="97318-489">設定する必要があります、`StandardClick`の値<xref:System.Windows.Forms.ControlStyles>に`true`このイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-489">You must set the `StandardClick` value of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-490">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-490">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-491">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-491">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-492">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-492">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-493">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-493">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
## <a name="notes-to-inheritors"></a><span data-ttu-id="97318-494">継承時の注意</span><span class="sxs-lookup"><span data-stu-id="97318-494">Notes to inheritors</span></span>

<span data-ttu-id="97318-495">標準の Windows フォーム コントロールから継承して、変更、`StandardClick`または`StandardDoubleClick`値<xref:System.Windows.Forms.ControlStyles>に`true`予期しない動作が発生したり、影響を与えるありませんすべてのコントロールがサポートされていない場合、<xref:System.Windows.Forms.Control.Click>または<xref:System.Windows.Forms.Control.DoubleClick>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-495">Inheriting from a standard Windows Forms control and changing the `StandardClick` or `StandardDoubleClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` can cause unexpected behavior or have no effect at all if the control does not support the <xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.DoubleClick> events.</span></span>
  
<span data-ttu-id="97318-496">次の表に、Windows フォーム コントロールとイベント (<xref:System.Windows.Forms.Control.Click>または<xref:System.Windows.Forms.Control.DoubleClick>) で指定したマウス アクションへの応答が発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-496">The following table lists Windows Forms controls and which event (<xref:System.Windows.Forms.Control.Click> or <xref:System.Windows.Forms.Control.DoubleClick>) is raised in response to the mouse action specified.</span></span>

| <span data-ttu-id="97318-497">コントロール</span><span class="sxs-lookup"><span data-stu-id="97318-497">Control</span></span> | <span data-ttu-id="97318-498">マウスの左クリック</span><span class="sxs-lookup"><span data-stu-id="97318-498">Left Mouse Click</span></span> | <span data-ttu-id="97318-499">マウスの左ダブル クリックします</span><span class="sxs-lookup"><span data-stu-id="97318-499">Left Mouse Double Click</span></span> | <span data-ttu-id="97318-500">マウスの右クリックします</span><span class="sxs-lookup"><span data-stu-id="97318-500">Right Mouse Click</span></span> | <span data-ttu-id="97318-501">マウスの右ダブル クリックします</span><span class="sxs-lookup"><span data-stu-id="97318-501">Right Mouse Double Click</span></span> | <span data-ttu-id="97318-502">マウスの中央クリック</span><span class="sxs-lookup"><span data-stu-id="97318-502">Middle Mouse Click</span></span> | <span data-ttu-id="97318-503">マウスの中央をダブルクリックします。</span><span class="sxs-lookup"><span data-stu-id="97318-503">Middle Mouse Double Click</span></span> | <span data-ttu-id="97318-504">XButton1 マウスのクリック</span><span class="sxs-lookup"><span data-stu-id="97318-504">XButton1 Mouse Click</span></span> | <span data-ttu-id="97318-505">マウスの XButton1 ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-505">XButton1 Mouse Double-Click</span></span> | <span data-ttu-id="97318-506">XButton2 マウスのクリック</span><span class="sxs-lookup"><span data-stu-id="97318-506">XButton2 Mouse Click</span></span> | <span data-ttu-id="97318-507">XButton2 マウスのダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-507">XButton2 Mouse Double-Click</span></span> | 
| ------- | ---------------- | ----------------------- | ----------------- | ------------------------ | ------------------ | ------------------------- | -------------------- | --------------------------- | -------------------- | --------------------------- |
| <span data-ttu-id="97318-508"><xref:System.Windows.Forms.MonthCalendar>, <xref:System.Windows.Forms.DateTimePicker>, <xref:System.Windows.Forms.HScrollBar>, <xref:System.Windows.Forms.VScrollBar></span><span class="sxs-lookup"><span data-stu-id="97318-508"><xref:System.Windows.Forms.MonthCalendar>, <xref:System.Windows.Forms.DateTimePicker>, <xref:System.Windows.Forms.HScrollBar>, <xref:System.Windows.Forms.VScrollBar></span></span> | <span data-ttu-id="97318-509">none</span><span class="sxs-lookup"><span data-stu-id="97318-509">none</span></span> | <span data-ttu-id="97318-510">none</span><span class="sxs-lookup"><span data-stu-id="97318-510">none</span></span> | <span data-ttu-id="97318-511">none</span><span class="sxs-lookup"><span data-stu-id="97318-511">none</span></span> | <span data-ttu-id="97318-512">none</span><span class="sxs-lookup"><span data-stu-id="97318-512">none</span></span> | <span data-ttu-id="97318-513">none</span><span class="sxs-lookup"><span data-stu-id="97318-513">none</span></span> | <span data-ttu-id="97318-514">none</span><span class="sxs-lookup"><span data-stu-id="97318-514">none</span></span> | <span data-ttu-id="97318-515">none</span><span class="sxs-lookup"><span data-stu-id="97318-515">none</span></span> | <span data-ttu-id="97318-516">none</span><span class="sxs-lookup"><span data-stu-id="97318-516">none</span></span> | <span data-ttu-id="97318-517">none</span><span class="sxs-lookup"><span data-stu-id="97318-517">none</span></span> | <span data-ttu-id="97318-518">none</span><span class="sxs-lookup"><span data-stu-id="97318-518">none</span></span> |
| <span data-ttu-id="97318-519"><xref:System.Windows.Forms.Button>, <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.RichTextBox>, <xref:System.Windows.Forms.RadioButton></span><span class="sxs-lookup"><span data-stu-id="97318-519"><xref:System.Windows.Forms.Button>, <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.RichTextBox>, <xref:System.Windows.Forms.RadioButton></span></span> | <span data-ttu-id="97318-520">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-520">Click</span></span> | <span data-ttu-id="97318-521">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-521">Click, Click</span></span> | <span data-ttu-id="97318-522">none</span><span class="sxs-lookup"><span data-stu-id="97318-522">none</span></span> | <span data-ttu-id="97318-523">none</span><span class="sxs-lookup"><span data-stu-id="97318-523">none</span></span> | <span data-ttu-id="97318-524">none</span><span class="sxs-lookup"><span data-stu-id="97318-524">none</span></span> | <span data-ttu-id="97318-525">none</span><span class="sxs-lookup"><span data-stu-id="97318-525">none</span></span> | <span data-ttu-id="97318-526">none</span><span class="sxs-lookup"><span data-stu-id="97318-526">none</span></span> | <span data-ttu-id="97318-527">none</span><span class="sxs-lookup"><span data-stu-id="97318-527">none</span></span> | <span data-ttu-id="97318-528">none</span><span class="sxs-lookup"><span data-stu-id="97318-528">none</span></span> | <span data-ttu-id="97318-529">none</span><span class="sxs-lookup"><span data-stu-id="97318-529">none</span></span> |
| <span data-ttu-id="97318-530"><xref:System.Windows.Forms.ListBox>、 <xref:System.Windows.Forms.CheckedListBox>、 <xref:System.Windows.Forms.ComboBox></span><span class="sxs-lookup"><span data-stu-id="97318-530"><xref:System.Windows.Forms.ListBox>, <xref:System.Windows.Forms.CheckedListBox>, <xref:System.Windows.Forms.ComboBox></span></span> | <span data-ttu-id="97318-531">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-531">Click</span></span> | <span data-ttu-id="97318-532">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-532">Click, DoubleClick</span></span> | <span data-ttu-id="97318-533">none</span><span class="sxs-lookup"><span data-stu-id="97318-533">none</span></span> | <span data-ttu-id="97318-534">none</span><span class="sxs-lookup"><span data-stu-id="97318-534">none</span></span> | <span data-ttu-id="97318-535">none</span><span class="sxs-lookup"><span data-stu-id="97318-535">none</span></span> | <span data-ttu-id="97318-536">none</span><span class="sxs-lookup"><span data-stu-id="97318-536">none</span></span> | <span data-ttu-id="97318-537">none</span><span class="sxs-lookup"><span data-stu-id="97318-537">none</span></span> | <span data-ttu-id="97318-538">none</span><span class="sxs-lookup"><span data-stu-id="97318-538">none</span></span> | <span data-ttu-id="97318-539">none</span><span class="sxs-lookup"><span data-stu-id="97318-539">none</span></span> | <span data-ttu-id="97318-540">none</span><span class="sxs-lookup"><span data-stu-id="97318-540">none</span></span> |
| <span data-ttu-id="97318-541"><xref:System.Windows.Forms.TextBox>、 <xref:System.Windows.Forms.DomainUpDown>、 <xref:System.Windows.Forms.NumericUpDown></span><span class="sxs-lookup"><span data-stu-id="97318-541"><xref:System.Windows.Forms.TextBox>, <xref:System.Windows.Forms.DomainUpDown>, <xref:System.Windows.Forms.NumericUpDown></span></span> | <span data-ttu-id="97318-542">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-542">Click</span></span> | <span data-ttu-id="97318-543">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-543">Click, DoubleClick</span></span> | <span data-ttu-id="97318-544">none</span><span class="sxs-lookup"><span data-stu-id="97318-544">none</span></span> | <span data-ttu-id="97318-545">none</span><span class="sxs-lookup"><span data-stu-id="97318-545">none</span></span> | <span data-ttu-id="97318-546">none</span><span class="sxs-lookup"><span data-stu-id="97318-546">none</span></span> | <span data-ttu-id="97318-547">none</span><span class="sxs-lookup"><span data-stu-id="97318-547">none</span></span> | <span data-ttu-id="97318-548">none</span><span class="sxs-lookup"><span data-stu-id="97318-548">none</span></span> | <span data-ttu-id="97318-549">none</span><span class="sxs-lookup"><span data-stu-id="97318-549">none</span></span> | <span data-ttu-id="97318-550">none</span><span class="sxs-lookup"><span data-stu-id="97318-550">none</span></span> | <span data-ttu-id="97318-551">none</span><span class="sxs-lookup"><span data-stu-id="97318-551">none</span></span> |
| <span data-ttu-id="97318-552">\* <xref:System.Windows.Forms.TreeView>, \* <xref:System.Windows.Forms.ListView></span><span class="sxs-lookup"><span data-stu-id="97318-552">\* <xref:System.Windows.Forms.TreeView>, \* <xref:System.Windows.Forms.ListView></span></span> | <span data-ttu-id="97318-553">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-553">Click</span></span> | <span data-ttu-id="97318-554">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-554">Click, DoubleClick</span></span> | <span data-ttu-id="97318-555">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-555">Click</span></span> | <span data-ttu-id="97318-556">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-556">Click, DoubleClick</span></span> | <span data-ttu-id="97318-557">none</span><span class="sxs-lookup"><span data-stu-id="97318-557">none</span></span> | <span data-ttu-id="97318-558">none</span><span class="sxs-lookup"><span data-stu-id="97318-558">none</span></span> | <span data-ttu-id="97318-559">none</span><span class="sxs-lookup"><span data-stu-id="97318-559">none</span></span> | <span data-ttu-id="97318-560">none</span><span class="sxs-lookup"><span data-stu-id="97318-560">none</span></span> | <span data-ttu-id="97318-561">none</span><span class="sxs-lookup"><span data-stu-id="97318-561">none</span></span> | <span data-ttu-id="97318-562">none</span><span class="sxs-lookup"><span data-stu-id="97318-562">none</span></span> |
| <span data-ttu-id="97318-563"><xref:System.Windows.Forms.ProgressBar>, <xref:System.Windows.Forms.TrackBar></span><span class="sxs-lookup"><span data-stu-id="97318-563"><xref:System.Windows.Forms.ProgressBar>, <xref:System.Windows.Forms.TrackBar></span></span> | <span data-ttu-id="97318-564">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-564">Click</span></span> | <span data-ttu-id="97318-565">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-565">Click, Click</span></span> | <span data-ttu-id="97318-566">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-566">Click</span></span> | <span data-ttu-id="97318-567">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-567">Click, Click</span></span> | <span data-ttu-id="97318-568">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-568">Click</span></span> | <span data-ttu-id="97318-569">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-569">Click, Click</span></span> | <span data-ttu-id="97318-570">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-570">Click</span></span> | <span data-ttu-id="97318-571">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-571">Click, Click</span></span> | <span data-ttu-id="97318-572">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-572">Click</span></span> | <span data-ttu-id="97318-573">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-573">Click, Click</span></span> |
| <span data-ttu-id="97318-574"><xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.DataGrid>, <xref:System.Windows.Forms.Label>, <xref:System.Windows.Forms.LinkLabel>, <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.GroupBox>, <xref:System.Windows.Forms.PictureBox>, <xref:System.Windows.Forms.Splitter>, <xref:System.Windows.Forms.StatusBar>, <xref:System.Windows.Forms.ToolBar>, <xref:System.Windows.Forms.TabPage>, \*\* <xref:System.Windows.Forms.TabControl></span><span class="sxs-lookup"><span data-stu-id="97318-574"><xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.DataGrid>, <xref:System.Windows.Forms.Label>, <xref:System.Windows.Forms.LinkLabel>, <xref:System.Windows.Forms.Panel>, <xref:System.Windows.Forms.GroupBox>, <xref:System.Windows.Forms.PictureBox>, <xref:System.Windows.Forms.Splitter>, <xref:System.Windows.Forms.StatusBar>, <xref:System.Windows.Forms.ToolBar>, <xref:System.Windows.Forms.TabPage>, \*\* <xref:System.Windows.Forms.TabControl></span></span> | <span data-ttu-id="97318-575">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-575">Click</span></span> | <span data-ttu-id="97318-576">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-576">Click, DoubleClick</span></span> | <span data-ttu-id="97318-577">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-577">Click</span></span> | <span data-ttu-id="97318-578">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-578">Click, DoubleClick</span></span> | <span data-ttu-id="97318-579">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-579">Click</span></span> | <span data-ttu-id="97318-580">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-580">Click, DoubleClick</span></span> | <span data-ttu-id="97318-581">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-581">Click</span></span> | <span data-ttu-id="97318-582">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-582">Click, DoubleClick</span></span> | <span data-ttu-id="97318-583">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-583">Click</span></span> | <span data-ttu-id="97318-584">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-584">Click, DoubleClick</span></span> |

<span data-ttu-id="97318-585">\* 子オブジェクトの上にマウス ポインターがある必要があります (<xref:System.Windows.Forms.TreeNode>または<xref:System.Windows.Forms.ListViewItem>)。</span><span class="sxs-lookup"><span data-stu-id="97318-585">\* The mouse pointer must be over a child object (<xref:System.Windows.Forms.TreeNode> or <xref:System.Windows.Forms.ListViewItem>).</span></span>  
  
 <span data-ttu-id="97318-586">\* \*、<xref:System.Windows.Forms.TabControl>が少なくとも 1 つ<xref:System.Windows.Forms.TabPage>でその<xref:System.Windows.Forms.TabControl.TabPages>コレクション。</span><span class="sxs-lookup"><span data-stu-id="97318-586">\*\* The <xref:System.Windows.Forms.TabControl> must have at least one <xref:System.Windows.Forms.TabPage> in its <xref:System.Windows.Forms.TabControl.TabPages> collection.</span></span>

## Examples  
 <span data-ttu-id="97318-587">次のコード例は、<xref:System.Windows.Forms.Control.Click>イベント ハンドラーでイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-587">The following code example shows the <xref:System.Windows.Forms.Control.Click> event in an event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="ClientRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle ClientRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle ClientRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientRectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Rectangle ClientRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.ClientRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-588">コントロールのクライアント領域を表す四角形を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-588">Gets the rectangle that represents the client area of the control.</span></span></summary>
        <value><span data-ttu-id="97318-589">コントロールのクライアント領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-589">A <see cref="T:System.Drawing.Rectangle" /> that represents the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-590">コントロールのクライアント領域は、スクロール バー、罫線、タイトル バー、メニューなどの非クライアント要素マイナス、コントロールの境界です。</span><span class="sxs-lookup"><span data-stu-id="97318-590">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span>  
  
 <span data-ttu-id="97318-591">クライアント座標では、コントロールのクライアント領域の左上隅に対して相対的であるために、このプロパティによって返される四角形の左上隅の座標は、(0, 0) になります。</span><span class="sxs-lookup"><span data-stu-id="97318-591">Because client coordinates are relative to the upper-left corner of the client area of the control, the coordinates of the upper-left corner of the rectangle returned by this property are (0,0).</span></span> <span data-ttu-id="97318-592">このプロパティを使用して、コントロールの表面の描画などのタスクに対して、コントロールのクライアント領域の座標とサイズを取得することができます。</span><span class="sxs-lookup"><span data-stu-id="97318-592">You can use this property to obtain the size and coordinates of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="97318-593">コントロールの描画に関する詳細については、次を参照してください。 [Windows フォーム コントロールのレンダリング](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-593">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-594">次のコード例は、フォームでの自動スクロールを有効、フォームのサイズを変更して、により、フォームのサイズが変更された後、ボタンが表示されるようになります。</span><span class="sxs-lookup"><span data-stu-id="97318-594">The following code example enables auto-scrolling for a form, resizes the form, and ensures that a button remains visible after the form is resized.</span></span> <span data-ttu-id="97318-595">この例が必要です、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.Button>という名前の`button2`にします。</span><span class="sxs-lookup"><span data-stu-id="97318-595">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Button> named `button2` on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#2)]
 [!code-csharp[Windows.Forms.Control Member5#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#2)]
 [!code-vb[Windows.Forms.Control Member5#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size ClientSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size ClientSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ClientSize" />
      <MemberSignature Language="VB.NET" Value="Public Property ClientSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size ClientSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.ClientSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.ClientSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-596">コントロールのクライアント領域の高さと幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-596">Gets or sets the height and width of the client area of the control.</span></span></summary>
        <value><span data-ttu-id="97318-597">コントロールのクライアント領域の大きさを表す <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="97318-597">A <see cref="T:System.Drawing.Size" /> that represents the dimensions of the client area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-598">コントロールのクライアント領域は、スクロール バー、罫線、タイトル バー、メニューなどの非クライアント要素マイナス、コントロールの境界です。</span><span class="sxs-lookup"><span data-stu-id="97318-598">The client area of a control is the bounds of the control, minus the nonclient elements such as scroll bars, borders, title bars, and menus.</span></span> <span data-ttu-id="97318-599"><xref:System.Windows.Forms.Control.SetClientSizeCore%2A>を設定するメソッドが呼び出される、<xref:System.Windows.Forms.Control.ClientSize%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-599">The <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method is called to set the <xref:System.Windows.Forms.Control.ClientSize%2A> property.</span></span> <span data-ttu-id="97318-600"><xref:System.Windows.Forms.Control.ClientSize%2A>プロパティは、常にでは変更されませんその`set`メソッドをオーバーライドするため、 <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> 、コードが実行されることを確認する方法と、<xref:System.Windows.Forms.Control.ClientSize%2A>プロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-600">The <xref:System.Windows.Forms.Control.ClientSize%2A> property is not always changed through its `set` method so you should override the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that your code is executed when the <xref:System.Windows.Forms.Control.ClientSize%2A> property is set.</span></span>  
  
 <span data-ttu-id="97318-601"><xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType>と<xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType>プロパティは、コントロールのクライアント領域の高さと幅を表します。</span><span class="sxs-lookup"><span data-stu-id="97318-601">The <xref:System.Drawing.Size.Width%2A?displayProperty=nameWithType> and <xref:System.Drawing.Size.Height%2A?displayProperty=nameWithType> properties represent the width and height of the client area of the control.</span></span> <span data-ttu-id="97318-602">このプロパティを使用して、コントロールの表面の描画などのタスクのコントロールのクライアント領域のサイズを取得することができます。</span><span class="sxs-lookup"><span data-stu-id="97318-602">You can use this property to obtain the size of the client area of the control for tasks such as drawing on the surface of the control.</span></span>  
  
 <span data-ttu-id="97318-603">コントロールの描画に関する詳細については、次を参照してください。 [Windows フォーム コントロールのレンダリング](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-603">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-604">アプリケーションの設定は、このプロパティにバインドすることはできません。</span><span class="sxs-lookup"><span data-stu-id="97318-604">You cannot bind application settings to this property.</span></span> <span data-ttu-id="97318-605">アプリケーションの設定の詳細については、次を参照してください。[アプリケーション設定の概要](~/docs/framework/winforms/advanced/application-settings-overview.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-605">For more information on application settings, see [Application Settings Overview](~/docs/framework/winforms/advanced/application-settings-overview.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-606">次のコード例では、コントロールは、その書式設定されたテキストを可能になりますので、指定したコントロールがサイズ変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-606">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="97318-607">書式設定されたテキストは、<xref:System.Windows.Forms.Control.Text%2A>コントロールとプロパティの割り当て済み<xref:System.Windows.Forms.Control.Font%2A>テキストに適用します。</span><span class="sxs-lookup"><span data-stu-id="97318-607">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="97318-608">`AutoSizeControl`この例ではメソッドがあります、`textPadding`コントロールのすべての端に適用する余白を表すパラメーター。</span><span class="sxs-lookup"><span data-stu-id="97318-608">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="97318-609">埋め込みをするためには、文字列を揃えます。、<xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType>値、コントロールがサポートされている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-609">To make the padding appear equal, align the text with the <xref:System.Drawing.ContentAlignment.MiddleCenter?displayProperty=nameWithType> value, if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="T:System.Windows.Forms.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ClientSizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ClientSizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ClientSizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ClientSizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ClientSizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ClientSizeChanged;" />
      <MemberSignature Language="F#" Value="member this.ClientSizeChanged : EventHandler " Usage="member this.ClientSizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-610"><see cref="P:System.Windows.Forms.Control.ClientSize" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-610">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-611">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-611">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-612">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-612">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-613">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.ClientSizeChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-613">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span> <span data-ttu-id="97318-614">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-614">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-615">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-615">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-616">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-616">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-617">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.ClientSizeChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-617">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ClientSizeChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#12](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#12)]
 [!code-vb[System.Windows.Forms.EventExamples#12](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#12)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompanyName">
      <MemberSignature Language="C#" Value="public string CompanyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CompanyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CompanyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CompanyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ CompanyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CompanyName : string" Usage="System.Windows.Forms.Control.CompanyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Description("ControlCompanyNameDescr")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-618">コントロールを含んでいるアプリケーションの会社または作成者の名前を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-618">Gets the name of the company or creator of the application containing the control.</span></span></summary>
        <value><span data-ttu-id="97318-619">コントロールを含んでいるアプリケーションの会社または作成者の名前。</span><span class="sxs-lookup"><span data-stu-id="97318-619">The company name or creator of the application containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-620"><xref:System.Windows.Forms.Control.CompanyName%2A>プロパティは読み取り専用プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-620">The <xref:System.Windows.Forms.Control.CompanyName%2A> property is a read-only property.</span></span> <span data-ttu-id="97318-621">このプロパティの値を変更するには、設定、<xref:System.Reflection.AssemblyCompanyAttribute.Company%2A>プロパティの値、<xref:System.Reflection.AssemblyCompanyAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="97318-621">To change the value of this property, set the <xref:System.Reflection.AssemblyCompanyAttribute.Company%2A> property value of the <xref:System.Reflection.AssemblyCompanyAttribute>.</span></span> <span data-ttu-id="97318-622">次の c# コードのセットの行、<xref:System.Windows.Forms.Control.CompanyName%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-622">The following line of C# code sets the <xref:System.Windows.Forms.Control.CompanyName%2A> property.</span></span>  
  
```csharp  
[assembly: AssemblyCompany("Microsoft")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="97318-623">アプリの会社名、製品名、および製品バージョンを提供することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-623">It is strongly recommended that you provide the company name, product name, and product version for your app.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-624">次のコード例で、アプリケーションに関する情報を表示する、<xref:System.Windows.Forms.Label>に含まれる、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-624">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-625">この例では、する必要があります、 <xref:System.Windows.Forms.Control.CompanyName%2A>、<xref:System.Windows.Forms.Control.ProductName%2A>と<xref:System.Windows.Forms.Control.ProductVersion%2A>が設定されています。</span><span class="sxs-lookup"><span data-stu-id="97318-625">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyCompanyAttribute.Company" />
        <altmember cref="P:System.Diagnostics.FileVersionInfo.CompanyName" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.Control ctl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.Control ctl) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Contains(System.Windows.Forms.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (ctl As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::Control ^ ctl);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.Control -&gt; bool" Usage="control.Contains ctl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="97318-626">評価する <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-626">The <see cref="T:System.Windows.Forms.Control" /> to evaluate.</span></span></param>
        <summary><span data-ttu-id="97318-627">指定したコントロールが、コントロールの子かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-627">Retrieves a value indicating whether the specified control is a child of the control.</span></span></summary>
        <returns><span data-ttu-id="97318-628">指定したコントロールがコントロールの子である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-628"><see langword="true" /> if the specified control is a child of the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-629">次のコード例は、確実、<xref:System.Windows.Forms.Label>が呼び出すことによって表示されるその<xref:System.Windows.Forms.Control.BringToFront%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-629">The following code example ensures that a <xref:System.Windows.Forms.Label> is visible by calling its <xref:System.Windows.Forms.Control.BringToFront%2A> method.</span></span> <span data-ttu-id="97318-630">この例が必要です、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.Panel>という名前`panel1`、および<xref:System.Windows.Forms.Label>という名前`label1`します。</span><span class="sxs-lookup"><span data-stu-id="97318-630">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.Panel> named `panel1`, and a <xref:System.Windows.Forms.Label> named `label1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#1)]
 [!code-vb[Windows.Forms.Control Members4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ControlCollection.Contains(System.Windows.Forms.Control)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="ContainsFocus">
      <MemberSignature Language="C#" Value="public bool ContainsFocus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContainsFocus" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContainsFocus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ContainsFocus As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ContainsFocus { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ContainsFocus : bool" Usage="System.Windows.Forms.Control.ContainsFocus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-631">コントロール、またはその子コントロールの 1 つに、現在入力フォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-631">Gets a value indicating whether the control, or one of its child controls, currently has the input focus.</span></span></summary>
        <value><span data-ttu-id="97318-632">コントロール、またはその子コントロールの 1 つに、現在入力フォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-632"><see langword="true" /> if the control or one of its child controls currently has the input focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-633">このプロパティを使用して、コントロール、またはそれに含まれるコントロールのいずれかに入力フォーカスがあるかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="97318-633">You can use this property to determine whether a control or any of the controls contained within it has the input focus.</span></span> <span data-ttu-id="97318-634">コントロールにフォーカスがあるかどうかの子コントロールのいずれかに関係なく、フォーカスがあるかどうかを判断するには使用、<xref:System.Windows.Forms.Control.Focused%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-634">To determine whether the control has focus, regardless of whether any of its child controls have focus, use the <xref:System.Windows.Forms.Control.Focused%2A> property.</span></span> <span data-ttu-id="97318-635">コントロールに入力フォーカスを移すを使用して、<xref:System.Windows.Forms.Control.Focus%2A>または<xref:System.Windows.Forms.Control.Select%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-635">To give a control the input focus, use the <xref:System.Windows.Forms.Control.Focus%2A> or <xref:System.Windows.Forms.Control.Select%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenu ContextMenu { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenu ContextMenu" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenu As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenu ^ ContextMenu { System::Windows::Forms::ContextMenu ^ get(); void set(System::Windows::Forms::ContextMenu ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenu : System.Windows.Forms.ContextMenu with get, set" Usage="System.Windows.Forms.Control.ContextMenu" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-636">コントロールに関連付けられたショートカット メニューを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-636">Gets or sets the shortcut menu associated with the control.</span></span></summary>
        <value><span data-ttu-id="97318-637">コントロールに関連付けられたショートカット メニューを表す <see cref="T:System.Windows.Forms.ContextMenu" />。</span><span class="sxs-lookup"><span data-stu-id="97318-637">A <see cref="T:System.Windows.Forms.ContextMenu" /> that represents the shortcut menu associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-638">ショートカット メニューを使用して、コントロールを右クリックすると、特定のコンテキスト メニュー オプションをユーザーに付与します。</span><span class="sxs-lookup"><span data-stu-id="97318-638">Use a shortcut menus to give context-specific menu options to users when they right-click on the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-639">次のコード例が表示されます、<xref:System.Windows.Forms.ContextMenu>に割り当てられている、<xref:System.Windows.Forms.TreeView>がマウスの右ボタンのクリックされた場合と解放します。</span><span class="sxs-lookup"><span data-stu-id="97318-639">The following code example displays the <xref:System.Windows.Forms.ContextMenu> assigned to a <xref:System.Windows.Forms.TreeView> when the right mouse button is clicked and released.</span></span> <span data-ttu-id="97318-640">このコードが必要です、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.TreeView>にします。</span><span class="sxs-lookup"><span data-stu-id="97318-640">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TreeView> on it.</span></span> <span data-ttu-id="97318-641">必要ですが、<xref:System.Windows.Forms.TreeView>が、<xref:System.Windows.Forms.ContextMenu>に割り当てられているその<xref:System.Windows.Forms.Control.ContextMenu%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-641">It is also required that the <xref:System.Windows.Forms.TreeView> has a <xref:System.Windows.Forms.ContextMenu> assigned to its <xref:System.Windows.Forms.Control.ContextMenu%2A> property.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#5](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#5)]
 [!code-csharp[Windows.Forms.Control Properties2#5](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#5)]
 [!code-vb[Windows.Forms.Control Properties2#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#5)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-642">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.ContextMenu" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.ContextMenu" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-642">When overriding the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-643">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-643">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-644">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.ContextMenu" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-644">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuChanged : EventHandler " Usage="member this.ContextMenuChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-645"><see cref="P:System.Windows.Forms.Control.ContextMenu" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-645">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenu" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-646">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.ContextMenu%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-646">This event is raised if the <xref:System.Windows.Forms.Control.ContextMenu%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-647">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-647">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-648">次のコード例では、ショートカット メニューに変更が発生したときに、メッセージが表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-648">The following code example displays a message when a change occurs to the shortcut menu.</span></span>  
  
 [!code-cpp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CPP/control_contextmenu_creategraphics.cpp#2)]
 [!code-csharp[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/CS/control_contextmenu_creategraphics.cs#2)]
 [!code-vb[Control_ContextMenu_CreateGraphics#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_ContextMenu_CreateGraphics/VB/control_contextmenu_creategraphics.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStrip">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.ContextMenuStrip ContextMenuStrip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ContextMenuStrip ContextMenuStrip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ContextMenuStrip As ContextMenuStrip" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ContextMenuStrip ^ ContextMenuStrip { System::Windows::Forms::ContextMenuStrip ^ get(); void set(System::Windows::Forms::ContextMenuStrip ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStrip : System.Windows.Forms.ContextMenuStrip with get, set" Usage="System.Windows.Forms.Control.ContextMenuStrip" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenuStrip</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-649">このコントロールに関連付けられている <see cref="T:System.Windows.Forms.ContextMenuStrip" /> を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-649">Gets or sets the <see cref="T:System.Windows.Forms.ContextMenuStrip" /> associated with this control.</span></span></summary>
        <value><span data-ttu-id="97318-650">このコントロールの <see cref="T:System.Windows.Forms.ContextMenuStrip" />。<see langword="null" /> がない場合は <see cref="T:System.Windows.Forms.ContextMenuStrip" />。</span><span class="sxs-lookup"><span data-stu-id="97318-650">The <see cref="T:System.Windows.Forms.ContextMenuStrip" /> for this control, or <see langword="null" /> if there is no <see cref="T:System.Windows.Forms.ContextMenuStrip" />.</span></span> <span data-ttu-id="97318-651">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-651">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-652">場合、 <xref:System.Windows.Forms.ContextMenu> 、コントロールに割り当てられても、<xref:System.Windows.Forms.ContextMenu>よりも優先、<xref:System.Windows.Forms.ContextMenuStrip>します。</span><span class="sxs-lookup"><span data-stu-id="97318-652">If a <xref:System.Windows.Forms.ContextMenu> has also been assigned to the control, the <xref:System.Windows.Forms.ContextMenu> takes precedence over the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-653">次のコード例は、3 つ追加する方法を示します<xref:System.Windows.Forms.ToolStripMenuItem>オブジェクトを<xref:System.Windows.Forms.ContextMenuStrip>します。</span><span class="sxs-lookup"><span data-stu-id="97318-653">The following code example demonstrates how to add three <xref:System.Windows.Forms.ToolStripMenuItem> objects to a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="97318-654">さらに設定を示します、<xref:System.Windows.Forms.Control.ContextMenuStrip%2A>フォームのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-654">In addition it demonstrates setting the <xref:System.Windows.Forms.Control.ContextMenuStrip%2A> property of the form.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.ContextMenuStrip#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.ContextMenuStrip/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextMenuStripChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ContextMenuStripChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ContextMenuStripChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ContextMenuStripChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextMenuStripChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ContextMenuStripChanged;" />
      <MemberSignature Language="F#" Value="member this.ContextMenuStripChanged : EventHandler " Usage="member this.ContextMenuStripChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-655"><see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-655">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.ContextMenuStrip" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-656">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-656">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-657">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-657">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-658">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.ContextMenuStripChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-658">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span> <span data-ttu-id="97318-659">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-659">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-660">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-660">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-661">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-661">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-662">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.ContextMenuStripChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-662">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.ContextMenuStripChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#14](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#14)]
 [!code-vb[System.Windows.Forms.EventExamples#14](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#14)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlAdded">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlAdded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlAdded" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlAdded" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlAdded As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlAdded;" />
      <MemberSignature Language="F#" Value="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlAdded : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-663">新しいコントロールが <see cref="T:System.Windows.Forms.Control.ControlCollection" /> に追加されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-663">Occurs when a new control is added to the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-664">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-664">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-665">次のコード例では<xref:System.Windows.Forms.Control.ControlAdded>をフォームにコントロールを追加するで追加したコントロールの名前を表示し、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-665">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ControlRemoved">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ControlEventHandler ControlRemoved;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ControlEventHandler ControlRemoved" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ControlRemoved" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ControlRemoved As ControlEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ControlEventHandler ^ ControlRemoved;" />
      <MemberSignature Language="F#" Value="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " Usage="member this.ControlRemoved : System.Windows.Forms.ControlEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-666"><see cref="T:System.Windows.Forms.Control.ControlCollection" /> からコントロールが削除されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-666">Occurs when a control is removed from the <see cref="T:System.Windows.Forms.Control.ControlCollection" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-667">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-667">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-668">次のコード例では<xref:System.Windows.Forms.Control.ControlRemoved>フォームからコントロールを削除するで削除されたコントロールの名前を表示し、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-668">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control.ControlCollection Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control/ControlCollection Controls" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Controls" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Controls As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control::ControlCollection ^ Controls { System::Windows::Forms::Control::ControlCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Controls : System.Windows.Forms.Control.ControlCollection" Usage="System.Windows.Forms.Control.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-669">コントロール内に格納されているコントロールのコレクションを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-669">Gets the collection of controls contained within the control.</span></span></summary>
        <value><span data-ttu-id="97318-670">コントロール内に格納されているコントロールのコレクションを表す <see cref="T:System.Windows.Forms.Control.ControlCollection" />。</span><span class="sxs-lookup"><span data-stu-id="97318-670">A <see cref="T:System.Windows.Forms.Control.ControlCollection" /> representing the collection of controls contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-671">A<xref:System.Windows.Forms.Control>コントロールのコレクションの親として機能できます。</span><span class="sxs-lookup"><span data-stu-id="97318-671">A <xref:System.Windows.Forms.Control> can act as a parent to a collection of controls.</span></span> <span data-ttu-id="97318-672">たとえば、いくつかのコントロールが追加されたときに、<xref:System.Windows.Forms.Form>のメンバーである各コントロール、<xref:System.Windows.Forms.Control.ControlCollection>に割り当てられている、<xref:System.Windows.Forms.Control.Controls%2A>から派生すると、フォームのプロパティ、<xref:System.Windows.Forms.Control>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-672">For example, when several controls are added to a <xref:System.Windows.Forms.Form>, each of the controls is a member of the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property of the form, which is derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 <span data-ttu-id="97318-673">内のコントロールを操作することができます、<xref:System.Windows.Forms.Control.ControlCollection>に割り当てられている、<xref:System.Windows.Forms.Control.Controls%2A>プロパティで使用できるメソッドを使用して、<xref:System.Windows.Forms.Control.ControlCollection>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-673">You can manipulate the controls in the <xref:System.Windows.Forms.Control.ControlCollection> assigned to the <xref:System.Windows.Forms.Control.Controls%2A> property by using the methods available in the <xref:System.Windows.Forms.Control.ControlCollection> class.</span></span>  
  
 <span data-ttu-id="97318-674">いくつかのコントロールを親コントロールを追加する場合は、呼び出すことをお勧めしますが、<xref:System.Windows.Forms.Control.SuspendLayout%2A>メソッドを追加するコントロールを初期化する前にします。</span><span class="sxs-lookup"><span data-stu-id="97318-674">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="97318-675">親コントロールにコントロールを追加した後、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-675">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="97318-676">そうと、多くのコントロールを持つアプリケーションのパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="97318-676">Doing so will increase the performance of applications with many controls.</span></span>  
  
 <span data-ttu-id="97318-677">使用して、<xref:System.Windows.Forms.Control.Controls%2A>を入れ子になったコントロールを含む、フォームのコントロールすべてを反復処理するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-677">Use the <xref:System.Windows.Forms.Control.Controls%2A> property to iterate through all controls of a form, including nested controls.</span></span> <span data-ttu-id="97318-678">使用して、<xref:System.Windows.Forms.Control.GetNextControl%2A>タブ オーダーの前または次の子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-678">Use the <xref:System.Windows.Forms.Control.GetNextControl%2A> method to retrieve the previous or next child control in the tab order.</span></span> <span data-ttu-id="97318-679">使用して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>プロパティを取得またはコンテナー コントロールのアクティブなコントロールを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-679">Use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property to get or set the active control of a container control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-680">次のコード例の削除、<xref:System.Windows.Forms.Control>から、<xref:System.Windows.Forms.Control.ControlCollection>派生クラスの<xref:System.Windows.Forms.Panel>コレクションのメンバーである場合。</span><span class="sxs-lookup"><span data-stu-id="97318-680">The following code example removes a <xref:System.Windows.Forms.Control> from the <xref:System.Windows.Forms.Control.ControlCollection> of the derived class <xref:System.Windows.Forms.Panel> if it is a member of the collection.</span></span> <span data-ttu-id="97318-681">例では、作成済みである必要があります、 <xref:System.Windows.Forms.Panel>、 <xref:System.Windows.Forms.Button>、少なくとも 1 つと<xref:System.Windows.Forms.RadioButton>の control 権限、 <xref:System.Windows.Forms.Form>。</span><span class="sxs-lookup"><span data-stu-id="97318-681">The example requires that you have created a <xref:System.Windows.Forms.Panel>, a <xref:System.Windows.Forms.Button>, and at least one <xref:System.Windows.Forms.RadioButton> control on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-682"><xref:System.Windows.Forms.RadioButton>にコントロールを追加、<xref:System.Windows.Forms.Panel>コントロール、および<xref:System.Windows.Forms.Panel>に追加されたコントロール、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-682">The <xref:System.Windows.Forms.RadioButton> control(s) are added to the <xref:System.Windows.Forms.Panel> control, and the <xref:System.Windows.Forms.Panel> control added to the <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-683">ラジオ ボタンの名前、ボタンがクリックされたときに`removeButton`から削除されて、<xref:System.Windows.Forms.Control.ControlCollection>します。</span><span class="sxs-lookup"><span data-stu-id="97318-683">When the button is clicked, the radio button named `removeButton` is removed from the <xref:System.Windows.Forms.Control.ControlCollection>.</span></span>  
  
 [!code-cpp[ControlCollection#4](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlCollection/CPP/controlcollection.cpp#4)]
 [!code-csharp[ControlCollection#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlCollection/CS/controlcollection.cs#4)]
 [!code-vb[ControlCollection#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlCollection/VB/controlcollection.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControlsInstance" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="control.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-684">コントロールの新しいユーザー補助オブジェクトを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-684">Creates a new accessibility object for the control.</span></span></summary>
        <returns><span data-ttu-id="97318-685">コントロールの新しい <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="97318-685">A new <see cref="T:System.Windows.Forms.AccessibleObject" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-686">明示的に <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> メソッドを呼び出さない場合は、<xref:System.Windows.Forms.Control.AccessibilityObject%2A> プロパティが参照されると呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-686">If you do not explicitly call the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method, it will be called when the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property is referenced.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-687">取得または設定する、<xref:System.Windows.Forms.Control.AccessibilityObject%2A>プロパティへの参照を追加する必要があります、`Accessibility`と一緒にインストールされたアセンブリ、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]します。</span><span class="sxs-lookup"><span data-stu-id="97318-687">To get or set the <xref:System.Windows.Forms.Control.AccessibilityObject%2A> property, you must add a reference to the `Accessibility` assembly installed with the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)].</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-688">ユーザー補助対応のグラフの作成を次のコード例に示しますを使用して、制御、<xref:System.Windows.Forms.AccessibleObject>と<xref:System.Windows.Forms.Control.ControlAccessibleObject>アクセス可能な情報を公開するクラス。</span><span class="sxs-lookup"><span data-stu-id="97318-688">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="97318-689">コントロールは、凡例と共に 2 つの曲線をプロットします。</span><span class="sxs-lookup"><span data-stu-id="97318-689">The control plots two curves along with a legend.</span></span> <span data-ttu-id="97318-690">`ChartControlAccessibleObject`から派生したクラス`ControlAccessibleObject`で使用されて、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>グラフ コントロールのカスタムのアクセス可能な情報を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-690">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="97318-691">グラフの凡例は、実際はないため<xref:System.Windows.Forms.Control>-ベースの制御が描画される代わりに、グラフ コントロールではなく組み込みアクセス可能な情報。</span><span class="sxs-lookup"><span data-stu-id="97318-691">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="97318-692">このため、`ChartControlAccessibleObject`オーバーライド、<xref:System.Windows.Forms.AccessibleObject.GetChild%2A>を返すメソッドを`CurveLegendAccessibleObject`凡例の各部分にアクセスできる情報を表します。</span><span class="sxs-lookup"><span data-stu-id="97318-692">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="97318-693">ユーザー補助対応アプリケーションでは、このコントロールを使用すると、コントロールは、アクセスに必要な情報を提供できます。</span><span class="sxs-lookup"><span data-stu-id="97318-693">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="97318-694">このコードの抜粋を示しますのオーバーライド、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-694">This code excerpt demonstrates overriding the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method.</span></span> <span data-ttu-id="97318-695">参照してください、<xref:System.Windows.Forms.AccessibleObject>完全なコード例では、クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-695">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#2)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#2)]
 [!code-vb[System.Windows.Forms.AccessibleObject#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-696">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />、派生クラスでない呼び出すのでは、基本クラスの<see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-696">When overriding <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> in a derived class, do not call the base class's <see cref="M:System.Windows.Forms.Control.CreateAccessibilityInstance" /> method.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Control.ControlAccessibleObject" />
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="CreateControl">
      <MemberSignature Language="C#" Value="public void CreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControl" />
      <MemberSignature Language="VB.NET" Value="Public Sub CreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CreateControl();" />
      <MemberSignature Language="F#" Value="member this.CreateControl : unit -&gt; unit" Usage="control.CreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-697">ハンドルおよび子コントロールの作成を含めて、強制的に表示子コントロールを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-697">Forces the creation of the visible control, including the creation of the handle and any visible child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-698"><xref:System.Windows.Forms.Control.CreateControl%2A>メソッドは、コントロールとその子コントロールの作成を識別するハンドルを強制します。</span><span class="sxs-lookup"><span data-stu-id="97318-698">The <xref:System.Windows.Forms.Control.CreateControl%2A> method forces a handle to be created for the control and its child controls.</span></span> <span data-ttu-id="97318-699">コントロールまたはその子の操作のためのハンドルが直ちに必要時にこのメソッドが使用されます。単に呼び出し元コントロールのコンス トラクターは作成されません、<xref:System.Windows.Forms.Control.Handle%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-699">This method is used when you need a handle immediately for manipulation of the control or its children; simply calling a control's constructor does not create the <xref:System.Windows.Forms.Control.Handle%2A>.</span></span>  
  
 <span data-ttu-id="97318-700"><xref:System.Windows.Forms.Control.CreateControl%2A> 場合、コントロール ハンドルを作成できませんが、コントロールの<xref:System.Windows.Forms.Control.Visible%2A>プロパティは`false`。</span><span class="sxs-lookup"><span data-stu-id="97318-700"><xref:System.Windows.Forms.Control.CreateControl%2A> does not create a control handle if the control's <xref:System.Windows.Forms.Control.Visible%2A> property is `false`.</span></span> <span data-ttu-id="97318-701">いずれかの呼び出し、<xref:System.Windows.Forms.Control.CreateHandle%2A>メソッドまたはアクセス、<xref:System.Windows.Forms.Control.Handle%2A>プロパティ、コントロールの作成を処理、コントロールの可視性に関係なくが、今回は、ウィンドウ ハンドルは、コントロールの子を作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-701">You can either call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method or access the <xref:System.Windows.Forms.Control.Handle%2A> property to create the control's handle regardless of the control's visibility, but in this case, no window handles are created for the control's children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateControlsInstance">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Control.ControlCollection CreateControlsInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.Control/ControlCollection CreateControlsInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateControlsInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateControlsInstance () As Control.ControlCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::Control::ControlCollection ^ CreateControlsInstance();" />
      <MemberSignature Language="F#" Value="abstract member CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection&#xA;override this.CreateControlsInstance : unit -&gt; System.Windows.Forms.Control.ControlCollection" Usage="control.CreateControlsInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control+ControlCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-702">コントロールのコントロール コレクションの新しいインスタンスを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-702">Creates a new instance of the control collection for the control.</span></span></summary>
        <returns><span data-ttu-id="97318-703">コントロールに割り当てられた <see cref="T:System.Windows.Forms.Control.ControlCollection" /> の新しいインスタンス。</span><span class="sxs-lookup"><span data-stu-id="97318-703">A new instance of <see cref="T:System.Windows.Forms.Control.ControlCollection" /> assigned to the control.</span></span></returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-704">このメソッドの基本クラスのバージョンは、派生クラスによって呼び出されませんする必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-704">The base class version of this method should not be called by a derived class.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="Created">
      <MemberSignature Language="C#" Value="public bool Created { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Created" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Created" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Created As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Created { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Created : bool" Usage="System.Windows.Forms.Control.Created" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-705">コントロールが作成されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-705">Gets a value indicating whether the control has been created.</span></span></summary>
        <value><span data-ttu-id="97318-706">コントロールが作成されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-706"><see langword="true" /> if the control has been created; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-707"><xref:System.Windows.Forms.Control.Created%2A>プロパティが返す`true`場合、<xref:System.Windows.Forms.Control>場合でも、コントロールのハンドル可能性がありますいない作成または再作成がまだ正常に作成されました。</span><span class="sxs-lookup"><span data-stu-id="97318-707">The <xref:System.Windows.Forms.Control.Created%2A> property returns `true` if the <xref:System.Windows.Forms.Control> was successfully created even though the control's handle might not have been created or recreated yet.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.OnCreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="CreateGraphics">
      <MemberSignature Language="C#" Value="public System.Drawing.Graphics CreateGraphics ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Graphics CreateGraphics() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateGraphics" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateGraphics () As Graphics" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Graphics ^ CreateGraphics();" />
      <MemberSignature Language="F#" Value="member this.CreateGraphics : unit -&gt; System.Drawing.Graphics" Usage="control.CreateGraphics " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Graphics</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-708">コントロールの <see cref="T:System.Drawing.Graphics" /> を作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-708">Creates the <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></summary>
        <returns><span data-ttu-id="97318-709">コントロールの <see cref="T:System.Drawing.Graphics" />。</span><span class="sxs-lookup"><span data-stu-id="97318-709">The <see cref="T:System.Drawing.Graphics" /> for the control.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-710"><xref:System.Drawing.Graphics>を通じて取得するオブジェクト、<xref:System.Windows.Forms.Control.CreateGraphics%2A>メソッドは通常は保持されません、現在の Windows メッセージの処理が完了した後 WM_PAINT メッセージを次にそのオブジェクトで描画されるものが消去されるため、します。</span><span class="sxs-lookup"><span data-stu-id="97318-710">The <xref:System.Drawing.Graphics> object that you retrieve through the <xref:System.Windows.Forms.Control.CreateGraphics%2A> method should not normally be retained after the current Windows message has been processed, because anything painted with that object will be erased with the next WM_PAINT message.</span></span> <span data-ttu-id="97318-711">そのためキャッシュすることはできません、<xref:System.Drawing.Graphics>などのメソッドを非表示に使用する以外、再利用するためのオブジェクト<xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="97318-711">Therefore you cannot cache the <xref:System.Drawing.Graphics> object for reuse, except to use non-visual methods like <xref:System.Drawing.Graphics.MeasureString%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="97318-712">代わりに、呼び出す必要がある<xref:System.Windows.Forms.Control.CreateGraphics%2A>を使用するたびに、<xref:System.Drawing.Graphics>オブジェクトを呼び出して<xref:System.Drawing.Graphics.Dispose%2A>使用が終了したら。</span><span class="sxs-lookup"><span data-stu-id="97318-712">Instead, you must call <xref:System.Windows.Forms.Control.CreateGraphics%2A> every time that you want to use the <xref:System.Drawing.Graphics> object, and then call <xref:System.Drawing.Graphics.Dispose%2A> when you are finished using it.</span></span> <span data-ttu-id="97318-713">Windows メッセージの詳細については、次を参照してください。<xref:System.Windows.Forms.Control.WndProc%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-713">For more information about Windows messages, see <xref:System.Windows.Forms.Control.WndProc%2A>.</span></span>  
  
 <span data-ttu-id="97318-714">仕様上、<xref:System.Windows.Forms.Control.CreateGraphics%2A>所有権を呼び出し元のスレッドに設定し、他のスレッドで呼び出される場合は失敗します。</span><span class="sxs-lookup"><span data-stu-id="97318-714">By design, <xref:System.Windows.Forms.Control.CreateGraphics%2A> sets ownership to the calling thread, and fails if it is called on other threads.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-715">加え、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティはスレッド セーフであるコントロールの 4 つの方法があります: <xref:System.Windows.Forms.Control.Invoke%2A>、 <xref:System.Windows.Forms.Control.BeginInvoke%2A>、 <xref:System.Windows.Forms.Control.EndInvoke%2A>、および<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-715">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-716">呼び出す<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-716">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="97318-717">他のすべてのメソッド呼び出しにはコントロールのスレッドへの呼び出しをマーシャ リングするのに invoke メソッドのいずれかを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-717">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-718">次のコード例では、コントロールは、その書式設定されたテキストを可能になりますので、指定したコントロールがサイズ変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-718">The following code example resizes the specified control so the control will accommodate its formatted text.</span></span> <span data-ttu-id="97318-719">書式設定されたテキストは、<xref:System.Windows.Forms.Control.Text%2A>コントロールとプロパティの割り当て済み<xref:System.Windows.Forms.Control.Font%2A>テキストに適用します。</span><span class="sxs-lookup"><span data-stu-id="97318-719">The formatted text is the <xref:System.Windows.Forms.Control.Text%2A> property with the control's assigned <xref:System.Windows.Forms.Control.Font%2A> applied to the text.</span></span> <span data-ttu-id="97318-720">`AutoSizeControl`この例ではメソッドがあります、`textPadding`コントロールのすべての端に適用する余白を表すパラメーター。</span><span class="sxs-lookup"><span data-stu-id="97318-720">The `AutoSizeControl` method in this example also has a `textPadding` parameter that represents the padding to apply to all edges of the control.</span></span> <span data-ttu-id="97318-721">等しく見える埋め込みをするためには、文字列を揃えます。、 `MiddleCenter` @property<xref:System.Drawing.ContentAlignment?displayProperty=nameWithType>コントロールでサポートされている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-721">To make the padding appear equal, align the text with the `MiddleCenter` value of <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType> if your control supports it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Member5#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CPP/controlmembers5.cpp#1)]
 [!code-csharp[Windows.Forms.Control Member5#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Member5/CS/controlmembers5.cs#1)]
 [!code-vb[Windows.Forms.Control Member5#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Member5/VB/controlmembers5.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-722">このメソッドを呼び出すセーフ サブウィンドウします。</span><span class="sxs-lookup"><span data-stu-id="97318-722">for safe subwindows to call this method.</span></span> <span data-ttu-id="97318-723">列挙型に関連付けられている: <see langword="SafeSubWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-723">Associated enumeration: <see langword="SafeSubWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="T:System.Drawing.Graphics" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected virtual void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void CreateHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : unit -&gt; unit&#xA;override this.CreateHandle : unit -&gt; unit" Usage="control.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-724">コントロールのハンドルを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-724">Creates a handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-725">通常、呼び出す必要はありません、<xref:System.Windows.Forms.Control.CreateHandle%2A>メソッドを直接します。</span><span class="sxs-lookup"><span data-stu-id="97318-725">You typically should not call the <xref:System.Windows.Forms.Control.CreateHandle%2A> method directly.</span></span> <span data-ttu-id="97318-726">優先メソッドを呼び出すことです、<xref:System.Windows.Forms.Control.CreateControl%2A>メソッドで、強制的にコントロールが作成されたときに、コントロールとその子コントロールの作成を識別するハンドル。</span><span class="sxs-lookup"><span data-stu-id="97318-726">The preferred method is to call the <xref:System.Windows.Forms.Control.CreateControl%2A> method, which forces a handle to be created for the control and its child controls when the control is created.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="97318-727">オブジェクトが破棄された状態です。</span><span class="sxs-lookup"><span data-stu-id="97318-727">The object is in a disposed state.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-728">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-728">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-729">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-729">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-730">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.CreateHandle" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.CreateHandle" />ハンドルが作成されるようにするメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-730">When overriding <see cref="M:System.Windows.Forms.Control.CreateHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.CreateHandle" /> method to ensure that the handle is created.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.Control.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-731">コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-731">Gets the required creation parameters when the control handle is created.</span></span></summary>
        <value><span data-ttu-id="97318-732">コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</span><span class="sxs-lookup"><span data-stu-id="97318-732">A <see cref="T:System.Windows.Forms.CreateParams" /> that contains the required creation parameters when the handle to the control is created.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-733"><xref:System.Windows.Forms.Control.CreateParams%2A>プロパティがオーバーライドされ、派生コントロールのプロパティを調整するために使用しない必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-733">The <xref:System.Windows.Forms.Control.CreateParams%2A> property should not be overridden and used to adjust the properties of your derived control.</span></span> <span data-ttu-id="97318-734">などのプロパティ、 <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>、 <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>、および<xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType>などのコントロールでの対応するプロパティを設定する必要があります<xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="97318-734">Properties such as the <xref:System.Windows.Forms.CreateParams.Caption%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.CreateParams.Width%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.CreateParams.Height%2A?displayProperty=nameWithType> should be set by the corresponding properties in your control such as <xref:System.Windows.Forms.Control.Text%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Control.Width%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.Control.Height%2A?displayProperty=nameWithType>.</span></span> <span data-ttu-id="97318-735"><xref:System.Windows.Forms.CreateParams>標準の Windows コントロール クラスをラップするか、スタイルを設定するには Windows フォームの名前空間で指定されていない場合にのみ拡張する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-735">The <xref:System.Windows.Forms.CreateParams> should only be extended when you are wrapping a standard Windows control class or to set styles not provided by the Windows Forms namespace.</span></span> <span data-ttu-id="97318-736">コントロールのパラメーターを作成する方法の詳細については、次を参照してください。、`CreateWindow`と`CreateWindowEx`関数と[CREATESTRUCT](https://msdn.microsoft.com/library/windows/desktop/ms632603.aspx)ドキュメントの構造体。</span><span class="sxs-lookup"><span data-stu-id="97318-736">For more information about creating control parameters, see the `CreateWindow` and `CreateWindowEx` functions and the [CREATESTRUCT](https://msdn.microsoft.com/library/windows/desktop/ms632603.aspx) structure documentation.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-737">次のコード例では拡張、<xref:System.Windows.Forms.Control.CreateParams%2A>のプロパティを<xref:System.Windows.Forms.Button>クラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-737">The following code example extends the <xref:System.Windows.Forms.Control.CreateParams%2A> property of a <xref:System.Windows.Forms.Button> derived class.</span></span> <span data-ttu-id="97318-738"><xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType>プロパティを変更すると、それが原因で表示するボタン、<xref:System.Drawing.Icon>なく<xref:System.Drawing.Image>します。</span><span class="sxs-lookup"><span data-stu-id="97318-738">The <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> property is changed, which causes the button to display an <xref:System.Drawing.Icon> rather than an <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="97318-739">この例では、継承するクラスが必要です、<xref:System.Windows.Forms.Button>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-739">This example requires that you have a class that inherits from the <xref:System.Windows.Forms.Button> class.</span></span>  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-740">プロパティ値を取得するときに、アンマネージ コードを呼び出す直前の呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="97318-740">for the immediate caller to call unmanaged code when getting the property value.</span></span> <span data-ttu-id="97318-741">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="97318-741">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-742">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.CreateParams" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.CreateParams" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-742">When overriding the <see cref="P:System.Windows.Forms.Control.CreateParams" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.CreateParams" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-743">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-743">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="Cursor">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Cursor Cursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor Cursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Cursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Cursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Cursor ^ Cursor { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Cursor : System.Windows.Forms.Cursor with get, set" Usage="System.Windows.Forms.Control.Cursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-744">マウス ポインターがコントロールの上にあるときに表示されるカーソルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-744">Gets or sets the cursor that is displayed when the mouse pointer is over the control.</span></span></summary>
        <value><span data-ttu-id="97318-745">マウス ポインターがコントロールの上にあるときに表示されるカーソルを表す <see cref="T:System.Windows.Forms.Cursor" />。</span><span class="sxs-lookup"><span data-stu-id="97318-745">A <see cref="T:System.Windows.Forms.Cursor" /> that represents the cursor to display when the mouse pointer is over the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-746">割り当てる、<xref:System.Windows.Forms.Cursor>を<xref:System.Windows.Forms.Control.Cursor%2A>マウス ポインターがコントロールに表示されるカーソルを変更するコントロールのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-746">Assign a <xref:System.Windows.Forms.Cursor> to the <xref:System.Windows.Forms.Control.Cursor%2A> property of the control to change the cursor displayed when the mouse pointer is over the control.</span></span> <span data-ttu-id="97318-747">設定、アプリケーションのすべてのコントロールのマウス カーソルを一時的に変更する、<xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-747">To temporarily change the mouse cursor for all controls on your application set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="97318-748">通常は設定、<xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType>プロパティを設定するときに待機カーソルを<xref:System.Windows.Forms.ComboBox>ファイルの読み込みまたは保存します。</span><span class="sxs-lookup"><span data-stu-id="97318-748">Typically you would set the <xref:System.Windows.Forms.Cursor.Current%2A?displayProperty=nameWithType> property to a wait cursor when populating a <xref:System.Windows.Forms.ComboBox> or saving or loading a file.</span></span>  
  
 <span data-ttu-id="97318-749"><xref:System.Windows.Forms.Control.Cursor%2A>プロパティは、アンビエント プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-749">The <xref:System.Windows.Forms.Control.Cursor%2A> property is an ambient property.</span></span> <span data-ttu-id="97318-750">アンビエントのプロパティはコントロールのプロパティ セットは、親コントロールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97318-750">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="97318-751">たとえば、<xref:System.Windows.Forms.Button>が、同じ<xref:System.Windows.Forms.Control.BackColor%2A>親として<xref:System.Windows.Forms.Form>既定では。</span><span class="sxs-lookup"><span data-stu-id="97318-751">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="97318-752">アンビエント プロパティの詳細については、次を参照してください。、<xref:System.Windows.Forms.AmbientProperties>クラスまたは<xref:System.Windows.Forms.Control>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-752">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-753">次のコード例の塗りつぶしを<xref:System.Windows.Forms.ComboBox>ユーザーの利用可能な論理ドライブとします。</span><span class="sxs-lookup"><span data-stu-id="97318-753">The following code example fills a <xref:System.Windows.Forms.ComboBox> with the user's available logical drives.</span></span> <span data-ttu-id="97318-754">コンボ ボックスの設定も<xref:System.Windows.Forms.Cursor>プロパティのため、<xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType>ドロップダウン ボタンの上にマウス ポインターがときに、カーソルが表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-754">The example also sets the combo box's <xref:System.Windows.Forms.Cursor> property so the <xref:System.Windows.Forms.Cursors.Hand%2A?displayProperty=nameWithType> cursor is displayed when the mouse pointer is over the drop-down button.</span></span> <span data-ttu-id="97318-755">このコードが必要です、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.ComboBox>にします。</span><span class="sxs-lookup"><span data-stu-id="97318-755">This code requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.ComboBox> on it.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-756">このプロパティの値を設定するセーフ サブウィンドウします。</span><span class="sxs-lookup"><span data-stu-id="97318-756">for safe subwindows to set this property value.</span></span> <span data-ttu-id="97318-757">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></span><span class="sxs-lookup"><span data-stu-id="97318-757">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-758">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.Cursor" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.Cursor" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-758">When overriding the <see cref="P:System.Windows.Forms.Control.Cursor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Cursor" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-759">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-759">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-760">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のメソッド、<see cref="P:System.Windows.Forms.Control.Cursor" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-760">You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursors" />
      </Docs>
    </Member>
    <Member MemberName="CursorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CursorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CursorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.CursorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CursorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CursorChanged;" />
      <MemberSignature Language="F#" Value="member this.CursorChanged : EventHandler " Usage="member this.CursorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-761"><see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-761">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Cursor" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-762">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Cursor%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-762">This event is raised if the <xref:System.Windows.Forms.Control.Cursor%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-763">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-763">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-764">マウス カーソルを使用して、変更する次のコード例に示します、<xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType>プロパティ、<xref:System.Windows.Forms.Cursor>クラス、および<xref:System.Windows.Forms.Cursors>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-764">The following code example demonstrates changing the mouse cursor using the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property, the <xref:System.Windows.Forms.Cursor> class, and the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="97318-765">例を含むフォームを作成します、<xref:System.Windows.Forms.ComboBox>コントロール、<xref:System.Windows.Forms.Panel>コントロール、および<xref:System.Windows.Forms.ListView>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-765">The example creates a form that contains a <xref:System.Windows.Forms.ComboBox> control, a <xref:System.Windows.Forms.Panel> control, and a <xref:System.Windows.Forms.ListView> control.</span></span> <span data-ttu-id="97318-766"><xref:System.Windows.Forms.ComboBox>によって提供されるすべてのカーソルが含まれています、<xref:System.Windows.Forms.Cursors>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-766">The <xref:System.Windows.Forms.ComboBox> contains all cursors provided by the <xref:System.Windows.Forms.Cursors> class.</span></span> <span data-ttu-id="97318-767">ユーザーがマウス カーソルを選択すると、 <xref:System.Windows.Forms.ComboBox>、<xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType>のカーソルの更新、選択されたカーソルに設定されて、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-767">When the user selects a mouse cursor in the <xref:System.Windows.Forms.ComboBox>, the <xref:System.Windows.Forms.Control.Cursor%2A?displayProperty=nameWithType> property is set to the selected cursor, which updates the cursor for the <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-768"><xref:System.Windows.Forms.ListView>たびに、更新は、<xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-768">The <xref:System.Windows.Forms.ListView> is updated every time the <xref:System.Windows.Forms.Control.CursorChanged?displayProperty=nameWithType> event occurs.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Cursors#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CPP/cursorexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursors#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursors/CS/cursorexample.cs#1)]
 [!code-vb[System.Windows.Forms.Cursors#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursors/VB/cursorexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="T:System.Windows.Forms.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="DataBindings">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlBindingsCollection DataBindings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ControlBindingsCollection DataBindings" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DataBindings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataBindings As ControlBindingsCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlBindingsCollection ^ DataBindings { System::Windows::Forms::ControlBindingsCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataBindings : System.Windows.Forms.ControlBindingsCollection" Usage="System.Windows.Forms.Control.DataBindings" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IBindableComponent.DataBindings</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.ParenthesizePropertyName(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlBindingsCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-769">コントロールのデータ連結を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-769">Gets the data bindings for the control.</span></span></summary>
        <value><span data-ttu-id="97318-770">コントロールの <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> オブジェクトを格納している <see cref="T:System.Windows.Forms.Binding" />。</span><span class="sxs-lookup"><span data-stu-id="97318-770">A <see cref="T:System.Windows.Forms.ControlBindingsCollection" /> that contains the <see cref="T:System.Windows.Forms.Binding" /> objects for the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-771">使用して、<xref:System.Windows.Forms.Control.DataBindings%2A>プロパティにアクセスする、<xref:System.Windows.Forms.ControlBindingsCollection>します。</span><span class="sxs-lookup"><span data-stu-id="97318-771">Use the <xref:System.Windows.Forms.Control.DataBindings%2A> property to access the <xref:System.Windows.Forms.ControlBindingsCollection>.</span></span> <span data-ttu-id="97318-772">追加することで<xref:System.Windows.Forms.Binding>コレクションにオブジェクトをオブジェクトのプロパティに、コントロールのプロパティをバインドすることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-772">By adding <xref:System.Windows.Forms.Binding> objects to the collection, you can bind any property of a control to the property of an object.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-773">次のコード例を追加<xref:System.Windows.Forms.Binding>オブジェクトを<xref:System.Windows.Forms.ControlBindingsCollection>5 つのコントロール: 4 つ<xref:System.Windows.Forms.TextBox>コントロールと<xref:System.Windows.Forms.DateTimePicker>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-773">The following code example adds <xref:System.Windows.Forms.Binding> objects to the <xref:System.Windows.Forms.ControlBindingsCollection> of five controls: four <xref:System.Windows.Forms.TextBox> controls and a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="97318-774"><xref:System.Windows.Forms.ControlBindingsCollection> には、<xref:System.Windows.Forms.Control.DataBindings%2A> クラスの <xref:System.Windows.Forms.Control> プロパティを使用してアクセスします。</span><span class="sxs-lookup"><span data-stu-id="97318-774">The <xref:System.Windows.Forms.ControlBindingsCollection> is accessed through the <xref:System.Windows.Forms.Control.DataBindings%2A> property of the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Classic Control.DataBindings Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.DataBindings Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.DataBindings Example/CS/source.cs#1)]
 [!code-vb[Classic Control.DataBindings Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.DataBindings Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingContext" />
        <altmember cref="T:System.Windows.Forms.Binding" />
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="DefaultBackColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultBackColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultBackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultBackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultBackColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultBackColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultBackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-775">コントロールの既定の背景色を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-775">Gets the default background color of the control.</span></span></summary>
        <value><span data-ttu-id="97318-776">コントロールの既定の背景の <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="97318-776">The default background <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="97318-777">既定値は <see cref="P:System.Drawing.SystemColors.Control" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-777">The default is <see cref="P:System.Drawing.SystemColors.Control" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-778">これは、既定値<xref:System.Windows.Forms.Control.BackColor%2A>汎用トップレベル コントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-778">This is the default <xref:System.Windows.Forms.Control.BackColor%2A> property value of a generic top-level control.</span></span> <span data-ttu-id="97318-779">派生クラスには、既定値は異なることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-779">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-780">次のコード例は、使用する方法を示します、 <xref:System.Windows.Forms.Control.DefaultBackColor%2A>、 <xref:System.Windows.Forms.Control.DefaultFont%2A>、および<xref:System.Windows.Forms.Control.DefaultForeColor%2A>メンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-780">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="97318-781">例を実行するには、格納しているフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListBox> ListBox1 と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="97318-781">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="97318-782">呼び出す、`Populate_ListBox`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント処理メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-782">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultCursor">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Cursor DefaultCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor DefaultCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultCursor" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Cursor ^ DefaultCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.Control.DefaultCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-783">コントロールの既定のカーソルを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-783">Gets or sets the default cursor for the control.</span></span></summary>
        <value><span data-ttu-id="97318-784">現在の既定のカーソルを表す <see cref="T:System.Windows.Forms.Cursor" /> 型のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97318-784">An object of type <see cref="T:System.Windows.Forms.Cursor" /> representing the current default cursor.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-785">オーバーライド<xref:System.Windows.Forms.Control.DefaultCursor%2A>コントロールの既定のカーソルを構成します。</span><span class="sxs-lookup"><span data-stu-id="97318-785">Override <xref:System.Windows.Forms.Control.DefaultCursor%2A> to configure a default cursor for your control.</span></span> <span data-ttu-id="97318-786">これは、コントロールのコンス トラクターでカーソルを設定するよりも効率的であり、特定のカーソルに関連するデザイナー関数の自動サポートを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-786">This is more efficient than setting the cursor in the control's constructor, and gives automatic support for certain cursor-related designer functions.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultFont">
      <MemberSignature Language="C#" Value="public static System.Drawing.Font DefaultFont { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Drawing.Font DefaultFont" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultFont" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultFont As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Font ^ DefaultFont { System::Drawing::Font ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultFont : System.Drawing.Font" Usage="System.Windows.Forms.Control.DefaultFont" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-787">コントロールの既定のフォントを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-787">Gets the default font of the control.</span></span></summary>
        <value><span data-ttu-id="97318-788">コントロールの既定の <see cref="T:System.Drawing.Font" />。</span><span class="sxs-lookup"><span data-stu-id="97318-788">The default <see cref="T:System.Drawing.Font" /> of the control.</span></span> <span data-ttu-id="97318-789">返される値は、ユーザーのオペレーティング システム、およびシステムのローカル カルチャの設定によって異なります。</span><span class="sxs-lookup"><span data-stu-id="97318-789">The value returned will vary depending on the user's operating system the local culture setting of their system.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-790">次の表に、によって返される値<xref:System.Windows.Forms.Control.DefaultFont%2A>オペレーティング システムやローカル カルチャによって異なります。</span><span class="sxs-lookup"><span data-stu-id="97318-790">The following table describes the value returned by <xref:System.Windows.Forms.Control.DefaultFont%2A> depending on the operating system and local culture.</span></span>  
  
|<span data-ttu-id="97318-791">システム/、またはカルチャ</span><span class="sxs-lookup"><span data-stu-id="97318-791">System/and or Culture</span></span>|<span data-ttu-id="97318-792">フォント</span><span class="sxs-lookup"><span data-stu-id="97318-792">Font</span></span>|  
|----------------------------|----------|  
|<span data-ttu-id="97318-793">X、日本語版の Windows NT 4</span><span class="sxs-lookup"><span data-stu-id="97318-793">Windows NT 4x, Japanese version</span></span>|<span data-ttu-id="97318-794">MS UI Gothic、9 ポイント。</span><span class="sxs-lookup"><span data-stu-id="97318-794">MS UI Gothic, 9 point.</span></span>|  
|<span data-ttu-id="97318-795">アラビア語の Windows</span><span class="sxs-lookup"><span data-stu-id="97318-795">Arabic Windows</span></span>|<span data-ttu-id="97318-796">Tahoma、8 ポイント。</span><span class="sxs-lookup"><span data-stu-id="97318-796">Tahoma, 8 point.</span></span>|  
|<span data-ttu-id="97318-797">その他のオペレーティング システム/カルチャ</span><span class="sxs-lookup"><span data-stu-id="97318-797">Other operating system/culture</span></span>|<span data-ttu-id="97318-798">MS Shell Dlg の論理フォント、通常 Microsoft San Serif 8 ポイントです。</span><span class="sxs-lookup"><span data-stu-id="97318-798">MS Shell Dlg logical font, typically Microsoft San Serif 8 point.</span></span>|  
  
 <span data-ttu-id="97318-799">MS Shell Dlg フォント、システム レジストリの設定にマップします。</span><span class="sxs-lookup"><span data-stu-id="97318-799">MS Shell Dlg maps to a font set in the system registry.</span></span>  
  
 <span data-ttu-id="97318-800">上記のフォントがインストールされていない場合、既定のフォントは、Tahoma、8 ポイントは。</span><span class="sxs-lookup"><span data-stu-id="97318-800">If the previous fonts are not installed, the default font is Tahoma, 8 point.</span></span> <span data-ttu-id="97318-801">Tahoma、8 ポイントがインストールされていない場合<xref:System.Windows.Forms.Control.DefaultFont%2A>の値を返します、<xref:System.Drawing.FontFamily.GenericSansSerif%2A>プロパティ</span><span class="sxs-lookup"><span data-stu-id="97318-801">If Tahoma, 8 point, is not installed, <xref:System.Windows.Forms.Control.DefaultFont%2A> returns the value of the <xref:System.Drawing.FontFamily.GenericSansSerif%2A> property</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-802">次のコード例は、使用する方法を示します、 <xref:System.Windows.Forms.Control.DefaultBackColor%2A>、 <xref:System.Windows.Forms.Control.DefaultFont%2A>、および<xref:System.Windows.Forms.Control.DefaultForeColor%2A>メンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-802">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="97318-803">例を実行するには、格納しているフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListBox> ListBox1 と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="97318-803">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="97318-804">呼び出す、`Populate_ListBox`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント処理メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-804">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97318-805">既定のフォントまたは地域の代替フォントがクライアント コンピューターにインストールされていません。</span><span class="sxs-lookup"><span data-stu-id="97318-805">The default font or the regional alternative fonts are not installed on the client computer.</span></span></exception>
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="DefaultForeColor">
      <MemberSignature Language="C#" Value="public static System.Drawing.Color DefaultForeColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Color DefaultForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property DefaultForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Color DefaultForeColor { System::Drawing::Color get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultForeColor : System.Drawing.Color" Usage="System.Windows.Forms.Control.DefaultForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-806">コントロールの既定の前景色を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-806">Gets the default foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="97318-807">コントロールの既定の前景の <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="97318-807">The default foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="97318-808">既定値は <see cref="P:System.Drawing.SystemColors.ControlText" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-808">The default is <see cref="P:System.Drawing.SystemColors.ControlText" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-809">これは、既定値<xref:System.Windows.Forms.Control.ForeColor%2A>親のないコントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-809">This is the default <xref:System.Windows.Forms.Control.ForeColor%2A> property value of a nonparented control.</span></span> <span data-ttu-id="97318-810">派生クラスには、既定値は異なることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-810">Derived classes can have different defaults.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-811">次のコード例は、使用する方法を示します、 <xref:System.Windows.Forms.Control.DefaultBackColor%2A>、 <xref:System.Windows.Forms.Control.DefaultFont%2A>、および<xref:System.Windows.Forms.Control.DefaultForeColor%2A>メンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-811">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.DefaultBackColor%2A>, <xref:System.Windows.Forms.Control.DefaultFont%2A>, and <xref:System.Windows.Forms.Control.DefaultForeColor%2A> members.</span></span> <span data-ttu-id="97318-812">例を実行するには、格納しているフォームに次のコードを貼り付け、 <xref:System.Windows.Forms.ListBox> ListBox1 と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="97318-812">To run the example, paste the following code in a form containing a <xref:System.Windows.Forms.ListBox> called ListBox1.</span></span> <span data-ttu-id="97318-813">呼び出す、`Populate_ListBox`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント処理メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-813">Call the `Populate_ListBox` method in the form's constructor or <xref:System.Windows.Forms.Form.Load> event-handling method.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="DefaultImeMode">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode DefaultImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode DefaultImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode DefaultImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.DefaultImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-814">コントロールがサポートしている既定の IME (Input Method Editor) モードを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-814">Gets the default Input Method Editor (IME) mode supported by the control.</span></span></summary>
        <value><span data-ttu-id="97318-815"><see cref="T:System.Windows.Forms.ImeMode" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-815">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-816">入力方式エディター (IME) は、標準キーボードを使用して複雑な文字と日本語の漢字などの記号を入力するようにするプログラムです。</span><span class="sxs-lookup"><span data-stu-id="97318-816">An Input Method Editor (IME) is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, by using a standard keyboard.</span></span>  
  
 <span data-ttu-id="97318-817">実装されている、<xref:System.Windows.Forms.Control>クラスに、このプロパティは常に返します、<xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType>値。</span><span class="sxs-lookup"><span data-stu-id="97318-817">As implemented in the <xref:System.Windows.Forms.Control> class, this property always returns the <xref:System.Windows.Forms.ImeMode.Inherit?displayProperty=nameWithType> value.</span></span> <span data-ttu-id="97318-818"><xref:System.Windows.Forms.ImeMode.Inherit>値では、IME モードが、親コントロールから継承されたことを指定します。</span><span class="sxs-lookup"><span data-stu-id="97318-818">The <xref:System.Windows.Forms.ImeMode.Inherit> value specifies that the IME mode is inherited from the parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-819">次のコード例の上書き、<xref:System.Windows.Forms.Control.DefaultImeMode%2A>オフ入力方式エディターを有効にするプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-819">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultImeMode%2A> property to turn off the Input Method Editor.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#4)]
 [!code-csharp[Windows.Forms.Control Properties2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#4)]
 [!code-vb[Windows.Forms.Control Properties2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-820">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.DefaultImeMode" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-820">When overriding the <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DefaultImeMode" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-821">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-821">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="DefaultMargin">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultMargin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultMargin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMargin" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMargin As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultMargin { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMargin : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-822">コントロール間に既定で指定されている空白をピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-822">Gets the space, in pixels, that is specified by default between controls.</span></span></summary>
        <value><span data-ttu-id="97318-823">コントロール間の既定の空白を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="97318-823">A <see cref="T:System.Windows.Forms.Padding" /> that represents the default space between controls.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMaximumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMaximumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMaximumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-824">コントロールの既定の最大サイズとして指定されている長さおよび高さをピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-824">Gets the length and height, in pixels, that is specified as the default maximum size of a control.</span></span></summary>
        <value><span data-ttu-id="97318-825">コントロールのサイズを表す <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" />。</span><span class="sxs-lookup"><span data-stu-id="97318-825">A <see cref="M:System.Drawing.Point.#ctor(System.Drawing.Size)" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultMinimumSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultMinimumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultMinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultMinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultMinimumSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultMinimumSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultMinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-826">コントロールの既定の最小サイズとして指定されている長さおよび高さをピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-826">Gets the length and height, in pixels, that is specified as the default minimum size of a control.</span></span></summary>
        <value><span data-ttu-id="97318-827">コントロールのサイズを表す <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="97318-827">A <see cref="T:System.Drawing.Size" /> representing the size of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultPadding">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.Padding DefaultPadding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding DefaultPadding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultPadding" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultPadding As Padding" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::Padding DefaultPadding { System::Windows::Forms::Padding get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPadding : System.Windows.Forms.Padding" Usage="System.Windows.Forms.Control.DefaultPadding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-828">コントロールの内容の内部間隔をピクセル単位で取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-828">Gets the internal spacing, in pixels, of the contents of a control.</span></span></summary>
        <value><span data-ttu-id="97318-829">コントロールの内容の内部間隔を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="97318-829">A <see cref="T:System.Windows.Forms.Padding" /> that represents the internal spacing of the contents of a control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-830">コントロールの既定のサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-830">Gets the default size of the control.</span></span></summary>
        <value><span data-ttu-id="97318-831">コントロールの既定の <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="97318-831">The default <see cref="T:System.Drawing.Size" /> of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-832"><xref:System.Windows.Forms.Control.DefaultSize%2A>プロパティを表します、<xref:System.Drawing.Size>のコントロールを最初から作成されているときにします。</span><span class="sxs-lookup"><span data-stu-id="97318-832">The <xref:System.Windows.Forms.Control.DefaultSize%2A> property represents the <xref:System.Drawing.Size> of the control when it is initially created.</span></span> <span data-ttu-id="97318-833">コントロールのサイズを調整するには設定してその<xref:System.Windows.Forms.Control.Size%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-833">You can adjust the size of the control by setting its <xref:System.Windows.Forms.Control.Size%2A> property value.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-834">優れたパフォーマンスを維持する設定しないで、<xref:System.Drawing.Size>コントロールのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="97318-834">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="97318-835">推奨される方法は、オーバーライドする、<xref:System.Windows.Forms.Control.DefaultSize%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-835">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-836">Windows Server 2003 システムでのサイズ、<xref:System.Windows.Forms.Form>最大ピクセル幅と、モニターの高さによって制限されます。</span><span class="sxs-lookup"><span data-stu-id="97318-836">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-837">次のコード例の上書き、<xref:System.Windows.Forms.Control.DefaultSize%2A>プロパティ、なりフォーム 500 ピクセルの正方形の既定のサイズ。</span><span class="sxs-lookup"><span data-stu-id="97318-837">The following code example overrides the <xref:System.Windows.Forms.Control.DefaultSize%2A> property, and makes the default size of the form 500 pixels square.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CPP/misccontrolproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties2/CS/misccontrolproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties2/VB/misccontrolproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-838">オーバーライドする場合、<see cref="P:System.Windows.Forms.Control.DefaultSize" />派生クラスでプロパティは、返されることをお勧めです、<see cref="T:System.Drawing.Size" />目的のサイズではなく、すべての実装をオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="97318-838">When overriding the <see cref="P:System.Windows.Forms.Control.DefaultSize" /> property in a derived class, it is preferable to return a <see cref="T:System.Drawing.Size" /> with the desired dimensions rather than to override all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="T:System.Drawing.Size" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="protected virtual void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member DefWndProc :  -&gt; unit&#xA;override this.DefWndProc :  -&gt; unit" Usage="control.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="97318-839">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-839">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="97318-840">指定したメッセージを既定のウィンドウ プロシージャに送信します。</span><span class="sxs-lookup"><span data-stu-id="97318-840">Sends the specified message to the default window procedure.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-841">Windows メッセージの処理に関する詳細については、次を参照してください。、 [WindowProc 関数](https://go.microsoft.com/fwlink/?LinkId=181565)します。</span><span class="sxs-lookup"><span data-stu-id="97318-841">For more information about processing Windows messages, see the [WindowProc function](https://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-842">アンマネージ コードを呼び出す直前の呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="97318-842">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="97318-843"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="97318-843">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="protected virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="control.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-844">コントロールに関連付けられたハンドルを破棄します。</span><span class="sxs-lookup"><span data-stu-id="97318-844">Destroys the handle associated with the control.</span></span></summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-845">アンマネージ コードを呼び出す直前の呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="97318-845">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="97318-846"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="97318-846">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-847">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.DestroyHandle" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.DestroyHandle" />ハンドルが破棄されたことを確認するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-847">When overriding <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.DestroyHandle" /> method to ensure that the handle is destroyed.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="DeviceDpi">
      <MemberSignature Language="C#" Value="public int DeviceDpi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DeviceDpi" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DeviceDpi" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeviceDpi As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int DeviceDpi { int get(); };" />
      <MemberSignature Language="F#" Value="member this.DeviceDpi : int" Usage="System.Windows.Forms.Control.DeviceDpi" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-848">コントロールが現在表示されているディスプレイ デバイスの DPI 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-848">Gets the DPI value for the display device where the control is currently being displayed.</span></span></summary>
        <value><span data-ttu-id="97318-849">ディスプレイ デバイスの DPI 値。</span><span class="sxs-lookup"><span data-stu-id="97318-849">The DPI value of the display device.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayRectangle">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Rectangle DisplayRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Rectangle DisplayRectangle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DisplayRectangle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property DisplayRectangle As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Rectangle DisplayRectangle { System::Drawing::Rectangle get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayRectangle : System.Drawing.Rectangle" Usage="System.Windows.Forms.Control.DisplayRectangle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.Layout.IArrangedElement.DisplayRectangle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-850">コントロールの表示領域を表す四角形を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-850">Gets the rectangle that represents the display area of the control.</span></span></summary>
        <value><span data-ttu-id="97318-851">コントロールの表示領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-851">A <see cref="T:System.Drawing.Rectangle" /> that represents the display area of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-852"><xref:System.Windows.Forms.Control.DisplayRectangle%2A>プロパティは、コントロールの表示領域のクライアントの四角形を返します。</span><span class="sxs-lookup"><span data-stu-id="97318-852">The <xref:System.Windows.Forms.Control.DisplayRectangle%2A> property returns the client rectangle of the display area of the control.</span></span> <span data-ttu-id="97318-853">基本コントロール クラスの場合これは、クライアントの四角形と等しいです。</span><span class="sxs-lookup"><span data-stu-id="97318-853">For the base control class, this is equal to the client rectangle.</span></span> <span data-ttu-id="97318-854">ただし、コントロールを継承するときに、クライアント領域の表示領域が異なる場合、この変更が必要な場合があります。</span><span class="sxs-lookup"><span data-stu-id="97318-854">However, inheriting controls might want to change this if their client area differs from their display area.</span></span> <span data-ttu-id="97318-855">表示する四角形が最も<xref:System.Drawing.Rectangle>コントロールを囲むこと、およびコントロールをレイアウトするために使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-855">The display rectangle is the smallest <xref:System.Drawing.Rectangle> that encloses a control and is used to lay out controls.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-856">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.DisplayRectangle" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-856">When overriding the <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.DisplayRectangle" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-857">または、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-857">Alternatively, you must provide all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="control.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="97318-858">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-858"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="97318-859"><see cref="T:System.Windows.Forms.Control" /> とその子コントロールが使用しているアンマネージド リソースを解放します。オプションで、マネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="97318-859">Releases the unmanaged resources used by the <see cref="T:System.Windows.Forms.Control" /> and its child controls and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-860">このメソッドは、パブリック`Dispose()`メソッドと<xref:System.Object.Finalize%2A>メソッド。`Dispose()`</span><span class="sxs-lookup"><span data-stu-id="97318-860">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.`Dispose()`</span></span> <span data-ttu-id="97318-861">保護された起動`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-861">invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="97318-862"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-862"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="97318-863">`disposing` パラメーターが `true` の場合、このメソッドは、この <xref:System.Windows.Forms.Control> が参照しているすべてのマネージド オブジェクトによって保持されているリソースをすべて解放します。</span><span class="sxs-lookup"><span data-stu-id="97318-863">When the `disposing` parameter is `true`, this method releases all resources held by any managed objects that this <xref:System.Windows.Forms.Control> references.</span></span> <span data-ttu-id="97318-864">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-864">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-865">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-865">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="97318-866">オーバーライドするときに<see langword="Dispose(Boolean)" />の事前に呼び出したで以前破棄されたオブジェクトを参照しないように注意する<see langword="Dispose" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-866">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="97318-867">実装する方法についての詳細は<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-867">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="97318-868">詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))します。</span><span class="sxs-lookup"><span data-stu-id="97318-868">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Disposing">
      <MemberSignature Language="C#" Value="public bool Disposing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Disposing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Disposing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Disposing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Disposing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Disposing : bool" Usage="System.Windows.Forms.Control.Disposing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-869">基本 <see cref="T:System.Windows.Forms.Control" /> クラスが破棄処理中かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-869">Gets a value indicating whether the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing.</span></span></summary>
        <value><span data-ttu-id="97318-870">基本 <see langword="true" /> クラスが破棄処理中の場合は <see cref="T:System.Windows.Forms.Control" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-870"><see langword="true" /> if the base <see cref="T:System.Windows.Forms.Control" /> class is in the process of disposing; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-871">このプロパティを返す場合`true`、基本<xref:System.Windows.Forms.Control>クラスが破棄処理中です。</span><span class="sxs-lookup"><span data-stu-id="97318-871">When this property returns `true`, the base <xref:System.Windows.Forms.Control> class is in the process of disposing.</span></span> <span data-ttu-id="97318-872">コントロールが破棄されると、後に、有効な Windows のコントロールとして参照されなくなったことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-872">After the control is disposed of, it can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="97318-873">コントロールのインスタンスが破棄されると、場合でもガベージ コレクションをメモリから削除されるまでメモリにまだ保持がされます。</span><span class="sxs-lookup"><span data-stu-id="97318-873">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="97318-874">呼び出すことはできませんのコントロールが破棄されると、その<xref:System.Windows.Forms.Control.RecreateHandle%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-874">When a control is disposed of, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="Dock">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DockStyle Dock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DockStyle Dock" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Dock" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Dock As DockStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DockStyle Dock { System::Windows::Forms::DockStyle get(); void set(System::Windows::Forms::DockStyle value); };" />
      <MemberSignature Language="F#" Value="member this.Dock : System.Windows.Forms.DockStyle with get, set" Usage="System.Windows.Forms.Control.Dock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DockStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-875">コントロールの境界のうち、親コントロールにドッキングする境界を取得または設定します。また、コントロールのサイズが親コントロール内でどのように変化するかを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-875">Gets or sets which control borders are docked to its parent control and determines how a control is resized with its parent.</span></span></summary>
        <value><span data-ttu-id="97318-876"><see cref="T:System.Windows.Forms.DockStyle" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-876">One of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span> <span data-ttu-id="97318-877">既定値は <see cref="F:System.Windows.Forms.DockStyle.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-877">The default is <see cref="F:System.Windows.Forms.DockStyle.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-878">使用して、<xref:System.Windows.Forms.Control.Dock%2A>プロパティをコントロールが自動的にサイズ変更、親コントロールのサイズを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-878">Use the <xref:System.Windows.Forms.Control.Dock%2A> property to define how a control is automatically resized as its parent control is resized.</span></span> <span data-ttu-id="97318-879">たとえば、設定<xref:System.Windows.Forms.Control.Dock%2A>に<xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType>により、コントロール自体を親コントロールの左端と連携させると、親コントロールのサイズを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-879">For example, setting <xref:System.Windows.Forms.Control.Dock%2A> to <xref:System.Windows.Forms.DockStyle.Left?displayProperty=nameWithType> causes the control to align itself with the left edges of its parent control and to resize as the parent control is resized.</span></span> <span data-ttu-id="97318-880">コントロールをドッキングするは、Z オーダーで (深度) のフォームの z 軸に沿ってフォーム上のコントロールのビジュアル層である場合。</span><span class="sxs-lookup"><span data-stu-id="97318-880">Controls are docked in their Z-order, which is the visual layering of controls on a form along the form's Z-axis (depth).</span></span>  
  
 <span data-ttu-id="97318-881">コントロールは、その親コンテナーの 1 辺にドッキングできる、またはすべての端にドッキングできるし、親コンテナーを入力します。</span><span class="sxs-lookup"><span data-stu-id="97318-881">A control can be docked to one edge of its parent container or can be docked to all edges and fill the parent container.</span></span>  
  
 <span data-ttu-id="97318-882">設定、<xref:System.Windows.Forms.Control.Margin%2A>ドッキングされたコントロールのプロパティは、そのコンテナーの端からの距離に影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="97318-882">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-883"><xref:System.Windows.Forms.Control.Anchor%2A>と<xref:System.Windows.Forms.Control.Dock%2A>プロパティは相互に排他的です。</span><span class="sxs-lookup"><span data-stu-id="97318-883">The <xref:System.Windows.Forms.Control.Anchor%2A> and <xref:System.Windows.Forms.Control.Dock%2A> properties are mutually exclusive.</span></span> <span data-ttu-id="97318-884">一度に 1 つだけを設定でき、最後に、設定が優先されます。</span><span class="sxs-lookup"><span data-stu-id="97318-884">Only one can be set at a time, and the last one set takes precedence.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-885">次のコード例を作成、<xref:System.Windows.Forms.GroupBox>および一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-885">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="97318-886">例は、作成、<xref:System.Windows.Forms.TextBox>設定とその<xref:System.Windows.Forms.Control.Location%2A>グループ ボックス内で。</span><span class="sxs-lookup"><span data-stu-id="97318-886">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="97318-887">次に、設定、<xref:System.Windows.Forms.Control.Text%2A>フォームの上部に、グループ ボックス ドッキングし、グループ ボックスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-887">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="97318-888">グループ ボックスを無効に設定して、最後に、<xref:System.Windows.Forms.Control.Enabled%2A>プロパティを`false`、それが原因で無効にするグループ ボックス内に含まれるすべてのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-888">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="97318-889">割り当てられた値がないのいずれか、<see cref="T:System.Windows.Forms.DockStyle" />値。</span><span class="sxs-lookup"><span data-stu-id="97318-889">The value assigned is not one of the <see cref="T:System.Windows.Forms.DockStyle" /> values.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-890">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.Dock" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.Dock" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-890">When overriding the <see cref="P:System.Windows.Forms.Control.Dock" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Dock" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-891">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-891">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-892">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のメソッド、<see cref="P:System.Windows.Forms.Control.Dock" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-892">You are not required to override both the <see langword="get" /> and <see langword="set" /> methods of the <see cref="P:System.Windows.Forms.Control.Dock" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.DockStyle" />
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="T:System.Windows.Forms.ScrollableControl.DockPaddingEdges" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="DockChanged">
      <MemberSignature Language="C#" Value="public event EventHandler DockChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DockChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DockChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DockChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DockChanged;" />
      <MemberSignature Language="F#" Value="member this.DockChanged : EventHandler " Usage="member this.DockChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-893"><see cref="P:System.Windows.Forms.Control.Dock" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-893">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Dock" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-894">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Dock%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-894">This event is raised if the <xref:System.Windows.Forms.Control.Dock%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-895">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-895">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-896">次のコード例は、イベント ハンドラーを実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-896">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-897"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ*PropertyName* `Changed`にある場合に発生します、対応する*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-897">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes(*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-898">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-898">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="97318-899">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-899">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-900">この例が必要です、<xref:System.Windows.Forms.Form>を格納している、<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-900">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="T:System.Windows.Forms.DockStyle" />
      </Docs>
    </Member>
    <Member MemberName="DoDragDrop">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DragDropEffects DoDragDrop (object data, System.Windows.Forms.DragDropEffects allowedEffects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.DragDropEffects DoDragDrop(object data, valuetype System.Windows.Forms.DragDropEffects allowedEffects) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
      <MemberSignature Language="VB.NET" Value="Public Function DoDragDrop (data As Object, allowedEffects As DragDropEffects) As DragDropEffects" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::DragDropEffects DoDragDrop(System::Object ^ data, System::Windows::Forms::DragDropEffects allowedEffects);" />
      <MemberSignature Language="F#" Value="member this.DoDragDrop : obj * System.Windows.Forms.DragDropEffects -&gt; System.Windows.Forms.DragDropEffects" Usage="control.DoDragDrop (data, allowedEffects)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragDropEffects</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
        <Parameter Name="allowedEffects" Type="System.Windows.Forms.DragDropEffects" />
      </Parameters>
      <Docs>
        <param name="data"><span data-ttu-id="97318-901">ドラッグするデータ。</span><span class="sxs-lookup"><span data-stu-id="97318-901">The data to drag.</span></span></param>
        <param name="allowedEffects"><span data-ttu-id="97318-902"><see cref="T:System.Windows.Forms.DragDropEffects" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-902">One of the <see cref="T:System.Windows.Forms.DragDropEffects" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-903">ドラッグ アンド ドロップ操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="97318-903">Begins a drag-and-drop operation.</span></span></summary>
        <returns><span data-ttu-id="97318-904">ドラッグ アンド ドロップ操作中に実行された最終的な効果を表す、<see cref="T:System.Windows.Forms.DragDropEffects" /> 列挙体からの値。</span><span class="sxs-lookup"><span data-stu-id="97318-904">A value from the <see cref="T:System.Windows.Forms.DragDropEffects" /> enumeration that represents the final effect that was performed during the drag-and-drop operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-905">`allowedEffects`操作を実行できるどのドラッグを判別します。</span><span class="sxs-lookup"><span data-stu-id="97318-905">The `allowedEffects` parameter determines which drag operations can occur.</span></span> <span data-ttu-id="97318-906">データは、基本のマネージ クラスがありますが別のプロセス内のアプリケーションと相互運用するドラッグ操作が必要な場合 (<xref:System.String>、 <xref:System.Drawing.Bitmap>、または<xref:System.Drawing.Imaging.Metafile>)、または実装するオブジェクトを<xref:System.Runtime.Serialization.ISerializable>または<xref:System.Windows.Forms.IDataObject>します。</span><span class="sxs-lookup"><span data-stu-id="97318-906">If the drag operation needs to interoperate with applications in another process, data should either be a base managed class (<xref:System.String>, <xref:System.Drawing.Bitmap>, or <xref:System.Drawing.Imaging.Metafile>), or an object that implements <xref:System.Runtime.Serialization.ISerializable> or <xref:System.Windows.Forms.IDataObject>.</span></span>  
  
 <span data-ttu-id="97318-907">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="97318-907">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="97318-908"><xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-908">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="97318-909">コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-909">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="97318-910">コントロールが有効なドロップ ターゲットである場合、<xref:System.Windows.Forms.Control.GiveFeedback>ドラッグ アンド ドロップの効果が指定されたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-910">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="97318-911">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-911">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="97318-912">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-912">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="97318-913">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-913">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="97318-914">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-914">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="97318-915">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-915">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="97318-916">キーボードまたはマウス ボタンの状態に変更がある場合、<xref:System.Windows.Forms.Control.QueryContinueDrag>の値に基づいて、操作をキャンセルするイベントが発生し、データをドロップして、ドラッグを継続するかどうかを決定します。 または、<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>イベントのプロパティ<xref:System.Windows.Forms.QueryContinueDragEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="97318-916">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="97318-917">場合の値<xref:System.Windows.Forms.DragAction>は`Continue`、<xref:System.Windows.Forms.Control.DragOver>イベントは、操作を続行して、<xref:System.Windows.Forms.Control.GiveFeedback>適切な視覚的なフィードバックを設定できるように新しい効果でイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-917">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="97318-918">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-918">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-919"><xref:System.Windows.Forms.Control.DragOver>と<xref:System.Windows.Forms.Control.GiveFeedback>これにより、ユーザーがマウスの位置で最新のフィードバックを指定してマウスをドロップ先の間で移動、されたイベントはペアになっています。</span><span class="sxs-lookup"><span data-stu-id="97318-919">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="97318-920">場合の値<xref:System.Windows.Forms.DragAction>は`Drop`ソース アプリケーションでは、ソース データに対して適切な操作を実行できるように、データの切り取り、移動、操作だった場合、ドロップ効果の値がソースに返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-920">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="97318-921">場合の値<xref:System.Windows.Forms.DragAction>は`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-921">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-922"><xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドは、すべての例外をキャッチし、次のセキュリティまたは重大な例外のみを再スローします。</span><span class="sxs-lookup"><span data-stu-id="97318-922">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method catches all exceptions and rethrows only the following security or critical exceptions:</span></span>  
  
-   <span data-ttu-id="97318-923">SecurityException</span><span class="sxs-lookup"><span data-stu-id="97318-923">SecurityException</span></span>  
  
-   <span data-ttu-id="97318-924">NullReferenceException</span><span class="sxs-lookup"><span data-stu-id="97318-924">NullReferenceException</span></span>  
  
-   <span data-ttu-id="97318-925">StackOverflowException</span><span class="sxs-lookup"><span data-stu-id="97318-925">StackOverflowException</span></span>  
  
-   <span data-ttu-id="97318-926">OutOfMemoryException</span><span class="sxs-lookup"><span data-stu-id="97318-926">OutOfMemoryException</span></span>  
  
-   <span data-ttu-id="97318-927">ThreadAbortException</span><span class="sxs-lookup"><span data-stu-id="97318-927">ThreadAbortException</span></span>  
  
-   <span data-ttu-id="97318-928">ExecutionEngineException</span><span class="sxs-lookup"><span data-stu-id="97318-928">ExecutionEngineException</span></span>  
  
-   <span data-ttu-id="97318-929">IndexOutOfRangeException</span><span class="sxs-lookup"><span data-stu-id="97318-929">IndexOutOfRangeException</span></span>  
  
-   <span data-ttu-id="97318-930">AccessViolationException</span><span class="sxs-lookup"><span data-stu-id="97318-930">AccessViolationException</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-931">次のコード例は、2 つの間でドラッグ アンド ドロップ操作を示します<xref:System.Windows.Forms.ListBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-931">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="97318-932">例では、<xref:System.Windows.Forms.Control.DoDragDrop%2A>ドラッグ操作の開始メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-932">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="97318-933">ドラッグ操作の開始、マウスが移動した場合は、複数の<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>中にマウスの位置から、<xref:System.Windows.Forms.Control.MouseDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-933">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="97318-934"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>メソッドを使用中にドラッグする項目のインデックスを確認して、`MouseDown`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-934">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="97318-935">例では、カスタム カーソルをドラッグ アンド ドロップ操作を使用しても示しています。</span><span class="sxs-lookup"><span data-stu-id="97318-935">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="97318-936">例では、その 2 つが必要です、カーソル ファイル`3dwarro.cur`と`3dwno.cur`、カスタム ドラッグ用のアプリケーション ディレクトリ内に存在および非ドロップ カーソルの場合、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="97318-936">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="97318-937">場合に使用されるカスタム カーソル、 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox>がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-937">The custom cursors will be used if the `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="97318-938">カスタム カーソルが設定されて、<xref:System.Windows.Forms.Control.GiveFeedback>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-938">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="97318-939">キーボードの状態が評価される、<xref:System.Windows.Forms.Control.DragOver>右側のイベント ハンドラー`ListBox`ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL + ALT キーの状態に基づいて。</span><span class="sxs-lookup"><span data-stu-id="97318-939">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="97318-940">内の場所、`ListBox`中にも決定されますが、ドロップが発生、`DragOver`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-940">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="97318-941">削除するデータがない場合、 `String`、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>に設定されている`None`で<xref:System.Windows.Forms.DragDropEffects>します。</span><span class="sxs-lookup"><span data-stu-id="97318-941">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="97318-942">ドロップダウンの状態を表示する最後に、 `DropLocationLabel` <xref:System.Windows.Forms.Label>します。</span><span class="sxs-lookup"><span data-stu-id="97318-942">Finally, the status of the drop is displayed in the `DropLocationLabel` <xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="97318-943">右側のドロップするデータ`ListBox`で決定されます、<xref:System.Windows.Forms.Control.DragDrop>イベント ハンドラーと`String`の適切な場所にある値を追加、`ListBox`します。</span><span class="sxs-lookup"><span data-stu-id="97318-943">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="97318-944">ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、<xref:System.Windows.Forms.Control.QueryContinueDrag>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-944">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#1)]  
  
 <span data-ttu-id="97318-945">次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.DragDropEffects>ドラッグ アンド ドロップ操作に関連するコントロールの間でデータを転送する方法を指定する列挙体。</span><span class="sxs-lookup"><span data-stu-id="97318-945">The following code example shows how to use the <xref:System.Windows.Forms.DragDropEffects> enumeration to specify how data should be transferred between the controls involved in a drag-and-drop operation.</span></span> <span data-ttu-id="97318-946">この例では、フォームが含まれている必要があります、<xref:System.Windows.Forms.RichTextBox>コントロールと<xref:System.Windows.Forms.ListBox>制御し、<xref:System.Windows.Forms.ListBox>コントロールには、有効なファイル名の一覧が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-946">This example requires that your form includes a <xref:System.Windows.Forms.RichTextBox> control and a <xref:System.Windows.Forms.ListBox> control and that the <xref:System.Windows.Forms.ListBox> control is populated with a list of valid file names.</span></span> <span data-ttu-id="97318-947">ユーザーが上にファイル名をドラッグすると、<xref:System.Windows.Forms.RichTextBox>コントロール、コントロールの<xref:System.Windows.Forms.Control.DragEnter>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-947">When the user drags a file name onto the <xref:System.Windows.Forms.RichTextBox> control, the control's <xref:System.Windows.Forms.Control.DragEnter> event is raised.</span></span> <span data-ttu-id="97318-948">イベント ハンドラー内で、<xref:System.Windows.Forms.DragEventArgs.Effect%2A>のプロパティ、<xref:System.Windows.Forms.DragEventArgs>に初期化されます<xref:System.Windows.Forms.DragDropEffects>にファイル パスで参照されるデータをコピーする必要があるかを示す、<xref:System.Windows.Forms.RichTextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-948">Within the event handler, the <xref:System.Windows.Forms.DragEventArgs.Effect%2A> property of the <xref:System.Windows.Forms.DragEventArgs> is initialized to <xref:System.Windows.Forms.DragDropEffects> to indicate that the data referenced by the file path should be copied to the <xref:System.Windows.Forms.RichTextBox> control.</span></span>  
  
 [!code-cpp[RichTextDragDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextDragDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextDragDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextDragDrop/CS/form1.cs#1)]
 [!code-vb[RichTextDragDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextDragDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.AllowDrop" />
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected virtual bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoubleBuffered : bool with get, set" Usage="System.Windows.Forms.Control.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-949">ちらつきを軽減または回避するために、2 次バッファーを使用してコントロールの表面を再描画するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-949">Gets or sets a value indicating whether this control should redraw its surface using a secondary buffer to reduce or prevent flicker.</span></span></summary>
        <value><span data-ttu-id="97318-950">ダブル バッファリングを使用してコントロールの表面を再描画する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-950"><see langword="true" /> if the surface of the control should be drawn using double buffering; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-951">バッファリングされたグラフィックスを軽減またはが表示される画面の部分のプログレッシブ再描画によるちらつきを除去します。</span><span class="sxs-lookup"><span data-stu-id="97318-951">Buffered graphics can reduce or eliminate flicker that is caused by progressive redrawing of parts of a displayed surface.</span></span> <span data-ttu-id="97318-952">バッファリングされたグラフィックスでは、更新されたグラフィックス データが、バッファーに書き込まれた最初ことが必要です。</span><span class="sxs-lookup"><span data-stu-id="97318-952">Buffered graphics require that the updated graphics data is first written to a buffer.</span></span> <span data-ttu-id="97318-953">グラフィックス バッファーのデータには迅速に表示される表面のメモリに書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="97318-953">The data in the graphics buffer is then quickly written to displayed surface memory.</span></span> <span data-ttu-id="97318-954">通常、表示されるグラフィックス メモリの比較的すばやく切り替えるには、それ以外の場合に発生するちらつきが減少します。</span><span class="sxs-lookup"><span data-stu-id="97318-954">The relatively quick switch of the displayed graphics memory typically reduces the flicker that can otherwise occur.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-955"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> バインド可能なプロパティではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-955"><xref:System.Windows.Forms.Control.DoubleBuffered%2A> is not a bindable property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.BufferedGraphics" />
        <altmember cref="T:System.Drawing.BufferedGraphicsContext" />
        <altmember cref="T:System.Drawing.BufferedGraphicsManager" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.OptimizedDoubleBuffer" />
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : EventHandler " Usage="member this.DoubleClick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-956">コントロールがダブルクリックされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-956">Occurs when the control is double-clicked.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-957">ダブルクリックは、ユーザーのオペレーティング システムのマウス設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97318-957">A double-click is determined by the mouse settings of the user's operating system.</span></span> <span data-ttu-id="97318-958">ユーザーは、2 回のクリックではなくダブルクリックと見なされるマウス ボタンのクリック間隔を設定できます。</span><span class="sxs-lookup"><span data-stu-id="97318-958">The user can set the time between clicks of a mouse button that should be considered a double-click rather than two clicks.</span></span> <span data-ttu-id="97318-959"><xref:System.Windows.Forms.Control.Click>たびに、コントロールがダブルクリックされたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-959">The <xref:System.Windows.Forms.Control.Click> event is raised every time a control is double-clicked.</span></span> <span data-ttu-id="97318-960">などのイベント ハンドラーがある場合、<xref:System.Windows.Forms.Control.Click>と<xref:System.Windows.Forms.Control.DoubleClick>のイベントを<xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Control.Click>と<xref:System.Windows.Forms.Control.DoubleClick>フォームをダブルクリックし、両方のメソッドが呼び出されるイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-960">For example, if you have event handlers for the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events of a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Click> and <xref:System.Windows.Forms.Control.DoubleClick> events are raised when the form is double-clicked and both methods are called.</span></span> <span data-ttu-id="97318-961">コントロールがダブルクリックされたかどうか、コントロールがサポートされていないこと、 <xref:System.Windows.Forms.Control.DoubleClick> 、イベント、<xref:System.Windows.Forms.Control.Click>イベントを 2 回発生する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-961">If a control is double-clicked and that control does not support the <xref:System.Windows.Forms.Control.DoubleClick> event, the <xref:System.Windows.Forms.Control.Click> event might be raised twice.</span></span>  
  
 <span data-ttu-id="97318-962">設定する必要があります、`StandardDoubleClick`と`StandardClick`の値<xref:System.Windows.Forms.ControlStyles>に`true`このイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-962">You must set the `StandardDoubleClick` and `StandardClick` values of <xref:System.Windows.Forms.ControlStyles> to `true` for this event to be raised.</span></span> <span data-ttu-id="97318-963">これらの値を設定することがあります既に`true`既存のものから継承している場合は Windows フォームを制御します。</span><span class="sxs-lookup"><span data-stu-id="97318-963">These values might already be set to `true` if you are inheriting from existing Windows Forms controls.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-964">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-964">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-965">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-965">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-966">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-966">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-967">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-967">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-968">次のコード例では、<xref:System.Windows.Forms.Control.DoubleClick>のイベントを<xref:System.Windows.Forms.ListBox>が記載されたテキスト ファイルを読み込む、<xref:System.Windows.Forms.ListBox>に、<xref:System.Windows.Forms.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-968">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-969">標準の Windows フォーム コントロールから継承して、変更、<see langword="StandardClick" />または<see langword="StandardDoubleClick" />値<see cref="T:System.Windows.Forms.ControlStyles" />に<see langword="true" />予期しない動作が発生したり、影響を与えるありませんすべてのコントロールがサポートされていない場合、<see cref="E:System.Windows.Forms.Control.Click" />または<see cref="E:System.Windows.Forms.Control.DoubleClick" />イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-969">Inheriting from a standard Windows Forms control and changing the <see langword="StandardClick" /> or <see langword="StandardDoubleClick" /> values of <see cref="T:System.Windows.Forms.ControlStyles" /> to <see langword="true" /> can cause unexpected behavior or have no effect at all if the control does not support the <see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" /> events.</span></span>  
  
<span data-ttu-id="97318-970">次の表に、Windows フォーム コントロールとイベント (<see cref="E:System.Windows.Forms.Control.Click" />または<see cref="E:System.Windows.Forms.Control.DoubleClick" />) で指定したマウス アクションへの応答が発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-970">The following table lists Windows Forms controls and which event (<see cref="E:System.Windows.Forms.Control.Click" /> or <see cref="E:System.Windows.Forms.Control.DoubleClick" />) is raised in response to the mouse action specified.</span></span>  
  
 <list type="table"><listheader><term> <span data-ttu-id="97318-971">コントロール</span><span class="sxs-lookup"><span data-stu-id="97318-971">Control</span></span> 
 </term><description> <span data-ttu-id="97318-972">マウスの左クリック</span><span class="sxs-lookup"><span data-stu-id="97318-972">Left Mouse Click</span></span> 
 </description><description> <span data-ttu-id="97318-973">マウスの左ダブル クリックします</span><span class="sxs-lookup"><span data-stu-id="97318-973">Left Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="97318-974">マウスの右クリックします</span><span class="sxs-lookup"><span data-stu-id="97318-974">Right Mouse Click</span></span> 
 </description><description> <span data-ttu-id="97318-975">マウスの右ダブル クリックします</span><span class="sxs-lookup"><span data-stu-id="97318-975">Right Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="97318-976">マウスの中央クリック</span><span class="sxs-lookup"><span data-stu-id="97318-976">Middle Mouse Click</span></span> 
 </description><description> <span data-ttu-id="97318-977">マウスの中央をダブルクリックします。</span><span class="sxs-lookup"><span data-stu-id="97318-977">Middle Mouse Double Click</span></span> 
 </description><description> <span data-ttu-id="97318-978">XButton1 マウスのクリック</span><span class="sxs-lookup"><span data-stu-id="97318-978">XButton1 Mouse Click</span></span> 
 </description><description> <span data-ttu-id="97318-979">マウスの XButton1 ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-979">XButton1 Mouse Double-Click</span></span> 
 </description><description> <span data-ttu-id="97318-980">XButton2 マウスのクリック</span><span class="sxs-lookup"><span data-stu-id="97318-980">XButton2 Mouse Click</span></span> 
 </description><description> <span data-ttu-id="97318-981">XButton2 マウスのダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-981">XButton2 Mouse Double-Click</span></span> 
 </description></listheader><item><term><span data-ttu-id="97318-982"><see cref="T:System.Windows.Forms.MonthCalendar" />、</span><span class="sxs-lookup"><span data-stu-id="97318-982"><see cref="T:System.Windows.Forms.MonthCalendar" />,</span></span> 
 <span data-ttu-id="97318-983"><see cref="T:System.Windows.Forms.DateTimePicker" />、</span><span class="sxs-lookup"><span data-stu-id="97318-983"><see cref="T:System.Windows.Forms.DateTimePicker" />,</span></span> 
 <span data-ttu-id="97318-984"><see cref="T:System.Windows.Forms.RichTextBox" />、</span><span class="sxs-lookup"><span data-stu-id="97318-984"><see cref="T:System.Windows.Forms.RichTextBox" />,</span></span> 
 <span data-ttu-id="97318-985"><see cref="T:System.Windows.Forms.HScrollBar" />、</span><span class="sxs-lookup"><span data-stu-id="97318-985"><see cref="T:System.Windows.Forms.HScrollBar" />,</span></span> 
 <see cref="T:System.Windows.Forms.VScrollBar" /></term><description> <span data-ttu-id="97318-986">none</span><span class="sxs-lookup"><span data-stu-id="97318-986">none</span></span> 
 </description><description> <span data-ttu-id="97318-987">none</span><span class="sxs-lookup"><span data-stu-id="97318-987">none</span></span> 
 </description><description> <span data-ttu-id="97318-988">none</span><span class="sxs-lookup"><span data-stu-id="97318-988">none</span></span> 
 </description><description> <span data-ttu-id="97318-989">none</span><span class="sxs-lookup"><span data-stu-id="97318-989">none</span></span> 
 </description><description> <span data-ttu-id="97318-990">none</span><span class="sxs-lookup"><span data-stu-id="97318-990">none</span></span> 
 </description><description> <span data-ttu-id="97318-991">none</span><span class="sxs-lookup"><span data-stu-id="97318-991">none</span></span> 
 </description><description> <span data-ttu-id="97318-992">none</span><span class="sxs-lookup"><span data-stu-id="97318-992">none</span></span> 
 </description><description> <span data-ttu-id="97318-993">none</span><span class="sxs-lookup"><span data-stu-id="97318-993">none</span></span> 
 </description><description> <span data-ttu-id="97318-994">none</span><span class="sxs-lookup"><span data-stu-id="97318-994">none</span></span> 
 </description><description> <span data-ttu-id="97318-995">none</span><span class="sxs-lookup"><span data-stu-id="97318-995">none</span></span> 
 </description></item><item><term><span data-ttu-id="97318-996"><see cref="T:System.Windows.Forms.Button" />、</span><span class="sxs-lookup"><span data-stu-id="97318-996"><see cref="T:System.Windows.Forms.Button" />,</span></span> 
 <span data-ttu-id="97318-997"><see cref="T:System.Windows.Forms.CheckBox" />、</span><span class="sxs-lookup"><span data-stu-id="97318-997"><see cref="T:System.Windows.Forms.CheckBox" />,</span></span> 
 <see cref="T:System.Windows.Forms.RadioButton" /></term><description> <span data-ttu-id="97318-998">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-998">Click</span></span> 
 </description><description> <span data-ttu-id="97318-999">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-999">Click, Click</span></span> 
 </description><description> <span data-ttu-id="97318-1000">none</span><span class="sxs-lookup"><span data-stu-id="97318-1000">none</span></span> 
 </description><description> <span data-ttu-id="97318-1001">none</span><span class="sxs-lookup"><span data-stu-id="97318-1001">none</span></span> 
 </description><description> <span data-ttu-id="97318-1002">none</span><span class="sxs-lookup"><span data-stu-id="97318-1002">none</span></span> 
 </description><description> <span data-ttu-id="97318-1003">none</span><span class="sxs-lookup"><span data-stu-id="97318-1003">none</span></span> 
 </description><description> <span data-ttu-id="97318-1004">none</span><span class="sxs-lookup"><span data-stu-id="97318-1004">none</span></span> 
 </description><description> <span data-ttu-id="97318-1005">none</span><span class="sxs-lookup"><span data-stu-id="97318-1005">none</span></span> 
 </description><description> <span data-ttu-id="97318-1006">none</span><span class="sxs-lookup"><span data-stu-id="97318-1006">none</span></span> 
 </description><description> <span data-ttu-id="97318-1007">none</span><span class="sxs-lookup"><span data-stu-id="97318-1007">none</span></span> 
 </description></item><item><term><span data-ttu-id="97318-1008"><see cref="T:System.Windows.Forms.ListBox" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1008"><see cref="T:System.Windows.Forms.ListBox" />,</span></span> 
 <span data-ttu-id="97318-1009"><see cref="T:System.Windows.Forms.CheckedListBox" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1009"><see cref="T:System.Windows.Forms.CheckedListBox" />,</span></span> 
 <see cref="T:System.Windows.Forms.ComboBox" /></term><description> <span data-ttu-id="97318-1010">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1010">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1011">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1011">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1012">none</span><span class="sxs-lookup"><span data-stu-id="97318-1012">none</span></span> 
 </description><description> <span data-ttu-id="97318-1013">none</span><span class="sxs-lookup"><span data-stu-id="97318-1013">none</span></span> 
 </description><description> <span data-ttu-id="97318-1014">none</span><span class="sxs-lookup"><span data-stu-id="97318-1014">none</span></span> 
 </description><description> <span data-ttu-id="97318-1015">none</span><span class="sxs-lookup"><span data-stu-id="97318-1015">none</span></span> 
 </description><description> <span data-ttu-id="97318-1016">none</span><span class="sxs-lookup"><span data-stu-id="97318-1016">none</span></span> 
 </description><description> <span data-ttu-id="97318-1017">none</span><span class="sxs-lookup"><span data-stu-id="97318-1017">none</span></span> 
 </description><description> <span data-ttu-id="97318-1018">none</span><span class="sxs-lookup"><span data-stu-id="97318-1018">none</span></span> 
 </description><description> <span data-ttu-id="97318-1019">none</span><span class="sxs-lookup"><span data-stu-id="97318-1019">none</span></span> 
 </description></item><item><term><span data-ttu-id="97318-1020"><see cref="T:System.Windows.Forms.TextBox" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1020"><see cref="T:System.Windows.Forms.TextBox" />,</span></span> 
 <span data-ttu-id="97318-1021"><see cref="T:System.Windows.Forms.DomainUpDown" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1021"><see cref="T:System.Windows.Forms.DomainUpDown" />,</span></span> 
 <see cref="T:System.Windows.Forms.NumericUpDown" /></term><description> <span data-ttu-id="97318-1022">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1022">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1023">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1023">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1024">none</span><span class="sxs-lookup"><span data-stu-id="97318-1024">none</span></span> 
 </description><description> <span data-ttu-id="97318-1025">none</span><span class="sxs-lookup"><span data-stu-id="97318-1025">none</span></span> 
 </description><description> <span data-ttu-id="97318-1026">none</span><span class="sxs-lookup"><span data-stu-id="97318-1026">none</span></span> 
 </description><description> <span data-ttu-id="97318-1027">none</span><span class="sxs-lookup"><span data-stu-id="97318-1027">none</span></span> 
 </description><description> <span data-ttu-id="97318-1028">none</span><span class="sxs-lookup"><span data-stu-id="97318-1028">none</span></span> 
 </description><description> <span data-ttu-id="97318-1029">none</span><span class="sxs-lookup"><span data-stu-id="97318-1029">none</span></span> 
 </description><description> <span data-ttu-id="97318-1030">none</span><span class="sxs-lookup"><span data-stu-id="97318-1030">none</span></span> 
 </description><description> <span data-ttu-id="97318-1031">none</span><span class="sxs-lookup"><span data-stu-id="97318-1031">none</span></span> 
 </description></item><item><term> <span data-ttu-id="97318-1032">\* <see cref="T:System.Windows.Forms.TreeView" />,</span><span class="sxs-lookup"><span data-stu-id="97318-1032">\* <see cref="T:System.Windows.Forms.TreeView" />,</span></span> 
<span data-ttu-id="97318-1033">\* <see cref="T:System.Windows.Forms.ListView" /></span><span class="sxs-lookup"><span data-stu-id="97318-1033">\* <see cref="T:System.Windows.Forms.ListView" /></span></span></term><description> <span data-ttu-id="97318-1034">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1034">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1035">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1035">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1036">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1036">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1037">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1037">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1038">none</span><span class="sxs-lookup"><span data-stu-id="97318-1038">none</span></span> 
 </description><description> <span data-ttu-id="97318-1039">none</span><span class="sxs-lookup"><span data-stu-id="97318-1039">none</span></span> 
 </description><description> <span data-ttu-id="97318-1040">none</span><span class="sxs-lookup"><span data-stu-id="97318-1040">none</span></span> 
 </description><description> <span data-ttu-id="97318-1041">none</span><span class="sxs-lookup"><span data-stu-id="97318-1041">none</span></span> 
 </description><description> <span data-ttu-id="97318-1042">none</span><span class="sxs-lookup"><span data-stu-id="97318-1042">none</span></span> 
 </description><description> <span data-ttu-id="97318-1043">none</span><span class="sxs-lookup"><span data-stu-id="97318-1043">none</span></span> 
 </description></item><item><term><span data-ttu-id="97318-1044"><see cref="T:System.Windows.Forms.ProgressBar" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1044"><see cref="T:System.Windows.Forms.ProgressBar" />,</span></span> 
 <see cref="T:System.Windows.Forms.TrackBar" /></term><description> <span data-ttu-id="97318-1045">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1045">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1046">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-1046">Click, Click</span></span> 
 </description><description> <span data-ttu-id="97318-1047">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1047">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1048">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-1048">Click, Click</span></span> 
 </description><description> <span data-ttu-id="97318-1049">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1049">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1050">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-1050">Click, Click</span></span> 
 </description><description> <span data-ttu-id="97318-1051">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1051">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1052">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-1052">Click, Click</span></span> 
 </description><description> <span data-ttu-id="97318-1053">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1053">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1054">をクリックしてください</span><span class="sxs-lookup"><span data-stu-id="97318-1054">Click, Click</span></span> 
 </description></item><item><term><span data-ttu-id="97318-1055"><see cref="T:System.Windows.Forms.Form" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1055"><see cref="T:System.Windows.Forms.Form" />,</span></span> 
 <span data-ttu-id="97318-1056"><see cref="T:System.Windows.Forms.DataGrid" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1056"><see cref="T:System.Windows.Forms.DataGrid" />,</span></span> 
 <span data-ttu-id="97318-1057"><see cref="T:System.Windows.Forms.Label" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1057"><see cref="T:System.Windows.Forms.Label" />,</span></span> 
 <span data-ttu-id="97318-1058"><see cref="T:System.Windows.Forms.LinkLabel" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1058"><see cref="T:System.Windows.Forms.LinkLabel" />,</span></span> 
 <span data-ttu-id="97318-1059"><see cref="T:System.Windows.Forms.Panel" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1059"><see cref="T:System.Windows.Forms.Panel" />,</span></span> 
 <span data-ttu-id="97318-1060"><see cref="T:System.Windows.Forms.GroupBox" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1060"><see cref="T:System.Windows.Forms.GroupBox" />,</span></span> 
 <span data-ttu-id="97318-1061"><see cref="T:System.Windows.Forms.PictureBox" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1061"><see cref="T:System.Windows.Forms.PictureBox" />,</span></span> 
 <span data-ttu-id="97318-1062"><see cref="T:System.Windows.Forms.Splitter" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1062"><see cref="T:System.Windows.Forms.Splitter" />,</span></span> 
 <span data-ttu-id="97318-1063"><see cref="T:System.Windows.Forms.StatusBar" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1063"><see cref="T:System.Windows.Forms.StatusBar" />,</span></span> 
 <span data-ttu-id="97318-1064"><see cref="T:System.Windows.Forms.ToolBar" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1064"><see cref="T:System.Windows.Forms.ToolBar" />,</span></span> 
 <span data-ttu-id="97318-1065"><see cref="T:System.Windows.Forms.TabPage" />、</span><span class="sxs-lookup"><span data-stu-id="97318-1065"><see cref="T:System.Windows.Forms.TabPage" />,</span></span> 
 ** <see cref="T:System.Windows.Forms.TabControl" /></term><description> <span data-ttu-id="97318-1066">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1066">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1067">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1067">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1068">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1068">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1069">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1069">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1070">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1070">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1071">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1071">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1072">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1072">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1073">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1073">Click, DoubleClick</span></span> 
 </description><description> <span data-ttu-id="97318-1074">ここを</span><span class="sxs-lookup"><span data-stu-id="97318-1074">Click</span></span> 
 </description><description> <span data-ttu-id="97318-1075">クリック、ダブルクリック</span><span class="sxs-lookup"><span data-stu-id="97318-1075">Click, DoubleClick</span></span> 
 </description></item></list>  

 <span data-ttu-id="97318-1076">\* 子オブジェクトの上にマウス ポインターがある必要があります (<see cref="T:System.Windows.Forms.TreeNode" />または<see cref="T:System.Windows.Forms.ListViewItem" />)。</span><span class="sxs-lookup"><span data-stu-id="97318-1076">\* The mouse pointer must be over a child object (<see cref="T:System.Windows.Forms.TreeNode" /> or <see cref="T:System.Windows.Forms.ListViewItem" />).</span></span>  
  
<span data-ttu-id="97318-1077">\* \*、<see cref="T:System.Windows.Forms.TabControl" />が少なくとも 1 つ<see cref="T:System.Windows.Forms.TabPage" />でその<see cref="P:System.Windows.Forms.TabControl.TabPages" />コレクション。</span><span class="sxs-lookup"><span data-stu-id="97318-1077">\*\* The <see cref="T:System.Windows.Forms.TabControl" /> must have at least one <see cref="T:System.Windows.Forms.TabPage" /> in its <see cref="P:System.Windows.Forms.TabControl.TabPages" /> collection.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardClick" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.StandardDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="DpiChangedAfterParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedAfterParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedAfterParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedAfterParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedAfterParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedAfterParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedAfterParent : EventHandler " Usage="member this.DpiChangedAfterParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1078">親コントロールまたはフォームの DPI が変更された後に、コントロールの DPI 設定がプログラムで変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1078">Occurs when the DPI setting for a control is changed programmatically after the DPI of its parent control or form has changed.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="public event EventHandler DpiChangedBeforeParent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DpiChangedBeforeParent" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DpiChangedBeforeParent" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DpiChangedBeforeParent As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DpiChangedBeforeParent;" />
      <MemberSignature Language="F#" Value="member this.DpiChangedBeforeParent : EventHandler " Usage="member this.DpiChangedBeforeParent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1079">親コントロールまたはフォームの DPI 変更イベントが発生する前に、コントロールの DPI 設定がプログラムで変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1079">Occurs when the DPI setting for a control is changed programmatically before a DPI change event for its parent control or form has occurred.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDrop">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragDrop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragDrop" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragDrop" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragDrop As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragDrop;" />
      <MemberSignature Language="F#" Value="member this.DragDrop : System.Windows.Forms.DragEventHandler " Usage="member this.DragDrop : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1080">ドラッグ アンド ドロップ操作が完了したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1080">Occurs when a drag-and-drop operation is completed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1081"><xref:System.Windows.Forms.DragEventArgs.X%2A>と<xref:System.Windows.Forms.DragEventArgs.Y%2A>のプロパティ、<xref:System.Windows.Forms.DragEventArgs>は、画面座標をクライアント座標ではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-1081">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="97318-1082">Visual c# コードの次の行をクライアントに、プロパティを変換します<xref:System.Drawing.Point>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1082">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
```  
Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
```  
  
> [!NOTE]
>  <span data-ttu-id="97318-1083">バージョンよりも前[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]を配置する場合を<xref:System.Windows.Forms.UserControl>で<xref:System.Windows.Forms.Control.DragEnter>と<xref:System.Windows.Forms.Control.DragDrop>Windows フォーム上のイベントしドラッグ アンド ドロップに何か、 <xref:System.Windows.Forms.UserControl> 、デザイン時に、`DropDrop`と`DropEnter`イベントは、発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1083">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="97318-1084">ただし、ときに閉じて、ソリューション、<xref:System.Windows.Forms.Control.DragEnter>と<xref:System.Windows.Forms.Control.DragDrop>イベントが再び発生しません。</span><span class="sxs-lookup"><span data-stu-id="97318-1084">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="97318-1085">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1085">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1086">このコードの抜粋では、使用方法を示します、<xref:System.Windows.Forms.Control.DragDrop>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1086">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragDrop> event.</span></span> <span data-ttu-id="97318-1087">参照してください、<xref:System.Windows.Forms.Control.DoDragDrop%2A>完全なコード例のメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1087">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#5)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#5)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
        <altmember cref="M:System.Windows.Forms.Control.DoDragDrop(System.Object,System.Windows.Forms.DragDropEffects)" />
        <altmember cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragEnter">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragEnter As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragEnter;" />
      <MemberSignature Language="F#" Value="member this.DragEnter : System.Windows.Forms.DragEventHandler " Usage="member this.DragEnter : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1088">オブジェクトがコントロールの境界内にドラッグされると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1088">Occurs when an object is dragged into the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1089"><xref:System.Windows.Forms.Control.DragEnter>ユーザー最初がドラッグすると、マウス カーソルをコントロール上でドラッグ アンド ドロップ操作中にイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1089">The <xref:System.Windows.Forms.Control.DragEnter> event is raised when the user first drags the mouse cursor over the control during a drag-and-drop operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1090">バージョンよりも前[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]を配置する場合を<xref:System.Windows.Forms.UserControl>で<xref:System.Windows.Forms.Control.DragEnter>と<xref:System.Windows.Forms.Control.DragDrop>Windows フォーム上のイベントしドラッグ アンド ドロップに何か、 <xref:System.Windows.Forms.UserControl> 、デザイン時に、`DropDrop`と`DropEnter`イベントは、発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1090">In versions earlier than [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)], if you put a <xref:System.Windows.Forms.UserControl> with <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events on a Windows Form and drag and drop something onto the <xref:System.Windows.Forms.UserControl> at design time, the `DropDrop` and `DropEnter` events are raised.</span></span> <span data-ttu-id="97318-1091">ただし、ときに閉じて、ソリューション、<xref:System.Windows.Forms.Control.DragEnter>と<xref:System.Windows.Forms.Control.DragDrop>イベントが再び発生しません。</span><span class="sxs-lookup"><span data-stu-id="97318-1091">However, when you close and reopen the solution, the <xref:System.Windows.Forms.Control.DragEnter> and <xref:System.Windows.Forms.Control.DragDrop> events are not raised again.</span></span>  
  
 <span data-ttu-id="97318-1092">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1092">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="97318-1093"><xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1093">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="97318-1094">コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1094">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="97318-1095">コントロールが有効なドロップ ターゲットである場合、<xref:System.Windows.Forms.Control.GiveFeedback>ドラッグ アンド ドロップの効果が指定されたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1095">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="97318-1096">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1096">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="97318-1097">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1097">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="97318-1098">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1098">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="97318-1099">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1099">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="97318-1100">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1100">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="97318-1101">キーボードまたはマウス ボタンの状態に変更がある場合、<xref:System.Windows.Forms.Control.QueryContinueDrag>の値に基づいて、操作をキャンセルするイベントが発生し、データをドロップして、ドラッグを継続するかどうかを決定します。 または、<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>イベントのプロパティ<xref:System.Windows.Forms.QueryContinueDragEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1101">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="97318-1102">場合の値<xref:System.Windows.Forms.DragAction>は`Continue`、<xref:System.Windows.Forms.Control.DragOver>イベントは、操作を続行して、<xref:System.Windows.Forms.Control.GiveFeedback>適切な視覚的なフィードバックを設定できるように新しい効果でイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1102">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="97318-1103">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1103">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-1104"><xref:System.Windows.Forms.Control.DragOver>と<xref:System.Windows.Forms.Control.GiveFeedback>これにより、ユーザーがマウスの位置で最新のフィードバックを指定してマウスをドロップ先の間で移動、されたイベントはペアになっています。</span><span class="sxs-lookup"><span data-stu-id="97318-1104">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="97318-1105">場合の値<xref:System.Windows.Forms.DragAction>は`Drop`ソース アプリケーションでは、ソース データに対して適切な操作を実行できるように、データの切り取り、移動、操作だった場合、ドロップ効果の値がソースに返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1105">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="97318-1106">場合の値<xref:System.Windows.Forms.DragAction>は`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1106">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-1107"><xref:System.Windows.Forms.DragEventArgs.X%2A>と<xref:System.Windows.Forms.DragEventArgs.Y%2A>のプロパティ、<xref:System.Windows.Forms.DragEventArgs>は、画面座標をクライアント座標ではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-1107">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="97318-1108">Visual c# コードの次の行をクライアントに、プロパティを変換します<xref:System.Drawing.Point>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1108">The following line of Visual C# code converts the properties to a client <xref:System.Drawing.Point>.</span></span>  
  
    ```  
    Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));  
    ```  
  
 <span data-ttu-id="97318-1109">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1109">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1110">次のコード例は、2 つの間でドラッグ アンド ドロップ操作を示します<xref:System.Windows.Forms.ListBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1110">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="97318-1111">例では、<xref:System.Windows.Forms.Control.DoDragDrop%2A>ドラッグ操作の開始メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1111">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="97318-1112">ドラッグ操作の開始、マウスが移動した場合は、複数の<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>中にマウスの位置から、<xref:System.Windows.Forms.Control.MouseDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1112">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="97318-1113"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>メソッドを使用中にドラッグする項目のインデックスを確認して、`MouseDown`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1113">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="97318-1114">例では、カスタム カーソルをドラッグ アンド ドロップ操作を使用しても示しています。</span><span class="sxs-lookup"><span data-stu-id="97318-1114">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="97318-1115">例では、その 2 つが必要です、カーソル ファイル`3dwarro.cur`と`3dwno.cur`、カスタム ドラッグ用のアプリケーション ディレクトリ内に存在および非ドロップ カーソルの場合、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="97318-1115">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="97318-1116">場合に使用されるカスタム カーソル、 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox>がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1116">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="97318-1117">カスタム カーソルが設定されて、<xref:System.Windows.Forms.Control.GiveFeedback>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1117">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="97318-1118">キーボードの状態が評価される、<xref:System.Windows.Forms.Control.DragOver>右側のイベント ハンドラー`ListBox`ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL + ALT キーの状態に基づいて。</span><span class="sxs-lookup"><span data-stu-id="97318-1118">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="97318-1119">内の場所、`ListBox`中にも決定されますが、ドロップが発生、`DragOver`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1119">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="97318-1120">削除するデータがない場合、 `String`、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>に設定されている`None`で<xref:System.Windows.Forms.DragDropEffects>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1120">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="97318-1121">ドロップダウンの状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1121">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="97318-1122">右側のドロップするデータ`ListBox`で決定されます、<xref:System.Windows.Forms.Control.DragDrop>イベント ハンドラーと`String`の適切な場所にある値を追加、`ListBox`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1122">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="97318-1123">ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、<xref:System.Windows.Forms.Control.QueryContinueDrag>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1123">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="97318-1124">このコードの抜粋では、使用方法を示します、<xref:System.Windows.Forms.Control.DragEnter>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1124">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragEnter> event.</span></span> <span data-ttu-id="97318-1125">参照してください、<xref:System.Windows.Forms.Control.DoDragDrop%2A>完全なコード例のメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1125">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#7)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragLeave">
      <MemberSignature Language="C#" Value="public event EventHandler DragLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DragLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DragLeave;" />
      <MemberSignature Language="F#" Value="member this.DragLeave : EventHandler " Usage="member this.DragLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1126">オブジェクトがコントロールの境界外にドラッグされたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1126">Occurs when an object is dragged out of the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1127"><xref:System.Windows.Forms.Control.DragLeave>ユーザーは、コントロールのカーソルをドラッグすると、ユーザーが現在のドラッグ アンド ドロップ操作をキャンセル イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1127">The <xref:System.Windows.Forms.Control.DragLeave> event is raised when the user drags the cursor out of the control or the user cancels the current drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="97318-1128">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1128">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="97318-1129"><xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1129">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="97318-1130">コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1130">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="97318-1131">コントロールが有効なドロップ ターゲットである場合、<xref:System.Windows.Forms.Control.GiveFeedback>ドラッグ アンド ドロップの効果が指定されたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1131">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="97318-1132">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1132">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="97318-1133">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1133">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="97318-1134">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1134">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="97318-1135">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1135">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="97318-1136">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1136">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="97318-1137">キーボードまたはマウス ボタンの状態に変更がある場合、<xref:System.Windows.Forms.Control.QueryContinueDrag>の値に基づいて、操作をキャンセルするイベントが発生し、データをドロップして、ドラッグを継続するかどうかを決定します。 または、<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>イベントのプロパティ<xref:System.Windows.Forms.QueryContinueDragEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1137">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="97318-1138">場合の値<xref:System.Windows.Forms.DragAction>は`Continue`、<xref:System.Windows.Forms.Control.DragOver>イベントは、操作を続行して、<xref:System.Windows.Forms.Control.GiveFeedback>適切な視覚的なフィードバックを設定できるように新しい効果でイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1138">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="97318-1139">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1139">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-1140"><xref:System.Windows.Forms.Control.DragOver>と<xref:System.Windows.Forms.Control.GiveFeedback>これにより、ユーザーがマウスの位置で最新のフィードバックを指定してマウスをドロップ先の間で移動、されたイベントはペアになっています。</span><span class="sxs-lookup"><span data-stu-id="97318-1140">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="97318-1141">場合の値<xref:System.Windows.Forms.DragAction>は`Drop`ソース アプリケーションでは、ソース データに対して適切な操作を実行できるように、データの切り取り、移動、操作だった場合、ドロップ効果の値がソースに返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1141">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="97318-1142">場合の値<xref:System.Windows.Forms.DragAction>は`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1142">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="97318-1143">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1143">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1144">次のコード例は、2 つの間でドラッグ アンド ドロップ操作を示します<xref:System.Windows.Forms.ListBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1144">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="97318-1145">例では、<xref:System.Windows.Forms.Control.DoDragDrop%2A>ドラッグ操作の開始メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1145">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="97318-1146">ドラッグ操作の開始、マウスが移動した場合は、複数の<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>中にマウスの位置から、<xref:System.Windows.Forms.Control.MouseDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1146">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="97318-1147"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>メソッドを使用中にドラッグする項目のインデックスを確認して、`MouseDown`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1147">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="97318-1148">例では、カスタム カーソルをドラッグ アンド ドロップ操作を使用しても示しています。</span><span class="sxs-lookup"><span data-stu-id="97318-1148">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="97318-1149">例では、その 2 つが必要です、カーソル ファイル`3dwarro.cur`と`3dwno.cur`、カスタム ドラッグ用のアプリケーション ディレクトリ内に存在および非ドロップ カーソルの場合、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="97318-1149">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="97318-1150">場合に使用されるカスタム カーソル、 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox>がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1150">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="97318-1151">カスタム カーソルが設定されて、<xref:System.Windows.Forms.Control.GiveFeedback>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1151">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="97318-1152">キーボードの状態が評価される、<xref:System.Windows.Forms.Control.DragOver>右側のイベント ハンドラー`ListBox`ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL + ALT キーの状態に基づいて。</span><span class="sxs-lookup"><span data-stu-id="97318-1152">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="97318-1153">内の場所、`ListBox`中にも決定されますが、ドロップが発生、`DragOver`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1153">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="97318-1154">削除するデータがない場合、 `String`、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>に設定されている`None`で<xref:System.Windows.Forms.DragDropEffects>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1154">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="97318-1155">ドロップダウンの状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1155">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="97318-1156">右側のドロップするデータ`ListBox`で決定されます、<xref:System.Windows.Forms.Control.DragDrop>イベント ハンドラーと`String`の適切な場所にある値を追加、`ListBox`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1156">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="97318-1157">ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、<xref:System.Windows.Forms.Control.QueryContinueDrag>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1157">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="97318-1158">このコードの抜粋では、使用方法を示します、<xref:System.Windows.Forms.Control.DragLeave>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1158">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragLeave> event.</span></span> <span data-ttu-id="97318-1159">参照してください、<xref:System.Windows.Forms.Control.DoDragDrop%2A>完全なコード例のメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1159">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#8)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#8)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DragOver">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DragEventHandler DragOver;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DragEventHandler DragOver" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.DragOver" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DragOver As DragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DragEventHandler ^ DragOver;" />
      <MemberSignature Language="F#" Value="member this.DragOver : System.Windows.Forms.DragEventHandler " Usage="member this.DragOver : System.Windows.Forms.DragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1160">オブジェクトがコントロールの境界を越えてドラッグされると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1160">Occurs when an object is dragged over the control's bounds.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1161"><xref:System.Windows.Forms.Control.DragOver>ドラッグ アンド ドロップ操作中に、コントロールの境界内でマウス カーソルが移動したときにイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1161">The <xref:System.Windows.Forms.Control.DragOver> event is raised when the mouse cursor moves within the bounds of the control during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="97318-1162">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1162">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="97318-1163"><xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1163">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="97318-1164">コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1164">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="97318-1165">コントロールが有効なドロップ ターゲットである場合、<xref:System.Windows.Forms.Control.GiveFeedback>ドラッグ アンド ドロップの効果が指定されたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1165">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="97318-1166">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1166">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="97318-1167">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1167">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="97318-1168">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1168">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="97318-1169">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1169">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="97318-1170">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1170">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="97318-1171">キーボードまたはマウス ボタンの状態に変更がある場合、<xref:System.Windows.Forms.Control.QueryContinueDrag>の値に基づいて、操作をキャンセルするイベントが発生し、データをドロップして、ドラッグを継続するかどうかを決定します。 または、<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>イベントのプロパティ<xref:System.Windows.Forms.QueryContinueDragEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1171">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="97318-1172">場合の値<xref:System.Windows.Forms.DragAction>値は`Continue`、<xref:System.Windows.Forms.Control.DragOver>イベントは、操作を続行して、<xref:System.Windows.Forms.Control.GiveFeedback>適切な視覚的なフィードバックを設定できるように新しい効果でイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1172">If the value of <xref:System.Windows.Forms.DragAction> value is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="97318-1173">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1173">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-1174"><xref:System.Windows.Forms.Control.DragOver>と<xref:System.Windows.Forms.Control.GiveFeedback>これにより、ユーザーがマウスの位置で最新のフィードバックを指定してマウスをドロップ先の間で移動、されたイベントはペアになっています。</span><span class="sxs-lookup"><span data-stu-id="97318-1174">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="97318-1175">場合の値<xref:System.Windows.Forms.DragAction>は`Drop`ソース アプリケーションでは、ソース データに対して適切な操作を実行できるように、データの切り取り、移動、操作だった場合、ドロップ効果の値がソースに返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1175">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="97318-1176">場合の値<xref:System.Windows.Forms.DragAction>は`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1176">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-1177"><xref:System.Windows.Forms.DragEventArgs.X%2A>と<xref:System.Windows.Forms.DragEventArgs.Y%2A>のプロパティ、<xref:System.Windows.Forms.DragEventArgs>は、画面座標をクライアント座標ではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-1177">The <xref:System.Windows.Forms.DragEventArgs.X%2A> and <xref:System.Windows.Forms.DragEventArgs.Y%2A> properties of the <xref:System.Windows.Forms.DragEventArgs> are in screen coordinates, not client coordinates.</span></span> <span data-ttu-id="97318-1178">次の c# コード行をクライアントに、プロパティを変換します<xref:System.Drawing.Point>:</span><span class="sxs-lookup"><span data-stu-id="97318-1178">The following line of C# code converts the properties to a client <xref:System.Drawing.Point>:</span></span>  
    >   
    >  <span data-ttu-id="97318-1179">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</span><span class="sxs-lookup"><span data-stu-id="97318-1179">Point clientPoint = targetControl.PointToClient(new Point(de.X, de.Y));</span></span>  
  
 <span data-ttu-id="97318-1180">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1180">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1181">次のコード例は、2 つの間でドラッグ アンド ドロップ操作を示します<xref:System.Windows.Forms.ListBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1181">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="97318-1182">例では、<xref:System.Windows.Forms.Control.DoDragDrop%2A>ドラッグ操作の開始メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1182">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="97318-1183">ドラッグ操作の開始、マウスが移動した場合は、複数の<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>中にマウスの位置から、<xref:System.Windows.Forms.Control.MouseDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1183">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="97318-1184"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>メソッドを使用中にドラッグする項目のインデックスを確認して、`MouseDown`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1184">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="97318-1185">例では、カスタム カーソルをドラッグ アンド ドロップ操作を使用しても示しています。</span><span class="sxs-lookup"><span data-stu-id="97318-1185">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="97318-1186">例では、その 2 つが必要です、カーソル ファイル`3dwarro.cur`と`3dwno.cur`、カスタム ドラッグ用のアプリケーション ディレクトリ内に存在および非ドロップ カーソルの場合、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="97318-1186">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="97318-1187">場合に使用されるカスタム カーソル、 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox>がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1187">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="97318-1188">カスタム カーソルが設定されて、<xref:System.Windows.Forms.Control.GiveFeedback>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1188">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="97318-1189">キーボードの状態が評価される、<xref:System.Windows.Forms.Control.DragOver>右側のイベント ハンドラー`ListBox`ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL + ALT キーの状態に基づいて。</span><span class="sxs-lookup"><span data-stu-id="97318-1189">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="97318-1190">内の場所、`ListBox`中にも決定されますが、ドロップが発生、`DragOver`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1190">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="97318-1191">削除するデータがない場合、 `String`、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>に設定されている`None`で<xref:System.Windows.Forms.DragDropEffects>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1191">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="97318-1192">ドロップダウンの状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1192">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="97318-1193">右側のドロップするデータ`ListBox`で決定されます、<xref:System.Windows.Forms.Control.DragDrop>イベント ハンドラーと`String`の適切な場所にある値を追加、`ListBox`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1193">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="97318-1194">ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、<xref:System.Windows.Forms.Control.QueryContinueDrag>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1194">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="97318-1195">このコードの抜粋では、使用方法を示します、<xref:System.Windows.Forms.Control.DragOver>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1195">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.DragOver> event.</span></span> <span data-ttu-id="97318-1196">参照してください、<xref:System.Windows.Forms.Control.DoDragDrop%2A>完全なコード例のメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1196">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#4)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawToBitmap">
      <MemberSignature Language="C#" Value="public void DrawToBitmap (System.Drawing.Bitmap bitmap, System.Drawing.Rectangle targetBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawToBitmap(class System.Drawing.Bitmap bitmap, valuetype System.Drawing.Rectangle targetBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawToBitmap(System::Drawing::Bitmap ^ bitmap, System::Drawing::Rectangle targetBounds);" />
      <MemberSignature Language="F#" Value="member this.DrawToBitmap : System.Drawing.Bitmap * System.Drawing.Rectangle -&gt; unit" Usage="control.DrawToBitmap (bitmap, targetBounds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bitmap" Type="System.Drawing.Bitmap" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="targetBounds" Type="System.Drawing.Rectangle" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="bitmap"><span data-ttu-id="97318-1197">描画されるビットマップ。</span><span class="sxs-lookup"><span data-stu-id="97318-1197">The bitmap to be drawn to.</span></span></param>
        <param name="targetBounds"><span data-ttu-id="97318-1198">コントロールが描画される範囲。</span><span class="sxs-lookup"><span data-stu-id="97318-1198">The bounds within which the control is rendered.</span></span></param>
        <summary><span data-ttu-id="97318-1199">指定したビットマップへのレンダリングをサポートします。</span><span class="sxs-lookup"><span data-stu-id="97318-1199">Supports rendering to the specified bitmap.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1200"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> ActiveX コントロールのメソッドがサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="97318-1200">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method is not supported for ActiveX controls.</span></span> <span data-ttu-id="97318-1201">オーバーライドすることができます、<xref:System.Windows.Forms.Control.OnPrint%2A>イベントと、必要な場合は、カスタム印刷ロジックを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-1201">You can override the <xref:System.Windows.Forms.Control.OnPrint%2A> event and provide custom printing logic if required.</span></span>  
  
 <span data-ttu-id="97318-1202"><xref:System.Windows.Forms.Control.DrawToBitmap%2A>メソッドには、次の制限。</span><span class="sxs-lookup"><span data-stu-id="97318-1202">The <xref:System.Windows.Forms.Control.DrawToBitmap%2A> method has the following limitations:</span></span>  
  
-   <span data-ttu-id="97318-1203"><xref:System.ArgumentException>大きなビットマップのスローされる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1203">An <xref:System.ArgumentException> might be thrown for large bitmaps.</span></span> <span data-ttu-id="97318-1204">最大許容サイズは、コンピューターによって異なります。</span><span class="sxs-lookup"><span data-stu-id="97318-1204">The maximum allowable size varies by machine.</span></span>  
  
-   <span data-ttu-id="97318-1205"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> サポートしていません、 `Ink` Windows XP Tablet PC Edition 2005 のオペレーティング システムのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1205"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not support the `Ink` controls for the Windows XP Tablet PC Edition 2005 operating system.</span></span>  
  
-   <span data-ttu-id="97318-1206"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 子を描画しない<xref:System.Windows.Forms.TextBox>場合、<xref:System.Windows.Forms.Control.Visible%2A>のプロパティ、<xref:System.Windows.Forms.TextBox>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1206"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> does not draw a child <xref:System.Windows.Forms.TextBox> if the <xref:System.Windows.Forms.Control.Visible%2A> property of the <xref:System.Windows.Forms.TextBox> is set to `false`.</span></span>  
  
-   <span data-ttu-id="97318-1207">コンテナー内のコントロールは、逆の順序で表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1207">Controls inside containers are rendered in reverse order.</span></span>  
  
-   <span data-ttu-id="97318-1208"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> 完全に機能することはありません、 <xref:System.Windows.Forms.RichTextBox>; のみビットマップの境界線が描画されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1208"><xref:System.Windows.Forms.Control.DrawToBitmap%2A> is not fully functional for the <xref:System.Windows.Forms.RichTextBox>; only the border of a bitmap is drawn.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Control.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-514)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1209">コントロールがユーザーとの対話に応答できるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1209">Gets or sets a value indicating whether the control can respond to user interaction.</span></span></summary>
        <value><span data-ttu-id="97318-1210">コントロールがユーザーとの対話に応答できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1210"><see langword="true" /> if the control can respond to user interaction; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-1211">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-1211">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1212"><xref:System.Windows.Forms.Control.Enabled%2A>プロパティを有効にするまたは実行時にコントロールを無効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-1212">With the <xref:System.Windows.Forms.Control.Enabled%2A> property, you can enable or disable controls at run time.</span></span> <span data-ttu-id="97318-1213">たとえば、アプリケーションの現在の状態には適用されませんコントロールを無効にできます。</span><span class="sxs-lookup"><span data-stu-id="97318-1213">For example, you can disable controls that do not apply to the current state of the application.</span></span> <span data-ttu-id="97318-1214">使用を制限するコントロールを無効にすることもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-1214">You can also disable a control to restrict its use.</span></span> <span data-ttu-id="97318-1215">たとえば、ユーザーがクリックすることを防ぐために、ボタンを無効にできます。</span><span class="sxs-lookup"><span data-stu-id="97318-1215">For example, a button can be disabled to prevent the user from clicking it.</span></span> <span data-ttu-id="97318-1216">コントロールが無効になっている場合は選択できません。</span><span class="sxs-lookup"><span data-stu-id="97318-1216">If a control is disabled, it cannot be selected.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97318-1217">設定、<xref:System.Windows.Forms.Control.Enabled%2A>プロパティを`false`アプリケーション ウィンドウがフォーカスを取得するを防ぐまたはアプリケーションのコントロールのボックスを無効にしません。</span><span class="sxs-lookup"><span data-stu-id="97318-1217">Setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false` does not disable the application's control box or prevent the application window from receiving the focus.</span></span>  
  
 <span data-ttu-id="97318-1218">コンテナー コントロールが、有効なプロパティに設定を持っている場合`false`もその格納されているすべてのコントロールが無効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1218">When a container control has its enabled property set to `false`, all its contained controls are disabled, as well.</span></span> <span data-ttu-id="97318-1219">たとえば、ユーザーが 無効なに含まれるコントロールのいずれかの<xref:System.Windows.Forms.GroupBox>コントロール、イベントは発生しません。</span><span class="sxs-lookup"><span data-stu-id="97318-1219">For example, if the user clicks on any of the controls contained in a disabled <xref:System.Windows.Forms.GroupBox> control, no events are raised.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1220">スクロール可能なコントロールを無効にすると、スクロール バーも無効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1220">When a scrollable control is disabled, the scroll bars are also disabled.</span></span> <span data-ttu-id="97318-1221">たとえば、複数行テキスト ボックスに無効になっているはスクロールすると、すべての行のテキストを表示できません。</span><span class="sxs-lookup"><span data-stu-id="97318-1221">For example, a disabled multiline textbox is unable to scroll to display all the lines of text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1222">次のコード例を作成、<xref:System.Windows.Forms.GroupBox>および一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1222">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="97318-1223">例は、作成、<xref:System.Windows.Forms.TextBox>設定とその<xref:System.Windows.Forms.Control.Location%2A>グループ ボックス内で。</span><span class="sxs-lookup"><span data-stu-id="97318-1223">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="97318-1224">次に、設定、<xref:System.Windows.Forms.Control.Text%2A>フォームの上部に、グループ ボックス ドッキングし、グループ ボックスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1224">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="97318-1225">グループ ボックスを無効に設定して、最後に、<xref:System.Windows.Forms.Control.Enabled%2A>プロパティを`false`、それが原因で無効にするグループ ボックス内に含まれるすべてのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1225">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ScrollableControl" />
      </Docs>
    </Member>
    <Member MemberName="EnabledChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EnabledChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EnabledChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.EnabledChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event EnabledChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ EnabledChanged;" />
      <MemberSignature Language="F#" Value="member this.EnabledChanged : EventHandler " Usage="member this.EnabledChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1226"><see cref="P:System.Windows.Forms.Control.Enabled" /> プロパティ値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1226">Occurs when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1227">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Enabled%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-1227">This event is raised if the <xref:System.Windows.Forms.Control.Enabled%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-1228">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1228">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1229">次のコード例を使用して 2 つ<xref:System.Windows.Forms.RadioButton>コントロールを示すために、<xref:System.Windows.Forms.Control.EnabledChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1229">The following code example uses two <xref:System.Windows.Forms.RadioButton> controls to demonstrate the <xref:System.Windows.Forms.Control.EnabledChanged> event.</span></span> <span data-ttu-id="97318-1230">値を変更する 1 つのボタンをクリックすると、<xref:System.Windows.Forms.Control.Enabled%2A>するその他のボタンのプロパティ`false`し、表示、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1230">Clicking one button changes the value of the <xref:System.Windows.Forms.Control.Enabled%2A> property of the other button to `false` and displays a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.EnabledChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.EnabledChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="EndInvoke">
      <MemberSignature Language="C#" Value="public object EndInvoke (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object EndInvoke(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.EndInvoke(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndInvoke (asyncResult As IAsyncResult) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ EndInvoke(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndInvoke : IAsyncResult -&gt; obj&#xA;override this.EndInvoke : IAsyncResult -&gt; obj" Usage="control.EndInvoke asyncResult" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.EndInvoke(System.IAsyncResult)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="97318-1231"><see cref="T:System.IAsyncResult" /> を呼び出したときに返された、特定の呼び出しの非同期操作を表す<see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1231">The <see cref="T:System.IAsyncResult" /> that represents a specific invoke asynchronous operation, returned when calling <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />.</span></span></param>
        <summary><span data-ttu-id="97318-1232">渡された <see cref="T:System.IAsyncResult" /> によって表される、非同期操作の戻り値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1232">Retrieves the return value of the asynchronous operation represented by the <see cref="T:System.IAsyncResult" /> passed.</span></span></summary>
        <returns><span data-ttu-id="97318-1233">非同期操作によって生成された <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1233">The <see cref="T:System.Object" /> generated by the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1234">非同期操作が完了していない場合、この関数は、結果が利用可能になるまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="97318-1234">If the asynchronous operation has not been completed, this function will block until the result is available.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1235">加え、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティはスレッド セーフであるコントロールの 4 つの方法があります: <xref:System.Windows.Forms.Control.Invoke%2A>、 <xref:System.Windows.Forms.Control.BeginInvoke%2A>、 <xref:System.Windows.Forms.Control.EndInvoke%2A>、および<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1235">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-1236">呼び出す<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-1236">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="97318-1237">他のすべてのメソッド呼び出しにはコントロールのスレッドへの呼び出しをマーシャ リングするのに invoke メソッドのいずれかを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1237">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97318-1238"><paramref name="asyncResult" />パラメーター値が<see langword="null" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1238">The <paramref name="asyncResult" /> parameter value is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="97318-1239"><paramref name="asyncResult" />の呼び出しで、オブジェクトは作成されませんでした、<see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />同じコントロールからのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1239">The <paramref name="asyncResult" /> object was not created by a preceding call of the <see cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" /> method from the same control.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.BeginInvoke(System.Delegate)" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public event EventHandler Enter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Enter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Enter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Enter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Enter;" />
      <MemberSignature Language="F#" Value="member this.Enter : EventHandler " Usage="member this.Enter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1240">コントロールが入力されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1240">Occurs when the control is entered.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1241">呼び出すことによってキーボード (タブ、shift キーを押しながら TAB となど) を使用して、フォーカスを変更すると、<xref:System.Windows.Forms.Control.Select%2A>または<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド、または設定して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>プロパティを現在のフォームは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1241">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="97318-1242">フォーカスを変更すると、マウスを使用して、または呼び出すことによって、<xref:System.Windows.Forms.Control.Focus%2A>メソッドでは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1242">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="97318-1243">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1243">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1244"><xref:System.Windows.Forms.Control.Enter>と<xref:System.Windows.Forms.Control.Leave>によってイベントが抑制されます、<xref:System.Windows.Forms.Form>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1244">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="97318-1245">同等のイベント、<xref:System.Windows.Forms.Form>クラスは、<xref:System.Windows.Forms.Form.Activated>と<xref:System.Windows.Forms.Form.Deactivate>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1245">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="97318-1246"><xref:System.Windows.Forms.Control.Enter>と<xref:System.Windows.Forms.Control.Leave>イベントを階層し、適切なコントロールに到達するまで、親のチェーンを上下に伝播します。</span><span class="sxs-lookup"><span data-stu-id="97318-1246">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="97318-1247">たとえば、ある場合、<xref:System.Windows.Forms.Form>の 2 つ<xref:System.Windows.Forms.GroupBox>コントロール、および各<xref:System.Windows.Forms.GroupBox>コントロールが 1 つ<xref:System.Windows.Forms.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1247">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="97318-1248">1、カレットを移動するとき<xref:System.Windows.Forms.TextBox>、他の<xref:System.Windows.Forms.Control.Leave>のイベントは、<xref:System.Windows.Forms.TextBox>と<xref:System.Windows.Forms.GroupBox>と<xref:System.Windows.Forms.Control.Enter>イベントは、他の<xref:System.Windows.Forms.GroupBox>と<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="97318-1248">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97318-1249">内からフォーカスを設定しないで、 <xref:System.Windows.Forms.Control.Enter>、 <xref:System.Windows.Forms.Control.GotFocus>、 <xref:System.Windows.Forms.Control.Leave>、 <xref:System.Windows.Forms.Control.LostFocus>、 <xref:System.Windows.Forms.Control.Validating>、または<xref:System.Windows.Forms.Control.Validated>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1249">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="97318-1250">これには、アプリケーションまたはオペレーティング システムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1250">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="97318-1251">詳細については、次を参照してください。、 `WM_KILLFOCUS` "キーボード入力リファレンス"セクションとの"メッセージ デッドロック"セクションのトピック、[についてメッセージとメッセージ キュー](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-1251">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section and the "Message Deadlocks" section of the [About Messages and Message Queues](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="97318-1252">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1252">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1253">次のコード例では、<xref:System.Windows.Forms.Control.Enter>の前景色と背景色を変更するイベントを<xref:System.Windows.Forms.TextBox>特定の条件下でします。</span><span class="sxs-lookup"><span data-stu-id="97318-1253">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FindForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form FindForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form FindForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FindForm" />
      <MemberSignature Language="VB.NET" Value="Public Function FindForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ FindForm();" />
      <MemberSignature Language="F#" Value="member this.FindForm : unit -&gt; System.Windows.Forms.Form" Usage="control.FindForm " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1254">コントロールがあるフォームを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1254">Retrieves the form that the control is on.</span></span></summary>
        <returns><span data-ttu-id="97318-1255">コントロールがある <see cref="T:System.Windows.Forms.Form" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1255">The <see cref="T:System.Windows.Forms.Form" /> that the control is on.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1256">コントロールの<xref:System.Windows.Forms.Control.Parent%2A>プロパティの値と同じである可能性がありますいない、<xref:System.Windows.Forms.Form>によって返される<xref:System.Windows.Forms.Control.FindForm%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1256">The control's <xref:System.Windows.Forms.Control.Parent%2A> property value might not be the same as the <xref:System.Windows.Forms.Form> returned by <xref:System.Windows.Forms.Control.FindForm%2A> method.</span></span> <span data-ttu-id="97318-1257">などの場合、<xref:System.Windows.Forms.RadioButton>内でコントロールが含まれています、<xref:System.Windows.Forms.GroupBox>コントロールと<xref:System.Windows.Forms.GroupBox>では、 <xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.RadioButton>コントロールの<xref:System.Windows.Forms.Control.Parent%2A>は、<xref:System.Windows.Forms.GroupBox>と<xref:System.Windows.Forms.GroupBox>コントロール<xref:System.Windows.Forms.Control.Parent%2A>は、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1257">For example, if a <xref:System.Windows.Forms.RadioButton> control is contained within a <xref:System.Windows.Forms.GroupBox> control, and the <xref:System.Windows.Forms.GroupBox> is on a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.RadioButton> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.GroupBox> and the <xref:System.Windows.Forms.GroupBox> control's <xref:System.Windows.Forms.Control.Parent%2A> is the <xref:System.Windows.Forms.Form>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1258">次のコード例では、指定したボタンを含むフォームを検索します。</span><span class="sxs-lookup"><span data-stu-id="97318-1258">The following code example finds the form that contains the specified button.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1259">このメソッドを呼び出すすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1259">for all windows to call this method.</span></span> <span data-ttu-id="97318-1260">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1260">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public bool Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Function Focus () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; bool" Usage="control.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1261">コントロールに入力フォーカスを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1261">Sets input focus to the control.</span></span></summary>
        <returns><span data-ttu-id="97318-1262">入力フォーカス要求が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1262"><see langword="true" /> if the input focus request was successful; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1263"><xref:System.Windows.Forms.Control.Focus%2A>メソッドを返します。`true`コントロールが正常に入力フォーカスを受け取った場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1263">The <xref:System.Windows.Forms.Control.Focus%2A> method returns `true` if the control successfully received input focus.</span></span> <span data-ttu-id="97318-1264">コントロールは、フォーカスのあるビジュアル キューが表示されないときに入力フォーカスを持つことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-1264">The control can have the input focus while not displaying any visual cues of having the focus.</span></span> <span data-ttu-id="97318-1265">次に、選択できないコントロールでこの動作が観察された主にかから派生したすべてのコントロールにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1265">This behavior is primarily observed by the nonselectable controls listed below, or any controls derived from them.</span></span>  
  
 <span data-ttu-id="97318-1266">コントロールが選択できるし、次のすべてに該当する場合は、入力フォーカスを受け取る:`Selectable`値<xref:System.Windows.Forms.ControlStyles>に設定されている`true`、別のコントロールに含まれていると、すべての親コントロールが両方表示して有効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1266">A control can be selected and receive input focus if all the following are true: the `Selectable` value of <xref:System.Windows.Forms.ControlStyles> is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="97318-1267">次の一覧に Windows フォーム コントロールは、選択可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-1267">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="97318-1268">これらのコントロールから派生したコントロールも選択できません。</span><span class="sxs-lookup"><span data-stu-id="97318-1268">Controls derived from these controls are also not selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <span data-ttu-id="97318-1269"><xref:System.Windows.Forms.LinkLabel> (この場合、コントロール内にリンクすることはありません)</span><span class="sxs-lookup"><span data-stu-id="97318-1269"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1270"><xref:System.Windows.Forms.Control.Focus%2A> 低レベルのメソッドは、主にカスタム コントロールを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-1270"><xref:System.Windows.Forms.Control.Focus%2A> is a low-level method intended primarily for custom control authors.</span></span> <span data-ttu-id="97318-1271">代わりに、アプリケーション プログラマが使用する必要があります、<xref:System.Windows.Forms.Control.Select%2A>メソッドまたは<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>、子コントロールのプロパティまたは<xref:System.Windows.Forms.Form.Activate%2A>フォームのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1271">Instead, application programmers should use the <xref:System.Windows.Forms.Control.Select%2A> method or the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property for child controls, or the <xref:System.Windows.Forms.Form.Activate%2A> method for forms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1272">次のコード例を指定したフォーカスを設定する<xref:System.Windows.Forms.Control>フォーカスを受け取ることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-1272">The following code example sets focus to the specified <xref:System.Windows.Forms.Control>, if it can receive focus.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#1)]
 [!code-csharp[Windows.Forms.ControlMembers6#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#1)]
 [!code-vb[Windows.Forms.ControlMembers6#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1273">このメソッドを呼び出すすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1273">for all windows to call this method.</span></span> <span data-ttu-id="97318-1274">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1274">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
        <altmember cref="P:System.Windows.Forms.Control.Focused" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="P:System.Windows.Forms.ContainerControl.ActiveControl" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Focused">
      <MemberSignature Language="C#" Value="public virtual bool Focused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Focused" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Focused" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Focused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Focused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Focused : bool" Usage="System.Windows.Forms.Control.Focused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1275">コントロールに入力フォーカスがあるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1275">Gets a value indicating whether the control has input focus.</span></span></summary>
        <value><span data-ttu-id="97318-1276">コントロールにフォーカスがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1276"><see langword="true" /> if the control has focus; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-1277">次のコード例を無効にする<xref:System.Windows.Forms.MenuItem>場合、<xref:System.Windows.Forms.TextBox>にフォーカスがないです。</span><span class="sxs-lookup"><span data-stu-id="97318-1277">The following code example disables a <xref:System.Windows.Forms.MenuItem> if a <xref:System.Windows.Forms.TextBox> does not have focus.</span></span> <span data-ttu-id="97318-1278">この例が必要です、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.TextBox>という`textBox1`と 2 つ<xref:System.Windows.Forms.MenuItem>という名前のオブジェクト`menuItemEdit`と`menuItemEditInsertCustomerInfo`。</span><span class="sxs-lookup"><span data-stu-id="97318-1278">This example requires that you have a <xref:System.Windows.Forms.Form> with a <xref:System.Windows.Forms.TextBox> named `textBox1` and two <xref:System.Windows.Forms.MenuItem> objects named `menuItemEdit` and `menuItemEditInsertCustomerInfo`.</span></span>  
  
 [!code-cpp[Windows.FOrms.Control Members2#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#4)]
 [!code-csharp[Windows.FOrms.Control Members2#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#4)]
 [!code-vb[Windows.FOrms.Control Members2#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#4)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-1279">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.Focused" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.Focused" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1279">When overriding the <see cref="P:System.Windows.Forms.Control.Focused" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Focused" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-1280">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1280">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="P:System.Windows.Forms.Control.CanSelect" />
        <altmember cref="P:System.Windows.Forms.Control.ContainsFocus" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Font : System.Drawing.Font with get, set" Usage="System.Windows.Forms.Control.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-512)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1281">コントロールによって表示されるテキストのフォントを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1281">Gets or sets the font of the text displayed by the control.</span></span></summary>
        <value><span data-ttu-id="97318-1282">コントロールによって表示されるテキストに適用される <see cref="T:System.Drawing.Font" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1282">The <see cref="T:System.Drawing.Font" /> to apply to the text displayed by the control.</span></span> <span data-ttu-id="97318-1283">既定値は <see cref="P:System.Windows.Forms.Control.DefaultFont" /> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="97318-1283">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultFont" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1284"><xref:System.Windows.Forms.Control.Font%2A>プロパティは、アンビエント プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-1284">The <xref:System.Windows.Forms.Control.Font%2A> property is an ambient property.</span></span> <span data-ttu-id="97318-1285">アンビエントのプロパティはコントロールのプロパティ セットは、親コントロールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1285">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="97318-1286">たとえば、<xref:System.Windows.Forms.Button>が、同じ<xref:System.Windows.Forms.Control.BackColor%2A>親として<xref:System.Windows.Forms.Form>既定では。</span><span class="sxs-lookup"><span data-stu-id="97318-1286">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="97318-1287">アンビエント プロパティの詳細については、次を参照してください。、<xref:System.Windows.Forms.AmbientProperties>クラスまたは<xref:System.Windows.Forms.Control>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-1287">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="97318-1288"><xref:System.Drawing.Font>は変更できません (つまり、そのプロパティのいずれかを調整できません)、割り当てることができますのみ、 <xref:System.Windows.Forms.Control.Font%2A> 、新しいプロパティ<xref:System.Drawing.Font>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1288">Because the <xref:System.Drawing.Font> is immutable (meaning that you cannot adjust any of its properties), you can only assign the <xref:System.Windows.Forms.Control.Font%2A> property a new <xref:System.Drawing.Font>.</span></span> <span data-ttu-id="97318-1289">ただし、既存のフォントで新しいフォントを作成できます。</span><span class="sxs-lookup"><span data-stu-id="97318-1289">However, you can base the new font on the existing font.</span></span>  
  
 <span data-ttu-id="97318-1290">[Visual Basic、 C#]</span><span class="sxs-lookup"><span data-stu-id="97318-1290">[Visual Basic, C#]</span></span>  
  
 <span data-ttu-id="97318-1291">太字にする既存のフォントを調整する方法の例を次に示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1291">The following is an example of how to adjust the existing font to make it bold:</span></span>  
  
```csharp  
myControl.Font = new Font(myControl.Font,   
    myControl.Font.Style | FontStyle.Bold);  
```  
  
```vb  
MyControl.Font = New Font(MyControl.Font, _   
    MyControl.Font.Style Or FontStyle.Bold)  
```  
  
   
  
## Examples  
 <span data-ttu-id="97318-1292">次のコード例が表示されます、 <xref:System.Windows.Forms.FontDialog> 、ユーザーと変更を<xref:System.Drawing.Font>の<xref:System.Windows.Forms.DateTimePicker>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1292">The following code example displays a <xref:System.Windows.Forms.FontDialog> to the user and changes the <xref:System.Drawing.Font> of a <xref:System.Windows.Forms.DateTimePicker> control.</span></span> <span data-ttu-id="97318-1293">この例が必要です、<xref:System.Windows.Forms.Form>で<xref:System.Windows.Forms.Button>と<xref:System.Windows.Forms.DateTimePicker>にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1293">This example requires that you have a <xref:System.Windows.Forms.Form> with <xref:System.Windows.Forms.Button> and a <xref:System.Windows.Forms.DateTimePicker> on it.</span></span>  
  
 [!code-cpp[Control_Font#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Font/CPP/control_font.cpp#1)]
 [!code-csharp[Control_Font#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Font/CS/control_font.cs#1)]
 [!code-vb[Control_Font#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Font/VB/control_font.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-1294">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.Font" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.Font" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1294">When overriding the <see cref="P:System.Windows.Forms.Control.Font" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Font" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-1295">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1295">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-1296">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.Font" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-1296">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Font" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontChanged">
      <MemberSignature Language="C#" Value="public event EventHandler FontChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler FontChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.FontChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FontChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ FontChanged;" />
      <MemberSignature Language="F#" Value="member this.FontChanged : EventHandler " Usage="member this.FontChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1297"><see cref="P:System.Windows.Forms.Control.Font" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1297">Occurs when the <see cref="P:System.Windows.Forms.Control.Font" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1298">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Font%2A>プロパティを変更すると、プログラムの変更によって、または相互作用使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-1298">This event is raised if the <xref:System.Windows.Forms.Control.Font%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="97318-1299">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1299">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1300">次のコード例に示します、<xref:System.Windows.Forms.Control.FontChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1300">The following code example demonstrates the <xref:System.Windows.Forms.Control.FontChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.FontChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.FontChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Font" />
        <altmember cref="T:System.Drawing.Font" />
      </Docs>
    </Member>
    <Member MemberName="FontHeight">
      <MemberSignature Language="C#" Value="protected int FontHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FontHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.FontHeight" />
      <MemberSignature Language="VB.NET" Value="Protected Property FontHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int FontHeight { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FontHeight : int with get, set" Usage="System.Windows.Forms.Control.FontHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1301">コントロールのフォントの高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1301">Gets or sets the height of the font of the control.</span></span></summary>
        <value><span data-ttu-id="97318-1302">コントロールの <see cref="T:System.Drawing.Font" /> の高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-1302">The height of the <see cref="T:System.Drawing.Font" /> of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="97318-1303"><xref:System.Windows.Forms.Control.FontHeight%2A>コントロールの以外の値を設定しないでプロパティ<xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType>値または-1。</span><span class="sxs-lookup"><span data-stu-id="97318-1303">The <xref:System.Windows.Forms.Control.FontHeight%2A> property should not be set to any value other than the control's <xref:System.Drawing.Font.Height%2A?displayProperty=nameWithType> value, or -1.</span></span> <span data-ttu-id="97318-1304">設定<xref:System.Windows.Forms.Control.FontHeight%2A>を-1 にオフにすると、キャッシュされた高さの値の効果があり、値は、プロパティが参照されている次回再計算されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1304">Setting <xref:System.Windows.Forms.Control.FontHeight%2A> to -1 has the effect of clearing the cached height value, and the value is recalculated the next time the property is referenced.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Font.Height" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.Control.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-513)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1305">コントロールの前景色を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1305">Gets or sets the foreground color of the control.</span></span></summary>
        <value><span data-ttu-id="97318-1306">コントロールの前景の <see cref="T:System.Drawing.Color" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1306">The foreground <see cref="T:System.Drawing.Color" /> of the control.</span></span> <span data-ttu-id="97318-1307">既定値は <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> プロパティの値です。</span><span class="sxs-lookup"><span data-stu-id="97318-1307">The default is the value of the <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> property.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1308"><xref:System.Windows.Forms.Control.ForeColor%2A>プロパティは、アンビエント プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-1308">The <xref:System.Windows.Forms.Control.ForeColor%2A> property is an ambient property.</span></span> <span data-ttu-id="97318-1309">アンビエントのプロパティはコントロールのプロパティ セットは、親コントロールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1309">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="97318-1310">たとえば、<xref:System.Windows.Forms.Button>が、同じ<xref:System.Windows.Forms.Control.BackColor%2A>親として<xref:System.Windows.Forms.Form>既定では。</span><span class="sxs-lookup"><span data-stu-id="97318-1310">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="97318-1311">アンビエント プロパティの詳細については、次を参照してください。、<xref:System.Windows.Forms.AmbientProperties>クラスまたは<xref:System.Windows.Forms.Control>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-1311">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1312">次のコード例のセット、<xref:System.Windows.Forms.Control.BackColor%2A>と<xref:System.Windows.Forms.Control.ForeColor%2A>の既定のシステム カラーをコントロールします。</span><span class="sxs-lookup"><span data-stu-id="97318-1312">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="97318-1313">コードを再帰的には、コントロールに子コントロールがある場合は自分自身を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-1313">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="97318-1314">このコード例が必要です、<xref:System.Windows.Forms.Form>を少なくとも 1 つの子コントロールでただし、子コンテナーを制御するような<xref:System.Windows.Forms.Panel>または<xref:System.Windows.Forms.GroupBox>、わかりやすく示すためコントロールが、再帰、独自の子にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1314">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-1315">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.ForeColor" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.ForeColor" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1315">When overriding the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-1316">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1316">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-1317">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.ForeColor" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-1317">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="ForeColorChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ForeColorChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ForeColorChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ForeColorChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ForeColorChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ForeColorChanged;" />
      <MemberSignature Language="F#" Value="member this.ForeColorChanged : EventHandler " Usage="member this.ForeColorChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1318"><see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1318">Occurs when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1319">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.ForeColor%2A>プロパティを変更すると、プログラムの変更によって、または相互作用使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-1319">This event is raised if the <xref:System.Windows.Forms.Control.ForeColor%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="97318-1320">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1320">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1321">次のコード例は、イベント ハンドラーを実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1321">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-1322"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ*PropertyName* `Changed`にある場合に発生します、対応する*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-1322">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-1323">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1323">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="97318-1324">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1324">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-1325">この例が必要です、<xref:System.Windows.Forms.Form>を格納している、<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1325">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ForeColor" />
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="FromChildHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromChildHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromChildHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromChildHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromChildHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromChildHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromChildHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromChildHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="97318-1326">検索する対象となるウィンドウ ハンドル (<see langword="HWND" />)。</span><span class="sxs-lookup"><span data-stu-id="97318-1326">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="97318-1327">指定したハンドルを格納しているコントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1327">Retrieves the control that contains the specified handle.</span></span></summary>
        <returns><span data-ttu-id="97318-1328">指定したハンドルに関連付けられたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。指定したハンドルを持つコントロールが見つからない場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="97318-1328">The <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1329">このメソッドは、コントロールに関連付けられているハンドルが見つかるまで、ウィンドウ ハンドルの親チェーンを検索します。</span><span class="sxs-lookup"><span data-stu-id="97318-1329">This method searches up the window handle parent chain until it finds a handle that is associated with a control.</span></span> <span data-ttu-id="97318-1330">このメソッドより信頼性が高く、<xref:System.Windows.Forms.Control.FromHandle%2A>メソッド、1 つ以上のハンドルを所有するコントロールを正しく返すためです。</span><span class="sxs-lookup"><span data-stu-id="97318-1330">This method is more reliable than the <xref:System.Windows.Forms.Control.FromHandle%2A> method, because it correctly returns controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1331">このメソッドを呼び出すすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1331">for all windows to call this method.</span></span> <span data-ttu-id="97318-1332">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1332">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Control FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.Control FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::Control ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="97318-1333">検索する対象となるウィンドウ ハンドル (<see langword="HWND" />)。</span><span class="sxs-lookup"><span data-stu-id="97318-1333">The window handle (<see langword="HWND" />) to search for.</span></span></param>
        <summary><span data-ttu-id="97318-1334">指定したハンドルに現在関連付けられているコントロールを返します。</span><span class="sxs-lookup"><span data-stu-id="97318-1334">Returns the control that is currently associated with the specified handle.</span></span></summary>
        <returns><span data-ttu-id="97318-1335">指定したハンドルに関連付けられたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。指定したハンドルを持つコントロールが見つからない場合は <see langword="null" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="97318-1335">A <see cref="T:System.Windows.Forms.Control" /> that represents the control associated with the specified handle; returns <see langword="null" /> if no control with the specified handle is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1336">使用して、<xref:System.Windows.Forms.Control.FromChildHandle%2A>メソッドは、複数のハンドルを所有するコントロールを返す必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1336">Use the <xref:System.Windows.Forms.Control.FromChildHandle%2A> method if you need to return controls that own more than one handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1337">このメソッドを呼び出すすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1337">for all windows to call this method.</span></span> <span data-ttu-id="97318-1338">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1338">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <Member MemberName="GetAccessibilityObjectById">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.AccessibleObject GetAccessibilityObjectById (int objectId);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.AccessibleObject GetAccessibilityObjectById(int32 objectId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAccessibilityObjectById(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetAccessibilityObjectById (objectId As Integer) As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::AccessibleObject ^ GetAccessibilityObjectById(int objectId);" />
      <MemberSignature Language="F#" Value="abstract member GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject&#xA;override this.GetAccessibilityObjectById : int -&gt; System.Windows.Forms.AccessibleObject" Usage="control.GetAccessibilityObjectById objectId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectId" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="objectId"><span data-ttu-id="97318-1339">取得する <see langword="Int32" /> を識別する <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1339">An <see langword="Int32" /> that identifies the <see cref="T:System.Windows.Forms.AccessibleObject" /> to retrieve.</span></span></param>
        <summary><span data-ttu-id="97318-1340">指定した <see cref="T:System.Windows.Forms.AccessibleObject" /> を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1340">Retrieves the specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></summary>
        <returns><span data-ttu-id="97318-1341">指定された <see cref="T:System.Windows.Forms.AccessibleObject" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1341">The specified <see cref="T:System.Windows.Forms.AccessibleObject" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="GetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.AutoSizeMode GetAutoSizeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.AutoSizeMode GetAutoSizeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetAutoSizeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetAutoSizeMode () As AutoSizeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::AutoSizeMode GetAutoSizeMode();" />
      <MemberSignature Language="F#" Value="member this.GetAutoSizeMode : unit -&gt; System.Windows.Forms.AutoSizeMode" Usage="control.GetAutoSizeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoSizeMode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1342"><see cref="P:System.Windows.Forms.Control.AutoSize" /> プロパティが有効なときのコントロールの動作を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1342">Retrieves a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <returns><span data-ttu-id="97318-1343"><see cref="T:System.Windows.Forms.AutoSizeMode" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-1343">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetChildAtPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-1344">指定した位置の子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1344">Retrieves the child control at a specified location.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="97318-1345">コントロールを検索する座標を格納している <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1345">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="97318-1346">座標は、コントロールのクライアント領域の左上隅に対する相対座標として表されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1346">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <summary><span data-ttu-id="97318-1347">指定した座標にある子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1347">Retrieves the child control that is located at the specified coordinates.</span></span></summary>
        <returns><span data-ttu-id="97318-1348">指定したポイントにあるコントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1348">A <see cref="T:System.Windows.Forms.Control" /> that represents the control that is located at the specified point.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1349">指定された位置に子コントロールがない場合、<xref:System.Windows.Forms.Control.GetChildAtPoint%2A>メソッドを返します。`null`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1349">If there is no child control at the specified point, the <xref:System.Windows.Forms.Control.GetChildAtPoint%2A> method returns `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1350">コントロールが返された場合は、このメソッドを呼び出すすべての windows でないコントロールの子。</span><span class="sxs-lookup"><span data-stu-id="97318-1350">for all windows to call this method if the control returned is not a child of the control.</span></span> <span data-ttu-id="97318-1351">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1351">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetChildAtPoint">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetChildAtPoint (System.Drawing.Point pt, System.Windows.Forms.GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetChildAtPoint(valuetype System.Drawing.Point pt, valuetype System.Windows.Forms.GetChildAtPointSkip skipValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetChildAtPoint(System.Drawing.Point,System.Windows.Forms.GetChildAtPointSkip)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetChildAtPoint (pt As Point, skipValue As GetChildAtPointSkip) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetChildAtPoint(System::Drawing::Point pt, System::Windows::Forms::GetChildAtPointSkip skipValue);" />
      <MemberSignature Language="F#" Value="member this.GetChildAtPoint : System.Drawing.Point * System.Windows.Forms.GetChildAtPointSkip -&gt; System.Windows.Forms.Control" Usage="control.GetChildAtPoint (pt, skipValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="skipValue" Type="System.Windows.Forms.GetChildAtPointSkip" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="pt"><span data-ttu-id="97318-1352">コントロールを検索する座標を格納している <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1352">A <see cref="T:System.Drawing.Point" /> that contains the coordinates where you want to look for a control.</span></span> <span data-ttu-id="97318-1353">座標は、コントロールのクライアント領域の左上隅に対する相対座標として表されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1353">Coordinates are expressed relative to the upper-left corner of the control's client area.</span></span></param>
        <param name="skipValue"><span data-ttu-id="97318-1354">特定の種類の子コントロールを無視するかどうかを決定する <see cref="T:System.Windows.Forms.GetChildAtPointSkip" /> の値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-1354">One of the values of <see cref="T:System.Windows.Forms.GetChildAtPointSkip" />, determining whether to ignore child controls of a certain type.</span></span></param>
        <summary><span data-ttu-id="97318-1355">特定の種類の子コントロールを無視するかどうかを指定して、指定した座標にある子コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1355">Retrieves the child control that is located at the specified coordinates, specifying whether to ignore child controls of a certain type.</span></span></summary>
        <returns><span data-ttu-id="97318-1356">指定した座標にある子 <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1356">The child <see cref="T:System.Windows.Forms.Control" /> at the specified coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainerControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IContainerControl GetContainerControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.IContainerControl GetContainerControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetContainerControl" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContainerControl () As IContainerControl" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::IContainerControl ^ GetContainerControl();" />
      <MemberSignature Language="F#" Value="member this.GetContainerControl : unit -&gt; System.Windows.Forms.IContainerControl" Usage="control.GetContainerControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IContainerControl</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1357">コントロールの親チェインの 1 つ上の <see cref="T:System.Windows.Forms.ContainerControl" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="97318-1357">Returns the next <see cref="T:System.Windows.Forms.ContainerControl" /> up the control's chain of parent controls.</span></span></summary>
        <returns><span data-ttu-id="97318-1358"><see cref="T:System.Windows.Forms.IContainerControl" /> の親を表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1358">An <see cref="T:System.Windows.Forms.IContainerControl" />, that represents the parent of the <see cref="T:System.Windows.Forms.Control" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1359">このメソッドを呼び出すすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1359">for all windows to call this method.</span></span> <span data-ttu-id="97318-1360">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1360">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="T:System.Windows.Forms.IContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="GetNextControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control GetNextControl (System.Windows.Forms.Control ctl, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Control GetNextControl(class System.Windows.Forms.Control ctl, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetNextControl(System.Windows.Forms.Control,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNextControl (ctl As Control, forward As Boolean) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Control ^ GetNextControl(System::Windows::Forms::Control ^ ctl, bool forward);" />
      <MemberSignature Language="F#" Value="member this.GetNextControl : System.Windows.Forms.Control * bool -&gt; System.Windows.Forms.Control" Usage="control.GetNextControl (ctl, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="97318-1361">検索を開始する <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1361">The <see cref="T:System.Windows.Forms.Control" /> to start the search with.</span></span></param>
        <param name="forward"><span data-ttu-id="97318-1362">タブ オーダー内を前方に検索する場合は <see langword="true" />。後方に検索する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1362"><see langword="true" /> to search forward in the tab order; <see langword="false" /> to search backward.</span></span></param>
        <summary><span data-ttu-id="97318-1363">子コントロールのタブ オーダー内の 1 つ前または 1 つ後ろのコントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1363">Retrieves the next control forward or back in the tab order of child controls.</span></span></summary>
        <returns><span data-ttu-id="97318-1364">タブ オーダー内の次の <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1364">The next <see cref="T:System.Windows.Forms.Control" /> in the tab order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1365"><xref:System.Windows.Forms.Control.GetNextControl%2A>メソッドは、タブ オーダーに依存します。</span><span class="sxs-lookup"><span data-stu-id="97318-1365">The <xref:System.Windows.Forms.Control.GetNextControl%2A> method is dependent on tab order.</span></span> <span data-ttu-id="97318-1366">入れ子になったコントロールなど、フォームのコントロールすべてを反復処理するには、使用、<xref:System.Windows.Forms.Control.Controls%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1366">To iterate through all controls of a form, including nested controls, use the <xref:System.Windows.Forms.Control.Controls%2A> property.</span></span> <span data-ttu-id="97318-1367">取得または設定コンテナー コントロールのアクティブなコントロールを使用、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1367">To get or set the active control of a container control, use the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="GetPreferredSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size GetPreferredSize (System.Drawing.Size proposedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.Size GetPreferredSize(valuetype System.Drawing.Size proposedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetPreferredSize (proposedSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Drawing::Size GetPreferredSize(System::Drawing::Size proposedSize);" />
      <MemberSignature Language="F#" Value="abstract member GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.GetPreferredSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.GetPreferredSize proposedSize" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.Layout.IArrangedElement.GetPreferredSize(System.Drawing.Size)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedSize" Type="System.Drawing.Size" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="proposedSize"><span data-ttu-id="97318-1368">コントロールのカスタム サイズ領域。</span><span class="sxs-lookup"><span data-stu-id="97318-1368">The custom-sized area for a control.</span></span></param>
        <summary><span data-ttu-id="97318-1369">コントロールが収まる四角形の領域のサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1369">Retrieves the size of a rectangular area into which a control can be fitted.</span></span></summary>
        <returns><span data-ttu-id="97318-1370">四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</span><span class="sxs-lookup"><span data-stu-id="97318-1370">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1371">動作<xref:System.Windows.Forms.Control.GetPreferredSize%2A>コントロールによって異なります。</span><span class="sxs-lookup"><span data-stu-id="97318-1371">The behavior of <xref:System.Windows.Forms.Control.GetPreferredSize%2A> differs by control.</span></span> <span data-ttu-id="97318-1372"><xref:System.Windows.Forms.Control.LayoutEngine%2A>コントロールに返されるサイズを割り当てることができない可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1372">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> might be unable to assign the returned size to the control.</span></span> <span data-ttu-id="97318-1373">示される制約よりも大きいサイズを返すことができます、`proposedSize`パラメーターが`proposedSize`減少するように制約が減少します。</span><span class="sxs-lookup"><span data-stu-id="97318-1373">You can return a size larger than the constraints indicated in the `proposedSize` parameter, but `proposedSize` should decrease as the constraint decreases.</span></span> <span data-ttu-id="97318-1374">たとえば、`GetPreferredSize(new Size(100, 0))`よりも広いしないで`GetPreferredSize(new Size(200, 0))`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1374">For example, `GetPreferredSize(new Size(100, 0))` should not be wider than `GetPreferredSize(new Size(200, 0))`.</span></span> <span data-ttu-id="97318-1375">例外は、 `proposedSize` 0 または`Size.Empty`、制約として定義されています。</span><span class="sxs-lookup"><span data-stu-id="97318-1375">The exception is a `proposedSize` of 0 or `Size.Empty`, which are defined as unconstrained.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle&#xA;override this.GetScaledBounds : System.Drawing.Rectangle * System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; System.Drawing.Rectangle" Usage="control.GetScaledBounds (bounds, factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="bounds"><span data-ttu-id="97318-1376">ディスプレイの範囲の取得条件となる領域を指定する <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1376">A <see cref="T:System.Drawing.Rectangle" /> that specifies the area for which to retrieve the display bounds.</span></span></param>
        <param name="factor"><span data-ttu-id="97318-1377">コントロールの境界の高さおよび幅。</span><span class="sxs-lookup"><span data-stu-id="97318-1377">The height and width of the control's bounds.</span></span></param>
        <param name="specified"><span data-ttu-id="97318-1378">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> の値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-1378">One of the values of <see cref="T:System.Windows.Forms.BoundsSpecified" /> that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="97318-1379">コントロールのスケールが設定される境界を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1379">Retrieves the bounds within which the control is scaled.</span></span></summary>
        <returns><span data-ttu-id="97318-1380">コントロールのスケールが設定される境界を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1380">A <see cref="T:System.Drawing.Rectangle" /> representing the bounds within which the control is scaled.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1381">これはヘルパー メソッドによって呼び出される<xref:System.Windows.Forms.Control.ScaleControl%2A>コントロールがスケーリングされる境界を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1381">This is a helper method that is called by <xref:System.Windows.Forms.Control.ScaleControl%2A> to retrieve the bounds within which the control is scaled.</span></span> <span data-ttu-id="97318-1382">再利用するには、このメソッドをオーバーライドすることができます、<xref:System.Windows.Forms.Control.ScaleControl%2A>スケーリング ロジックしますが、独自の境界を指定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1382">You can override this method to reuse the <xref:System.Windows.Forms.Control.ScaleControl%2A> scaling logic, but you must supply your own bounds.</span></span> <span data-ttu-id="97318-1383">既定の実装は、アカウントに、スケールの範囲を返します、`specified`境界、コントロールが最上位のレベルであるかどうかどうか、コントロールが固定幅または自動サイズ調整と表示要素のコントロールがあります。</span><span class="sxs-lookup"><span data-stu-id="97318-1383">The default implementation returns scaled bounds that take into account the `specified` bounds, whether the control is top level, whether the control is fixed width or auto size, and any adornments the control might have.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
      </Docs>
    </Member>
    <Member MemberName="GetStyle">
      <MemberSignature Language="C#" Value="protected bool GetStyle (System.Windows.Forms.ControlStyles flag);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetStyle(valuetype System.Windows.Forms.ControlStyles flag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetStyle (flag As ControlStyles) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetStyle(System::Windows::Forms::ControlStyles flag);" />
      <MemberSignature Language="F#" Value="member this.GetStyle : System.Windows.Forms.ControlStyles -&gt; bool" Usage="control.GetStyle flag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="97318-1384">値を返す <see cref="T:System.Windows.Forms.ControlStyles" /> ビット。</span><span class="sxs-lookup"><span data-stu-id="97318-1384">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to return the value from.</span></span></param>
        <summary><span data-ttu-id="97318-1385">コントロールの指定したコントロール スタイル ビットの値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1385">Retrieves the value of the specified control style bit for the control.</span></span></summary>
        <returns><span data-ttu-id="97318-1386">指定したコントロール スタイル ビットが <see langword="true" /> に設定されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1386"><see langword="true" /> if the specified control style bit is set to <see langword="true" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1387">コントロール スタイル ビット フラグは、サポートされている動作の分類に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1387">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="97318-1388">コントロールがスタイルを有効に呼び出すことによって、<xref:System.Windows.Forms.Control.SetStyle%2A>メソッドを適切な渡して<xref:System.Windows.Forms.ControlStyles>ビットとビットを設定するブール値。</span><span class="sxs-lookup"><span data-stu-id="97318-1388">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit and the Boolean value to set the bit to.</span></span> <span data-ttu-id="97318-1389">指定したに割り当てられている値を決定する<xref:System.Windows.Forms.ControlStyles>ビットを使用して、<xref:System.Windows.Forms.Control.GetStyle%2A>メソッドを渡します、<xref:System.Windows.Forms.ControlStyles>を評価するメンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-1389">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1390">ダブル バッファリングの関連するスタイルの値のビットを次のコード例を返される、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1390">The following code example returns the value of the double-buffering related style bits for a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-1391">この例を返します`true`すべてのスタイル ビットが設定されている場合にのみ`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1391">This example returns `true` only if all the style bits are set to `true`.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#4](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#4)]
 [!code-csharp[Windows.Forms.ControlMembers6#4](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#4)]
 [!code-vb[Windows.Forms.ControlMembers6#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="GetTopLevel">
      <MemberSignature Language="C#" Value="protected bool GetTopLevel ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance bool GetTopLevel() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.GetTopLevel" />
      <MemberSignature Language="VB.NET" Value="Protected Function GetTopLevel () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; bool GetTopLevel();" />
      <MemberSignature Language="F#" Value="member this.GetTopLevel : unit -&gt; bool" Usage="control.GetTopLevel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1392">コントロールがトップレベル コントロールかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="97318-1392">Determines if the control is a top-level control.</span></span></summary>
        <returns><span data-ttu-id="97318-1393">コントロールがトップレベル コントロールである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1393"><see langword="true" /> if the control is a top-level control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GiveFeedback">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.GiveFeedbackEventHandler GiveFeedback" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GiveFeedback" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GiveFeedback As GiveFeedbackEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::GiveFeedbackEventHandler ^ GiveFeedback;" />
      <MemberSignature Language="F#" Value="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " Usage="member this.GiveFeedback : System.Windows.Forms.GiveFeedbackEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.GiveFeedbackEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1394">ドラッグ操作中に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1394">Occurs during a drag operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1395"><xref:System.Windows.Forms.Control.GiveFeedback>ドラッグ アンド ドロップ操作が開始されたときにイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1395">The <xref:System.Windows.Forms.Control.GiveFeedback> event is raised when a drag-and-drop operation is started.</span></span> <span data-ttu-id="97318-1396"><xref:System.Windows.Forms.Control.GiveFeedback>イベント、ドラッグ イベントのソースことができます、ドラッグ アンド ドロップ操作中にユーザーに視覚的フィードバックを提供するためにマウス ポインターの外観を変更しています。</span><span class="sxs-lookup"><span data-stu-id="97318-1396">With the <xref:System.Windows.Forms.Control.GiveFeedback> event, the source of a drag event can modify the appearance of the mouse pointer in order to give the user visual feedback during a drag-and-drop operation.</span></span>  
  
 <span data-ttu-id="97318-1397">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1397">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="97318-1398"><xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1398">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="97318-1399">コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1399">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="97318-1400">コントロールが有効なドロップ ターゲットである場合、<xref:System.Windows.Forms.Control.GiveFeedback>ドラッグ アンド ドロップの効果が指定されたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1400">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="97318-1401">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1401">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="97318-1402">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1402">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="97318-1403">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1403">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="97318-1404">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1404">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="97318-1405">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1405">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="97318-1406">キーボードまたはマウス ボタンの状態に変更がある場合、<xref:System.Windows.Forms.Control.QueryContinueDrag>の値に基づいて、操作をキャンセルするイベントが発生し、データをドロップして、ドラッグを継続するかどうかを決定します。 または、<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>イベントのプロパティ<xref:System.Windows.Forms.QueryContinueDragEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1406">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="97318-1407">場合の値<xref:System.Windows.Forms.DragAction>は`Continue`、<xref:System.Windows.Forms.Control.DragOver>イベントは、操作を続行して、<xref:System.Windows.Forms.Control.GiveFeedback>適切な視覚的なフィードバックを設定できるように新しい効果でイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1407">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="97318-1408">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1408">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-1409"><xref:System.Windows.Forms.Control.DragOver>と<xref:System.Windows.Forms.Control.GiveFeedback>これにより、ユーザーがマウスの位置で最新のフィードバックを指定してマウスをドロップ先の間で移動、されたイベントはペアになっています。</span><span class="sxs-lookup"><span data-stu-id="97318-1409">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="97318-1410">場合の値<xref:System.Windows.Forms.DragAction>は`Drop`ソース アプリケーションでは、ソース データに対して適切な操作を実行できるように、データの切り取り、移動、操作だった場合、ドロップ効果の値がソースに返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1410">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="97318-1411">場合の値<xref:System.Windows.Forms.DragAction>は`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1411">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="97318-1412">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1412">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1413">次のコード例は、2 つの間でドラッグ アンド ドロップ操作を示します<xref:System.Windows.Forms.ListBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1413">The following code example demonstrates a drag-and-drop operation between two <xref:System.Windows.Forms.ListBox> controls.</span></span> <span data-ttu-id="97318-1414">例では、<xref:System.Windows.Forms.Control.DoDragDrop%2A>ドラッグ操作の開始メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1414">The example calls the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method when the drag action starts.</span></span> <span data-ttu-id="97318-1415">ドラッグ操作の開始、マウスが移動した場合は、複数の<xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType>中にマウスの位置から、<xref:System.Windows.Forms.Control.MouseDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1415">The drag action starts if the mouse has moved more than <xref:System.Windows.Forms.SystemInformation.DragSize%2A?displayProperty=nameWithType> from the mouse location during the <xref:System.Windows.Forms.Control.MouseDown> event.</span></span> <span data-ttu-id="97318-1416"><xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>メソッドを使用中にドラッグする項目のインデックスを確認して、`MouseDown`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1416">The <xref:System.Windows.Forms.ListBox.IndexFromPoint%2A> method is used to determine the index of the item to drag during the `MouseDown` event.</span></span>  
  
 <span data-ttu-id="97318-1417">例では、カスタム カーソルをドラッグ アンド ドロップ操作を使用しても示しています。</span><span class="sxs-lookup"><span data-stu-id="97318-1417">The example also demonstrates using custom cursors for the drag-and-drop operation.</span></span> <span data-ttu-id="97318-1418">例では、その 2 つが必要です、カーソル ファイル`3dwarro.cur`と`3dwno.cur`、カスタム ドラッグ用のアプリケーション ディレクトリ内に存在および非ドロップ カーソルの場合、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="97318-1418">The example requires that two cursor files, `3dwarro.cur` and `3dwno.cur`, exist in the application directory, for the custom drag and no-drop cursors, respectively.</span></span> <span data-ttu-id="97318-1419">場合に使用されるカスタム カーソル、 `UseCustomCursorsCheck` <xref:System.Windows.Forms.CheckBox>がチェックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1419">The custom cursors will be used if the `UseCustomCursorsCheck`<xref:System.Windows.Forms.CheckBox> is checked.</span></span> <span data-ttu-id="97318-1420">カスタム カーソルが設定されて、<xref:System.Windows.Forms.Control.GiveFeedback>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1420">The custom cursors are set in the <xref:System.Windows.Forms.Control.GiveFeedback> event handler.</span></span>  
  
 <span data-ttu-id="97318-1421">キーボードの状態が評価される、<xref:System.Windows.Forms.Control.DragOver>右側のイベント ハンドラー`ListBox`ドラッグ操作を決定するには、shift キーを押し、CTRL、alt キーを押し、または CTRL + ALT キーの状態に基づいて。</span><span class="sxs-lookup"><span data-stu-id="97318-1421">The keyboard state is evaluated in the <xref:System.Windows.Forms.Control.DragOver> event handler for the right `ListBox`, to determine what the drag operation will be based on state of the SHIFT, CTRL, ALT, or CTRL+ALT keys.</span></span> <span data-ttu-id="97318-1422">内の場所、`ListBox`中にも決定されますが、ドロップが発生、`DragOver`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1422">The location in the `ListBox` where the drop would occur is also determined during the `DragOver` event.</span></span> <span data-ttu-id="97318-1423">削除するデータがない場合、 `String`、<xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType>に設定されている`None`で<xref:System.Windows.Forms.DragDropEffects>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1423">If the data to drop is not a `String`, then the <xref:System.Windows.Forms.DragEventArgs.Effect%2A?displayProperty=nameWithType> is set to `None` in <xref:System.Windows.Forms.DragDropEffects>.</span></span> <span data-ttu-id="97318-1424">ドロップダウンの状態を表示する最後に、 `DropLocationLabel`<xref:System.Windows.Forms.Label>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1424">Finally, the status of the drop is displayed in the `DropLocationLabel`<xref:System.Windows.Forms.Label>.</span></span>  
  
 <span data-ttu-id="97318-1425">右側のドロップするデータ`ListBox`で決定されます、<xref:System.Windows.Forms.Control.DragDrop>イベント ハンドラーと`String`の適切な場所にある値を追加、`ListBox`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1425">The data to drop for the right `ListBox` is determined in the <xref:System.Windows.Forms.Control.DragDrop> event handler and the `String` value is added at the appropriate place in the `ListBox`.</span></span> <span data-ttu-id="97318-1426">ドラッグ操作が、フォームの境界の外側に移動しでドラッグ アンド ドロップ操作を取り消したかどうか、<xref:System.Windows.Forms.Control.QueryContinueDrag>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1426">If the drag operation moves outside the bounds of the form, then the drag-and-drop operation is canceled in the <xref:System.Windows.Forms.Control.QueryContinueDrag> event handler.</span></span>  
  
 <span data-ttu-id="97318-1427">このコードの抜粋では、使用方法を示します、<xref:System.Windows.Forms.Control.GiveFeedback>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1427">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.GiveFeedback> event.</span></span> <span data-ttu-id="97318-1428">参照してください、<xref:System.Windows.Forms.Control.DoDragDrop%2A>完全なコード例のメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1428">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event EventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : EventHandler " Usage="member this.GotFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1429">コントロールがフォーカスを受け取ると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1429">Occurs when the control receives focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1430">呼び出すことによってキーボード (タブ、shift キーを押しながら TAB となど) を使用して、フォーカスを変更すると、<xref:System.Windows.Forms.Control.Select%2A>または<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド、または設定して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>プロパティを現在のフォームは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1430">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="97318-1431">フォーカスを変更すると、マウスを使用して、または呼び出すことによって、<xref:System.Windows.Forms.Control.Focus%2A>メソッドでは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1431">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="97318-1432">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1432">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="97318-1433">**注**、<xref:System.Windows.Forms.Control.GotFocus>と<xref:System.Windows.Forms.Control.LostFocus>イベントは、低レベルのフォーカス イベント WM_KILLFOCUS と WM_SETFOCUS Windows メッセージに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="97318-1433">**Note** The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="97318-1434">通常、<xref:System.Windows.Forms.Control.GotFocus>と<xref:System.Windows.Forms.Control.LostFocus>イベントは、更新するときにのみ使用<xref:System.Windows.Forms.UICues>またはカスタム コントロールを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-1434">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="97318-1435">代わりに、<xref:System.Windows.Forms.Control.Enter>と<xref:System.Windows.Forms.Control.Leave>を除くすべてのコントロールのイベントを使用する必要があります、<xref:System.Windows.Forms.Form>クラスを使用する、<xref:System.Windows.Forms.Form.Activated>と<xref:System.Windows.Forms.Form.Deactivate>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1435">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="97318-1436">詳細については、<xref:System.Windows.Forms.Control.GotFocus>と<xref:System.Windows.Forms.Control.LostFocus>イベントを参照してください、 [WM_SETFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx)と[WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-1436">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_SETFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646283\(v=vs.85\).aspx) and [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97318-1437">内からフォーカスを設定しないで、 <xref:System.Windows.Forms.Control.Enter>、 <xref:System.Windows.Forms.Control.GotFocus>、 <xref:System.Windows.Forms.Control.Leave>、 <xref:System.Windows.Forms.Control.LostFocus>、 <xref:System.Windows.Forms.Control.Validating>、または<xref:System.Windows.Forms.Control.Validated>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1437">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="97318-1438">これには、アプリケーションまたはオペレーティング システムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1438">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="97318-1439">詳細については、次を参照してください。、 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-1439">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="97318-1440">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1440">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1441">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1441">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-1442">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.GotFocus>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1442">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span> <span data-ttu-id="97318-1443">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-1443">This report helps you to learn when the event occurs and can assist you in debugging.</span></span>  
  
 <span data-ttu-id="97318-1444">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1444">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-1445">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.GotFocus>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1445">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.GotFocus> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#47](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#47)]
 [!code-vb[System.Windows.Forms.EventExamples#47](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#47)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
        <altmember cref="E:System.Windows.Forms.Form.Activated" />
        <altmember cref="M:System.Windows.Forms.Form.Activate" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Control.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-515)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1446">コントロールのバインド先のウィンドウ ハンドルを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1446">Gets the window handle that the control is bound to.</span></span></summary>
        <value><span data-ttu-id="97318-1447">コントロールのウィンドウ ハンドル (<see cref="T:System.IntPtr" />) を格納する <see langword="HWND" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1447">An <see cref="T:System.IntPtr" /> that contains the window handle (<see langword="HWND" />) of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1448">値、<xref:System.Windows.Forms.Control.Handle%2A>プロパティは、Windows`HWND`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1448">The value of the <xref:System.Windows.Forms.Control.Handle%2A> property is a Windows `HWND`.</span></span> <span data-ttu-id="97318-1449">ハンドルが作成されていない場合このプロパティを参照しているがハンドルを強制的に作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-1449">If the handle has not yet been created, referencing this property will force the handle to be created.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1450">次のコード例に示しますを使用して、<xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.Control.Handle%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1450">The following code example demonstrates using the <xref:System.Windows.Forms.ControlPaint.DrawFocusRectangle%2A?displayProperty=nameWithType> and the <xref:System.Windows.Forms.Control.Handle%2A> property.</span></span> <span data-ttu-id="97318-1451">例を実行するには、次のコードをフォームに貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-1451">To run the example paste the following code in a form.</span></span> <span data-ttu-id="97318-1452">という名前の 2 つのボタンを追加`Button1`と`Button2`をフォームにすべてのイベントは、それぞれのイベント ハンドラーに接続していることを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1452">Add two buttons named `Button1` and `Button2` to the form and ensure all events are connected to their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlPaint1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlPaint1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleCreated">
      <MemberSignature Language="C#" Value="public event EventHandler HandleCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleCreated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleCreated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleCreated;" />
      <MemberSignature Language="F#" Value="member this.HandleCreated : EventHandler " Usage="member this.HandleCreated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1453">コントロールに対してハンドルが作成されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1453">Occurs when a handle is created for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1454">ハンドルが作成されるときに、<xref:System.Windows.Forms.Control>が最初に表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1454">A handle is created when the <xref:System.Windows.Forms.Control> is displayed for the first time.</span></span> <span data-ttu-id="97318-1455">たとえば場合、<xref:System.Windows.Forms.Control>が作成されますが<xref:System.Windows.Forms.Control.Visible%2A>に設定`false`、<xref:System.Windows.Forms.Control.HandleCreated>までイベントは発生しません<xref:System.Windows.Forms.Control.Visible%2A>に設定されている`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1455">For example, if a <xref:System.Windows.Forms.Control> is created that has <xref:System.Windows.Forms.Control.Visible%2A> set to `false`, the <xref:System.Windows.Forms.Control.HandleCreated> event will not be raised until <xref:System.Windows.Forms.Control.Visible%2A> is set to `true`.</span></span>  
  
 <span data-ttu-id="97318-1456">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1456">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1457">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1457">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-1458">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.HandleCreated>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1458">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span> <span data-ttu-id="97318-1459">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-1459">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-1460">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1460">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-1461">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1461">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-1462">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.HandleCreated>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1462">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleCreated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#37](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#37)]
 [!code-vb[System.Windows.Forms.EventExamples#37](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#37)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HandleDestroyed">
      <MemberSignature Language="C#" Value="public event EventHandler HandleDestroyed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler HandleDestroyed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HandleDestroyed" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HandleDestroyed As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ HandleDestroyed;" />
      <MemberSignature Language="F#" Value="member this.HandleDestroyed : EventHandler " Usage="member this.HandleDestroyed : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1463">コントロールのハンドルが破棄されているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1463">Occurs when the control's handle is in the process of being destroyed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1464">中に、<xref:System.Windows.Forms.Control.HandleDestroyed>イベント、コントロールが有効な Windows のコントロールでは引き続き、<xref:System.Windows.Forms.Control.Handle%2A>呼び出すことで再作成することができます、<xref:System.Windows.Forms.Control.RecreateHandle%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1464">During the <xref:System.Windows.Forms.Control.HandleDestroyed> event, the control is still a valid Windows control and the <xref:System.Windows.Forms.Control.Handle%2A> can be recreated by calling the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 <span data-ttu-id="97318-1465">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1465">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1466">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1466">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-1467">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.HandleDestroyed>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1467">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span> <span data-ttu-id="97318-1468">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-1468">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-1469">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1469">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-1470">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1470">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-1471">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.HandleDestroyed>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1471">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.HandleDestroyed> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#38](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#38)]
 [!code-vb[System.Windows.Forms.EventExamples#38](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#38)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="HasChildren">
      <MemberSignature Language="C#" Value="public bool HasChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.HasChildren" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChildren : bool" Usage="System.Windows.Forms.Control.HasChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1472">コントロールに 1 つ以上の子コントロールが格納されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1472">Gets a value indicating whether the control contains one or more child controls.</span></span></summary>
        <value><span data-ttu-id="97318-1473">コントロールに 1 つ以上の子コントロールが格納されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1473"><see langword="true" /> if the control contains one or more child controls; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1474">場合、<xref:System.Windows.Forms.Control.Controls%2A>コレクションには、<xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A>ゼロより大きい、<xref:System.Windows.Forms.Control.HasChildren%2A>プロパティが返す`true`。</span><span class="sxs-lookup"><span data-stu-id="97318-1474">If the <xref:System.Windows.Forms.Control.Controls%2A> collection has a <xref:System.Windows.Forms.Layout.ArrangedElementCollection.Count%2A> greater than zero, the <xref:System.Windows.Forms.Control.HasChildren%2A> property will return `true`.</span></span> <span data-ttu-id="97318-1475">アクセス、<xref:System.Windows.Forms.Control.HasChildren%2A>プロパティの作成を強制しません、<xref:System.Windows.Forms.Control.ControlCollection>子コントロールがない場合は、このプロパティを参照するため、パフォーマンスが向上ときに指定できますのコントロールのツリーをウォークします。</span><span class="sxs-lookup"><span data-stu-id="97318-1475">Accessing the <xref:System.Windows.Forms.Control.HasChildren%2A> property does not force the creation of a <xref:System.Windows.Forms.Control.ControlCollection> if the control has no children, so referencing this property can provide a performance benefit when walking a tree of controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1476">次のコード例のセット、<xref:System.Windows.Forms.Control.BackColor%2A>と<xref:System.Windows.Forms.Control.ForeColor%2A>の既定のシステム カラーをコントロールします。</span><span class="sxs-lookup"><span data-stu-id="97318-1476">The following code example sets the <xref:System.Windows.Forms.Control.BackColor%2A> and <xref:System.Windows.Forms.Control.ForeColor%2A> of the controls to the default system colors.</span></span> <span data-ttu-id="97318-1477">コードを再帰的には、コントロールに子コントロールがある場合は自分自身を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-1477">The code recursively calls itself if the control has any child controls.</span></span> <span data-ttu-id="97318-1478">このコード例が必要です、<xref:System.Windows.Forms.Form>を少なくとも 1 つの子コントロールでただし、子コンテナーを制御するような<xref:System.Windows.Forms.Panel>または<xref:System.Windows.Forms.GroupBox>、わかりやすく示すためコントロールが、再帰、独自の子にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1478">This code example requires that you have a <xref:System.Windows.Forms.Form> with at least one child control; however, a child container control, like a <xref:System.Windows.Forms.Panel> or <xref:System.Windows.Forms.GroupBox>, with its own child control(s) would better demonstrate the recursion.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#1)]
 [!code-vb[Windows.Forms.Control Properties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Layout.ArrangedElementCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Height">
      <MemberSignature Language="C#" Value="public int Height { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Height" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Height" />
      <MemberSignature Language="VB.NET" Value="Public Property Height As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Height { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Height : int with get, set" Usage="System.Windows.Forms.Control.Height" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1479">コントロールの高さを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1479">Gets or sets the height of the control.</span></span></summary>
        <value><span data-ttu-id="97318-1480">コントロールの高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-1480">The height of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1481">加えられた変更、<xref:System.Windows.Forms.Control.Height%2A>と<xref:System.Windows.Forms.Control.Top%2A>プロパティ値が原因、<xref:System.Windows.Forms.Control.Bottom%2A>を変更するコントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-1481">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1482">派生コントロールの高さの最小値<xref:System.Windows.Forms.Splitter>1 ピクセルです。</span><span class="sxs-lookup"><span data-stu-id="97318-1482">The minimum height for the derived control <xref:System.Windows.Forms.Splitter> is one pixel.</span></span> <span data-ttu-id="97318-1483">既定の高さ、<xref:System.Windows.Forms.Splitter>コントロールが 3 ピクセルです。</span><span class="sxs-lookup"><span data-stu-id="97318-1483">The default height for the <xref:System.Windows.Forms.Splitter> control is three pixels.</span></span> <span data-ttu-id="97318-1484">高さの設定、<xref:System.Windows.Forms.Splitter>が既定の高さにプロパティの値をリセット 1 より小さい値を制御します。</span><span class="sxs-lookup"><span data-stu-id="97318-1484">Setting the height of the <xref:System.Windows.Forms.Splitter> control to a value less than one will reset the property value to the default height.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1485">次のコード例では、3 つを作成<xref:System.Windows.Forms.Button>フォームのコントロールし、さまざまなサイズに関連して、場所に関連するプロパティを使用して、そのサイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1485">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="97318-1486">この例が必要です、<xref:System.Windows.Forms.Form>少なくとも 300 ピクセルの高さ、幅を持ちます。</span><span class="sxs-lookup"><span data-stu-id="97318-1486">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Width" />
        <altmember cref="P:System.Drawing.Size.Height" />
      </Docs>
    </Member>
    <Member MemberName="HelpRequested">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HelpEventHandler HelpRequested;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HelpEventHandler HelpRequested" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.HelpRequested" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event HelpRequested As HelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HelpEventHandler ^ HelpRequested;" />
      <MemberSignature Language="F#" Value="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " Usage="member this.HelpRequested : System.Windows.Forms.HelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1487">ユーザーがコントロールのヘルプを要求すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1487">Occurs when the user requests help for a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1488"><xref:System.Windows.Forms.Control.HelpRequested> F1 キーを押したときにイベントが発生一般的キーまたは関連付けられている状況依存のヘルプ ボタンをクリックします。</span><span class="sxs-lookup"><span data-stu-id="97318-1488">The <xref:System.Windows.Forms.Control.HelpRequested> event is commonly raised when the user presses the F1 key or an associated context-sensitive help button is clicked.</span></span>  
  
 <span data-ttu-id="97318-1489">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1489">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1490">次のコード例は、処理を示しています、 <xref:System.Windows.Forms.Control.HelpRequested> 4 つのアドレス フィールドを表示するフォームにカスタム ヘルプ コンテンツを表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1490">The following code example demonstrates handling the <xref:System.Windows.Forms.Control.HelpRequested> event to display custom Help content on a form containing four address fields.</span></span> <span data-ttu-id="97318-1491"><xref:System.Windows.Forms.Control.HelpRequested>アドレス フィールドにフォーカスを持つ F1 キーを押すか、状況依存のヘルプ ボタンを使用してヘルプ カーソルを [アドレス] フィールドをクリックすると、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1491">The <xref:System.Windows.Forms.Control.HelpRequested> event is raised either by pressing the F1 key with the focus in an address field, or by the using the context-sensitive Help button and clicking the Help cursor on an address field.</span></span> <span data-ttu-id="97318-1492"><xref:System.Windows.Forms.HelpEventArgs.Handled%2A>プロパティがあることを示す true に設定、`HelpRequested`イベントを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-1492">The <xref:System.Windows.Forms.HelpEventArgs.Handled%2A> property is set to true to indicate that the `HelpRequested` event is handled.</span></span> <span data-ttu-id="97318-1493">例も示していますのヘルプ テキストを格納する、<xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1493">The example also demonstrates storing the Help text in the <xref:System.Windows.Forms.Control.Tag%2A?displayProperty=nameWithType> property.</span></span>  
  
 [!code-cpp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CPP/helpevent.cpp#1)]
 [!code-csharp[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/CS/helpevent.cs#1)]
 [!code-vb[System.Windows.Forms.HelpEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HelpEventHandler/VB/helpevent.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
        <altmember cref="T:System.Windows.Forms.HelpProvider" />
        <altmember cref="T:System.Windows.Forms.Help" />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Hide();" />
      <MemberSignature Language="F#" Value="member this.Hide : unit -&gt; unit" Usage="control.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1494">コントロールをユーザーに対して非表示にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1494">Conceals the control from the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1495">等しい設定は、コントロールを非表示、<xref:System.Windows.Forms.Control.Visible%2A>プロパティを`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1495">Hiding the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `false`.</span></span> <span data-ttu-id="97318-1496">後に、<xref:System.Windows.Forms.Control.Hide%2A>メソッドを呼び出すと、<xref:System.Windows.Forms.Control.Visible%2A>プロパティの値を返します`false`まで、<xref:System.Windows.Forms.Control.Show%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1496">After the <xref:System.Windows.Forms.Control.Hide%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `false` until the <xref:System.Windows.Forms.Control.Show%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1497">次のコード例では、ボタンがクリックされたときに、CTRL キーが押された場合、ボタンが表示されません。</span><span class="sxs-lookup"><span data-stu-id="97318-1497">The following code example hides a button if the CTRL key is pressed when the button is clicked.</span></span> <span data-ttu-id="97318-1498">この例が必要です、<xref:System.Windows.Forms.Button>という名前の`button1`上、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1498">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
      </Docs>
    </Member>
    <Member MemberName="ImeMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImeMode ImeMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImeMode ImeMode { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeMode : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1499">コントロールの IME (Input Method Editor) モードを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1499">Gets or sets the Input Method Editor (IME) mode of the control.</span></span></summary>
        <value><span data-ttu-id="97318-1500"><see cref="T:System.Windows.Forms.ImeMode" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-1500">One of the <see cref="T:System.Windows.Forms.ImeMode" /> values.</span></span> <span data-ttu-id="97318-1501">既定値は <see cref="F:System.Windows.Forms.ImeMode.Inherit" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-1501">The default is <see cref="F:System.Windows.Forms.ImeMode.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1502">IME は、標準キーボードを使用して複雑な文字と日本語の漢字などの記号を入力するようにするプログラムです。</span><span class="sxs-lookup"><span data-stu-id="97318-1502">An IME is a program that enables users to enter complex characters and symbols, such as Japanese Kanji characters, using a standard keyboard.</span></span> <span data-ttu-id="97318-1503"><xref:System.Windows.Forms.Control.ImeMode%2A>プロパティに設定されて通常<xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType>の<xref:System.Windows.Forms.TextBox>数値のみ入力するためのものがコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1503">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is typically set to <xref:System.Windows.Forms.ImeMode.Off?displayProperty=nameWithType> for a <xref:System.Windows.Forms.TextBox> control that is intended to only enter numeric values.</span></span> <span data-ttu-id="97318-1504"><xref:System.Windows.Forms.Control.ImeMode%2A>プロパティの値に設定されて<xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType>の<xref:System.Windows.Forms.Form>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1504">The <xref:System.Windows.Forms.Control.ImeMode%2A> property value is set to <xref:System.Windows.Forms.ImeMode.NoControl?displayProperty=nameWithType> for the <xref:System.Windows.Forms.Form> class.</span></span>  
  
 <span data-ttu-id="97318-1505">ほとんどのクラスを直接サポートして入力方式エディター、または、IME から直接入力を許可するのには、このプロパティの値が設定されます<xref:System.Windows.Forms.ImeMode.NoControl>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1505">Most classes that do not directly support Input Method Editors, or allow direct input from an IME, will set the value of this property to <xref:System.Windows.Forms.ImeMode.NoControl>.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97318-1506">ユーザーが変更できる対話形式で、<xref:System.Windows.Forms.Control.ImeMode%2A>にプログラムで設定されている場合を除き、<xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1506">The user can interactively change the <xref:System.Windows.Forms.Control.ImeMode%2A> unless it has been programmatically set to <xref:System.Windows.Forms.ImeMode.Disable?displayProperty=nameWithType>.</span></span> <span data-ttu-id="97318-1507">この場合、ユーザーは、IME を使用できません。</span><span class="sxs-lookup"><span data-stu-id="97318-1507">In this case, the user will not be able to use the IME.</span></span>  
>   
>  <span data-ttu-id="97318-1508"><xref:System.Windows.Forms.Control.ImeMode%2A>グローバル入力モードが有効な場合、Windows 8 のプロパティは無視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1508">The <xref:System.Windows.Forms.Control.ImeMode%2A> property is ignored on Windows 8 when the global input mode is in effect.</span></span> <span data-ttu-id="97318-1509">詳細については、次を参照してください。[スイッチ テキスト入力からスレッドごとに変更 Per-user](https://go.microsoft.com/fwlink/?LinkID=256509)します。</span><span class="sxs-lookup"><span data-stu-id="97318-1509">For more info, see [Switch Text Input Changed from Per-Thread to Per-User](https://go.microsoft.com/fwlink/?LinkID=256509).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="97318-1510">割り当てられた値が 1 つの<see cref="T:System.Windows.Forms.ImeMode" />列挙値。</span><span class="sxs-lookup"><span data-stu-id="97318-1510">The assigned value is not one of the <see cref="T:System.Windows.Forms.ImeMode" /> enumeration values.</span></span></exception>
        <altmember cref="T:System.Windows.Forms.ImeMode" />
        <altmember cref="P:System.Windows.Forms.Control.DefaultImeMode" />
      </Docs>
    </Member>
    <Member MemberName="ImeModeBase">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ImeMode ImeModeBase { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImeMode ImeModeBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ImeModeBase" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Property ImeModeBase As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::ImeMode ImeModeBase { System::Windows::Forms::ImeMode get(); void set(System::Windows::Forms::ImeMode value); };" />
      <MemberSignature Language="F#" Value="member this.ImeModeBase : System.Windows.Forms.ImeMode with get, set" Usage="System.Windows.Forms.Control.ImeModeBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1511">コントロールの IME モードを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1511">Gets or sets the IME mode of a control.</span></span></summary>
        <value><span data-ttu-id="97318-1512">コントロールの IME モード。</span><span class="sxs-lookup"><span data-stu-id="97318-1512">The IME mode of the control.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImeModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ImeModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ImeModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ImeModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ImeModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ImeModeChanged;" />
      <MemberSignature Language="F#" Value="member this.ImeModeChanged : EventHandler " Usage="member this.ImeModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1513"><see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティが変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1513">Occurs when the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1514">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.ImeMode%2A>プロパティを変更すると、プログラムの変更によって、または相互作用使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-1514">This event is raised if the <xref:System.Windows.Forms.Control.ImeMode%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="97318-1515">入力メソッドのマネージャーをサポートしないコントロールでは、このイベントが発生しません。</span><span class="sxs-lookup"><span data-stu-id="97318-1515">Controls that do not support Input Method Managers will never raise this event.</span></span>  
  
 <span data-ttu-id="97318-1516">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1516">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1517">次のコード例は、イベント ハンドラーを実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1517">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-1518"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ*PropertyName* `Changed`にある場合に発生します、対応する*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-1518">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-1519">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1519">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="97318-1520">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1520">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-1521">この例が必要です、<xref:System.Windows.Forms.Form>を格納している、<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1521">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
        <altmember cref="T:System.Windows.Forms.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="InitLayout">
      <MemberSignature Language="C#" Value="protected virtual void InitLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void InitLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InitLayout" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub InitLayout ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void InitLayout();" />
      <MemberSignature Language="F#" Value="abstract member InitLayout : unit -&gt; unit&#xA;override this.InitLayout : unit -&gt; unit" Usage="control.InitLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1522">コントロールが別のコンテナーに追加された後、呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1522">Called after the control has been added to another container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1523"><xref:System.Windows.Forms.Control.InitLayout%2A>メソッドは、コンテナーにコントロールを追加した直後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1523">The <xref:System.Windows.Forms.Control.InitLayout%2A> method is called immediately after adding a control to a container.</span></span> <span data-ttu-id="97318-1524"><xref:System.Windows.Forms.Control.InitLayout%2A>メソッドは、そのコンテナーに基づくレイアウト状態を初期化するコントロールを使用できます。</span><span class="sxs-lookup"><span data-stu-id="97318-1524">The <xref:System.Windows.Forms.Control.InitLayout%2A> method enables a control to initialize its layout state based on its container.</span></span> <span data-ttu-id="97318-1525">たとえば、通常適用固定とドッキングのコントロールに、<xref:System.Windows.Forms.Control.InitLayout%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1525">For example, you would typically apply anchoring and docking to the control in the <xref:System.Windows.Forms.Control.InitLayout%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-1526">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.InitLayout" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.InitLayout" />メソッド コントロールが正しく表示されるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1526">When overriding <see cref="M:System.Windows.Forms.Control.InitLayout" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.InitLayout" /> method so that the control is displayed correctly.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Anchor" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invalidate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-1527">コントロールの特定の領域を無効にし、そのコントロールに描画メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="97318-1527">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberSignature Language="F#" Value="member this.Invalidate : unit -&gt; unit" Usage="control.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-1528">コントロールの表面全体を無効化して、コントロールを再描画します。</span><span class="sxs-lookup"><span data-stu-id="97318-1528">Invalidates the entire surface of the control and causes the control to be redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1529">呼び出す、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは同期の描画を強制しません。 同期の描画を強制的に、<xref:System.Windows.Forms.Control.Update%2A>メソッドを呼び出して、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1529">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="97318-1530">このメソッドはパラメーターなしで呼び出されると、クライアント領域全体の更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1530">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1531">次のコード例で、イメージまたはイメージ ファイルをフォームにドラッグして、上の点で、表示するユーザーが削除されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1531">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="97318-1532"><xref:System.Windows.Forms.Control.OnPaint%2A>メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画する。 それ以外の場合、イメージは、次回の再描画されるまで保持はのみです。</span><span class="sxs-lookup"><span data-stu-id="97318-1532">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="97318-1533"><xref:System.Windows.Forms.Control.DragEnter>イベント処理メソッドをフォームにドラッグされるデータの種類を決定および適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-1533">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="97318-1534"><xref:System.Windows.Forms.Control.DragDrop>場合イベント処理メソッドに、フォームのイメージが表示されます、<xref:System.Drawing.Image>データから作成できます。</span><span class="sxs-lookup"><span data-stu-id="97318-1534">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="97318-1535"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>値は、画面座標、例では、<xref:System.Windows.Forms.Control.PointToClient%2A>クライアント座標に変換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1535">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : bool -&gt; unit" Usage="control.Invalidate invalidateChildren" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidateChildren"><span data-ttu-id="97318-1536">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1536"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-1537">コントロールの特定の領域を無効にし、そのコントロールに描画メッセージを送信します。</span><span class="sxs-lookup"><span data-stu-id="97318-1537">Invalidates a specific region of the control and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="97318-1538">オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1538">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1539">呼び出す、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは同期の描画を強制しません。 同期の描画を強制的に、<xref:System.Windows.Forms.Control.Update%2A>メソッドを呼び出して、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1539">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="97318-1540">このメソッドはパラメーターなしで呼び出されると、クライアント領域全体の更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1540">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.Invalidate rc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="97318-1541">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1541">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <summary><span data-ttu-id="97318-1542">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1542">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1543">呼び出す、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは同期の描画を強制しません。 同期の描画を強制的に、<xref:System.Windows.Forms.Control.Update%2A>メソッドを呼び出して、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1543">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="97318-1544">このメソッドはパラメーターなしで呼び出されると、クライアント領域全体の更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1544">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region -&gt; unit" Usage="control.Invalidate region" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="97318-1545">無効化する <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1545">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <summary><span data-ttu-id="97318-1546">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1546">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1547">呼び出す、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは同期の描画を強制しません。 同期の描画を強制的に、<xref:System.Windows.Forms.Control.Update%2A>メソッドを呼び出して、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1547">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="97318-1548">このメソッドはパラメーターなしで呼び出されると、クライアント領域全体の更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1548">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(valuetype System.Drawing.Rectangle rc, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Rectangle,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate (rc As Rectangle, invalidateChildren As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Rectangle rc, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Rectangle * bool -&gt; unit" Usage="control.Invalidate (rc, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rc" Type="System.Drawing.Rectangle" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rc"><span data-ttu-id="97318-1549">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1549">A <see cref="T:System.Drawing.Rectangle" /> that represents the region to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="97318-1550">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1550"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-1551">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1551">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="97318-1552">オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1552">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1553">呼び出す、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは同期の描画を強制しません。 同期の描画を強制的に、<xref:System.Windows.Forms.Control.Update%2A>メソッドを呼び出して、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1553">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="97318-1554">このメソッドはパラメーターなしで呼び出されると、クライアント領域全体の更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1554">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate (System.Drawing.Region region, bool invalidateChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invalidate(class System.Drawing.Region region, bool invalidateChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate(System::Drawing::Region ^ region, bool invalidateChildren);" />
      <MemberSignature Language="F#" Value="member this.Invalidate : System.Drawing.Region * bool -&gt; unit" Usage="control.Invalidate (region, invalidateChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="System.Drawing.Region" />
        <Parameter Name="invalidateChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region"><span data-ttu-id="97318-1555">無効化する <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1555">The <see cref="T:System.Drawing.Region" /> to invalidate.</span></span></param>
        <param name="invalidateChildren"><span data-ttu-id="97318-1556">コントロールの子コントロールを無効にする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1556"><see langword="true" /> to invalidate the control's child controls; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-1557">コントロールの指定した領域を無効にし (そのコントロールの次の描画操作で再描画される領域を示す更新領域に追加し)、描画メッセージがそのコントロールに送信されるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1557">Invalidates the specified region of the control (adds it to the control's update region, which is the area that will be repainted at the next paint operation), and causes a paint message to be sent to the control.</span></span> <span data-ttu-id="97318-1558">オプションとして、そのコントロールに割り当てられている子コントロールも無効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1558">Optionally, invalidates the child controls assigned to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1559">呼び出す、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは同期の描画を強制しません。 同期の描画を強制的に、<xref:System.Windows.Forms.Control.Update%2A>メソッドを呼び出して、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1559">Calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method does not force a synchronous paint; to force a synchronous paint, call the <xref:System.Windows.Forms.Control.Update%2A> method after calling the <xref:System.Windows.Forms.Control.Invalidate%2A> method.</span></span> <span data-ttu-id="97318-1560">このメソッドはパラメーターなしで呼び出されると、クライアント領域全体の更新領域に追加されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1560">When this method is called with no parameters, the entire client area is added to the update region.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Refresh" />
        <altmember cref="M:System.Windows.Forms.Control.Update" />
      </Docs>
    </Member>
    <Member MemberName="Invalidated">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.InvalidateEventHandler Invalidated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.InvalidateEventHandler Invalidated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Invalidated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Invalidated As InvalidateEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::InvalidateEventHandler ^ Invalidated;" />
      <MemberSignature Language="F#" Value="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " Usage="member this.Invalidated : System.Windows.Forms.InvalidateEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InvalidateEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1561">コントロールの表示に再描画が必要なときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1561">Occurs when a control's display requires redrawing.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1562">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1562">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1563">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1563">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-1564">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.Invalidated>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1564">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span> <span data-ttu-id="97318-1565">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-1565">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-1566">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1566">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-1567">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1567">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-1568">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.Invalidated>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1568">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.Invalidated> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#40](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#40)]
 [!code-vb[System.Windows.Forms.EventExamples#40](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#40)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Invoke">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-1569">コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、デリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-1569">Executes a delegate on the thread that owns the control's underlying window handle.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object Invoke(class System.Delegate method) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ Invoke(Delegate ^ method);" />
      <MemberSignature Language="F#" Value="member this.Invoke : Delegate -&gt; obj" Usage="control.Invoke method" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="97318-1570">コントロールのスレッド コンテキストで呼び出されるメソッドを格納しているデリゲート。</span><span class="sxs-lookup"><span data-stu-id="97318-1570">A delegate that contains a method to be called in the control's thread context.</span></span></param>
        <summary><span data-ttu-id="97318-1571">コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、指定したデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-1571">Executes the specified delegate on the thread that owns the control's underlying window handle.</span></span></summary>
        <returns><span data-ttu-id="97318-1572">呼び出されるデリゲートからの戻り値。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1572">The return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1573">デリゲートは、C または C++ 言語の関数ポインターに似ています。</span><span class="sxs-lookup"><span data-stu-id="97318-1573">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="97318-1574">デリゲートは、デリゲート オブジェクト内のメソッドへの参照をカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="97318-1574">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="97318-1575">デリゲート オブジェクト参照先のメソッドを呼び出すコードに渡すことができ、メソッドを呼び出すことができない既知コンパイル時にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1575">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="97318-1576">C または C++ では、関数のポインターとは異なりデリゲートは、オブジェクト指向、タイプ セーフとセキュリティを強化します。</span><span class="sxs-lookup"><span data-stu-id="97318-1576">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="97318-1577"><xref:System.Windows.Forms.Control.Invoke%2A>チェーン コントロールの親コントロールまたはウィンドウのあるフォームが見つかるまでメソッドの検索が現在のコントロールの基になるウィンドウ ハンドルがまだ存在しない場合に処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-1577">The <xref:System.Windows.Forms.Control.Invoke%2A> method searches up the control's parent chain until it finds a control or form that has a window handle if the current control's underlying window handle does not exist yet.</span></span> <span data-ttu-id="97318-1578">適切なハンドルが見つからない場合、<xref:System.Windows.Forms.Control.Invoke%2A>メソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="97318-1578">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.Invoke%2A> method will throw an exception.</span></span> <span data-ttu-id="97318-1579">呼び出し中に発生した例外は、呼び出し元に反映されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1579">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1580">加え、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティはスレッド セーフであるコントロールの 4 つの方法があります: <xref:System.Windows.Forms.Control.Invoke%2A>、 <xref:System.Windows.Forms.Control.BeginInvoke%2A>、 <xref:System.Windows.Forms.Control.EndInvoke%2A>、および<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1580">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-1581">呼び出す<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-1581">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="97318-1582">他のすべてのメソッド呼び出しにはコントロールのスレッドへの呼び出しをマーシャ リングするのに invoke メソッドのいずれかを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1582">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="97318-1583">デリゲートのインスタンスであることができます<xref:System.EventHandler>、後者 sender パラメーターは、このコントロールを含むおよびイベント パラメーターが含まれます<xref:System.EventArgs.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1583">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="97318-1584">デリゲートのインスタンスであることができますも<xref:System.Windows.Forms.MethodInvoker>、または void パラメーター リストを受け取るその他のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="97318-1584">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="97318-1585">呼び出し、<xref:System.EventHandler>または<xref:System.Windows.Forms.MethodInvoker>デリゲートが別の種類のデリゲートの呼び出しよりも高速になります。</span><span class="sxs-lookup"><span data-stu-id="97318-1585">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1586">メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1586">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1587">次のコード例では、デリゲートを格納しているコントロールを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1587">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="97318-1588">デリゲートが、リスト ボックスに項目を追加するメソッドをカプセル化し、このメソッドは、フォームの基になるハンドルを所有するスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1588">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form.</span></span> <span data-ttu-id="97318-1589">ボタンをクリックすると`Invoke`デリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-1589">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke2/CPP/control_invoke2.cpp#1)]
 [!code-csharp[Control_Invoke2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke2/CS/control_invoke2.cs#1)]
 [!code-vb[Control_Invoke2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke2/VB/control_invoke2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public object Invoke (Delegate method, params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object Invoke(class System.Delegate method, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Invoke(System.Delegate,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Function Invoke (method As Delegate, ParamArray args As Object()) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ Invoke(Delegate ^ method, ... cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : Delegate * obj[] -&gt; obj&#xA;override this.Invoke : Delegate * obj[] -&gt; obj" Usage="control.Invoke (method, args)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.ISynchronizeInvoke.Invoke(System.Delegate,System.Object[])</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Delegate" />
        <Parameter Name="args" Type="System.Object[]">
          <Attributes>
            <Attribute FrameworkAlternate="netcore-3.0">
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="method"><span data-ttu-id="97318-1590"><paramref name="args" /> パラメーターに指定されている数および型と同じ数および型のパラメーターをとるメソッドへのデリゲート。</span><span class="sxs-lookup"><span data-stu-id="97318-1590">A delegate to a method that takes parameters of the same number and type that are contained in the <paramref name="args" /> parameter.</span></span></param>
        <param name="args"><span data-ttu-id="97318-1591">指定したメソッドに引数として渡すオブジェクトの配列。</span><span class="sxs-lookup"><span data-stu-id="97318-1591">An array of objects to pass as arguments to the specified method.</span></span> <span data-ttu-id="97318-1592">メソッドが引数をとらない場合、このパラメーターは <see langword="null" /> にすることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-1592">This parameter can be <see langword="null" /> if the method takes no arguments.</span></span></param>
        <summary><span data-ttu-id="97318-1593">コントロールの基になるウィンドウ ハンドルを所有するスレッド上で、指定した引数リストを使用して、指定したデリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-1593">Executes the specified delegate, on the thread that owns the control's underlying window handle, with the specified list of arguments.</span></span></summary>
        <returns><span data-ttu-id="97318-1594">呼び出されるデリゲートからの戻り値を格納する <see cref="T:System.Object" />。デリゲートに戻り値がない場合は <see langword="null" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1594">An <see cref="T:System.Object" /> that contains the return value from the delegate being invoked, or <see langword="null" /> if the delegate has no return value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1595">デリゲートは、C または C++ 言語の関数ポインターに似ています。</span><span class="sxs-lookup"><span data-stu-id="97318-1595">Delegates are similar to function pointers in C or C++ languages.</span></span> <span data-ttu-id="97318-1596">デリゲートは、デリゲート オブジェクト内のメソッドへの参照をカプセル化します。</span><span class="sxs-lookup"><span data-stu-id="97318-1596">Delegates encapsulate a reference to a method inside a delegate object.</span></span> <span data-ttu-id="97318-1597">デリゲート オブジェクト参照先のメソッドを呼び出すコードに渡すことができ、メソッドを呼び出すことができない既知コンパイル時にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1597">The delegate object can then be passed to code that calls the referenced method, and the method to be invoked can be unknown at compile time.</span></span> <span data-ttu-id="97318-1598">C または C++ では、関数のポインターとは異なりデリゲートは、オブジェクト指向、タイプ セーフとセキュリティを強化します。</span><span class="sxs-lookup"><span data-stu-id="97318-1598">Unlike function pointers in C or C++, delegates are object-oriented, type-safe, and more secure.</span></span>  
  
 <span data-ttu-id="97318-1599">コントロールのハンドルがまだ存在しない場合、このメソッドは、コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、コントロールの親チェーンを検索します。</span><span class="sxs-lookup"><span data-stu-id="97318-1599">If the control's handle does not exist yet, this method searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="97318-1600">適切なハンドルが見つからない場合、このメソッドは例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="97318-1600">If no appropriate handle can be found, this method throws an exception.</span></span> <span data-ttu-id="97318-1601">呼び出し中に発生した例外は、呼び出し元に反映されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1601">Exceptions that are raised during the call will be propagated back to the caller.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1602">加え、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティはスレッド セーフであるコントロールの 4 つの方法があります: <xref:System.Windows.Forms.Control.Invoke%2A>、 <xref:System.Windows.Forms.Control.BeginInvoke%2A>、 <xref:System.Windows.Forms.Control.EndInvoke%2A>、および<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1602">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe: <xref:System.Windows.Forms.Control.Invoke%2A>, <xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A>, and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-1603">呼び出す<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-1603">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="97318-1604">他のすべてのメソッド呼び出しにはコントロールのスレッドへの呼び出しをマーシャ リングするのに invoke メソッドのいずれかを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1604">For all other method calls, you should use one of the invoke methods to marshal the call to the control's thread.</span></span>  
  
 <span data-ttu-id="97318-1605">デリゲートのインスタンスであることができます<xref:System.EventHandler>、後者 sender パラメーターは、このコントロールを含むおよびイベント パラメーターが含まれます<xref:System.EventArgs.Empty?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1605">The delegate can be an instance of <xref:System.EventHandler>, in which case the sender parameter will contain this control, and the event parameter will contain <xref:System.EventArgs.Empty?displayProperty=nameWithType>.</span></span> <span data-ttu-id="97318-1606">デリゲートのインスタンスであることができますも<xref:System.Windows.Forms.MethodInvoker>、または void パラメーター リストを受け取るその他のデリゲート。</span><span class="sxs-lookup"><span data-stu-id="97318-1606">The delegate can also be an instance of <xref:System.Windows.Forms.MethodInvoker>, or any other delegate that takes a void parameter list.</span></span> <span data-ttu-id="97318-1607">呼び出し、<xref:System.EventHandler>または<xref:System.Windows.Forms.MethodInvoker>デリゲートが別の種類のデリゲートの呼び出しよりも高速になります。</span><span class="sxs-lookup"><span data-stu-id="97318-1607">A call to an <xref:System.EventHandler> or <xref:System.Windows.Forms.MethodInvoker> delegate will be faster than a call to another type of delegate.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1608">メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1608">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1609">次のコード例では、デリゲートを格納しているコントロールを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1609">The following code example shows controls that contain a delegate.</span></span> <span data-ttu-id="97318-1610">デリゲートが、リスト ボックスに項目を追加するメソッドをカプセル化し、このメソッドは、指定した引数を使用して、フォームの基になるハンドルを所有するスレッドで実行されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1610">The delegate encapsulates a method that adds items to the list box, and this method is executed on the thread that owns the underlying handle of the form, using the specified arguments.</span></span> <span data-ttu-id="97318-1611">ボタンをクリックすると`Invoke`デリゲートを実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-1611">When the user clicks on the button, `Invoke` runs the delegate.</span></span>  
  
 [!code-cpp[Control_Invoke1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Invoke1/CPP/control_invoke1.cpp#1)]
 [!code-csharp[Control_Invoke1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Invoke1/CS/control_invoke1.cs#1)]
 [!code-vb[Control_Invoke1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Invoke1/VB/control_invoke1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MethodInvoker" />
        <altmember cref="P:System.Windows.Forms.Control.InvokeRequired" />
      </Docs>
    </Member>
    <Member MemberName="InvokeGotFocus">
      <MemberSignature Language="C#" Value="protected void InvokeGotFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeGotFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeGotFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeGotFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeGotFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeGotFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="97318-1612">イベントの割り当て先の <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1612">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="97318-1613">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1613">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-1614">指定したコントロールの <see cref="E:System.Windows.Forms.Control.GotFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1614">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeLostFocus">
      <MemberSignature Language="C#" Value="protected void InvokeLostFocus (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeLostFocus(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeLostFocus (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeLostFocus(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeLostFocus : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeLostFocus (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="97318-1615">イベントの割り当て先の <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1615">The <see cref="T:System.Windows.Forms.Control" /> to assign the event to.</span></span></param>
        <param name="e"><span data-ttu-id="97318-1616">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1616">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-1617">指定したコントロールの <see cref="E:System.Windows.Forms.Control.LostFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1617">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeOnClick">
      <MemberSignature Language="C#" Value="protected void InvokeOnClick (System.Windows.Forms.Control toInvoke, EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokeOnClick(class System.Windows.Forms.Control toInvoke, class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokeOnClick (toInvoke As Control, e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokeOnClick(System::Windows::Forms::Control ^ toInvoke, EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokeOnClick : System.Windows.Forms.Control * EventArgs -&gt; unit" Usage="control.InvokeOnClick (toInvoke, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toInvoke" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="toInvoke"><span data-ttu-id="97318-1618"><see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Click" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1618">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Click" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="97318-1619">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1619">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-1620">指定したコントロールの <see cref="E:System.Windows.Forms.Control.Click" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1620">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokePaint">
      <MemberSignature Language="C#" Value="protected void InvokePaint (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaint(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaint (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaint(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaint : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaint (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="97318-1621"><see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Paint" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1621">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="97318-1622">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1622">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-1623">指定したコントロールの <see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1623">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="InvokePaintBackground">
      <MemberSignature Language="C#" Value="protected void InvokePaintBackground (System.Windows.Forms.Control c, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InvokePaintBackground(class System.Windows.Forms.Control c, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InvokePaintBackground (c As Control, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InvokePaintBackground(System::Windows::Forms::Control ^ c, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.InvokePaintBackground : System.Windows.Forms.Control * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.InvokePaintBackground (c, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Windows.Forms.Control" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="c"><span data-ttu-id="97318-1624"><see cref="T:System.Windows.Forms.Control" /> イベントの割り当て先の <see cref="E:System.Windows.Forms.Control.Paint" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1624">The <see cref="T:System.Windows.Forms.Control" /> to assign the <see cref="E:System.Windows.Forms.Control.Paint" /> event to.</span></span></param>
        <param name="e"><span data-ttu-id="97318-1625">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1625">An <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-1626">指定したコントロールの <see langword="PaintBackground" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1626">Raises the <see langword="PaintBackground" /> event for the specified control.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="InvokeRequired">
      <MemberSignature Language="C#" Value="public bool InvokeRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvokeRequired" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.InvokeRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InvokeRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InvokeRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InvokeRequired : bool" Usage="System.Windows.Forms.Control.InvokeRequired" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.ISynchronizeInvoke.InvokeRequired</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1627">呼び出し元がコントロールの作成されたスレッドと異なるスレッド上にあるため、コントロールに対してメソッドの呼び出しを実行するときに、呼び出し元で invoke メソッドを呼び出す必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1627">Gets a value indicating whether the caller must call an invoke method when making method calls to the control because the caller is on a different thread than the one the control was created on.</span></span></summary>
        <value><span data-ttu-id="97318-1628">コントロールの <see langword="true" /> が、呼び出し元スレッドと異なるスレッド上で作成された (invoke メソッドを通じてコントロールを呼び出す必要があることを示す) 場合は <see cref="P:System.Windows.Forms.Control.Handle" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1628"><see langword="true" /> if the control's <see cref="P:System.Windows.Forms.Control.Handle" /> was created on a different thread than the calling thread (indicating that you must make calls to the control through an invoke method); otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1629">Windows フォームのコントロールは、特定のスレッドにバインドされ、スレッド セーフではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-1629">Controls in Windows Forms are bound to a specific thread and are not thread safe.</span></span> <span data-ttu-id="97318-1630">そのため、別のスレッドからコントロールのメソッドを呼び出す場合をする必要がありますを使用して、いずれかのコントロールの適切なスレッドの呼び出しをマーシャ リングするメソッドの呼び出し。</span><span class="sxs-lookup"><span data-stu-id="97318-1630">Therefore, if you are calling a control's method from a different thread, you must use one of the control's invoke methods to marshal the call to the proper thread.</span></span> <span data-ttu-id="97318-1631">このプロパティは、かどうかは、どのようなスレッドは、コントロールを所有して把握していない場合に便利です、invoke メソッドを呼び出す必要がありますを使用できます。</span><span class="sxs-lookup"><span data-stu-id="97318-1631">This property can be used to determine if you must call an invoke method, which can be useful if you do not know what thread owns a control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1632">加え、<xref:System.Windows.Forms.Control.InvokeRequired%2A>プロパティ、コントロールのスレッドの呼び出しは安全である 4 つのメソッドがある: <xref:System.Windows.Forms.Control.Invoke%2A>、<xref:System.Windows.Forms.Control.BeginInvoke%2A>、<xref:System.Windows.Forms.Control.EndInvoke%2A>と<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルが既に作成されている場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1632">In addition to the <xref:System.Windows.Forms.Control.InvokeRequired%2A> property, there are four methods on a control that are thread safe to call: <xref:System.Windows.Forms.Control.Invoke%2A>,<xref:System.Windows.Forms.Control.BeginInvoke%2A>, <xref:System.Windows.Forms.Control.EndInvoke%2A> and <xref:System.Windows.Forms.Control.CreateGraphics%2A> if the handle for the control has already been created.</span></span> <span data-ttu-id="97318-1633">呼び出す<xref:System.Windows.Forms.Control.CreateGraphics%2A>コントロールのハンドルがバック グラウンド スレッドで作成される前に発生する可能性がクロス スレッドの呼び出しが無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-1633">Calling <xref:System.Windows.Forms.Control.CreateGraphics%2A> before the control's handle has been created on a background thread can cause illegal cross thread calls.</span></span> <span data-ttu-id="97318-1634">他のすべてのメソッド呼び出しのため、これらのいずれかを使用する必要があります別のスレッドからを呼び出すときにメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-1634">For all other method calls, you should use one of these invoke methods when calling from a different thread.</span></span>  
  
 <span data-ttu-id="97318-1635">コントロールのハンドルがまだ存在しない場合<xref:System.Windows.Forms.Control.InvokeRequired%2A>コントロールまたはウィンドウ ハンドルを持つフォームが見つかるまで、検索は、コントロールの親チェーンをセットアップします。</span><span class="sxs-lookup"><span data-stu-id="97318-1635">If the control's handle does not yet exist, <xref:System.Windows.Forms.Control.InvokeRequired%2A> searches up the control's parent chain until it finds a control or form that does have a window handle.</span></span> <span data-ttu-id="97318-1636">適切なハンドルが見つからない場合、<xref:System.Windows.Forms.Control.InvokeRequired%2A>メソッドを返します。`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1636">If no appropriate handle can be found, the <xref:System.Windows.Forms.Control.InvokeRequired%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="97318-1637">つまり、<xref:System.Windows.Forms.Control.InvokeRequired%2A>返すことができます`false`場合<xref:System.Windows.Forms.Control.Invoke%2A>は必要ありません (呼び出しは、同じスレッドで発生します)、またはコントロールが別のスレッドで作成されましたが、コントロールのハンドルが作成されていない場合。</span><span class="sxs-lookup"><span data-stu-id="97318-1637">This means that <xref:System.Windows.Forms.Control.InvokeRequired%2A> can return `false` if <xref:System.Windows.Forms.Control.Invoke%2A> is not required (the call occurs on the same thread), or if the control was created on a different thread but the control's handle has not yet been created.</span></span>  
  
 <span data-ttu-id="97318-1638">コントロールのハンドルがまだ作成されていない場合は、呼び出す必要はありません単にプロパティ、メソッド、またはイベント コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1638">In the case where the control's handle has not yet been created, you should not simply call properties, methods, or events on the control.</span></span> <span data-ttu-id="97318-1639">メッセージ ポンプなしのスレッドでコントロールを分離し、により、アプリケーションを不安定、バック グラウンド スレッド上に作成されるコントロールのハンドルがある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1639">This might cause the control's handle to be created on the background thread, isolating the control on a thread without a message pump and making the application unstable.</span></span>  
  
 <span data-ttu-id="97318-1640">またの値をチェックしてこのケースに照らしてを保護する<xref:System.Windows.Forms.Control.IsHandleCreated%2A>とき<xref:System.Windows.Forms.Control.InvokeRequired%2A>返します`false`バック グラウンド スレッドでします。</span><span class="sxs-lookup"><span data-stu-id="97318-1640">You can protect against this case by also checking the value of <xref:System.Windows.Forms.Control.IsHandleCreated%2A> when <xref:System.Windows.Forms.Control.InvokeRequired%2A> returns `false` on a background thread.</span></span> <span data-ttu-id="97318-1641">コントロール ハンドルが作成されていない場合に、呼び出す前に作成されるまでを待つ必要があります<xref:System.Windows.Forms.Control.Invoke%2A>または<xref:System.Windows.Forms.Control.BeginInvoke%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1641">If the control handle has not yet been created, you must wait until it has been created before calling <xref:System.Windows.Forms.Control.Invoke%2A> or <xref:System.Windows.Forms.Control.BeginInvoke%2A>.</span></span> <span data-ttu-id="97318-1642">これは、バック グラウンド スレッドが、アプリケーションのプライマリのフォームのコンス トラクターで作成された場合にのみ通常、(うに`Application.Run(new MainForm())`フォームが表示される前に、または`Application.Run`が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="97318-1642">Typically, this happens only if a background thread is created in the constructor of the primary form for the application (as in `Application.Run(new MainForm())`, before the form has been shown or `Application.Run` has been called.</span></span>  
  
 <span data-ttu-id="97318-1643">1 つのソリューションでは、バック グラウンド スレッドを開始する前に、フォームのハンドルが作成されるまでを待ちます。</span><span class="sxs-lookup"><span data-stu-id="97318-1643">One solution is to wait until the form's handle has been created before starting the background thread.</span></span> <span data-ttu-id="97318-1644">いずれかの強制的に呼び出すことによってハンドルを作成、<xref:System.Windows.Forms.Control.Handle%2A>プロパティ、またはまでの待機、<xref:System.Windows.Forms.Form.Load>イベントがバック グラウンド プロセスを開始します。</span><span class="sxs-lookup"><span data-stu-id="97318-1644">Either force handle creation by calling the <xref:System.Windows.Forms.Control.Handle%2A> property, or wait until the <xref:System.Windows.Forms.Form.Load> event to start the background process.</span></span>  
  
 <span data-ttu-id="97318-1645">優れたソリューションでは、使用する、`SynchronizationContext`によって返される<xref:System.Threading.SynchronizationContext>スレッド間マーシャ リングするためのコントロールではなく。</span><span class="sxs-lookup"><span data-stu-id="97318-1645">An even better solution is to use the `SynchronizationContext` returned by <xref:System.Threading.SynchronizationContext> rather than a control for cross-thread marshaling.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1646">メッセージを処理するスレッドがアクティブでなくなった場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1646">An exception might be thrown if the thread that should process the message is no longer active.</span></span>  
  
 <span data-ttu-id="97318-1647">マルチ スレッドの Windows フォーム コントロールの詳細については、次を参照してください。[方法。ファイルを検索するバック グラウンド スレッドを使用して](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md)と[方法。Windows フォーム コントロールのスレッド セーフな呼び出しを行う](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-1647">For more information about multithreaded Windows Forms controls, see [How to: Use a Background Thread to Search for Files](~/docs/framework/winforms/controls/how-to-use-a-background-thread-to-search-for-files.md) and [How to: Make Thread-Safe Calls to Windows Forms Controls](~/docs/framework/winforms/controls/how-to-make-thread-safe-calls-to-windows-forms-controls.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Invoke(System.Delegate)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeGotFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeLostFocus(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokeOnClick(System.Windows.Forms.Control,System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaint(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="IsAccessible">
      <MemberSignature Language="C#" Value="public bool IsAccessible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsAccessible" />
      <MemberSignature Language="VB.NET" Value="Public Property IsAccessible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAccessible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsAccessible : bool with get, set" Usage="System.Windows.Forms.Control.IsAccessible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1648">コントロールがユーザー補助アプリケーションに表示されるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1648">Gets or sets a value indicating whether the control is visible to accessibility applications.</span></span></summary>
        <value><span data-ttu-id="97318-1649">コントロールがユーザー補助アプリケーションに表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1649"><see langword="true" /> if the control is visible to accessibility applications; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.AccessibleObject" />
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Windows.Forms.Control.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1650">コントロールが破棄されているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1650">Gets a value indicating whether the control has been disposed of.</span></span></summary>
        <value><span data-ttu-id="97318-1651">コントロールが破棄されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1651"><see langword="true" /> if the control has been disposed of; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1652">このプロパティを返す場合`true`コントロールが破棄され、有効な Windows のコントロールとしては参照されなくなったことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-1652">When this property returns `true`, the control is disposed of and can no longer be referenced as a valid Windows control.</span></span> <span data-ttu-id="97318-1653">コントロールのインスタンスが破棄されると、場合でもガベージ コレクションをメモリから削除されるまでメモリにまだ保持がされます。</span><span class="sxs-lookup"><span data-stu-id="97318-1653">Even though the instance of a control is disposed of, it is still maintained in memory until it is removed from memory through garbage collection.</span></span> <span data-ttu-id="97318-1654">呼び出すことはできません、コントロールが破棄されると、その<xref:System.Windows.Forms.Control.RecreateHandle%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1654">When a control is disposed, you cannot call its <xref:System.Windows.Forms.Control.RecreateHandle%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Dispose(System.Boolean)" />
        <altmember cref="T:System.GC" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
      </Docs>
    </Member>
    <Member MemberName="IsHandleCreated">
      <MemberSignature Language="C#" Value="public bool IsHandleCreated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHandleCreated" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsHandleCreated" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHandleCreated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHandleCreated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHandleCreated : bool" Usage="System.Windows.Forms.Control.IsHandleCreated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1655">コントロールにハンドルが関連付けられているかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1655">Gets a value indicating whether the control has a handle associated with it.</span></span></summary>
        <value><span data-ttu-id="97318-1656">コントロールにハンドルが関連付けられている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1656"><see langword="true" /> if a handle has been assigned to the control; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1657">使用して、<xref:System.Windows.Forms.Control.IsHandleCreated%2A>プロパティを決定するかどうか<xref:System.Windows.Forms.Control.CreateHandle%2A>が呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="97318-1657">Use the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property to determine whether <xref:System.Windows.Forms.Control.CreateHandle%2A> has been called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputChar">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member IsInputChar : char -&gt; bool&#xA;override this.IsInputChar : char -&gt; bool" Usage="control.IsInputChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="97318-1658">テスト対象の文字。</span><span class="sxs-lookup"><span data-stu-id="97318-1658">The character to test.</span></span></param>
        <summary><span data-ttu-id="97318-1659">文字が、コントロールによって認識される入力文字かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="97318-1659">Determines if a character is an input character that the control recognizes.</span></span></summary>
        <returns><span data-ttu-id="97318-1660">文字をコントロールに直接送信する必要があり、プリプロセスしない場合は <see langword="true" />。それ以外の場合は、<see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1660"><see langword="true" /> if the character should be sent directly to the control and not preprocessed; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1661">呼び出す、<xref:System.Windows.Forms.Control.IsInputChar%2A>によって指定された文字にするかどうかを判断するメソッド、`charCode`パラメーターは、コントロールが表示される入力文字。</span><span class="sxs-lookup"><span data-stu-id="97318-1661">Call the <xref:System.Windows.Forms.Control.IsInputChar%2A> method to determine whether the character specified by the `charCode` parameter is an input character that the control wants.</span></span> <span data-ttu-id="97318-1662">このメソッドは、指定した入力文字を前処理またはコントロールに直接送信されるかどうかを判断するウィンドウ メッセージのプリプロセス時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1662">This method is called during window message preprocessing to determine whether the specified input character should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="97318-1663">場合<xref:System.Windows.Forms.Control.IsInputChar%2A>返します`true`、指定した文字がコントロールに直接送信されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1663">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `true`, the specified character is sent directly to the control.</span></span> <span data-ttu-id="97318-1664">場合<xref:System.Windows.Forms.Control.IsInputChar%2A>返します`false`、指定した文字が前処理され、前処理中に消費していない場合のみ、コントロールに送信します。</span><span class="sxs-lookup"><span data-stu-id="97318-1664">If <xref:System.Windows.Forms.Control.IsInputChar%2A> returns `false`, the specified character is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="97318-1665">文字の前処理では、文字は、別のコントロールのニーモニックかどうかをチェックが含まれています。</span><span class="sxs-lookup"><span data-stu-id="97318-1665">The preprocessing of a character includes checking whether the character is a mnemonic of another control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1666">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1666">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-1667">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1667">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected virtual bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member IsInputKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="97318-1668"><see cref="T:System.Windows.Forms.Keys" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-1668">One of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-1669">指定されているキーが、通常の入力キーであるか、またはプリプロセスを必要とする特殊なキーであるかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1669">Determines whether the specified key is a regular input key or a special key that requires preprocessing.</span></span></summary>
        <returns><span data-ttu-id="97318-1670">指定されているキーが通常の入力キーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1670"><see langword="true" /> if the specified key is a regular input key; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1671">呼び出す、<xref:System.Windows.Forms.Control.IsInputKey%2A>によってキーが指定されているかどうかを判断するメソッド、`keyData`パラメーターは、コントロールが入力のキー。</span><span class="sxs-lookup"><span data-stu-id="97318-1671">Call the <xref:System.Windows.Forms.Control.IsInputKey%2A> method to determine whether the key specified by the `keyData` parameter is an input key that the control wants.</span></span> <span data-ttu-id="97318-1672">このメソッドは、指定した入力キーの前処理またはコントロールに直接送信する必要があるかどうかを判断するウィンドウ メッセージのプリプロセス時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1672">This method is called during window message preprocessing to determine whether the specified input key should be preprocessed or sent directly to the control.</span></span> <span data-ttu-id="97318-1673">場合<xref:System.Windows.Forms.Control.IsInputKey%2A>返します`true`、指定したキーがコントロールに直接送信されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1673">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `true`, the specified key is sent directly to the control.</span></span> <span data-ttu-id="97318-1674">場合<xref:System.Windows.Forms.Control.IsInputKey%2A>返します`false`、指定したキーが前処理され、前処理中に消費していない場合のみ、コントロールに送信します。</span><span class="sxs-lookup"><span data-stu-id="97318-1674">If <xref:System.Windows.Forms.Control.IsInputKey%2A> returns `false`, the specified key is preprocessed and only sent to the control if it is not consumed by the preprocessing phase.</span></span> <span data-ttu-id="97318-1675">前処理されたキーには、タブ、返された場合、esc キー、および上矢印、下矢印、左方向キー、および右矢印キーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="97318-1675">Keys that are preprocessed include the TAB, RETURN, ESC, and the UP ARROW, DOWN ARROW, LEFT ARROW, and RIGHT ARROW keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1676">次のコード例は、オーバーライドする方法を示します、<xref:System.Windows.Forms.Control.IsInputKey%2A>のメソッドを<xref:System.Windows.Forms.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1676">The following code example shows you how to override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method for a <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="97318-1677">この例で、`TabTextBox`クラスは、TAB キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-1677">In this example, the `TabTextBox` class handles the TAB key.</span></span> <span data-ttu-id="97318-1678">ときに、`TabTextBox`にフォーカスがある、ユーザーは、選択したテキストを置き換えながらという 4 つの空白を追加して、テキスト挿入ポイントで TAB キーを押した。</span><span class="sxs-lookup"><span data-stu-id="97318-1678">When the `TabTextBox` has the focus and the user presses the TAB key four spaces are added at the text insertion point, replacing any selected text.</span></span> <span data-ttu-id="97318-1679">既定で、<xref:System.Windows.Forms.TextBox>コントロールは、次のコントロールに入力フォーカスを移動することによって、TAB キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-1679">By default, the <xref:System.Windows.Forms.TextBox> control handles the TAB key by moving the input focus to the next control.</span></span> <span data-ttu-id="97318-1680">ここで、keypress に到達しません、<xref:System.Windows.Forms.Control.OnKeyDown%2A>メソッドのオーバーライド。</span><span class="sxs-lookup"><span data-stu-id="97318-1680">In this case, the keypress never reaches the <xref:System.Windows.Forms.Control.OnKeyDown%2A> method override.</span></span> <span data-ttu-id="97318-1681">この既定の動作を防ぐために、<xref:System.Windows.Forms.Control.IsInputKey%2A>メソッドのオーバーライド`true`ユーザーが TAB キーを押すとします。</span><span class="sxs-lookup"><span data-stu-id="97318-1681">To prevent this default behavior, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns `true` when the user presses the TAB key.</span></span> <span data-ttu-id="97318-1682">その他のすべてのキープレス、<xref:System.Windows.Forms.Control.IsInputKey%2A>メソッドのオーバーライドは基本クラスのバージョンのメソッドの呼び出しの結果を返します。</span><span class="sxs-lookup"><span data-stu-id="97318-1682">For all other keypresses, the <xref:System.Windows.Forms.Control.IsInputKey%2A> method override returns the result of calling the base-class version of the method.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/cs/form1.cs#0)]
 [!code-vb[System.Windows.Forms.Control.IsInputKey#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.IsInputKey/vb/form1.vb#0)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1683">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1683">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-1684">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1684">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="T:System.Windows.Forms.Keys" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="P:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey" />
      </Docs>
    </Member>
    <Member MemberName="IsKeyLocked">
      <MemberSignature Language="C#" Value="public static bool IsKeyLocked (System.Windows.Forms.Keys keyVal);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsKeyLocked(valuetype System.Windows.Forms.Keys keyVal) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsKeyLocked(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsKeyLocked (keyVal As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsKeyLocked(System::Windows::Forms::Keys keyVal);" />
      <MemberSignature Language="F#" Value="static member IsKeyLocked : System.Windows.Forms.Keys -&gt; bool" Usage="System.Windows.Forms.Control.IsKeyLocked keyVal" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyVal" Type="System.Windows.Forms.Keys" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="keyVal"><span data-ttu-id="97318-1685"><see cref="T:System.Windows.Forms.Keys" /> 列挙体の CAPS LOCK、NUM LOCK、または SCROLL LOCK の各メンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-1685">The CAPS LOCK, NUM LOCK, or SCROLL LOCK member of the <see cref="T:System.Windows.Forms.Keys" /> enumeration.</span></span></param>
        <summary><span data-ttu-id="97318-1686">CapsLock、NumLock、または ScrollLock の各キーが有効かどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="97318-1686">Determines whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK key is in effect.</span></span></summary>
        <returns><span data-ttu-id="97318-1687">指定されたキーが有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1687"><see langword="true" /> if the specified key or keys are in effect; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1688">使用して、<xref:System.Windows.Forms.Control.IsKeyLocked%2A>プロパティを個別にかどうか、または組み合わせで CAPS LOCK、NUM LOCK、または SCROLL LOCK キーがオンになっているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="97318-1688">Use the <xref:System.Windows.Forms.Control.IsKeyLocked%2A> property to determine whether the CAPS LOCK, NUM LOCK, or SCROLL LOCK keys are on, whether individually or in combination.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1689">次のコード例では、指定したキー (この場合の Caps Lock キー) が有効かどうかを示すメッセージ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1689">The following code example displays a message box indicating whether the specified key (the Caps Lock key in this case) is in effect.</span></span>  
  
 [!code-cpp[ControlIsKeyLocked#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ControlIsKeyLocked/CPP/controliskeylocked.cpp#1)]
 [!code-csharp[ControlIsKeyLocked#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ControlIsKeyLocked/CS/controliskeylocked.cs#1)]
 [!code-vb[ControlIsKeyLocked#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ControlIsKeyLocked/VB/controliskeylocked.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="97318-1690"><paramref name="keyVal" />パラメーターは CAPS LOCK、NUM LOCK、または SCROLL LOCK キー以外のキーを指します。</span><span class="sxs-lookup"><span data-stu-id="97318-1690">The <paramref name="keyVal" /> parameter refers to a key other than the CAPS LOCK, NUM LOCK, or SCROLL LOCK key.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsMirrored">
      <MemberSignature Language="C#" Value="public bool IsMirrored { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMirrored" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.IsMirrored" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMirrored As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMirrored { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMirrored : bool" Usage="System.Windows.Forms.Control.IsMirrored" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1691">コントロールがミラー化されるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1691">Gets a value indicating whether the control is mirrored.</span></span></summary>
        <value><span data-ttu-id="97318-1692">コントロールがミラー化される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1692"><see langword="true" /> if the control is mirrored; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1693">ミラー化されたコントロールは、レイアウトと右から左へのテキストの両方が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1693">A mirrored control displays both layout and text from right to left.</span></span> <span data-ttu-id="97318-1694">詳細については、「[方法 :作成するミラー化された Windows フォームおよびコントロール](https://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1)します。</span><span class="sxs-lookup"><span data-stu-id="97318-1694">For more information, see [How to: Create Mirrored Windows Forms and Controls](https://msdn.microsoft.com/library/7c5c4ecc-9bfb-4508-8383-753e306719b1).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMnemonic">
      <MemberSignature Language="C#" Value="public static bool IsMnemonic (char charCode, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsMnemonic(char charCode, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsMnemonic (charCode As Char, text As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsMnemonic(char charCode, System::String ^ text);" />
      <MemberSignature Language="F#" Value="static member IsMnemonic : char * string -&gt; bool" Usage="System.Windows.Forms.Control.IsMnemonic (charCode, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="97318-1695">テスト対象の文字。</span><span class="sxs-lookup"><span data-stu-id="97318-1695">The character to test.</span></span></param>
        <param name="text"><span data-ttu-id="97318-1696">検索対象の文字列。</span><span class="sxs-lookup"><span data-stu-id="97318-1696">The string to search.</span></span></param>
        <summary><span data-ttu-id="97318-1697">指定した文字が、指定した文字列内のコントロールに割り当てられたニーモニック文字かどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1697">Determines if the specified character is the mnemonic character assigned to the control in the specified string.</span></span></summary>
        <returns><span data-ttu-id="97318-1698"><see langword="true" /> 文字が、コントロールに割り当てられたニーモニック文字である場合は <paramref name="charCode" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1698"><see langword="true" /> if the <paramref name="charCode" /> character is the mnemonic character assigned to the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1699">ニーモニック文字が最初のインスタンスでの"&"の直後の文字を<xref:System.String>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1699">The mnemonic character is the character immediately following the first instance of "&" in a <xref:System.String>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1700">次のコード例は、オーバーライドするボタン クラスの拡張機能を示します、<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>メソッドがカスタム動作。</span><span class="sxs-lookup"><span data-stu-id="97318-1700">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="97318-1701">例では、使用も示しています、<xref:System.Windows.Forms.Control.CanSelect%2A>と<xref:System.Windows.Forms.Control.IsMnemonic%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1701">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="97318-1702">実行には、この例は、同じファイル内のフォーム クラスを使用して、次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-1702">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="97318-1703">型のボタンを追加する`MnemonicButton`をフォームにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1703">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-1704">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-1704">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-1705">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-1705">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="KeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyDown As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyDown;" />
      <MemberSignature Language="F#" Value="member this.KeyDown : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyDown : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1706">コントロールにフォーカスがあるときにキーが押されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1706">Occurs when a key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1707">重要なイベントは、次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1707">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="97318-1708">フォーム レベルでのみ、キーボード イベントを処理し、キーボード イベントを受信するには、他のコントロール、設定、<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType>フォームのプロパティ<xref:System.Windows.Forms.Control.KeyPress>イベント処理メソッドを`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1708">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="97318-1709">タブ、返された場合、esc キー、および矢印キーなどの特定のキーがコントロールによって自動的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1709">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="97318-1710">これらのキーを生成する、<xref:System.Windows.Forms.Control.KeyDown>イベントをオーバーライドする必要がある、<xref:System.Windows.Forms.Control.IsInputKey%2A>フォーム上の各コントロールのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1710">To have these keys raise the <xref:System.Windows.Forms.Control.KeyDown> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="97318-1711">オーバーライドのコード、<xref:System.Windows.Forms.Control.IsInputKey%2A>が押されたかどうか、特殊なキーのいずれかを決定し、値を返す必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1711">The code for the override of the <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span> <span data-ttu-id="97318-1712">オーバーライドする代わりに、<xref:System.Windows.Forms.Control.IsInputKey%2A>処理するメソッド、<xref:System.Windows.Forms.Control.PreviewKeyDown>イベントとセット、<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1712">Instead of overriding the <xref:System.Windows.Forms.Control.IsInputKey%2A> method, you can handle the <xref:System.Windows.Forms.Control.PreviewKeyDown> event and set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="97318-1713">コード例では、次を参照してください。、<xref:System.Windows.Forms.Control.PreviewKeyDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1713">For a code example, see the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span>  
  
 <span data-ttu-id="97318-1714">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1714">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1715">次のコード例では、<xref:System.Windows.Forms.Control.KeyDown>イベントをコントロールに入力した文字の種類を判断します。</span><span class="sxs-lookup"><span data-stu-id="97318-1715">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
 
 
 <span data-ttu-id="97318-1716">次のコード例は、発生の順序を示します、 <xref:System.Windows.Forms.Control.KeyDown>、 <xref:System.Windows.Forms.Control.KeyUp>、<xref:System.Windows.Forms.Control.KeyPress>イベント、およびそれらのイベント ハンドラーを登録する方法。</span><span class="sxs-lookup"><span data-stu-id="97318-1716">The following code example demonstrates the order of raising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp>, <xref:System.Windows.Forms.Control.KeyPress> events, and how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyDown#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyDown#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
        <altmember cref="T:System.Windows.Forms.KeyEventHandler" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.PreviewKeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyPress">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyPressEventHandler KeyPress;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyPressEventHandler KeyPress" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyPress As KeyPressEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyPressEventHandler ^ KeyPress;" />
      <MemberSignature Language="F#" Value="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " Usage="member this.KeyPress : System.Windows.Forms.KeyPressEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyPressEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1717">コントロールにフォーカスがあるときに、文字、</span><span class="sxs-lookup"><span data-stu-id="97318-1717">Occurs when a character.</span></span> <span data-ttu-id="97318-1718">スペース、または Backspace キーが押された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1718">space or backspace key is pressed while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1719">重要なイベントは、次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1719">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="97318-1720"><xref:System.Windows.Forms.Control.KeyPress>領域とバック スペース以外の非文字キー イベントは発生しません。 ただし、非文字キーを生成しないでください、<xref:System.Windows.Forms.Control.KeyDown>と<xref:System.Windows.Forms.Control.KeyUp>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1720">The <xref:System.Windows.Forms.Control.KeyPress> event is not raised by non-character keys other than space and backspace; however, the non-character keys do raise the <xref:System.Windows.Forms.Control.KeyDown> and <xref:System.Windows.Forms.Control.KeyUp> events.</span></span>  
  
 <span data-ttu-id="97318-1721">使用して、<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A>サンプル キーストロークを実行時にし、使用または一般的なキーボード操作のサブセットを変更するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1721">Use the <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.</span></span>  
  
 <span data-ttu-id="97318-1722">フォーム レベルでのみ、キーボード イベントを処理し、キーボード イベントを受信するには、他のコントロール、設定、<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType>フォームのプロパティ<xref:System.Windows.Forms.Control.KeyPress>イベント処理メソッドを`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1722">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span>  
  
 <span data-ttu-id="97318-1723">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1723">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1724">次のコード例では、<xref:System.Windows.Forms.Control.KeyPress>文字がコントロールに入力するを防ぐためにイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1724">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
 
 
  <span data-ttu-id="97318-1725">次のコード例は、増大の順序を示します、 <xref:System.Windows.Forms.Control.KeyDown>、<xref:System.Windows.Forms.Control.KeyUp>と<xref:System.Windows.Forms.Control.KeyPress>イベント、それらのイベント ハンドラーを登録する方法もします。</span><span class="sxs-lookup"><span data-stu-id="97318-1725">The following code example demonstrates the order of rising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyPress> events, also how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyPress#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyPress#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="KeyUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.KeyEventHandler KeyUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.KeyEventHandler KeyUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.KeyUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event KeyUp As KeyEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::KeyEventHandler ^ KeyUp;" />
      <MemberSignature Language="F#" Value="member this.KeyUp : System.Windows.Forms.KeyEventHandler " Usage="member this.KeyUp : System.Windows.Forms.KeyEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.KeyEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1726">コントロールにフォーカスがあるときにキーが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1726">Occurs when a key is released while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1727">重要なイベントは、次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1727">Key events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.KeyDown>  
  
2.  <xref:System.Windows.Forms.Control.KeyPress>  
  
3.  <xref:System.Windows.Forms.Control.KeyUp>  
  
 <span data-ttu-id="97318-1728">フォーム レベルでのみ、キーボード イベントを処理し、キーボード イベントを受信するには、他のコントロール、設定、<xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType>フォームのプロパティ<xref:System.Windows.Forms.Control.KeyPress>イベント処理メソッドを`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1728">To handle keyboard events only at the form level and not enable other controls to receive keyboard events, set the <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A?displayProperty=nameWithType> property in your form's <xref:System.Windows.Forms.Control.KeyPress> event-handling method to `true`.</span></span> <span data-ttu-id="97318-1729">タブ、返された場合、esc キー、および矢印キーなどの特定のキーがコントロールによって自動的に処理されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1729">Certain keys, such as the TAB, RETURN, ESC, and arrow keys are handled by controls automatically.</span></span> <span data-ttu-id="97318-1730">これらのキーを生成する、<xref:System.Windows.Forms.Control.KeyUp>イベントをオーバーライドする必要がある、<xref:System.Windows.Forms.Control.IsInputKey%2A>フォーム上の各コントロールのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1730">To have these keys raise the <xref:System.Windows.Forms.Control.KeyUp> event, you must override the <xref:System.Windows.Forms.Control.IsInputKey%2A> method in each control on your form.</span></span> <span data-ttu-id="97318-1731">コードのオーバーライドを<xref:System.Windows.Forms.Control.IsInputKey%2A>が押されたかどうか、特殊なキーのいずれかを決定し、値を返す必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-1731">The code for the override of <xref:System.Windows.Forms.Control.IsInputKey%2A> would need to determine if one of the special keys is pressed and return a value of `true`.</span></span>  
  
 <span data-ttu-id="97318-1732">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1732">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1733">次のコード例では、<xref:System.Windows.Forms.Control.KeyUp>イベントを<xref:System.Windows.Forms.Help>をユーザーにポップアップ スタイルのヘルプを表示するクラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1733">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
 
 
  <span data-ttu-id="97318-1734">次のコード例は、増大の順序を示します、 <xref:System.Windows.Forms.Control.KeyDown>、<xref:System.Windows.Forms.Control.KeyUp>と<xref:System.Windows.Forms.Control.KeyPress>イベント、それらのイベント ハンドラーを登録する方法もします。</span><span class="sxs-lookup"><span data-stu-id="97318-1734">The following code example demonstrates the order of rising the <xref:System.Windows.Forms.Control.KeyDown>, <xref:System.Windows.Forms.Control.KeyUp> and <xref:System.Windows.Forms.Control.KeyPress> events, also how to register event handlers on them.</span></span>  
 
 [!code-csharp[Control.KeyUp#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form2.cs#1)]
 [!code-vb[Control.KeyUp#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/Form2.vb#1)]
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LayoutEventHandler Layout;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LayoutEventHandler Layout" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Layout" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Layout As LayoutEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LayoutEventHandler ^ Layout;" />
      <MemberSignature Language="F#" Value="member this.Layout : System.Windows.Forms.LayoutEventHandler " Usage="member this.Layout : System.Windows.Forms.LayoutEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LayoutEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1735">コントロールの子コントロールの位置を変更する必要があるときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1735">Occurs when a control should reposition its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1736"><xref:System.Windows.Forms.Control.Layout>イベントは、子コントロールが追加または削除、コントロールの変更、およびその他の変更が発生すると、境界は、コントロールのレイアウトに影響を受けた場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1736">The <xref:System.Windows.Forms.Control.Layout> event occurs when child controls are added or removed, when the bounds of the control changes, and when other changes occur that can affect the layout of the control.</span></span> <span data-ttu-id="97318-1737">使用して、レイアウト イベントを抑制することができます、<xref:System.Windows.Forms.Control.SuspendLayout%2A>と<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1737">The layout event can be suppressed using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span> <span data-ttu-id="97318-1738">レイアウトを中断するには、それぞれの変更、レイアウトを実行することがなくコントロールで複数のアクションを実行することができます。</span><span class="sxs-lookup"><span data-stu-id="97318-1738">Suspending layout enables you to perform multiple actions on a control without having to perform a layout for each change.</span></span> <span data-ttu-id="97318-1739">たとえば、サイズを変更して、コントロールを移動する場合は、各操作が発生する<xref:System.Windows.Forms.Control.Layout>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1739">For example, if you resize and move a control, each operation would raise a <xref:System.Windows.Forms.Control.Layout> event.</span></span>  
  
 <span data-ttu-id="97318-1740">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1740">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1741">次のコード例のセンター、<xref:System.Windows.Forms.Form>の画面で、<xref:System.Windows.Forms.Control.Layout>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1741">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="97318-1742">これにより、ユーザーがサイズを変更中央フォームが保持されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1742">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="97318-1743">この例では、作成済みである必要があります、<xref:System.Windows.Forms.Form>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1743">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
      </Docs>
    </Member>
    <Member MemberName="LayoutEngine">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.Layout.LayoutEngine LayoutEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Layout.LayoutEngine LayoutEngine" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.LayoutEngine" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LayoutEngine As LayoutEngine" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::Layout::LayoutEngine ^ LayoutEngine { System::Windows::Forms::Layout::LayoutEngine ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LayoutEngine : System.Windows.Forms.Layout.LayoutEngine" Usage="System.Windows.Forms.Control.LayoutEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Layout.LayoutEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1744">コントロールのレイアウト エンジンのキャッシュ インスタンスを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1744">Gets a cached instance of the control's layout engine.</span></span></summary>
        <value><span data-ttu-id="97318-1745">コントロールの内容の <see cref="T:System.Windows.Forms.Layout.LayoutEngine" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1745">The <see cref="T:System.Windows.Forms.Layout.LayoutEngine" /> for the control's contents.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1746"><xref:System.Windows.Forms.Control.LayoutEngine%2A>プロパティ、コントロール自体ではなく、コントロールの子のレイアウト エンジンを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1746">The <xref:System.Windows.Forms.Control.LayoutEngine%2A> property gets the layout engine for the control's children rather than for the control itself.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Layout.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public event EventHandler Leave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Leave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Leave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Leave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Leave;" />
      <MemberSignature Language="F#" Value="member this.Leave : EventHandler " Usage="member this.Leave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1747">入力フォーカスがコントロールを離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1747">Occurs when the input focus leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1748">呼び出すことによってキーボード (タブ、shift キーを押しながら TAB となど) を使用して、フォーカスを変更すると、<xref:System.Windows.Forms.Control.Select%2A>または<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド、または設定して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>プロパティを現在のフォームは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1748">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="97318-1749">フォーカスを変更すると、マウスを使用して、または呼び出すことによって、<xref:System.Windows.Forms.Control.Focus%2A>メソッドでは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1749">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="97318-1750">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1750">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1751"><xref:System.Windows.Forms.Control.Enter>と<xref:System.Windows.Forms.Control.Leave>によってイベントが抑制されます、<xref:System.Windows.Forms.Form>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1751">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are suppressed by the <xref:System.Windows.Forms.Form> class.</span></span> <span data-ttu-id="97318-1752">同等のイベント、<xref:System.Windows.Forms.Form>クラスは、<xref:System.Windows.Forms.Form.Activated>と<xref:System.Windows.Forms.Form.Deactivate>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1752">The equivalent events in the <xref:System.Windows.Forms.Form> class are the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="97318-1753"><xref:System.Windows.Forms.Control.Enter>と<xref:System.Windows.Forms.Control.Leave>イベントを階層し、適切なコントロールに到達するまで、親のチェーンを上下に伝播します。</span><span class="sxs-lookup"><span data-stu-id="97318-1753">The <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events are hierarchical and will cascade up and down the parent chain until the appropriate control is reached.</span></span> <span data-ttu-id="97318-1754">たとえば、ある場合、<xref:System.Windows.Forms.Form>の 2 つ<xref:System.Windows.Forms.GroupBox>コントロール、および各<xref:System.Windows.Forms.GroupBox>コントロールが 1 つ<xref:System.Windows.Forms.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1754">For example, assume you have a <xref:System.Windows.Forms.Form> with two <xref:System.Windows.Forms.GroupBox> controls, and each <xref:System.Windows.Forms.GroupBox> control has one <xref:System.Windows.Forms.TextBox> control.</span></span> <span data-ttu-id="97318-1755">1、カレットを移動するとき<xref:System.Windows.Forms.TextBox>、他の<xref:System.Windows.Forms.Control.Leave>のイベントは、<xref:System.Windows.Forms.TextBox>と<xref:System.Windows.Forms.GroupBox>と<xref:System.Windows.Forms.Control.Enter>イベントは、他の<xref:System.Windows.Forms.GroupBox>と<xref:System.Windows.Forms.TextBox>。</span><span class="sxs-lookup"><span data-stu-id="97318-1755">When the caret is moved from one <xref:System.Windows.Forms.TextBox> to the other, the <xref:System.Windows.Forms.Control.Leave> event is raised for the <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.GroupBox>, and the <xref:System.Windows.Forms.Control.Enter> event is raised for the other <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TextBox>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97318-1756">内からフォーカスを設定しないで、 <xref:System.Windows.Forms.Control.Enter>、 <xref:System.Windows.Forms.Control.GotFocus>、 <xref:System.Windows.Forms.Control.Leave>、 <xref:System.Windows.Forms.Control.LostFocus>、 <xref:System.Windows.Forms.Control.Validating>、または<xref:System.Windows.Forms.Control.Validated>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1756">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="97318-1757">これには、アプリケーションまたはオペレーティング システムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1757">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="97318-1758">詳細については、次を参照してください。、 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-1758">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="97318-1759">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1759">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1760">次のコード例では、<xref:System.Windows.Forms.Control.Leave>コントロールを元の状態にリセットするイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1760">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="Left">
      <MemberSignature Language="C#" Value="public int Left { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Left" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Left" />
      <MemberSignature Language="VB.NET" Value="Public Property Left As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Left { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Left : int with get, set" Usage="System.Windows.Forms.Control.Left" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1761">コントロールの左端とコンテナーのクライアント領域の左端の間の距離をピクセルで取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1761">Gets or sets the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="97318-1762"><see cref="T:System.Int32" /> は、コントロールの左端とコンテナーのクライアント領域の左端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1762">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the left edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1763"><xref:System.Windows.Forms.Control.Left%2A>プロパティの値が等しく、<xref:System.Drawing.Point.X%2A?displayProperty=nameWithType>のプロパティ、<xref:System.Windows.Forms.Control.Location%2A>コントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-1763">The <xref:System.Windows.Forms.Control.Left%2A> property value is equivalent to the <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="97318-1764">加えられた変更、<xref:System.Windows.Forms.Control.Width%2A>と<xref:System.Windows.Forms.Control.Left%2A>プロパティ値が原因、<xref:System.Windows.Forms.Control.Right%2A>を変更するコントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-1764">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1765">次のコード例では、3 つを作成<xref:System.Windows.Forms.Button>フォームのコントロールし、さまざまなサイズに関連して、場所に関連するプロパティを使用して、そのサイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1765">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="97318-1766">この例が必要です、<xref:System.Windows.Forms.Form>少なくとも 300 ピクセルの高さ、幅を持ちます。</span><span class="sxs-lookup"><span data-stu-id="97318-1766">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.X" />
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Location" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Location" />
      <MemberSignature Language="VB.NET" Value="Public Property Location As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Location { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Location : System.Drawing.Point with get, set" Usage="System.Windows.Forms.Control.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1767">コンテナーの左上隅に対する相対座標として、コントロールの左上隅の座標を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1767">Gets or sets the coordinates of the upper-left corner of the control relative to the upper-left corner of its container.</span></span></summary>
        <value><span data-ttu-id="97318-1768">コントロールの左上隅をコンテナーの左上隅に対して相対的に表す <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1768">The <see cref="T:System.Drawing.Point" /> that represents the upper-left corner of the control relative to the upper-left corner of its container.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1769"><xref:System.Drawing.Point>クラスは、値型 (`Structure` Visual basic で`struct`Visual c# で)、値、つまり、コントロールの左上隅の点のコピーを返すプロパティにアクセスすることが返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1769">Because the <xref:System.Drawing.Point> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the upper-left point of the control.</span></span> <span data-ttu-id="97318-1770">そのため、調整、<xref:System.Drawing.Point.X%2A>または<xref:System.Drawing.Point.Y%2A>のプロパティ、<xref:System.Drawing.Point>これから返されるプロパティには影響は、 <xref:System.Windows.Forms.Control.Left%2A>、 <xref:System.Windows.Forms.Control.Right%2A>、 <xref:System.Windows.Forms.Control.Top%2A>、または<xref:System.Windows.Forms.Control.Bottom%2A>コントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-1770">So, adjusting the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Drawing.Point> returned from this property will not affect the <xref:System.Windows.Forms.Control.Left%2A>, <xref:System.Windows.Forms.Control.Right%2A>, <xref:System.Windows.Forms.Control.Top%2A>, or <xref:System.Windows.Forms.Control.Bottom%2A> property values of the control.</span></span> <span data-ttu-id="97318-1771">これらのプロパティを個別に、各プロパティ値を設定したり、設定を調整する、<xref:System.Windows.Forms.Control.Location%2A>プロパティを新しい<xref:System.Drawing.Point>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1771">To adjust these properties set each property value individually, or set the <xref:System.Windows.Forms.Control.Location%2A> property with a new <xref:System.Drawing.Point>.</span></span>  
  
 <span data-ttu-id="97318-1772">場合、<xref:System.Windows.Forms.Control>は、 <xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Control.Location%2A>プロパティの値の左上隅を表す、<xref:System.Windows.Forms.Form>画面座標。</span><span class="sxs-lookup"><span data-stu-id="97318-1772">If the <xref:System.Windows.Forms.Control> is a <xref:System.Windows.Forms.Form>, the <xref:System.Windows.Forms.Control.Location%2A> property value represents the upper-left corner of the <xref:System.Windows.Forms.Form> in screen coordinates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1773">次のコード例を作成、<xref:System.Windows.Forms.GroupBox>および一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1773">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="97318-1774">例は、作成、<xref:System.Windows.Forms.TextBox>設定とその<xref:System.Windows.Forms.Control.Location%2A>グループ ボックス内で。</span><span class="sxs-lookup"><span data-stu-id="97318-1774">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="97318-1775">次に、設定、<xref:System.Windows.Forms.Control.Text%2A>フォームの上部に、グループ ボックス ドッキングし、グループ ボックスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1775">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="97318-1776">グループ ボックスを無効に設定して、最後に、<xref:System.Windows.Forms.Control.Enabled%2A>プロパティを`false`、それが原因で無効にするグループ ボックス内に含まれるすべてのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1776">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
      </Docs>
    </Member>
    <Member MemberName="LocationChanged">
      <MemberSignature Language="C#" Value="public event EventHandler LocationChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LocationChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LocationChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LocationChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LocationChanged;" />
      <MemberSignature Language="F#" Value="member this.LocationChanged : EventHandler " Usage="member this.LocationChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1777"><see cref="P:System.Windows.Forms.Control.Location" /> プロパティ値が変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1777">Occurs when the <see cref="P:System.Windows.Forms.Control.Location" /> property value has changed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1778">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Location%2A>プロパティを変更すると、プログラムの変更によって、または相互作用使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-1778">This event is raised if the <xref:System.Windows.Forms.Control.Location%2A> property is changed by either a programmatic modification or through interaction.</span></span>  
  
 <span data-ttu-id="97318-1779">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1779">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1780">次のコード例が発生、<xref:System.Windows.Forms.Control.LocationChanged>上のイベントを<xref:System.Windows.Forms.StatusStrip>フォームのサイズを変更するとします。</span><span class="sxs-lookup"><span data-stu-id="97318-1780">The following code example raises the <xref:System.Windows.Forms.Control.LocationChanged> event on a <xref:System.Windows.Forms.StatusStrip> when the form is resized.</span></span>  
  
 [!code-csharp[System.Windows.Forms.LocationChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.LocationChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.LocationChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public System.Drawing.Size LogicalToDeviceUnits (System.Drawing.Size value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Size LogicalToDeviceUnits(valuetype System.Drawing.Size value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalToDeviceUnits (value As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Size LogicalToDeviceUnits(System::Drawing::Size value);" />
      <MemberSignature Language="F#" Value="member this.LogicalToDeviceUnits : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.LogicalToDeviceUnits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Drawing.Size" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="97318-1781">拡大縮小するサイズ。</span><span class="sxs-lookup"><span data-stu-id="97318-1781">The size to be scaled.</span></span></param>
        <summary><span data-ttu-id="97318-1782">現在の DPI に合わせて拡大縮小し、幅と高さを最も近い整数値に丸めることで論理単位からデバイス単位にサイズを変換します。</span><span class="sxs-lookup"><span data-stu-id="97318-1782">Transforms a size from logical to device units by scaling it for the current DPI and rounding down to the nearest integer value for width and height.</span></span></summary>
        <returns><span data-ttu-id="97318-1783">拡大縮小されたサイズ。</span><span class="sxs-lookup"><span data-stu-id="97318-1783">The scaled size.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LogicalToDeviceUnits">
      <MemberSignature Language="C#" Value="public int LogicalToDeviceUnits (int value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 LogicalToDeviceUnits(int32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.LogicalToDeviceUnits(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function LogicalToDeviceUnits (value As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int LogicalToDeviceUnits(int value);" />
      <MemberSignature Language="F#" Value="member this.LogicalToDeviceUnits : int -&gt; int" Usage="control.LogicalToDeviceUnits value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="97318-1784">変換する論理値。</span><span class="sxs-lookup"><span data-stu-id="97318-1784">The Logical value to convert.</span></span></param>
        <summary><span data-ttu-id="97318-1785">論理 DPI 値をその同等 DeviceUnit DPI 値に変換します。</span><span class="sxs-lookup"><span data-stu-id="97318-1785">Converts a Logical DPI value to its equivalent DeviceUnit DPI value.</span></span></summary>
        <returns><span data-ttu-id="97318-1786">結果の DeviceUnit 値。</span><span class="sxs-lookup"><span data-stu-id="97318-1786">The resulting DeviceUnit value.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event EventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : EventHandler " Usage="member this.LostFocus : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1787">コントロールがフォーカスを失ったときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1787">Occurs when the control loses focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1788">呼び出すことによってキーボード (タブ、shift キーを押しながら TAB となど) を使用して、フォーカスを変更すると、<xref:System.Windows.Forms.Control.Select%2A>または<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド、または設定して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>プロパティを現在のフォームは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1788">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="97318-1789">フォーカスを変更すると、マウスを使用して、または呼び出すことによって、<xref:System.Windows.Forms.Control.Focus%2A>メソッドでは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1789">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="97318-1790">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1790">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="97318-1791">場合、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.ComponentModel.CancelEventArgs>に設定されている`true`で、<xref:System.Windows.Forms.Control.Validating>イベント デリゲート、後に通常発生するすべてのイベント、<xref:System.Windows.Forms.Control.Validating>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1791">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1792"><xref:System.Windows.Forms.Control.GotFocus>と<xref:System.Windows.Forms.Control.LostFocus>イベントは、低レベルのフォーカス イベント WM_KILLFOCUS と WM_SETFOCUS Windows メッセージに関連付けられています。</span><span class="sxs-lookup"><span data-stu-id="97318-1792">The <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are low-level focus events that are tied to the WM_KILLFOCUS and WM_SETFOCUS Windows messages.</span></span> <span data-ttu-id="97318-1793">通常、<xref:System.Windows.Forms.Control.GotFocus>と<xref:System.Windows.Forms.Control.LostFocus>イベントは、更新するときにのみ使用<xref:System.Windows.Forms.UICues>またはカスタム コントロールを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-1793">Typically, the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events are only used when updating <xref:System.Windows.Forms.UICues> or when writing custom controls.</span></span> <span data-ttu-id="97318-1794">代わりに、<xref:System.Windows.Forms.Control.Enter>と<xref:System.Windows.Forms.Control.Leave>を除くすべてのコントロールのイベントを使用する必要があります、<xref:System.Windows.Forms.Form>クラスを使用する、<xref:System.Windows.Forms.Form.Activated>と<xref:System.Windows.Forms.Form.Deactivate>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1794">Instead the <xref:System.Windows.Forms.Control.Enter> and <xref:System.Windows.Forms.Control.Leave> events should be used for all controls except the <xref:System.Windows.Forms.Form> class, which uses the <xref:System.Windows.Forms.Form.Activated> and <xref:System.Windows.Forms.Form.Deactivate> events.</span></span> <span data-ttu-id="97318-1795">詳細については、<xref:System.Windows.Forms.Control.GotFocus>と<xref:System.Windows.Forms.Control.LostFocus>イベントを参照してください、 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)と[WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-1795">For more information about the <xref:System.Windows.Forms.Control.GotFocus> and <xref:System.Windows.Forms.Control.LostFocus> events, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) and [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topics.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97318-1796">内からフォーカスを設定しないで、 <xref:System.Windows.Forms.Control.Enter>、 <xref:System.Windows.Forms.Control.GotFocus>、 <xref:System.Windows.Forms.Control.Leave>、 <xref:System.Windows.Forms.Control.LostFocus>、 <xref:System.Windows.Forms.Control.Validating>、または<xref:System.Windows.Forms.Control.Validated>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-1796">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="97318-1797">これには、アプリケーションまたはオペレーティング システムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1797">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="97318-1798">詳細については、次を参照してください。、 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-1798">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms646282\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="97318-1799">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1799">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1800">次のコード例では、TextBox1 のテキストを検証を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1800">The following code example demonstrates validating the text for TextBox1.</span></span> <span data-ttu-id="97318-1801">処理も示しています、<xref:System.Windows.Forms.Control.LostFocus>イベントを設定して、 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType> TextBox1 でテキストのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1801">It also demonstrates handling the <xref:System.Windows.Forms.Control.LostFocus> event by setting the <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A?displayProperty=nameWithType> property to the text in TextBox1.</span></span> <span data-ttu-id="97318-1802">使用しているコード例、<xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType>ファイル ダイアログ ボックスを開く前に、エラーをチェックするメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-1802">The code example used the <xref:System.Windows.Forms.ErrorProvider.GetError%2A?displayProperty=nameWithType> method to check for an error before opening the file dialog box.</span></span> <span data-ttu-id="97318-1803">この例を実行するには、含まれているフォームに次のコードを貼り付けます、<xref:System.Windows.Forms.TextBox>という名前`TextBox1`、<xref:System.Windows.Forms.OpenFileDialog>という名前`OpenFileDialog1`、<xref:System.Windows.Forms.Button>という名前`Button1`、および<xref:System.Windows.Forms.ErrorProvider>という`ErrorProvider1`。</span><span class="sxs-lookup"><span data-stu-id="97318-1803">To run this example, paste the following code into a form containing a <xref:System.Windows.Forms.TextBox> named `TextBox1`, an <xref:System.Windows.Forms.OpenFileDialog> named `OpenFileDialog1`, a <xref:System.Windows.Forms.Button> named `Button1`, and an <xref:System.Windows.Forms.ErrorProvider> named `ErrorProvider1`.</span></span> <span data-ttu-id="97318-1804">すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-1804">Ensure all events are associated with their event handlers.</span></span>  
  
 [!code-cpp[System.Windows.Forms.FileDialog#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#2)]
 [!code-csharp[System.Windows.Forms.FileDialog#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#2)]
 [!code-vb[System.Windows.Forms.FileDialog#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
        <altmember cref="E:System.Windows.Forms.Form.Deactivate" />
      </Docs>
    </Member>
    <Member MemberName="Margin">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Margin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Margin" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Margin" />
      <MemberSignature Language="VB.NET" Value="Public Property Margin As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Margin { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Margin : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Margin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1805">コントロール間の空白を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1805">Gets or sets the space between controls.</span></span></summary>
        <value><span data-ttu-id="97318-1806">コントロール間の空白を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1806">A <see cref="T:System.Windows.Forms.Padding" /> representing the space between controls.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1807">コントロールの既定値が表示される<xref:System.Windows.Forms.Control.Margin%2A>Windows ユーザー インターフェイス ガイドラインの近くにある程度であります。</span><span class="sxs-lookup"><span data-stu-id="97318-1807">Controls receive default values for <xref:System.Windows.Forms.Control.Margin%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="97318-1808">いくつかの調整は、特定のアプリケーションに必要なある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1808">Some adjustments might still be necessary for particular applications.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1809">設定、<xref:System.Windows.Forms.Control.Margin%2A>ドッキングされたコントロールのプロパティは、そのコンテナーの端からの距離に影響を与えません。</span><span class="sxs-lookup"><span data-stu-id="97318-1809">Setting the <xref:System.Windows.Forms.Control.Margin%2A> property on a docked control has no effect on the distance of the control from the edges of its container.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarginChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MarginChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MarginChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MarginChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MarginChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MarginChanged;" />
      <MemberSignature Language="F#" Value="member this.MarginChanged : EventHandler " Usage="member this.MarginChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1810">コントロールのマージンが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1810">Occurs when the control's margin changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1811">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1811">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1812">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1812">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-1813">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.MarginChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1813">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span> <span data-ttu-id="97318-1814">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-1814">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-1815">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1815">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-1816">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1816">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-1817">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.MarginChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1817">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MarginChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#21)]
 [!code-vb[System.Windows.Forms.EventExamples#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#21)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MaximumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MaximumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MaximumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MaximumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MaximumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MaximumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.AmbientValue(typeof(System.Drawing.Size), "0, 0")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1818"><see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> が指定できる上限のサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1818">Gets or sets the size that is the upper limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="97318-1819">四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</span><span class="sxs-lookup"><span data-stu-id="97318-1819">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.Size MinimumSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size MinimumSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MinimumSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property MinimumSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Size MinimumSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.MinimumSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.MinimumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1820"><see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> が指定できる下限のサイズを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1820">Gets or sets the size that is the lower limit that <see cref="M:System.Windows.Forms.Control.GetPreferredSize(System.Drawing.Size)" /> can specify.</span></span></summary>
        <value><span data-ttu-id="97318-1821">四角形の幅と高さを表す、順序を付与した <see cref="T:System.Drawing.Size" /> 型のペア。</span><span class="sxs-lookup"><span data-stu-id="97318-1821">An ordered pair of type <see cref="T:System.Drawing.Size" /> representing the width and height of a rectangle.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModifierKeys">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Keys ModifierKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.Keys ModifierKeys" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ModifierKeys" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property ModifierKeys As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::Keys ModifierKeys { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.ModifierKeys : System.Windows.Forms.Keys" Usage="System.Windows.Forms.Control.ModifierKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1822">どの修飾子キー (Shift キー、Ctrl キーおよび Alt キー) が押された状態であるかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1822">Gets a value indicating which of the modifier keys (SHIFT, CTRL, and ALT) is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="97318-1823"><see cref="T:System.Windows.Forms.Keys" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="97318-1823">A bitwise combination of the <see cref="T:System.Windows.Forms.Keys" /> values.</span></span> <span data-ttu-id="97318-1824">既定値は <see cref="F:System.Windows.Forms.Keys.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-1824">The default is <see cref="F:System.Windows.Forms.Keys.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-1825">次のコード例では、ボタンがクリックされたときに、CTRL キーが押されたときにボタンを非表示にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1825">The following code example hides a button when the CTRL key is pressed while the button is clicked.</span></span> <span data-ttu-id="97318-1826">この例が必要です、<xref:System.Windows.Forms.Button>という名前の`button1`上、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1826">This example requires that you have a <xref:System.Windows.Forms.Button> named `button1` on a <xref:System.Windows.Forms.Form>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members4#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#2)]
 [!code-vb[Windows.Forms.Control Members4#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Keys" />
      </Docs>
    </Member>
    <Member MemberName="MouseButtons">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.MouseButtons MouseButtons { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.MouseButtons MouseButtons" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MouseButtons" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MouseButtons As MouseButtons" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::MouseButtons MouseButtons { System::Windows::Forms::MouseButtons get(); };" />
      <MemberSignature Language="F#" Value="member this.MouseButtons : System.Windows.Forms.MouseButtons" Usage="System.Windows.Forms.Control.MouseButtons" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseButtons</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1827">どのマウス ボタンが押されている状態であるかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1827">Gets a value indicating which of the mouse buttons is in a pressed state.</span></span></summary>
        <value><span data-ttu-id="97318-1828"><see cref="T:System.Windows.Forms.MouseButtons" /> 列挙値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="97318-1828">A bitwise combination of the <see cref="T:System.Windows.Forms.MouseButtons" /> enumeration values.</span></span> <span data-ttu-id="97318-1829">既定値は <see cref="F:System.Windows.Forms.MouseButtons.None" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-1829">The default is <see cref="F:System.Windows.Forms.MouseButtons.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-1830">次のコード例は、使用する方法を示します、 <xref:System.Windows.Forms.Control.BackColor%2A>、 <xref:System.Windows.Forms.Control.RectangleToScreen%2A>、 <xref:System.Windows.Forms.Control.PointToScreen%2A>、 <xref:System.Windows.Forms.Control.MouseButtons%2A>、 <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>、および<xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType>メンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-1830">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="97318-1831">例を実行するには、Form1 という形式で次のコードを貼り付けいくつかのコントロールを格納しています。</span><span class="sxs-lookup"><span data-stu-id="97318-1831">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="97318-1832">この例では、する必要があります、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseMove>、および<xref:System.Windows.Forms.Control.MouseUp>イベントは、この例で定義されているイベント ハンドラーに接続しています。</span><span class="sxs-lookup"><span data-stu-id="97318-1832">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MouseButtons" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseCaptureChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MouseCaptureChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseCaptureChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseCaptureChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseCaptureChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseCaptureChanged;" />
      <MemberSignature Language="F#" Value="member this.MouseCaptureChanged : EventHandler " Usage="member this.MouseCaptureChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1833">コントロールがマウスのキャプチャを失うと発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1833">Occurs when the control loses mouse capture.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1834">まれなシナリオでは、予期しない入力を検出する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1834">In rare scenarios, you might need to detect unexpected input.</span></span> <span data-ttu-id="97318-1835">たとえば、次のシナリオを検討してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1835">For example, consider the following scenarios.</span></span>  
  
-   <span data-ttu-id="97318-1836">マウス操作中には、ユーザーは、Windows キーまたは ctrl キーを押しながら esc キーを押して、[スタート] メニューを開きます。</span><span class="sxs-lookup"><span data-stu-id="97318-1836">During a mouse operation, the user opens the Start menu by pressing the Windows key or CTRL+ESC.</span></span>  
  
-   <span data-ttu-id="97318-1837">ユーザーは、マウス操作中に、ALT + TAB キーを押して別のプログラムに切り替わります。</span><span class="sxs-lookup"><span data-stu-id="97318-1837">During a mouse operation, the user switches to another program by pressing ALT+TAB.</span></span>  
  
-   <span data-ttu-id="97318-1838">マウス操作中に、別のプログラムは、ウィンドウまたは現在のアプリケーションからフォーカスを受け取るメッセージ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1838">During a mouse operation, another program displays a window or a message box that takes focus away from the current application.</span></span>  
  
 <span data-ttu-id="97318-1839">クリックし、フォームまたはコントロールを上にマウス ポインターを保持しているマウス操作を含めることができますか、操作をドラッグ、マウスを実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-1839">Mouse operations can include clicking and holding the mouse on a form or a control, or performing a mouse drag operation.</span></span> <span data-ttu-id="97318-1840">フォームを検出する、またはコントロールは、これらのマウス キャプチャを失った場合、関連の予期しないシナリオを使用できます、<xref:System.Windows.Forms.Control.MouseCaptureChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1840">If you have to detect when a form or a control loses mouse capture for these and related unexpected scenarios, you can use the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1841">次のコード例に示します、<xref:System.Windows.Forms.Control.MouseCaptureChanged>イベントを<xref:System.Windows.Forms.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1841">The following code example demonstrates the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event for a <xref:System.Windows.Forms.Button> control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.MouseCaptureChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.mousecapturechanged/vb/form1.vb#1)]  
  
 <span data-ttu-id="97318-1842">この例をテストするには、f5 キーを押して、デバッガーで実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-1842">To test this example, run it in the debugger by pressing F5.</span></span> <span data-ttu-id="97318-1843">開く、**出力**Visual Studio のウィンドウにイベントが発生した場合に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-1843">Open the **Output** window in Visual Studio so that you can see when events are raised.</span></span> <span data-ttu-id="97318-1844">をクリックして、<xref:System.Windows.Forms.Button>し、次の出力に注意してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1844">Click the <xref:System.Windows.Forms.Button> and notice the following output.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseUp`  
  
 `button1_MouseCaptureChanged`  
  
 <span data-ttu-id="97318-1845">ここで、 をクリックしマウスの左ボタンを押したまま、<xref:System.Windows.Forms.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-1845">Now, click and hold the left mouse button on the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="97318-1846">まだマウスをクリックして、別のプログラムに切り替えるには、ALT + TAB キーを押します。</span><span class="sxs-lookup"><span data-stu-id="97318-1846">While still clicking the mouse, press ALT+TAB to switch to another program.</span></span> <span data-ttu-id="97318-1847">注意、<xref:System.Windows.Forms.Control.MouseCaptureChanged>可能性のあるこのシナリオを処理できるようにイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1847">Notice that the <xref:System.Windows.Forms.Control.MouseCaptureChanged> event is raised enabling you to potentially handle this scenario.</span></span> <span data-ttu-id="97318-1848">自分の操作によって、<xref:System.Windows.Forms.Control.MouseUp>イベントが発生しなくなります。</span><span class="sxs-lookup"><span data-stu-id="97318-1848">Depending on your actions, the <xref:System.Windows.Forms.Control.MouseUp> event might not be raised.</span></span> <span data-ttu-id="97318-1849">このテストは、Windows キーまたは ctrl キーを押しながら esc キーを試すこともできます。</span><span class="sxs-lookup"><span data-stu-id="97318-1849">You can also try this test with the Windows key or CTRL+ESC.</span></span>  
  
 `button1_MouseDown`  
  
 `button1_MouseCaptureChanged`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberSignature Language="F#" Value="member this.MouseClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1850">マウスでコントロールをクリックしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1850">Occurs when the control is clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1851">コントロール上では、通常、カーソルとマウス ボタンを押すと、次の一連のコントロールからのイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1851">Depressing a mouse button when the cursor is over a control typically raises the following series of events from the control:</span></span>  
  
1.  <span data-ttu-id="97318-1852"><xref:System.Windows.Forms.Control.MouseDown> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1852"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="97318-1853"><xref:System.Windows.Forms.Control.Click> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1853"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="97318-1854"><xref:System.Windows.Forms.Control.MouseClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1854"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="97318-1855"><xref:System.Windows.Forms.Control.MouseUp> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1855"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="97318-1856">これを行うには、コントロールのクラスでさまざまなイベントを無効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="97318-1856">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
 <span data-ttu-id="97318-1857">2 つの単一のユーザーのオペレーティング システムでは、マウスの設定によって決定される短い時間、間隔でが生成されますが発生したクリック、 <xref:System.Windows.Forms.Control.MouseDoubleClick> 、2 つ目ではなくイベント<xref:System.Windows.Forms.Control.MouseClick>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1857">Two single clicks that occur close enough in time, as determined by the mouse settings of the user's operating system, will generate a <xref:System.Windows.Forms.Control.MouseDoubleClick> event instead of the second <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97318-1858"><xref:System.Windows.Forms.Control.Click> イベントは、コントロールの論理的に上位レベルのイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1858"><xref:System.Windows.Forms.Control.Click> events are logically higher-level events of a control.</span></span> <span data-ttu-id="97318-1859">このイベントは、コントロールにフォーカスがある場合は、ENTER キーを押すなどその他のアクションによって発生する多くの場合は。</span><span class="sxs-lookup"><span data-stu-id="97318-1859">They are often raised by other actions, such as pressing the ENTER key when the control has focus.</span></span>  
  
 <span data-ttu-id="97318-1860">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1860">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1861">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1861">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-1862">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.MouseClick>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1862">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span> <span data-ttu-id="97318-1863">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-1863">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-1864">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1864">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-1865">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1865">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-1866">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.MouseClick>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1866">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#54](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#54)]
 [!code-vb[System.Windows.Forms.EventExamples#54](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#54)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDoubleClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1867">マウスでコントロールをダブルクリックしたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1867">Occurs when the control is double clicked by the mouse.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1868"><xref:System.Windows.Forms.Control.MouseDoubleClick>コントロールの上にカーソルがあるときに、ユーザーが立て続けに 2 回のマウスのボタン イベントは発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1868">The <xref:System.Windows.Forms.Control.MouseDoubleClick> event occurs when the user depresses a mouse button twice in quick succession when the cursor is over the control.</span></span> <span data-ttu-id="97318-1869">ダブルクリックを 2 回のクリックを 1 つを区別する時間間隔については、ユーザーのオペレーティング システムのマウス設定によって決まります。</span><span class="sxs-lookup"><span data-stu-id="97318-1869">The time interval that separates two single clicks from a double-click is determined by the mouse settings of the user's operating system.</span></span>  
  
 <span data-ttu-id="97318-1870">このようなユーザー操作が発生すると、コントロールによって次の一連のイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1870">The following series of events is raised by the control when such a user action takes place:</span></span>  
  
1.  <span data-ttu-id="97318-1871"><xref:System.Windows.Forms.Control.MouseDown> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1871"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
2.  <span data-ttu-id="97318-1872"><xref:System.Windows.Forms.Control.Click> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1872"><xref:System.Windows.Forms.Control.Click> event.</span></span>  
  
3.  <span data-ttu-id="97318-1873"><xref:System.Windows.Forms.Control.MouseClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1873"><xref:System.Windows.Forms.Control.MouseClick> event.</span></span>  
  
4.  <span data-ttu-id="97318-1874"><xref:System.Windows.Forms.Control.MouseUp> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1874"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
5.  <span data-ttu-id="97318-1875"><xref:System.Windows.Forms.Control.MouseDown> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1875"><xref:System.Windows.Forms.Control.MouseDown> event.</span></span>  
  
6.  <span data-ttu-id="97318-1876"><xref:System.Windows.Forms.Control.DoubleClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1876"><xref:System.Windows.Forms.Control.DoubleClick> event.</span></span>  
  
7.  <span data-ttu-id="97318-1877"><xref:System.Windows.Forms.Control.MouseDoubleClick> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1877"><xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
8.  <span data-ttu-id="97318-1878"><xref:System.Windows.Forms.Control.MouseUp> イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1878"><xref:System.Windows.Forms.Control.MouseUp> event.</span></span>  
  
 <span data-ttu-id="97318-1879">これを行うには、コントロールのクラスでさまざまなイベントを無効にすることはできません。</span><span class="sxs-lookup"><span data-stu-id="97318-1879">For this to occur, the various events cannot be disabled in the control's class.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="97318-1880"><xref:System.Windows.Forms.Control.DoubleClick> イベントは、コントロールの論理的に上位レベルのイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1880"><xref:System.Windows.Forms.Control.DoubleClick> events are logically higher-level events of a control.</span></span> <span data-ttu-id="97318-1881">これらは、ショートカット キーの組み合わせなどの他のユーザー操作によって発生可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1881">They may be raised by other user actions, such as shortcut key combinations.</span></span>  
  
 <span data-ttu-id="97318-1882">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1882">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1883">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1883">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-1884">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.MouseDoubleClick>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1884">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span> <span data-ttu-id="97318-1885">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-1885">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-1886">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1886">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-1887">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1887">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-1888">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.MouseDoubleClick>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1888">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.MouseDoubleClick> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#55](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#55)]
 [!code-vb[System.Windows.Forms.EventExamples#55](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#55)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
        <altmember cref="E:System.Windows.Forms.Control.Click" />
        <altmember cref="E:System.Windows.Forms.Control.MouseDoubleClick" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDown As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDown;" />
      <MemberSignature Language="F#" Value="member this.MouseDown : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDown : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1889">マウス ポインターがコントロール上にあり、マウス ボタンがクリックされると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1889">Occurs when the mouse pointer is over the control and a mouse button is pressed.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1890">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1890">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1891">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1891">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-1892">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1892">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-1893">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1893">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-1894">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1894">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1895">次のコード例に示しますマウスのパスを描画するためにさまざまなマウス イベントを使用して、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1895">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-1896">線分を追加、<xref:System.Drawing.Drawing2D.GraphicsPath>各<xref:System.Windows.Forms.Control.MouseMove>と<xref:System.Windows.Forms.Control.MouseDown>発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1896">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="97318-1897">グラフィックスを更新する、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドが呼び出されます、<xref:System.Windows.Forms.Panel>各`MouseDown`と`MouseUp`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1897">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="97318-1898">さらに、グラフィック パスがときに上下にスクロールされる基準、<xref:System.Windows.Forms.Control.MouseWheel>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1898">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="97318-1899">などの他のマウス イベント、 <xref:System.Windows.Forms.Control.MouseHover>、画面も識別されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1899">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="97318-1900">マウスの詳細については、画面に表示することも、<xref:System.Windows.Forms.SystemInformation>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1900">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseClick" />
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseEnter">
      <MemberSignature Language="C#" Value="public event EventHandler MouseEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseEnter" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseEnter" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseEnter As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseEnter;" />
      <MemberSignature Language="F#" Value="member this.MouseEnter : EventHandler " Usage="member this.MouseEnter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1901">マウス ポインターによってコントロールが入力されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1901">Occurs when the mouse pointer enters the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1902">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1902">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1903">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1903">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-1904">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1904">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-1905">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1905">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-1906">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1906">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1907">次のコード例に示しますマウスのパスを描画するためにさまざまなマウス イベントを使用して、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1907">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-1908">線分を追加、<xref:System.Drawing.Drawing2D.GraphicsPath>各<xref:System.Windows.Forms.Control.MouseMove>と<xref:System.Windows.Forms.Control.MouseDown>発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1908">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="97318-1909">グラフィックスを更新する、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドが呼び出されます、<xref:System.Windows.Forms.Panel>各`MouseDown`と`MouseUp`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1909">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="97318-1910">さらに、グラフィック パスがときに上下にスクロールされる基準、<xref:System.Windows.Forms.Control.MouseWheel>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1910">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="97318-1911">などの他のマウス イベント、 <xref:System.Windows.Forms.Control.MouseHover>、画面も識別されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1911">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="97318-1912">マウスの詳細については、画面に表示することも、<xref:System.Windows.Forms.SystemInformation>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1912">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseHover">
      <MemberSignature Language="C#" Value="public event EventHandler MouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseHover As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseHover;" />
      <MemberSignature Language="F#" Value="member this.MouseHover : EventHandler " Usage="member this.MouseHover : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1913">マウス ポインターをコントロールの上に重ねると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1913">Occurs when the mouse pointer rests on the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1914">一般的な使用<xref:System.Windows.Forms.Control.MouseHover>コントロール (「静止領域」) の周囲の指定した領域内のコントロールでマウスを置いたときに、ツール ヒントを表示することです。</span><span class="sxs-lookup"><span data-stu-id="97318-1914">A typical use of <xref:System.Windows.Forms.Control.MouseHover> is to display a tool tip when the mouse pauses on a control within a specified area around the control (the "hover rectangle").</span></span> <span data-ttu-id="97318-1915">このイベントが発生するのに必要な一時停止がでミリ秒単位で指定された、<xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1915">The pause required for this event to be raised is specified in milliseconds by the <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> property.</span></span>  
  
 <span data-ttu-id="97318-1916"><xref:System.Windows.Forms.Control.MouseHover>イベントが定義されているし、で検出された、<xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A>と<xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1916">The <xref:System.Windows.Forms.Control.MouseHover> event is defined and detected in connection with the <xref:System.Windows.Forms.SystemInformation.MouseHoverSize%2A> and <xref:System.Windows.Forms.SystemInformation.MouseHoverTime%2A> properties.</span></span>  
  
 <span data-ttu-id="97318-1917">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1917">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1918">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1918">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-1919">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1919">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-1920">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1920">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-1921">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1921">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1922">次のコード例に示しますマウスのパスを描画するためにさまざまなマウス イベントを使用して、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1922">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-1923">線分を追加、<xref:System.Drawing.Drawing2D.GraphicsPath>各<xref:System.Windows.Forms.Control.MouseMove>と<xref:System.Windows.Forms.Control.MouseDown>発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1923">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="97318-1924">グラフィックスを更新する、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドが呼び出されます、<xref:System.Windows.Forms.Panel>各`MouseDown`と`MouseUp`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1924">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="97318-1925">さらに、グラフィック パスがときに上下にスクロールされる基準、<xref:System.Windows.Forms.Control.MouseWheel>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1925">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="97318-1926">などの他のマウス イベント、 <xref:System.Windows.Forms.Control.MouseHover>、画面も識別されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1926">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="97318-1927">マウスの詳細については、画面に表示することも、<xref:System.Windows.Forms.SystemInformation>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1927">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.SystemInformation.MouseHoverTime" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseLeave">
      <MemberSignature Language="C#" Value="public event EventHandler MouseLeave;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MouseLeave" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseLeave" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseLeave As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MouseLeave;" />
      <MemberSignature Language="F#" Value="member this.MouseLeave : EventHandler " Usage="member this.MouseLeave : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1928">マウス ポインターがコントロールを離れると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1928">Occurs when the mouse pointer leaves the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1929">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1929">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1930">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1930">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-1931">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1931">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-1932">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1932">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-1933">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1933">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1934">次のコード例に示しますマウスのパスを描画するためにさまざまなマウス イベントを使用して、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1934">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-1935">線分を追加、<xref:System.Drawing.Drawing2D.GraphicsPath>各<xref:System.Windows.Forms.Control.MouseMove>と<xref:System.Windows.Forms.Control.MouseDown>発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1935">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="97318-1936">グラフィックスを更新する、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドが呼び出されます、<xref:System.Windows.Forms.Panel>各`MouseDown`と`MouseUp`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1936">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="97318-1937">さらに、グラフィック パスがときに上下にスクロールされる基準、<xref:System.Windows.Forms.Control.MouseWheel>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1937">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="97318-1938">などの他のマウス イベント、 <xref:System.Windows.Forms.Control.MouseHover>、画面も識別されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1938">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="97318-1939">マウスの詳細については、画面に表示することも、<xref:System.Windows.Forms.SystemInformation>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1939">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseMove">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseMove;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseMove" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseMove" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseMove As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseMove;" />
      <MemberSignature Language="F#" Value="member this.MouseMove : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseMove : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1940">マウス ポインターがコントロール上を移動すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1940">Occurs when the mouse pointer is moved over the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1941">典型的な使用<xref:System.Windows.Forms.Control.MouseMove>はコントロールの色を変更する、または発生したコントロールを囲む四角形を描画します。</span><span class="sxs-lookup"><span data-stu-id="97318-1941">Typical uses of <xref:System.Windows.Forms.Control.MouseMove> are to change the control's color or to paint a raised rectangle around the control.</span></span>  
  
 <span data-ttu-id="97318-1942">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1942">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1943">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1943">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-1944">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1944">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-1945">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1945">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-1946">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1946">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1947">次のコード例に示しますマウスのパスを描画するためにさまざまなマウス イベントを使用して、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1947">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-1948">線分を追加、<xref:System.Drawing.Drawing2D.GraphicsPath>各<xref:System.Windows.Forms.Control.MouseMove>と<xref:System.Windows.Forms.Control.MouseDown>発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1948">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="97318-1949">グラフィックスを更新する、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドが呼び出されます、<xref:System.Windows.Forms.Panel>各`MouseDown`と`MouseUp`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1949">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="97318-1950">さらに、グラフィック パスがときに上下にスクロールされる基準、<xref:System.Windows.Forms.Control.MouseWheel>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1950">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="97318-1951">などの他のマウス イベント、 <xref:System.Windows.Forms.Control.MouseHover>、画面も識別されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1951">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="97318-1952">マウスの詳細については、画面に表示することも、<xref:System.Windows.Forms.SystemInformation>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1952">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MousePosition">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point MousePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point MousePosition" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.MousePosition" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MousePosition As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Point MousePosition { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.MousePosition : System.Drawing.Point" Usage="System.Windows.Forms.Control.MousePosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1953">マウス カーソルの位置を画面座標で取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-1953">Gets the position of the mouse cursor in screen coordinates.</span></span></summary>
        <value><span data-ttu-id="97318-1954">画面の左上隅に対する相対座標として、マウス カーソルの座標を格納している <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1954">A <see cref="T:System.Drawing.Point" /> that contains the coordinates of the mouse cursor relative to the upper-left corner of the screen.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1955"><xref:System.Windows.Forms.Control.MousePosition%2A>プロパティが返す、<xref:System.Drawing.Point>プロパティの参照時にマウス カーソルの位置を表します。</span><span class="sxs-lookup"><span data-stu-id="97318-1955">The <xref:System.Windows.Forms.Control.MousePosition%2A> property returns a <xref:System.Drawing.Point> that represents the mouse cursor position at the time the property was referenced.</span></span> <span data-ttu-id="97318-1956">座標は画面で、コントロール、相対的ではない位置を示すし、コントロール上でカーソルが配置されているかどうかに関係なく返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1956">The coordinates indicate the position on the screen, not relative to the control, and are returned regardless of whether the cursor is positioned over the control.</span></span> <span data-ttu-id="97318-1957">画面の左上隅の座標は、0, 0 です。</span><span class="sxs-lookup"><span data-stu-id="97318-1957">The coordinates of the upper-left corner of the screen are 0,0.</span></span>  
  
 <span data-ttu-id="97318-1958"><xref:System.Windows.Forms.Control.MousePosition%2A>プロパティのと同じですが、<xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-1958">The <xref:System.Windows.Forms.Control.MousePosition%2A> property is identical to the <xref:System.Windows.Forms.Cursor.Position%2A?displayProperty=nameWithType> property.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1959">次のコード例、<xref:System.Windows.Forms.TreeNode>ラベル ツリー ノード上にマウス カーソルがあるときに、ユーザーが ALT + E を押したときに編集可能な状態にします。</span><span class="sxs-lookup"><span data-stu-id="97318-1959">The following code example puts a <xref:System.Windows.Forms.TreeNode> label into an editable state when the user presses ALT+E while the mouse cursor is over the tree node.</span></span> <span data-ttu-id="97318-1960">ユーザーが完了したら、ラベルを編集するには、ラベルは編集できませんもう一度再 ALT + E キーの組み合わせが押されるまでです。</span><span class="sxs-lookup"><span data-stu-id="97318-1960">After the user is done editing the label, the labels cannot be edited again until the ALT+E key combination is pressed again.</span></span> <span data-ttu-id="97318-1961">この例が必要です、<xref:System.Windows.Forms.TreeView>上、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1961">This example requires that you have a <xref:System.Windows.Forms.TreeView> on a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-1962">ツリー ビューでは少なくとも 1 つが必要も<xref:System.Windows.Forms.TreeNode>でその<xref:System.Windows.Forms.TreeView.Nodes%2A>コレクション。</span><span class="sxs-lookup"><span data-stu-id="97318-1962">The tree view should also have at least one <xref:System.Windows.Forms.TreeNode> in its <xref:System.Windows.Forms.TreeView.Nodes%2A> collection.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseUp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseUp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseUp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseUp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseUp As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseUp;" />
      <MemberSignature Language="F#" Value="member this.MouseUp : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseUp : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1963">マウス ポインターがコントロール上にある状態でマウス ボタンが離されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1963">Occurs when the mouse pointer is over the control and a mouse button is released.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1964">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1964">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
> [!NOTE]
>  <span data-ttu-id="97318-1965">に対して、次のイベントは発生しません、<xref:System.Windows.Forms.TabControl>クラスの 1 つ以上ある場合を除き、<xref:System.Windows.Forms.TabPage>で、<xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType>コレクション: <xref:System.Windows.Forms.Control.Click>、 <xref:System.Windows.Forms.Control.DoubleClick>、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseUp>、 <xref:System.Windows.Forms.Control.MouseHover>、 <xref:System.Windows.Forms.Control.MouseEnter>、<xref:System.Windows.Forms.Control.MouseLeave>と<xref:System.Windows.Forms.Control.MouseMove>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1965">The following events are not raised for the <xref:System.Windows.Forms.TabControl> class unless there is at least one <xref:System.Windows.Forms.TabPage> in the <xref:System.Windows.Forms.TabControl.TabPages%2A?displayProperty=nameWithType> collection: <xref:System.Windows.Forms.Control.Click>, <xref:System.Windows.Forms.Control.DoubleClick>, <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseUp>, <xref:System.Windows.Forms.Control.MouseHover>, <xref:System.Windows.Forms.Control.MouseEnter>, <xref:System.Windows.Forms.Control.MouseLeave> and <xref:System.Windows.Forms.Control.MouseMove>.</span></span> <span data-ttu-id="97318-1966">少なくとも 1 つを使用する必要がある場合<xref:System.Windows.Forms.TabPage>、コレクション内でユーザーがタブ コントロールのヘッダーを操作し、(場所、<xref:System.Windows.Forms.TabPage>名前が表示されます)、<xref:System.Windows.Forms.TabControl>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1966">If there is at least one <xref:System.Windows.Forms.TabPage> in the collection, and the user interacts with the tab control's header (where the <xref:System.Windows.Forms.TabPage> names appear), the <xref:System.Windows.Forms.TabControl> raises the appropriate event.</span></span> <span data-ttu-id="97318-1967">ただし、タブ ページのクライアント領域内のユーザーとの対話がの場合、<xref:System.Windows.Forms.TabPage>適切なイベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-1967">However, if the user interaction is within the client area of the tab page, the <xref:System.Windows.Forms.TabPage> raises the appropriate event.</span></span>  
  
 <span data-ttu-id="97318-1968">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1968">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1969">次のコード例に示しますマウスのパスを描画するためにさまざまなマウス イベントを使用して、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1969">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-1970">線分を追加、<xref:System.Drawing.Drawing2D.GraphicsPath>各<xref:System.Windows.Forms.Control.MouseMove>と<xref:System.Windows.Forms.Control.MouseDown>発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1970">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="97318-1971">グラフィックスを更新する、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドが呼び出されます、<xref:System.Windows.Forms.Panel>各`MouseDown`と`MouseUp`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1971">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="97318-1972">さらに、グラフィック パスがときに上下にスクロールされる基準、<xref:System.Windows.Forms.Control.MouseWheel>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1972">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="97318-1973">などの他のマウス イベント、 <xref:System.Windows.Forms.Control.MouseHover>、画面も識別されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1973">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="97318-1974">マウスの詳細については、画面に表示することも、<xref:System.Windows.Forms.SystemInformation>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1974">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="MouseWheel">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseWheel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseWheel" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.MouseWheel" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseWheel As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseWheel;" />
      <MemberSignature Language="F#" Value="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseWheel : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1975">コントロールにフォーカスがある間に、マウスのホイールを移動したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1975">Occurs when the mouse wheel moves while the control has focus.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1976">処理するときに、<xref:System.Windows.Forms.Control.MouseWheel>イベントは、マウス ホイールに関連付けられているユーザー インターフェイス (UI) の標準に準拠することが重要です。</span><span class="sxs-lookup"><span data-stu-id="97318-1976">When handling the <xref:System.Windows.Forms.Control.MouseWheel> event it is important to follow the user interface (UI) standards associated with the mouse wheel.</span></span> <span data-ttu-id="97318-1977"><xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType>プロパティの値は、マウス ホイールの回転の量が移動されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-1977">The <xref:System.Windows.Forms.MouseEventArgs.Delta%2A?displayProperty=nameWithType> property value indicates the amount the mouse wheel has been moved.</span></span> <span data-ttu-id="97318-1978">UI には、蓄積された差分がプラスまたはマイナス 120 をスクロールする必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-1978">The UI should scroll when the accumulated delta is plus or minus 120.</span></span> <span data-ttu-id="97318-1979">UI がによって返される論理行の数をスクロールする必要があります、<xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType>デルタ値ごとにプロパティに達しました。</span><span class="sxs-lookup"><span data-stu-id="97318-1979">The UI should scroll the number of logical lines returned by the <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> property for every delta value reached.</span></span> <span data-ttu-id="97318-1980">スクロールできますより円滑に小さいその 120 ユニットずつ増加比率が一定に保たつまりただし<xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType>行のスクロール ホイールの動きの 120 のデルタ単位ごと。</span><span class="sxs-lookup"><span data-stu-id="97318-1980">You can also scroll more smoothly in smaller that 120 unit increments, however the ratio should remain constant, that is <xref:System.Windows.Forms.SystemInformation.MouseWheelScrollLines%2A?displayProperty=nameWithType> lines scrolled per 120 delta units of wheel movement.</span></span>  
  
 <span data-ttu-id="97318-1981">マウス ホイールのメッセージの処理の詳細については、次を参照してください。、 [WM_MOUSEWHEEL](https://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-1981">For more information about handling mouse wheel messages, see the [WM_MOUSEWHEEL](https://msdn.microsoft.com/library/windows/desktop/ms645617\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="97318-1982">マウス イベントは次の順序で発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1982">Mouse events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.MouseEnter>  
  
2.  <xref:System.Windows.Forms.Control.MouseMove>  
  
3.  <xref:System.Windows.Forms.Control.MouseHover> / <xref:System.Windows.Forms.Control.MouseDown> / <xref:System.Windows.Forms.Control.MouseWheel>  
  
4.  <xref:System.Windows.Forms.Control.MouseUp>  
  
5.  <xref:System.Windows.Forms.Control.MouseLeave>  
  
 <span data-ttu-id="97318-1983">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1983">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1984">次のコード例に示しますマウスのパスを描画するためにさまざまなマウス イベントを使用して、<xref:System.Windows.Forms.Panel>します。</span><span class="sxs-lookup"><span data-stu-id="97318-1984">The following code example demonstrates using different mouse events to draw the path of the mouse on a <xref:System.Windows.Forms.Panel>.</span></span> <span data-ttu-id="97318-1985">線分を追加、<xref:System.Drawing.Drawing2D.GraphicsPath>各<xref:System.Windows.Forms.Control.MouseMove>と<xref:System.Windows.Forms.Control.MouseDown>発生するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1985">A line segment is added to the <xref:System.Drawing.Drawing2D.GraphicsPath> for each <xref:System.Windows.Forms.Control.MouseMove> and <xref:System.Windows.Forms.Control.MouseDown> events that occur.</span></span> <span data-ttu-id="97318-1986">グラフィックスを更新する、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドが呼び出されます、<xref:System.Windows.Forms.Panel>各`MouseDown`と`MouseUp`イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-1986">To update the graphics, the <xref:System.Windows.Forms.Control.Invalidate%2A> method is called for the <xref:System.Windows.Forms.Panel> on each `MouseDown` and `MouseUp` event.</span></span> <span data-ttu-id="97318-1987">さらに、グラフィック パスがときに上下にスクロールされる基準、<xref:System.Windows.Forms.Control.MouseWheel>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1987">In addition, the graphic path is scrolled up or down when the <xref:System.Windows.Forms.Control.MouseWheel> event occurs.</span></span> <span data-ttu-id="97318-1988">などの他のマウス イベント、 <xref:System.Windows.Forms.Control.MouseHover>、画面も識別されます。</span><span class="sxs-lookup"><span data-stu-id="97318-1988">Additional mouse events, like <xref:System.Windows.Forms.Control.MouseHover>, are identified on screen as well.</span></span> <span data-ttu-id="97318-1989">マウスの詳細については、画面に表示することも、<xref:System.Windows.Forms.SystemInformation>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-1989">Also displayed on the screen is additional information about the mouse from the <xref:System.Windows.Forms.SystemInformation> class.</span></span>  
  
 [!code-cpp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CPP/mouseeventexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.MouseEvent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/CS/mouseeventexample.cs#1)]
 [!code-vb[System.Windows.Forms.MouseEvent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MouseEvent/VB/mouseeventexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Move">
      <MemberSignature Language="C#" Value="public event EventHandler Move;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Move" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Move" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Move As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Move;" />
      <MemberSignature Language="F#" Value="member this.Move : EventHandler " Usage="member this.Move : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1990">コントロールが移動されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-1990">Occurs when the control is moved.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1991">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-1991">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1992">次のコード例では、<xref:System.Windows.Forms.Control.Move>フォームの位置を画面座標、フォームのキャプション バーに表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-1992">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Control.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-1993">コントロールの名前を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-1993">Gets or sets the name of the control.</span></span></summary>
        <value><span data-ttu-id="97318-1994">コントロールの名前。</span><span class="sxs-lookup"><span data-stu-id="97318-1994">The name of the control.</span></span> <span data-ttu-id="97318-1995">既定値は、空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="97318-1995">The default is an empty string ("").</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-1996"><xref:System.Windows.Forms.Control.Name%2A>プロパティできます実行時に、オブジェクトを評価する名前ではなく型とプログラム名でします。</span><span class="sxs-lookup"><span data-stu-id="97318-1996">The <xref:System.Windows.Forms.Control.Name%2A> property can be used at run time to evaluate the object by name rather than type and programmatic name.</span></span> <span data-ttu-id="97318-1997"><xref:System.Windows.Forms.Control.Name%2A>プロパティが返す、<xref:System.String>型はケース スタイル ロジック ステートメントで評価されます (`Select` Visual basic でのステートメント`switch`ビジュアルでステートメントC#と[!INCLUDE[vcprvc](~/includes/vcprvc-md.md)])。</span><span class="sxs-lookup"><span data-stu-id="97318-1997">Because the <xref:System.Windows.Forms.Control.Name%2A> property returns a <xref:System.String> type, it can be evaluated in case-style logic statements (`Select` statement in Visual Basic, `switch` statement in Visual C# and [!INCLUDE[vcprvc](~/includes/vcprvc-md.md)]).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-1998">次のコード例が表示されます、<xref:System.Windows.Forms.Control.Name%2A>コントロールの<xref:System.Windows.Forms.MessageBox>コントロールが追加またはフォームから削除します。</span><span class="sxs-lookup"><span data-stu-id="97318-1998">The following code example displays the <xref:System.Windows.Forms.Control.Name%2A> of a control in a <xref:System.Windows.Forms.MessageBox> when the control is added or removed from a form.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ComponentModel.ISite.Name" />
      </Docs>
    </Member>
    <Member MemberName="NotifyInvalidate">
      <MemberSignature Language="C#" Value="protected virtual void NotifyInvalidate (System.Drawing.Rectangle invalidatedArea);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void NotifyInvalidate(valuetype System.Drawing.Rectangle invalidatedArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.NotifyInvalidate(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub NotifyInvalidate (invalidatedArea As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void NotifyInvalidate(System::Drawing::Rectangle invalidatedArea);" />
      <MemberSignature Language="F#" Value="abstract member NotifyInvalidate : System.Drawing.Rectangle -&gt; unit&#xA;override this.NotifyInvalidate : System.Drawing.Rectangle -&gt; unit" Usage="control.NotifyInvalidate invalidatedArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="invalidatedArea" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="invalidatedArea"><span data-ttu-id="97318-1999">無効化する領域を表す <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-1999">A <see cref="T:System.Drawing.Rectangle" /> representing the area to invalidate.</span></span></param>
        <summary><span data-ttu-id="97318-2000">無効化するコントロールの領域を指定して、<see cref="E:System.Windows.Forms.Control.Invalidated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2000">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event with a specified region of the control to invalidate.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAutoSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAutoSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAutoSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAutoSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAutoSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAutoSizeChanged : EventArgs -&gt; unit&#xA;override this.OnAutoSizeChanged : EventArgs -&gt; unit" Usage="control.OnAutoSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2001">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2001">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2002"><see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2002">Raises the <see cref="E:System.Windows.Forms.Control.AutoSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2003">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2003">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2004">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2004">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2005"><xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2005">The <xref:System.Windows.Forms.Control.OnAutoSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2006">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2006">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2007">派生クラスで <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2007">When overriding <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnAutoSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="control.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2008">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2008">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2009"><see cref="E:System.Windows.Forms.Control.BackColorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2009">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2010">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2010">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2011">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2011">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2012"><xref:System.Windows.Forms.Control.OnBackColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2012">The <xref:System.Windows.Forms.Control.OnBackColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2013">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2013">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2014">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2014">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2015"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2015">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2016">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2016">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2017">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2017">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2018">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2018">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2019">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2019">When overriding <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackColor" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2020">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2020">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2021"><see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2021">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2022">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2022">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2023">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2023">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2024"><xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2024">The <xref:System.Windows.Forms.Control.OnBackgroundImageChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2025">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2025">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2026">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2026">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2027"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2027">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2028">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2028">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2029">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2029">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2030">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2030">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2031">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2031">When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImage" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBackgroundImageLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBackgroundImageLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBackgroundImageLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBackgroundImageLayoutChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBackgroundImageLayoutChanged : EventArgs -&gt; unit&#xA;override this.OnBackgroundImageLayoutChanged : EventArgs -&gt; unit" Usage="control.OnBackgroundImageLayoutChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2032">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2032">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2033"><see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2033">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2034">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2034">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2035">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2035">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2036"><xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2036">The <xref:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2037">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2037">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2038">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2038">When overriding <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBackgroundImageLayoutChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageLayoutChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2039">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2039">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2040"><see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2040">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2041">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2041">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2042">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2042">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2043"><xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2043">The <xref:System.Windows.Forms.Control.OnBindingContextChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2044">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2044">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2045">派生クラスで <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2045">When overriding <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
        <altmember cref="P:System.Windows.Forms.Control.BindingContext" />
      </Docs>
    </Member>
    <Member MemberName="OnCausesValidationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCausesValidationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCausesValidationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCausesValidationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCausesValidationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCausesValidationChanged : EventArgs -&gt; unit&#xA;override this.OnCausesValidationChanged : EventArgs -&gt; unit" Usage="control.OnCausesValidationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2046">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2046">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2047"><see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2047">Raises the <see cref="E:System.Windows.Forms.Control.CausesValidationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2048">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2048">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2049">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2049">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2050"><xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2050">The <xref:System.Windows.Forms.Control.OnCausesValidationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2051">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2051">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2052">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2052">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2053"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2053">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2054">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2054">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2055">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2055">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2056">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2056">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2057">派生クラスで <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2057">When overriding <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCausesValidationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.CausesValidationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected virtual void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit&#xA;override this.OnChangeUICues : System.Windows.Forms.UICuesEventArgs -&gt; unit" Usage="control.OnChangeUICues e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2058">イベント データを格納している <see cref="T:System.Windows.Forms.UICuesEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2058">A <see cref="T:System.Windows.Forms.UICuesEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2059"><see cref="E:System.Windows.Forms.Control.ChangeUICues" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2059">Raises the <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2060">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2060">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2061">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2061">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2062"><xref:System.Windows.Forms.Control.OnChangeUICues%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2062">The <xref:System.Windows.Forms.Control.OnChangeUICues%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2063">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2063">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2064">派生クラスで <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2064">When overriding <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="T:System.Windows.Forms.UICues" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="control.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2065">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2065">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2066"><see cref="E:System.Windows.Forms.Control.Click" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2066">Raises the <see cref="E:System.Windows.Forms.Control.Click" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2067">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2067">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2068">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2068">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2069"><xref:System.Windows.Forms.Control.OnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2069">The <xref:System.Windows.Forms.Control.OnClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2070">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2070">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2071">オーバーライドする次のコード例に示します、<xref:System.Windows.Forms.Control.OnClick%2A>派生クラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2071">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.OnClick%2A> method in a derived class.</span></span> <span data-ttu-id="97318-2072">例を実行するには、後、同じファイル内のフォーム クラスに次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-2072">To run the example, paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="97318-2073">型のテキスト ボックスを追加`SingleClickTextBox`をフォームにします。</span><span class="sxs-lookup"><span data-stu-id="97318-2073">Add a textbox of type `SingleClickTextBox` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ControlOnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlOnClick/VB/form1.vb#1)]  
  
 <span data-ttu-id="97318-2074">次のコード例を示していますの多くの用途の 1 つ、<xref:System.Windows.Forms.Control.Click>イベントとイベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-2074">The following code example shows one of the many uses of the <xref:System.Windows.Forms.Control.Click> event and event handler.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2075">派生クラスで <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2075">When overriding <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClick(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
    <Member MemberName="OnClientSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnClientSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClientSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClientSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClientSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClientSizeChanged : EventArgs -&gt; unit&#xA;override this.OnClientSizeChanged : EventArgs -&gt; unit" Usage="control.OnClientSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2076">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2076">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2077"><see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2077">Raises the <see cref="E:System.Windows.Forms.Control.ClientSizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2078">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2078">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2079">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2079">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2080"><xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2080">The <xref:System.Windows.Forms.Control.OnClientSizeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2081">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2081">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2082">派生クラスで <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2082">When overriding <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnClientSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2083">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2083">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2084"><see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2084">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2085">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2085">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2086">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2086">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2087"><xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2087">The <xref:System.Windows.Forms.Control.OnContextMenuChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2088">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2088">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2089">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2089">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2090"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2090">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2091">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2091">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2092">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2092">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2093">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2093">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2094">派生クラスで <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2094">When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ContextMenuChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="OnContextMenuStripChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnContextMenuStripChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnContextMenuStripChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnContextMenuStripChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnContextMenuStripChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnContextMenuStripChanged : EventArgs -&gt; unit&#xA;override this.OnContextMenuStripChanged : EventArgs -&gt; unit" Usage="control.OnContextMenuStripChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2095">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2095">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2096"><see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2096">Raises the <see cref="E:System.Windows.Forms.Control.ContextMenuStripChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2097">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2097">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2098">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2098">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2099"><xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2099">The <xref:System.Windows.Forms.Control.OnContextMenuStripChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2100">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2100">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2101">派生クラスで <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2101">When overriding <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnContextMenuStripChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnControlAdded">
      <MemberSignature Language="C#" Value="protected virtual void OnControlAdded (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlAdded(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlAdded (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlAdded(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlAdded : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlAdded e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2102">イベント データを格納している <see cref="T:System.Windows.Forms.ControlEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2102">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2103"><see cref="E:System.Windows.Forms.Control.ControlAdded" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2103">Raises the <see cref="E:System.Windows.Forms.Control.ControlAdded" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2104">コントロールに子コントロールが追加されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2104">Called when a child control is added to the control.</span></span>  
  
 <span data-ttu-id="97318-2105">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2105">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2106">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2106">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2107"><xref:System.Windows.Forms.Control.OnControlAdded%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2107">The <xref:System.Windows.Forms.Control.OnControlAdded%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2108">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2108">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2109">次のコード例では<xref:System.Windows.Forms.Control.ControlAdded>をフォームにコントロールを追加するで追加したコントロールの名前を表示し、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2109">The following code example uses <xref:System.Windows.Forms.Control.ControlAdded> to add a control to a form and displays the name of the added control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2110">派生クラスで <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2110">When overriding <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlAdded(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlAdded" />
      </Docs>
    </Member>
    <Member MemberName="OnControlRemoved">
      <MemberSignature Language="C#" Value="protected virtual void OnControlRemoved (System.Windows.Forms.ControlEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnControlRemoved(class System.Windows.Forms.ControlEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnControlRemoved (e As ControlEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnControlRemoved(System::Windows::Forms::ControlEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit&#xA;override this.OnControlRemoved : System.Windows.Forms.ControlEventArgs -&gt; unit" Usage="control.OnControlRemoved e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ControlEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2111">イベント データを格納している <see cref="T:System.Windows.Forms.ControlEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2111">A <see cref="T:System.Windows.Forms.ControlEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2112"><see cref="E:System.Windows.Forms.Control.ControlRemoved" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2112">Raises the <see cref="E:System.Windows.Forms.Control.ControlRemoved" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2113">子コントロールがコントロールから削除されたときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2113">Called when a child control is removed from the control.</span></span>  
  
 <span data-ttu-id="97318-2114">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2114">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2115">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2115">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2116"><xref:System.Windows.Forms.Control.OnControlRemoved%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2116">The <xref:System.Windows.Forms.Control.OnControlRemoved%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2117">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2117">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2118">次のコード例では<xref:System.Windows.Forms.Control.ControlRemoved>フォームからコントロールを削除するで削除されたコントロールの名前を表示し、<xref:System.Windows.Forms.MessageBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2118">The following code example uses <xref:System.Windows.Forms.Control.ControlRemoved> to remove a control from a form and displays the name of the removed control in a <xref:System.Windows.Forms.MessageBox>.</span></span>  
  
 [!code-cpp[Control.ControlRemoved#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.ControlRemoved/CPP/form1.cpp#1)]
 [!code-csharp[Control.ControlRemoved#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.ControlRemoved/CS/form1.cs#1)]
 [!code-vb[Control.ControlRemoved#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.ControlRemoved/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2119">派生クラスで <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2119">When overriding <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnControlRemoved(System.Windows.Forms.ControlEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ControlRemoved" />
      </Docs>
    </Member>
    <Member MemberName="OnCreateControl">
      <MemberSignature Language="C#" Value="protected virtual void OnCreateControl ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCreateControl() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCreateControl" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCreateControl ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCreateControl();" />
      <MemberSignature Language="F#" Value="abstract member OnCreateControl : unit -&gt; unit&#xA;override this.OnCreateControl : unit -&gt; unit" Usage="control.OnCreateControl " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-2120"><see cref="M:System.Windows.Forms.Control.CreateControl" /> メソッドを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2120">Raises the <see cref="M:System.Windows.Forms.Control.CreateControl" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2121"><xref:System.Windows.Forms.Control.OnCreateControl%2A>コントロールが最初に作成したときにメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2121">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method is called when the control is first created.</span></span>  
  
 <span data-ttu-id="97318-2122"><xref:System.Windows.Forms.Control.OnCreateControl%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2122">The <xref:System.Windows.Forms.Control.OnCreateControl%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2123">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2123">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2124">派生クラスで <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2124">When overriding <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCreateControl" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
      </Docs>
    </Member>
    <Member MemberName="OnCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCursorChanged : EventArgs -&gt; unit&#xA;override this.OnCursorChanged : EventArgs -&gt; unit" Usage="control.OnCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2125">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2125">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2126"><see cref="E:System.Windows.Forms.Control.CursorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2126">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2127">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2127">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2128">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2128">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2129"><xref:System.Windows.Forms.Control.OnCursorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2129">The <xref:System.Windows.Forms.Control.OnCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2130">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2130">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2131">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2131">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2132"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2132">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2133">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2133">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2134">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2134">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2135">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2135">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2136">派生クラスで <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2136">When overriding <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.CursorChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
      </Docs>
    </Member>
    <Member MemberName="OnDockChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnDockChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDockChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDockChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDockChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDockChanged : EventArgs -&gt; unit&#xA;override this.OnDockChanged : EventArgs -&gt; unit" Usage="control.OnDockChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2137">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2137">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2138"><see cref="E:System.Windows.Forms.Control.DockChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2138">Raises the <see cref="E:System.Windows.Forms.Control.DockChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2139">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2139">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2140">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2140">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2141"><xref:System.Windows.Forms.Control.OnDockChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2141">The <xref:System.Windows.Forms.Control.OnDockChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2142">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2142">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2143">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2143">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2144"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2144">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2145">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2145">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2146">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2146">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2147">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2147">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2148">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2148">When overriding <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDockChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DockChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Dock" />
      </Docs>
    </Member>
    <Member MemberName="OnDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnDoubleClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDoubleClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDoubleClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDoubleClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDoubleClick : EventArgs -&gt; unit&#xA;override this.OnDoubleClick : EventArgs -&gt; unit" Usage="control.OnDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2149">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2149">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2150"><see cref="E:System.Windows.Forms.Control.DoubleClick" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2150">Raises the <see cref="E:System.Windows.Forms.Control.DoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2151">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2151">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2152">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2152">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2153"><xref:System.Windows.Forms.Control.OnDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2153">The <xref:System.Windows.Forms.Control.OnDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2154">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2154">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2155">次のコード例では、<xref:System.Windows.Forms.Control.DoubleClick>のイベントを<xref:System.Windows.Forms.ListBox>が記載されたテキスト ファイルを読み込む、<xref:System.Windows.Forms.ListBox>に、<xref:System.Windows.Forms.TextBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-2155">The following code example uses the <xref:System.Windows.Forms.Control.DoubleClick> event of a <xref:System.Windows.Forms.ListBox> to load text files listed in the <xref:System.Windows.Forms.ListBox> into a <xref:System.Windows.Forms.TextBox> control.</span></span>  
  
 [!code-cpp[Control.DoubleClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.DoubleClick/CPP/form1.cpp#1)]
 [!code-csharp[Control.DoubleClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.DoubleClick/CS/form1.cs#1)]
 [!code-vb[Control.DoubleClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.DoubleClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2156">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2156">When overriding <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDoubleClick(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DoubleClick" />
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedAfterParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedAfterParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedAfterParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedAfterParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedAfterParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedAfterParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedAfterParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedAfterParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedAfterParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2157">イベント データを格納している <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2157">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2158"><see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2158">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedAfterParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDpiChangedBeforeParent">
      <MemberSignature Language="C#" Value="protected virtual void OnDpiChangedBeforeParent (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDpiChangedBeforeParent(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDpiChangedBeforeParent(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDpiChangedBeforeParent (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDpiChangedBeforeParent(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDpiChangedBeforeParent : EventArgs -&gt; unit&#xA;override this.OnDpiChangedBeforeParent : EventArgs -&gt; unit" Usage="control.OnDpiChangedBeforeParent e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2159">イベント データを格納している <see cref="T:System.Windows.Forms.DpiChangedEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2159">An <see cref="T:System.Windows.Forms.DpiChangedEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2160"><see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2160">Raises the <see cref="E:System.Windows.Forms.Control.DpiChangedBeforeParent" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDragDrop">
      <MemberSignature Language="C#" Value="protected virtual void OnDragDrop (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragDrop(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragDrop (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragDrop : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragDrop drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="97318-2161">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2161">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2162"><see cref="E:System.Windows.Forms.Control.DragDrop" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2162">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2163">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2163">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2164">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2164">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2165"><xref:System.Windows.Forms.Control.OnDragDrop%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2165">The <xref:System.Windows.Forms.Control.OnDragDrop%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2166">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2166">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2167">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2167">When overriding <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragDrop(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragDrop" />
      </Docs>
    </Member>
    <Member MemberName="OnDragEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnDragEnter (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragEnter(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragEnter (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragEnter : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragEnter drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="97318-2168">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2168">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2169"><see cref="E:System.Windows.Forms.Control.DragEnter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2169">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2170">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2170">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2171">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2171">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2172"><xref:System.Windows.Forms.Control.OnDragEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2172">The <xref:System.Windows.Forms.Control.OnDragEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2173">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2173">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2174">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2174">When overriding <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragEnter(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragEnter" />
      </Docs>
    </Member>
    <Member MemberName="OnDragLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDragLeave : EventArgs -&gt; unit&#xA;override this.OnDragLeave : EventArgs -&gt; unit" Usage="control.OnDragLeave e" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2175">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2175">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2176"><see cref="E:System.Windows.Forms.Control.DragLeave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2176">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2177">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2177">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2178">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2178">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2179"><xref:System.Windows.Forms.Control.OnDragLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2179">The <xref:System.Windows.Forms.Control.OnDragLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2180">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2180">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2181">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2181">When overriding <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragLeave" />
      </Docs>
    </Member>
    <Member MemberName="OnDragOver">
      <MemberSignature Language="C#" Value="protected virtual void OnDragOver (System.Windows.Forms.DragEventArgs drgevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDragOver(class System.Windows.Forms.DragEventArgs drgevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDragOver (drgevent As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDragOver(System::Windows::Forms::DragEventArgs ^ drgevent);" />
      <MemberSignature Language="F#" Value="abstract member OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit&#xA;override this.OnDragOver : System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.OnDragOver drgevent" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgevent" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="drgevent"><span data-ttu-id="97318-2182">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2182">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2183"><see cref="E:System.Windows.Forms.Control.DragOver" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2183">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2184">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2184">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2185">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2185">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2186"><xref:System.Windows.Forms.Control.OnDragOver%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2186">The <xref:System.Windows.Forms.Control.OnDragOver%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2187">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2187">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2188">派生クラスで <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2188">When overriding <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnDragOver(System.Windows.Forms.DragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.DragOver" />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="control.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2189">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2189">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2190"><see cref="E:System.Windows.Forms.Control.EnabledChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2190">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2191">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2191">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2192">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2192">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2193"><xref:System.Windows.Forms.Control.OnEnabledChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2193">The <xref:System.Windows.Forms.Control.OnEnabledChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2194">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2194">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2195">派生クラスで <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2195">When overriding <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="OnEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnEnter : EventArgs -&gt; unit&#xA;override this.OnEnter : EventArgs -&gt; unit" Usage="control.OnEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2196">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2196">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2197"><see cref="E:System.Windows.Forms.Control.Enter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2197">Raises the <see cref="E:System.Windows.Forms.Control.Enter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2198">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2198">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2199">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2199">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2200"><xref:System.Windows.Forms.Control.OnEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2200">The <xref:System.Windows.Forms.Control.OnEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2201">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2201">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2202">次のコード例では、<xref:System.Windows.Forms.Control.Enter>の前景色と背景色を変更するイベントを<xref:System.Windows.Forms.TextBox>特定の条件下でします。</span><span class="sxs-lookup"><span data-stu-id="97318-2202">The following code example uses the <xref:System.Windows.Forms.Control.Enter> event to change the foreground and background colors of a <xref:System.Windows.Forms.TextBox> under particular conditions.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2203">派生クラスで <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2203">When overriding <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnEnter(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Enter" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnFontChanged : EventArgs -&gt; unit&#xA;override this.OnFontChanged : EventArgs -&gt; unit" Usage="control.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2204">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2204">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2205"><see cref="E:System.Windows.Forms.Control.FontChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2205">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2206">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2206">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2207">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2207">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2208"><xref:System.Windows.Forms.Control.OnFontChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2208">The <xref:System.Windows.Forms.Control.OnFontChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2209">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2209">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2210">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2210">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2211"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2211">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2212">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2212">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2213">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2213">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2214">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2214">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2215">派生クラスで <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2215">When overriding <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnForeColorChanged : EventArgs -&gt; unit" Usage="control.OnForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2216">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2216">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2217"><see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2217">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2218">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2218">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2219">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2219">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2220"><xref:System.Windows.Forms.Control.OnForeColorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2220">The <xref:System.Windows.Forms.Control.OnForeColorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2221">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2221">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2222">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2222">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2223"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2223">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2224">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2224">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2225">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2225">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2226">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2226">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2227">派生クラスで <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2227">When overriding <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnGiveFeedback">
      <MemberSignature Language="C#" Value="protected virtual void OnGiveFeedback (System.Windows.Forms.GiveFeedbackEventArgs gfbevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGiveFeedback(class System.Windows.Forms.GiveFeedbackEventArgs gfbevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGiveFeedback (gfbevent As GiveFeedbackEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGiveFeedback(System::Windows::Forms::GiveFeedbackEventArgs ^ gfbevent);" />
      <MemberSignature Language="F#" Value="abstract member OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit&#xA;override this.OnGiveFeedback : System.Windows.Forms.GiveFeedbackEventArgs -&gt; unit" Usage="control.OnGiveFeedback gfbevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gfbevent" Type="System.Windows.Forms.GiveFeedbackEventArgs" />
      </Parameters>
      <Docs>
        <param name="gfbevent"><span data-ttu-id="97318-2228">イベント データを格納している <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2228">A <see cref="T:System.Windows.Forms.GiveFeedbackEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2229"><see cref="E:System.Windows.Forms.Control.GiveFeedback" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2229">Raises the <see cref="E:System.Windows.Forms.Control.GiveFeedback" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2230">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2230">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2231">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2231">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2232"><xref:System.Windows.Forms.Control.OnGiveFeedback%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2232">The <xref:System.Windows.Forms.Control.OnGiveFeedback%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2233">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2233">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2234">派生クラスで <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2234">When overriding <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGiveFeedback(System.Windows.Forms.GiveFeedbackEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.GiveFeedback" />
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnGotFocus : EventArgs -&gt; unit&#xA;override this.OnGotFocus : EventArgs -&gt; unit" Usage="control.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2235">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2235">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2236"><see cref="E:System.Windows.Forms.Control.GotFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2236">Raises the <see cref="E:System.Windows.Forms.Control.GotFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2237">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2237">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2238">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2238">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2239"><xref:System.Windows.Forms.Control.OnGotFocus%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2239">The <xref:System.Windows.Forms.Control.OnGotFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2240">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2240">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2241">派生クラスで <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2241">When overriding <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnGotFocus(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.GotFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleCreated : EventArgs -&gt; unit&#xA;override this.OnHandleCreated : EventArgs -&gt; unit" Usage="control.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2242">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2242">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2243"><see cref="E:System.Windows.Forms.Control.HandleCreated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2243">Raises the <see cref="E:System.Windows.Forms.Control.HandleCreated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2244">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2244">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2245">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2245">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2246"><xref:System.Windows.Forms.Control.OnHandleCreated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2246">The <xref:System.Windows.Forms.Control.OnHandleCreated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2247">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2247">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2248">派生クラスで <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2248">When overriding <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnHandleDestroyed : EventArgs -&gt; unit&#xA;override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="control.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2249">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2249">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2250"><see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2250">Raises the <see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2251">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2251">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2252">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2252">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2253"><xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2253">The <xref:System.Windows.Forms.Control.OnHandleDestroyed%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2254">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2254">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2255">派生クラスで <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2255">When overriding <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HandleDestroyed" />
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnHelpRequested">
      <MemberSignature Language="C#" Value="protected virtual void OnHelpRequested (System.Windows.Forms.HelpEventArgs hevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHelpRequested(class System.Windows.Forms.HelpEventArgs hevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHelpRequested (hevent As HelpEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHelpRequested(System::Windows::Forms::HelpEventArgs ^ hevent);" />
      <MemberSignature Language="F#" Value="abstract member OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit&#xA;override this.OnHelpRequested : System.Windows.Forms.HelpEventArgs -&gt; unit" Usage="control.OnHelpRequested hevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hevent" Type="System.Windows.Forms.HelpEventArgs" />
      </Parameters>
      <Docs>
        <param name="hevent"><span data-ttu-id="97318-2256">イベント データを格納している <see cref="T:System.Windows.Forms.HelpEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2256">A <see cref="T:System.Windows.Forms.HelpEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2257"><see cref="E:System.Windows.Forms.Control.HelpRequested" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2257">Raises the <see cref="E:System.Windows.Forms.Control.HelpRequested" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2258">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2258">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2259">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2259">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2260"><xref:System.Windows.Forms.Control.OnHelpRequested%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2260">The <xref:System.Windows.Forms.Control.OnHelpRequested%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2261">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2261">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2262">派生クラスで <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2262">When overriding <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnHelpRequested(System.Windows.Forms.HelpEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.HelpRequested" />
      </Docs>
    </Member>
    <Member MemberName="OnImeModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnImeModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnImeModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnImeModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnImeModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnImeModeChanged : EventArgs -&gt; unit&#xA;override this.OnImeModeChanged : EventArgs -&gt; unit" Usage="control.OnImeModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2263">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2263">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2264"><see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2264">Raises the <see cref="E:System.Windows.Forms.Control.ImeModeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2265">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2265">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2266">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2266">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2267"><xref:System.Windows.Forms.Control.OnImeModeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2267">The <xref:System.Windows.Forms.Control.OnImeModeChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2268">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2268">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2269">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2269">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2270"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2270">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2271">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2271">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2272">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2272">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2273">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2273">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2274">派生クラスで <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2274">When overriding <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnImeModeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ImeModeChanged" />
        <altmember cref="P:System.Windows.Forms.Control.ImeMode" />
      </Docs>
    </Member>
    <Member MemberName="OnInvalidated">
      <MemberSignature Language="C#" Value="protected virtual void OnInvalidated (System.Windows.Forms.InvalidateEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInvalidated(class System.Windows.Forms.InvalidateEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInvalidated (e As InvalidateEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInvalidated(System::Windows::Forms::InvalidateEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit&#xA;override this.OnInvalidated : System.Windows.Forms.InvalidateEventArgs -&gt; unit" Usage="control.OnInvalidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.InvalidateEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2275">イベント データを格納している <see cref="T:System.Windows.Forms.InvalidateEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2275">An <see cref="T:System.Windows.Forms.InvalidateEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2276"><see cref="E:System.Windows.Forms.Control.Invalidated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2276">Raises the <see cref="E:System.Windows.Forms.Control.Invalidated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2277">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2277">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2278">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2278">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2279"><xref:System.Windows.Forms.Control.OnInvalidated%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2279">The <xref:System.Windows.Forms.Control.OnInvalidated%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2280">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2280">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2281">派生クラスで <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2281">When overriding <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnInvalidated(System.Windows.Forms.InvalidateEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Invalidated" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2282">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2282">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2283"><see cref="E:System.Windows.Forms.Control.KeyDown" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2283">Raises the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2284">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2284">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2285">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2285">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2286"><xref:System.Windows.Forms.Control.OnKeyDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2286">The <xref:System.Windows.Forms.Control.OnKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2287">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2287">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2288">次のコード例では、<xref:System.Windows.Forms.Control.KeyDown>イベントをコントロールに入力した文字の種類を判断します。</span><span class="sxs-lookup"><span data-stu-id="97318-2288">The following code example uses the <xref:System.Windows.Forms.Control.KeyDown> event to determine the type of character entered into the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2289">派生クラスで <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2289">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit&#xA;override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="control.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2290">イベント データを格納している <see cref="T:System.Windows.Forms.KeyPressEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2290">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2291"><see cref="E:System.Windows.Forms.Control.KeyPress" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2291">Raises the <see cref="E:System.Windows.Forms.Control.KeyPress" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2292">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2292">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2293">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2293">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2294"><xref:System.Windows.Forms.Control.OnKeyPress%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2294">The <xref:System.Windows.Forms.Control.OnKeyPress%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2295">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2295">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2296">次のコード例では、<xref:System.Windows.Forms.Control.KeyPress>文字がコントロールに入力するを防ぐためにイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2296">The following code example uses the <xref:System.Windows.Forms.Control.KeyPress> event to prevent characters from entering the control.</span></span>  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2297">派生クラスで <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2297">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected virtual void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit&#xA;override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2298">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2298">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2299"><see cref="E:System.Windows.Forms.Control.KeyUp" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2299">Raises the <see cref="E:System.Windows.Forms.Control.KeyUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2300">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2300">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2301">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2301">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2302"><xref:System.Windows.Forms.Control.OnKeyUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2302">The <xref:System.Windows.Forms.Control.OnKeyUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2303">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2303">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2304">次のコード例では、<xref:System.Windows.Forms.Control.KeyUp>イベントを<xref:System.Windows.Forms.Help>をユーザーにポップアップ スタイルのヘルプを表示するクラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2304">The following code example uses the <xref:System.Windows.Forms.Control.KeyUp> event with the <xref:System.Windows.Forms.Help> class to display pop-up style help to the user.</span></span>  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2305">派生クラスで <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2305">When overriding <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="OnLayout">
      <MemberSignature Language="C#" Value="protected virtual void OnLayout (System.Windows.Forms.LayoutEventArgs levent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLayout(class System.Windows.Forms.LayoutEventArgs levent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLayout (levent As LayoutEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLayout(System::Windows::Forms::LayoutEventArgs ^ levent);" />
      <MemberSignature Language="F#" Value="abstract member OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit&#xA;override this.OnLayout : System.Windows.Forms.LayoutEventArgs -&gt; unit" Usage="control.OnLayout levent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="levent" Type="System.Windows.Forms.LayoutEventArgs" />
      </Parameters>
      <Docs>
        <param name="levent"><span data-ttu-id="97318-2306">イベント データを格納している <see cref="T:System.Windows.Forms.LayoutEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2306">A <see cref="T:System.Windows.Forms.LayoutEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2307"><see cref="E:System.Windows.Forms.Control.Layout" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2307">Raises the <see cref="E:System.Windows.Forms.Control.Layout" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2308">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2308">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2309">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2309">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2310"><xref:System.Windows.Forms.Control.OnLayout%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2310">The <xref:System.Windows.Forms.Control.OnLayout%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2311">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2311">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2312">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" />メソッドの一般的なドッキングと固定の関数を使用し、登録されているデリゲートがイベントを受け取るようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-2312">When overriding <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLayout(System.Windows.Forms.LayoutEventArgs)" /> method so that registered delegates receive the event and for typical docking and anchoring functions to work.</span></span> <span data-ttu-id="97318-2313">派生クラスでは、任意のカスタム レイアウト ロジックを実行するには、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2313">Derived classes should override this method to do any custom layout logic.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="OnLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLeave : EventArgs -&gt; unit&#xA;override this.OnLeave : EventArgs -&gt; unit" Usage="control.OnLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2314">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2314">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2315"><see cref="E:System.Windows.Forms.Control.Leave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2315">Raises the <see cref="E:System.Windows.Forms.Control.Leave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2316">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2316">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2317">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2317">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2318"><xref:System.Windows.Forms.Control.OnLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2318">The <xref:System.Windows.Forms.Control.OnLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2319">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2319">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2320">次のコード例では、<xref:System.Windows.Forms.Control.Leave>コントロールを元の状態にリセットするイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-2320">The following code example uses the <xref:System.Windows.Forms.Control.Leave> event to reset a control to its former state.</span></span>  
  
 [!code-cpp[Control.Enter#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Enter/CPP/form1.cpp#1)]
 [!code-csharp[Control.Enter#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Enter/CS/form1.cs#1)]
 [!code-vb[Control.Enter#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Enter/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2321">派生クラスで <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2321">When overriding <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Leave" />
      </Docs>
    </Member>
    <Member MemberName="OnLocationChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnLocationChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLocationChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLocationChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLocationChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLocationChanged : EventArgs -&gt; unit&#xA;override this.OnLocationChanged : EventArgs -&gt; unit" Usage="control.OnLocationChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2322">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2322">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2323"><see cref="E:System.Windows.Forms.Control.LocationChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2323">Raises the <see cref="E:System.Windows.Forms.Control.LocationChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2324">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2324">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2325">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2325">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2326"><xref:System.Windows.Forms.Control.OnLocationChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2326">The <xref:System.Windows.Forms.Control.OnLocationChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2327">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2327">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2328">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2328">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2329"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2329">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName* `Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2330">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2330">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2331">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2331">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2332">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2332">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2333">派生クラスで <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2333">When overriding <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLocationChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.LocationChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="OnLostFocus">
      <MemberSignature Language="C#" Value="protected virtual void OnLostFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnLostFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnLostFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnLostFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnLostFocus : EventArgs -&gt; unit&#xA;override this.OnLostFocus : EventArgs -&gt; unit" Usage="control.OnLostFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2334">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2334">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2335"><see cref="E:System.Windows.Forms.Control.LostFocus" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2335">Raises the <see cref="E:System.Windows.Forms.Control.LostFocus" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2336">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2336">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2337">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2337">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2338"><xref:System.Windows.Forms.Control.OnLostFocus%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2338">The <xref:System.Windows.Forms.Control.OnLostFocus%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2339">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2339">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2340">派生クラスで <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2340">When overriding <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnLostFocus(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.LostFocus" />
      </Docs>
    </Member>
    <Member MemberName="OnMarginChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMarginChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMarginChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMarginChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMarginChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMarginChanged : EventArgs -&gt; unit&#xA;override this.OnMarginChanged : EventArgs -&gt; unit" Usage="control.OnMarginChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2341">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2341">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2342"><see cref="E:System.Windows.Forms.Control.MarginChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2342">Raises the <see cref="E:System.Windows.Forms.Control.MarginChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2343">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2343">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2344">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2344">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2345"><xref:System.Windows.Forms.Control.OnMarginChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2345">The <xref:System.Windows.Forms.Control.OnMarginChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2346">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2346">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2347">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2347">When overriding <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMarginChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseCaptureChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseCaptureChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseCaptureChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseCaptureChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseCaptureChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseCaptureChanged : EventArgs -&gt; unit&#xA;override this.OnMouseCaptureChanged : EventArgs -&gt; unit" Usage="control.OnMouseCaptureChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2348">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2348">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2349"><see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2349">Raises the <see cref="E:System.Windows.Forms.Control.MouseCaptureChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2350">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2350">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2351">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2351">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2352"><xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2352">The <xref:System.Windows.Forms.Control.OnMouseCaptureChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2353">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2353">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2354">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2354">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseCaptureChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2355">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2355">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2356"><see cref="E:System.Windows.Forms.Control.MouseClick" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2356">Raises the <see cref="E:System.Windows.Forms.Control.MouseClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2357">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2357">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2358">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2358">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2359"><xref:System.Windows.Forms.Control.OnMouseClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2359">The <xref:System.Windows.Forms.Control.OnMouseClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2360">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2360">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2361">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2361">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDoubleClick">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDoubleClick (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDoubleClick(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDoubleClick (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDoubleClick(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDoubleClick : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDoubleClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2362">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2362">An <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2363"><see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2363">Raises the <see cref="E:System.Windows.Forms.Control.MouseDoubleClick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2364">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2364">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2365">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2365">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2366"><xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2366">The <xref:System.Windows.Forms.Control.OnMouseDoubleClick%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2367">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2367">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2368">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2368">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDoubleClick(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseDown">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseDown (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseDown(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseDown (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseDown(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseDown : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2369">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2369">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2370"><see cref="E:System.Windows.Forms.Control.MouseDown" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2370">Raises the <see cref="E:System.Windows.Forms.Control.MouseDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2371">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2371">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2372">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2372">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2373"><xref:System.Windows.Forms.Control.OnMouseDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2373">The <xref:System.Windows.Forms.Control.OnMouseDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2374">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2374">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2375">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2375">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseDown(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseDown" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseEnter">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseEnter (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseEnter(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseEnter (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseEnter(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseEnter : EventArgs -&gt; unit&#xA;override this.OnMouseEnter : EventArgs -&gt; unit" Usage="control.OnMouseEnter e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2376">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2376">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2377"><see cref="E:System.Windows.Forms.Control.MouseEnter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2377">Raises the <see cref="E:System.Windows.Forms.Control.MouseEnter" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2378">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2378">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2379">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2379">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2380"><xref:System.Windows.Forms.Control.OnMouseEnter%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2380">The <xref:System.Windows.Forms.Control.OnMouseEnter%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2381">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2381">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2382">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2382">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseEnter(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseEnter" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseHover : EventArgs -&gt; unit&#xA;override this.OnMouseHover : EventArgs -&gt; unit" Usage="control.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2383">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2383">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2384"><see cref="E:System.Windows.Forms.Control.MouseHover" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2384">Raises the <see cref="E:System.Windows.Forms.Control.MouseHover" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2385">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2385">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2386">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2386">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2387"><xref:System.Windows.Forms.Control.OnMouseHover%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2387">The <xref:System.Windows.Forms.Control.OnMouseHover%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2388">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2388">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2389">次のコード例は、オーバーライドする方法を示します、<xref:System.Windows.Forms.Control.OnMouseHover%2A>と<xref:System.Windows.Forms.Control.OnMouseMove%2A>派生クラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2389">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="97318-2390">例を実行するには、新しいフォームで次のコードを貼り付けしてこのクラスは、フォームの後、同じファイルを形成を貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-2390">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="97318-2391">型のボタンを追加する`FunButton`をフォームにします。</span><span class="sxs-lookup"><span data-stu-id="97318-2391">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2392">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2392">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseHover(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseHover" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseLeave : EventArgs -&gt; unit&#xA;override this.OnMouseLeave : EventArgs -&gt; unit" Usage="control.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2393">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2393">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2394"><see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2394">Raises the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2395">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2395">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2396">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2396">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2397"><xref:System.Windows.Forms.Control.OnMouseLeave%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2397">The <xref:System.Windows.Forms.Control.OnMouseLeave%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2398">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2398">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2399">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2399">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseLeave(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseLeave" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseMove (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseMove(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseMove (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseMove(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseMove : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2400">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2400">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2401"><see cref="E:System.Windows.Forms.Control.MouseMove" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2401">Raises the <see cref="E:System.Windows.Forms.Control.MouseMove" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2402">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2402">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2403">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2403">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2404"><xref:System.Windows.Forms.Control.OnMouseMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2404">The <xref:System.Windows.Forms.Control.OnMouseMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2405">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2405">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2406">次のコード例は、オーバーライドする方法を示します、<xref:System.Windows.Forms.Control.OnMouseHover%2A>と<xref:System.Windows.Forms.Control.OnMouseMove%2A>派生クラスのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2406">The following code example demonstrates how to override the <xref:System.Windows.Forms.Control.OnMouseHover%2A> and <xref:System.Windows.Forms.Control.OnMouseMove%2A> methods in a derived class.</span></span> <span data-ttu-id="97318-2407">例を実行するには、新しいフォームで次のコードを貼り付けしてこのクラスは、フォームの後、同じファイルを形成を貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-2407">To run the example, paste the following code in a new form and paste this class, forming the same file, after the form.</span></span> <span data-ttu-id="97318-2408">型のボタンを追加する`FunButton`をフォームにします。</span><span class="sxs-lookup"><span data-stu-id="97318-2408">Add a button of type `FunButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ControlDefaultProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ControlDefaultProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2409">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2409">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseMove(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseMove" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseUp (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseUp (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2410">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2410">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2411"><see cref="E:System.Windows.Forms.Control.MouseUp" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2411">Raises the <see cref="E:System.Windows.Forms.Control.MouseUp" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2412">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2412">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2413">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2413">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2414"><xref:System.Windows.Forms.Control.OnMouseUp%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2414">The <xref:System.Windows.Forms.Control.OnMouseUp%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2415">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2415">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2416">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2416">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseUp(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseUp" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseWheel">
      <MemberSignature Language="C#" Value="protected virtual void OnMouseWheel (System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMouseWheel(class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMouseWheel (e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMouseWheel(System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit&#xA;override this.OnMouseWheel : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.OnMouseWheel e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2417">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2417">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2418"><see cref="E:System.Windows.Forms.Control.MouseWheel" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2418">Raises the <see cref="E:System.Windows.Forms.Control.MouseWheel" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2419">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2419">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2420">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2420">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2421"><xref:System.Windows.Forms.Control.OnMouseWheel%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2421">The <xref:System.Windows.Forms.Control.OnMouseWheel%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2422">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2422">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2423">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2423">When overriding <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMouseWheel(System.Windows.Forms.MouseEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.MouseWheel" />
        <altmember cref="T:System.Windows.Forms.MouseEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnMove">
      <MemberSignature Language="C#" Value="protected virtual void OnMove (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMove(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMove (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMove(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMove : EventArgs -&gt; unit&#xA;override this.OnMove : EventArgs -&gt; unit" Usage="control.OnMove e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2424">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2424">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2425"><see cref="E:System.Windows.Forms.Control.Move" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2425">Raises the <see cref="E:System.Windows.Forms.Control.Move" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2426">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2426">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2427">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2427">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2428"><xref:System.Windows.Forms.Control.OnMove%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2428">The <xref:System.Windows.Forms.Control.OnMove%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2429">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2429">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2430">次のコード例では、<xref:System.Windows.Forms.Control.Move>フォームの位置を画面座標、フォームのキャプション バーに表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-2430">The following code example uses the <xref:System.Windows.Forms.Control.Move> event to display the location of the form in screen coordinates on the caption bar of the form.</span></span>  
  
 [!code-cpp[Control.Move#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Move/CPP/form1.cpp#1)]
 [!code-csharp[Control.Move#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Move/CS/form1.cs#1)]
 [!code-vb[Control.Move#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Move/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2431">派生クラスで <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2431">When overriding <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnMove(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Move" />
      </Docs>
    </Member>
    <Member MemberName="OnNotifyMessage">
      <MemberSignature Language="C#" Value="protected virtual void OnNotifyMessage (System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnNotifyMessage(valuetype System.Windows.Forms.Message m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnNotifyMessage (m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnNotifyMessage(System::Windows::Forms::Message m);" />
      <MemberSignature Language="F#" Value="abstract member OnNotifyMessage : System.Windows.Forms.Message -&gt; unit&#xA;override this.OnNotifyMessage : System.Windows.Forms.Message -&gt; unit" Usage="control.OnNotifyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="97318-2432">Windows メッセージを表す <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2432">A <see cref="T:System.Windows.Forms.Message" /> that represents the Windows message.</span></span></param>
        <summary><span data-ttu-id="97318-2433">コントロールに Windows メッセージを通知します。</span><span class="sxs-lookup"><span data-stu-id="97318-2433">Notifies the control of Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2434"><xref:System.Windows.Forms.Control.OnNotifyMessage%2A>場合、メソッドが呼び出されたコントロールの`EnableNotifyMessage`でスタイル ビットが設定されて<xref:System.Windows.Forms.ControlStyles>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2434">The <xref:System.Windows.Forms.Control.OnNotifyMessage%2A> method is called if the control's `EnableNotifyMessage` style bit is set in <xref:System.Windows.Forms.ControlStyles>.</span></span> <span data-ttu-id="97318-2435">`EnableNotifyMessage`でスタイル<xref:System.Windows.Forms.ControlStyles>時に通知が制御できるように、<xref:System.Windows.Forms.Control.WndProc%2A>メソッドは、Windows メッセージを受信します。</span><span class="sxs-lookup"><span data-stu-id="97318-2435">The `EnableNotifyMessage` style in <xref:System.Windows.Forms.ControlStyles> enables the control to be notified when the <xref:System.Windows.Forms.Control.WndProc%2A> method receives a Windows message.</span></span> <span data-ttu-id="97318-2436">この方法では、部分的に信頼されたコントロールにメッセージを変更すること Windows メッセージをリッスンできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2436">With this method, semi-trusted controls can listen for Windows messages without enabling them to modify the message.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2437">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />、派生クラスで呼び出す基本クラスの<see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" />メソッドの最初の実装がないため必要はありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2437">When overriding <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> in a derived class, calling the base class's <see cref="M:System.Windows.Forms.Control.OnNotifyMessage(System.Windows.Forms.Message)" /> method is not necessary because there is no initial implementation.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaddingChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPaddingChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaddingChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaddingChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaddingChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaddingChanged : EventArgs -&gt; unit&#xA;override this.OnPaddingChanged : EventArgs -&gt; unit" Usage="control.OnPaddingChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2438">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2438">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2439"><see cref="E:System.Windows.Forms.Control.PaddingChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2439">Raises the <see cref="E:System.Windows.Forms.Control.PaddingChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2440">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2440">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2441">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2441">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2442"><xref:System.Windows.Forms.Control.OnPaddingChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2442">The <xref:System.Windows.Forms.Control.OnPaddingChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2443">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2443">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2444">派生クラスで <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2444">When overriding <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaddingChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPaint">
      <MemberSignature Language="C#" Value="protected virtual void OnPaint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2445">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2445">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2446"><see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2446">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2447">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2447">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2448">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2448">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2449"><xref:System.Windows.Forms.Control.OnPaint%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2449">The <xref:System.Windows.Forms.Control.OnPaint%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2450">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2450">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2451">次のコード例では、イメージまたはイメージ ファイルをフォームにドラッグしが削除された時点で表示させるユーザーができるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-2451">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on which it is dropped.</span></span> <span data-ttu-id="97318-2452"><xref:System.Windows.Forms.Control.OnPaint%2A>メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画する。 それ以外の場合、イメージは、次回の再描画されるまで保持はのみです。</span><span class="sxs-lookup"><span data-stu-id="97318-2452">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="97318-2453"><xref:System.Windows.Forms.Control.DragEnter>イベント処理メソッドをフォームにドラッグされるデータの種類を決定および適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-2453">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="97318-2454"><xref:System.Windows.Forms.Control.DragDrop>場合イベント処理メソッドに、フォームのイメージが表示されます、<xref:System.Drawing.Image>データから作成できます。</span><span class="sxs-lookup"><span data-stu-id="97318-2454">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="97318-2455"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>値は、画面座標、例では、<xref:System.Windows.Forms.Control.PointToClient%2A>クライアント座標に変換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2455">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2456">派生クラスで <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2456">When overriding <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Paint" />
      </Docs>
    </Member>
    <Member MemberName="OnPaintBackground">
      <MemberSignature Language="C#" Value="protected virtual void OnPaintBackground (System.Windows.Forms.PaintEventArgs pevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPaintBackground(class System.Windows.Forms.PaintEventArgs pevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPaintBackground (pevent As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPaintBackground(System::Windows::Forms::PaintEventArgs ^ pevent);" />
      <MemberSignature Language="F#" Value="abstract member OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPaintBackground : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPaintBackground pevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pevent" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="pevent"><span data-ttu-id="97318-2457">描画するコントロールに関する情報を格納する <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2457">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains information about the control to paint.</span></span></param>
        <summary><span data-ttu-id="97318-2458">コントロールの背景を描画します。</span><span class="sxs-lookup"><span data-stu-id="97318-2458">Paints the background of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2459"><xref:System.Windows.Forms.Control.OnPaintBackground%2A> Windows のバック グラウンドの処理を有効に派生クラスのメソッドが要求を消去します。</span><span class="sxs-lookup"><span data-stu-id="97318-2459">The <xref:System.Windows.Forms.Control.OnPaintBackground%2A> method enables derived classes to handle Windows background erase requests.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2460">クラスを継承すると、windows から背景の消去要求を処理するには、このメソッドをオーバーライドする必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2460">Inheriting classes should override this method to handle the erase background request from windows.</span></span> <span data-ttu-id="97318-2461">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />派生クラスでは、基本クラスを呼び出す必要<see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2461">When overriding <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" /> in a derived class it is not necessary to call the base class's <see cref="M:System.Windows.Forms.Control.OnPaintBackground(System.Windows.Forms.PaintEventArgs)" />.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.InvokePaintBackground(System.Windows.Forms.Control,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackColorChanged : EventArgs -&gt; unit" Usage="control.OnParentBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2462">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2462">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2463">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BackColor" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2463">Raises the <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2464">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2464">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2465">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2465">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2466"><xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2466">The <xref:System.Windows.Forms.Control.OnParentBackColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2467">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2467">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2468">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2468">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2469"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2469">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2470">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2470">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2471">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2471">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2472">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2472">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2473">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2473">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBackgroundImageChanged : EventArgs -&gt; unit&#xA;override this.OnParentBackgroundImageChanged : EventArgs -&gt; unit" Usage="control.OnParentBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2474">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2474">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2475">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BackgroundImage" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2475">Raises the <see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BackgroundImage" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2476">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2476">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2477">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2477">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2478"><xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2478">The <xref:System.Windows.Forms.Control.OnParentBackgroundImageChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2479">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2479">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2480">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2480">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2481"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2481">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2482">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2482">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2483">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2483">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2484">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2484">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2485">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2485">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBackgroundImageChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BackgroundImageChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentBindingContextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentBindingContextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentBindingContextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentBindingContextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentBindingContextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentBindingContextChanged : EventArgs -&gt; unit&#xA;override this.OnParentBindingContextChanged : EventArgs -&gt; unit" Usage="control.OnParentBindingContextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2486">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2486">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2487">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.BindingContext" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2487">Raises the <see cref="E:System.Windows.Forms.Control.BindingContextChanged" /> event when the <see cref="P:System.Windows.Forms.Control.BindingContext" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2488">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2488">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2489">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2489">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2490"><xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2490">The <xref:System.Windows.Forms.Control.OnParentBindingContextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2491">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2491">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2492">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2492">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2493"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2493">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2494">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2494">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2495">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2495">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2496">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2496">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2497">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2497">When overriding <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentBindingContextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.BindingContextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentChanged : EventArgs -&gt; unit&#xA;override this.OnParentChanged : EventArgs -&gt; unit" Usage="control.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2498">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2498">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2499"><see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2499">Raises the <see cref="E:System.Windows.Forms.Control.ParentChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2500">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2500">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2501">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2501">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2502"><xref:System.Windows.Forms.Control.OnParentChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2502">The <xref:System.Windows.Forms.Control.OnParentChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2503">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2503">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2504">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2504">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2505"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2505">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2506">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2506">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2507">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2507">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2508">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2508">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2509">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2509">When overriding <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ParentChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentCursorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentCursorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentCursorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentCursorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentCursorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentCursorChanged : EventArgs -&gt; unit&#xA;override this.OnParentCursorChanged : EventArgs -&gt; unit" Usage="control.OnParentCursorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2510">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2510">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2511"><see cref="E:System.Windows.Forms.Control.CursorChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2511">Raises the <see cref="E:System.Windows.Forms.Control.CursorChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2512">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2512">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2513">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2513">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2514"><xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2514">The <xref:System.Windows.Forms.Control.OnParentCursorChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2515">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2515">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2516">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2516">When overriding <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentCursorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnParentEnabledChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentEnabledChanged : EventArgs -&gt; unit&#xA;override this.OnParentEnabledChanged : EventArgs -&gt; unit" Usage="control.OnParentEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2517">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2517">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2518">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Enabled" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2518">Raises the <see cref="E:System.Windows.Forms.Control.EnabledChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Enabled" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2519">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2519">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2520">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2520">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2521"><xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2521">The <xref:System.Windows.Forms.Control.OnParentEnabledChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2522">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2522">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2523">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2523">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2524"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2524">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2525">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2525">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2526">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2526">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2527">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2527">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2528">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2528">When overriding <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentEnabledChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.EnabledChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentFontChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentFontChanged : EventArgs -&gt; unit&#xA;override this.OnParentFontChanged : EventArgs -&gt; unit" Usage="control.OnParentFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2529">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2529">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2530">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.FontChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Font" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2530">Raises the <see cref="E:System.Windows.Forms.Control.FontChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Font" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2531">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2531">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2532">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2532">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2533"><xref:System.Windows.Forms.Control.OnParentFontChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2533">The <xref:System.Windows.Forms.Control.OnParentFontChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2534">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2534">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2535">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2535">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2536"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2536">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2537">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2537">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2538">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2538">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2539">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2539">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2540">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2540">When overriding <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentFontChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.FontChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentForeColorChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentForeColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentForeColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentForeColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentForeColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentForeColorChanged : EventArgs -&gt; unit&#xA;override this.OnParentForeColorChanged : EventArgs -&gt; unit" Usage="control.OnParentForeColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2541">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2541">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2542">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.ForeColor" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2542">Raises the <see cref="E:System.Windows.Forms.Control.ForeColorChanged" /> event when the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2543">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2543">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2544">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2544">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2545"><xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2545">The <xref:System.Windows.Forms.Control.OnParentForeColorChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2546">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2546">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2547">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2547">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2548"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2548">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2549">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2549">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2550">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2550">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2551">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2551">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2552">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2552">When overriding <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentForeColorChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.ForeColorChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnParentRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnParentRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2553">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2553">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2554">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.RightToLeft" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2554">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2555">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2555">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2556">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2556">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2557"><xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2557">The <xref:System.Windows.Forms.Control.OnParentRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2558">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2558">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2559">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2559">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2560"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2560">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2561">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2561">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2562">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2562">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2563">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2563">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2564">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2564">When overriding <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnParentVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnParentVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParentVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParentVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParentVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnParentVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnParentVisibleChanged : EventArgs -&gt; unit" Usage="control.OnParentVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2565">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2565">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2566">コントロールのコンテナーの <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> プロパティ値が変更された場合に、<see cref="P:System.Windows.Forms.Control.Visible" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2566">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value of the control's container changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2567">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2567">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2568">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2568">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2569"><xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2569">The <xref:System.Windows.Forms.Control.OnParentVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2570">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2570">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2571">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2571">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2572"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2572">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2573">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2573">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2574">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2574">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2575">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2575">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2576">派生クラスで <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2576">When overriding <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnParentVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnPreviewKeyDown">
      <MemberSignature Language="C#" Value="protected virtual void OnPreviewKeyDown (System.Windows.Forms.PreviewKeyDownEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPreviewKeyDown(class System.Windows.Forms.PreviewKeyDownEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPreviewKeyDown (e As PreviewKeyDownEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPreviewKeyDown(System::Windows::Forms::PreviewKeyDownEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit&#xA;override this.OnPreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventArgs -&gt; unit" Usage="control.OnPreviewKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PreviewKeyDownEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2577">イベント データを格納している <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2577">A <see cref="T:System.Windows.Forms.PreviewKeyDownEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2578"><see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2578">Raises the <see cref="E:System.Windows.Forms.Control.PreviewKeyDown" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2579">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2579">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2580">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2580">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2581"><xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2581">The <xref:System.Windows.Forms.Control.OnPreviewKeyDown%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2582">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2582">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2583">派生クラスで <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2583">When overriding <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnPreviewKeyDown(System.Windows.Forms.PreviewKeyDownEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnPrint">
      <MemberSignature Language="C#" Value="protected virtual void OnPrint (System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPrint(class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnPrint(System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPrint (e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPrint(System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit&#xA;override this.OnPrint : System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.OnPrint e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2584">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2584">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2585"><see cref="E:System.Windows.Forms.Control.Paint" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2585">Raises the <see cref="E:System.Windows.Forms.Control.Paint" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2586">場合、`UserPaint`のビット、<xref:System.Windows.Forms.ControlStyles>が設定を上書きできます<xref:System.Windows.Forms.Control.OnPrint%2A>レイヤーの描画を行う。</span><span class="sxs-lookup"><span data-stu-id="97318-2586">If the `UserPaint` bit of the <xref:System.Windows.Forms.ControlStyles> is set, you can override <xref:System.Windows.Forms.Control.OnPrint%2A> to do layered painting.</span></span> <span data-ttu-id="97318-2587">詳細については、「<xref:System.Windows.Forms.Control.SetStyle%2A>」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2587">See <xref:System.Windows.Forms.Control.SetStyle%2A> for more information.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="97318-2588"><paramref name="e" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-2588">The <paramref name="e" /> parameter is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Windows.Forms.Control.DrawToBitmap(System.Drawing.Bitmap,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="OnQueryContinueDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnQueryContinueDrag (System.Windows.Forms.QueryContinueDragEventArgs qcdevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnQueryContinueDrag(class System.Windows.Forms.QueryContinueDragEventArgs qcdevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnQueryContinueDrag (qcdevent As QueryContinueDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnQueryContinueDrag(System::Windows::Forms::QueryContinueDragEventArgs ^ qcdevent);" />
      <MemberSignature Language="F#" Value="abstract member OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit&#xA;override this.OnQueryContinueDrag : System.Windows.Forms.QueryContinueDragEventArgs -&gt; unit" Usage="control.OnQueryContinueDrag qcdevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="qcdevent" Type="System.Windows.Forms.QueryContinueDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="qcdevent"><span data-ttu-id="97318-2589">イベント データを格納している <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2589">A <see cref="T:System.Windows.Forms.QueryContinueDragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2590"><see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2590">Raises the <see cref="E:System.Windows.Forms.Control.QueryContinueDrag" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2591">このメソッドが繰り返しによって呼び出されますドラッグが開始された後、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]ドラッグ操作が取り消されたか完了するまでです。</span><span class="sxs-lookup"><span data-stu-id="97318-2591">After dragging has begun, this method is called repeatedly by the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] until the drag operation is either canceled or completed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-2592">ドラッグ操作が取り消された、ドロップが行われる点を変更する場合は、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="97318-2592">Override this method if you want to change the point at which dragging is canceled or at which a drop occurs.</span></span>  
  
 <span data-ttu-id="97318-2593">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2593">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2594">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2594">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2595"><xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2595">The <xref:System.Windows.Forms.Control.OnQueryContinueDrag%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2596">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2596">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2597">派生クラスで <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2597">When overriding <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.QueryContinueDrag" />
      </Docs>
    </Member>
    <Member MemberName="OnRegionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRegionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRegionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRegionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRegionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRegionChanged : EventArgs -&gt; unit&#xA;override this.OnRegionChanged : EventArgs -&gt; unit" Usage="control.OnRegionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2598">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2598">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2599"><see cref="E:System.Windows.Forms.Control.RegionChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2599">Raises the <see cref="E:System.Windows.Forms.Control.RegionChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2600">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2600">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2601">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2601">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2602"><xref:System.Windows.Forms.Control.OnRegionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2602">The <xref:System.Windows.Forms.Control.OnRegionChanged%2A> method also allows derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2603">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2603">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2604">派生クラスで <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2604">When overriding <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRegionChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected virtual void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnResize : EventArgs -&gt; unit&#xA;override this.OnResize : EventArgs -&gt; unit" Usage="control.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2605">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2605">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2606"><see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2606">Raises the <see cref="E:System.Windows.Forms.Control.Resize" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2607">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2607">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2608">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2608">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2609"><xref:System.Windows.Forms.Control.OnResize%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2609">The <xref:System.Windows.Forms.Control.OnResize%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2610">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2610">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2611">派生クラスで <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2611">When overriding <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method so that registered delegates receive the event.</span></span> <span data-ttu-id="97318-2612"><see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />構築時に、メソッドを呼び出すことができますをオーバーライドする場合、<see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />コントロールのコンス トラクターが呼び出される前に呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-2612">The <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> method can be called during construction, so if you override <see cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" /> it can be called before the control constructor is called.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRightToLeftChanged : EventArgs -&gt; unit&#xA;override this.OnRightToLeftChanged : EventArgs -&gt; unit" Usage="control.OnRightToLeftChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2613">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2613">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2614"><see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2614">Raises the <see cref="E:System.Windows.Forms.Control.RightToLeftChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2615">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2615">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2616">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2616">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2617"><xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2617">The <xref:System.Windows.Forms.Control.OnRightToLeftChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2618">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2618">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2619">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2619">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2620"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2620">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2621">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2621">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2622">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2622">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2623">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2623">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2624">派生クラスで <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2624">When overriding <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.RightToLeftChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnSizeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSizeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSizeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSizeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSizeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSizeChanged : EventArgs -&gt; unit&#xA;override this.OnSizeChanged : EventArgs -&gt; unit" Usage="control.OnSizeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2625">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2625">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2626"><see cref="E:System.Windows.Forms.Control.SizeChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2626">Raises the <see cref="E:System.Windows.Forms.Control.SizeChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2627">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2627">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2628">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2628">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2629"><xref:System.Windows.Forms.Control.OnSizeChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2629">The <xref:System.Windows.Forms.Control.OnSizeChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2630">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2630">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2631">派生クラスで <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2631">When overriding <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.SizeChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnStyleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnStyleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnStyleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnStyleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnStyleChanged : EventArgs -&gt; unit&#xA;override this.OnStyleChanged : EventArgs -&gt; unit" Usage="control.OnStyleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2632">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2632">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2633"><see cref="E:System.Windows.Forms.Control.StyleChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2633">Raises the <see cref="E:System.Windows.Forms.Control.StyleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2634">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2634">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2635">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2635">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2636"><xref:System.Windows.Forms.Control.OnStyleChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2636">The <xref:System.Windows.Forms.Control.OnStyleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2637">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2637">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2638">派生クラスで <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2638">When overriding <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.StyleChanged" />
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSystemColorsChanged : EventArgs -&gt; unit&#xA;override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="control.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2639">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2639">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2640"><see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2640">Raises the <see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2641">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2641">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2642">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2642">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2643"><xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2643">The <xref:System.Windows.Forms.Control.OnSystemColorsChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2644">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2644">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2645">派生クラスで <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2645">When overriding <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.SystemColorsChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabIndexChanged : EventArgs -&gt; unit&#xA;override this.OnTabIndexChanged : EventArgs -&gt; unit" Usage="control.OnTabIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2646">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2646">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2647"><see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2647">Raises the <see cref="E:System.Windows.Forms.Control.TabIndexChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2648">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2648">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2649">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2649">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2650"><xref:System.Windows.Forms.Control.OnTabIndexChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2650">The <xref:System.Windows.Forms.Control.OnTabIndexChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2651">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2651">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2652">派生クラスで <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2652">When overriding <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TabIndexChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTabStopChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTabStopChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTabStopChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTabStopChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTabStopChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTabStopChanged : EventArgs -&gt; unit&#xA;override this.OnTabStopChanged : EventArgs -&gt; unit" Usage="control.OnTabStopChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2653">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2653">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2654"><see cref="E:System.Windows.Forms.Control.TabStopChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2654">Raises the <see cref="E:System.Windows.Forms.Control.TabStopChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2655">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2655">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2656">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2656">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2657"><xref:System.Windows.Forms.Control.OnTabStopChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2657">The <xref:System.Windows.Forms.Control.OnTabStopChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2658">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2658">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2659">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2659">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2660"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2660">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2661">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2661">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2662">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2662">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2663">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2663">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2664">派生クラスで <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2664">When overriding <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TabStopChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextChanged : EventArgs -&gt; unit&#xA;override this.OnTextChanged : EventArgs -&gt; unit" Usage="control.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2665">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2665">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2666"><see cref="E:System.Windows.Forms.Control.TextChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2666">Raises the <see cref="E:System.Windows.Forms.Control.TextChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2667">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2667">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2668">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2668">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2669"><xref:System.Windows.Forms.Control.OnTextChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2669">The <xref:System.Windows.Forms.Control.OnTextChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2670">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2670">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2671">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2671">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2672">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2672">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2673">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2673">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2674">派生クラスで <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2674">When overriding <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidated">
      <MemberSignature Language="C#" Value="protected virtual void OnValidated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidated : EventArgs -&gt; unit&#xA;override this.OnValidated : EventArgs -&gt; unit" Usage="control.OnValidated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2675">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2675">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2676"><see cref="E:System.Windows.Forms.Control.Validated" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2676">Raises the <see cref="E:System.Windows.Forms.Control.Validated" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2677">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2677">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2678">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2678">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2679"><xref:System.Windows.Forms.Control.OnValidated%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2679">The <xref:System.Windows.Forms.Control.OnValidated%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2680">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2680">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2681">派生クラスで <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2681">When overriding <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected virtual void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit&#xA;override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="control.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2682">イベント データを格納している <see cref="T:System.ComponentModel.CancelEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2682">A <see cref="T:System.ComponentModel.CancelEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2683"><see cref="E:System.Windows.Forms.Control.Validating" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2683">Raises the <see cref="E:System.Windows.Forms.Control.Validating" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2684">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2684">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2685">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2685">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2686"><xref:System.Windows.Forms.Control.OnValidating%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2686">The <xref:System.Windows.Forms.Control.OnValidating%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2687">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2687">This is the preferred technique for handling the event in a derived class.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2688">派生クラスで <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2688">When overriding <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="OnVisibleChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVisibleChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVisibleChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVisibleChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVisibleChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVisibleChanged : EventArgs -&gt; unit&#xA;override this.OnVisibleChanged : EventArgs -&gt; unit" Usage="control.OnVisibleChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-2689">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2689">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2690"><see cref="E:System.Windows.Forms.Control.VisibleChanged" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2690">Raises the <see cref="E:System.Windows.Forms.Control.VisibleChanged" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2691">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2691">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="97318-2692">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2692">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 <span data-ttu-id="97318-2693"><xref:System.Windows.Forms.Control.OnVisibleChanged%2A>メソッドでは、派生クラス、デリゲートをアタッチせず、イベントを処理することもできます。</span><span class="sxs-lookup"><span data-stu-id="97318-2693">The <xref:System.Windows.Forms.Control.OnVisibleChanged%2A> method also enables derived classes to handle the event without attaching a delegate.</span></span> <span data-ttu-id="97318-2694">派生クラスでイベントを処理する場合は、この手法をお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2694">This is the preferred technique for handling the event in a derived class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2695">次のコード例は、イベント発生メソッドは、実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2695">The following code example is an event-raising method that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-2696"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ`On` *PropertyName* `Changed` 、対応するを発生させる*PropertyName* `Changed`イベント時に、*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-2696">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern `On`*PropertyName*`Changed` that raise the corresponding *PropertyName*`Changed` event when the *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-2697">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示するクラスを派生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2697">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> derived class displaying currency data.</span></span> <span data-ttu-id="97318-2698">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2698">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-2699">この例から派生したクラスである必要があります、<xref:System.Windows.Forms.TextBox>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2699">This example requires that you have a class that derives from the <xref:System.Windows.Forms.TextBox> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CPP/onpropertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/CS/onpropertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_OnPropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_OnPropertyChangedEvents/VB/onpropertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2700">派生クラスで <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> メソッドを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2700">When overriding <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" /> method so that registered delegates receive the event.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Show" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.Control.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2701">コントロールの埋め込みを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-2701">Gets or sets padding within the control.</span></span></summary>
        <value><span data-ttu-id="97318-2702">コントロールの内部の間隔特性を表す <see cref="T:System.Windows.Forms.Padding" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2702">A <see cref="T:System.Windows.Forms.Padding" /> representing the control's internal spacing characteristics.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2703">などのコンテナーの<xref:System.Windows.Forms.GroupBox>と<xref:System.Windows.Forms.TabControl>、<xref:System.Windows.Forms.Control.Padding%2A>プロパティを取得または設定、それぞれ<xref:System.Windows.Forms.Control.DisplayRectangle%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-2703">For containers such as <xref:System.Windows.Forms.GroupBox> and <xref:System.Windows.Forms.TabControl>, the <xref:System.Windows.Forms.Control.Padding%2A> property gets or sets their respective <xref:System.Windows.Forms.Control.DisplayRectangle%2A> properties.</span></span> <span data-ttu-id="97318-2704"><xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType>プロパティがその<xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-2704">The <xref:System.Windows.Forms.ScrollableControl.DockPadding%2A?displayProperty=nameWithType> property is equal to its <xref:System.Windows.Forms.Control.Padding%2A?displayProperty=nameWithType> property.</span></span>  
  
 <span data-ttu-id="97318-2705">コントロールの既定値が表示される<xref:System.Windows.Forms.Control.Padding%2A>Windows ユーザー インターフェイス ガイドラインの近くにある程度であります。</span><span class="sxs-lookup"><span data-stu-id="97318-2705">Controls receive default values for <xref:System.Windows.Forms.Control.Padding%2A> that are reasonably close to Windows user interface guidelines.</span></span> <span data-ttu-id="97318-2706">いくつかの調整は、特定のアプリケーションに必要なある可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2706">Some adjustments might still be necessary for particular applications.</span></span>  
  
 <span data-ttu-id="97318-2707">実装するすべてのコントロール<xref:System.Windows.Forms.Control.GetPreferredSize%2A>の量だけ拡大は<xref:System.Windows.Forms.Control.Padding%2A>とき<xref:System.Windows.Forms.Control.AutoSize%2A>は`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-2707">All controls that implement <xref:System.Windows.Forms.Control.GetPreferredSize%2A> are enlarged by the amount in <xref:System.Windows.Forms.Control.Padding%2A> when <xref:System.Windows.Forms.Control.AutoSize%2A> is `true`.</span></span>  
  
 <span data-ttu-id="97318-2708">次のコントロールは使用しないでください<xref:System.Windows.Forms.Control.Padding%2A>:</span><span class="sxs-lookup"><span data-stu-id="97318-2708">The following controls do not use <xref:System.Windows.Forms.Control.Padding%2A>:</span></span>  
  
-   <span data-ttu-id="97318-2709">コントロールを実装しない<xref:System.Windows.Forms.Control.AutoSize%2A>経由 <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span><span class="sxs-lookup"><span data-stu-id="97318-2709">Controls that do not implement <xref:System.Windows.Forms.Control.AutoSize%2A> through <xref:System.Windows.Forms.Control.GetPreferredSize%2A></span></span>  
  
-   <span data-ttu-id="97318-2710">カスタム コントロールを直接継承するクラス <xref:System.Windows.Forms.Control></span><span class="sxs-lookup"><span data-stu-id="97318-2710">Custom controls that directly inherit from <xref:System.Windows.Forms.Control></span></span>  
  
-   <xref:System.Windows.Forms.AxHost>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DataGridView>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MaskedTextBox>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.PropertyGrid>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.SplitContainer>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TextBoxBase>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
-   <xref:System.Windows.Forms.WebBrowser>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2711">コントロールの埋め込みが変更されたときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2711">Occurs when the control's padding changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2712">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2712">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2713">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2713">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-2714">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.PaddingChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2714">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span> <span data-ttu-id="97318-2715">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-2715">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-2716">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2716">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-2717">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2717">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-2718">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.PaddingChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2718">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.PaddingChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#41](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#41)]
 [!code-vb[System.Windows.Forms.EventExamples#41](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#41)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2719">コントロールが再描画されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2719">Occurs when the control is redrawn.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2720"><xref:System.Windows.Forms.Control.Paint>コントロールが再描画されるときにイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2720">The <xref:System.Windows.Forms.Control.Paint> event is raised when the control is redrawn.</span></span> <span data-ttu-id="97318-2721">インスタンスを渡す<xref:System.Windows.Forms.PaintEventArgs>を処理するメソッドに、<xref:System.Windows.Forms.Control.Paint>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2721">It passes an instance of <xref:System.Windows.Forms.PaintEventArgs> to the method(s) that handles the <xref:System.Windows.Forms.Control.Paint> event.</span></span>  
  
 <span data-ttu-id="97318-2722">外観が異なると、新しいカスタム コントロールまたは継承されたコントロールを作成するときに、オーバーライドすることで、コントロールをレンダリングするコードを提供する必要があります、<xref:System.Windows.Forms.Control.OnPaint%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2722">When creating a new custom control or an inherited control with a different visual appearance, you must provide code to render the control by overriding the <xref:System.Windows.Forms.Control.OnPaint%2A> method.</span></span> <span data-ttu-id="97318-2723">詳細については、次を参照してください。 [OnPaint メソッドのオーバーライド](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md)と[コントロールのカスタム描画およびレンダリング](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-2723">For more information, see [Overriding the OnPaint Method](~/docs/framework/winforms/controls/overriding-the-onpaint-method.md) and [Custom Control Painting and Rendering](~/docs/framework/winforms/controls/custom-control-painting-and-rendering.md).</span></span>  
  
 <span data-ttu-id="97318-2724">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2724">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2725">次のコード例を作成、<xref:System.Windows.Forms.PictureBox>使用してフォーム上のコントロール、<xref:System.Windows.Forms.Control.Paint>を描画するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-2725">The following code example creates a <xref:System.Windows.Forms.PictureBox> control on the form and uses the <xref:System.Windows.Forms.Control.Paint> event to draw to it.</span></span>  
  
 [!code-cpp[Control.Paint#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Paint/CPP/form1.cpp#1)]
 [!code-csharp[Control.Paint#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Paint/CS/form1.cs#1)]
 [!code-vb[Control.Paint#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Paint/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnPaint(System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Parent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Parent" />
      <MemberSignature Language="VB.NET" Value="Public Property Parent As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Parent { System::Windows::Forms::Control ^ get(); void set(System::Windows::Forms::Control ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.Control with get, set" Usage="System.Windows.Forms.Control.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2726">コントロールの親コンテナーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-2726">Gets or sets the parent container of the control.</span></span></summary>
        <value><span data-ttu-id="97318-2727">コントロールの親コントロールまたはコンテナー コントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2727">A <see cref="T:System.Windows.Forms.Control" /> that represents the parent or container control of the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2728">設定、<xref:System.Windows.Forms.Control.Parent%2A>プロパティの値を`null`からコントロールを削除、<xref:System.Windows.Forms.Control.ControlCollection>現在親コントロールの。</span><span class="sxs-lookup"><span data-stu-id="97318-2728">Setting the <xref:System.Windows.Forms.Control.Parent%2A> property value to `null` removes the control from the <xref:System.Windows.Forms.Control.ControlCollection> of its current parent control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2729">次のコード例では、<xref:System.Windows.Forms.Control.Parent%2A>プロパティと<xref:System.Windows.Forms.Control.FindForm%2A>ボタンと、フォームの親コントロールでプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-2729">The following code example uses the <xref:System.Windows.Forms.Control.Parent%2A> property and the <xref:System.Windows.Forms.Control.FindForm%2A> method to set properties on the parent control of a button and its form.</span></span>  
  
 [!code-cpp[Control.FindForm#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.FindForm/CPP/form1.cpp#1)]
 [!code-csharp[Control.FindForm#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.FindForm/CS/form1.cs#1)]
 [!code-vb[Control.FindForm#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.FindForm/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2730">このプロパティの値を取得するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2730">for all windows to get this property value.</span></span> <span data-ttu-id="97318-2731">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="97318-2731">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.Controls" />
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="ParentChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ParentChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ParentChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.ParentChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ParentChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ParentChanged;" />
      <MemberSignature Language="F#" Value="member this.ParentChanged : EventHandler " Usage="member this.ParentChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2732"><see cref="P:System.Windows.Forms.Control.Parent" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2732">Occurs when the <see cref="P:System.Windows.Forms.Control.Parent" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2733">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Parent%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-2733">This event is raised if the <xref:System.Windows.Forms.Control.Parent%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-2734">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2734">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnParentChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Parent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="PerformLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-2735">コントロールがレイアウト ロジックを子コントロールに適用するように強制します。</span><span class="sxs-lookup"><span data-stu-id="97318-2735">Forces the control to apply layout logic to child controls.</span></span></summary>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout();" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : unit -&gt; unit" Usage="control.PerformLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-2736">コントロールがレイアウト ロジックをすべての子コントロールに適用するように強制します。</span><span class="sxs-lookup"><span data-stu-id="97318-2736">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2737">場合、<xref:System.Windows.Forms.Control.SuspendLayout%2A>呼び出す前にメソッドが呼び出された、<xref:System.Windows.Forms.Control.PerformLayout%2A>メソッド、<xref:System.Windows.Forms.Control.Layout>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2737">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="97318-2738"><xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>と<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>のプロパティ、<xref:System.Windows.Forms.LayoutEventArgs>に設定されて作成`null`場合、値が指定されていない場合に、<xref:System.Windows.Forms.Control.PerformLayout%2A>メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="97318-2738">The <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created are set to `null` if no values were provided when the <xref:System.Windows.Forms.Control.PerformLayout%2A> method was called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2739">次のコード例は、<xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2739">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="97318-2740">ための方法も示しています、<xref:System.Windows.Forms.Control.Layout>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2740">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="97318-2741">この例で、`Click`のイベント ハンドラー`Button1`明示的に呼び出す<xref:System.Windows.Forms.Control.PerformLayout%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2741">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="97318-2742">`Click`のイベント ハンドラー`Button2`暗黙的に呼び出します<xref:System.Windows.Forms.Control.PerformLayout%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2742">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="97318-2743"><xref:System.Windows.Forms.Control.PerformLayout%2A> フォームが読み込まれるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2743"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="97318-2744">`Button3` 読み込まれたときの状態にコントロールを返します。</span><span class="sxs-lookup"><span data-stu-id="97318-2744">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="97318-2745">各ケースで、<xref:System.Windows.Forms.Control.Layout>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2745">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="97318-2746">これは、完全な例です。</span><span class="sxs-lookup"><span data-stu-id="97318-2746">This is a complete example.</span></span> <span data-ttu-id="97318-2747">例を実行するには、空白のフォームで次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-2747">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PerformLayout">
      <MemberSignature Language="C#" Value="public void PerformLayout (System.Windows.Forms.Control affectedControl, string affectedProperty);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformLayout(class System.Windows.Forms.Control affectedControl, string affectedProperty) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PerformLayout(System.Windows.Forms.Control,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformLayout (affectedControl As Control, affectedProperty As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformLayout(System::Windows::Forms::Control ^ affectedControl, System::String ^ affectedProperty);" />
      <MemberSignature Language="F#" Value="member this.PerformLayout : System.Windows.Forms.Control * string -&gt; unit" Usage="control.PerformLayout (affectedControl, affectedProperty)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="affectedControl" Type="System.Windows.Forms.Control" />
        <Parameter Name="affectedProperty" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="affectedControl"><span data-ttu-id="97318-2748">最近変更されたコントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2748">A <see cref="T:System.Windows.Forms.Control" /> that represents the most recently changed control.</span></span></param>
        <param name="affectedProperty"><span data-ttu-id="97318-2749">コントロールで最近変更されたプロパティの名前。</span><span class="sxs-lookup"><span data-stu-id="97318-2749">The name of the most recently changed property on the control.</span></span></param>
        <summary><span data-ttu-id="97318-2750">コントロールがレイアウト ロジックをすべての子コントロールに適用するように強制します。</span><span class="sxs-lookup"><span data-stu-id="97318-2750">Forces the control to apply layout logic to all its child controls.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2751">場合、<xref:System.Windows.Forms.Control.SuspendLayout%2A>呼び出す前にメソッドが呼び出された、<xref:System.Windows.Forms.Control.PerformLayout%2A>メソッド、<xref:System.Windows.Forms.Control.Layout>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2751">If the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method was called before calling the <xref:System.Windows.Forms.Control.PerformLayout%2A> method, the <xref:System.Windows.Forms.Control.Layout> event is suppressed.</span></span>  
  
 <span data-ttu-id="97318-2752">`affectedControl`と`affectedProperty`両方に設定できるパラメーター`null`します。</span><span class="sxs-lookup"><span data-stu-id="97318-2752">The `affectedControl` and `affectedProperty` parameters can both be set to `null`.</span></span> <span data-ttu-id="97318-2753">そのため、<xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A>と<xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A>のプロパティ、<xref:System.Windows.Forms.LayoutEventArgs>に設定するために作成`null`です。</span><span class="sxs-lookup"><span data-stu-id="97318-2753">Doing so causes the <xref:System.Windows.Forms.LayoutEventArgs.AffectedControl%2A> and <xref:System.Windows.Forms.LayoutEventArgs.AffectedProperty%2A> properties of the <xref:System.Windows.Forms.LayoutEventArgs> created to be set to `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2754">次のコード例は、<xref:System.Windows.Forms.Control.PerformLayout%2A> メソッドの使用方法を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2754">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.PerformLayout%2A> method.</span></span> <span data-ttu-id="97318-2755">ための方法も示しています、<xref:System.Windows.Forms.Control.Layout>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2755">It also demonstrates ways in which the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span> <span data-ttu-id="97318-2756">この例で、`Click`のイベント ハンドラー`Button1`明示的に呼び出す<xref:System.Windows.Forms.Control.PerformLayout%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2756">In this example, the `Click` event handler for `Button1` explicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="97318-2757">`Click`のイベント ハンドラー`Button2`暗黙的に呼び出します<xref:System.Windows.Forms.Control.PerformLayout%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2757">The `Click` event handler for `Button2` implicitly calls <xref:System.Windows.Forms.Control.PerformLayout%2A>.</span></span> <span data-ttu-id="97318-2758"><xref:System.Windows.Forms.Control.PerformLayout%2A> フォームが読み込まれるときに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2758"><xref:System.Windows.Forms.Control.PerformLayout%2A> is also called when the form is loaded.</span></span> <span data-ttu-id="97318-2759">`Button3` 読み込まれたときの状態にコントロールを返します。</span><span class="sxs-lookup"><span data-stu-id="97318-2759">`Button3` returns the control to the state it was in when loaded.</span></span> <span data-ttu-id="97318-2760">各ケースで、<xref:System.Windows.Forms.Control.Layout>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2760">In each case, the <xref:System.Windows.Forms.Control.Layout> event is raised.</span></span>  
  
 <span data-ttu-id="97318-2761">これは、完全な例です。</span><span class="sxs-lookup"><span data-stu-id="97318-2761">This is a complete example.</span></span> <span data-ttu-id="97318-2762">例を実行するには、空白のフォームで次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-2762">To run the example, paste the following code in a blank form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PerformLayout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.PerformLayout/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
        <altmember cref="P:System.Windows.Forms.Control.BackgroundImageLayout" />
      </Docs>
    </Member>
    <Member MemberName="PointToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToClient (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToClient(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToClient (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToClient(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToClient : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToClient p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="97318-2763">画面座標で示された変換対象の <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2763">The screen coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="97318-2764">指定した画面上のポイントを計算してクライアント座標を算出します。</span><span class="sxs-lookup"><span data-stu-id="97318-2764">Computes the location of the specified screen point into client coordinates.</span></span></summary>
        <returns><span data-ttu-id="97318-2765">変換された <see cref="T:System.Drawing.Point" />、<see cref="T:System.Drawing.Point" /> をクライアント座標で表す <paramref name="p" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2765">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in client coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-2766">次のコード例で、イメージまたはイメージ ファイルをフォームにドラッグして、上の点で、表示するユーザーが削除されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2766">The following code example enables the user to drag an image or image file onto the form, and have it be displayed at the point on it is dropped.</span></span> <span data-ttu-id="97318-2767"><xref:System.Windows.Forms.Control.OnPaint%2A>メソッドをオーバーライドして、フォームが描画されるたびに、イメージを再描画する。 それ以外の場合、イメージは、次回の再描画されるまで保持はのみです。</span><span class="sxs-lookup"><span data-stu-id="97318-2767">The <xref:System.Windows.Forms.Control.OnPaint%2A> method is overridden to repaint the image each time the form is painted; otherwise the image would only persist until the next repainting.</span></span> <span data-ttu-id="97318-2768"><xref:System.Windows.Forms.Control.DragEnter>イベント処理メソッドをフォームにドラッグされるデータの種類を決定および適切なフィードバックを提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-2768">The <xref:System.Windows.Forms.Control.DragEnter> event-handling method determines the type of data being dragged into the form and provides the appropriate feedback.</span></span> <span data-ttu-id="97318-2769"><xref:System.Windows.Forms.Control.DragDrop>場合イベント処理メソッドに、フォームのイメージが表示されます、<xref:System.Drawing.Image>データから作成できます。</span><span class="sxs-lookup"><span data-stu-id="97318-2769">The <xref:System.Windows.Forms.Control.DragDrop> event-handling method displays the image on the form, if an <xref:System.Drawing.Image> can be created from the data.</span></span> <span data-ttu-id="97318-2770"><xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType>値は、画面座標、例では、<xref:System.Windows.Forms.Control.PointToClient%2A>クライアント座標に変換するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2770">Because the <xref:System.Windows.Forms.DragEventArgs.X%2A?displayProperty=nameWithType> and <xref:System.Windows.Forms.DragEventArgs.Y%2A?displayProperty=nameWithType> values are screen coordinates, the example uses the <xref:System.Windows.Forms.Control.PointToClient%2A> method to convert them to client coordinates.</span></span>  
  
 [!code-cpp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CPP/imagedrag.cpp#1)]
 [!code-csharp[Windows.Forms.Control.DragOperations#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/CS/imagedrag.cs#1)]
 [!code-vb[Windows.Forms.Control.DragOperations#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control.DragOperations/VB/imagedrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PointToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Point PointToScreen (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Point PointToScreen(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function PointToScreen (p As Point) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Point PointToScreen(System::Drawing::Point p);" />
      <MemberSignature Language="F#" Value="member this.PointToScreen : System.Drawing.Point -&gt; System.Drawing.Point" Usage="control.PointToScreen p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p"><span data-ttu-id="97318-2771">クライアント座標で示された変換対象の <see cref="T:System.Drawing.Point" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2771">The client coordinate <see cref="T:System.Drawing.Point" /> to convert.</span></span></param>
        <summary><span data-ttu-id="97318-2772">指定したクライアント ポイントを計算して画面座標を算出します。</span><span class="sxs-lookup"><span data-stu-id="97318-2772">Computes the location of the specified client point into screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="97318-2773">変換された <see cref="T:System.Drawing.Point" />、<see cref="T:System.Drawing.Point" /> を画面座標で表す <paramref name="p" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2773">A <see cref="T:System.Drawing.Point" /> that represents the converted <see cref="T:System.Drawing.Point" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-2774">次のコード例は、使用する方法を示します、 <xref:System.Windows.Forms.Control.BackColor%2A>、 <xref:System.Windows.Forms.Control.RectangleToScreen%2A>、 <xref:System.Windows.Forms.Control.PointToScreen%2A>、 <xref:System.Windows.Forms.Control.MouseButtons%2A>、 <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>、および<xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType>メンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-2774">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="97318-2775">例を実行するには、Form1 という形式で次のコードを貼り付けいくつかのコントロールを格納しています。</span><span class="sxs-lookup"><span data-stu-id="97318-2775">To run the example, paste the following code in a form called Form1 containing several controls.</span></span> <span data-ttu-id="97318-2776">この例では、する必要があります、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseMove>、および<xref:System.Windows.Forms.Control.MouseUp>イベントは、この例で定義されているイベント ハンドラーに接続しています。</span><span class="sxs-lookup"><span data-stu-id="97318-2776">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="PreferredSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size PreferredSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size PreferredSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PreferredSize" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size PreferredSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.PreferredSize : System.Drawing.Size" Usage="System.Windows.Forms.Control.PreferredSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2777">コントロールが適合する四角形領域のサイズを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-2777">Gets the size of a rectangular area into which the control can fit.</span></span></summary>
        <value><span data-ttu-id="97318-2778">高さおよび幅をピクセル単位で格納した <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2778">A <see cref="T:System.Drawing.Size" /> containing the height and width, in pixels.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessControlMessage">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.PreProcessControlState PreProcessControlMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Windows.Forms.PreProcessControlState PreProcessControlMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessControlMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Function PreProcessControlMessage (ByRef msg As Message) As PreProcessControlState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::PreProcessControlState PreProcessControlMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="member this.PreProcessControlMessage :  -&gt; System.Windows.Forms.PreProcessControlState" Usage="control.PreProcessControlMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreProcessControlState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="97318-2779">処理するメッセージを表す <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2779">A <see cref="T:System.Windows.Forms.Message" /> that represents the message to process.</span></span></param>
        <summary><span data-ttu-id="97318-2780">キーボード メッセージまたは入力メッセージがディスパッチされる前に、メッセージ ループ内の入力メッセージを前処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2780">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="97318-2781"><see cref="T:System.Windows.Forms.PreProcessControlState" /> のいずれかの値。<see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> が <see langword="true" /> と <see langword="false" /> のどちらであるか、さらに、<see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> または <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> が <see langword="true" /> と <see langword="false" /> のどちらであるかによって異なります。</span><span class="sxs-lookup"><span data-stu-id="97318-2781">One of the <see cref="T:System.Windows.Forms.PreProcessControlState" /> values, depending on whether <see cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" /> is <see langword="true" /> or <see langword="false" /> and whether <see cref="M:System.Windows.Forms.Control.IsInputKey(System.Windows.Forms.Keys)" /> or <see cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" /> are <see langword="true" /> or <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreProcessMessage">
      <MemberSignature Language="C#" Value="public virtual bool PreProcessMessage (ref System.Windows.Forms.Message msg);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PreProcessMessage(valuetype System.Windows.Forms.Message&amp; msg) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function PreProcessMessage (ByRef msg As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool PreProcessMessage(System::Windows::Forms::Message % msg);" />
      <MemberSignature Language="F#" Value="abstract member PreProcessMessage :  -&gt; bool&#xA;override this.PreProcessMessage :  -&gt; bool" Usage="control.PreProcessMessage msg" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="97318-2782">処理するメッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2782">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the message to process.</span></span> <span data-ttu-id="97318-2783">有効な値は、WM_KEYDOWN、WM_SYSKEYDOWN、WM_CHAR、および WM_SYSCHAR です。</span><span class="sxs-lookup"><span data-stu-id="97318-2783">The possible values are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span></param>
        <summary><span data-ttu-id="97318-2784">キーボード メッセージまたは入力メッセージがディスパッチされる前に、メッセージ ループ内の入力メッセージを前処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2784">Preprocesses keyboard or input messages within the message loop before they are dispatched.</span></span></summary>
        <returns><span data-ttu-id="97318-2785">メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2785"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2786"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> ディスパッチされる前に、入力メッセージを前処理する、アプリケーションのメッセージ ループによって呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2786"><xref:System.Windows.Forms.Control.PreProcessMessage%2A> is called by the application's message loop to preprocess input messages before they are dispatched.</span></span> <span data-ttu-id="97318-2787">指定できる値、`msg`パラメーターは、WM_KEYDOWN、WM_SYSKEYDOWN、WM_CHAR、WM_SYSCHAR、します。</span><span class="sxs-lookup"><span data-stu-id="97318-2787">Possible values for the `msg` parameter are WM_KEYDOWN, WM_SYSKEYDOWN, WM_CHAR, and WM_SYSCHAR.</span></span>  
  
 <span data-ttu-id="97318-2788">オーバーライドするときに<xref:System.Windows.Forms.Control.PreProcessMessage%2A>、コントロールを返す必要があります`true`をメッセージを処理したことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2788">When overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>, a control should return `true` to indicate that it has processed the message.</span></span> <span data-ttu-id="97318-2789">結果、コントロールによって処理されないメッセージ`base.PreProcessMessage`返される必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2789">For messages that are not processed by the control, the result of `base.PreProcessMessage` should be returned.</span></span> <span data-ttu-id="97318-2790">コントロールは通常メソッドのオーバーライドより専門的ななど<xref:System.Windows.Forms.Control.IsInputChar%2A>、 <xref:System.Windows.Forms.Control.IsInputKey%2A>、 <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>、 <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>、または<xref:System.Windows.Forms.Control.ProcessDialogKey%2A>オーバーライドする代わりに<xref:System.Windows.Forms.Control.PreProcessMessage%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2790">Controls will typically override one of the more specialized methods such as <xref:System.Windows.Forms.Control.IsInputChar%2A>, <xref:System.Windows.Forms.Control.IsInputKey%2A>, <xref:System.Windows.Forms.Control.ProcessCmdKey%2A>, <xref:System.Windows.Forms.Control.ProcessDialogChar%2A>, or <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> instead of overriding <xref:System.Windows.Forms.Control.PreProcessMessage%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2791">このメソッドを呼び出す直前の呼び出し元のすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2791">for all windows for the immediate caller to call this method.</span></span> <span data-ttu-id="97318-2792">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2792">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="PreviewKeyDown">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PreviewKeyDownEventHandler PreviewKeyDown" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.PreviewKeyDown" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PreviewKeyDown As PreviewKeyDownEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PreviewKeyDownEventHandler ^ PreviewKeyDown;" />
      <MemberSignature Language="F#" Value="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " Usage="member this.PreviewKeyDown : System.Windows.Forms.PreviewKeyDownEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PreviewKeyDownEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2793">このコントロールにフォーカスがあるときにキーが押された場合、<see cref="E:System.Windows.Forms.Control.KeyDown" /> イベントの前に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2793">Occurs before the <see cref="E:System.Windows.Forms.Control.KeyDown" /> event when a key is pressed while focus is on this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2794">タブ、返された場合、esc キー、および方向キーなどのいくつかのキー入力は、入力のキーの押下がないと見なされるために通常いくつかのコントロールによって無視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2794">Some key presses, such as the TAB, RETURN, ESC, and arrow keys, are typically ignored by some controls because they are not considered input key presses.</span></span> <span data-ttu-id="97318-2795">たとえば、既定を<xref:System.Windows.Controls.Button>コントロールは、方向キーを無視します。</span><span class="sxs-lookup"><span data-stu-id="97318-2795">For example, by default, a <xref:System.Windows.Controls.Button> control ignores the arrow keys.</span></span> <span data-ttu-id="97318-2796">前または次のコントロールに移動するフォーカスは、通常、方向キーを押すとします。</span><span class="sxs-lookup"><span data-stu-id="97318-2796">Pressing the arrow keys typically causes the focus to move to the previous or next control.</span></span> <span data-ttu-id="97318-2797">ナビゲーション キーと通常これらのキーを発生させませんキーを押して、方向キーと見なされます、<xref:System.Windows.Forms.Control.KeyDown>イベントを<xref:System.Windows.Controls.Button>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2797">The arrow keys are considered navigation keys and pressing these keys typically do not raise the <xref:System.Windows.Forms.Control.KeyDown> event for a <xref:System.Windows.Controls.Button>.</span></span> <span data-ttu-id="97318-2798">ただし、用のキー、矢印キーを押して、<xref:System.Windows.Controls.Button>は発生、<xref:System.Windows.Forms.Control.PreviewKeyDown>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2798">However, pressing the arrow keys for a <xref:System.Windows.Controls.Button> does raise the <xref:System.Windows.Forms.Control.PreviewKeyDown> event.</span></span> <span data-ttu-id="97318-2799">処理することによって、<xref:System.Windows.Forms.Control.PreviewKeyDown>イベントを<xref:System.Windows.Controls.Button>と設定、<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>プロパティを`true`、増やすことができます、<xref:System.Windows.Forms.Control.KeyDown>方向キーが押されたときにイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2799">By handling the <xref:System.Windows.Forms.Control.PreviewKeyDown> event for a <xref:System.Windows.Controls.Button> and setting the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`, you can raise the <xref:System.Windows.Forms.Control.KeyDown> event when the arrow keys are pressed.</span></span> <span data-ttu-id="97318-2800">ただし、方向キーを処理する場合、フォーカスは前または次のコントロールには移動不要になった。</span><span class="sxs-lookup"><span data-stu-id="97318-2800">However, if you handle the arrow keys, the focus will no longer move to the previous or next control.</span></span>  
  
 <span data-ttu-id="97318-2801">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2801">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2802">次のコード例に示します、<xref:System.Windows.Forms.Button>を含む、<xref:System.Windows.Forms.ContextMenuStrip>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2802">The following code example demonstrates a <xref:System.Windows.Forms.Button> that includes a <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="97318-2803">ときに、<xref:System.Windows.Forms.Button>にフォーカスがあるし、上向き矢印または下向き矢印キーを押して、<xref:System.Windows.Forms.ContextMenuStrip>が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2803">When the <xref:System.Windows.Forms.Button> has the focus and you press the UP ARROW or DOWN ARROW keys, the <xref:System.Windows.Forms.ContextMenuStrip> appears.</span></span> <span data-ttu-id="97318-2804"><xref:System.Windows.Forms.Control.PreviewKeyDown>イベント ハンドラーが ↑ または ↓ キーが押されたときを検出し、設定、<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-2804">The <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler detects when the UP ARROW or DOWN ARROW keys are pressed and sets the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property to `true`.</span></span> <span data-ttu-id="97318-2805">これが発生、<xref:System.Windows.Forms.Control.KeyDown>イベント表示できるように、<xref:System.Windows.Forms.ContextMenuStrip>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2805">This raises the <xref:System.Windows.Forms.Control.KeyDown> event so that you can display the <xref:System.Windows.Forms.ContextMenuStrip>.</span></span> <span data-ttu-id="97318-2806">任意のロジック配置しないで、<xref:System.Windows.Forms.Control.PreviewKeyDown>設定よりもその他のイベント ハンドラー、<xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-2806">You should not put any logic in the <xref:System.Windows.Forms.Control.PreviewKeyDown> event handler, other than to set the <xref:System.Windows.Forms.PreviewKeyDownEventArgs.IsInputKey%2A> property.</span></span> <span data-ttu-id="97318-2807">代わりに、ロジックを配置する必要があります、<xref:System.Windows.Forms.Control.KeyDown>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-2807">Instead, you should put your logic in the <xref:System.Windows.Forms.Control.KeyDown> event handler.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.PreviewKeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.previewkeydown/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg"><span data-ttu-id="97318-2808">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2808">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <param name="keyData"><span data-ttu-id="97318-2809">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-2809">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="97318-2810">コマンド キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2810">Processes a command key.</span></span></summary>
        <returns><span data-ttu-id="97318-2811">文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2811"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2812">このメソッドは、メッセージのプリプロセス コマンド キーを処理中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2812">This method is called during message preprocessing to handle command keys.</span></span> <span data-ttu-id="97318-2813">コマンド キーは、通常の入力キーに常に優先されるキーです。</span><span class="sxs-lookup"><span data-stu-id="97318-2813">Command keys are keys that always take precedence over regular input keys.</span></span> <span data-ttu-id="97318-2814">コマンド キーの例には、アクセラレータやメニューのショートカットが含まれます。</span><span class="sxs-lookup"><span data-stu-id="97318-2814">Examples of command keys include accelerators and menu shortcuts.</span></span> <span data-ttu-id="97318-2815">メソッドが返す必要があります`true`コマンド キーを処理したことを示すまたは`false`をキーは、コマンド キーではないことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2815">The method must return `true` to indicate that it has processed the command key, or `false` to indicate that the key is not a command key.</span></span> <span data-ttu-id="97318-2816">このメソッドは、コントロールは、Windows フォーム アプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2816">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 <span data-ttu-id="97318-2817"><xref:System.Windows.Forms.Control.ProcessCmdKey%2A>メソッドはまず、コントロールがあるかどうかを判断、 <xref:System.Windows.Forms.ContextMenu>、でき、そうである場合、<xref:System.Windows.Forms.ContextMenu>コマンド キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2817">The <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method first determines whether the control has a <xref:System.Windows.Forms.ContextMenu>, and if so, enables the <xref:System.Windows.Forms.ContextMenu> to process the command key.</span></span> <span data-ttu-id="97318-2818">親のキーが渡されるコマンド キーが メニューのショートカット、コントロールに親がある場合は、<xref:System.Windows.Forms.Control.ProcessCmdKey%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2818">If the command key is not a menu shortcut and the control has a parent, the key is passed to the parent's <xref:System.Windows.Forms.Control.ProcessCmdKey%2A> method.</span></span> <span data-ttu-id="97318-2819">実質的な効果は、そのコマンドのキーは「バブル」コントロールの階層構造です。</span><span class="sxs-lookup"><span data-stu-id="97318-2819">The net effect is that command keys are "bubbled" up the control hierarchy.</span></span> <span data-ttu-id="97318-2820">だけでなく、ユーザーが押されたキー、キーのデータもかを示しますでの修飾キーが押された場合に、キーと同時にします。</span><span class="sxs-lookup"><span data-stu-id="97318-2820">In addition to the key the user pressed, the key data also indicates which, if any, modifier keys were pressed at the same time as the key.</span></span> <span data-ttu-id="97318-2821">修飾子キーには、shift キーを押し、CTRL、ALT キーが含まれます。</span><span class="sxs-lookup"><span data-stu-id="97318-2821">Modifier keys include the SHIFT, CTRL, and ALT keys.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-2822">直前の呼び出し元と継承したクラスをこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-2822">for the immediate caller and inheriting classes to call this method.</span></span> <span data-ttu-id="97318-2823"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="97318-2823">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2824">オーバーライドする場合、<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />派生クラスでメソッドをコントロールを返します<see langword="true" />をキーが処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2824">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="97318-2825">基本クラスの呼び出しの結果、コントロールによって処理されないキー<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />メソッドが返される必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2825">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" /> method should be returned.</span></span> <span data-ttu-id="97318-2826">コントロールがこのメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2826">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogChar">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogChar (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogChar(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogChar (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogChar(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogChar : char -&gt; bool&#xA;override this.ProcessDialogChar : char -&gt; bool" Usage="control.ProcessDialogChar charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="97318-2827">処理対象の文字。</span><span class="sxs-lookup"><span data-stu-id="97318-2827">The character to process.</span></span></param>
        <summary><span data-ttu-id="97318-2828">ダイアログ文字を処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2828">Processes a dialog character.</span></span></summary>
        <returns><span data-ttu-id="97318-2829">文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2829"><see langword="true" /> if the character was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2830">このメソッドは、メッセージのコントロールのニーモニックなど、ダイアログの文字を処理するために前処理中に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2830">This method is called during message preprocessing to handle dialog characters, such as control mnemonics.</span></span> <span data-ttu-id="97318-2831">場合にのみ、このメソッドが呼び出されます、<xref:System.Windows.Forms.Control.IsInputChar%2A>メソッドは、コントロールでは、文字は処理されていないことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2831">This method is called only if the <xref:System.Windows.Forms.Control.IsInputChar%2A> method indicates that the control is not processing the character.</span></span> <span data-ttu-id="97318-2832"><xref:System.Windows.Forms.Control.ProcessDialogChar%2A>メソッドは、親に文字を送信するだけ<xref:System.Windows.Forms.Control.ProcessDialogChar%2A>メソッド、または返します`false`コントロールに親がありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2832">The <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogChar%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="97318-2833"><xref:System.Windows.Forms.Form>クラス ダイアログ文字の実際の処理を実行するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="97318-2833">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog characters.</span></span> <span data-ttu-id="97318-2834">このメソッドは、コントロールは、Windows フォーム アプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2834">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2835">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2835">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-2836">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2836">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2837">オーバーライドする場合、<see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />派生クラスでメソッドをコントロールを返します<see langword="true" />を文字を処理したことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2837">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the character.</span></span> <span data-ttu-id="97318-2838">基本クラスの呼び出しの結果、コントロールによって処理されない文字<see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />メソッドが返される必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2838">For characters that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned.</span></span> <span data-ttu-id="97318-2839">コントロールがこのメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2839">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessDialogKey">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessDialogKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessDialogKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessDialogKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessDialogKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessDialogKey : System.Windows.Forms.Keys -&gt; bool" Usage="control.ProcessDialogKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><span data-ttu-id="97318-2840">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-2840">One of the <see cref="T:System.Windows.Forms.Keys" /> values that represents the key to process.</span></span></param>
        <summary><span data-ttu-id="97318-2841">ダイアログ キーを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2841">Processes a dialog key.</span></span></summary>
        <returns><span data-ttu-id="97318-2842">キーがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2842"><see langword="true" /> if the key was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2843">このメソッドは、タブ、返された場合、esc キー、および矢印キーなどのダイアログの文字を処理するメッセージのプリプロセス時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2843">This method is called during message preprocessing to handle dialog characters, such as TAB, RETURN, ESC, and arrow keys.</span></span> <span data-ttu-id="97318-2844">場合にのみ、このメソッドが呼び出されます、<xref:System.Windows.Forms.Control.IsInputKey%2A>メソッドでは、コントロールがキーを処理していないことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2844">This method is called only if the <xref:System.Windows.Forms.Control.IsInputKey%2A> method indicates that the control is not processing the key.</span></span> <span data-ttu-id="97318-2845"><xref:System.Windows.Forms.Control.ProcessDialogKey%2A>に親の文字を単純に送信します<xref:System.Windows.Forms.Control.ProcessDialogKey%2A>メソッド、または返します`false`コントロールに親がありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2845">The <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessDialogKey%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="97318-2846"><xref:System.Windows.Forms.Form>クラス ダイアログ キーの実際の処理を実行するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="97318-2846">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span> <span data-ttu-id="97318-2847">このメソッドは、コントロールは、Windows フォーム アプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2847">This method is only called when the control is hosted in a Windows Forms application or as an ActiveX control.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2848">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2848">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-2849">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2849">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2850">オーバーライドする場合、<see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" />派生クラスでメソッドをコントロールを返します<see langword="true" />をキーが処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2850">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessDialogKey(System.Windows.Forms.Keys)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="97318-2851">基本クラスの呼び出しの結果、コントロールによって処理されないキー<see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />メソッドが返される必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2851">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" /> method should be returned.</span></span> <span data-ttu-id="97318-2852">コントロールがこのメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2852">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyEventArgs">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyEventArgs (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyEventArgs(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyEventArgs (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyEventArgs(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyEventArgs :  -&gt; bool&#xA;override this.ProcessKeyEventArgs :  -&gt; bool" Usage="control.ProcessKeyEventArgs m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="97318-2853">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2853">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="97318-2854">キー メッセージを処理し、適切なコントロール イベントを生成します。</span><span class="sxs-lookup"><span data-stu-id="97318-2854">Processes a key message and generates the appropriate control events.</span></span></summary>
        <returns><span data-ttu-id="97318-2855">メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2855"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2856">コントロールがキーボード メッセージを受信すると、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2856">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="97318-2857">このメソッドは呼び出すことによって、メッセージの適切なキー イベントを生成するため、 <xref:System.Windows.Forms.Control.OnKeyPress%2A>、 <xref:System.Windows.Forms.Control.OnKeyDown%2A>、または<xref:System.Windows.Forms.Control.OnKeyUp%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2857">The method is responsible for generating the appropriate key events for the message by calling the <xref:System.Windows.Forms.Control.OnKeyPress%2A>, <xref:System.Windows.Forms.Control.OnKeyDown%2A>, or <xref:System.Windows.Forms.Control.OnKeyUp%2A> methods.</span></span> <span data-ttu-id="97318-2858">`m`パラメーターにはウィンドウ メッセージ処理する必要がありますにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="97318-2858">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="97318-2859">指定できる値、<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>プロパティは、WM_CHAR、WM_KEYDOWN、WM_SYSKEYDOWN、WM_KEYUP、WM_SYSKEYUP、および WM_IME_CHAR います。</span><span class="sxs-lookup"><span data-stu-id="97318-2859">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, WM_SYSKEYUP, and WM_IME_CHAR.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2860">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2860">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-2861">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2861">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-2862">アンマネージ コードを呼び出す直前の呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="97318-2862">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="97318-2863">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="97318-2863">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2864">オーバーライドする場合、<see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />派生クラスでメソッドをコントロールを返します<see langword="true" />をキーが処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2864">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="97318-2865">基本クラスの呼び出しの結果、コントロールによって処理されないキー<see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />メソッドが返される必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2865">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> method should be returned.</span></span> <span data-ttu-id="97318-2866">コントロールがこのメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2866">Controls will seldom, if ever, need to override this method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyMessage :  -&gt; bool&#xA;override this.ProcessKeyMessage :  -&gt; bool" Usage="control.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="97318-2867">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2867">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="97318-2868">キーボード メッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2868">Processes a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="97318-2869">メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2869"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2870">コントロールがキーボード メッセージを受信すると、このメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2870">This method is called when a control receives a keyboard message.</span></span> <span data-ttu-id="97318-2871">メソッドが最初に、コントロールが親を持つかどうかを決定しますそのため、親を呼び出す場合<xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2871">The method first determines whether the control has a parent; if so, it calls the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method.</span></span> <span data-ttu-id="97318-2872">場合、親の<xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>メソッドは、メッセージを処理していない、<xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A>メソッドが呼び出され、適切なキーボード イベントを生成します。</span><span class="sxs-lookup"><span data-stu-id="97318-2872">If the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method does not process the message then the <xref:System.Windows.Forms.Control.ProcessKeyEventArgs%2A> method is called to generate the appropriate keyboard events.</span></span> <span data-ttu-id="97318-2873">`m`パラメーターにはウィンドウ メッセージ処理する必要がありますにはが含まれています。</span><span class="sxs-lookup"><span data-stu-id="97318-2873">The `m` parameter contains the window message that must be processed.</span></span> <span data-ttu-id="97318-2874">指定できる値、<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>プロパティは、WM_CHAR、WM_KEYDOWN、WM_SYSKEYDOWN、WM_KEYUP、および WM_SYSKEYUP います。</span><span class="sxs-lookup"><span data-stu-id="97318-2874">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2875">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2875">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-2876">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2876">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2877">オーバーライドする場合、<see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" />コントロールが返されます、<see langword="true" />をキーが処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2877">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyMessage(System.Windows.Forms.Message@)" /> method, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="97318-2878">コントロールの基本クラスの結果によって処理されないキー<see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" />返される必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2878">For keys that are not processed by the control, the result of the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyEventArgs(System.Windows.Forms.Message@)" /> should be returned.</span></span> <span data-ttu-id="97318-2879">コントロールがこのメソッドをオーバーライドする必要はほとんどありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2879">Controls will seldom, if ever, need to override this method.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyPreview">
      <MemberSignature Language="C#" Value="protected virtual bool ProcessKeyPreview (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ProcessKeyPreview(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function ProcessKeyPreview (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool ProcessKeyPreview(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member ProcessKeyPreview :  -&gt; bool&#xA;override this.ProcessKeyPreview :  -&gt; bool" Usage="control.ProcessKeyPreview m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="97318-2880">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2880">A <see cref="T:System.Windows.Forms.Message" />, passed by reference, that represents the window message to process.</span></span></param>
        <summary><span data-ttu-id="97318-2881">キーボード メッセージをプレビューします。</span><span class="sxs-lookup"><span data-stu-id="97318-2881">Previews a keyboard message.</span></span></summary>
        <returns><span data-ttu-id="97318-2882">メッセージがコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2882"><see langword="true" /> if the message was processed by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2883">子コントロールがキーボード メッセージを受信すると、子コントロールがこのメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2883">This method is called by a child control when the child control receives a keyboard message.</span></span> <span data-ttu-id="97318-2884">子コントロールは、メッセージのキーボード イベントを生成する前に、このメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="97318-2884">The child control calls this method before generating any keyboard events for the message.</span></span> <span data-ttu-id="97318-2885">このメソッドが戻る場合`true`、子コントロールが処理されたと見なされ、キーボード イベントを生成しません。</span><span class="sxs-lookup"><span data-stu-id="97318-2885">If this method returns `true`, the child control considers the message processed and does not generate any keyboard events.</span></span> <span data-ttu-id="97318-2886">`m`パラメーターには、プレビュー ウィンドウのメッセージが含まれています。</span><span class="sxs-lookup"><span data-stu-id="97318-2886">The `m` parameter contains the window message to preview.</span></span> <span data-ttu-id="97318-2887">指定できる値、<xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>プロパティは、WM_CHAR、WM_KEYDOWN、WM_SYSKEYDOWN、WM_KEYUP、および WM_SYSKEYUP います。</span><span class="sxs-lookup"><span data-stu-id="97318-2887">Possible values for the <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType> property are WM_CHAR, WM_KEYDOWN, WM_SYSKEYDOWN, WM_KEYUP, and WM_SYSKEYUP.</span></span> <span data-ttu-id="97318-2888"><xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>メソッドは、親に文字を送信するだけ<xref:System.Windows.Forms.Control.ProcessKeyPreview%2A>メソッド、または返します`false`コントロールに親がありません。</span><span class="sxs-lookup"><span data-stu-id="97318-2888">The <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method simply sends the character to the parent's <xref:System.Windows.Forms.Control.ProcessKeyPreview%2A> method, or returns `false` if the control has no parent.</span></span> <span data-ttu-id="97318-2889"><xref:System.Windows.Forms.Form>クラス ダイアログ キーの実際の処理を実行するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="97318-2889">The <xref:System.Windows.Forms.Form> class overrides this method to perform actual processing of dialog keys.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2890">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2890">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-2891">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2891">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-2892">アンマネージ コードを呼び出す直前の呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="97318-2892">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="97318-2893">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="97318-2893">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-2894">オーバーライドする場合、<see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />派生クラスでメソッドをコントロールを返します<see langword="true" />をキーが処理されたことを示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2894">When overriding the <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method in a derived class, a control should return <see langword="true" /> to indicate that it has processed the key.</span></span> <span data-ttu-id="97318-2895">基本クラスの呼び出しの結果、コントロールによって処理されないキー<see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" />メソッドが返される必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2895">For keys that are not processed by the control, the result of calling the base class's <see cref="M:System.Windows.Forms.Control.ProcessKeyPreview(System.Windows.Forms.Message@)" /> method should be returned.</span></span></para></block>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
        <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessMnemonic (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessMnemonic(char charCode);" />
      <MemberSignature Language="F#" Value="abstract member ProcessMnemonic : char -&gt; bool&#xA;override this.ProcessMnemonic : char -&gt; bool" Usage="control.ProcessMnemonic charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode"><span data-ttu-id="97318-2896">処理対象の文字。</span><span class="sxs-lookup"><span data-stu-id="97318-2896">The character to process.</span></span></param>
        <summary><span data-ttu-id="97318-2897">ニーモニック文字を処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-2897">Processes a mnemonic character.</span></span></summary>
        <returns><span data-ttu-id="97318-2898">文字がコントロールによってニーモニックとして処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2898"><see langword="true" /> if the character was processed as a mnemonic by the control; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2899">このメソッドは、コントロールのニーモニック文字を処理する機会を与えるために呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2899">This method is called to give a control the opportunity to process a mnemonic character.</span></span> <span data-ttu-id="97318-2900">メソッドは、およびコントロールが状態ニーモニックを処理するかどうか、特定の文字がニーモニックを表すかどうかを判断する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-2900">The method should determine whether the control is in a state to process mnemonics and if whether the given character represents a mnemonic.</span></span> <span data-ttu-id="97318-2901">かどうか、メソッドの動作を実行、ニーモニックと戻り値に関連付けられている`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-2901">If so, the method should perform the action associated with the mnemonic and return `true`.</span></span> <span data-ttu-id="97318-2902">場合は、メソッドが返す、`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-2902">If not, the method should return `false`.</span></span> <span data-ttu-id="97318-2903">このメソッドの実装を使用して、多くの場合、<xref:System.Windows.Forms.Control.IsMnemonic%2A>する特定の文字がコントロールのテキストでニーモニックと一致するかどうかを判断するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2903">Implementations of this method often use the <xref:System.Windows.Forms.Control.IsMnemonic%2A> method to determine whether the given character matches a mnemonic in the control's text.</span></span>  
  
 <span data-ttu-id="97318-2904">例えば:</span><span class="sxs-lookup"><span data-stu-id="97318-2904">For example:</span></span>  
  
```csharp  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
      // Perform action associated with mnemonic.  
       }  
```  
  
 <span data-ttu-id="97318-2905">この既定の実装の<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>メソッドは単に返します`false`コントロールにアクセラレータ キーがないことを表します。</span><span class="sxs-lookup"><span data-stu-id="97318-2905">This default implementation of the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method simply returns `false` to indicate that the control has no mnemonic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2906">次のコード例は、オーバーライドするボタン クラスの拡張機能を示します、<xref:System.Windows.Forms.Control.ProcessMnemonic%2A>メソッドがカスタム動作。</span><span class="sxs-lookup"><span data-stu-id="97318-2906">The following code example demonstrates an extension of the button class that overrides the <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> method to exhibit custom behavior.</span></span> <span data-ttu-id="97318-2907">例では、使用も示しています、<xref:System.Windows.Forms.Control.CanSelect%2A>と<xref:System.Windows.Forms.Control.IsMnemonic%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-2907">The example also demonstrates the use of the <xref:System.Windows.Forms.Control.CanSelect%2A> and <xref:System.Windows.Forms.Control.IsMnemonic%2A> properties.</span></span> <span data-ttu-id="97318-2908">実行には、この例は、同じファイル内のフォーム クラスを使用して、次のコードを貼り付けます。</span><span class="sxs-lookup"><span data-stu-id="97318-2908">To run this example paste the following code after a form class, in the same file.</span></span> <span data-ttu-id="97318-2909">型のボタンを追加する`MnemonicButton`をフォームにします。</span><span class="sxs-lookup"><span data-stu-id="97318-2909">Add a button of type `MnemonicButton` to the form.</span></span>  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-2910">このメソッドを呼び出すクラスを継承するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-2910">for all windows for inheriting classes to call this method.</span></span> <span data-ttu-id="97318-2911">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-2911">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.IsMnemonic(System.Char,System.String)" />
        <altmember cref="M:System.Windows.Forms.Control.ProcessDialogChar(System.Char)" />
      </Docs>
    </Member>
    <Member MemberName="ProductName">
      <MemberSignature Language="C#" Value="public string ProductName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductName : string" Usage="System.Windows.Forms.Control.ProductName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2912">コントロールを格納しているアセンブリの製品名を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-2912">Gets the product name of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="97318-2913">コントロールを格納しているアセンブリの製品名。</span><span class="sxs-lookup"><span data-stu-id="97318-2913">The product name of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2914"><xref:System.Windows.Forms.Control.ProductName%2A>プロパティは読み取り専用プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-2914">The <xref:System.Windows.Forms.Control.ProductName%2A> property is a read-only property.</span></span> <span data-ttu-id="97318-2915">このプロパティの値を変更するには、設定、<xref:System.Reflection.AssemblyProductAttribute.Product%2A>プロパティの値、<xref:System.Reflection.AssemblyProductAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2915">To change the value of this property, set the <xref:System.Reflection.AssemblyProductAttribute.Product%2A> property value of the <xref:System.Reflection.AssemblyProductAttribute>.</span></span> <span data-ttu-id="97318-2916">次の c# コードのセットの行、<xref:System.Windows.Forms.Control.ProductName%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-2916">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductName%2A> property.</span></span>  
  
```  
[assembly: AssemblyProduct("MyApplication")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="97318-2917">会社名、製品名、および製品バージョンを指定することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2917">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="97318-2918">など、Windows フォームの機能の使用により、この情報を提供する<xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType>を容易にできるように、"Certified for Windows"のプログラムに準拠するアプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-2918">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span> <span data-ttu-id="97318-2919">Windows の認定プログラムに関する詳細については、次を参照してください。http://msdn.microsoft.com/certificationします。</span><span class="sxs-lookup"><span data-stu-id="97318-2919">For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2920">次のコード例で、アプリケーションに関する情報を表示する、<xref:System.Windows.Forms.Label>に含まれる、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2920">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-2921">この例では、する必要があります、 <xref:System.Windows.Forms.Control.CompanyName%2A>、<xref:System.Windows.Forms.Control.ProductName%2A>と<xref:System.Windows.Forms.Control.ProductVersion%2A>が設定されています。</span><span class="sxs-lookup"><span data-stu-id="97318-2921">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyProductAttribute.Product" />
      </Docs>
    </Member>
    <Member MemberName="ProductVersion">
      <MemberSignature Language="C#" Value="public string ProductVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProductVersion" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ProductVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ProductVersion As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ProductVersion { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ProductVersion : string" Usage="System.Windows.Forms.Control.ProductVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2922">コントロールを格納しているアセンブリのバージョンを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-2922">Gets the version of the assembly containing the control.</span></span></summary>
        <value><span data-ttu-id="97318-2923">コントロールを格納しているアセンブリのファイル バージョン。</span><span class="sxs-lookup"><span data-stu-id="97318-2923">The file version of the assembly containing the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2924"><xref:System.Windows.Forms.Control.ProductVersion%2A>プロパティは読み取り専用プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-2924">The <xref:System.Windows.Forms.Control.ProductVersion%2A> property is a read-only property.</span></span> <span data-ttu-id="97318-2925">このプロパティの値を変更するには、設定、<xref:System.Reflection.AssemblyVersionAttribute.Version%2A>プロパティの値、<xref:System.Reflection.AssemblyVersionAttribute>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2925">To change the value of this property, set the <xref:System.Reflection.AssemblyVersionAttribute.Version%2A> property value of the <xref:System.Reflection.AssemblyVersionAttribute>.</span></span> <span data-ttu-id="97318-2926">次の c# コードのセットの行、<xref:System.Windows.Forms.Control.ProductVersion%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-2926">The following line of C# code sets the <xref:System.Windows.Forms.Control.ProductVersion%2A> property.</span></span>  
  
```  
[assembly: AssemblyVersion("1.0.1")]  
```  
  
> [!NOTE]
>  <span data-ttu-id="97318-2927">会社名、製品名、および製品バージョンを指定することを強くお勧めします。</span><span class="sxs-lookup"><span data-stu-id="97318-2927">It is strongly recommended that you provide the company name, product name, and product version.</span></span> <span data-ttu-id="97318-2928">など、Windows フォームの機能の使用により、この情報を提供する<xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType>を容易にできるように、"Certified for Windows"のプログラムに準拠するアプリケーションを作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-2928">Providing this information enables the use of Windows Forms features such as <xref:System.Windows.Forms.Application.UserAppDataPath%2A?displayProperty=nameWithType> that make it easier to write applications that comply with the "Certified for Windows" program.</span></span> <span data-ttu-id="97318-2929">Windows の認定プログラムに関する詳細については、次を参照してください。http://msdn.microsoft.com/certificationします。</span><span class="sxs-lookup"><span data-stu-id="97318-2929">For more information about the Certified for Windows program, see http://msdn.microsoft.com/certification.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2930">次のコード例で、アプリケーションに関する情報を表示する、<xref:System.Windows.Forms.Label>に含まれる、<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2930">The following code example displays information about the application in a <xref:System.Windows.Forms.Label> contained by a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-2931">この例では、する必要があります、 <xref:System.Windows.Forms.Control.CompanyName%2A>、<xref:System.Windows.Forms.Control.ProductName%2A>と<xref:System.Windows.Forms.Control.ProductVersion%2A>が設定されています。</span><span class="sxs-lookup"><span data-stu-id="97318-2931">This example requires that the <xref:System.Windows.Forms.Control.CompanyName%2A>, <xref:System.Windows.Forms.Control.ProductName%2A> and <xref:System.Windows.Forms.Control.ProductVersion%2A> have been set.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CPP/aboutdialog.cpp#1)]
 [!code-csharp[Windows.Forms.Control Properties3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties3/CS/aboutdialog.cs#1)]
 [!code-vb[Windows.Forms.Control Properties3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties3/VB/aboutdialog.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Reflection.AssemblyVersionAttribute.Version" />
      </Docs>
    </Member>
    <Member MemberName="PropagatingImeMode">
      <MemberSignature Language="C#" Value="protected static System.Windows.Forms.ImeMode PropagatingImeMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Windows.Forms.ImeMode PropagatingImeMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly Property PropagatingImeMode As ImeMode" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static property System::Windows::Forms::ImeMode PropagatingImeMode { System::Windows::Forms::ImeMode get(); };" />
      <MemberSignature Language="F#" Value="member this.PropagatingImeMode : System.Windows.Forms.ImeMode" Usage="System.Windows.Forms.Control.PropagatingImeMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImeMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2932">反映する IME モードを表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-2932">Gets an object that represents a propagating IME mode.</span></span></summary>
        <value><span data-ttu-id="97318-2933">反映する IME モードを表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="97318-2933">An object that represents a propagating IME mode.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueryAccessibilityHelp">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryAccessibilityHelpEventHandler QueryAccessibilityHelp" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryAccessibilityHelp" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryAccessibilityHelp As QueryAccessibilityHelpEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryAccessibilityHelpEventHandler ^ QueryAccessibilityHelp;" />
      <MemberSignature Language="F#" Value="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " Usage="member this.QueryAccessibilityHelp : System.Windows.Forms.QueryAccessibilityHelpEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryAccessibilityHelpEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2934"><see cref="T:System.Windows.Forms.AccessibleObject" /> がユーザー補助アプリケーションにヘルプを提供したときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2934">Occurs when <see cref="T:System.Windows.Forms.AccessibleObject" /> is providing help to accessibility applications.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2935">使用する必要があります、<xref:System.Windows.Forms.HelpProvider>クラスにユーザーが F1 キーを押しても、ユーザー補助オブジェクトのヘルプを起動します。</span><span class="sxs-lookup"><span data-stu-id="97318-2935">You should use the <xref:System.Windows.Forms.HelpProvider> class to enable users to invoke help on your accessible object by pressing the F1 key.</span></span> <span data-ttu-id="97318-2936">使用して、<xref:System.Windows.Forms.HelpProvider>で完全な情報を提供、<xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2936">Using the <xref:System.Windows.Forms.HelpProvider> provides you with complete information in the <xref:System.Windows.Forms.QueryAccessibilityHelpEventArgs>.</span></span> <span data-ttu-id="97318-2937">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2937">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2938">ユーザー補助対応のグラフの作成を次のコード例に示しますを使用して、制御、<xref:System.Windows.Forms.AccessibleObject>と<xref:System.Windows.Forms.Control.ControlAccessibleObject>アクセス可能な情報を公開するクラス。</span><span class="sxs-lookup"><span data-stu-id="97318-2938">The following code example demonstrates the creation of an accessibility-aware chart control, using the <xref:System.Windows.Forms.AccessibleObject> and <xref:System.Windows.Forms.Control.ControlAccessibleObject> classes to expose accessible information.</span></span> <span data-ttu-id="97318-2939">コントロールは、凡例と共に 2 つの曲線をプロットします。</span><span class="sxs-lookup"><span data-stu-id="97318-2939">The control plots two curves along with a legend.</span></span> <span data-ttu-id="97318-2940">`ChartControlAccessibleObject`から派生したクラス`ControlAccessibleObject`で使用されて、<xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A>グラフ コントロールのカスタムのアクセス可能な情報を提供するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2940">The `ChartControlAccessibleObject` class, which derives from `ControlAccessibleObject`, is used in the <xref:System.Windows.Forms.Control.CreateAccessibilityInstance%2A> method to provide custom accessible information for the chart control.</span></span> <span data-ttu-id="97318-2941">グラフの凡例は、実際はないため<xref:System.Windows.Forms.Control>-ベースの制御が描画される代わりに、グラフ コントロールではなく組み込みアクセス可能な情報。</span><span class="sxs-lookup"><span data-stu-id="97318-2941">Since the chart legend is not an actual <xref:System.Windows.Forms.Control> -based control, but instead is drawn by the chart control, it does not any built-in accessible information.</span></span> <span data-ttu-id="97318-2942">このため、`ChartControlAccessibleObject`オーバーライド、<xref:System.Windows.Forms.AccessibleObject.GetChild%2A>を返すメソッドを`CurveLegendAccessibleObject`凡例の各部分にアクセスできる情報を表します。</span><span class="sxs-lookup"><span data-stu-id="97318-2942">Because of this, the `ChartControlAccessibleObject` class overrides the <xref:System.Windows.Forms.AccessibleObject.GetChild%2A> method to return the `CurveLegendAccessibleObject` that represents accessible information for each part of the legend.</span></span> <span data-ttu-id="97318-2943">ユーザー補助対応アプリケーションでは、このコントロールを使用すると、コントロールは、アクセスに必要な情報を提供できます。</span><span class="sxs-lookup"><span data-stu-id="97318-2943">When an accessible-aware application uses this control, the control can provide the necessary accessible information.</span></span>  
  
 <span data-ttu-id="97318-2944">このコードの抜粋は、処理を示しています、<xref:System.Windows.Forms.Control.QueryAccessibilityHelp>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2944">This code excerpt demonstrates handling the <xref:System.Windows.Forms.Control.QueryAccessibilityHelp> event.</span></span> <span data-ttu-id="97318-2945">参照してください、<xref:System.Windows.Forms.AccessibleObject>完全なコード例では、クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-2945">See the <xref:System.Windows.Forms.AccessibleObject> class overview for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CPP/chartcontrol.cpp#3)]
 [!code-csharp[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/CS/chartcontrol.cs#3)]
 [!code-vb[System.Windows.Forms.AccessibleObject#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.AccessibleObject/VB/chartcontrol.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.AccessibleObject.GetHelpTopic(System.String@)" />
      </Docs>
    </Member>
    <Member MemberName="QueryContinueDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.QueryContinueDragEventHandler QueryContinueDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.QueryContinueDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event QueryContinueDrag As QueryContinueDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::QueryContinueDragEventHandler ^ QueryContinueDrag;" />
      <MemberSignature Language="F#" Value="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " Usage="member this.QueryContinueDrag : System.Windows.Forms.QueryContinueDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.QueryContinueDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2946">ドラッグ アンド ドロップ操作中に発生し、ドラッグ ソースがドラッグ アンド ドロップ操作をキャンセルする必要があるかどうかを決定できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-2946">Occurs during a drag-and-drop operation and enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2947"><xref:System.Windows.Forms.Control.QueryContinueDrag>ドラッグ アンド ドロップ操作中にキーボードまたはマウス ボタンの状態の変更がある場合に、イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2947">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised when there is a change in the keyboard or mouse button state during a drag-and-drop operation.</span></span> <span data-ttu-id="97318-2948"><xref:System.Windows.Forms.Control.QueryContinueDrag>イベントにより、ドラッグ ソースがドラッグ アンド ドロップ操作を取り消す必要があるかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="97318-2948">The <xref:System.Windows.Forms.Control.QueryContinueDrag> event enables the drag source to determine whether the drag-and-drop operation should be canceled.</span></span>  
  
 <span data-ttu-id="97318-2949">ドラッグ アンド ドロップ操作関連のイベントがどのように、いつ発生するかについて次に示します。</span><span class="sxs-lookup"><span data-stu-id="97318-2949">The following describes how and when events related to drag-and-drop operations are raised.</span></span>  
  
 <span data-ttu-id="97318-2950"><xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドは、現在のカーソル位置の下にあるコントロールを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-2950">The <xref:System.Windows.Forms.Control.DoDragDrop%2A> method determines the control under the current cursor location.</span></span> <span data-ttu-id="97318-2951">コントロールが有効なドロップ先であるかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-2951">It then checks to see if the control is a valid drop target.</span></span>  
  
 <span data-ttu-id="97318-2952">コントロールが有効なドロップ ターゲットである場合、<xref:System.Windows.Forms.Control.GiveFeedback>ドラッグ アンド ドロップの効果が指定されたイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2952">If the control is a valid drop target, the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the drag-and-drop effect specified.</span></span> <span data-ttu-id="97318-2953">ドラッグ アンド ドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2953">For a list of drag-and-drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
 <span data-ttu-id="97318-2954">マウス カーソルの位置、キーボードの状態、およびマウス ボタンの状態の変更が監視されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2954">Changes in the mouse cursor position, keyboard state, and mouse button state are tracked.</span></span>  
  
-   <span data-ttu-id="97318-2955">ユーザーがウィンドウの外に移動した場合、<xref:System.Windows.Forms.Control.DragLeave> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2955">If the user moves out of a window, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
-   <span data-ttu-id="97318-2956">マウスが別のコントロールに移動した場合は、そのコントロールの <xref:System.Windows.Forms.Control.DragEnter> が生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2956">If the mouse enters another control, the <xref:System.Windows.Forms.Control.DragEnter> for that control is raised.</span></span>  
  
-   <span data-ttu-id="97318-2957">マウスが移動しても同じコントロール内の場合は、<xref:System.Windows.Forms.Control.DragOver> イベントが生成されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2957">If the mouse moves but stays within the same control, the <xref:System.Windows.Forms.Control.DragOver> event is raised.</span></span>  
  
 <span data-ttu-id="97318-2958">キーボードまたはマウス ボタンの状態に変更がある場合、<xref:System.Windows.Forms.Control.QueryContinueDrag>の値に基づいて、操作をキャンセルするイベントが発生し、データをドロップして、ドラッグを継続するかどうかを決定します。 または、<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>イベントのプロパティ<xref:System.Windows.Forms.QueryContinueDragEventArgs>します。</span><span class="sxs-lookup"><span data-stu-id="97318-2958">If there is a change in the keyboard or mouse button state, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event is raised and determines whether to continue the drag, to drop the data, or to cancel the operation based on the value of the <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> property of the event's <xref:System.Windows.Forms.QueryContinueDragEventArgs>.</span></span>  
  
-   <span data-ttu-id="97318-2959">場合の値<xref:System.Windows.Forms.DragAction>は`Continue`、<xref:System.Windows.Forms.Control.DragOver>イベントは、操作を続行して、<xref:System.Windows.Forms.Control.GiveFeedback>適切な視覚的なフィードバックを設定できるように新しい効果でイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2959">If the value of <xref:System.Windows.Forms.DragAction> is `Continue`, the <xref:System.Windows.Forms.Control.DragOver> event is raised to continue the operation and the <xref:System.Windows.Forms.Control.GiveFeedback> event is raised with the new effect so appropriate visual feedback can be set.</span></span> <span data-ttu-id="97318-2960">有効なドロップ効果の一覧については、<xref:System.Windows.Forms.DragDropEffects> 列挙体を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2960">For a list of valid drop effects, see the <xref:System.Windows.Forms.DragDropEffects> enumeration.</span></span>  
  
    > [!NOTE]
    >  <span data-ttu-id="97318-2961"><xref:System.Windows.Forms.Control.DragOver>と<xref:System.Windows.Forms.Control.GiveFeedback>これにより、ユーザーがマウスの位置で最新のフィードバックを指定してマウスをドロップ先の間で移動、されたイベントはペアになっています。</span><span class="sxs-lookup"><span data-stu-id="97318-2961">The <xref:System.Windows.Forms.Control.DragOver> and <xref:System.Windows.Forms.Control.GiveFeedback> events are paired so that as the mouse moves across the drop target, the user is given the most up-to-date feedback on the mouse's position.</span></span>  
  
-   <span data-ttu-id="97318-2962">場合の値<xref:System.Windows.Forms.DragAction>は`Drop`ソース アプリケーションでは、ソース データに対して適切な操作を実行できるように、データの切り取り、移動、操作だった場合、ドロップ効果の値がソースに返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-2962">If the value of <xref:System.Windows.Forms.DragAction> is `Drop`, the drop effect value is returned to the source, so the source application can perform the appropriate operation on the source data; for example, cut the data if the operation was a move.</span></span>  
  
-   <span data-ttu-id="97318-2963">場合の値<xref:System.Windows.Forms.DragAction>は`Cancel`、<xref:System.Windows.Forms.Control.DragLeave>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-2963">If the value of <xref:System.Windows.Forms.DragAction> is `Cancel`, the <xref:System.Windows.Forms.Control.DragLeave> event is raised.</span></span>  
  
 <span data-ttu-id="97318-2964">既定では、<xref:System.Windows.Forms.Control.QueryContinueDrag>イベント セット<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>に`Cancel`で<xref:System.Windows.Forms.DragAction>ESC キーが押された設定する場合<xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A>に`Drop`で<xref:System.Windows.Forms.DragAction>左、中央、または右マウス ボタンが押された場合。</span><span class="sxs-lookup"><span data-stu-id="97318-2964">By default, the <xref:System.Windows.Forms.Control.QueryContinueDrag> event sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Cancel` in <xref:System.Windows.Forms.DragAction> if the ESC key was pressed and sets <xref:System.Windows.Forms.QueryContinueDragEventArgs.Action%2A> to `Drop` in <xref:System.Windows.Forms.DragAction> if the left, middle, or right mouse button is pressed.</span></span>  
  
 <span data-ttu-id="97318-2965">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-2965">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-2966">このコードの抜粋では、使用方法を示します、<xref:System.Windows.Forms.Control.QueryContinueDrag>ドラッグ操作が、フォームの境界の外側に移動する場合は、ドラッグ アンド ドロップ操作をキャンセルするイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-2966">This code excerpt demonstrates using the <xref:System.Windows.Forms.Control.QueryContinueDrag> event to cancel the drag-and-drop operation if the drag operation moves outside the bounds of the form.</span></span> <span data-ttu-id="97318-2967">参照してください、<xref:System.Windows.Forms.Control.DoDragDrop%2A>完全なコード例のメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-2967">See the <xref:System.Windows.Forms.Control.DoDragDrop%2A> method for the complete code example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CPP/form1.cpp#6)]
 [!code-csharp[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.Control.DoDragDrop#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.DoDragDrop/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnQueryContinueDrag(System.Windows.Forms.QueryContinueDragEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseDragEvent">
      <MemberSignature Language="C#" Value="protected void RaiseDragEvent (object key, System.Windows.Forms.DragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseDragEvent(object key, class System.Windows.Forms.DragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseDragEvent (key As Object, e As DragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseDragEvent(System::Object ^ key, System::Windows::Forms::DragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseDragEvent : obj * System.Windows.Forms.DragEventArgs -&gt; unit" Usage="control.RaiseDragEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.DragEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="97318-2968">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2968">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="97318-2969">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2969">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2970">適切なドラッグ イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2970">Raises the appropriate drag event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseKeyEvent">
      <MemberSignature Language="C#" Value="protected void RaiseKeyEvent (object key, System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseKeyEvent(object key, class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseKeyEvent (key As Object, e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseKeyEvent(System::Object ^ key, System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseKeyEvent : obj * System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="control.RaiseKeyEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="97318-2971">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2971">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="97318-2972">イベント データを格納している <see cref="T:System.Windows.Forms.KeyEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2972">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2973">適切なキー イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2973">Raises the appropriate key event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaiseMouseEvent">
      <MemberSignature Language="C#" Value="protected void RaiseMouseEvent (object key, System.Windows.Forms.MouseEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaiseMouseEvent(object key, class System.Windows.Forms.MouseEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaiseMouseEvent (key As Object, e As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaiseMouseEvent(System::Object ^ key, System::Windows::Forms::MouseEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaiseMouseEvent : obj * System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="control.RaiseMouseEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="97318-2974">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2974">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="97318-2975">イベント データを格納している <see cref="T:System.Windows.Forms.MouseEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2975">A <see cref="T:System.Windows.Forms.MouseEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2976">適切なマウス イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2976">Raises the appropriate mouse event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RaisePaintEvent">
      <MemberSignature Language="C#" Value="protected void RaisePaintEvent (object key, System.Windows.Forms.PaintEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RaisePaintEvent(object key, class System.Windows.Forms.PaintEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RaisePaintEvent(System.Object,System.Windows.Forms.PaintEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RaisePaintEvent (key As Object, e As PaintEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RaisePaintEvent(System::Object ^ key, System::Windows::Forms::PaintEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.RaisePaintEvent : obj * System.Windows.Forms.PaintEventArgs -&gt; unit" Usage="control.RaisePaintEvent (key, e)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.Object" />
        <Parameter Name="e" Type="System.Windows.Forms.PaintEventArgs" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="97318-2977">発生させるイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-2977">The event to raise.</span></span></param>
        <param name="e"><span data-ttu-id="97318-2978">イベント データを格納している <see cref="T:System.Windows.Forms.PaintEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2978">A <see cref="T:System.Windows.Forms.PaintEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-2979">適切な描画イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-2979">Raises the appropriate paint event.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.RaiseDragEvent(System.Object,System.Windows.Forms.DragEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseKeyEvent(System.Object,System.Windows.Forms.KeyEventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RaiseMouseEvent(System.Object,System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="RecreateHandle">
      <MemberSignature Language="C#" Value="protected void RecreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RecreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RecreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RecreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RecreateHandle();" />
      <MemberSignature Language="F#" Value="member this.RecreateHandle : unit -&gt; unit" Usage="control.RecreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-2980">強制的にコントロールのハンドルを再作成します。</span><span class="sxs-lookup"><span data-stu-id="97318-2980">Forces the re-creation of the handle for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2981"><xref:System.Windows.Forms.Control.RecreateHandle%2A>パラメーターに新しいコントロールでは、必要なときに、メソッドが呼び出されますからの呼び出しを使用して<xref:System.Windows.Forms.Control.UpdateStyles%2A>に<xref:System.Windows.Forms.Control.CreateParams%2A>は不十分です。</span><span class="sxs-lookup"><span data-stu-id="97318-2981">The <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is called whenever parameters are needed for a new control, but using a call from <xref:System.Windows.Forms.Control.UpdateStyles%2A> to <xref:System.Windows.Forms.Control.CreateParams%2A> is insufficient.</span></span> <span data-ttu-id="97318-2982">このメソッドも呼び出します<xref:System.Windows.Forms.Control.DestroyHandle%2A>と<xref:System.Windows.Forms.Control.CreateHandle%2A>設定と<xref:System.Windows.Forms.Control.RecreatingHandle%2A>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-2982">This method also calls <xref:System.Windows.Forms.Control.DestroyHandle%2A> and <xref:System.Windows.Forms.Control.CreateHandle%2A> and sets <xref:System.Windows.Forms.Control.RecreatingHandle%2A> to `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RecreatingHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RecreatingHandle">
      <MemberSignature Language="C#" Value="public bool RecreatingHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RecreatingHandle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RecreatingHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RecreatingHandle As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RecreatingHandle { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RecreatingHandle : bool" Usage="System.Windows.Forms.Control.RecreatingHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-2983">コントロールが現在そのコントロールのハンドルを再作成中かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-2983">Gets a value indicating whether the control is currently re-creating its handle.</span></span></summary>
        <value><span data-ttu-id="97318-2984">コントロールが現在そのコントロールのハンドルを再作成中である場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2984"><see langword="true" /> if the control is currently re-creating its handle; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2985"><xref:System.Windows.Forms.Control.RecreatingHandle%2A>プロパティが返す`true`場合、<xref:System.Windows.Forms.Control.RecreateHandle%2A>メソッドが、コントロールで実行されています。</span><span class="sxs-lookup"><span data-stu-id="97318-2985">The <xref:System.Windows.Forms.Control.RecreatingHandle%2A> property returns `true` if the <xref:System.Windows.Forms.Control.RecreateHandle%2A> method is still running on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.CreateControl" />
        <altmember cref="M:System.Windows.Forms.Control.CreateHandle" />
        <altmember cref="P:System.Windows.Forms.Control.CreateParams" />
        <altmember cref="M:System.Windows.Forms.Control.DestroyHandle" />
        <altmember cref="P:System.Windows.Forms.Control.Handle" />
        <altmember cref="P:System.Windows.Forms.Control.IsHandleCreated" />
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.RecreateHandle" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateStyles" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToClient">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToClient (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToClient(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToClient (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToClient(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToClient : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToClient r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="97318-2986">画面座標で示された変換対象の <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2986">The screen coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="97318-2987">指定した画面上の四角形のサイズと位置をクライアント座標で算出します。</span><span class="sxs-lookup"><span data-stu-id="97318-2987">Computes the size and location of the specified screen rectangle in client coordinates.</span></span></summary>
        <returns><span data-ttu-id="97318-2988">変換された <see cref="T:System.Drawing.Rectangle" />、<see cref="T:System.Drawing.Rectangle" /> をクライアント座標で表す <paramref name="r" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2988">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="r" />, in client coordinates.</span></span></returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="RectangleToScreen">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle RectangleToScreen (System.Drawing.Rectangle r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle RectangleToScreen(valuetype System.Drawing.Rectangle r) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RectangleToScreen(System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Function RectangleToScreen (r As Rectangle) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle RectangleToScreen(System::Drawing::Rectangle r);" />
      <MemberSignature Language="F#" Value="member this.RectangleToScreen : System.Drawing.Rectangle -&gt; System.Drawing.Rectangle" Usage="control.RectangleToScreen r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="r"><span data-ttu-id="97318-2989">クライアント座標で示された変換対象の <see cref="T:System.Drawing.Rectangle" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2989">The client coordinate <see cref="T:System.Drawing.Rectangle" /> to convert.</span></span></param>
        <summary><span data-ttu-id="97318-2990">指定したクライアント領域の四角形のサイズと位置を画面座標で算出します。</span><span class="sxs-lookup"><span data-stu-id="97318-2990">Computes the size and location of the specified client rectangle in screen coordinates.</span></span></summary>
        <returns><span data-ttu-id="97318-2991">変換された <see cref="T:System.Drawing.Rectangle" />、<see cref="T:System.Drawing.Rectangle" /> を画面座標で表す <paramref name="p" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2991">A <see cref="T:System.Drawing.Rectangle" /> that represents the converted <see cref="T:System.Drawing.Rectangle" />, <paramref name="p" />, in screen coordinates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-2992">次のコード例は、使用する方法を示します、 <xref:System.Windows.Forms.Control.BackColor%2A>、 <xref:System.Windows.Forms.Control.RectangleToScreen%2A>、 <xref:System.Windows.Forms.Control.PointToScreen%2A>、 <xref:System.Windows.Forms.Control.MouseButtons%2A>、 <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>、および<xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType>メンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-2992">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.BackColor%2A>, <xref:System.Windows.Forms.Control.RectangleToScreen%2A>, <xref:System.Windows.Forms.Control.PointToScreen%2A>, <xref:System.Windows.Forms.Control.MouseButtons%2A>, <xref:System.Windows.Forms.ControlPaint.DrawReversibleFrame%2A?displayProperty=nameWithType>, and <xref:System.Drawing.Rectangle.IntersectsWith%2A?displayProperty=nameWithType> members.</span></span> <span data-ttu-id="97318-2993">例を実行すると呼ばれる形式で次のコードを貼り付け**Form1**いくつかのコントロールを格納しています。</span><span class="sxs-lookup"><span data-stu-id="97318-2993">To run the example, paste the following code in a form called **Form1** containing several controls.</span></span> <span data-ttu-id="97318-2994">この例では、する必要があります、 <xref:System.Windows.Forms.Control.MouseDown>、 <xref:System.Windows.Forms.Control.MouseMove>、および<xref:System.Windows.Forms.Control.MouseUp>イベントは、この例で定義されているイベント ハンドラーに接続しています。</span><span class="sxs-lookup"><span data-stu-id="97318-2994">This example requires that the <xref:System.Windows.Forms.Control.MouseDown>, <xref:System.Windows.Forms.Control.MouseMove>, and <xref:System.Windows.Forms.Control.MouseUp> events are connected to the event handlers defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.RectangleToScreen#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RectangleToScreen/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="M:System.Windows.Forms.Control.RectangleToClient(System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="ReflectMessage">
      <MemberSignature Language="C#" Value="protected static bool ReflectMessage (IntPtr hWnd, ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familystatic hidebysig bool ReflectMessage(native int hWnd, valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ReflectMessage(System.IntPtr,System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Shared Function ReflectMessage (hWnd As IntPtr, ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; static bool ReflectMessage(IntPtr hWnd, System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="static member ReflectMessage : nativeint *  -&gt; bool" Usage="System.Windows.Forms.Control.ReflectMessage (hWnd, m)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="hWnd"><span data-ttu-id="97318-2995">メッセージをリフレクションするコントロールのハンドルを表す <see cref="T:System.IntPtr" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2995">An <see cref="T:System.IntPtr" /> representing the handle of the control to reflect the message to.</span></span></param>
        <param name="m"><span data-ttu-id="97318-2996">リフレクションする Windows メッセージを表す <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2996">A <see cref="T:System.Windows.Forms.Message" /> representing the Windows message to reflect.</span></span></param>
        <summary><span data-ttu-id="97318-2997">指定したメッセージを指定したハンドルにバインドされたコントロールにリフレクションします。</span><span class="sxs-lookup"><span data-stu-id="97318-2997">Reflects the specified message to the control that is bound to the specified handle.</span></span></summary>
        <returns><span data-ttu-id="97318-2998">メッセージがリフレクションされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-2998"><see langword="true" /> if the message was reflected; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-2999"><xref:System.Windows.Forms.Control.ReflectMessage%2A>メソッドはインフラストラクチャ メソッドであるし、通常、コードからは呼び出されません。</span><span class="sxs-lookup"><span data-stu-id="97318-2999">The <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is an infrastructure method and typically should not be called from your code.</span></span>  
  
 <span data-ttu-id="97318-3000">場合、`hWnd`パラメーターは、有効なコントロールを表していない、<xref:System.Windows.Forms.Control.ReflectMessage%2A>メソッドを返します。`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3000">If the `hWnd` parameter does not represent a valid control, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method returns `false`.</span></span>  
  
 <span data-ttu-id="97318-3001">Windows メッセージは最上位レベルのウィンドウに返されるため、<xref:System.Windows.Forms.Control.ReflectMessage%2A>メソッドを使用してメッセージを送信したコントロールに応答メッセージを伝達します。</span><span class="sxs-lookup"><span data-stu-id="97318-3001">Because Windows messages are returned to the top-level window, the <xref:System.Windows.Forms.Control.ReflectMessage%2A> method is used to propagate the return message to the control that sent the message.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-3002">このメソッドを呼び出すすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-3002">for all windows to call this method.</span></span> <span data-ttu-id="97318-3003">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-3003">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public virtual void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Refresh();" />
      <MemberSignature Language="F#" Value="abstract member Refresh : unit -&gt; unit&#xA;override this.Refresh : unit -&gt; unit" Usage="control.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3004">強制的に、コントロールがクライアント領域を無効化し、直後にそのコントロール自体とその子コントロールを再描画するようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3004">Forces the control to invalidate its client area and immediately redraw itself and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3005">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.Refresh" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.Refresh" />メソッド コントロールとその子コントロールを無効にして再描画されるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3005">When overriding <see cref="M:System.Windows.Forms.Control.Refresh" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.Refresh" /> method so the control and its child controls are invalidated and redrawn.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.Update" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public System.Drawing.Region Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Region Region" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Region" />
      <MemberSignature Language="VB.NET" Value="Public Property Region As Region" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Region ^ Region { System::Drawing::Region ^ get(); void set(System::Drawing::Region ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Region : System.Drawing.Region with get, set" Usage="System.Windows.Forms.Control.Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Region</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3006">コントロールに関連付けられたウィンドウ領域を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3006">Gets or sets the window region associated with the control.</span></span></summary>
        <value><span data-ttu-id="97318-3007">コントロールに関連付けられたウィンドウ <see cref="T:System.Drawing.Region" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3007">The window <see cref="T:System.Drawing.Region" /> associated with the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3008">ウィンドウ領域では、オペレーティング システムで描画が許可されているウィンドウ内のピクセルのコレクションです。</span><span class="sxs-lookup"><span data-stu-id="97318-3008">The window region is a collection of pixels within the window where the operating system permits drawing.</span></span> <span data-ttu-id="97318-3009">オペレーティング システムでは、ウィンドウの領域の外部にあるウィンドウの任意の部分は表示されません。</span><span class="sxs-lookup"><span data-stu-id="97318-3009">The operating system does not display any portion of a window that lies outside of the window region.</span></span> <span data-ttu-id="97318-3010">コントロールの領域の座標では、コントロールのクライアント領域ではなく、コントロールの左上隅に対して相対的です。</span><span class="sxs-lookup"><span data-stu-id="97318-3010">The coordinates of a control's region are relative to the upper-left corner of the control, not the client area of the control.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-3011">ピクセルを領域に含まれるコレクションは非連続にできます。</span><span class="sxs-lookup"><span data-stu-id="97318-3011">The collection of pixels contained with the region can be noncontiguous.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3012">次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.Control.Region%2A>丸いボタンを作成するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3012">The following code example demonstrates how to use the <xref:System.Windows.Forms.Control.Region%2A> property by creating a round button.</span></span> <span data-ttu-id="97318-3013">例を実行するには、というボタンを含むフォームで次のコードを貼り付け`roundButton`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3013">To run the example, paste the following code in a form containing a button called `roundButton`.</span></span> <span data-ttu-id="97318-3014">この例では、する必要があります、<xref:System.Windows.Forms.Control.Paint>の例で定義されたイベント ハンドラーにイベントが接続されています。</span><span class="sxs-lookup"><span data-stu-id="97318-3014">This example requires that the <xref:System.Windows.Forms.Control.Paint> event is connected to the event handler defined in the example.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.Region#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.Region#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.Region#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.Region/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-3015">このプロパティの値を設定するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-3015">for all windows to set this property value.</span></span> <span data-ttu-id="97318-3016">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="97318-3016">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RegionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RegionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RegionChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RegionChanged;" />
      <MemberSignature Language="F#" Value="member this.RegionChanged : EventHandler " Usage="member this.RegionChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3017"><see cref="P:System.Windows.Forms.Control.Region" /> プロパティの値が変更された場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3017">Occurs when the value of the <see cref="P:System.Windows.Forms.Control.Region" /> property changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3018">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3018">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3019">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3019">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-3020">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.RegionChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3020">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span> <span data-ttu-id="97318-3021">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-3021">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-3022">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3022">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-3023">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3023">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-3024">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.RegionChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3024">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.RegionChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#22](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#22)]
 [!code-vb[System.Windows.Forms.EventExamples#22](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#22)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderRightToLeft">
      <MemberSignature Language="C#" Value="protected internal bool RenderRightToLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RenderRightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Protected Friend ReadOnly Property RenderRightToLeft As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; property bool RenderRightToLeft { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RenderRightToLeft : bool" Usage="System.Windows.Forms.Control.RenderRightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This property has been deprecated. Please use RightToLeft instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3025">このプロパティは使用されなくなりました。</span><span class="sxs-lookup"><span data-stu-id="97318-3025">This property is now obsolete.</span></span></summary>
        <value><span data-ttu-id="97318-3026">コントロールが右から左へ表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3026"><see langword="true" /> if the control is rendered from right to left; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-3027">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3027">The default is <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected virtual void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="F#" Value="abstract member RescaleConstantsForDpi : int * int -&gt; unit&#xA;override this.RescaleConstantsForDpi : int * int -&gt; unit" Usage="control.RescaleConstantsForDpi (deviceDpiOld, deviceDpiNew)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld"><span data-ttu-id="97318-3028">変更前の DPI 値。</span><span class="sxs-lookup"><span data-stu-id="97318-3028">The DPI value prior to the change.</span></span></param>
        <param name="deviceDpiNew"><span data-ttu-id="97318-3029">変更後の DPI 値。</span><span class="sxs-lookup"><span data-stu-id="97318-3029">The DPI value after the change.</span></span></param>
        <summary><span data-ttu-id="97318-3030">DPI の変更が発生したときに、コントロールの再スケーリングの定数を提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-3030">Provides constants for rescaling the control when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public virtual void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetBackColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetBackColor : unit -&gt; unit&#xA;override this.ResetBackColor : unit -&gt; unit" Usage="control.ResetBackColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3031"><see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3031">Resets the <see cref="P:System.Windows.Forms.Control.BackColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3032">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3032">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBindings">
      <MemberSignature Language="C#" Value="public void ResetBindings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetBindings() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetBindings" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetBindings ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetBindings();" />
      <MemberSignature Language="F#" Value="member this.ResetBindings : unit -&gt; unit" Usage="control.ResetBindings " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3033"><see cref="T:System.Windows.Forms.BindingSource" /> にバインドされたコントロールに対し、リスト内のすべての項目を再度読み込んで表示値を更新するよう通知します。</span><span class="sxs-lookup"><span data-stu-id="97318-3033">Causes a control bound to the <see cref="T:System.Windows.Forms.BindingSource" /> to reread all the items in the list and refresh their displayed values.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3034">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3034">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.DataBindings" />
      </Docs>
    </Member>
    <Member MemberName="ResetCursor">
      <MemberSignature Language="C#" Value="public virtual void ResetCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetCursor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetCursor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetCursor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetCursor();" />
      <MemberSignature Language="F#" Value="abstract member ResetCursor : unit -&gt; unit&#xA;override this.ResetCursor : unit -&gt; unit" Usage="control.ResetCursor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3035"><see cref="P:System.Windows.Forms.Control.Cursor" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3035">Resets the <see cref="P:System.Windows.Forms.Control.Cursor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3036">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3036">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetFont">
      <MemberSignature Language="C#" Value="public virtual void ResetFont ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetFont() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetFont" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetFont ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetFont();" />
      <MemberSignature Language="F#" Value="abstract member ResetFont : unit -&gt; unit&#xA;override this.ResetFont : unit -&gt; unit" Usage="control.ResetFont " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3037"><see cref="P:System.Windows.Forms.Control.Font" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3037">Resets the <see cref="P:System.Windows.Forms.Control.Font" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3038">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3038">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public virtual void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetForeColor();" />
      <MemberSignature Language="F#" Value="abstract member ResetForeColor : unit -&gt; unit&#xA;override this.ResetForeColor : unit -&gt; unit" Usage="control.ResetForeColor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3039"><see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3039">Resets the <see cref="P:System.Windows.Forms.Control.ForeColor" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3040">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3040">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetImeMode">
      <MemberSignature Language="C#" Value="public void ResetImeMode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetImeMode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetImeMode" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetImeMode ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetImeMode();" />
      <MemberSignature Language="F#" Value="member this.ResetImeMode : unit -&gt; unit" Usage="control.ResetImeMode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3041"><see cref="P:System.Windows.Forms.Control.ImeMode" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3041">Resets the <see cref="P:System.Windows.Forms.Control.ImeMode" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3042">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3042">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetMouseEventArgs">
      <MemberSignature Language="C#" Value="protected void ResetMouseEventArgs ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void ResetMouseEventArgs() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetMouseEventArgs" />
      <MemberSignature Language="VB.NET" Value="Protected Sub ResetMouseEventArgs ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void ResetMouseEventArgs();" />
      <MemberSignature Language="F#" Value="member this.ResetMouseEventArgs : unit -&gt; unit" Usage="control.ResetMouseEventArgs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3043"><see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを処理するためのコントロールをリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3043">Resets the control to handle the <see cref="E:System.Windows.Forms.Control.MouseLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetRightToLeft">
      <MemberSignature Language="C#" Value="public virtual void ResetRightToLeft ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetRightToLeft() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetRightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetRightToLeft ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetRightToLeft();" />
      <MemberSignature Language="F#" Value="abstract member ResetRightToLeft : unit -&gt; unit&#xA;override this.ResetRightToLeft : unit -&gt; unit" Usage="control.ResetRightToLeft " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3044"><see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティを既定値にリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3044">Resets the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to its default value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3045">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3045">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetText">
      <MemberSignature Language="C#" Value="public virtual void ResetText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResetText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResetText" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ResetText ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ResetText();" />
      <MemberSignature Language="F#" Value="abstract member ResetText : unit -&gt; unit&#xA;override this.ResetText : unit -&gt; unit" Usage="control.ResetText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3046"><see cref="P:System.Windows.Forms.Control.Text" /> プロパティを既定値 (<see cref="F:System.String.Empty" />) にリセットします。</span><span class="sxs-lookup"><span data-stu-id="97318-3046">Resets the <see cref="P:System.Windows.Forms.Control.Text" /> property to its default value (<see cref="F:System.String.Empty" />).</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3047">いずれかのデザイナーを作成する場合は通常このメソッドを使用する、<xref:System.Windows.Forms.Control>またはコントロールを組み込む独自に作成、<xref:System.Windows.Forms.Control>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3047">You typically use this method if you are either creating a designer for the <xref:System.Windows.Forms.Control> or creating your own control incorporating the <xref:System.Windows.Forms.Control>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event EventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : EventHandler " Usage="member this.Resize : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3048">コントロールのサイズが変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3048">Occurs when the control is resized.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3049">決定する、<xref:System.Windows.Forms.Control.Size%2A>サイズを変更したコントロールのキャストすることができます、 `sender` 、登録済みのパラメーター<xref:System.Windows.Forms.ControlEventHandler>メソッドを<xref:System.Windows.Forms.Control>取得とその<xref:System.Windows.Forms.Control.Size%2A>プロパティ (または<xref:System.Windows.Forms.Control.Height%2A>と<xref:System.Windows.Forms.Control.Width%2A>プロパティ個別に)。</span><span class="sxs-lookup"><span data-stu-id="97318-3049">To determine the <xref:System.Windows.Forms.Control.Size%2A> of the resized control, you can cast the `sender` parameter of the registered <xref:System.Windows.Forms.ControlEventHandler> method  to a <xref:System.Windows.Forms.Control> and get its <xref:System.Windows.Forms.Control.Size%2A> property (or <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> properties individually).</span></span>  
  
 <span data-ttu-id="97318-3050">カスタム レイアウトを処理するために使用して、<xref:System.Windows.Forms.Control.Layout>サイズ変更イベントではなくイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3050">To handle custom layouts, use the <xref:System.Windows.Forms.Control.Layout> event instead of the Resize event.</span></span> <span data-ttu-id="97318-3051"><xref:System.Windows.Forms.Control.Layout>への応答でイベントが発生します、<xref:System.Windows.Forms.Control.Resize>イベントも、コントロールのレイアウトに影響するその他の変更に応答します。</span><span class="sxs-lookup"><span data-stu-id="97318-3051">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to a <xref:System.Windows.Forms.Control.Resize> event, but also in response to other changes that affect the layout of the control.</span></span>  
  
 <span data-ttu-id="97318-3052">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3052">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3053">次のコード例のハンドル、<xref:System.Windows.Forms.Control.Resize>のイベントを<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3053">The following code example handles the <xref:System.Windows.Forms.Control.Resize> event of a <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-3054">イベント ハンドラーでは、フォームが正方形のままになることによって、フォームがサイズ変更されると (その<xref:System.Windows.Forms.Control.Height%2A>と<xref:System.Windows.Forms.Control.Width%2A>変化がない)。</span><span class="sxs-lookup"><span data-stu-id="97318-3054">When the form is resized, the event handler ensures that the form stays square (its <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Width%2A> remain equal).</span></span> <span data-ttu-id="97318-3055">この例を実行することを確認し、このイベント処理メソッドを関連付けるフォームの<xref:System.Windows.Forms.Control.Resize>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3055">To run this example, make sure and associate this event-handling method with the form's <xref:System.Windows.Forms.Control.Resize> event.</span></span>  
  
 [!code-cpp[WinForms.Control.Resize#1](~/samples/snippets/cpp/VS_Snippets_Winforms/WinForms.Control.Resize/CPP/form1.cpp#1)]
 [!code-csharp[WinForms.Control.Resize#1](~/samples/snippets/csharp/VS_Snippets_Winforms/WinForms.Control.Resize/CS/form1.cs#1)]
 [!code-vb[WinForms.Control.Resize#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/WinForms.Control.Resize/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnResize(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="ResizeRedraw">
      <MemberSignature Language="C#" Value="protected bool ResizeRedraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResizeRedraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ResizeRedraw" />
      <MemberSignature Language="VB.NET" Value="Protected Property ResizeRedraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool ResizeRedraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResizeRedraw : bool with get, set" Usage="System.Windows.Forms.Control.ResizeRedraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3056">サイズが変更されたときに、コントロールがコントロール自体を再描画するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3056">Gets or sets a value indicating whether the control redraws itself when resized.</span></span></summary>
        <value><span data-ttu-id="97318-3057">サイズが変更されるとコントロールがコントロール自体を再描画する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3057"><see langword="true" /> if the control redraws itself when resized; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3058"><xref:System.Windows.Forms.Control.ResizeRedraw%2A>プロパティの値がの戻り値に相当する、<xref:System.Windows.Forms.Control.GetStyle%2A>メソッドに渡すと、<xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType>値をパラメーターとして。</span><span class="sxs-lookup"><span data-stu-id="97318-3058">The <xref:System.Windows.Forms.Control.ResizeRedraw%2A> property value is equivalent to the return value of the <xref:System.Windows.Forms.Control.GetStyle%2A> method when passing in the <xref:System.Windows.Forms.ControlStyles.ResizeRedraw?displayProperty=nameWithType> value as a parameter.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="F:System.Windows.Forms.ControlStyles.ResizeRedraw" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ResumeLayout">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-3059">通常のレイアウト ロジックを再開します。</span><span class="sxs-lookup"><span data-stu-id="97318-3059">Resumes the usual layout logic.</span></span></summary>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
      </Docs>
    </MemberGroup>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout();" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : unit -&gt; unit" Usage="control.ResumeLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3060">通常のレイアウト ロジックを再開します。</span><span class="sxs-lookup"><span data-stu-id="97318-3060">Resumes usual layout logic.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3061">呼び出す、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド強制的に即時のレイアウト、保留中のレイアウトの要求を使用する必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="97318-3061">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="97318-3062"><xref:System.Windows.Forms.Control.SuspendLayout%2A>と<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッドを使用して並行して複数の抑制<xref:System.Windows.Forms.Control.Layout>イベント中に、コントロールの複数の属性を調整します。</span><span class="sxs-lookup"><span data-stu-id="97318-3062">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="97318-3063">呼び出します通常など、<xref:System.Windows.Forms.Control.SuspendLayout%2A>メソッドを設定し、 <xref:System.Windows.Forms.Control.Size%2A>、 <xref:System.Windows.Forms.Control.Location%2A>、 <xref:System.Windows.Forms.Control.Anchor%2A>、または<xref:System.Windows.Forms.Control.Dock%2A>制御、および次のプロパティ、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッドを有効にする変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-3063">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="97318-3064">保留中の呼び出しが必要ない<xref:System.Windows.Forms.Control.SuspendLayout%2A>の<xref:System.Windows.Forms.Control.ResumeLayout%2A>正常に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3064">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3065">次のコード例では、フォームに 2 つのボタンを追加します。</span><span class="sxs-lookup"><span data-stu-id="97318-3065">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="97318-3066">トランザクションの例を使用して、ボタンの追加、<xref:System.Windows.Forms.Control.SuspendLayout%2A>と<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3066">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="ResumeLayout">
      <MemberSignature Language="C#" Value="public void ResumeLayout (bool performLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResumeLayout(bool performLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ResumeLayout(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResumeLayout (performLayout As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResumeLayout(bool performLayout);" />
      <MemberSignature Language="F#" Value="member this.ResumeLayout : bool -&gt; unit" Usage="control.ResumeLayout performLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="performLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="performLayout"><span data-ttu-id="97318-3067">保留中のレイアウトの要求を実行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3067"><see langword="true" /> to execute pending layout requests; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-3068">通常のレイアウト ロジックを再開します。オプションで、保留中のレイアウト要求のレイアウトを強制的に即時実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-3068">Resumes usual layout logic, optionally forcing an immediate layout of pending layout requests.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3069">呼び出す、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド強制的に即時のレイアウト、保留中のレイアウトの要求を使用する必要がある場合。</span><span class="sxs-lookup"><span data-stu-id="97318-3069">Calling the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method forces an immediate layout if there are any pending layout requests.</span></span> <span data-ttu-id="97318-3070">ときに、`performLayout`にパラメーターが設定されている`true`、即時のレイアウトは、保留中のレイアウトの要求を使用する必要がある場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3070">When the `performLayout` parameter is set to `true`, an immediate layout occurs if there are any pending layout requests.</span></span>  
  
 <span data-ttu-id="97318-3071"><xref:System.Windows.Forms.Control.SuspendLayout%2A>と<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッドを使用して並行して複数の抑制<xref:System.Windows.Forms.Control.Layout>イベント中に、コントロールの複数の属性を調整します。</span><span class="sxs-lookup"><span data-stu-id="97318-3071">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="97318-3072">呼び出します通常など、<xref:System.Windows.Forms.Control.SuspendLayout%2A>メソッドを設定し、 <xref:System.Windows.Forms.Control.Size%2A>、 <xref:System.Windows.Forms.Control.Location%2A>、 <xref:System.Windows.Forms.Control.Anchor%2A>、または<xref:System.Windows.Forms.Control.Dock%2A>制御、および次のプロパティ、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッドを有効にする変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-3072">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="97318-3073">保留中の呼び出しが必要ない<xref:System.Windows.Forms.Control.SuspendLayout%2A>の<xref:System.Windows.Forms.Control.ResumeLayout%2A>正常に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3073">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-3074">いくつかのコントロールを親コントロールを追加する場合は、呼び出すことをお勧めしますが、<xref:System.Windows.Forms.Control.SuspendLayout%2A>メソッドを追加するコントロールを初期化する前にします。</span><span class="sxs-lookup"><span data-stu-id="97318-3074">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="97318-3075">親コントロールにコントロールを追加した後、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3075">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="97318-3076">これにより、多くのコントロールを持つアプリケーションのパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="97318-3076">This will increase the performance of applications with many controls.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="Right">
      <MemberSignature Language="C#" Value="public int Right { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Right" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Right" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Right As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Right { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Right : int" Usage="System.Windows.Forms.Control.Right" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3077">コントロールの右端とコンテナーのクライアント領域の左端の間の距離をピクセルで取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-3077">Gets the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="97318-3078"><see cref="T:System.Int32" /> は、コントロールの右端とコンテナーのクライアント領域の左端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3078">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the right edge of the control and the left edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3079">値、<xref:System.Windows.Forms.Control.Right%2A>プロパティは、の合計に等しい、<xref:System.Windows.Forms.Control.Left%2A>プロパティの値と<xref:System.Windows.Forms.Control.Width%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-3079">The value of the <xref:System.Windows.Forms.Control.Right%2A> property is equal to the sum of the <xref:System.Windows.Forms.Control.Left%2A> property value and the <xref:System.Windows.Forms.Control.Width%2A> property value.</span></span>  
  
 <span data-ttu-id="97318-3080"><xref:System.Windows.Forms.Control.Right%2A> プロパティは読み取り専用です。</span><span class="sxs-lookup"><span data-stu-id="97318-3080">The <xref:System.Windows.Forms.Control.Right%2A> property is read-only.</span></span> <span data-ttu-id="97318-3081">変更しないこのプロパティの値直接の値を変更することで、<xref:System.Windows.Forms.Control.Left%2A>または<xref:System.Windows.Forms.Control.Width%2A>プロパティまたは呼び出す、 <xref:System.Windows.Forms.Control.SetBounds%2A>、 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>、 <xref:System.Windows.Forms.Control.UpdateBounds%2A>、または<xref:System.Windows.Forms.Control.SetClientSizeCore%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3081">You can change this property value indirectly by changing the value of the <xref:System.Windows.Forms.Control.Left%2A> or <xref:System.Windows.Forms.Control.Width%2A> properties or calling the <xref:System.Windows.Forms.Control.SetBounds%2A>, <xref:System.Windows.Forms.Control.SetBoundsCore%2A>, <xref:System.Windows.Forms.Control.UpdateBounds%2A>, or <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3082">次のコード例では、3 つを作成<xref:System.Windows.Forms.Button>フォームのコントロールし、さまざまなサイズに関連して、場所に関連するプロパティを使用して、そのサイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3082">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="97318-3083">この例が必要です、<xref:System.Windows.Forms.Form>少なくとも 300 ピクセルの高さ、幅を持ちます。</span><span class="sxs-lookup"><span data-stu-id="97318-3083">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 [!code-cpp[Control.KeyUp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyUp/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyUp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyUp/CS/form1.cs#1)]
 [!code-vb[Control.KeyUp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyUp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Right" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.Control.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3084">コントロールの要素が、右から左へ表示されるフォントを使用するロケールをサポートするように配置されているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3084">Gets or sets a value indicating whether control's elements are aligned to support locales using right-to-left fonts.</span></span></summary>
        <value><span data-ttu-id="97318-3085"><see cref="T:System.Windows.Forms.RightToLeft" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3085">One of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span> <span data-ttu-id="97318-3086">既定値は <see cref="F:System.Windows.Forms.RightToLeft.Inherit" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3086">The default is <see cref="F:System.Windows.Forms.RightToLeft.Inherit" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3087"><xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティは、アンビエント プロパティです。</span><span class="sxs-lookup"><span data-stu-id="97318-3087">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is an ambient property.</span></span> <span data-ttu-id="97318-3088">アンビエントのプロパティはコントロールのプロパティ セットは、親コントロールから取得されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3088">An ambient property is a control property that, if not set, is retrieved from the parent control.</span></span> <span data-ttu-id="97318-3089">たとえば、<xref:System.Windows.Forms.Button>が、同じ<xref:System.Windows.Forms.Control.BackColor%2A>親として<xref:System.Windows.Forms.Form>既定では。</span><span class="sxs-lookup"><span data-stu-id="97318-3089">For example, a <xref:System.Windows.Forms.Button> will have the same <xref:System.Windows.Forms.Control.BackColor%2A> as its parent <xref:System.Windows.Forms.Form> by default.</span></span> <span data-ttu-id="97318-3090">アンビエント プロパティの詳細については、次を参照してください。、<xref:System.Windows.Forms.AmbientProperties>クラスまたは<xref:System.Windows.Forms.Control>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="97318-3090">For more information about ambient properties, see the <xref:System.Windows.Forms.AmbientProperties> class or the <xref:System.Windows.Forms.Control> class overview.</span></span>  
  
 <span data-ttu-id="97318-3091"><xref:System.Windows.Forms.Control.RightToLeft%2A>右から左、ヘブライ語やアラビア語などの言語の書き込み先の国際対応アプリケーション プロパティで使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-3091">The <xref:System.Windows.Forms.Control.RightToLeft%2A> property is used for international applications where the language is written from right to left, such as Hebrew or Arabic.</span></span> <span data-ttu-id="97318-3092">このプロパティに設定しているときに<xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>、右から左へテキストを含むコントロールの要素が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3092">When this property is set to <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, control elements that include text are displayed from right to left.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-3093">場合の値、<xref:System.Windows.Forms.Control.RightToLeft%2A>実行時にプロパティが変更された、書式を未加工のテキストのみが保持されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3093">If the value of the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed at run time, only raw text without formatting is preserved.</span></span>  
  
 <span data-ttu-id="97318-3094">コントロール要素の影響について、いくつかの例を次に、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティ値の<xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>:</span><span class="sxs-lookup"><span data-stu-id="97318-3094">The following are a few examples of how control elements are affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property value of <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> :</span></span>  
  
-   <span data-ttu-id="97318-3095">スクロール可能なコントロールの右側にあるのではなく、左側に垂直スクロール バーが表示されます (たとえば、 <xref:System.Windows.Forms.Form>、<xref:System.Windows.Forms.Panel>複数行、 <xref:System.Windows.Forms.TextBox>、および<xref:System.Windows.Forms.RichTextBox>)。</span><span class="sxs-lookup"><span data-stu-id="97318-3095">Vertical scroll bars are displayed on the left side rather than right side of scrollable controls (for example, <xref:System.Windows.Forms.Form>, <xref:System.Windows.Forms.Panel>, multiline <xref:System.Windows.Forms.TextBox>, and <xref:System.Windows.Forms.RichTextBox>).</span></span>  
  
-   <span data-ttu-id="97318-3096">水平スクロール バーは右揃えのスクロール ボックス (つまみ) を起動します。</span><span class="sxs-lookup"><span data-stu-id="97318-3096">Horizontal scroll bars start with the scroll box (thumb) right-aligned.</span></span>  
  
-   <span data-ttu-id="97318-3097">によって制御されるチェック ボックス要素の配置、`CheckAlign`プロパティには逆に<xref:System.Windows.Forms.CheckBox>と<xref:System.Windows.Forms.RadioButton>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3097">The check box element alignment, controlled by the `CheckAlign` property, is reversed for <xref:System.Windows.Forms.CheckBox> and <xref:System.Windows.Forms.RadioButton> controls.</span></span>  
  
-   <span data-ttu-id="97318-3098">リスト ボックス、コンボ ボックス、およびアップダウン コントロール内の項目が右寄せになります。</span><span class="sxs-lookup"><span data-stu-id="97318-3098">Items in list box, combo box, and up-down controls are right aligned.</span></span>  
  
-   <span data-ttu-id="97318-3099">上向きボタンおよび下向きは左揃えで<xref:System.Windows.Forms.NumericUpDown>と<xref:System.Windows.Forms.DomainUpDown>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3099">Up and down buttons are left-aligned on <xref:System.Windows.Forms.NumericUpDown> and <xref:System.Windows.Forms.DomainUpDown> controls.</span></span>  
  
-   <span data-ttu-id="97318-3100">メニュー (<xref:System.Windows.Forms.MainMenu>、 <xref:System.Windows.Forms.MenuItem>、および<xref:System.Windows.Forms.ContextMenu>) 右揃えに表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3100">Menus (<xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.MenuItem>, and <xref:System.Windows.Forms.ContextMenu>) are displayed right-aligned.</span></span>  
  
-   <span data-ttu-id="97318-3101">ツールバーのボタンの配置を<xref:System.Windows.Forms.ToolBar>コントロールまたはの上のテキストの配置を<xref:System.Windows.Forms.ToolBarButton>は影響されません、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3101">The alignment of toolbar buttons on a <xref:System.Windows.Forms.ToolBar> control or the alignment of text on a <xref:System.Windows.Forms.ToolBarButton> is not affected by the <xref:System.Windows.Forms.Control.RightToLeft%2A> property.</span></span>  
  
-   <span data-ttu-id="97318-3102"><xref:System.Windows.Forms.AxHost> 右から左への配置をサポートしていますただし、ActiveX コントロールへの影響は、コントロールの作成者が右から左に表示するためのサポートを実装するエクステントによって異なります。</span><span class="sxs-lookup"><span data-stu-id="97318-3102"><xref:System.Windows.Forms.AxHost> supports right-to-left alignment; however, the effect on an ActiveX control depends on the extent to which the control author implemented support for right-to-left display.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><span data-ttu-id="97318-3103">割り当てられた値が 1 つの<see cref="T:System.Windows.Forms.RightToLeft" />値。</span><span class="sxs-lookup"><span data-stu-id="97318-3103">The assigned value is not one of the <see cref="T:System.Windows.Forms.RightToLeft" /> values.</span></span></exception>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3104">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.RightToLeft" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.RightToLeft" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3104">When overriding the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-3105">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-3105">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-3106">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.RightToLeft" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-3106">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RightToLeftChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.RightToLeftChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftChanged;" />
      <MemberSignature Language="F#" Value="member this.RightToLeftChanged : EventHandler " Usage="member this.RightToLeftChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3107"><see cref="P:System.Windows.Forms.Control.RightToLeft" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3107">Occurs when the <see cref="P:System.Windows.Forms.Control.RightToLeft" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3108">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.RightToLeft%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-3108">This event is raised if the <xref:System.Windows.Forms.Control.RightToLeft%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3109">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3109">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3110">次のコード例は、イベント ハンドラーを実行すると実行、<xref:System.Windows.Forms.Control.Text%2A>プロパティ値が変更されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3110">The following code example is an event handler that is executed when the <xref:System.Windows.Forms.Control.Text%2A> property value changes.</span></span> <span data-ttu-id="97318-3111"><xref:System.Windows.Forms.Control>クラスがいくつかのメソッド名のパターンを持つ*PropertyName* `Changed`にある場合に発生します、対応する*PropertyName*値の変更 (*PropertyName*対応するプロパティの名前を表します)。</span><span class="sxs-lookup"><span data-stu-id="97318-3111">The <xref:System.Windows.Forms.Control> class has several methods with the name pattern *PropertyName*`Changed` that are raised when the corresponding *PropertyName* value changes (*PropertyName* represents the name of the corresponding property).</span></span>  
  
 <span data-ttu-id="97318-3112">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3112">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="97318-3113">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-3113">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-3114">この例が必要です、<xref:System.Windows.Forms.Form>を格納している、<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3114">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnRightToLeftChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RtlTranslateAlignment">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-3115">現在の配置を適切な配置に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3115">Converts the current alignment to the appropriate alignment to support right-to-left text.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Drawing.ContentAlignment RtlTranslateAlignment (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateAlignment(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As ContentAlignment) As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Drawing::ContentAlignment RtlTranslateAlignment(System::Drawing::ContentAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="97318-3116"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3116">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3117">指定した <see cref="T:System.Drawing.ContentAlignment" /> を適切な <see cref="T:System.Drawing.ContentAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3117">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="97318-3118"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3118">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3119">場合、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティの<xref:System.Windows.Forms.RightToLeft>に設定されている`No`、戻り値が等しく、`align`でパラメーターが渡されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3119">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateAlignment(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="97318-3120"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3120">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3121">指定した <see cref="T:System.Windows.Forms.HorizontalAlignment" /> を適切な <see cref="T:System.Windows.Forms.HorizontalAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3121">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="97318-3122"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3122">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3123">場合、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティの<xref:System.Windows.Forms.RightToLeft>に設定されている`No`、戻り値が等しく、`align`でパラメーターが渡されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3123">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateAlignment">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateAlignment(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateAlignment (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateAlignment(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateAlignment : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateAlignment align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="97318-3124"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3124">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3125">指定した <see cref="T:System.Windows.Forms.LeftRightAlignment" /> を適切な <see cref="T:System.Windows.Forms.LeftRightAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3125">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="97318-3126"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3126">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3127">場合、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティの<xref:System.Windows.Forms.RightToLeft>に設定されている`No`、戻り値が等しく、`align`でパラメーターが渡されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3127">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateContent">
      <MemberSignature Language="C#" Value="protected internal System.Drawing.ContentAlignment RtlTranslateContent (System.Drawing.ContentAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance valuetype System.Drawing.ContentAlignment RtlTranslateContent(valuetype System.Drawing.ContentAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Function RtlTranslateContent (align As ContentAlignment) As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; System::Drawing::ContentAlignment RtlTranslateContent(System::Drawing::ContentAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateContent : System.Drawing.ContentAlignment -&gt; System.Drawing.ContentAlignment" Usage="control.RtlTranslateContent align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Drawing.ContentAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="97318-3128"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3128">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3129">指定した <see cref="T:System.Drawing.ContentAlignment" /> を適切な <see cref="T:System.Drawing.ContentAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3129">Converts the specified <see cref="T:System.Drawing.ContentAlignment" /> to the appropriate <see cref="T:System.Drawing.ContentAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="97318-3130"><see cref="T:System.Drawing.ContentAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3130">One of the <see cref="T:System.Drawing.ContentAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3131">場合、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティの<xref:System.Windows.Forms.RightToLeft>に設定されている`No`、戻り値が等しく、`align`でパラメーターが渡されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3131">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateHorizontal">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal (System.Windows.Forms.HorizontalAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.HorizontalAlignment RtlTranslateHorizontal(valuetype System.Windows.Forms.HorizontalAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateHorizontal (align As HorizontalAlignment) As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::HorizontalAlignment RtlTranslateHorizontal(System::Windows::Forms::HorizontalAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateHorizontal : System.Windows.Forms.HorizontalAlignment -&gt; System.Windows.Forms.HorizontalAlignment" Usage="control.RtlTranslateHorizontal align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.HorizontalAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="97318-3132"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3132">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3133">指定した <see cref="T:System.Windows.Forms.HorizontalAlignment" /> を適切な <see cref="T:System.Windows.Forms.HorizontalAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3133">Converts the specified <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.HorizontalAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="97318-3134"><see cref="T:System.Windows.Forms.HorizontalAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3134">One of the <see cref="T:System.Windows.Forms.HorizontalAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3135">場合、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティの<xref:System.Windows.Forms.RightToLeft>に設定されている`No`、戻り値が等しく、`align`でパラメーターが渡されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3135">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      </Docs>
    </Member>
    <Member MemberName="RtlTranslateLeftRight">
      <MemberSignature Language="C#" Value="protected System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight (System.Windows.Forms.LeftRightAlignment align);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance valuetype System.Windows.Forms.LeftRightAlignment RtlTranslateLeftRight(valuetype System.Windows.Forms.LeftRightAlignment align) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.RtlTranslateLeftRight(System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="VB.NET" Value="Protected Function RtlTranslateLeftRight (align As LeftRightAlignment) As LeftRightAlignment" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; System::Windows::Forms::LeftRightAlignment RtlTranslateLeftRight(System::Windows::Forms::LeftRightAlignment align);" />
      <MemberSignature Language="F#" Value="member this.RtlTranslateLeftRight : System.Windows.Forms.LeftRightAlignment -&gt; System.Windows.Forms.LeftRightAlignment" Usage="control.RtlTranslateLeftRight align" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LeftRightAlignment</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="align" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="align"><span data-ttu-id="97318-3136"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3136">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3137">指定した <see cref="T:System.Windows.Forms.LeftRightAlignment" /> を適切な <see cref="T:System.Windows.Forms.LeftRightAlignment" /> に変換し、テキストを右から左に表示できるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3137">Converts the specified <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to the appropriate <see cref="T:System.Windows.Forms.LeftRightAlignment" /> to support right-to-left text.</span></span></summary>
        <returns><span data-ttu-id="97318-3138"><see cref="T:System.Windows.Forms.LeftRightAlignment" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3138">One of the <see cref="T:System.Windows.Forms.LeftRightAlignment" /> values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3139">場合、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティの<xref:System.Windows.Forms.RightToLeft>に設定されている`No`、戻り値が等しく、`align`でパラメーターが渡されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3139">If the <xref:System.Windows.Forms.Control.RightToLeft%2A> property of <xref:System.Windows.Forms.RightToLeft> is set to `No`, the return value is equal to the `align` parameter passed in.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.RightToLeft" />
        <altmember cref="T:System.Windows.Forms.LeftRightAlignment" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateContent(System.Drawing.ContentAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateHorizontal(System.Windows.Forms.HorizontalAlignment)" />
        <altmember cref="M:System.Windows.Forms.Control.RtlTranslateAlignment(System.Windows.Forms.HorizontalAlignment)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Scale">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-3140">コントロールおよび子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3140">Scales the control and any child controls.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (System.Drawing.SizeF factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.Drawing.SizeF factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Drawing.SizeF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (factor As SizeF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(System::Drawing::SizeF factor);" />
      <MemberSignature Language="F#" Value="member this.Scale : System.Drawing.SizeF -&gt; unit" Usage="control.Scale factor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="97318-3141">水平および垂直方向の倍率を格納した <see cref="T:System.Drawing.SizeF" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3141">A <see cref="T:System.Drawing.SizeF" /> containing the horizontal and vertical scaling factors.</span></span></param>
        <summary><span data-ttu-id="97318-3142">指定されたスケール ファクターによってコントロールおよびすべての子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3142">Scales the control and all child controls by the specified scaling factor.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3143"><xref:System.Windows.Forms.Control.Scale%2A>メソッドは、指定したスケーリングによって、コントロールをスケーリング`factor`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3143">The <xref:System.Windows.Forms.Control.Scale%2A> method scales the control by the specified scaling `factor`.</span></span> <span data-ttu-id="97318-3144">これも再帰的にはすべての子コントロールをスケーリングの場合、<xref:System.Windows.Forms.Control.ScaleChildren%2A>プロパティは`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3144">It also recursively scales all child controls if the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`.</span></span> <span data-ttu-id="97318-3145">内部的には、このメソッドを呼び出す<xref:System.Windows.Forms.Control.ScaleControl%2A>各コントロールをスケーリングします。</span><span class="sxs-lookup"><span data-stu-id="97318-3145">Internally, this method calls <xref:System.Windows.Forms.Control.ScaleControl%2A> to scale each control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ScaleChildren" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float ratio);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 ratio) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (ratio As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float ratio);" />
      <MemberSignature Language="F#" Value="member this.Scale : single -&gt; unit" Usage="control.Scale ratio" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ratio" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="ratio"><span data-ttu-id="97318-3146">スケーリングに使用する比率。</span><span class="sxs-lookup"><span data-stu-id="97318-3146">The ratio to use for scaling.</span></span></param>
        <summary><span data-ttu-id="97318-3147">コントロールおよび子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3147">Scales the control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Scale(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.Scale : single * single -&gt; unit" Usage="control.Scale (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.Obsolete("This method has been deprecated. Use the Scale(SizeF ratio) method instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="97318-3148">水平方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="97318-3148">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="97318-3149">垂直方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="97318-3149">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="97318-3150">コントロール全体および子コントロールのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3150">Scales the entire control and any child controls.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleBitmapLogicalToDevice">
      <MemberSignature Language="C#" Value="public void ScaleBitmapLogicalToDevice (ref System.Drawing.Bitmap logicalBitmap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleBitmapLogicalToDevice(class System.Drawing.Bitmap&amp; logicalBitmap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleBitmapLogicalToDevice(System.Drawing.Bitmap@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleBitmapLogicalToDevice (ByRef logicalBitmap As Bitmap)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleBitmapLogicalToDevice(System::Drawing::Bitmap ^ % logicalBitmap);" />
      <MemberSignature Language="F#" Value="member this.ScaleBitmapLogicalToDevice :  -&gt; unit" Usage="control.ScaleBitmapLogicalToDevice logicalBitmap" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="logicalBitmap" Type="System.Drawing.Bitmap" RefType="ref" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="logicalBitmap"><span data-ttu-id="97318-3151">スケールを設定するビットマップ。</span><span class="sxs-lookup"><span data-stu-id="97318-3151">The bitmap to scale.</span></span></param>
        <summary><span data-ttu-id="97318-3152">DPI の変更が発生したときに、同等のデバイス単位値に論理ビットマップ値のスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3152">Scales a logical bitmap value to it's equivalent device unit value when a DPI change occurs.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleChildren">
      <MemberSignature Language="C#" Value="protected virtual bool ScaleChildren { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScaleChildren" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ScaleChildren" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property ScaleChildren As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool ScaleChildren { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScaleChildren : bool" Usage="System.Windows.Forms.Control.ScaleChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3153">子コントロールの表示スケールを決定する値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-3153">Gets a value that determines the scaling of child controls.</span></span></summary>
        <value><span data-ttu-id="97318-3154">このコントロールで <see langword="true" /> メソッドが呼び出されたときに子コントロールのスケールが設定される場合は <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3154"><see langword="true" /> if child controls will be scaled when the <see cref="M:System.Windows.Forms.Control.Scale(System.Single)" /> method on this control is called; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-3155">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3155">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3156">場合、<xref:System.Windows.Forms.Control.ScaleChildren%2A>プロパティは`true`、<xref:System.Windows.Forms.Control.Scale%2A>メソッドが再帰的に呼び出す、<xref:System.Windows.Forms.Control.ScaleControl%2A>その子コントロールのそれぞれのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3156">If the <xref:System.Windows.Forms.Control.ScaleChildren%2A> property is `true`, then the <xref:System.Windows.Forms.Control.Scale%2A> method will recursively call the <xref:System.Windows.Forms.Control.ScaleControl%2A> method of each of its child controls.</span></span>  
  
 <span data-ttu-id="97318-3157">既定の実装<xref:System.Windows.Forms.Control.ScaleChildren%2A>は常に返します`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3157">The default implementation of <xref:System.Windows.Forms.Control.ScaleChildren%2A> always returns `true`.</span></span> <span data-ttu-id="97318-3158">派生クラスでオーバーライドできます<xref:System.Windows.Forms.Control.ScaleChildren%2A>を返す`false`をスケーリングする必要がありますいないで実行されることの子を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3158">Derived classes can override <xref:System.Windows.Forms.Control.ScaleChildren%2A> to return `false` to indicate that scaling should not be performed on their children.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Scale(System.Single)" />
        <altmember cref="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="M:System.Windows.Forms.Control.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected virtual void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.ScaleControl : System.Drawing.SizeF * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.ScaleControl (factor, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="factor"><span data-ttu-id="97318-3159">コントロールの高さと幅のスケールを設定する際のファクター。</span><span class="sxs-lookup"><span data-stu-id="97318-3159">The factor by which the height and width of the control will be scaled.</span></span></param>
        <param name="specified"><span data-ttu-id="97318-3160">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値。</span><span class="sxs-lookup"><span data-stu-id="97318-3160">A <see cref="T:System.Windows.Forms.BoundsSpecified" /> value that specifies the bounds of the control to use when defining its size and position.</span></span></param>
        <summary><span data-ttu-id="97318-3161">コントロールの位置、サイズ、埋め込み、およびマージンのスケールを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3161">Scales a control's location, size, padding and margin.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3162">コントロールが最上位レベルの場合は、このコントロールの位置は対応できません。</span><span class="sxs-lookup"><span data-stu-id="97318-3162">If the control is top level, this will not scale the control's location.</span></span> <span data-ttu-id="97318-3163">これは、子、または自動的にサイズ変更されたコントロールのサイズには拡張できません。</span><span class="sxs-lookup"><span data-stu-id="97318-3163">This does not scale children or the size of automatically sized controls.</span></span> <span data-ttu-id="97318-3164">値を変更することで、任意の方向にスケーリングを省略することができます、`specified`パラメーター。</span><span class="sxs-lookup"><span data-stu-id="97318-3164">You can omit scaling in any direction by changing the value of the `specified` parameter.</span></span>  
  
   
  
## Examples  
 <xref:System.Windows.Forms.BoundsSpecified>  
  
 <xref:System.Windows.Forms.Control.Scale%2A>  
  
 <xref:System.Windows.Forms.Control.GetScaledBounds%2A>  
  
 <xref:System.Windows.Forms.Control.SetBoundsCore%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleCore">
      <MemberSignature Language="C#" Value="protected virtual void ScaleCore (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScaleCore(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.ScaleCore(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ScaleCore (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ScaleCore(float dx, float dy);" />
      <MemberSignature Language="F#" Value="abstract member ScaleCore : single * single -&gt; unit&#xA;override this.ScaleCore : single * single -&gt; unit" Usage="control.ScaleCore (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx"><span data-ttu-id="97318-3165">水平方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="97318-3165">The horizontal scaling factor.</span></span></param>
        <param name="dy"><span data-ttu-id="97318-3166">垂直方向のスケール ファクター。</span><span class="sxs-lookup"><span data-stu-id="97318-3166">The vertical scaling factor.</span></span></param>
        <summary><span data-ttu-id="97318-3167">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3167">This method is not relevant for this class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3168">このクラスでは、このメソッドは無効です。</span><span class="sxs-lookup"><span data-stu-id="97318-3168">This method is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-3169">コントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3169">Activates a control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="97318-3170"><xref:System.Windows.Forms.Control.Select%2A>場合、メソッドは、コントロールをアクティブにコントロールの<xref:System.Windows.Forms.ControlStyles.Selectable?displayProperty=nameWithType>にスタイル ビットが設定されている`true`、別のコントロールに含まれていると、すべての親コントロールが両方表示して有効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-3170">The <xref:System.Windows.Forms.Control.Select%2A> method activates the control if the control's <xref:System.Windows.Forms.ControlStyles.Selectable?displayProperty=nameWithType> style bit is set to `true`, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>

<span data-ttu-id="97318-3171">次の一覧に Windows フォーム コントロールは、選択可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-3171">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="97318-3172">リストのコントロールから派生したコントロールも選択できません。</span><span class="sxs-lookup"><span data-stu-id="97318-3172">Controls derived from controls in the list will also not be selectable.</span></span>
  
- <xref:System.Windows.Forms.Label>  
- <xref:System.Windows.Forms.Panel>  
- <xref:System.Windows.Forms.GroupBox>
- <xref:System.Windows.Forms.PictureBox>  
- <xref:System.Windows.Forms.ProgressBar>
- <xref:System.Windows.Forms.Splitter>
- <span data-ttu-id="97318-3173"><xref:System.Windows.Forms.LinkLabel> (この場合、コントロール内にリンクすることはありません)</span><span class="sxs-lookup"><span data-stu-id="97318-3173"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public void Select ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Select() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select" />
      <MemberSignature Language="VB.NET" Value="Public Sub Select ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Select();" />
      <MemberSignature Language="F#" Value="member this.Select : unit -&gt; unit" Usage="control.Select " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3174">コントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3174">Activates the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[
  
## Examples  

<span data-ttu-id="97318-3175">次のコード例を指定した選択<xref:System.Windows.Forms.Control>が選択可能な場合。</span><span class="sxs-lookup"><span data-stu-id="97318-3175">The following code example selects the specified <xref:System.Windows.Forms.Control>, if it is selectable.</span></span>
  
[!code-cpp[Windows.Forms.ControlMembers6#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#2)]
[!code-csharp[Windows.Forms.ControlMembers6#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#2)]
[!code-vb[Windows.Forms.ControlMembers6#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
        <altmember cref="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="protected virtual void Select (bool directed, bool forward);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Select(bool directed, bool forward) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Select(System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Select (directed As Boolean, forward As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Select(bool directed, bool forward);" />
      <MemberSignature Language="F#" Value="abstract member Select : bool * bool -&gt; unit&#xA;override this.Select : bool * bool -&gt; unit" Usage="control.Select (directed, forward)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directed" Type="System.Boolean" />
        <Parameter Name="forward" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="directed"><span data-ttu-id="97318-3176">選択するコントロールの方向を指定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3176"><see langword="true" /> to specify the direction of the control to select; otherwise, <see langword="false" />.</span></span></param>
        <param name="forward"><span data-ttu-id="97318-3177">タブ オーダー内を前方に移動する場合は <see langword="true" />。後方に移動する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3177"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <summary><span data-ttu-id="97318-3178">子コントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3178">Activates a child control.</span></span> <span data-ttu-id="97318-3179">オプションとして、タブ オーダーでコントロールを選択するときの方向を指定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3179">Optionally specifies the direction in the tab order to select the control from.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3180">`directed`と`forward`コンテナー スタイルのコントロールでパラメーターを使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-3180">The `directed` and `forward` parameters are used by container-style controls.</span></span> <span data-ttu-id="97318-3181">ときに、`directed`にパラメーターが設定されている`true`、`forward`を選択するコントロールを決定するパラメーターが評価されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3181">When the `directed` parameter is set to `true`, the `forward` parameter is evaluated to determine which control to select.</span></span> <span data-ttu-id="97318-3182">ときに`forward`に設定されている`true`、タブ オーダーの次のコントロールが選択されているときに`false`、タブ オーダー内で前のコントロールが選択されています。</span><span class="sxs-lookup"><span data-stu-id="97318-3182">When `forward` is set to `true`, the next control in the tab order is selected; when `false`, the previous control in the tab order is selected.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ContainerControl" />
        <altmember cref="M:System.Windows.Forms.Control.Select" />
      </Docs>
    </Member>
    <Member MemberName="SelectNextControl">
      <MemberSignature Language="C#" Value="public bool SelectNextControl (System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool SelectNextControl(class System.Windows.Forms.Control ctl, bool forward, bool tabStopOnly, bool nested, bool wrap) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SelectNextControl(System.Windows.Forms.Control,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function SelectNextControl (ctl As Control, forward As Boolean, tabStopOnly As Boolean, nested As Boolean, wrap As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool SelectNextControl(System::Windows::Forms::Control ^ ctl, bool forward, bool tabStopOnly, bool nested, bool wrap);" />
      <MemberSignature Language="F#" Value="member this.SelectNextControl : System.Windows.Forms.Control * bool * bool * bool * bool -&gt; bool" Usage="control.SelectNextControl (ctl, forward, tabStopOnly, nested, wrap)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctl" Type="System.Windows.Forms.Control" />
        <Parameter Name="forward" Type="System.Boolean" />
        <Parameter Name="tabStopOnly" Type="System.Boolean" />
        <Parameter Name="nested" Type="System.Boolean" />
        <Parameter Name="wrap" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="ctl"><span data-ttu-id="97318-3183">検索の開始位置とする <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3183">The <see cref="T:System.Windows.Forms.Control" /> at which to start the search.</span></span></param>
        <param name="forward"><span data-ttu-id="97318-3184">タブ オーダー内を前方に移動する場合は <see langword="true" />。後方に移動する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3184"><see langword="true" /> to move forward in the tab order; <see langword="false" /> to move backward in the tab order.</span></span></param>
        <param name="tabStopOnly"><span data-ttu-id="97318-3185"><see langword="true" /> プロパティが <see cref="P:System.Windows.Forms.Control.TabStop" /> に設定されているコントロールを無視する場合は <see langword="false" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3185"><see langword="true" /> to ignore the controls with the <see cref="P:System.Windows.Forms.Control.TabStop" /> property set to <see langword="false" />; otherwise, <see langword="false" />.</span></span></param>
        <param name="nested"><span data-ttu-id="97318-3186">入れ子になった (子コントロールの子) 子コントロールを含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3186"><see langword="true" /> to include nested (children of child controls) child controls; otherwise, <see langword="false" />.</span></span></param>
        <param name="wrap"><span data-ttu-id="97318-3187">タブ オーダーの最後のコントロールに到達した後、タブ オーダーの最初のコントロールから検索を続行する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3187"><see langword="true" /> to continue searching from the first control in the tab order after the last control has been reached; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-3188">次のコントロールをアクティブにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3188">Activates the next control.</span></span></summary>
        <returns><span data-ttu-id="97318-3189">コントロールがアクティブにされた場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3189"><see langword="true" /> if a control was activated; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3190"><xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド場合、タブ オーダーの次のコントロールをアクティブにするコントロールの`Selectable`にスタイル ビットが設定されている`true`で<xref:System.Windows.Forms.ControlStyles>、別のコントロールに含まれていると、すべての親コントロールが両方表示して有効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-3190">The <xref:System.Windows.Forms.Control.SelectNextControl%2A> method activates the next control in the tab order if the control's `Selectable` style bit is set to `true` in <xref:System.Windows.Forms.ControlStyles>, it is contained in another control, and all its parent controls are both visible and enabled.</span></span>  
  
 <span data-ttu-id="97318-3191">次の一覧に Windows フォーム コントロールは、選択可能ではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-3191">The Windows Forms controls in the following list are not selectable.</span></span> <span data-ttu-id="97318-3192">リストのコントロールから派生したコントロールも選択できません。</span><span class="sxs-lookup"><span data-stu-id="97318-3192">Controls derived from controls in the list will also not be selectable.</span></span>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.Panel>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.Splitter>  
  
-   <span data-ttu-id="97318-3193"><xref:System.Windows.Forms.LinkLabel> (この場合、コントロール内にリンクすることはありません)</span><span class="sxs-lookup"><span data-stu-id="97318-3193"><xref:System.Windows.Forms.LinkLabel> (when there is no link present in the control)</span></span>  
  
 <span data-ttu-id="97318-3194">呼び出すことによってキーボード (タブ、shift キーを押しながら TAB となど) を使用して、フォーカスを変更すると、<xref:System.Windows.Forms.Control.Select%2A>または<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド、または設定して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>プロパティを現在のフォームは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3194">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="97318-3195">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3195">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3196">次のコード exampleshows、<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッドをいくつかのコントロールを持つフォームで使用されています。</span><span class="sxs-lookup"><span data-stu-id="97318-3196">The following code exampleshows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has some controls.</span></span> <span data-ttu-id="97318-3197">フォームをクリックするたびに、次のコントロールがアクティブです。</span><span class="sxs-lookup"><span data-stu-id="97318-3197">Each time that you click the form, the next control is activated.</span></span> <span data-ttu-id="97318-3198"><xref:System.Windows.Forms.ContainerControl.ActiveControl%2A>プロパティは、コンテナー コントロールで現在アクティブなコントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-3198">The <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A> property gets the currently active control in the container control.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#1)]  
  
 <span data-ttu-id="97318-3199">次のコード例は、<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッドを持つフォームで使用されている、<xref:System.Windows.Forms.Button>およびその他のいくつかのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3199">The following code example shows the <xref:System.Windows.Forms.Control.SelectNextControl%2A> method being used in a form that has a <xref:System.Windows.Forms.Button> and some other controls.</span></span> <span data-ttu-id="97318-3200">クリックすると、<xref:System.Windows.Forms.Button>後の次のコントロール、<xref:System.Windows.Forms.Button>がアクティブ化されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3200">When you click the <xref:System.Windows.Forms.Button>, the next control after the <xref:System.Windows.Forms.Button> is activated.</span></span> <span data-ttu-id="97318-3201">親を取得するがあることに注意してください、<xref:System.Windows.Forms.Button>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3201">Notice that you have to get the parent of the <xref:System.Windows.Forms.Button> control.</span></span> <span data-ttu-id="97318-3202"><xref:System.Windows.Forms.Button> 、コンテナーではない呼び出し<xref:System.Windows.Forms.Control.SelectNextControl%2A>上で直接、<xref:System.Windows.Forms.Button>アクティブ化は変化しません。</span><span class="sxs-lookup"><span data-stu-id="97318-3202">Since <xref:System.Windows.Forms.Button> is not a container, calling <xref:System.Windows.Forms.Control.SelectNextControl%2A> directly on the <xref:System.Windows.Forms.Button> would not change the activation.</span></span>  
  
 [!code-csharp[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/cs/form1.cs#2)]
 [!code-vb[System.Windows.Forms.Control.SelectNextControl#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.control.selectnextcontrol/vb/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.Select" />
        <altmember cref="M:System.Windows.Forms.Control.Focus" />
      </Docs>
    </Member>
    <Member MemberName="SendToBack">
      <MemberSignature Language="C#" Value="public void SendToBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendToBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SendToBack" />
      <MemberSignature Language="VB.NET" Value="Public Sub SendToBack ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SendToBack();" />
      <MemberSignature Language="F#" Value="member this.SendToBack : unit -&gt; unit" Usage="control.SendToBack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3203">コントロールを z オーダーの背面に移動します。</span><span class="sxs-lookup"><span data-stu-id="97318-3203">Sends the control to the back of the z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3204">コントロールは、z オーダーの背面に移動されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3204">The control is moved to the back of the z-order.</span></span> <span data-ttu-id="97318-3205">コントロールが別のコントロールの子である場合は、子コントロールは、z オーダーの背面に移動されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3205">If the control is a child of another control, the child control is moved to the back of the z-order.</span></span> <span data-ttu-id="97318-3206">コントロールがトップレベル コントロールである場合は、このメソッドは正しく動きませんコントロールがアクティブでない限りです。</span><span class="sxs-lookup"><span data-stu-id="97318-3206">If the control is a top-level control, this method will not work correctly unless the control is active.</span></span> <span data-ttu-id="97318-3207">最上位のコントロールは、コントロールなどを<xref:System.Windows.Forms.Form>、いない子である別のコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3207">A top-level control is a control, such as a <xref:System.Windows.Forms.Form>, that is not a child of another control.</span></span> <span data-ttu-id="97318-3208">アクティブなコントロールは、表示コントロールに入力フォーカスです。</span><span class="sxs-lookup"><span data-stu-id="97318-3208">An active control is a visible control that has input focus.</span></span> <span data-ttu-id="97318-3209">使用する、<xref:System.Windows.Forms.Control.SendToBack%2A>メソッドを非アクティブ、最上位のコントロールを呼び出す最初、<xref:System.Windows.Forms.Control.BringToFront%2A>コントロールのメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3209">To use the <xref:System.Windows.Forms.Control.SendToBack%2A> method with an inactive, top-level control, first call the <xref:System.Windows.Forms.Control.BringToFront%2A> method on the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.BringToFront" />
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
      </Docs>
    </Member>
    <Member MemberName="SetAutoSizeMode">
      <MemberSignature Language="C#" Value="protected void SetAutoSizeMode (System.Windows.Forms.AutoSizeMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetAutoSizeMode(valuetype System.Windows.Forms.AutoSizeMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetAutoSizeMode(System.Windows.Forms.AutoSizeMode)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetAutoSizeMode (mode As AutoSizeMode)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetAutoSizeMode(System::Windows::Forms::AutoSizeMode mode);" />
      <MemberSignature Language="F#" Value="member this.SetAutoSizeMode : System.Windows.Forms.AutoSizeMode -&gt; unit" Usage="control.SetAutoSizeMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="System.Windows.Forms.AutoSizeMode" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="mode"><span data-ttu-id="97318-3210"><see cref="T:System.Windows.Forms.AutoSizeMode" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="97318-3210">One of the <see cref="T:System.Windows.Forms.AutoSizeMode" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3211"><see cref="P:System.Windows.Forms.Control.AutoSize" /> プロパティが有効なときのコントロールの動作を示す値を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3211">Sets a value indicating how a control will behave when its <see cref="P:System.Windows.Forms.Control.AutoSize" /> property is enabled.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-3212">コントロールの範囲を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3212">Sets the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int -&gt; unit" Usage="control.SetBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="97318-3213">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3213">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="97318-3214">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3214">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="97318-3215">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3215">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="97318-3216">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3216">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <summary><span data-ttu-id="97318-3217">コントロールの範囲を指定した位置とサイズに設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3217">Sets the bounds of the control to the specified location and size.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBounds">
      <MemberSignature Language="C#" Value="public void SetBounds (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBounds(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBounds (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBounds(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="member this.SetBounds : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBounds (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="97318-3218">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3218">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="97318-3219">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3219">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="97318-3220">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3220">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="97318-3221">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3221">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="97318-3222"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="97318-3222">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span> <span data-ttu-id="97318-3223">指定されていないパラメーターについては、現在の値が使用されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3223">For any parameter not specified, the current value will be used.</span></span></param>
        <summary><span data-ttu-id="97318-3224">コントロールの指定した範囲を指定した位置とサイズに設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3224">Sets the specified bounds of the control to the specified location and size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="97318-3225">次のコード例のセンター、<xref:System.Windows.Forms.Form>の画面で、<xref:System.Windows.Forms.Control.Layout>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3225">The following code example centers a <xref:System.Windows.Forms.Form> on the screen in the <xref:System.Windows.Forms.Control.Layout> event.</span></span> <span data-ttu-id="97318-3226">これにより、ユーザーがサイズを変更中央フォームが保持されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3226">This will keep the form centered as the user resizes it.</span></span> <span data-ttu-id="97318-3227">この例では、作成済みである必要があります、<xref:System.Windows.Forms.Form>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3227">This example requires that you have created a <xref:System.Windows.Forms.Form> control.</span></span>  
  
 [!code-cpp[Control.Layout#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Layout/CPP/layout.cpp#1)]
 [!code-csharp[Control.Layout#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Layout/CS/layout.cs#1)]
 [!code-vb[Control.Layout#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Layout/VB/layout.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected virtual void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberSignature Language="F#" Value="abstract member SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit&#xA;override this.SetBoundsCore : int * int * int * int * System.Windows.Forms.BoundsSpecified -&gt; unit" Usage="control.SetBoundsCore (x, y, width, height, specified)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="97318-3228">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3228">The new <see cref="P:System.Windows.Forms.Control.Left" /> property value of the control.</span></span></param>
        <param name="y"><span data-ttu-id="97318-3229">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3229">The new <see cref="P:System.Windows.Forms.Control.Top" /> property value of the control.</span></span></param>
        <param name="width"><span data-ttu-id="97318-3230">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3230">The new <see cref="P:System.Windows.Forms.Control.Width" /> property value of the control.</span></span></param>
        <param name="height"><span data-ttu-id="97318-3231">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</span><span class="sxs-lookup"><span data-stu-id="97318-3231">The new <see cref="P:System.Windows.Forms.Control.Height" /> property value of the control.</span></span></param>
        <param name="specified"><span data-ttu-id="97318-3232"><see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</span><span class="sxs-lookup"><span data-stu-id="97318-3232">A bitwise combination of the <see cref="T:System.Windows.Forms.BoundsSpecified" /> values.</span></span></param>
        <summary><span data-ttu-id="97318-3233">このコントロールの指定した境界を設定する作業を実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-3233">Performs the work of setting the specified bounds of this control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3234">含まれていない境界に対応するパラメーター、通常、`specified`パラメーターは、その現在の値で渡されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3234">Typically, the parameters that correspond to the bounds not included in the `specified` parameter are passed in with their current values.</span></span> <span data-ttu-id="97318-3235">たとえば、 <xref:System.Windows.Forms.Control.Height%2A>、 <xref:System.Windows.Forms.Control.Width%2A>、または<xref:System.Drawing.Point.X%2A>または<xref:System.Drawing.Point.Y%2A>のプロパティ、<xref:System.Windows.Forms.Control.Location%2A>プロパティは、コントロールの現在のインスタンスへの参照で渡すことができます。</span><span class="sxs-lookup"><span data-stu-id="97318-3235">For example, the <xref:System.Windows.Forms.Control.Height%2A>, <xref:System.Windows.Forms.Control.Width%2A>, or the <xref:System.Drawing.Point.X%2A> or <xref:System.Drawing.Point.Y%2A> properties of the <xref:System.Windows.Forms.Control.Location%2A> property can be passed in with a reference to the current instance of the control.</span></span> <span data-ttu-id="97318-3236">ただしで渡されるすべての値が受け入れられ、コントロールに適用します。</span><span class="sxs-lookup"><span data-stu-id="97318-3236">However all values passed in are honored and applied to the control.</span></span>  
  
 <span data-ttu-id="97318-3237">`boundsSpecified`パラメーターは、コントロールの要素を表す<xref:System.Windows.Forms.Control.Bounds%2A>アプリケーションによって変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-3237">The `boundsSpecified` parameter represents the elements of the controls <xref:System.Windows.Forms.Control.Bounds%2A> changed by your application.</span></span> <span data-ttu-id="97318-3238">変更する場合など、 <xref:System.Windows.Forms.Control.Size%2A> 、コントロールの`boundsSpecified`パラメーター値が、`Size`の値<xref:System.Windows.Forms.BoundsSpecified>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3238">For example, if you change the <xref:System.Windows.Forms.Control.Size%2A> of the control, the `boundsSpecified` parameter value is the `Size` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span> <span data-ttu-id="97318-3239">ただし場合、<xref:System.Windows.Forms.Control.Size%2A>への応答が調整、<xref:System.Windows.Forms.Control.Dock%2A>プロパティが設定されている、`boundsSpecified`パラメーター値が、`None`の値<xref:System.Windows.Forms.BoundsSpecified>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3239">However, if the <xref:System.Windows.Forms.Control.Size%2A> is adjusted in response to the <xref:System.Windows.Forms.Control.Dock%2A> property being set, the `boundsSpecified` parameter value is the `None` value of <xref:System.Windows.Forms.BoundsSpecified>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-3240">Windows Server 2003 システムでのサイズ、<xref:System.Windows.Forms.Form>最大ピクセル幅と、モニターの高さによって制限されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3240">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3241">次のコード例の上書き、<xref:System.Windows.Forms.Control.SetBoundsCore%2A>メソッドをコントロールが固定サイズが変更されることを確認します。</span><span class="sxs-lookup"><span data-stu-id="97318-3241">The following code example overrides the <xref:System.Windows.Forms.Control.SetBoundsCore%2A> method to ensure that the control remains a fixed size.</span></span> <span data-ttu-id="97318-3242">この例から、直接または間接的に派生したクラスである必要があります、<xref:System.Windows.Forms.Control>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-3242">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#1)]
 [!code-csharp[Windows.Forms.Control_Methods#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#1)]
 [!code-vb[Windows.Forms.Control_Methods#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3243">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />を変更するコントロールの境界を強制する方法。</span><span class="sxs-lookup"><span data-stu-id="97318-3243">When overriding <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method to force the bounds of the control to change.</span></span> <span data-ttu-id="97318-3244">派生クラスがサイズ制限を追加、<see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3244">Derived classes can add size restrictions to the <see cref="M:System.Windows.Forms.Control.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" /> method.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
      </Docs>
    </Member>
    <Member MemberName="SetClientSizeCore">
      <MemberSignature Language="C#" Value="protected virtual void SetClientSizeCore (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetClientSizeCore(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetClientSizeCore (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetClientSizeCore(int x, int y);" />
      <MemberSignature Language="F#" Value="abstract member SetClientSizeCore : int * int -&gt; unit&#xA;override this.SetClientSizeCore : int * int -&gt; unit" Usage="control.SetClientSizeCore (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="97318-3245">クライアント領域の幅 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-3245">The client area width, in pixels.</span></span></param>
        <param name="y"><span data-ttu-id="97318-3246">クライアント領域の高さ (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-3246">The client area height, in pixels.</span></span></param>
        <summary><span data-ttu-id="97318-3247">コントロールのクライアント領域のサイズを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3247">Sets the size of the client area of the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3248">クライアント領域から始まり、(0, 0) の場所に拡張し、(`x`、 `y`) 場所。</span><span class="sxs-lookup"><span data-stu-id="97318-3248">The client area starts at the (0, 0) location and extends to the (`x`, `y`) location.</span></span>  
  
 <span data-ttu-id="97318-3249">通常、設定しないでください、<xref:System.Windows.Forms.Control.ClientSize%2A>のコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3249">Typically, you should not set the <xref:System.Windows.Forms.Control.ClientSize%2A> of the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3250">次のコード例の上書き、<xref:System.Windows.Forms.Control.SetClientSizeCore%2A>コントロールの四角形を確保する方法。</span><span class="sxs-lookup"><span data-stu-id="97318-3250">The following code example overrides the <xref:System.Windows.Forms.Control.SetClientSizeCore%2A> method to ensure that the control remains square.</span></span> <span data-ttu-id="97318-3251">この例から、直接または間接的に派生したクラスである必要があります、<xref:System.Windows.Forms.Control>クラス。</span><span class="sxs-lookup"><span data-stu-id="97318-3251">This example requires that you have a class that is either directly or indirectly derived from the <xref:System.Windows.Forms.Control> class.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_Methods#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CPP/controlmethods.cpp#2)]
 [!code-csharp[Windows.Forms.Control_Methods#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_Methods/CS/controlmethods.cs#2)]
 [!code-vb[Windows.Forms.Control_Methods#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_Methods/VB/controlmethods.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3252">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" />メソッドように、<see cref="P:System.Windows.Forms.Control.ClientSize" />プロパティを調整します。</span><span class="sxs-lookup"><span data-stu-id="97318-3252">When overriding <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetClientSizeCore(System.Int32,System.Int32)" /> method so that the <see cref="P:System.Windows.Forms.Control.ClientSize" /> property is adjusted.</span></span>  
  
<span data-ttu-id="97318-3253">コントロールの描画に関する詳細については、次を参照してください。 [Windows フォーム コントロールのレンダリング](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md)します。</span><span class="sxs-lookup"><span data-stu-id="97318-3253">For more information about drawing on controls, see [Rendering a Windows Forms Control](~/docs/framework/winforms/controls/rendering-a-windows-forms-control.md).</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
      </Docs>
    </Member>
    <Member MemberName="SetStyle">
      <MemberSignature Language="C#" Value="protected void SetStyle (System.Windows.Forms.ControlStyles flag, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetStyle(valuetype System.Windows.Forms.ControlStyles flag, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetStyle (flag As ControlStyles, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetStyle(System::Windows::Forms::ControlStyles flag, bool value);" />
      <MemberSignature Language="F#" Value="member this.SetStyle : System.Windows.Forms.ControlStyles * bool -&gt; unit" Usage="control.SetStyle (flag, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Windows.Forms.ControlStyles" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="flag"><span data-ttu-id="97318-3254">設定する <see cref="T:System.Windows.Forms.ControlStyles" /> ビット。</span><span class="sxs-lookup"><span data-stu-id="97318-3254">The <see cref="T:System.Windows.Forms.ControlStyles" /> bit to set.</span></span></param>
        <param name="value"><span data-ttu-id="97318-3255">指定したスタイルをコントロールに適用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3255"><see langword="true" /> to apply the specified style to the control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-3256">指定した <see cref="T:System.Windows.Forms.ControlStyles" /> フラグを <see langword="true" /> または <see langword="false" /> に設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3256">Sets a specified <see cref="T:System.Windows.Forms.ControlStyles" /> flag to either <see langword="true" /> or <see langword="false" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3257">コントロール スタイル ビット フラグは、サポートされている動作の分類に使用されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3257">Control style bit flags are used to categorize supported behavior.</span></span> <span data-ttu-id="97318-3258">コントロールは、スタイルを有効に呼び出すことによって、<xref:System.Windows.Forms.Control.SetStyle%2A>メソッドを渡すことで、適切な<xref:System.Windows.Forms.ControlStyles>ビット (またはビット) と、ビットに設定するブール値。</span><span class="sxs-lookup"><span data-stu-id="97318-3258">A control can enable a style by calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method and passing in the appropriate <xref:System.Windows.Forms.ControlStyles> bit (or bits) and the Boolean value to set the bit(s) to.</span></span> <span data-ttu-id="97318-3259">指定したに割り当てられている値を決定する<xref:System.Windows.Forms.ControlStyles>ビットを使用して、<xref:System.Windows.Forms.Control.GetStyle%2A>メソッドを渡します、<xref:System.Windows.Forms.ControlStyles>を評価するメンバー。</span><span class="sxs-lookup"><span data-stu-id="97318-3259">To determine the value assigned to a specified <xref:System.Windows.Forms.ControlStyles> bit, use the <xref:System.Windows.Forms.Control.GetStyle%2A> method and pass in the <xref:System.Windows.Forms.ControlStyles> member to evaluate.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97318-3260">コントロール スタイル ビットを設定、コントロールの動作を変更できます。</span><span class="sxs-lookup"><span data-stu-id="97318-3260">Setting the control style bits can substantially change the behavior of the control.</span></span> <span data-ttu-id="97318-3261">レビュー、<xref:System.Windows.Forms.ControlStyles>列挙体のドキュメントを呼び出す前に、コントロール スタイル ビットの変更の影響を理解しておく、<xref:System.Windows.Forms.Control.SetStyle%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3261">Review the <xref:System.Windows.Forms.ControlStyles> enumeration documentation to understand the effects of changing the control style bits before calling the <xref:System.Windows.Forms.Control.SetStyle%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3262">次のコード例は、のダブル バッファリングを有効、<xref:System.Windows.Forms.Form>し、変更を反映するようにスタイルを更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3262">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.GetStyle(System.Windows.Forms.ControlStyles)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SetTopLevel">
      <MemberSignature Language="C#" Value="protected void SetTopLevel (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetTopLevel(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetTopLevel(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetTopLevel (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetTopLevel(bool value);" />
      <MemberSignature Language="F#" Value="member this.SetTopLevel : bool -&gt; unit" Usage="control.SetTopLevel value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="97318-3263">コントロールをトップレベル コントロールとして設定する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3263"><see langword="true" /> to set the control as the top-level control; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-3264">コントロールをトップレベル コントロールとして設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3264">Sets the control as the top-level control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3265">呼び出す場合、<xref:System.Windows.Forms.Control.SetTopLevel%2A>のメソッド、<xref:System.Windows.Forms.Form>の値を渡すと`false`を呼び出すまで、フォームは表示されません<xref:System.Windows.Forms.Control.SetTopLevel%2A>の値を渡して、もう一度`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3265">If you call the <xref:System.Windows.Forms.Control.SetTopLevel%2A> method of a <xref:System.Windows.Forms.Form> and pass in a value of `false`, the form will not be visible until you call <xref:System.Windows.Forms.Control.SetTopLevel%2A> again, passing in a value of `true`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="97318-3266"><paramref name="value" />にパラメーターが設定されている<see langword="true" />コントロールは ActiveX コントロールとします。</span><span class="sxs-lookup"><span data-stu-id="97318-3266">The <paramref name="value" /> parameter is set to <see langword="true" /> and the control is an ActiveX control.</span></span></exception>
        <exception cref="T:System.Exception"><span data-ttu-id="97318-3267"><see cref="M:System.Windows.Forms.Control.GetTopLevel" />戻り値が等しく、<paramref name="value" />パラメーターおよび<see cref="P:System.Windows.Forms.Control.Parent" />プロパティは<see langword="null" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-3267">The <see cref="M:System.Windows.Forms.Control.GetTopLevel" /> return value is not equal to the <paramref name="value" /> parameter and the <see cref="P:System.Windows.Forms.Control.Parent" /> property is not <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-3268">以外の任意の型がある場合は、コントロールがトップレベル コントロールとしてコントロールを設定する<see cref="T:System.Windows.Forms.Form" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-3268">to set the control as a top-level control if it is of any type other than <see cref="T:System.Windows.Forms.Form" />.</span></span> <span data-ttu-id="97318-3269">場合にだけ、このアクセス許可が要求、<paramref name="value" />パラメーターが<see langword="true" />とコントロールが ActiveX コントロールではありません。</span><span class="sxs-lookup"><span data-stu-id="97318-3269">This permission is only demanded if the <paramref name="value" /> parameter is <see langword="true" /> and the control is not an ActiveX control.</span></span> <span data-ttu-id="97318-3270">列挙型に関連付けられている: <see langword="AllWindows" /> <see cref="T:System.Security.Permissions.UIPermissionWindow" />します。</span><span class="sxs-lookup"><span data-stu-id="97318-3270">Associated enumeration: <see langword="AllWindows" /> value of <see cref="T:System.Security.Permissions.UIPermissionWindow" />.</span></span></permission>
        <altmember cref="M:System.Windows.Forms.Control.GetTopLevel" />
      </Docs>
    </Member>
    <Member MemberName="SetVisibleCore">
      <MemberSignature Language="C#" Value="protected virtual void SetVisibleCore (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void SetVisibleCore(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub SetVisibleCore (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void SetVisibleCore(bool value);" />
      <MemberSignature Language="F#" Value="abstract member SetVisibleCore : bool -&gt; unit&#xA;override this.SetVisibleCore : bool -&gt; unit" Usage="control.SetVisibleCore value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="97318-3271">コントロールを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3271"><see langword="true" /> to make the control visible; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="97318-3272">コントロールを指定した表示状態に設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3272">Sets the control to the specified visible state.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3273">通常、コントロールの可視性の動作を変更するには、このメソッドをオーバーライドします。</span><span class="sxs-lookup"><span data-stu-id="97318-3273">You would typically override this method to change the visibility behavior of the control.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3274">オーバーライドするときに<see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />、派生クラスでは、基本クラスを呼び出す、<see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />を変更するコントロールの可視性を強制する方法。</span><span class="sxs-lookup"><span data-stu-id="97318-3274">When overriding <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> in a derived class, be sure to call the base class's <see cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" /> method to force the visibility of the control to change.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Show" />
      <MemberSignature Language="VB.NET" Value="Public Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show();" />
      <MemberSignature Language="F#" Value="member this.Show : unit -&gt; unit" Usage="control.Show " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3275">コントロールをユーザーに対して表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3275">Displays the control to the user.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3276">等しい設定は、コントロールを表示、<xref:System.Windows.Forms.Control.Visible%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3276">Showing the control is equivalent to setting the <xref:System.Windows.Forms.Control.Visible%2A> property to `true`.</span></span> <span data-ttu-id="97318-3277">後に、<xref:System.Windows.Forms.Control.Show%2A>メソッドを呼び出すと、<xref:System.Windows.Forms.Control.Visible%2A>プロパティの値を返します`true`まで、<xref:System.Windows.Forms.Control.Hide%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3277">After the <xref:System.Windows.Forms.Control.Show%2A> method is called, the <xref:System.Windows.Forms.Control.Visible%2A> property returns a value of `true` until the <xref:System.Windows.Forms.Control.Hide%2A> method is called.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3278">次のコード例が表示されます、ダイアログ ボックスの詳細について一時的にそのサーフェイスに青い四角形を描画します。</span><span class="sxs-lookup"><span data-stu-id="97318-3278">The following code example displays an about dialog box and temporarily draws a blue square on its surface.</span></span> <span data-ttu-id="97318-3279">この例から派生したクラスが定義されている必要があります<xref:System.Windows.Forms.Form>という`AboutDialog`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3279">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `AboutDialog`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#1)]
 [!code-csharp[Windows.Forms.Control Members2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#1)]
 [!code-vb[Windows.Forms.Control Members2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
      </Docs>
    </Member>
    <Member MemberName="ShowFocusCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowFocusCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowFocusCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowFocusCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowFocusCues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowFocusCues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShowFocusCues : bool" Usage="System.Windows.Forms.Control.ShowFocusCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3280">コントロールがフォーカスを示す四角形を表示する必要があるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-3280">Gets a value indicating whether the control should display focus rectangles.</span></span></summary>
        <value><span data-ttu-id="97318-3281">コントロールがフォーカスを示す四角形を表示する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3281"><see langword="true" /> if the control should display focus rectangles; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3282">この機能の詳細については、次を参照してください。、 [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)、 [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)、および[WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-3282">For more information about this feature, see the [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx), [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3283">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.ShowFocusCues" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3283">When overriding the <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.ShowFocusCues" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-3284">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-3284">Otherwise, you must provide all the implementation.</span></span></para></block>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      </Docs>
    </Member>
    <Member MemberName="ShowKeyboardCues">
      <MemberSignature Language="C#" Value="protected internal virtual bool ShowKeyboardCues { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowKeyboardCues" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable ReadOnly Property ShowKeyboardCues As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual property bool ShowKeyboardCues { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShowKeyboardCues : bool" Usage="System.Windows.Forms.Control.ShowKeyboardCues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3285">ユーザー インターフェイスがキーボード アクセラレータを表示または非表示にする適切な状態かどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-3285">Gets a value indicating whether the user interface is in the appropriate state to show or hide keyboard accelerators.</span></span></summary>
        <value><span data-ttu-id="97318-3286">キーボード アクセラレータを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3286"><see langword="true" /> if the keyboard accelerators are visible; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3287">Windows フォーム デザイナーで作成されたコントロールでは、キーボード アクセラレータは、既定で表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3287">In controls created in the Windows Forms designer, keyboard accelerators are visible by default.</span></span>  
  
 <span data-ttu-id="97318-3288">この機能の詳細については、次を参照してください。、 [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx)、 [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx)、および[WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-3288">For more information about this feature, see the [WM_CHANGEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646342\(v=vs.85\).aspx), [WM_QUERYUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646355\(v=vs.85\).aspx), and the [WM_UPDATEUISTATE](https://msdn.microsoft.com/library/windows/desktop/ms646361\(v=vs.85\).aspx) topics.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.UICues" />
        <altmember cref="P:System.Windows.Forms.Control.ShowFocusCues" />
        <altmember cref="E:System.Windows.Forms.Control.ChangeUICues" />
      </Docs>
    </Member>
    <Member MemberName="Site">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.ISite Site { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.ISite Site" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Site" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Site As ISite" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::ComponentModel::ISite ^ Site { System::ComponentModel::ISite ^ get(); void set(System::ComponentModel::ISite ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Site : System.ComponentModel.ISite with get, set" Usage="System.Windows.Forms.Control.Site" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.ComponentModel.IComponent.Site</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ISite</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3289">コントロールのサイトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3289">Gets or sets the site of the control.</span></span></summary>
        <value><span data-ttu-id="97318-3290"><see cref="T:System.ComponentModel.ISite" /> に関連付けられている <see cref="T:System.Windows.Forms.Control" /> (存在する場合)。</span><span class="sxs-lookup"><span data-stu-id="97318-3290">The <see cref="T:System.ComponentModel.ISite" /> associated with the <see cref="T:System.Windows.Forms.Control" />, if any.</span></span></value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.ISite" />
        <altmember cref="P:System.ComponentModel.IComponent.Site" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.Control.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3291">コントロールの高さと幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3291">Gets or sets the height and width of the control.</span></span></summary>
        <value><span data-ttu-id="97318-3292">コントロールの高さと幅をピクセル単位で表す <see cref="T:System.Drawing.Size" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3292">The <see cref="T:System.Drawing.Size" /> that represents the height and width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3293"><xref:System.Drawing.Size>クラスは、値型 (`Structure` Visual basic で`struct`Visual c# で)、つまりコントロールのサイズのコピーを返すプロパティにアクセスする、値によって返されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3293">Because the <xref:System.Drawing.Size> class is a value type (`Structure` in Visual Basic, `struct` in Visual C#), it is returned by value, meaning accessing the property returns a copy of the size of the control.</span></span> <span data-ttu-id="97318-3294">そのため、調整、<xref:System.Drawing.Size.Width%2A>または<xref:System.Drawing.Size.Height%2A>のプロパティ、<xref:System.Drawing.Size>これから返されるプロパティには影響は、<xref:System.Windows.Forms.Control.Width%2A>または<xref:System.Windows.Forms.Control.Height%2A>コントロールの。</span><span class="sxs-lookup"><span data-stu-id="97318-3294">So, adjusting the <xref:System.Drawing.Size.Width%2A> or <xref:System.Drawing.Size.Height%2A> properties of the <xref:System.Drawing.Size> returned from this property will not affect the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control.</span></span> <span data-ttu-id="97318-3295">調整する、<xref:System.Windows.Forms.Control.Width%2A>または<xref:System.Windows.Forms.Control.Height%2A>、コントロールのコントロールを設定する必要があります<xref:System.Windows.Forms.Control.Width%2A>または<xref:System.Windows.Forms.Control.Height%2A>プロパティ、またはセット、<xref:System.Windows.Forms.Control.Size%2A>プロパティを新しい<xref:System.Drawing.Size>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3295">To adjust the <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> of the control, you must set the control's <xref:System.Windows.Forms.Control.Width%2A> or <xref:System.Windows.Forms.Control.Height%2A> property, or set the <xref:System.Windows.Forms.Control.Size%2A> property with a new <xref:System.Drawing.Size>.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-3296">優れたパフォーマンスを維持する設定しないで、<xref:System.Drawing.Size>コントロールのコンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="97318-3296">To maintain better performance, do not set the <xref:System.Drawing.Size> of a control in its constructor.</span></span> <span data-ttu-id="97318-3297">推奨される方法は、オーバーライドする、<xref:System.Windows.Forms.Control.DefaultSize%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3297">The preferred method is to override the <xref:System.Windows.Forms.Control.DefaultSize%2A> property.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-3298">Windows Server 2003 システムでのサイズ、<xref:System.Windows.Forms.Form>最大ピクセル幅と、モニターの高さによって制限されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3298">On Windows Server 2003 systems, the size of a <xref:System.Windows.Forms.Form> is restricted by the maximum pixel width and height of the monitor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3299">次のコード例を追加、<xref:System.Windows.Forms.Button>をフォームにし、一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3299">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="97318-3300">例は、フォームのサイズと、その相対位置が維持されるように、フォームの右下隅にあるボタンを固定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3300">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="97318-3301">次に、設定、<xref:System.Windows.Forms.Control.BackgroundImage%2A>と同じサイズにボタンのサイズを変更し、<xref:System.Drawing.Image>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3301">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="97318-3302">設定し、<xref:System.Windows.Forms.Control.TabStop%2A>に`true`設定と、<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3302">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="97318-3303">最後に、処理するイベント ハンドラーを追加、<xref:System.Windows.Forms.Control.Click>ボタンのイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3303">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="97318-3304">この例が必要です、<xref:System.Windows.Forms.ImageList>という`imageList1`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3304">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SizeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SizeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SizeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SizeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SizeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SizeChanged;" />
      <MemberSignature Language="F#" Value="member this.SizeChanged : EventHandler " Usage="member this.SizeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3305"><see cref="P:System.Windows.Forms.Control.Size" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3305">Occurs when the <see cref="P:System.Windows.Forms.Control.Size" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3306">使用することをお勧め、<xref:System.Windows.Forms.Control.Layout>カスタム レイアウトを処理するイベントです。</span><span class="sxs-lookup"><span data-stu-id="97318-3306">It is preferable to use the <xref:System.Windows.Forms.Control.Layout> event to handle custom layouts.</span></span> <span data-ttu-id="97318-3307"><xref:System.Windows.Forms.Control.Layout>への応答でイベントが発生します<xref:System.Windows.Forms.Control.Resize>レイアウトを適用する必要がある際の他の状況でものイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3307">The <xref:System.Windows.Forms.Control.Layout> event is raised in response to <xref:System.Windows.Forms.Control.Resize> events, but also in other conditions when layout might need to be applied.</span></span>  
  
 <span data-ttu-id="97318-3308">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Size%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-3308">This event is raised if the <xref:System.Windows.Forms.Control.Size%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3309">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3309">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3310">次のコード例に示します、<xref:System.Windows.Forms.Control.SizeChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3310">The following code example demonstrates the <xref:System.Windows.Forms.Control.SizeChanged> event.</span></span> <span data-ttu-id="97318-3311">インスタンスを<xref:System.Windows.Forms.Button>コントロールは水平および垂直にスケールできますを提供しました。</span><span class="sxs-lookup"><span data-stu-id="97318-3311">An instance of a <xref:System.Windows.Forms.Button> control has been provided that can be scaled both horizontally and vertically.</span></span> <span data-ttu-id="97318-3312">A<xref:System.Windows.Forms.NumericUpDown>インスタンスが水平および垂直方向のスケール値を提供します。</span><span class="sxs-lookup"><span data-stu-id="97318-3312">A <xref:System.Windows.Forms.NumericUpDown> instance provides the horizontal and vertical scale value.</span></span> <span data-ttu-id="97318-3313"><xref:System.Windows.Forms.Button>という名前のインスタンス**OK**のスケール値の設定に使用される、<xref:System.Windows.Forms.Button>コントロール インスタンス。</span><span class="sxs-lookup"><span data-stu-id="97318-3313">The <xref:System.Windows.Forms.Button> instance named **OK** is used to set the scale values for the <xref:System.Windows.Forms.Button> control instance.</span></span> <span data-ttu-id="97318-3314">たびに、コントロールのサイズが変更に関連付けられているイベント ハンドラー、<xref:System.Windows.Forms.Control.SizeChanged>コントロールのイベントが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3314">Whenever the size of the control changes, the event handler associated with the <xref:System.Windows.Forms.Control.SizeChanged> event of the control is called.</span></span> <span data-ttu-id="97318-3315">このイベント ハンドラーでは、コントロールのサイズが変更されたことを示すメッセージ ボックスが表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3315">This event handler displays a message box indicating that the size of the control has changed.</span></span>  
  
 [!code-cpp[Control_Scale1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_Scale1/CPP/control_scale1.cpp#2)]
 [!code-csharp[Control_Scale1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_Scale1/CS/control_scale1.cs#2)]
 [!code-vb[Control_Scale1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_Scale1/VB/control_scale1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSizeChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="E:System.Windows.Forms.Control.Resize" />
      </Docs>
    </Member>
    <Member MemberName="SizeFromClientSize">
      <MemberSignature Language="C#" Value="protected virtual System.Drawing.Size SizeFromClientSize (System.Drawing.Size clientSize);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype System.Drawing.Size SizeFromClientSize(valuetype System.Drawing.Size clientSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SizeFromClientSize(System.Drawing.Size)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function SizeFromClientSize (clientSize As Size) As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Drawing::Size SizeFromClientSize(System::Drawing::Size clientSize);" />
      <MemberSignature Language="F#" Value="abstract member SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size&#xA;override this.SizeFromClientSize : System.Drawing.Size -&gt; System.Drawing.Size" Usage="control.SizeFromClientSize clientSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="clientSize" Type="System.Drawing.Size" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="clientSize"><span data-ttu-id="97318-3316">コントロールのクライアント領域の高さおよび幅を表す <see cref="T:System.Drawing.Size" /> 値。</span><span class="sxs-lookup"><span data-stu-id="97318-3316">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the control's client area.</span></span></param>
        <summary><span data-ttu-id="97318-3317">クライアント領域の高さおよび幅からコントロール全体のサイズを決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3317">Determines the size of the entire control from the height and width of its client area.</span></span></summary>
        <returns><span data-ttu-id="97318-3318">コントロール全体の高さおよび幅を表す <see cref="T:System.Drawing.Size" /> 値。</span><span class="sxs-lookup"><span data-stu-id="97318-3318">A <see cref="T:System.Drawing.Size" /> value representing the height and width of the entire control.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StyleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler StyleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler StyleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.StyleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event StyleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ StyleChanged;" />
      <MemberSignature Language="F#" Value="member this.StyleChanged : EventHandler " Usage="member this.StyleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3319">コントロール スタイルが変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3319">Occurs when the control style changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3320"><xref:System.Windows.Forms.Control.StyleChanged>イベントが発生したときに<xref:System.Windows.Forms.ControlStyles>フラグが追加または変更されています。</span><span class="sxs-lookup"><span data-stu-id="97318-3320">The <xref:System.Windows.Forms.Control.StyleChanged> event occurs when <xref:System.Windows.Forms.ControlStyles> flags have been added or changed.</span></span>  
  
 <span data-ttu-id="97318-3321">コントロールのスタイルは、プログラムの変更またはユーザーの操作によって変更された場合は、このイベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3321">This event is raised if the control style is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3322">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3322">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3323">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3323">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-3324">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.StyleChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3324">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span> <span data-ttu-id="97318-3325">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-3325">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-3326">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3326">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-3327">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3327">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-3328">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.StyleChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3328">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.StyleChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#68](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#68)]
 [!code-vb[System.Windows.Forms.EventExamples#68](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#68)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnStyleChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.Control.SetStyle(System.Windows.Forms.ControlStyles,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.ControlStyles" />
      </Docs>
    </Member>
    <Member MemberName="SuspendLayout">
      <MemberSignature Language="C#" Value="public void SuspendLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SuspendLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.SuspendLayout" />
      <MemberSignature Language="VB.NET" Value="Public Sub SuspendLayout ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SuspendLayout();" />
      <MemberSignature Language="F#" Value="member this.SuspendLayout : unit -&gt; unit" Usage="control.SuspendLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3329">コントロールのレイアウト ロジックを一時的に中断します。</span><span class="sxs-lookup"><span data-stu-id="97318-3329">Temporarily suspends the layout logic for the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3330">コントロールのレイアウト ロジックが中断、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3330">The layout logic of the control is suspended until the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method is called.</span></span>  
  
 <span data-ttu-id="97318-3331"><xref:System.Windows.Forms.Control.SuspendLayout%2A>と<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッドを使用して並行して複数の抑制<xref:System.Windows.Forms.Control.Layout>イベント中に、コントロールの複数の属性を調整します。</span><span class="sxs-lookup"><span data-stu-id="97318-3331">The <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods are used in tandem to suppress multiple <xref:System.Windows.Forms.Control.Layout> events while you adjust multiple attributes of the control.</span></span> <span data-ttu-id="97318-3332">呼び出します通常など、<xref:System.Windows.Forms.Control.SuspendLayout%2A>メソッドを設定し、 <xref:System.Windows.Forms.Control.Size%2A>、 <xref:System.Windows.Forms.Control.Location%2A>、 <xref:System.Windows.Forms.Control.Anchor%2A>、または<xref:System.Windows.Forms.Control.Dock%2A>制御、および次のプロパティ、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッドを有効にする変更を有効にします。</span><span class="sxs-lookup"><span data-stu-id="97318-3332">For example, you would typically call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method, then set the <xref:System.Windows.Forms.Control.Size%2A>, <xref:System.Windows.Forms.Control.Location%2A>, <xref:System.Windows.Forms.Control.Anchor%2A>, or <xref:System.Windows.Forms.Control.Dock%2A> properties of the control, and then call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method to enable the changes to take effect.</span></span>  
  
 <span data-ttu-id="97318-3333">保留中の呼び出しが必要ない<xref:System.Windows.Forms.Control.SuspendLayout%2A>の<xref:System.Windows.Forms.Control.ResumeLayout%2A>正常に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3333">There must be no pending calls to <xref:System.Windows.Forms.Control.SuspendLayout%2A> for <xref:System.Windows.Forms.Control.ResumeLayout%2A> to be successfully called.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="97318-3334">いくつかのコントロールを親コントロールを追加する場合は、呼び出すことをお勧めしますが、<xref:System.Windows.Forms.Control.SuspendLayout%2A>メソッドを追加するコントロールを初期化する前にします。</span><span class="sxs-lookup"><span data-stu-id="97318-3334">When adding several controls to a parent control, it is recommended that you call the <xref:System.Windows.Forms.Control.SuspendLayout%2A> method before initializing the controls to be added.</span></span> <span data-ttu-id="97318-3335">親コントロールにコントロールを追加した後、<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3335">After adding the controls to the parent control, call the <xref:System.Windows.Forms.Control.ResumeLayout%2A> method.</span></span> <span data-ttu-id="97318-3336">これにより、多くのコントロールを持つアプリケーションのパフォーマンスが向上します。</span><span class="sxs-lookup"><span data-stu-id="97318-3336">This will increase the performance of applications with many controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3337">次のコード例では、フォームに 2 つのボタンを追加します。</span><span class="sxs-lookup"><span data-stu-id="97318-3337">The following code example adds two buttons to a form.</span></span> <span data-ttu-id="97318-3338">トランザクションの例を使用して、ボタンの追加、<xref:System.Windows.Forms.Control.SuspendLayout%2A>と<xref:System.Windows.Forms.Control.ResumeLayout%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3338">The example transactions the addition of the buttons by using the <xref:System.Windows.Forms.Control.SuspendLayout%2A> and <xref:System.Windows.Forms.Control.ResumeLayout%2A> methods.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#2)]
 [!code-csharp[Windows.Forms.Control Members2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#2)]
 [!code-vb[Windows.Forms.Control Members2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.ResumeLayout" />
        <altmember cref="P:System.Windows.Forms.Control.LayoutEngine" />
        <altmember cref="E:System.Windows.Forms.Control.Layout" />
        <altmember cref="M:System.Windows.Forms.Control.PerformLayout" />
        <altmember cref="M:System.Windows.Forms.Control.SuspendLayout" />
        <altmember cref="M:System.Windows.Forms.Control.InitLayout" />
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragDrop">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragDrop (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragDrop(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragDrop(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragDrop (drgEvent As DragEventArgs) Implements IDropTarget.OnDragDrop" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragDrop(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragDrop;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragDrop(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="97318-3339">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3339">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-3340"><see cref="E:System.Windows.Forms.Control.DragDrop" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-3340">Raises the <see cref="E:System.Windows.Forms.Control.DragDrop" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragEnter">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragEnter (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragEnter(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragEnter(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragEnter (drgEvent As DragEventArgs) Implements IDropTarget.OnDragEnter" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragEnter(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragEnter;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragEnter(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="97318-3341">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3341">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-3342"><see cref="E:System.Windows.Forms.Control.DragEnter" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-3342">Raises the <see cref="E:System.Windows.Forms.Control.DragEnter" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragLeave">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragLeave (e As EventArgs) Implements IDropTarget.OnDragLeave" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragLeave(EventArgs ^ e) = System::Windows::Forms::IDropTarget::OnDragLeave;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragLeave(System.EventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="97318-3343">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3343">A <see cref="T:System.EventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-3344"><see cref="E:System.Windows.Forms.Control.DragLeave" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-3344">Raises the <see cref="E:System.Windows.Forms.Control.DragLeave" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Windows.Forms.IDropTarget.OnDragOver">
      <MemberSignature Language="C#" Value="void IDropTarget.OnDragOver (System.Windows.Forms.DragEventArgs drgEvent);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Windows.Forms.IDropTarget.OnDragOver(class System.Windows.Forms.DragEventArgs drgEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.System#Windows#Forms#IDropTarget#OnDragOver(System.Windows.Forms.DragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDragOver (drgEvent As DragEventArgs) Implements IDropTarget.OnDragOver" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Windows.Forms.IDropTarget.OnDragOver(System::Windows::Forms::DragEventArgs ^ drgEvent) = System::Windows::Forms::IDropTarget::OnDragOver;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Windows.Forms.IDropTarget.OnDragOver(System.Windows.Forms.DragEventArgs)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="drgEvent" Type="System.Windows.Forms.DragEventArgs" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="drgEvent"><span data-ttu-id="97318-3345">イベント データを格納している <see cref="T:System.Windows.Forms.DragEventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3345">A <see cref="T:System.Windows.Forms.DragEventArgs" /> that contains the event data.</span></span></param>
        <summary><span data-ttu-id="97318-3346"><see cref="E:System.Windows.Forms.Control.DragOver" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="97318-3346">Raises the <see cref="E:System.Windows.Forms.Control.DragOver" /> event.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemColorsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SystemColorsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SystemColorsChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.SystemColorsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SystemColorsChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SystemColorsChanged;" />
      <MemberSignature Language="F#" Value="member this.SystemColorsChanged : EventHandler " Usage="member this.SystemColorsChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3347">システム カラーが変更されると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3347">Occurs when the system colors change.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3348">場合、このイベントが発生した、<xref:System.Drawing.SystemColors>プログラムの変更、またはユーザーの操作によってです。</span><span class="sxs-lookup"><span data-stu-id="97318-3348">This event is raised if the <xref:System.Drawing.SystemColors> is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3349">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3349">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3350">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3350">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-3351">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.SystemColorsChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3351">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span> <span data-ttu-id="97318-3352">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-3352">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-3353">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3353">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-3354">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3354">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-3355">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.SystemColorsChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3355">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.SystemColorsChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#69](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#69)]
 [!code-vb[System.Windows.Forms.EventExamples#69](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#69)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnSystemColorsChanged(System.EventArgs)" />
        <altmember cref="T:System.Drawing.SystemColors" />
      </Docs>
    </Member>
    <Member MemberName="TabIndex">
      <MemberSignature Language="C#" Value="public int TabIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TabIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TabIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TabIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.TabIndex : int with get, set" Usage="System.Windows.Forms.Control.TabIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3356">コンテナー内のコントロールのタブ オーダーを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3356">Gets or sets the tab order of the control within its container.</span></span></summary>
        <value><span data-ttu-id="97318-3357">コンテナー内のコントロールのセット内にあるコントロールのインデックス値。</span><span class="sxs-lookup"><span data-stu-id="97318-3357">The index value of the control within the set of controls within its container.</span></span> <span data-ttu-id="97318-3358">コンテナー内のコントロールは、タブ オーダーに含まれます。</span><span class="sxs-lookup"><span data-stu-id="97318-3358">The controls in the container are included in the tab order.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3359">タブ インデックスは、小さい番号のタブ オーダー内で以前にされている、0 個以上の有効な整数で構成できます。</span><span class="sxs-lookup"><span data-stu-id="97318-3359">A tab index can consist of any valid integer greater than or equal to zero, lower numbers being earlier in the tab order.</span></span> <span data-ttu-id="97318-3360">同じ親コントロールでは、複数のコントロールに同じタブ インデックスがある場合は、コントロールの z オーダーはコントロールを循環する順序を決定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3360">If more than one control on the same parent control has the same tab index, the z-order of the controls determines the order to cycle through the controls.</span></span>  
  
 <span data-ttu-id="97318-3361">タブ オーダーに含まれるコントロールの<xref:System.Windows.Forms.Control.TabStop%2A>にプロパティを設定する必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3361">For a control to be included in the tab order, its <xref:System.Windows.Forms.Control.TabStop%2A> property must be set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3362">次のコード例を追加、<xref:System.Windows.Forms.Button>をフォームにし、一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3362">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="97318-3363">例は、フォームのサイズと、その相対位置が維持されるように、フォームの右下隅にあるボタンを固定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3363">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="97318-3364">次に、設定、<xref:System.Windows.Forms.Control.BackgroundImage%2A>と同じサイズにボタンのサイズを変更し、<xref:System.Drawing.Image>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3364">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="97318-3365">設定し、<xref:System.Windows.Forms.Control.TabStop%2A>に`true`設定と、<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3365">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="97318-3366">最後に、処理するイベント ハンドラーを追加、<xref:System.Windows.Forms.Control.Click>ボタンのイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3366">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="97318-3367">この例が必要です、<xref:System.Windows.Forms.ImageList>という`imageList1`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3367">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.UpdateZOrder" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="TabIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.TabIndexChanged : EventHandler " Usage="member this.TabIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3368"><see cref="P:System.Windows.Forms.Control.TabIndex" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3368">Occurs when the <see cref="P:System.Windows.Forms.Control.TabIndex" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3369">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.TabIndex%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-3369">This event is raised if the <xref:System.Windows.Forms.Control.TabIndex%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3370">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3370">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3371">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3371">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-3372">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.TabIndexChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3372">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span> <span data-ttu-id="97318-3373">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-3373">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-3374">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3374">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-3375">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3375">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-3376">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.TabIndexChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3376">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabIndexChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#25](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#25)]
 [!code-vb[System.Windows.Forms.EventExamples#25](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#25)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabIndexChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStop">
      <MemberSignature Language="C#" Value="public bool TabStop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TabStop" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TabStop" />
      <MemberSignature Language="VB.NET" Value="Public Property TabStop As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool TabStop { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.TabStop : bool with get, set" Usage="System.Windows.Forms.Control.TabStop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-516)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3377">ユーザーが Tab キーを使用することによってこのコントロールにフォーカスを移すことができるかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3377">Gets or sets a value indicating whether the user can give the focus to this control using the TAB key.</span></span></summary>
        <value><span data-ttu-id="97318-3378">ユーザーが Tab キーを使用してコントロールにフォーカスを移すことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3378"><see langword="true" /> if the user can give the focus to the control using the TAB key; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-3379">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3379">The default is <see langword="true" />.</span></span>  
  
 <block subset="none" type="note"><para>  
 <span data-ttu-id="97318-3380"><see langword="true" /> クラスのインスタンスの場合、このプロパティは必ず <see cref="T:System.Windows.Forms.Form" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="97318-3380">This property will always return <see langword="true" /> for an instance of the <see cref="T:System.Windows.Forms.Form" /> class.</span></span>  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3381">ユーザーは、TAB キーを押すと、入力フォーカスがタブ オーダー内で次のコントロールに設定されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3381">When the user presses the TAB key, the input focus is set to the next control in the tab order.</span></span> <span data-ttu-id="97318-3382">コントロール、<xref:System.Windows.Forms.Control.TabStop%2A>プロパティ値の`false`タブ オーダーでコントロールのコレクションには含まれません。</span><span class="sxs-lookup"><span data-stu-id="97318-3382">Controls with the <xref:System.Windows.Forms.Control.TabStop%2A> property value of `false` are not included in the collection of controls in the tab order.</span></span> <span data-ttu-id="97318-3383">コントロールの設定がタブ オーダーを操作できる<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-3383">The tab order can be manipulated by setting the control's <xref:System.Windows.Forms.Control.TabIndex%2A> property value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3384">次のコード例を追加、<xref:System.Windows.Forms.Button>をフォームにし、一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3384">The following code example adds a <xref:System.Windows.Forms.Button> to a form and sets some of its common properties.</span></span> <span data-ttu-id="97318-3385">例は、フォームのサイズと、その相対位置が維持されるように、フォームの右下隅にあるボタンを固定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3385">The example anchors the button to the bottom-right corner of the form so it keeps its relative position as the form is resized.</span></span> <span data-ttu-id="97318-3386">次に、設定、<xref:System.Windows.Forms.Control.BackgroundImage%2A>と同じサイズにボタンのサイズを変更し、<xref:System.Drawing.Image>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3386">Next it sets the <xref:System.Windows.Forms.Control.BackgroundImage%2A> and resizes the button to the same size as the <xref:System.Drawing.Image>.</span></span> <span data-ttu-id="97318-3387">設定し、<xref:System.Windows.Forms.Control.TabStop%2A>に`true`設定と、<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3387">The example then sets the <xref:System.Windows.Forms.Control.TabStop%2A> to `true` and sets the <xref:System.Windows.Forms.Control.TabIndex%2A> property.</span></span> <span data-ttu-id="97318-3388">最後に、処理するイベント ハンドラーを追加、<xref:System.Windows.Forms.Control.Click>ボタンのイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3388">Lastly, it adds an event handler to handle the <xref:System.Windows.Forms.Control.Click> event of the button.</span></span> <span data-ttu-id="97318-3389">この例が必要です、<xref:System.Windows.Forms.ImageList>という`imageList1`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3389">This example requires that you have an <xref:System.Windows.Forms.ImageList> named `imageList1`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#3)]
 [!code-csharp[Windows.Forms.Control Properties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#3)]
 [!code-vb[Windows.Forms.Control Properties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.TabIndex" />
      </Docs>
    </Member>
    <Member MemberName="TabStopChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TabStopChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TabStopChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TabStopChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TabStopChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TabStopChanged;" />
      <MemberSignature Language="F#" Value="member this.TabStopChanged : EventHandler " Usage="member this.TabStopChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3390"><see cref="P:System.Windows.Forms.Control.TabStop" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3390">Occurs when the <see cref="P:System.Windows.Forms.Control.TabStop" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3391">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.TabStop%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-3391">This event is raised if the <xref:System.Windows.Forms.Control.TabStop%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3392">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3392">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3393">次のコード例では、このメンバーの使用を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3393">The following code example demonstrates the use of this member.</span></span> <span data-ttu-id="97318-3394">例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.Control.TabStopChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3394">In the example, an event handler reports on the occurrence of the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span> <span data-ttu-id="97318-3395">このレポートでは、イベントが発生してデバッグに役立つについて説明します。</span><span class="sxs-lookup"><span data-stu-id="97318-3395">This report helps you to learn when the event occurs and can assist you in debugging.</span></span> <span data-ttu-id="97318-3396">複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3396">To report on multiple events or on events that occur frequently, consider replacing <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> with <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> or appending the message to a multiline <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 <span data-ttu-id="97318-3397">コード例を実行するから継承する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.Control>などを<xref:System.Windows.Forms.Button>または<xref:System.Windows.Forms.ComboBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3397">To run the example code, paste it into a project that contains an instance of a type that inherits from <xref:System.Windows.Forms.Control>, such as a <xref:System.Windows.Forms.Button> or <xref:System.Windows.Forms.ComboBox>.</span></span> <span data-ttu-id="97318-3398">インスタンスの名前を`Control1`イベント ハンドラーに関連付けられていることを確認してください、<xref:System.Windows.Forms.Control.TabStopChanged>イベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3398">Then name the instance `Control1` and ensure that the event handler is associated with the <xref:System.Windows.Forms.Control.TabStopChanged> event.</span></span>  
  
 [!code-csharp[System.Windows.Forms.EventExamples#26](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#26)]
 [!code-vb[System.Windows.Forms.EventExamples#26](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#26)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTabStopChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.TabStop" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Control.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3399">コントロールに関するデータを格納するオブジェクトを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3399">Gets or sets the object that contains data about the control.</span></span></summary>
        <value><span data-ttu-id="97318-3400">コントロールに関するデータを格納している <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3400">An <see cref="T:System.Object" /> that contains data about the control.</span></span> <span data-ttu-id="97318-3401">既定値は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3401">The default is <see langword="null" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3402">派生する型、<xref:System.Object>クラスは、このプロパティに割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-3402">Any type derived from the <xref:System.Object> class can be assigned to this property.</span></span> <span data-ttu-id="97318-3403">場合、<xref:System.Windows.Forms.Control.Tag%2A>プロパティが、Windows フォーム デザイナーで、テキストのみを割り当てることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-3403">If the <xref:System.Windows.Forms.Control.Tag%2A> property is set through the Windows Forms designer, only text can be assigned.</span></span>  
  
 <span data-ttu-id="97318-3404">一般的な用途、<xref:System.Windows.Forms.Control.Tag%2A>プロパティは、コントロールに密接に関連付けられているデータを格納します。</span><span class="sxs-lookup"><span data-stu-id="97318-3404">A common use for the <xref:System.Windows.Forms.Control.Tag%2A> property is to store data that is closely associated with the control.</span></span> <span data-ttu-id="97318-3405">たとえば、顧客に関する情報を表示するコントロールがあれば、保存する、<xref:System.Data.DataSet>そのコントロールの顧客の注文履歴を格納している<xref:System.Windows.Forms.Control.Tag%2A>プロパティ データを簡単にアクセスできるようにします。</span><span class="sxs-lookup"><span data-stu-id="97318-3405">For example, if you have a control that displays information about a customer, you might store a <xref:System.Data.DataSet> that contains the customer's order history in that control's <xref:System.Windows.Forms.Control.Tag%2A> property so the data can be accessed quickly.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3406">次のコード例は、フォームを表示し、格納、`Customer`でその<xref:System.Windows.Forms.Control.Tag%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3406">The following code example displays a form and stores a `Customer` in its <xref:System.Windows.Forms.Control.Tag%2A> property.</span></span> <span data-ttu-id="97318-3407">この例から派生したクラスが定義されている必要があります<xref:System.Windows.Forms.Form>という`CustomerForm`と定義されている、`Customer`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3407">This example requires that you have defined a class that derives from <xref:System.Windows.Forms.Form> named `CustomerForm` and that you have defined a `Customer`.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Members2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CPP/controlmembers2.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members2/CS/controlmembers2.cs#3)]
 [!code-vb[Windows.Forms.Control Members2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members2/VB/controlmembers2.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Object" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.Control.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-517)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3408">このコントロールに関連付けられているテキストを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3408">Gets or sets the text associated with this control.</span></span></summary>
        <value><span data-ttu-id="97318-3409">このコントロールに関連付けられたテキスト。</span><span class="sxs-lookup"><span data-stu-id="97318-3409">The text associated with this control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3410"><xref:System.Windows.Forms.Control.Text%2A>各派生クラスによって異なる方法でコントロールのプロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-3410">The <xref:System.Windows.Forms.Control.Text%2A> property of the control is used differently by each derived class.</span></span> <span data-ttu-id="97318-3411">たとえば、<xref:System.Windows.Forms.Control.Text%2A>のプロパティを<xref:System.Windows.Forms.Form>フォームの上部にあるタイトル バーに表示される、非常に小さく、文字数では、および通常は、アプリケーションまたはドキュメント名が表示されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3411">For example the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.Form> is displayed in the title bar at the top of the form, is fairly small in character count, and usually displays the application or document name.</span></span> <span data-ttu-id="97318-3412">ただし、<xref:System.Windows.Forms.Control.Text%2A>のプロパティを<xref:System.Windows.Forms.RichTextBox>が大きくなるし、テキストの書式設定するために使用、さまざまなビジュアル文字を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="97318-3412">However, the <xref:System.Windows.Forms.Control.Text%2A> property of a <xref:System.Windows.Forms.RichTextBox> can be large and can include numerous nonvisual characters used to format the text.</span></span> <span data-ttu-id="97318-3413">表示されるテキストなど、<xref:System.Windows.Forms.RichTextBox>を調整してフォーマットすることができます、<xref:System.Drawing.Font>プロパティ、またはスペースまたはタブ文字、テキストを配置するを追加。</span><span class="sxs-lookup"><span data-stu-id="97318-3413">For example, the text displayed in a <xref:System.Windows.Forms.RichTextBox> can be formatted by adjusting the <xref:System.Drawing.Font> properties, or by the addition of spaces or tab characters to align the text.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3414">次のコード例を作成、<xref:System.Windows.Forms.GroupBox>および一部の一般的なプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3414">The following code example creates a <xref:System.Windows.Forms.GroupBox> and sets some of its common properties.</span></span> <span data-ttu-id="97318-3415">例は、作成、<xref:System.Windows.Forms.TextBox>設定とその<xref:System.Windows.Forms.Control.Location%2A>グループ ボックス内で。</span><span class="sxs-lookup"><span data-stu-id="97318-3415">The example creates a <xref:System.Windows.Forms.TextBox> and sets its <xref:System.Windows.Forms.Control.Location%2A> within the group box.</span></span> <span data-ttu-id="97318-3416">次に、設定、<xref:System.Windows.Forms.Control.Text%2A>フォームの上部に、グループ ボックス ドッキングし、グループ ボックスのプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3416">Next, it sets the <xref:System.Windows.Forms.Control.Text%2A> property of the group box, and docks the group box to the top of the form.</span></span> <span data-ttu-id="97318-3417">グループ ボックスを無効に設定して、最後に、<xref:System.Windows.Forms.Control.Enabled%2A>プロパティを`false`、それが原因で無効にするグループ ボックス内に含まれるすべてのコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3417">Lastly, it disables the group box by setting the <xref:System.Windows.Forms.Control.Enabled%2A> property to `false`, which causes all controls contained within the group box to be disabled.</span></span>  
  
 [!code-cpp[Windows.Forms.Control Properties#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CPP/controlproperties.cpp#2)]
 [!code-csharp[Windows.Forms.Control Properties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Properties/CS/controlproperties.cs#2)]
 [!code-vb[Windows.Forms.Control Properties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Properties/VB/controlproperties.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3418">オーバーライドする場合、 <see cref="P:System.Windows.Forms.Control.Text" /> 、派生クラスでプロパティを使用して、基本クラスの<see cref="P:System.Windows.Forms.Control.Text" />基本実装を拡張するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3418">When overriding the <see cref="P:System.Windows.Forms.Control.Text" /> property in a derived class, use the base class's <see cref="P:System.Windows.Forms.Control.Text" /> property to extend the base implementation.</span></span> <span data-ttu-id="97318-3419">それ以外の場合、すべての実装を提供する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-3419">Otherwise, you must provide all the implementation.</span></span> <span data-ttu-id="97318-3420">両方をオーバーライドする必要はありません、<see langword="get" />と<see langword="set" />のアクセサー、<see cref="P:System.Windows.Forms.Control.Text" />プロパティです。 必要な場合は 1 つだけをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="97318-3420">You are not required to override both the <see langword="get" /> and <see langword="set" /> accessors of the <see cref="P:System.Windows.Forms.Control.Text" /> property; you can override only one if needed.</span></span></para></block>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3421"><see cref="P:System.Windows.Forms.Control.Text" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3421">Occurs when the <see cref="P:System.Windows.Forms.Control.Text" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3422">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Text%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-3422">This event is raised if the <xref:System.Windows.Forms.Control.Text%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3423">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3423">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3424">次のコード例の変更、<xref:System.Windows.Forms.Control.ForeColor%2A>の<xref:System.Windows.Forms.TextBox>通貨データを表示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3424">The following code example changes the <xref:System.Windows.Forms.Control.ForeColor%2A> of a <xref:System.Windows.Forms.TextBox> displaying currency data.</span></span> <span data-ttu-id="97318-3425">例では、文字列に変換する 10 進数と変更、<xref:System.Windows.Forms.Control.ForeColor%2A>に<xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType>数が負の値とする<xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType>数が正の場合。</span><span class="sxs-lookup"><span data-stu-id="97318-3425">The example converts the text to a decimal number and changes the <xref:System.Windows.Forms.Control.ForeColor%2A> to <xref:System.Drawing.Color.Red%2A?displayProperty=nameWithType> if the number is negative and to <xref:System.Drawing.Color.Black%2A?displayProperty=nameWithType> if the number is positive.</span></span> <span data-ttu-id="97318-3426">この例が必要です、<xref:System.Windows.Forms.Form>を格納している、<xref:System.Windows.Forms.TextBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3426">This example requires that you have a <xref:System.Windows.Forms.Form> that contains a <xref:System.Windows.Forms.TextBox>.</span></span>  
  
 [!code-cpp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CPP/propertychangedevents.cpp#1)]
 [!code-csharp[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/CS/propertychangedevents.cs#1)]
 [!code-vb[Windows.Forms.Control_PropertyChangedEvents#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control_PropertyChangedEvents/VB/propertychangedevents.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnTextChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Text" />
      </Docs>
    </Member>
    <Member MemberName="Top">
      <MemberSignature Language="C#" Value="public int Top { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Top" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Top" />
      <MemberSignature Language="VB.NET" Value="Public Property Top As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Top { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Top : int with get, set" Usage="System.Windows.Forms.Control.Top" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3427">コントロールの上端とコンテナーのクライアント領域の上端の間の距離をピクセル単位で取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3427">Gets or sets the distance, in pixels, between the top edge of the control and the top edge of its container's client area.</span></span></summary>
        <value><span data-ttu-id="97318-3428"><see cref="T:System.Int32" /> は、コントロールの下端とコンテナーのクライアント領域の上端の間の距離 (ピクセル単位) を示します。</span><span class="sxs-lookup"><span data-stu-id="97318-3428">An <see cref="T:System.Int32" /> representing the distance, in pixels, between the bottom edge of the control and the top edge of its container's client area.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3429"><xref:System.Windows.Forms.Control.Top%2A>プロパティの値が等しく、<xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType>のプロパティ、<xref:System.Windows.Forms.Control.Location%2A>コントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-3429">The <xref:System.Windows.Forms.Control.Top%2A> property value is equivalent to the <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> property of the <xref:System.Windows.Forms.Control.Location%2A> property value of the control.</span></span>  
  
 <span data-ttu-id="97318-3430">加えられた変更、<xref:System.Windows.Forms.Control.Height%2A>と<xref:System.Windows.Forms.Control.Top%2A>プロパティ値が原因、<xref:System.Windows.Forms.Control.Bottom%2A>を変更するコントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-3430">Changes made to the <xref:System.Windows.Forms.Control.Height%2A> and <xref:System.Windows.Forms.Control.Top%2A> property values cause the <xref:System.Windows.Forms.Control.Bottom%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3431">次のコード例では、3 つを作成<xref:System.Windows.Forms.Button>フォームのコントロールし、さまざまなサイズに関連して、場所に関連するプロパティを使用して、そのサイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3431">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="97318-3432">この例が必要です、<xref:System.Windows.Forms.Form>少なくとも 300 ピクセルの高さ、幅を持ちます。</span><span class="sxs-lookup"><span data-stu-id="97318-3432">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Drawing.Point.Y" />
        <altmember cref="P:System.Windows.Forms.Control.Bottom" />
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
      </Docs>
    </Member>
    <Member MemberName="TopLevelControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control TopLevelControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control TopLevelControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.TopLevelControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TopLevelControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ TopLevelControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TopLevelControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.Control.TopLevelControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3433">別の Windows フォーム コントロールを親として持たない親コントロールを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-3433">Gets the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="97318-3434">一般的に、これは、コントロールを格納している最も外側の <see cref="T:System.Windows.Forms.Form" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3434">Typically, this is the outermost <see cref="T:System.Windows.Forms.Form" /> that the control is contained in.</span></span></summary>
        <value><span data-ttu-id="97318-3435">現在のコントロールを格納しているトップレベル コントロールを表す <see cref="T:System.Windows.Forms.Control" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3435">The <see cref="T:System.Windows.Forms.Control" /> that represents the top-level control that contains the current control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3436">最上位のコントロールは、別の Windows フォーム コントロールを親として持たない親コントロールとして定義されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3436">The top-level control is defined as the parent control that is not parented by another Windows Forms control.</span></span> <span data-ttu-id="97318-3437">一般的に、これは、コントロールを格納している最も外側の <xref:System.Windows.Forms.Form> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3437">Typically, this is the outermost <xref:System.Windows.Forms.Form> that the control is contained in.</span></span> <span data-ttu-id="97318-3438">コントロールが MDI 子に含まれている場合など、 <xref:System.Windows.Forms.Form>、最上位のコントロールは、マルチ ドキュメント インターフェイス (MDI) 親<xref:System.Windows.Forms.Form>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3438">For example, if the control is contained on an MDI child <xref:System.Windows.Forms.Form>, then the top-level control is the Multiple Document Interface (MDI) parent <xref:System.Windows.Forms.Form>.</span></span> <span data-ttu-id="97318-3439">コントロールに親がない場合、 <xref:System.Windows.Forms.Form>、このプロパティは`null`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3439">If the control is not parented on a <xref:System.Windows.Forms.Form>, this property will return `null`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission"><span data-ttu-id="97318-3440">このプロパティの値を取得するすべてのウィンドウ。</span><span class="sxs-lookup"><span data-stu-id="97318-3440">for all windows to get this property value.</span></span> <span data-ttu-id="97318-3441">関連付けられた列挙体。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span><span class="sxs-lookup"><span data-stu-id="97318-3441">Associated enumeration: <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></span></span></permission>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public void Update ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Update() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.Update" />
      <MemberSignature Language="VB.NET" Value="Public Sub Update ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Update();" />
      <MemberSignature Language="F#" Value="member this.Update : unit -&gt; unit" Usage="control.Update " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3442">コントロールによって、クライアント領域内の無効化された領域が再描画されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3442">Causes the control to redraw the invalidated regions within its client area.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3443">保留中の描画要求を実行します。</span><span class="sxs-lookup"><span data-stu-id="97318-3443">Executes any pending requests for painting.</span></span>  
  
 <span data-ttu-id="97318-3444">フォームとその内容を再描画する 2 つの方法はあります。</span><span class="sxs-lookup"><span data-stu-id="97318-3444">There are two ways to repaint a form and its contents:</span></span>  
  
-   <span data-ttu-id="97318-3445">オーバー ロードのいずれかを使用することができます、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドを<xref:System.Windows.Forms.Control.Update%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3445">You can use one of the overloads of the <xref:System.Windows.Forms.Control.Invalidate%2A> method with the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
-   <span data-ttu-id="97318-3446">呼び出すことができます、<xref:System.Windows.Forms.Control.Refresh%2A>メソッドで、それ自体とそのすべての子の再描画するように強制します。</span><span class="sxs-lookup"><span data-stu-id="97318-3446">You can call the <xref:System.Windows.Forms.Control.Refresh%2A> method, which forces the control to redraw itself and all its children.</span></span> <span data-ttu-id="97318-3447">設定するのと同じ、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドを`true`でを使用して<xref:System.Windows.Forms.Control.Update%2A>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3447">This is equivalent to setting the <xref:System.Windows.Forms.Control.Invalidate%2A> method to `true` and using it with <xref:System.Windows.Forms.Control.Update%2A>.</span></span>  
  
 <span data-ttu-id="97318-3448"><xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは描画内容を取得または再描画を制御します。</span><span class="sxs-lookup"><span data-stu-id="97318-3448">The <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted or repainted.</span></span> <span data-ttu-id="97318-3449"><xref:System.Windows.Forms.Control.Update%2A>メソッドは、描画または再描画が発生したときを制御します。</span><span class="sxs-lookup"><span data-stu-id="97318-3449">The <xref:System.Windows.Forms.Control.Update%2A> method governs when the painting or repainting occurs.</span></span> <span data-ttu-id="97318-3450">使用する場合、<xref:System.Windows.Forms.Control.Invalidate%2A>と<xref:System.Windows.Forms.Control.Update%2A>メソッドを呼び出すのではなくまとめて<xref:System.Windows.Forms.Control.Refresh%2A>、のどのオーバー ロードに依存再描画内容を取得<xref:System.Windows.Forms.Control.Invalidate%2A>を使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-3450">If you use the <xref:System.Windows.Forms.Control.Invalidate%2A> and <xref:System.Windows.Forms.Control.Update%2A> methods together rather than calling <xref:System.Windows.Forms.Control.Refresh%2A>, what gets repainted depends on which overload of <xref:System.Windows.Forms.Control.Invalidate%2A> you use.</span></span> <span data-ttu-id="97318-3451"><xref:System.Windows.Forms.Control.Update%2A>メソッドだけ強制的にすぐに描画するコントロールが、<xref:System.Windows.Forms.Control.Invalidate%2A>メソッドは制御を呼び出すときに描画内容を取得、<xref:System.Windows.Forms.Control.Update%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3451">The <xref:System.Windows.Forms.Control.Update%2A> method just forces the control to be painted immediately, but the <xref:System.Windows.Forms.Control.Invalidate%2A> method governs what gets painted when you call the <xref:System.Windows.Forms.Control.Update%2A> method.</span></span>  
  
 <span data-ttu-id="97318-3452">詳細については、次を参照してください。、 [WM_PAINT](https://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-3452">For more information, see the [WM_PAINT](https://msdn.microsoft.com/library/dd145213\(v=vs.85\).aspx) topic.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
        <altmember cref="P:System.Windows.Forms.Control.ClientSize" />
        <altmember cref="M:System.Windows.Forms.Control.Invalidate(System.Drawing.Region)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="UpdateBounds">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="97318-3453">コントロールの範囲を更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3453">Updates the bounds of the control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected internal void UpdateBounds ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void UpdateBounds() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub UpdateBounds ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void UpdateBounds();" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : unit -&gt; unit" Usage="control.UpdateBounds " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3454">コントロールの範囲を現在のサイズと位置で更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3454">Updates the bounds of the control with the current size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3455">場合、新しい<xref:System.Windows.Forms.Control.Size%2A>のコントロールは、前のさまざまな<xref:System.Drawing.Size>、<xref:System.Windows.Forms.Control.SizeChanged>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3455">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="97318-3456">同様に場合、<xref:System.Windows.Forms.Control.Location%2A>のコントロールの変更、<xref:System.Windows.Forms.Control.LocationChanged>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3456">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="97318-3457">コントロールの <see cref="P:System.Drawing.Point.X" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="97318-3457">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="97318-3458">コントロールの <see cref="P:System.Drawing.Point.Y" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="97318-3458">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="97318-3459">コントロールの <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3459">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="97318-3460">コントロールの <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3460">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="97318-3461">コントロールの範囲を指定したサイズと位置で更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3461">Updates the bounds of the control with the specified size and location.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3462">場合、新しい<xref:System.Windows.Forms.Control.Size%2A>前と異なる場合、コントロールの<xref:System.Drawing.Size>、<xref:System.Windows.Forms.Control.SizeChanged>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3462">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control if different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="97318-3463">同様に、<xref:System.Windows.Forms.Control.Location%2A>コントロールの変更の<xref:System.Windows.Forms.Control.LocationChanged>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3463">Likewise, is the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
      </Docs>
    </Member>
    <Member MemberName="UpdateBounds">
      <MemberSignature Language="C#" Value="protected void UpdateBounds (int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateBounds(int32 x, int32 y, int32 width, int32 height, int32 clientWidth, int32 clientHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateBounds(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateBounds (x As Integer, y As Integer, width As Integer, height As Integer, clientWidth As Integer, clientHeight As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateBounds(int x, int y, int width, int height, int clientWidth, int clientHeight);" />
      <MemberSignature Language="F#" Value="member this.UpdateBounds : int * int * int * int * int * int -&gt; unit" Usage="control.UpdateBounds (x, y, width, height, clientWidth, clientHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="clientWidth" Type="System.Int32" />
        <Parameter Name="clientHeight" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x"><span data-ttu-id="97318-3464">コントロールの <see cref="P:System.Drawing.Point.X" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="97318-3464">The <see cref="P:System.Drawing.Point.X" /> coordinate of the control.</span></span></param>
        <param name="y"><span data-ttu-id="97318-3465">コントロールの <see cref="P:System.Drawing.Point.Y" /> 座標。</span><span class="sxs-lookup"><span data-stu-id="97318-3465">The <see cref="P:System.Drawing.Point.Y" /> coordinate of the control.</span></span></param>
        <param name="width"><span data-ttu-id="97318-3466">コントロールの <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3466">The <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="height"><span data-ttu-id="97318-3467">コントロールの <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3467">The <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <param name="clientWidth"><span data-ttu-id="97318-3468">コントロールのクライアント <see cref="P:System.Drawing.Size.Width" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3468">The client <see cref="P:System.Drawing.Size.Width" /> of the control.</span></span></param>
        <param name="clientHeight"><span data-ttu-id="97318-3469">コントロールのクライアント <see cref="P:System.Drawing.Size.Height" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3469">The client <see cref="P:System.Drawing.Size.Height" /> of the control.</span></span></param>
        <summary><span data-ttu-id="97318-3470">コントロールの範囲を指定したサイズ、位置、およびクライアント サイズで更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3470">Updates the bounds of the control with the specified size, location, and client size.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3471">場合、新しい<xref:System.Windows.Forms.Control.Size%2A>のコントロールは、前のさまざまな<xref:System.Drawing.Size>、<xref:System.Windows.Forms.Control.SizeChanged>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3471">If the new <xref:System.Windows.Forms.Control.Size%2A> of the control is different from the previous <xref:System.Drawing.Size>, the <xref:System.Windows.Forms.Control.SizeChanged> event is raised.</span></span> <span data-ttu-id="97318-3472">同様に場合、<xref:System.Windows.Forms.Control.Location%2A>のコントロールの変更、<xref:System.Windows.Forms.Control.LocationChanged>イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3472">Likewise, if the <xref:System.Windows.Forms.Control.Location%2A> of the control changes, the <xref:System.Windows.Forms.Control.LocationChanged> event is raised.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Size" />
        <altmember cref="P:System.Windows.Forms.Control.Location" />
        <altmember cref="P:System.Windows.Forms.Control.ClientRectangle" />
      </Docs>
    </Member>
    <Member MemberName="UpdateStyles">
      <MemberSignature Language="C#" Value="protected void UpdateStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateStyles();" />
      <MemberSignature Language="F#" Value="member this.UpdateStyles : unit -&gt; unit" Usage="control.UpdateStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3473">割り当て済みのスタイルを強制的にコントロールに再適用します。</span><span class="sxs-lookup"><span data-stu-id="97318-3473">Forces the assigned styles to be reapplied to the control.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3474">このメソッドは、<xref:System.Windows.Forms.Control.CreateParams%2A>を適用するスタイルを取得します。</span><span class="sxs-lookup"><span data-stu-id="97318-3474">This method calls the <xref:System.Windows.Forms.Control.CreateParams%2A> method to get the styles to apply.</span></span> <span data-ttu-id="97318-3475">割り当てられているスタイル、<xref:System.Windows.Forms.CreateParams.Style%2A>と<xref:System.Windows.Forms.CreateParams.ExStyle%2A>のプロパティ、<xref:System.Windows.Forms.CreateParams>をコントロールの割り当てられている<xref:System.Windows.Forms.Control.CreateParams%2A>プロパティが再適用されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3475">The styles assigned to the <xref:System.Windows.Forms.CreateParams.Style%2A> and <xref:System.Windows.Forms.CreateParams.ExStyle%2A> properties of the <xref:System.Windows.Forms.CreateParams> assigned to the control's <xref:System.Windows.Forms.Control.CreateParams%2A> property are reapplied.</span></span> <span data-ttu-id="97318-3476">コントロールが必要な場合は、スタイルの変更を反映するように再描画します。</span><span class="sxs-lookup"><span data-stu-id="97318-3476">The control is repainted to reflect the style changes if necessary.</span></span>  
  
 <span data-ttu-id="97318-3477"><xref:System.Windows.Forms.Control.UpdateStyles%2A>メソッドには効果がない場合、<xref:System.Windows.Forms.Control.IsHandleCreated%2A>プロパティの値が`false`します。</span><span class="sxs-lookup"><span data-stu-id="97318-3477">The <xref:System.Windows.Forms.Control.UpdateStyles%2A> method has no effect if the <xref:System.Windows.Forms.Control.IsHandleCreated%2A> property value is `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3478">次のコード例は、のダブル バッファリングを有効、<xref:System.Windows.Forms.Form>し、変更を反映するようにスタイルを更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3478">The following code example enables double-buffering on a <xref:System.Windows.Forms.Form> and updates the styles to reflect the changes.</span></span>  
  
 [!code-cpp[Windows.Forms.ControlMembers6#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CPP/controlmembers6.cpp#3)]
 [!code-csharp[Windows.Forms.ControlMembers6#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/CS/controlmembers6.cs#3)]
 [!code-vb[Windows.Forms.ControlMembers6#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.ControlMembers6/VB/controlmembers6.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="UpdateZOrder">
      <MemberSignature Language="C#" Value="protected void UpdateZOrder ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateZOrder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.UpdateZOrder" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateZOrder ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateZOrder();" />
      <MemberSignature Language="F#" Value="member this.UpdateZOrder : unit -&gt; unit" Usage="control.UpdateZOrder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="97318-3479">コントロールを親の z オーダーで更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3479">Updates the control in its parent's z-order.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3480"><xref:System.Windows.Forms.Control.UpdateZOrder%2A>メソッドはその親コントロールの z オーダーでコントロールの位置を更新します。</span><span class="sxs-lookup"><span data-stu-id="97318-3480">The <xref:System.Windows.Forms.Control.UpdateZOrder%2A> method updates the position of the control in its parent control's z-order.</span></span> <span data-ttu-id="97318-3481">このコントロールは、新しく作成されたコントロール場合、に追加されたなど、 <xref:System.Windows.Forms.Control.ControlCollection>、z オーダーは、新しいコントロールの後ろに追加で更新されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3481">For example, if this control is a newly created control that was added to a <xref:System.Windows.Forms.Control.ControlCollection>, the z-order is updated with the new control added to the back.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Control.ControlCollection" />
      </Docs>
    </Member>
    <Member MemberName="UseWaitCursor">
      <MemberSignature Language="C#" Value="public bool UseWaitCursor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseWaitCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.UseWaitCursor" />
      <MemberSignature Language="VB.NET" Value="Public Property UseWaitCursor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseWaitCursor { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseWaitCursor : bool with get, set" Usage="System.Windows.Forms.Control.UseWaitCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3482">現在のコントロールおよびすべての子コントロールに待機カーソルを使用するかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3482">Gets or sets a value indicating whether to use the wait cursor for the current control and all child controls.</span></span></summary>
        <value><span data-ttu-id="97318-3483">現在の子コントロールおよびすべての子コントロールに待機カーソルを使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3483"><see langword="true" /> to use the wait cursor for the current control and all child controls; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-3484">既定値は <see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3484">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3485">かなりの時間を取得する操作を実行するたびに待機カーソルを使用します。</span><span class="sxs-lookup"><span data-stu-id="97318-3485">Use a wait cursor whenever you perform an operation that takes a noticeable amount of time.</span></span> <span data-ttu-id="97318-3486">ただし、UI スレッドをブロックする操作は、カーソルの変更にもブロックされます。</span><span class="sxs-lookup"><span data-stu-id="97318-3486">However, note that operations that block the UI thread will also block a cursor change.</span></span> <span data-ttu-id="97318-3487">そのため、このプロパティは、別のスレッドで時間のかかる操作を実行する場合にのみ使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="97318-3487">Therefore, this property should only be used when performing time-consuming operations in another thread.</span></span> <span data-ttu-id="97318-3488">グローバルとすぐには、カーソルを変更するを参照してください。、<xref:System.Windows.Forms.Cursor.Current%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="97318-3488">To change the cursor globally and immediately, see the <xref:System.Windows.Forms.Cursor.Current%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validated">
      <MemberSignature Language="C#" Value="public event EventHandler Validated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Validated" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validated As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Validated;" />
      <MemberSignature Language="F#" Value="member this.Validated : EventHandler " Usage="member this.Validated : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3489">コントロールの検証が終了すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3489">Occurs when the control is finished validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3490">呼び出すことによってキーボード (タブ、shift キーを押しながら TAB となど) を使用して、フォーカスを変更すると、<xref:System.Windows.Forms.Control.Select%2A>または<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド、または設定して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>プロパティを現在のフォームは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3490">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="97318-3491">フォーカスを変更すると、マウスを使用して、または呼び出すことによって、<xref:System.Windows.Forms.Control.Focus%2A>メソッドでは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3491">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="97318-3492">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3492">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="97318-3493">場合、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.ComponentModel.CancelEventArgs>に設定されている`true`で、<xref:System.Windows.Forms.Control.Validating>イベント デリゲート、後に通常発生するすべてのイベント、<xref:System.Windows.Forms.Control.Validating>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3493">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97318-3494">内からフォーカスを設定しないで、 <xref:System.Windows.Forms.Control.Enter>、 <xref:System.Windows.Forms.Control.GotFocus>、 <xref:System.Windows.Forms.Control.Leave>、 <xref:System.Windows.Forms.Control.LostFocus>、 <xref:System.Windows.Forms.Control.Validating>、または<xref:System.Windows.Forms.Control.Validated>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-3494">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="97318-3495">これには、アプリケーションまたはオペレーティング システムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-3495">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="97318-3496">詳細については、次を参照してください。、 [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)トピック、およびの"メッセージ デッドロック"セクション、[についてメッセージとメッセージ キュー](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx)トピック。</span><span class="sxs-lookup"><span data-stu-id="97318-3496">For more information, see the [WM_KILLFOCUS](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx) topic, and the "Message Deadlocks" section of the [About Messages and Message Queues](https://msdn.microsoft.com/library/windows/desktop/ms644927\(v=vs.85\).aspx) topic.</span></span>  
  
 <span data-ttu-id="97318-3497">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3497">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3498">次のコード例は、派生クラスを使用して<xref:System.Windows.Forms.TextBox>しユーザーが入力した電子メール アドレスを検証します。</span><span class="sxs-lookup"><span data-stu-id="97318-3498">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="97318-3499">標準形式の電子メール アドレスがない場合 (を含む"@" and ".")、検証に失敗、<xref:System.Windows.Forms.ErrorProvider>アイコンが表示され、イベントが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="97318-3499">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="97318-3500">この例では、する必要があります、<xref:System.Windows.Forms.TextBox>と<xref:System.Windows.Forms.ErrorProvider>フォームで作成されたコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3500">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidated(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="Validating">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler Validating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler Validating" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.Validating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Validating As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ Validating;" />
      <MemberSignature Language="F#" Value="member this.Validating : System.ComponentModel.CancelEventHandler " Usage="member this.Validating : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3501">コントロールが検証しているときに発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3501">Occurs when the control is validating.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3502">呼び出すことによってキーボード (タブ、shift キーを押しながら TAB となど) を使用して、フォーカスを変更すると、<xref:System.Windows.Forms.Control.Select%2A>または<xref:System.Windows.Forms.Control.SelectNextControl%2A>メソッド、または設定して、<xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType>プロパティを現在のフォームは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3502">When you change the focus by using the keyboard (TAB, SHIFT+TAB, and so on), by calling the <xref:System.Windows.Forms.Control.Select%2A> or <xref:System.Windows.Forms.Control.SelectNextControl%2A> methods, or by setting the <xref:System.Windows.Forms.ContainerControl.ActiveControl%2A?displayProperty=nameWithType> property to the current form, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.Leave>  
  
4.  <xref:System.Windows.Forms.Control.Validating>  
  
5.  <xref:System.Windows.Forms.Control.Validated>  
  
6.  <xref:System.Windows.Forms.Control.LostFocus>  
  
 <span data-ttu-id="97318-3503">フォーカスを変更すると、マウスを使用して、または呼び出すことによって、<xref:System.Windows.Forms.Control.Focus%2A>メソッドでは、次の順序でフォーカス イベントが発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3503">When you change the focus by using the mouse or by calling the <xref:System.Windows.Forms.Control.Focus%2A> method, focus events occur in the following order:</span></span>  
  
1.  <xref:System.Windows.Forms.Control.Enter>  
  
2.  <xref:System.Windows.Forms.Control.GotFocus>  
  
3.  <xref:System.Windows.Forms.Control.LostFocus>  
  
4.  <xref:System.Windows.Forms.Control.Leave>  
  
5.  <xref:System.Windows.Forms.Control.Validating>  
  
6.  <xref:System.Windows.Forms.Control.Validated>  
  
 <span data-ttu-id="97318-3504">場合、<xref:System.Windows.Forms.Control.CausesValidation%2A>プロパティに設定されて`false`、<xref:System.Windows.Forms.Control.Validating>と<xref:System.Windows.Forms.Control.Validated>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3504">If the <xref:System.Windows.Forms.Control.CausesValidation%2A> property is set to `false`, the <xref:System.Windows.Forms.Control.Validating> and <xref:System.Windows.Forms.Control.Validated> events are suppressed.</span></span>  
  
 <span data-ttu-id="97318-3505">場合、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>のプロパティ、<xref:System.ComponentModel.CancelEventArgs>に設定されている`true`で、<xref:System.Windows.Forms.Control.Validating>イベント デリゲート、後に通常発生するすべてのイベント、<xref:System.Windows.Forms.Control.Validating>イベントが抑制されます。</span><span class="sxs-lookup"><span data-stu-id="97318-3505">If the <xref:System.ComponentModel.CancelEventArgs.Cancel%2A> property of the <xref:System.ComponentModel.CancelEventArgs> is set to `true` in the <xref:System.Windows.Forms.Control.Validating> event delegate, all events that would usually occur after the <xref:System.Windows.Forms.Control.Validating> event are suppressed.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="97318-3506">内からフォーカスを設定しないで、 <xref:System.Windows.Forms.Control.Enter>、 <xref:System.Windows.Forms.Control.GotFocus>、 <xref:System.Windows.Forms.Control.Leave>、 <xref:System.Windows.Forms.Control.LostFocus>、 <xref:System.Windows.Forms.Control.Validating>、または<xref:System.Windows.Forms.Control.Validated>イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="97318-3506">Do not attempt to set focus from within the <xref:System.Windows.Forms.Control.Enter>, <xref:System.Windows.Forms.Control.GotFocus>, <xref:System.Windows.Forms.Control.Leave>, <xref:System.Windows.Forms.Control.LostFocus>, <xref:System.Windows.Forms.Control.Validating>, or <xref:System.Windows.Forms.Control.Validated> event handlers.</span></span> <span data-ttu-id="97318-3507">これには、アプリケーションまたはオペレーティング システムが応答を停止する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="97318-3507">Doing so can cause your application or the operating system to stop responding.</span></span> <span data-ttu-id="97318-3508">詳細については、次を参照してください。、 `WM_KILLFOCUS` "キーボード入力リファレンス"セクションと、MSDN ライブラリで"のメッセージ キューとメッセージ キュー"トピックの"メッセージ デッドロック"セクションのトピックhttp://msdn.microsoft.com/libraryします。</span><span class="sxs-lookup"><span data-stu-id="97318-3508">For more information, see the `WM_KILLFOCUS` topic in the "Keyboard Input Reference" section, and the "Message Deadlocks" section of the "About Messages and Message Queues" topic in the MSDN library at http://msdn.microsoft.com/library.</span></span>  
  
 <span data-ttu-id="97318-3509">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3509">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3510">次のコード例は、派生クラスを使用して<xref:System.Windows.Forms.TextBox>しユーザーが入力した電子メール アドレスを検証します。</span><span class="sxs-lookup"><span data-stu-id="97318-3510">The following code example uses the derived class <xref:System.Windows.Forms.TextBox> and validates an email address that the user enters.</span></span> <span data-ttu-id="97318-3511">標準形式の電子メール アドレスがない場合 (を含む"@" and ".")、検証に失敗、<xref:System.Windows.Forms.ErrorProvider>アイコンが表示され、イベントが取り消されました。</span><span class="sxs-lookup"><span data-stu-id="97318-3511">If the email address is not in the standard format (containing "@" and "."), the validation fails, an <xref:System.Windows.Forms.ErrorProvider> icon is displayed, and the event is canceled.</span></span> <span data-ttu-id="97318-3512">この例では、する必要があります、<xref:System.Windows.Forms.TextBox>と<xref:System.Windows.Forms.ErrorProvider>フォームで作成されたコントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3512">This example requires that a <xref:System.Windows.Forms.TextBox> and <xref:System.Windows.Forms.ErrorProvider> control have been created on a form.</span></span>  
  
 [!code-cpp[Control.Validating#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.Validating/CPP/validating.cpp#1)]
 [!code-csharp[Control.Validating#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.Validating/CS/validating.cs#1)]
 [!code-vb[Control.Validating#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.Validating/VB/validating.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnValidating(System.ComponentModel.CancelEventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.CausesValidation" />
        <altmember cref="E:System.Windows.Forms.Control.Validated" />
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.Control.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3513">コントロールとそのすべての子コントロールが表示されているかどうかを示す値を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3513">Gets or sets a value indicating whether the control and all its child controls are displayed.</span></span></summary>
        <value><span data-ttu-id="97318-3514">コントロールとそのすべての子コントロールが表示されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3514"><see langword="true" /> if the control and all its child controls are displayed; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="97318-3515">既定値は <see langword="true" /> です。</span><span class="sxs-lookup"><span data-stu-id="97318-3515">The default is <see langword="true" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3516">その場合であっても注意してください`Visible`に設定されている`true`コントロールは他のコントロールの背後に隠されている場合、ユーザーに表示されません。</span><span class="sxs-lookup"><span data-stu-id="97318-3516">Note that even if `Visible` is set to `true`, the control might not be visible to the user if it is obscured behind other controls.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3517">次のコード例は、派生クラスを使用して<xref:System.Windows.Forms.VScrollBar>と<xref:System.Windows.Forms.HScrollBar>設定とその<xref:System.Windows.Forms.Control.Visible%2A>プロパティの値のサイズに基づいて、<xref:System.Drawing.Image>に表示されている、<xref:System.Windows.Forms.PictureBox>コントロール。</span><span class="sxs-lookup"><span data-stu-id="97318-3517">The following code example uses the derived classes <xref:System.Windows.Forms.VScrollBar> and <xref:System.Windows.Forms.HScrollBar> and sets their <xref:System.Windows.Forms.Control.Visible%2A> property values, based on the size of an <xref:System.Drawing.Image> being displayed in a <xref:System.Windows.Forms.PictureBox> control.</span></span> <span data-ttu-id="97318-3518">この例では、する必要があります、<xref:System.Windows.Forms.PictureBox>がフォーム上に作成された<xref:System.Windows.Forms.HScrollBar>と<xref:System.Windows.Forms.VScrollBar>で作成されたコントロール、<xref:System.Windows.Forms.PictureBox>します。</span><span class="sxs-lookup"><span data-stu-id="97318-3518">This example requires that a <xref:System.Windows.Forms.PictureBox> has been created on a form and that <xref:System.Windows.Forms.HScrollBar> and <xref:System.Windows.Forms.VScrollBar> controls have been created on the <xref:System.Windows.Forms.PictureBox>.</span></span> <span data-ttu-id="97318-3519">このコードを呼び出す、イメージが読み込まれるときに画像ボックスとで、<xref:System.Windows.Forms.Control.Resize>フォームのイベント。</span><span class="sxs-lookup"><span data-stu-id="97318-3519">This code should be called when the image is loaded into the picture box and by the <xref:System.Windows.Forms.Control.Resize> event of the form.</span></span>  
  
 [!code-cpp[Classic Control.Visible Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Control.Visible Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Control.Visible Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Control.Visible Example/CS/source.cs#1)]
 [!code-vb[Classic Control.Visible Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Control.Visible Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Enabled" />
        <altmember cref="P:System.Windows.Forms.Control.CanFocus" />
        <altmember cref="M:System.Windows.Forms.Control.Hide" />
        <altmember cref="M:System.Windows.Forms.Control.SetVisibleCore(System.Boolean)" />
        <altmember cref="E:System.Windows.Forms.Control.VisibleChanged" />
      </Docs>
    </Member>
    <Member MemberName="VisibleChanged">
      <MemberSignature Language="C#" Value="public event EventHandler VisibleChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler VisibleChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Control.VisibleChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VisibleChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ VisibleChanged;" />
      <MemberSignature Language="F#" Value="member this.VisibleChanged : EventHandler " Usage="member this.VisibleChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3520"><see cref="P:System.Windows.Forms.Control.Visible" /> プロパティの値が変化すると発生します。</span><span class="sxs-lookup"><span data-stu-id="97318-3520">Occurs when the <see cref="P:System.Windows.Forms.Control.Visible" /> property value changes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3521">場合、このイベントが発生した、<xref:System.Windows.Forms.Control.Visible%2A>プログラムの変更またはユーザーの操作のいずれかによってプロパティを変更します。</span><span class="sxs-lookup"><span data-stu-id="97318-3521">This event is raised if the <xref:System.Windows.Forms.Control.Visible%2A> property is changed by either a programmatic modification or user interaction.</span></span>  
  
 <span data-ttu-id="97318-3522">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="97318-3522">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3523">次のコード例が発生、<xref:System.Windows.Forms.Control.VisibleChanged>イベント時に、<xref:System.Windows.Forms.Control.Visible%2A>プロパティの値、<xref:System.Windows.Forms.Label>コントロールが変更されました。</span><span class="sxs-lookup"><span data-stu-id="97318-3523">The following code example raises the <xref:System.Windows.Forms.Control.VisibleChanged> event when the <xref:System.Windows.Forms.Control.Visible%2A> property value of the <xref:System.Windows.Forms.Label> control has changed.</span></span>  
  
 [!code-cpp[Control_VisibleChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control_VisibleChanged/CPP/control_visiblechanged.cpp#1)]
 [!code-csharp[Control_VisibleChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control_VisibleChanged/CS/control_visiblechanged.cs#1)]
 [!code-vb[Control_VisibleChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control_VisibleChanged/VB/control_visiblechanged.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnVisibleChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.Control.Visible" />
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public int Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Width" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.Width" />
      <MemberSignature Language="VB.NET" Value="Public Property Width As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Width { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Width : int with get, set" Usage="System.Windows.Forms.Control.Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3524">コントロールの幅を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3524">Gets or sets the width of the control.</span></span></summary>
        <value><span data-ttu-id="97318-3525">コントロールの幅 (ピクセル単位)。</span><span class="sxs-lookup"><span data-stu-id="97318-3525">The width of the control in pixels.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3526">加えられた変更、<xref:System.Windows.Forms.Control.Width%2A>と<xref:System.Windows.Forms.Control.Left%2A>プロパティ値が原因、<xref:System.Windows.Forms.Control.Right%2A>を変更するコントロールのプロパティの値。</span><span class="sxs-lookup"><span data-stu-id="97318-3526">Changes made to the <xref:System.Windows.Forms.Control.Width%2A> and <xref:System.Windows.Forms.Control.Left%2A> property values cause the <xref:System.Windows.Forms.Control.Right%2A> property value of the control to change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3527">次のコード例では、3 つを作成<xref:System.Windows.Forms.Button>フォームのコントロールし、さまざまなサイズに関連して、場所に関連するプロパティを使用して、そのサイズと位置を設定します。</span><span class="sxs-lookup"><span data-stu-id="97318-3527">The following code example creates three <xref:System.Windows.Forms.Button> controls on a form and sets their size and location by using the various size-related and location-related properties.</span></span> <span data-ttu-id="97318-3528">この例が必要です、<xref:System.Windows.Forms.Form>少なくとも 300 ピクセルの高さ、幅を持ちます。</span><span class="sxs-lookup"><span data-stu-id="97318-3528">This example requires that you have a <xref:System.Windows.Forms.Form> that has a width and height of at least 300 pixels.</span></span>  
  
 [!code-cpp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CPP/controlsizelocation.cpp#1)]
 [!code-csharp[Windows.Forms.Control SizeLocation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/CS/controlsizelocation.cs#1)]
 [!code-vb[Windows.Forms.Control SizeLocation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control SizeLocation/VB/controlsizelocation.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Bounds" />
        <altmember cref="P:System.Windows.Forms.Control.Height" />
        <altmember cref="P:System.Drawing.Size.Width" />
        <altmember cref="M:System.Windows.Forms.Control.SetBounds(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="WindowTarget">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IWindowTarget WindowTarget { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IWindowTarget WindowTarget" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Control.WindowTarget" />
      <MemberSignature Language="VB.NET" Value="Public Property WindowTarget As IWindowTarget" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IWindowTarget ^ WindowTarget { System::Windows::Forms::IWindowTarget ^ get(); void set(System::Windows::Forms::IWindowTarget ^ value); };" />
      <MemberSignature Language="F#" Value="member this.WindowTarget : System.Windows.Forms.IWindowTarget with get, set" Usage="System.Windows.Forms.Control.WindowTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IWindowTarget</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="97318-3529">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="97318-3529">This property is not relevant for this class.</span></span></summary>
        <value><span data-ttu-id="97318-3530">コントロールに含まれる NativeWindow。</span><span class="sxs-lookup"><span data-stu-id="97318-3530">The NativeWindow contained within the control.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3531">このクラスでは、このプロパティは使用されません。</span><span class="sxs-lookup"><span data-stu-id="97318-3531">This property is not relevant for this class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="control.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><span data-ttu-id="97318-3532">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</span><span class="sxs-lookup"><span data-stu-id="97318-3532">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</span></span></param>
        <summary><span data-ttu-id="97318-3533">Windows メッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-3533">Processes Windows messages.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="97318-3534">すべてのメッセージ、<xref:System.Windows.Forms.Control.WndProc%2A>メソッドでフィルター処理の取得後、<xref:System.Windows.Forms.Control.PreProcessMessage%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3534">All messages are sent to the <xref:System.Windows.Forms.Control.WndProc%2A> method after getting filtered through the <xref:System.Windows.Forms.Control.PreProcessMessage%2A> method.</span></span>  
  
 <span data-ttu-id="97318-3535"><xref:System.Windows.Forms.Control.WndProc%2A> メソッドは、Windows `WindowProc` 関数に正確に対応しています。</span><span class="sxs-lookup"><span data-stu-id="97318-3535">The <xref:System.Windows.Forms.Control.WndProc%2A> method corresponds exactly to the Windows `WindowProc` function.</span></span> <span data-ttu-id="97318-3536">Windows メッセージの処理に関する詳細については、次を参照してください。、 [WindowProc 関数](https://go.microsoft.com/fwlink/?LinkId=181565)します。</span><span class="sxs-lookup"><span data-stu-id="97318-3536">For more information about processing Windows messages, see the [WindowProc function](https://go.microsoft.com/fwlink/?LinkId=181565).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="97318-3537">オーバーライドする次のコード例に示します、<xref:System.Windows.Forms.Control.WndProc%2A>で識別されるオペレーティング システムのメッセージを処理するメソッド、<xref:System.Windows.Forms.Message>構造体。</span><span class="sxs-lookup"><span data-stu-id="97318-3537">The following code example demonstrates overriding the <xref:System.Windows.Forms.Control.WndProc%2A> method to handle operating system messages identified in the <xref:System.Windows.Forms.Message> structure.</span></span> <span data-ttu-id="97318-3538">[WM_ACTIVATEAPP](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx)別のアプリケーションがアクティブになることとを把握するには、この例ではオペレーティング システムのメッセージを処理します。</span><span class="sxs-lookup"><span data-stu-id="97318-3538">The [WM_ACTIVATEAPP](https://msdn.microsoft.com/library/windows/desktop/ms632614\(v=vs.85\).aspx) operating system message is handled in this example to know when another application is becoming active.</span></span> <span data-ttu-id="97318-3539">使用可能なを理解するのには、次のトピックを参照してください。 <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>、 <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>、および<xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType>値。</span><span class="sxs-lookup"><span data-stu-id="97318-3539">See the following topics to understand the available <xref:System.Windows.Forms.Message.Msg%2A?displayProperty=nameWithType>, <xref:System.Windows.Forms.Message.LParam%2A?displayProperty=nameWithType>, and <xref:System.Windows.Forms.Message.WParam%2A?displayProperty=nameWithType> values.</span></span> <span data-ttu-id="97318-3540">実際の定数値は、Windows.h のヘッダー ファイルで確認できます。</span><span class="sxs-lookup"><span data-stu-id="97318-3540">Actual constant values can be found in the Windows.h header file.</span></span>  
  
 [!code-cpp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.Control.WndProc#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Control.WndProc/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="97318-3541">アンマネージ コードを呼び出す直前の呼び出し元。</span><span class="sxs-lookup"><span data-stu-id="97318-3541">for the immediate caller to call unmanaged code.</span></span> <span data-ttu-id="97318-3542"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="97318-3542">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" />.</span></span></permission>
        <block subset="none" type="overrides"><para><span data-ttu-id="97318-3543">継承コントロールで、基本クラスを呼び出す必要があります<see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" />処理しないすべてのメッセージを処理するメソッド。</span><span class="sxs-lookup"><span data-stu-id="97318-3543">Inheriting controls should call the base class's <see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> method to process any messages that they do not handle.</span></span></para></block>
        <altmember cref="M:System.Windows.Forms.Control.PreProcessMessage(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.Control.DefWndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
  </Members>
</Type>