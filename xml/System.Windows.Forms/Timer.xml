<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="25cc7e97ff92af97f5e01b4a817c6125a1ae5e8d" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48656299" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="43568-101">ユーザー定義の間隔でイベントを発生させるタイマーを実装します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="43568-101">Implements a timer that raises an event at user-defined intervals.</span>
      </span>
      <span data-ttu-id="43568-102">このタイマーは、Windows フォーム アプリケーションで使用できるように最適化されていて、ウィンドウで使用する必要があります。</span>
      <span class="sxs-lookup">
        <span data-stu-id="43568-102">This timer is optimized for use in Windows Forms applications and must be used in a window.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-103">A<xref:System.Windows.Forms.Timer>ユーザー定義の間隔でイベントを発生させるために使用します。</span><span class="sxs-lookup"><span data-stu-id="43568-103">A <xref:System.Windows.Forms.Timer> is used to raise an event at user-defined intervals.</span></span> <span data-ttu-id="43568-104">この Windows タイマーは、処理を実行する UI スレッドが使用されているシングル スレッドの環境に適しています。</span><span class="sxs-lookup"><span data-stu-id="43568-104">This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing.</span></span> <span data-ttu-id="43568-105">ユーザー コードまたはがある使用可能な UI メッセージ ポンプと常に同じスレッドから操作を別のスレッドの呼び出しをマーシャ リングが必要です。</span><span class="sxs-lookup"><span data-stu-id="43568-105">It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.</span></span>  
  
 <span data-ttu-id="43568-106">このタイマーを使用して、使用、<xref:System.Windows.Forms.Timer.Tick>ポーリング操作を実行する場合、または一定の時間のスプラッシュ スクリーンを表示するイベントです。</span><span class="sxs-lookup"><span data-stu-id="43568-106">When you use this timer, use the <xref:System.Windows.Forms.Timer.Tick> event to perform a polling operation or to display a splash screen for a specified period of time.</span></span> <span data-ttu-id="43568-107">たびに、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティに設定されて`true`と<xref:System.Windows.Forms.Timer.Interval%2A>プロパティが 0 より大きい、<xref:System.Windows.Forms.Timer.Tick>に基づいた間隔でイベントが発生した、<xref:System.Windows.Forms.Timer.Interval%2A>プロパティの設定。</span><span class="sxs-lookup"><span data-stu-id="43568-107">Whenever the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `true` and the <xref:System.Windows.Forms.Timer.Interval%2A> property is greater than zero, the <xref:System.Windows.Forms.Timer.Tick> event is raised at intervals based on the <xref:System.Windows.Forms.Timer.Interval%2A> property setting.</span></span>  
  
 <span data-ttu-id="43568-108">このクラスは、間隔を設定して、開始およびタイマーを停止するメソッドを提供します。</span><span class="sxs-lookup"><span data-stu-id="43568-108">This class provides methods to set the interval, and to start and stop the timer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43568-109">Windows フォームの Timer コンポーネントは、シングル スレッドし、は 55 ミリ秒の精度に制限されます。</span><span class="sxs-lookup"><span data-stu-id="43568-109">The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds.</span></span> <span data-ttu-id="43568-110">精度の向上でマルチ スレッド タイマーを必要とする場合は、使用、<xref:System.Timers.Timer>クラス、<xref:System.Timers>名前空間。</span><span class="sxs-lookup"><span data-stu-id="43568-110">If you require a multithreaded timer with greater accuracy, use the <xref:System.Timers.Timer> class in the <xref:System.Timers> namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43568-111">次の例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。</span><span class="sxs-lookup"><span data-stu-id="43568-111">The following example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="43568-112">アラームが発生したときに、<xref:System.Windows.Forms.MessageBox>アラームが開始され、タイマーが実行を継続する必要があるかどうかについてユーザーに確認の回数のカウントを表示します。</span><span class="sxs-lookup"><span data-stu-id="43568-112">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user as to whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="43568-113">
            <see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-113">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="43568-114">
            <see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-114">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-115">新しいタイマーを作成すると、これは無効になります。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="43568-115">When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`.</span></span> <span data-ttu-id="43568-116">タイマーを有効にする、<xref:System.Windows.Forms.Timer.Start%2A>メソッドまたはセット<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="43568-116">To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="43568-117">場合は、タイマーは無効になり、タイマーがスコープ外には、ガベージ コレクションが発生した場合、タイマーは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="43568-117">If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs.</span></span> <span data-ttu-id="43568-118">タイマーが有効な場合、スコープ外になっている場合でも、違いますガベージ コレクションの対象です。</span><span class="sxs-lookup"><span data-stu-id="43568-118">If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <span data-ttu-id="43568-119">タイマーのコンテナーを表す <see cref="T:System.ComponentModel.IContainer" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-119">An <see cref="T:System.ComponentModel.IContainer" /> that represents the container for the timer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43568-120">
            <see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスと、指定したコンテナーを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-120">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class together with the specified container.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-121"><xref:System.Windows.Forms.Timer>コンス トラクターに関連付けられるように、<xref:System.Windows.Forms.Timer>と<xref:System.ComponentModel.Container>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="43568-121">The <xref:System.Windows.Forms.Timer> constructor enables you to associate a <xref:System.Windows.Forms.Timer> with any <xref:System.ComponentModel.Container> object.</span></span> <span data-ttu-id="43568-122">関連付けることによって、<xref:System.Windows.Forms.Timer>の有効期間の制御を渡すこと、このような<xref:System.Windows.Forms.Timer>を<xref:System.ComponentModel.Container>します。</span><span class="sxs-lookup"><span data-stu-id="43568-122">By associating the <xref:System.Windows.Forms.Timer> like this, you hand over control of the lifetime of the <xref:System.Windows.Forms.Timer> to the <xref:System.ComponentModel.Container>.</span></span> <span data-ttu-id="43568-123">これは、アプリケーションでさまざまなコンポーネントを使用して同時にそれらをすべて破棄する場合に役立ちます。</span><span class="sxs-lookup"><span data-stu-id="43568-123">This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously.</span></span> <span data-ttu-id="43568-124">関連付ける場合など、 <xref:System.Windows.Forms.ToolTip>、<xref:System.Windows.Forms.ImageList>と<xref:System.Windows.Forms.Timer>で、<xref:System.ComponentModel.Container>を呼び出すと、<xref:System.ComponentModel.Container.Dispose%2A>で、<xref:System.ComponentModel.Container>もこれらのコンポーネントのすべての廃棄を強制します。</span><span class="sxs-lookup"><span data-stu-id="43568-124">For example, if you associate a <xref:System.Windows.Forms.ToolTip>, an <xref:System.Windows.Forms.ImageList>, and a <xref:System.Windows.Forms.Timer> with a <xref:System.ComponentModel.Container>, calling <xref:System.ComponentModel.Container.Dispose%2A> on the <xref:System.ComponentModel.Container> will force disposal of all of these components as well.</span></span>  
  
 <span data-ttu-id="43568-125">新しいタイマーを作成すると、これは無効になります。つまり、<xref:System.Windows.Forms.Timer.Enabled%2A>に設定されている`false`します。</span><span class="sxs-lookup"><span data-stu-id="43568-125">When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`.</span></span> <span data-ttu-id="43568-126">タイマーを有効にする、<xref:System.Windows.Forms.Timer.Start%2A>メソッドまたはセット<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="43568-126">To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="43568-127">このインスタンスは、そのコンテナーがガベージ コレクションに解放されるまで存在します。</span><span class="sxs-lookup"><span data-stu-id="43568-127">This instance will exist until its container releases it to garbage collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="43568-128">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-128">
              <see langword="true" /> to release both managed and unmanaged resources.</span>
          </span>
          <span data-ttu-id="43568-129">アンマネージ リソースのみを解放する場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-129">
              <see langword="false" /> to release only the unmanaged resources.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43568-130">タイマーによって使用されていたリソース (メモリを除く) を破棄します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-130">Disposes of the resources, other than memory, used by the timer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-131">呼び出す<xref:System.Windows.Forms.Timer.Dispose%2A>タイマーの使用が終了するときにします。</span><span class="sxs-lookup"><span data-stu-id="43568-131">Call <xref:System.Windows.Forms.Timer.Dispose%2A> when you are finished using the timer.</span></span> <span data-ttu-id="43568-132"><xref:System.Windows.Forms.Timer.Dispose%2A>メソッドを使用できない状態で、タイマーのままです。</span><span class="sxs-lookup"><span data-stu-id="43568-132">The <xref:System.Windows.Forms.Timer.Dispose%2A> method leaves the timer in an unusable state.</span></span> <span data-ttu-id="43568-133">呼び出した後<xref:System.Windows.Forms.Timer.Dispose%2A>、によって占有されていたメモリをガベージ コレクションによってクリアできるように、タイマーにすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="43568-133">After you call <xref:System.Windows.Forms.Timer.Dispose%2A>, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43568-134">常に呼び出す<xref:System.Windows.Forms.Timer.Dispose%2A>タイマーへの参照を解放する前にします。</span><span class="sxs-lookup"><span data-stu-id="43568-134">Always call <xref:System.Windows.Forms.Timer.Dispose%2A> before you release your last reference to the timer.</span></span> <span data-ttu-id="43568-135">それ以外の場合、ガベージ コレクションは、タイマー オブジェクトのデストラクターを呼び出すまで、タイマーを使用しているリソースは解放されません。</span><span class="sxs-lookup"><span data-stu-id="43568-135">Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43568-136">タイマーが実行されているかどうかを取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-136">Gets or sets whether the timer is running.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43568-137">タイマーが現在有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-137">
              <see langword="true" /> if the timer is currently enabled; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="43568-138">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-138">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-139">タイマーはガベージ コレクションの対象されませんが、値が`true`します。</span><span class="sxs-lookup"><span data-stu-id="43568-139">The timer is not subject to garbage collection when the value is `true`.</span></span>  
  
 <span data-ttu-id="43568-140">呼び出す、<xref:System.Windows.Forms.Timer.Start%2A>メソッドは、設定と同じ<xref:System.Windows.Forms.Timer.Enabled%2A>に`true`します。</span><span class="sxs-lookup"><span data-stu-id="43568-140">Calling the <xref:System.Windows.Forms.Timer.Start%2A> method is the same as setting <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span> <span data-ttu-id="43568-141">同様に、呼び出し、<xref:System.Windows.Forms.Timer.Stop%2A>メソッドは、設定と同じ<xref:System.Windows.Forms.Timer.Enabled%2A>に`false`します。</span><span class="sxs-lookup"><span data-stu-id="43568-141">Likewise, calling the <xref:System.Windows.Forms.Timer.Stop%2A> method is the same as setting <xref:System.Windows.Forms.Timer.Enabled%2A> to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43568-142">次の例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。</span><span class="sxs-lookup"><span data-stu-id="43568-142">The following example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="43568-143">アラームが発生したときに、<xref:System.Windows.Forms.MessageBox>アラームが開始され、実行するタイマーを続行するかどうかを求める回数のカウントを表示します。</span><span class="sxs-lookup"><span data-stu-id="43568-143">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43568-144">
            <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生してから次の <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生するまでの時間 (ミリ秒単位) を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-144">Gets or sets the time, in milliseconds, before the <see cref="E:System.Windows.Forms.Timer.Tick" /> event is raised relative to the last occurrence of the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43568-145">
            <see cref="T:System.Int32" /> イベントが発生してから次の <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生するまでの時間 (ミリ秒単位) を指定する <see cref="E:System.Windows.Forms.Timer.Tick" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-145">An <see cref="T:System.Int32" /> specifying the number of milliseconds before the <see cref="E:System.Windows.Forms.Timer.Tick" /> event is raised relative to the last occurrence of the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span>
          </span>
          <span data-ttu-id="43568-146">値は 1 未満には設定できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-146">The value cannot be less than one.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-147">間隔の秒数を取得するには、この数を 1,000 で除算します。</span><span class="sxs-lookup"><span data-stu-id="43568-147">To get the number of seconds in the interval, divide this number by 1,000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43568-148">次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。</span><span class="sxs-lookup"><span data-stu-id="43568-148">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="43568-149">アラームが発生したときに、<xref:System.Windows.Forms.MessageBox>アラームが開始され、実行するタイマーを続行するかどうかを求める回数のカウントを表示します。</span><span class="sxs-lookup"><span data-stu-id="43568-149">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <span data-ttu-id="43568-150">イベント データを格納している <see cref="T:System.EventArgs" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-150">An <see cref="T:System.EventArgs" /> that contains the event data.</span>
          </span>
          <span data-ttu-id="43568-151">これは常に <see cref="F:System.EventArgs.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-151">This is always <see cref="F:System.EventArgs.Empty" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="43568-152">
            <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントを発生させます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-152">Raises the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-153">このメソッドは、タイマー刻みごとに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43568-153">This method is called for each timer tick.</span></span> <span data-ttu-id="43568-154">によって追加されたすべてのメソッドを呼び出して<xref:System.Windows.Forms.Timer.Tick>します。</span><span class="sxs-lookup"><span data-stu-id="43568-154">It calls any methods that are added through <xref:System.Windows.Forms.Timer.Tick>.</span></span> <span data-ttu-id="43568-155">継承している場合<xref:System.Windows.Forms.Timer>、このメソッドをオーバーライドすることができます。</span><span class="sxs-lookup"><span data-stu-id="43568-155">If you are inheriting from <xref:System.Windows.Forms.Timer>, you can override this method.</span></span>  
  
 <span data-ttu-id="43568-156">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="43568-156">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="43568-157">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="43568-157">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="43568-158">オーバーライドするときに<see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />派生クラスで、基本クラスを呼び出すことを確認します<see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />メソッド。</span>
            <span class="sxs-lookup">
              <span data-stu-id="43568-158">When overriding <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> in a derived class, make sure that you call the base class's <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> method.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="43568-159">タイマーを起動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-159">Starts the timer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-160">設定して、タイマーを開始することもできます、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティを`true`します。</span><span class="sxs-lookup"><span data-stu-id="43568-160">You can also start the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43568-161">次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。</span><span class="sxs-lookup"><span data-stu-id="43568-161">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="43568-162">アラームが発生したときに、<xref:System.Windows.Forms.MessageBox>アラームが開始され、実行するタイマーを続行するかどうかを求める回数のカウントを表示します。</span><span class="sxs-lookup"><span data-stu-id="43568-162">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="43568-163">タイマーを停止します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-163">Stops the timer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-164">設定して、タイマーを停止することも、<xref:System.Windows.Forms.Timer.Enabled%2A>プロパティを`false`します。</span><span class="sxs-lookup"><span data-stu-id="43568-164">You can also stop the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="43568-165">A<xref:System.Windows.Forms.Timer>オブジェクトを有効になっており、同じアプリケーションのセッション内で複数回無効になっている可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43568-165">A <xref:System.Windows.Forms.Timer> object may be enabled and disabled multiple times within the same application session.</span></span>  
  
 <span data-ttu-id="43568-166">呼び出す<xref:System.Windows.Forms.Timer.Start%2A>を無効にした後、<xref:System.Windows.Forms.Timer>呼び出して<xref:System.Windows.Forms.Timer.Stop%2A>により、<xref:System.Windows.Forms.Timer>中断の間隔を再起動します。</span><span class="sxs-lookup"><span data-stu-id="43568-166">Calling <xref:System.Windows.Forms.Timer.Start%2A> after you have disabled a <xref:System.Windows.Forms.Timer> by calling <xref:System.Windows.Forms.Timer.Stop%2A> will cause the <xref:System.Windows.Forms.Timer> to restart the interrupted interval.</span></span> <span data-ttu-id="43568-167">場合、<xref:System.Windows.Forms.Timer>が 5000 ミリ秒間隔の設定を呼び出すと<xref:System.Windows.Forms.Timer.Stop%2A>約 3,000 ミリ秒、呼び出すことで<xref:System.Windows.Forms.Timer.Start%2A>により、 <xref:System.Windows.Forms.Timer> 5000 ミリ秒を発生させる前に待機する、<xref:System.Windows.Forms.Timer.Tick>イベント。</span><span class="sxs-lookup"><span data-stu-id="43568-167">If your <xref:System.Windows.Forms.Timer> is set for a 5000-millisecond interval, and you call <xref:System.Windows.Forms.Timer.Stop%2A> at around 3000 milliseconds, calling <xref:System.Windows.Forms.Timer.Start%2A> will cause the <xref:System.Windows.Forms.Timer> to wait 5000 milliseconds before raising the <xref:System.Windows.Forms.Timer.Tick> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="43568-168">いずれかで Stop を呼び出す<xref:System.Windows.Forms.Timer>Windows フォーム内でアプリケーションは、他のメッセージを発生できる<xref:System.Windows.Forms.Timer>ため、すぐに処理するアプリケーションのコンポーネントすべて<xref:System.Windows.Forms.Timer>コンポーネントは、メイン アプリケーション スレッド上で動作します。</span><span class="sxs-lookup"><span data-stu-id="43568-168">Calling Stop on any <xref:System.Windows.Forms.Timer> within a Windows Forms application can cause messages from other <xref:System.Windows.Forms.Timer> components in the application to be processed immediately, because all <xref:System.Windows.Forms.Timer> components operate on the main application thread.</span></span> <span data-ttu-id="43568-169">2 つある<xref:System.Windows.Forms.Timer>コンポーネント、700 ミリ秒、500 (ミリ秒単位) を 1 つのセットを 1 つ設定および呼び出す<xref:System.Windows.Forms.Timer.Stop%2A>を最初に<xref:System.Windows.Forms.Timer>、アプリケーションでは、2 番目のコンポーネントのイベント コールバックを最初に受信する可能性があります。</span><span class="sxs-lookup"><span data-stu-id="43568-169">If you have two <xref:System.Windows.Forms.Timer> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call <xref:System.Windows.Forms.Timer.Stop%2A> on the first <xref:System.Windows.Forms.Timer>, your application may receive an event callback for the second component first.</span></span> <span data-ttu-id="43568-170">この問題がある場合は、使用を検討して、<xref:System.Threading.Timer>クラス、<xref:System.Threading>名前空間代わりにします。</span><span class="sxs-lookup"><span data-stu-id="43568-170">If this proves problematic, consider using the <xref:System.Threading.Timer> class in the <xref:System.Threading> namespace instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43568-171">次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。</span><span class="sxs-lookup"><span data-stu-id="43568-171">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="43568-172">アラームが発生したときに、<xref:System.Windows.Forms.MessageBox>アラームが開始され、実行するタイマーを続行するかどうかを求める回数のカウントを表示します。</span><span class="sxs-lookup"><span data-stu-id="43568-172">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43568-173">なんらかの種類のユーザー状態を表す任意の文字列を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-173">Gets or sets an arbitrary string representing some type of user state.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="43568-174">なんらかの種類のユーザー状態を表す任意の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-174">An arbitrary string representing some type of user state.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="43568-175">指定したタイマーの間隔が経過し、タイマーが有効である場合に発生します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-175">Occurs when the specified timer interval has elapsed and the timer is enabled.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-176">呼び出す、<xref:System.Diagnostics.Debug.Assert%2A>メソッドを<xref:System.Diagnostics.Debug>クラス内から、<xref:System.Windows.Forms.Timer.Tick>イベントが予想どおりに動作しない可能性があります、アサーションのダイアログを表示するボックスさせる Windows が発生する可能性があります、<xref:System.Windows.Forms.Timer.Tick>イベント繰り返し。</span><span class="sxs-lookup"><span data-stu-id="43568-176">Calling the <xref:System.Diagnostics.Debug.Assert%2A> method on the <xref:System.Diagnostics.Debug> class from within the <xref:System.Windows.Forms.Timer.Tick> event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the <xref:System.Windows.Forms.Timer.Tick> event repeatedly.</span></span> <span data-ttu-id="43568-177">このイベントは、内のアサーションをテストしないようにして、使用することをお勧め、 <xref:System.Diagnostics.Debug.Write%2A>、 <xref:System.Diagnostics.Debug.WriteIf%2A>、 <xref:System.Diagnostics.Debug.WriteLine%2A>、または<xref:System.Diagnostics.Debug.WriteLineIf%2A>メソッド代わりにします。</span><span class="sxs-lookup"><span data-stu-id="43568-177">We recommend that you refrain from testing assertions within this event, and use the <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, or <xref:System.Diagnostics.Debug.WriteLineIf%2A> methods instead.</span></span>  
  
 <span data-ttu-id="43568-178">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="43568-178">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="43568-179">次のコード例では、5 秒ごとにアラームを発生させる簡単な期間タイマーを実装します。</span><span class="sxs-lookup"><span data-stu-id="43568-179">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="43568-180">アラームが発生したときに、<xref:System.Windows.Forms.MessageBox>アラームが開始され、実行するタイマーを続行するかどうかを求める回数のカウントを表示します。</span><span class="sxs-lookup"><span data-stu-id="43568-180">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="43568-181">
            <see cref="T:System.Windows.Forms.Timer" /> を表す文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-181">Returns a string that represents the <see cref="T:System.Windows.Forms.Timer" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="43568-182">現在の <see cref="T:System.Windows.Forms.Timer" /> を表す文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="43568-182">A string that represents the current <see cref="T:System.Windows.Forms.Timer" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="43568-183"><xref:System.Windows.Forms.Timer.ToString%2A>メソッドの値を含む文字列を返します、<xref:System.Windows.Forms.Timer.Interval%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="43568-183">The <xref:System.Windows.Forms.Timer.ToString%2A> method returns a string that includes the value of the <xref:System.Windows.Forms.Timer.Interval%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>