<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="605adb65317c3aed410b30da1253c4608ed2231d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69178697" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="7bbff-101">ユーザー定義の間隔でイベントを発生させるタイマーを実装します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-101">Implements a timer that raises an event at user-defined intervals.</span></span> <span data-ttu-id="7bbff-102">このタイマーは、Windows フォーム アプリケーションで使用できるように最適化されていて、ウィンドウで使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7bbff-102">This timer is optimized for use in Windows Forms applications and must be used in a window.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-103">は<xref:System.Windows.Forms.Timer> 、ユーザー定義の間隔でイベントを発生させるために使用されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-103">A <xref:System.Windows.Forms.Timer> is used to raise an event at user-defined intervals.</span></span> <span data-ttu-id="7bbff-104">この Windows タイマーは、UI スレッドが処理を実行するために使用されるシングルスレッド環境向けに設計されています。</span><span class="sxs-lookup"><span data-stu-id="7bbff-104">This Windows timer is designed for a single-threaded environment where UI threads are used to perform processing.</span></span> <span data-ttu-id="7bbff-105">ユーザーコードには UI メッセージポンプが使用可能であり、常に同じスレッドから操作されるか、または呼び出しを別のスレッドにマーシャリングする必要があります。</span><span class="sxs-lookup"><span data-stu-id="7bbff-105">It requires that the user code have a UI message pump available and always operate from the same thread, or marshal the call onto another thread.</span></span>  
  
 <span data-ttu-id="7bbff-106">このタイマーを使用する場合は、 <xref:System.Windows.Forms.Timer.Tick>イベントを使用してポーリング操作を実行するか、指定した期間のスプラッシュスクリーンを表示します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-106">When you use this timer, use the <xref:System.Windows.Forms.Timer.Tick> event to perform a polling operation or to display a splash screen for a specified period of time.</span></span> <span data-ttu-id="7bbff-107">`true` <xref:System.Windows.Forms.Timer.Interval%2A> <xref:System.Windows.Forms.Timer.Tick>プロパティがに設定されていて、プロパティが0より大きい場合は、 <xref:System.Windows.Forms.Timer.Interval%2A>プロパティの設定に基づいてイベントが間隔で発生します。 <xref:System.Windows.Forms.Timer.Enabled%2A></span><span class="sxs-lookup"><span data-stu-id="7bbff-107">Whenever the <xref:System.Windows.Forms.Timer.Enabled%2A> property is set to `true` and the <xref:System.Windows.Forms.Timer.Interval%2A> property is greater than zero, the <xref:System.Windows.Forms.Timer.Tick> event is raised at intervals based on the <xref:System.Windows.Forms.Timer.Interval%2A> property setting.</span></span>  
  
 <span data-ttu-id="7bbff-108">このクラスには、間隔を設定し、タイマーを開始および停止するメソッドが用意されています。</span><span class="sxs-lookup"><span data-stu-id="7bbff-108">This class provides methods to set the interval, and to start and stop the timer.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7bbff-109">Windows フォーム Timer コンポーネントはシングルスレッドであり、55ミリ秒の精度に制限されています。</span><span class="sxs-lookup"><span data-stu-id="7bbff-109">The Windows Forms Timer component is single-threaded, and is limited to an accuracy of 55 milliseconds.</span></span> <span data-ttu-id="7bbff-110">精度の高いマルチスレッドタイマーが必要な場合は、 <xref:System.Timers.Timer> <xref:System.Timers>名前空間のクラスを使用します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-110">If you require a multithreaded timer with greater accuracy, use the <xref:System.Timers.Timer> class in the <xref:System.Timers> namespace.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7bbff-111">次の例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-111">The following example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="7bbff-112">アラームが発生すると、 <xref:System.Windows.Forms.MessageBox>はアラームが開始された回数を表示し、タイマーの実行を継続するかどうかをユーザーに確認します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-112">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user as to whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="7bbff-113"><see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-113">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7bbff-114"><see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-114">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-115">新しいタイマーが作成されると無効になります。つまり、 <xref:System.Windows.Forms.Timer.Enabled%2A>はに`false`設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-115">When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`.</span></span> <span data-ttu-id="7bbff-116">タイマーを有効にするには<xref:System.Windows.Forms.Timer.Start%2A> 、メソッドを<xref:System.Windows.Forms.Timer.Enabled%2A>呼び`true`出すか、をに設定します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-116">To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="7bbff-117">タイマーが無効になっていて、タイマーがスコープ外になった場合、ガベージコレクションが発生するとタイマーは破棄されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-117">If the timer is disabled and the timer is out of scope, the timer will be disposed when garbage collection occurs.</span></span> <span data-ttu-id="7bbff-118">タイマーが有効になっている場合、スコープ外であっても、ガベージコレクションの対象にはなりません。</span><span class="sxs-lookup"><span data-stu-id="7bbff-118">If the timer is enabled, even if it is out of scope, it is not subject to garbage collection.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container"><span data-ttu-id="7bbff-119">タイマーのコンテナーを表す <see cref="T:System.ComponentModel.IContainer" />。</span><span class="sxs-lookup"><span data-stu-id="7bbff-119">An <see cref="T:System.ComponentModel.IContainer" /> that represents the container for the timer.</span></span></param>
        <summary><span data-ttu-id="7bbff-120"><see cref="T:System.Windows.Forms.Timer" /> クラスの新しいインスタンスと、指定したコンテナーを初期化します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-120">Initializes a new instance of the <see cref="T:System.Windows.Forms.Timer" /> class together with the specified container.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-121">コンストラクターを使用すると、 <xref:System.Windows.Forms.Timer>を任意<xref:System.ComponentModel.Container>のオブジェクトに関連付けることができます。 <xref:System.Windows.Forms.Timer></span><span class="sxs-lookup"><span data-stu-id="7bbff-121">The <xref:System.Windows.Forms.Timer> constructor enables you to associate a <xref:System.Windows.Forms.Timer> with any <xref:System.ComponentModel.Container> object.</span></span> <span data-ttu-id="7bbff-122">この<xref:System.Windows.Forms.Timer>ようなを関連付けることによって、の有効期間<xref:System.Windows.Forms.Timer>をに<xref:System.ComponentModel.Container>手動で制御できます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-122">By associating the <xref:System.Windows.Forms.Timer> like this, you hand over control of the lifetime of the <xref:System.Windows.Forms.Timer> to the <xref:System.ComponentModel.Container>.</span></span> <span data-ttu-id="7bbff-123">これは、アプリケーションで多数のコンポーネントを使用し、それらすべてを同時に破棄する場合に便利です。</span><span class="sxs-lookup"><span data-stu-id="7bbff-123">This can be useful if you use a number of components in your application and want to dispose of all of them simultaneously.</span></span> <span data-ttu-id="7bbff-124">たとえば<xref:System.Windows.Forms.ToolTip>、 <xref:System.Windows.Forms.Timer> <xref:System.ComponentModel.Container.Dispose%2A> 、、およびを<xref:System.ComponentModel.Container>に関連付けた場合、でを呼び出すと、 <xref:System.ComponentModel.Container>これらすべてのコンポーネントも強制的に破棄されます。 <xref:System.Windows.Forms.ImageList></span><span class="sxs-lookup"><span data-stu-id="7bbff-124">For example, if you associate a <xref:System.Windows.Forms.ToolTip>, an <xref:System.Windows.Forms.ImageList>, and a <xref:System.Windows.Forms.Timer> with a <xref:System.ComponentModel.Container>, calling <xref:System.ComponentModel.Container.Dispose%2A> on the <xref:System.ComponentModel.Container> will force disposal of all of these components as well.</span></span>  
  
 <span data-ttu-id="7bbff-125">新しいタイマーが作成されると無効になります。つまり、 <xref:System.Windows.Forms.Timer.Enabled%2A>はに`false`設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-125">When a new timer is created, it is disabled; that is, <xref:System.Windows.Forms.Timer.Enabled%2A> is set to `false`.</span></span> <span data-ttu-id="7bbff-126">タイマーを有効にするには<xref:System.Windows.Forms.Timer.Start%2A> 、メソッドを<xref:System.Windows.Forms.Timer.Enabled%2A>呼び`true`出すか、をに設定します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-126">To enable the timer, call the <xref:System.Windows.Forms.Timer.Start%2A> method or set <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span>  
  
 <span data-ttu-id="7bbff-127">このインスタンスは、コンテナーがガベージコレクションをリリースするまで存在します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-127">This instance will exist until its container releases it to garbage collection.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="7bbff-128">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。</span><span class="sxs-lookup"><span data-stu-id="7bbff-128"><see langword="true" /> to release both managed and unmanaged resources.</span></span> <span data-ttu-id="7bbff-129">アンマネージ リソースのみを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7bbff-129"><see langword="false" /> to release only the unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="7bbff-130">タイマーによって使用されていたリソース (メモリを除く) を破棄します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-130">Disposes of the resources, other than memory, used by the timer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-131">タイマー <xref:System.Windows.Forms.Timer.Dispose%2A>の使用が終了したら、を呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-131">Call <xref:System.Windows.Forms.Timer.Dispose%2A> when you are finished using the timer.</span></span> <span data-ttu-id="7bbff-132">メソッド<xref:System.Windows.Forms.Timer.Dispose%2A>は、タイマーを使用できない状態のままにします。</span><span class="sxs-lookup"><span data-stu-id="7bbff-132">The <xref:System.Windows.Forms.Timer.Dispose%2A> method leaves the timer in an unusable state.</span></span> <span data-ttu-id="7bbff-133">を呼び出し<xref:System.Windows.Forms.Timer.Dispose%2A>た後は、使用していたメモリがガベージコレクションによって回収されるように、タイマーへのすべての参照を解放する必要があります。</span><span class="sxs-lookup"><span data-stu-id="7bbff-133">After you call <xref:System.Windows.Forms.Timer.Dispose%2A>, you must release all references to the timer so the memory it was occupying can be reclaimed by garbage collection.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7bbff-134">タイマーへ<xref:System.Windows.Forms.Timer.Dispose%2A>の最後の参照を解放する前に、必ずを呼び出してください。</span><span class="sxs-lookup"><span data-stu-id="7bbff-134">Always call <xref:System.Windows.Forms.Timer.Dispose%2A> before you release your last reference to the timer.</span></span> <span data-ttu-id="7bbff-135">それ以外の場合、タイマーが使用しているリソースは、ガベージコレクションがタイマーオブジェクトのデストラクターを呼び出すまで解放されません。</span><span class="sxs-lookup"><span data-stu-id="7bbff-135">Otherwise, the resources the timer is using will not be freed until garbage collection calls the destructor of the timer object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7bbff-136">タイマーが実行されているかどうかを取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-136">Gets or sets whether the timer is running.</span></span></summary>
        <value><span data-ttu-id="7bbff-137">タイマーが現在有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="7bbff-137"><see langword="true" /> if the timer is currently enabled; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="7bbff-138">既定値は、<see langword="false" /> です。</span><span class="sxs-lookup"><span data-stu-id="7bbff-138">The default is <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-139">値が`true`の場合、タイマーはガベージコレクションの対象になりません。</span><span class="sxs-lookup"><span data-stu-id="7bbff-139">The timer is not subject to garbage collection when the value is `true`.</span></span>  
  
 <span data-ttu-id="7bbff-140">メソッドの<xref:System.Windows.Forms.Timer.Start%2A>呼び出しは、をに設定<xref:System.Windows.Forms.Timer.Enabled%2A>する`true`ことと同じです。</span><span class="sxs-lookup"><span data-stu-id="7bbff-140">Calling the <xref:System.Windows.Forms.Timer.Start%2A> method is the same as setting <xref:System.Windows.Forms.Timer.Enabled%2A> to `true`.</span></span> <span data-ttu-id="7bbff-141">同様に、 <xref:System.Windows.Forms.Timer.Stop%2A>メソッドを呼び出すことは、を`false`に設定<xref:System.Windows.Forms.Timer.Enabled%2A>することと同じです。</span><span class="sxs-lookup"><span data-stu-id="7bbff-141">Likewise, calling the <xref:System.Windows.Forms.Timer.Stop%2A> method is the same as setting <xref:System.Windows.Forms.Timer.Enabled%2A> to `false`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7bbff-142">次の例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-142">The following example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="7bbff-143">アラームが発生すると、 <xref:System.Windows.Forms.MessageBox>はアラームが開始された回数を表示し、タイマーの実行を継続するかどうかをユーザーに確認します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-143">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7bbff-144"><see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生してから次の <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生するまでの時間 (ミリ秒単位) を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-144">Gets or sets the time, in milliseconds, before the <see cref="E:System.Windows.Forms.Timer.Tick" /> event is raised relative to the last occurrence of the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span></span></summary>
        <value><span data-ttu-id="7bbff-145"><see cref="T:System.Int32" /> イベントが発生してから次の <see cref="E:System.Windows.Forms.Timer.Tick" /> イベントが発生するまでの時間 (ミリ秒単位) を指定する <see cref="E:System.Windows.Forms.Timer.Tick" />。</span><span class="sxs-lookup"><span data-stu-id="7bbff-145">An <see cref="T:System.Int32" /> specifying the number of milliseconds before the <see cref="E:System.Windows.Forms.Timer.Tick" /> event is raised relative to the last occurrence of the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span></span> <span data-ttu-id="7bbff-146">1 未満の値を指定することはできません。</span><span class="sxs-lookup"><span data-stu-id="7bbff-146">The value cannot be less than one.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-147">間隔の秒数を取得するには、この数値を1000で除算します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-147">To get the number of seconds in the interval, divide this number by 1,000.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7bbff-148">次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-148">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="7bbff-149">アラームが発生すると、 <xref:System.Windows.Forms.MessageBox>はアラームが開始された回数を表示し、タイマーの実行を継続するかどうかをユーザーに確認します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-149">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><span data-ttu-id="7bbff-150">イベント データを格納している <see cref="T:System.EventArgs" />。</span><span class="sxs-lookup"><span data-stu-id="7bbff-150">An <see cref="T:System.EventArgs" /> that contains the event data.</span></span> <span data-ttu-id="7bbff-151">これは常に <see cref="F:System.EventArgs.Empty" /> です。</span><span class="sxs-lookup"><span data-stu-id="7bbff-151">This is always <see cref="F:System.EventArgs.Empty" />.</span></span></param>
        <summary><span data-ttu-id="7bbff-152"><see cref="E:System.Windows.Forms.Timer.Tick" /> イベントを発生させます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-152">Raises the <see cref="E:System.Windows.Forms.Timer.Tick" /> event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-153">このメソッドは、タイマーティックごとに呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-153">This method is called for each timer tick.</span></span> <span data-ttu-id="7bbff-154">を通じ<xref:System.Windows.Forms.Timer.Tick>て追加されたメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-154">It calls any methods that are added through <xref:System.Windows.Forms.Timer.Tick>.</span></span> <span data-ttu-id="7bbff-155">から<xref:System.Windows.Forms.Timer>継承する場合は、このメソッドをオーバーライドできます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-155">If you are inheriting from <xref:System.Windows.Forms.Timer>, you can override this method.</span></span>  
  
 <span data-ttu-id="7bbff-156">イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-156">Raising an event invokes the event handler through a delegate.</span></span> <span data-ttu-id="7bbff-157">詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-157">For more information, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="7bbff-158">派生クラス<see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />でをオーバーライドする場合は、基本クラスの<see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />メソッドを呼び出す必要があります。</span><span class="sxs-lookup"><span data-stu-id="7bbff-158">When overriding <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> in a derived class, make sure that you call the base class's <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> method.</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7bbff-159">タイマーを起動します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-159">Starts the timer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-160">また、 <xref:System.Windows.Forms.Timer.Enabled%2A>プロパティをに`true`設定して、タイマーを開始することもできます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-160">You can also start the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7bbff-161">次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-161">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="7bbff-162">アラームが発生すると、 <xref:System.Windows.Forms.MessageBox>はアラームが開始された回数を表示し、タイマーの実行を継続するかどうかをユーザーに確認します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-162">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7bbff-163">タイマーを停止します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-163">Stops the timer.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-164"><xref:System.Windows.Forms.Timer.Enabled%2A>プロパティをに設定する`false`ことによって、タイマーを停止することもできます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-164">You can also stop the timer by setting the <xref:System.Windows.Forms.Timer.Enabled%2A> property to `false`.</span></span> <span data-ttu-id="7bbff-165">オブジェクト<xref:System.Windows.Forms.Timer>は、同じアプリケーションセッション内で複数回有効または無効にすることができます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-165">A <xref:System.Windows.Forms.Timer> object may be enabled and disabled multiple times within the same application session.</span></span>  
  
 <span data-ttu-id="7bbff-166">を<xref:System.Windows.Forms.Timer.Start%2A> <xref:System.Windows.Forms.Timer>呼び出し<xref:System.Windows.Forms.Timer>てを無効にした後にを呼び出すと、は中断された間隔を再起動します。 <xref:System.Windows.Forms.Timer.Stop%2A></span><span class="sxs-lookup"><span data-stu-id="7bbff-166">Calling <xref:System.Windows.Forms.Timer.Start%2A> after you have disabled a <xref:System.Windows.Forms.Timer> by calling <xref:System.Windows.Forms.Timer.Stop%2A> will cause the <xref:System.Windows.Forms.Timer> to restart the interrupted interval.</span></span> <span data-ttu-id="7bbff-167"><xref:System.Windows.Forms.Timer.Start%2A> <xref:System.Windows.Forms.Timer.Stop%2A> <xref:System.Windows.Forms.Timer.Tick> <xref:System.Windows.Forms.Timer>が5000ミリ秒間隔に設定されていて、約3000ミリ秒でを呼び出した場合、を呼び出すと、はイベントを発生させる前に5000ミリ秒待機します。 <xref:System.Windows.Forms.Timer></span><span class="sxs-lookup"><span data-stu-id="7bbff-167">If your <xref:System.Windows.Forms.Timer> is set for a 5000-millisecond interval, and you call <xref:System.Windows.Forms.Timer.Stop%2A> at around 3000 milliseconds, calling <xref:System.Windows.Forms.Timer.Start%2A> will cause the <xref:System.Windows.Forms.Timer> to wait 5000 milliseconds before raising the <xref:System.Windows.Forms.Timer.Tick> event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="7bbff-168">Windows フォームアプリケーション<xref:System.Windows.Forms.Timer>内で Stop を呼び出すと、すべて<xref:System.Windows.Forms.Timer>のコンポーネント<xref:System.Windows.Forms.Timer>がメインアプリケーションスレッドで動作するため、アプリケーション内の他のコンポーネントからのメッセージが直ちに処理される可能性があります。</span><span class="sxs-lookup"><span data-stu-id="7bbff-168">Calling Stop on any <xref:System.Windows.Forms.Timer> within a Windows Forms application can cause messages from other <xref:System.Windows.Forms.Timer> components in the application to be processed immediately, because all <xref:System.Windows.Forms.Timer> components operate on the main application thread.</span></span> <span data-ttu-id="7bbff-169">2 <xref:System.Windows.Forms.Timer>つのコンポーネントがあり、1つは700ミリ秒に設定され、もう1つは500ミリ<xref:System.Windows.Forms.Timer>秒に設定されている場合、最初にを呼び出す<xref:System.Windows.Forms.Timer.Stop%2A>と、アプリケーションは最初に2番目のコンポーネントのイベントコールバックを受け取ることがあります。</span><span class="sxs-lookup"><span data-stu-id="7bbff-169">If you have two <xref:System.Windows.Forms.Timer> components, one set to 700 milliseconds and one set to 500 milliseconds, and you call <xref:System.Windows.Forms.Timer.Stop%2A> on the first <xref:System.Windows.Forms.Timer>, your application may receive an event callback for the second component first.</span></span> <span data-ttu-id="7bbff-170">これで問題が発生した場合<xref:System.Threading.Timer>は、代わりに<xref:System.Threading>名前空間のクラスを使用することを検討してください。</span><span class="sxs-lookup"><span data-stu-id="7bbff-170">If this proves problematic, consider using the <xref:System.Threading.Timer> class in the <xref:System.Threading> namespace instead.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7bbff-171">次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-171">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="7bbff-172">アラームが発生すると、 <xref:System.Windows.Forms.MessageBox>はアラームが開始された回数を表示し、タイマーの実行を継続するかどうかをユーザーに確認します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-172">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7bbff-173">なんらかの種類のユーザー状態を表す任意の文字列を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-173">Gets or sets an arbitrary string representing some type of user state.</span></span></summary>
        <value><span data-ttu-id="7bbff-174">なんらかの種類のユーザー状態を表す任意の文字列。</span><span class="sxs-lookup"><span data-stu-id="7bbff-174">An arbitrary string representing some type of user state.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="7bbff-175">指定したタイマーの間隔が経過し、タイマーが有効である場合に発生します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-175">Occurs when the specified timer interval has elapsed and the timer is enabled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-176">イベント内<xref:System.Diagnostics.Debug>からクラスの<xref:System.Windows.Forms.Timer.Tick>メソッドを呼び出すと、予期したとおりに動作しないことがあります。アサーションダイアログボックスを表示すると、Windows によってイベントが繰り返し発生する可能性があります。 <xref:System.Diagnostics.Debug.Assert%2A> <xref:System.Windows.Forms.Timer.Tick></span><span class="sxs-lookup"><span data-stu-id="7bbff-176">Calling the <xref:System.Diagnostics.Debug.Assert%2A> method on the <xref:System.Diagnostics.Debug> class from within the <xref:System.Windows.Forms.Timer.Tick> event may not behave as expected, as displaying the assertion dialog box may cause Windows to raise the <xref:System.Windows.Forms.Timer.Tick> event repeatedly.</span></span> <span data-ttu-id="7bbff-177">このイベント内のアサーションをテストしないことをお勧めします<xref:System.Diagnostics.Debug.Write%2A>。 <xref:System.Diagnostics.Debug.WriteIf%2A>代わりに<xref:System.Diagnostics.Debug.WriteLine%2A>、、 <xref:System.Diagnostics.Debug.WriteLineIf%2A> 、、またはメソッドを使用してください。</span><span class="sxs-lookup"><span data-stu-id="7bbff-177">We recommend that you refrain from testing assertions within this event, and use the <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, or <xref:System.Diagnostics.Debug.WriteLineIf%2A> methods instead.</span></span>  
  
 <span data-ttu-id="7bbff-178">イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="7bbff-178">For more information about handling events, see [Handling and Raising Events](~/docs/standard/events/index.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="7bbff-179">次のコード例では、単純な間隔タイマーを実装します。これにより、5秒ごとにアラームが設定されます。</span><span class="sxs-lookup"><span data-stu-id="7bbff-179">The following code example implements a simple interval timer, which sets off an alarm every five seconds.</span></span> <span data-ttu-id="7bbff-180">アラームが発生すると、 <xref:System.Windows.Forms.MessageBox>はアラームが開始された回数を表示し、タイマーの実行を継続するかどうかをユーザーに確認します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-180">When the alarm occurs, a <xref:System.Windows.Forms.MessageBox> displays a count of the number of times the alarm has started and prompts the user whether the timer should continue to run.</span></span>  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="7bbff-181"><see cref="T:System.Windows.Forms.Timer" /> を表す文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-181">Returns a string that represents the <see cref="T:System.Windows.Forms.Timer" />.</span></span></summary>
        <returns><span data-ttu-id="7bbff-182">現在の <see cref="T:System.Windows.Forms.Timer" /> を表す文字列。</span><span class="sxs-lookup"><span data-stu-id="7bbff-182">A string that represents the current <see cref="T:System.Windows.Forms.Timer" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="7bbff-183">メソッド<xref:System.Windows.Forms.Timer.ToString%2A>は、 <xref:System.Windows.Forms.Timer.Interval%2A>プロパティの値を含む文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="7bbff-183">The <xref:System.Windows.Forms.Timer.ToString%2A> method returns a string that includes the value of the <xref:System.Windows.Forms.Timer.Interval%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
