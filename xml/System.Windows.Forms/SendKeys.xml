<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e2f1404664b4b2d15f50dc8b688ef25527372cc2" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37565830" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>キーストロークをアプリケーションに送信するメソッドを指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys>にキーストロークを送信し、キーストロークをアクティブなアプリケーションの組み合わせ。 このクラスはインスタンス化できません。 クラスにキーストロークを送信し、プログラムのフローをすぐに続行使用<xref:System.Windows.Forms.SendKeys.Send%2A>します。 使用して、キーストロークによって開始されたすべてのプロセスを待つ<xref:System.Windows.Forms.SendKeys.SendWait%2A>します。  
  
 各キーは、1 つまたは複数の文字で表されます。 1 つのキーボード文字を指定するには、文字そのものを使用します。 たとえば、文字 A を表す、文字列"A"でメソッドに渡します。 1 つ以上の文字を表現するには、前に各追加の文字を追加します。 文字 A、B、C を表現するには、"ABC"として、パラメーターを指定します。  
  
 プラス記号 (+)、キャレット (^)、パーセント記号 (%)、チルダ (~)、およびかっこ () は、特別な意味を持つ<xref:System.Windows.Forms.SendKeys>します。 これらの文字のいずれかを指定する中かっこで囲みます ({})。 たとえば、プラス記号を指定するには、「{+}」を使用します。 中かっこ文字を指定するには、次のように使用します。"{{}"と"{}}"。 角かっこ () に特別な意味があるない<xref:System.Windows.Forms.SendKeys>、中かっこで囲む必要がありますが、します。 他のアプリケーションでは角かっこは可能性のある重要なダイナミック データ エクス (チェンジ DDE) が発生したときに特別な意味になります。  
  
> [!CAUTION]
>  アプリケーションが国際対応し、さまざまなキーボードの使用を想定している場合は、<xref:System.Windows.Forms.SendKeys.Send%2A> の使用により予期しない結果になる可能性があるため、回避する必要があります。  
  
 」と入力やタブ文字ではなく、動作を表すキーなどのキーを押すと表示されていない文字を指定するには、次の表に、コードを使用します。  
  
|キー|コード|  
|---------|----------|  
|BACKSPACE キー|{BACKSPACE} {BS} または {BKSP}|  
|BREAK|{0} を中断しました|  
|キャップス ロックです|{CAPSLOCK}|  
|DEL または削除|{削除} または {DEL}|  
|↓|{ダウン}|  
|End|{END}|  
|Enter|{0} に入力} または ~|  
|Esc|{ESC}|  
|ヘルプ|{HELP}|  
|ホーム|{0} ホーム}|  
|アドイン、または INSERT|{0} を挿入} または {INS}|  
|←|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|画面を印刷します。|{PRTSC}(将来使用するために予約されています)|  
|→|{RIGHT}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|Tab|{TAB}|  
|↑|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|キーパッドを追加します。|{ADD}|  
|テンキーを減算します。|{減算}|  
|テンキーを乗算します。|{乗算}|  
|テンキーの除算|{DIVIDE}|  
  
 SHIFT、ctrl キー、および alt の各キーの任意の組み合わせと組み合わせてキーを指定するには、次のコードの 1 つ以上のキー コードを前になります。  
  
|キー|コード|  
|---------|----------|  
|SHIFT キー|+|  
|CTRL キー|^|  
|ALT キー|%|  
  
 その他のいくつかのキーが押されたときに shift キーを押し、CTRL、ALT の任意の組み合わせ保持することを指定するには、かっこでこれらのキー コードを囲みます。 たとえばを指定すると、電子メールおよび C が押されたときに、shift キーを押し、次のように使用します。"+ (EC)"。 次に、shift キーを押さず C、E が押されたときに shift キーを保持するために指定するには使用「+ EC」。  
  
 繰り返しのキーを指定するには、キー {number} フォームを使用します。 キーと値の間にスペースを挿入する必要があります。 たとえば、{左 42} は、42 回; 左矢印キーを押します{h 10} は、H 10 回のキーを押してを意味します。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなど、ネイティブの Windows メソッドを使用`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、(ユーザー アカウント制御または UAC と呼ばれます) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。 <xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、 <xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、 <xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、 <xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、 <xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
   
  
## Examples  
 次のコード例は、<xref:System.Windows.Forms.SendKeys.Send%2A> メソッドの使用方法を示します。 例を実行するには、次のコードを貼り付け Form1 という名前のフォームに Button1 というボタンを配置します。 この例ではイベント処理メソッドに関連付けられているクリック イベントを確認します。 ボタン コントロールの<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティを 0 に設定する必要があります。 例が実行されている場合は、ボタンのクリックをトリガーするフォームをダブルクリックしてイベント。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>メッセージ キューに現在ある Windows メッセージをすべて処理します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys.Flush%2A>キーストロークやメッセージ キューにあるその他のオペレーティング システムのメッセージを処理するアプリケーションを待機します。 これは、呼び出しに相当<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>以上のキーを処理するまでです。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなど、ネイティブの Windows メソッドを使用`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">送信するキーストロークの文字列。</param>
        <summary>キーストロークをアクティブなアプリケーションに送信します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 各キーは、1 つまたは複数の文字で表されます。 1 つのキーボード文字を指定するには、文字そのものを使用します。 たとえば、文字 A を表す、文字列"A"でメソッドに渡します。 1 つ以上の文字を表現するには、前に各追加の文字を追加します。 文字 A、B、C を表現するには、"ABC"として、パラメーターを指定します。  
  
 プラス記号 (+)、キャレット (^)、パーセント記号 (%)、チルダ (~)、およびかっこ () は、特別な意味を持つ<xref:System.Windows.Forms.SendKeys>します。 これらの文字のいずれかを指定する中かっこで囲みます ({})。 たとえば、プラス記号を指定するには、「{+}」を使用します。 中かっこ文字を指定するには、次のように使用します。"{{}"と"{}}"。 角かっこ () に特別な意味があるない<xref:System.Windows.Forms.SendKeys>、中かっこで囲む必要がありますが、します。 他のアプリケーションでは角かっこは可能性のある重要なダイナミック データ エクス (チェンジ DDE) が発生したときに特別な意味になります。  
  
> [!CAUTION]
>  アプリケーションが国際対応し、さまざまなキーボードの使用を想定している場合は、<xref:System.Windows.Forms.SendKeys.Send%2A> の使用により予期しない結果になる可能性があるため、回避する必要があります。  
  
 」と入力やタブ文字ではなく、動作を表すキーなどのキーを押すと表示されていない文字を指定するには、次の表に、コードを使用します。  
  
|キー|コード|  
|---------|----------|  
|BACKSPACE キー|{BACKSPACE} {BS} または {BKSP}|  
|BREAK|{0} を中断しました|  
|キャップス ロックです|{CAPSLOCK}|  
|DEL または削除|{削除} または {DEL}|  
|↓|{ダウン}|  
|End|{END}|  
|Enter|{0} に入力} または ~|  
|Esc|{ESC}|  
|ヘルプ|{HELP}|  
|ホーム|{0} ホーム}|  
|アドイン、または INSERT|{0} を挿入} または {INS}|  
|←|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|画面を印刷します。|{PRTSC}(将来使用するために予約されています)|  
|→|{RIGHT}|  
|SCROLL LOCK|{SCROLLLOCK}|  
|Tab|{TAB}|  
|↑|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|キーパッドを追加します。|{ADD}|  
|テンキーを減算します。|{減算}|  
|テンキーを乗算します。|{乗算}|  
|テンキーの除算|{DIVIDE}|  
  
 SHIFT、ctrl キー、および alt の各キーの任意の組み合わせと組み合わせてキーを指定するには、次のコードの 1 つ以上のキー コードを前になります。  
  
|キー|コード|  
|---------|----------|  
|SHIFT キー|+|  
|CTRL キー|^|  
|ALT キー|%|  
  
 その他のいくつかのキーが押されたときに shift キーを押し、CTRL、ALT の任意の組み合わせ保持することを指定するには、かっこでこれらのキー コードを囲みます。 たとえばを指定すると、電子メールおよび C が押されたときに、shift キーを押し、次のように使用します。"+ (EC)"。 次に、shift キーを押さず C、E が押されたときに shift キーを保持するために指定するには使用「+ EC」。  
  
 繰り返しのキーを指定するには、キー {number} フォームを使用します。 キーと値の間にスペースを挿入する必要があります。 たとえば、{左 42} は、42 回; 左矢印キーを押します{h 10} は、H 10 回のキーを押してを意味します。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなど、ネイティブの Windows メソッドを使用`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、(ユーザー アカウント制御または UAC と呼ばれます) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。 <xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、 <xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、 <xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、 <xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、 <xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.SendKeys.Send%2A>メソッド。例を実行するには、次のコードを貼り付け Form1 という名前のフォームに Button1 というボタンを配置します。 この例ではイベント処理メソッドに関連付けられているクリック イベントを確認します。 ボタン コントロールの<xref:System.Windows.Forms.Control.TabIndex%2A>プロパティを 0 に設定する必要があります。 例が実行されている場合は、ボタンのクリックをトリガーするフォームをダブルクリックしてイベント。  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">キーストロークの送信先となるアクティブなアプリケーションはありません。</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> が有効なキーストロークを表していません。</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">このメソッドを呼び出すアンマネージ コード。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">送信するキーストロークの文字列。</param>
        <summary>特定のキーをアクティブなアプリケーションに送信し、メッセージが処理されるまで待機します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用<xref:System.Windows.Forms.SendKeys.SendWait%2A>にキーストロークやキーストロークの組み合わせをアクティブなアプリケーションに送信し、処理するキーストロークのメッセージを待機します。 このメソッドを使用して、アプリケーションにキーストロークを送信し、完了するためのキーによって起動されるすべてのプロセスを待つことができます。 これは、その他のアプリケーションが終了した後、アプリケーションは引き続き場合に重要です。  
  
> [!NOTE]
>  別のアプリケーションをアクティブ化するマネージ メソッドがないため、現在のアプリケーション内でこのクラスを使用するかなど、ネイティブの Windows メソッドを使用`FindWindow`と`SetForegroundWindow`、他のアプリケーションにフォーカスを設定します。  
  
> [!NOTE]
>  .NET Framework 3.0 の <xref:System.Windows.Forms.SendKeys> クラスが更新され、Windows Vista で実行されるアプリケーションで使用できるようになりました。 Windows Vista の強化されたセキュリティ、(ユーザー アカウント制御または UAC と呼ばれます) により、前の実装は想定どおり機能できません。  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスはタイミングの問題が発生する可能性があり、一部の開発者は回避策を取る必要がありました。 更新された実装は、引き続きタイミングの問題が発生する可能性がありますが、速度が少し向上し、回避策の変更が必要となる可能性があります。 <xref:System.Windows.Forms.SendKeys> クラスは、最初に前の実装を使用しようとし、失敗した場合に、新しい実装を使用します。 その結果、 <xref:System.Windows.Forms.SendKeys> クラスが別のオペレーティング システムと異なる動作を取る可能性があります。 さらに、 <xref:System.Windows.Forms.SendKeys> クラスは、新しい実装を使用した場合、 <xref:System.Windows.Forms.SendKeys.SendWait%2A> メソッドが別のプロセスに送信されたときにメッセージの処理を待機しません。  
>   
>  アプリケーションが、オペレーティング システムに関係なく一貫した動作に依存する場合、app.config ファイルに次のアプリケーション設定を追加することで、 <xref:System.Windows.Forms.SendKeys> クラスが新しい実装を使用するよう強制することができます。  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  <xref:System.Windows.Forms.SendKeys> クラスが前の実装を使用するよう強制するには、代わりに値 `"JournalHook"` を使用します。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">このメソッドを呼び出すアンマネージ コード。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>