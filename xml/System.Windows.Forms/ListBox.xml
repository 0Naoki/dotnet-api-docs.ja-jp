<Type Name="ListBox" FullName="System.Windows.Forms.ListBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="830baf65270aaf40730a7bbcd485dd59dc58561b" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659566" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ListBox : System.Windows.Forms.ListControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListBox extends System.Windows.Forms.ListControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox&#xA;Inherits ListControl" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListBox : System::Windows::Forms::ListControl" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ListControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("SelectedValue")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>項目のリストを表示する Windows コントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox>コントロールでは、ユーザーをクリックして選択できることをユーザーに項目の一覧を表示することができます。 A <xref:System.Windows.Forms.ListBox> 1 つまたは複数の選択内容を使用してコントロールを提供できます、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>プロパティです。 <xref:System.Windows.Forms.ListBox>も用意されています、<xref:System.Windows.Forms.ListBox.MultiColumn%2A>まっすぐ垂直方向の一覧ではなく列では項目の項目の表示を有効にするプロパティです。 これにより、コントロールが複数表示されている項目を表示できるし、ユーザーがアイテムにスクロールする必要はなくなります。  
  
 通常、Windows に表示するアイテムの描画のタスクを処理、<xref:System.Windows.Forms.ListBox>です。 使用することができます、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティ、およびハンドル、<xref:System.Windows.Forms.ListBox.MeasureItem>と<xref:System.Windows.Forms.ListBox.DrawItem>描画 Windows が自動をオーバーライドするためのイベントを提供し、項目を描画します。 オーナー描画を使用する<xref:System.Windows.Forms.ListBox>一覧で変数高さアイテム、画像、または別の色または各アイテムのテキストのフォントを表示するコントロール。 <xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>プロパティ、 <xref:System.Windows.Forms.ListBox.GetItemHeight%2A>、および<xref:System.Windows.Forms.ListBox.GetItemRectangle%2A>役立つことも、独自の項目を描画します。  
  
 表示と選択の機能に加え、<xref:System.Windows.Forms.ListBox>に項目を効率的に追加するための機能も提供、<xref:System.Windows.Forms.ListBox>し、一覧の項目内のテキストを検索します。 <xref:System.Windows.Forms.ListBox.BeginUpdate%2A>と<xref:System.Windows.Forms.ListBox.EndUpdate%2A>メソッドを使用すると、追加する項目の数が多い、<xref:System.Windows.Forms.ListBox>たびに再描画するコントロールを使用しない項目は一覧に追加します。 <xref:System.Windows.Forms.ListBox.FindString%2A>と<xref:System.Windows.Forms.ListBox.FindStringExact%2A>メソッドを使用すると、特定の検索文字列を含む、リスト内の項目を検索します。  
  
 <xref:System.Windows.Forms.ListBox.Items%2A>、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A>、および<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>プロパティによって使用されている 3 つのコレクションへのアクセスを提供する、<xref:System.Windows.Forms.ListBox>です。 次の表に、3 つのコレクションで使用される、<xref:System.Windows.Forms.ListBox>とコントロール内の使用します。  
  
|コレクション クラス|内で使用して、 <xref:System.Windows.Forms.ListBox>|  
|----------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------|  
|<xref:System.Windows.Forms.ListBox.ObjectCollection>|含まれているすべての項目を含む、<xref:System.Windows.Forms.ListBox>コントロール。|  
|<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>|格納される項目のサブセットである、選択した項目のコレクションを格納で、<xref:System.Windows.Forms.ListBox>コントロール。|  
|<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>|インデックスのサブセットである、選択されたインデックスのコレクションを格納の<xref:System.Windows.Forms.ListBox.ObjectCollection>です。 これらのインデックスは、選択されている項目を指定します。|  
  
 次の 3 つの例を表示する 3 つのインデックス付きコレクションを<xref:System.Windows.Forms.ListBox>クラスでサポートされます。  
  
 次の表は、方法の例を示しています。<xref:System.Windows.Forms.ListBox.ObjectCollection>のアイテムを格納する、<xref:System.Windows.Forms.ListBox>例内の選択状態だけでなく<xref:System.Windows.Forms.ListBox>です。  
  
|インデックス|アイテム|リスト ボックス内で選択状態|  
|-----------|----------|----------------------------------------|  
|0|object1|未選択|  
|1|object2|選択済み|  
|2|object3|未選択|  
|3|object4|選択済み|  
|4|object5|選択済み|  
  
 に基づいて、 <xref:System.Windows.Forms.ListBox.ObjectCollection> 、前の表に示すように、この表の方法、<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>が表示されます。  
  
|インデックス|アイテム|  
|-----------|----------|  
|0|object2|  
|1|object4|  
|2|object5|  
  
 に基づいて、 <xref:System.Windows.Forms.ListBox.ObjectCollection> 、前の表に示すように、この表の方法、<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>が表示されます。  
  
|インデックス|項目のインデックス|  
|-----------|-------------------|  
|0|1|  
|1|3|  
|2|4|  
  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>クラスでは、項目を追加することができます、<xref:System.Windows.Forms.ListBox>です。 <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>にメンバーを追加するときに、メソッドは任意のオブジェクトを受け入れることができます、<xref:System.Windows.Forms.ListBox>です。 オブジェクトに追加されるときに、 <xref:System.Windows.Forms.ListBox>、コントロールで定義されているテキストを使用して、<xref:System.Object.ToString%2A>オブジェクトのメソッドは、メンバーの名前、オブジェクト内でない限りで指定された、<xref:System.Windows.Forms.ListControl.DisplayMember%2A>プロパティです。 使用して項目を追加するだけでなく、<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>クラスを追加することもの項目を使用して、<xref:System.Windows.Forms.ListControl.DataSource%2A>のプロパティ、<xref:System.Windows.Forms.ListControl>クラスです。  
  
> [!NOTE]
>  ある場合、 <xref:System.Windows.Forms.ListBox>、 <xref:System.Windows.Forms.ComboBox>、または<xref:System.Windows.Forms.CheckedListBox>基本の Windows フォームと、派生の Windows フォームでのそれらのコントロールの文字列コレクションを変更するには、基本の Windows フォームでコントロールの文字列コレクションを空にする必要があります。 文字列のコレクションが空でない場合になる読み取り専用で別の Windows フォームを派生させる場合。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Windows.Forms.ListBox>コントロールの列に複数の項目を表示し、コントロールの一覧で選択した 1 つ以上の項目を持つことができます。 例のコードに 50 個の項目の追加、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>を使用して、一覧から項目を 3 つのクラスと、選択、<xref:System.Windows.Forms.ListBox.SetSelected%2A>メソッドです。 コードからの値を表示、<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>コレクションして、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>プロパティ、および<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>して、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>プロパティです。 この例は、コードにありから呼び出すことが必要です、<xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Windows.Forms.ListBox>コントロールの列に複数の項目を表示し、コントロールの一覧で選択した 1 つ以上の項目を持つことができます。 例のコードに 50 個の項目の追加、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>を使用して、一覧から項目を 3 つのクラスと、選択、<xref:System.Windows.Forms.ListBox.SetSelected%2A>メソッドです。 コードからの値を表示、<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>コレクションして、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>プロパティ、および<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>して、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>プロパティです。 この例は、コードにありから呼び出すことが必要です、<xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItemsCore">
      <MemberSignature Language="C#" Value="protected virtual void AddItemsCore (object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddItemsCore(object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.AddItemsCore(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddItemsCore (value As Object())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddItemsCore(cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This method has been deprecated.  There is no replacement.  http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="value">オブジェクトの配列。</param>
        <summary>このメンバーは互換性のために残されており、代わりのメンバーはありません。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowSelection">
      <MemberSignature Language="C#" Value="protected override bool AllowSelection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.AllowSelection" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property AllowSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool AllowSelection { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> でリスト項目の選択が現在有効かどうかを示す値を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.SelectionMode" /> が <see cref="F:System.Windows.Forms.SelectionMode.None" /> ではない場合<see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの背景色を取得または設定します。</summary>
        <value>コントロールの背景色を表す <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultBackColor" /> プロパティの値です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>フォームの背景イメージ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ラベルの <see cref="P:System.Windows.Forms.ListBox.BackgroundImage" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 列挙体で定義された <see cref="T:System.Windows.Forms.ImageLayout" /> の背景イメージ レイアウトを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ImageLayout" /> の値の 1 つ。 値は、<see langword="Center" />、<see langword="None" />、<see langword="Stretch" />、<see langword="Tile" />、または <see langword="Zoom" /> です。 既定値は <see langword="Center" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定した列挙値が存在しません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListBox.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>項目を <see cref="T:System.Windows.Forms.ListBox" /> に 1 つずつ追加するときにパフォーマンスを維持するには、<see cref="M:System.Windows.Forms.ListBox.EndUpdate" /> メソッドが呼び出されるまでコントロールを再描画しないようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数の項目を追加することをお勧め、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>クラス (を通じて、<xref:System.Windows.Forms.ListBox.Items%2A>のプロパティ、 <xref:System.Windows.Forms.ListBox>)。 これにより、単一の操作でリストに項目の配列を追加することができます。 ただしを追加する場合は、項目を一度に 1 つを使用して、時間、<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>クラスを使用することができます、<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>メソッドをコントロールが再描画するを防ぐために、<xref:System.Windows.Forms.ListBox>項目が一覧に追加されるたびにします。 項目を一覧に追加するタスクを完了すると、呼び出し、<xref:System.Windows.Forms.ListBox.EndUpdate%2A>を有効にする方法、<xref:System.Windows.Forms.ListBox>に再描画します。 この方法で項目を追加するときにちらつきませんの描画、<xref:System.Windows.Forms.ListBox>多数のアイテムの一覧に追加するときにします。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>と<xref:System.Windows.Forms.ListBox.EndUpdate%2A>5千項目の追加中にメソッド、<xref:System.Windows.Forms.ListBox>です。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`に追加された、<xref:System.Windows.Forms.Form>し、このメソッドは、フォーム内に配置し、そこから呼び出されます。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.EndUpdate" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> の周囲に描画される境界線の種類を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.BorderStyle" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" /> です。</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">値が、<see cref="T:System.Windows.Forms.BorderStyle" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="ClearSelected">
      <MemberSignature Language="C#" Value="public void ClearSelected ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearSelected() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ClearSelected" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearSelected ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearSelected();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内のすべての項目を選択解除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 同じことには、このメソッドを呼び出す、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>プロパティを負の 1 (-1)。 このメソッドを使用すると、リスト内のすべての項目をすばやく選択解除します。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>を持つプロパティ、<xref:System.Windows.Forms.ListBox.TopIndex%2A>プロパティの表示領域内の項目の一覧の一番上に、現在選択されている項目を移動する、<xref:System.Windows.Forms.ListBox>です。 さらに例を使用して項目を削除する方法を示します、<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>クラス、およびすべての選択を使用して項目をクリアする方法、<xref:System.Windows.Forms.ListBox.ClearSelected%2A>メソッドです。 コードは最初、現在選択されている項目を移動、<xref:System.Windows.Forms.ListBox>一覧の先頭にします。 コードは、現在選択されている項目の前にすべての項目を削除し、すべての選択項目をクリア、<xref:System.Windows.Forms.ListBox>です。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>項目を含むが、フォームに追加されで選択した項目が現在は、<xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> コントロールがクリックされたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidth">
      <MemberSignature Language="C#" Value="public int ColumnWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ColumnWidth" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ColumnWidth" />
      <MemberSignature Language="VB.NET" Value="Public Property ColumnWidth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ColumnWidth { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>複数列の <see cref="T:System.Windows.Forms.ListBox" /> の列幅を取得または設定します。</summary>
        <value>コントロール内の各列の幅 (ピクセル単位)。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ゼロ (0) に値を設定する場合は、各列に既定の幅が割り当てられます。 場合、 <xref:System.Windows.Forms.ListBox> 、複数の列は、 <xref:System.Windows.Forms.ListBox>、このプロパティは、一覧の各列の現在の幅を返します。 このプロパティを使用するには、複数の列で各列を確実に<xref:System.Windows.Forms.ListBox>そのアイテムを正しく表示することができます。  
  
   
  
## Examples  
 次のコード例は、単純な 2 つの列を示します<xref:System.Windows.Forms.ListBox>です。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">0 未満の値がプロパティに代入されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateItemCollection">
      <MemberSignature Language="C#" Value="protected virtual System.Windows.Forms.ListBox.ObjectCollection CreateItemCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Windows.Forms.ListBox/ObjectCollection CreateItemCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.CreateItemCollection" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateItemCollection () As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Windows::Forms::ListBox::ObjectCollection ^ CreateItemCollection();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>項目コレクションの新しいインスタンスを作成します。</summary>
        <returns>新しい項目コレクションを表す <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />。</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>これは、項目を格納する別のコレクションを提供する派生クラスでオーバーライドできます。</para>
        </block>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール ハンドルが作成されるときに必要な作成パラメーターを取得します。</summary>
        <value>コントロールを識別するハンドルを作成するときに必要な作成パラメーターを格納している <see cref="T:System.Windows.Forms.CreateParams" />。</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを操作します。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CustomTabOffsets">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.IntegerCollection CustomTabOffsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/IntegerCollection CustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomTabOffsets As ListBox.IntegerCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::IntegerCollection ^ CustomTabOffsets { System::Windows::Forms::ListBox::IntegerCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+IntegerCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の項目間のタブ幅を取得します。</summary>
        <value>タブ幅を表す整数のコレクション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 整数の配列には、昇順でタブのスペースが含まれています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItemHeight">
      <MemberSignature Language="C#" Value="public const int DefaultItemHeight = 13;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 DefaultItemHeight = (13)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.DefaultItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Const DefaultItemHeight As Integer  = 13" />
      <MemberSignature Language="C++ CLI" Value="public: int DefaultItemHeight = 13;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>13</MemberValue>
      <Docs>
        <summary>オーナー描画 <see cref="T:System.Windows.Forms.ListBox" /> の既定の項目の高さを指定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のサイズを取得します。</summary>
        <value>コントロールの既定の <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オーナー描画 <see cref="T:System.Windows.Forms.ListBox" /> のビジュアルな部分を変更すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、オーナー描画で使用<xref:System.Windows.Forms.ListBox>です。 イベントは、のみいつ発生するか、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティに設定されている`DrawMode.OwnerDrawFixed`または`DrawMode.OwnerDrawVariable`です。 このイベントを使用するには項目を描画するに必要なタスクを実行する、<xref:System.Windows.Forms.ListBox>です。 可変サイズの項目がある場合 (ときに、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティに設定されている`DrawMode.OwnerDrawVariable`)、項目を描画する前に、<xref:System.Windows.Forms.ListBox.MeasureItem>イベントが発生します。 イベント ハンドラーを作成することができます、<xref:System.Windows.Forms.ListBox.MeasureItem>しようとする描画イベント ハンドラーで、項目のサイズを指定するイベント、<xref:System.Windows.Forms.ListBox.DrawItem>イベント。  
  
 イベント処理の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。  
  
   
  
## Examples  
 オーナー描画を作成する方法を次のコード例に示します<xref:System.Windows.Forms.ListBox>項目。 コードを使用して、<xref:System.Windows.Forms.ListBox.DrawMode%2A>描画された項目が固定されることを指定するプロパティのサイズと<xref:System.Windows.Forms.ListBox.DrawItem>に各項目の描画を実行するイベント、<xref:System.Windows.Forms.ListBox>です。 プロパティとメソッドのコード例を使用して、<xref:System.Windows.Forms.DrawItemEventArgs>クラスは、項目を描画するイベント ハンドラーにパラメーターとして渡されます。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>と呼ばれるコントロール`listBox1`ことと、フォームに追加された、<xref:System.Windows.Forms.ListBox.DrawItem>コード例で定義されているイベント ハンドラーでイベントが処理します。 また、例でに項目が追加されている必要があります、<xref:System.Windows.Forms.ListBox>をこの順序で"Apple"、「オレンジ」および「プラム」のテキストを含むです。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="DrawMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.DrawMode DrawMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DrawMode DrawMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.DrawMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DrawMode As DrawMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::DrawMode DrawMode { System::Windows::Forms::DrawMode get(); void set(System::Windows::Forms::DrawMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの描画モードを取得または設定します。</summary>
        <value>コントロールの項目を描画するときのモードを表す <see cref="T:System.Windows.Forms.DrawMode" /> 値の 1 つ。 既定値は、<see langword="DrawMode.Normal" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 オーナー描画を作成する方法を次のコード例に示します<xref:System.Windows.Forms.ListBox>項目。 コードを使用して、<xref:System.Windows.Forms.ListBox.DrawMode%2A>描画された項目が固定されることを指定するプロパティのサイズと<xref:System.Windows.Forms.ListBox.DrawItem>に各項目の描画を実行するイベント、<xref:System.Windows.Forms.ListBox>です。 プロパティとメソッドのコード例を使用して、<xref:System.Windows.Forms.DrawItemEventArgs>クラスは、項目を描画するイベント ハンドラーにパラメーターとして渡されます。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>と呼ばれるコントロール`listBox1`ことと、フォームに追加された、<xref:System.Windows.Forms.ListBox.DrawItem>コード例で定義されているイベント ハンドラーでイベントが処理します。 また、例でに項目が追加されている必要があります、<xref:System.Windows.Forms.ListBox>をこの順序で"Apple"、「オレンジ」および「プラム」のテキストを含むです。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">プロパティに割り当てられている値は <see cref="T:System.Windows.Forms.DrawMode" /> 列挙体のメンバーではありません。</exception>
        <exception cref="T:System.ArgumentException">複数列の <see cref="T:System.Windows.Forms.ListBox" /> の高さは可変にできません。</exception>
        <altmember cref="T:System.Windows.Forms.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> メソッドによって描画が中断された後、<see cref="M:System.Windows.Forms.ListBox.BeginUpdate" /> コントロールの描画を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 項目を追加することをお勧め、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>クラス (を通じて、<xref:System.Windows.Forms.ListBox.Items%2A>のプロパティ、 <xref:System.Windows.Forms.ListBox>)。 これにより、一度に 1 つのリストに項目の配列を追加することができます。 ただしを追加する場合は、項目を一度に 1 つを使用して、時間、<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>クラスを使用することができます、<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>メソッドをコントロールが再描画するを防ぐために、<xref:System.Windows.Forms.ListBox>項目が一覧に追加されるたびにします。 項目を一覧に追加するタスクを完了すると、呼び出し、<xref:System.Windows.Forms.ListBox.EndUpdate%2A>を有効にする方法、<xref:System.Windows.Forms.ListBox>に再描画します。 この方法で項目を追加するときにちらつきませんの描画、<xref:System.Windows.Forms.ListBox>多数のアイテムの一覧に追加するときにします。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Windows.Forms.ListBox.BeginUpdate%2A>と<xref:System.Windows.Forms.ListBox.EndUpdate%2A>5千項目の追加中にメソッド、<xref:System.Windows.Forms.ListBox>です。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`に追加された、<xref:System.Windows.Forms.Form>し、このメソッドは、フォーム内に配置し、そこから呼び出されます。  
  
 [!code-cpp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox.BeginUpdate Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox.BeginUpdate Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.BeginUpdate" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindString">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で、指定した文字列で始まる最初の項目を検索します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で、指定した文字列で始まる最初の項目を検索します。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス番号。一致する項目が見つからない場合は <see langword="ListBox.NoMatches" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって実行される検索小文字は区別されません。 検索では、指定した検索文字列パラメーターを部分的に一致する語句`s`です。 このメソッドを使用すると、指定した文字列と一致する最初の項目を検索します。 使用して検索テキストを表す項目を削除するなどのタスクを行うことができますし、<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>メソッドまたは項目のテキストを変更します。 その他のインスタンス内のテキストを検索する場合、指定したテキストが見つかった場合、<xref:System.Windows.Forms.ListBox>のバージョンを使用することができます、<xref:System.Windows.Forms.ListBox.FindString%2A>内の開始インデックスを指定するためのパラメーターを提供するメソッド、<xref:System.Windows.Forms.ListBox>です。 部分的な一致ではなく、正確な単語の一致の検索を実行する場合を使用して、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.FindString%2A>で文字列の最初のインスタンスを検索する方法、<xref:System.Windows.Forms.ListBox>です。 項目が見つからないかどうか、検索文字列に一致する<xref:System.Windows.Forms.ListBox.FindString%2A>、-1 を返します値と、例が表示されます、<xref:System.Windows.Forms.MessageBox>です。 この例では、検索テキストに一致する項目が見つかった場合、<xref:System.Windows.Forms.ListBox.SetSelected%2A>内の項目を選択する方法、<xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.FindString2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="s" /> パラメーターの値が -1 未満か項目数以上です。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindString">
      <MemberSignature Language="C#" Value="public int FindString (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindString(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindString(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindString (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindString(System::String ^ s, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <param name="startIndex">最初の検索対象項目の前にある項目の 0 から始まるインデックス番号。 コントロールの先頭から検索する場合は -1 に設定します。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で、指定した文字列で始まる最初の項目を検索します。 指定した開始インデックスから検索が開始します。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス番号。一致する項目が見つからない場合は <see langword="ListBox.NoMatches" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって実行される検索小文字は区別されません。 検索では、指定した検索文字列パラメーターを部分的に一致する語句`s`です。 このメソッドを使用するには、指定した文字列内の項目のリストで指定した開始インデックス位置に一致する最初の項目を検索する、<xref:System.Windows.Forms.ListBox>です。 使用して検索テキストを表す項目を削除するなどのタスクを行うことができますし、<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>メソッドまたは項目のテキストを変更します。 このメソッドは通常、この開始インデックスが指定されていないメソッドのバージョンを使用して、呼び出しが行われた後に使用されます。 一覧で、最初の項目が見つかった後、このメソッドを内のインデックス位置を指定することによってさらに、検索テキストのインスタンスを検索する用い、`startIndex`最初に見つかった項目の検索テキストの後の項目のパラメーターです。 部分的な一致ではなく、正確な単語の一致の検索を実行する場合を使用して、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>メソッドです。  
  
> [!NOTE]
>  検索がの下部に達したとき、<xref:System.Windows.Forms.ListBox>の先頭から検索を続けますが、<xref:System.Windows.Forms.ListBox>で指定された項目に戻り、`startIndex`パラメーター。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.FindString%2A>の項目の検索文字列のすべてのインスタンスを検索する方法、<xref:System.Windows.Forms.ListBox>です。 例では、バージョンを使用して、<xref:System.Windows.Forms.ListBox.FindString%2A>メソッド内のすべての項目の継続的な検索を実行する開始検索インデックスを指定することができます、<xref:System.Windows.Forms.ListBox>です。 タイミングを決定する方法も示します、<xref:System.Windows.Forms.ListBox.FindString%2A>メソッドは、再帰的な検索を回避する項目の一覧の下部に達した後に、一覧の先頭から検索を開始します。 項目が見つかると、<xref:System.Windows.Forms.ListBox>は、選択したを使用して、<xref:System.Windows.Forms.ListBox.SetSelected%2A>メソッドです。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> パラメーターの値がゼロ未満か、<see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> クラスの <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> プロパティの値以上です。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindStringExact">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で、指定した文字列と正確に一致する最初の項目を検索します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で、指定した文字列と正確に一致する最初の項目を検索します。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス番号。一致する項目が見つからない場合は <see langword="ListBox.NoMatches" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって実行される検索小文字は区別されません。 検索では、検索文字列のパラメーターで指定した語と完全に一致`s`です。 このメソッドを使用すると、指定した文字列と一致する最初の項目を検索します。 使用して検索テキストを表す項目を削除するなどのタスクを行うことができますし、<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>メソッドまたは項目のテキストを変更します。 その他のインスタンス内のテキストを検索する場合、指定したテキストが見つかった場合、<xref:System.Windows.Forms.ListBox>のバージョンを使用することができます、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>内の開始インデックスを指定するためのパラメーターを提供するメソッド、<xref:System.Windows.Forms.ListBox>です。 Word の正確な一致ではなく単語の一部の検索を実行する場合を使用して、<xref:System.Windows.Forms.ListBox.FindString%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.FindStringExact%2A?displayProperty=nameWithType>を検索するメソッド、<xref:System.Windows.Forms.ListBox>指定した文字列と一致する項目のコントロールをします。 検索文字列に一致するアイテムが見つからない場合<xref:System.Windows.Forms.ListBox.FindStringExact%2A>、-1 を返します値と、例が表示されます、<xref:System.Windows.Forms.MessageBox>です。 この例では、検索テキストに一致する項目が見つかった場合、<xref:System.Windows.Forms.ListBox.SetSelected%2A>内の項目を選択する方法、<xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.FindStringExact#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="FindStringExact">
      <MemberSignature Language="C#" Value="public int FindStringExact (string s, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 FindStringExact(string s, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.FindStringExact(System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindStringExact (s As String, startIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int FindStringExact(System::String ^ s, int startIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="s">検索するテキストです。</param>
        <param name="startIndex">最初の検索対象項目の前にある項目の 0 から始まるインデックス番号。 コントロールの先頭から検索する場合は -1 に設定します。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で、指定した文字列と正確に一致する最初の項目を検索します。 指定した開始インデックスから検索が開始します。</summary>
        <returns>最初に見つかった項目の 0 から始まるインデックス番号。一致する項目が見つからない場合は <see langword="ListBox.NoMatches" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドによって実行される検索小文字は区別されません。 検索は、指定した検索文字列パラメーターと完全に一致する単語`s`です。 このメソッドを使用するには、指定した文字列内の項目のリストで指定した開始インデックス位置に一致する最初の項目を検索する、<xref:System.Windows.Forms.ListBox>です。 使用して検索テキストを含む、アイテムの削除などのタスクを行うことができますし、<xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A>メソッドまたは項目のテキストを変更します。 このメソッドは通常、この開始インデックスが指定されていないメソッドのバージョンを使用して、呼び出しが行われた後に使用されます。 一覧で、最初の項目が見つかった後、このメソッドを内のインデックス位置を指定することによってさらに、検索テキストのインスタンスを検索する用い、`startIndex`最初に見つかった項目の検索テキストの後の項目のパラメーターです。 Word の正確な一致ではなく単語の一部の検索を実行する場合を使用して、<xref:System.Windows.Forms.ListBox.FindString%2A>メソッドです。  
  
> [!NOTE]
>  検索がの下部に達したとき、<xref:System.Windows.Forms.ListBox>の先頭から検索を続けますが、<xref:System.Windows.Forms.ListBox>で指定された項目に戻り、`startIndex`パラメーター。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>のすべての項目を検索する方法、<xref:System.Windows.Forms.ListBox>指定された検索テキストを正確に一致します。 例では、バージョンを使用して、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>メソッド内のすべての項目の継続的な検索を実行する開始検索インデックスを指定することができます、<xref:System.Windows.Forms.ListBox>です。 タイミングを決定する方法も示します、<xref:System.Windows.Forms.ListBox.FindStringExact%2A>メソッドが再帰的な検索を防ぐために、項目の一覧の下部に達した後に、一覧の先頭から検索を開始します。 項目が見つかると、<xref:System.Windows.Forms.ListBox>は、選択したを使用して、<xref:System.Windows.Forms.ListBox.SetSelected%2A>メソッドです。  
  
 [!code-cpp[ListBox.FindStringExact2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindStringExact2/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindStringExact2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindStringExact2/CS/form1.cs#1)]
 [!code-vb[ListBox.FindStringExact2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindStringExact2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="startIndex" /> パラメーターの値がゼロ未満か、<see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> クラスの <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> プロパティの値以上です。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public override System.Drawing.Font Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Font Font" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Font" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Font As Font" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Font ^ Font { System::Drawing::Font ^ get(); void set(System::Drawing::Font ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Font</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールによって表示されるテキストのフォントを取得または設定します。</summary>
        <value>コントロールによって表示されるテキストに適用される <see cref="T:System.Drawing.Font" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultFont" /> プロパティの値です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの前景色を取得または設定します。</summary>
        <value>コントロールの前景の <see cref="T:System.Drawing.Color" />。 既定値は <see cref="P:System.Windows.Forms.Control.DefaultForeColor" /> プロパティの値です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemHeight">
      <MemberSignature Language="C#" Value="public int GetItemHeight (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetItemHeight(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemHeight (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetItemHeight(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">高さが返される項目の 0 から始まるインデックス番号。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の項目の高さを返します。</summary>
        <returns>指定した項目の高さ (ピクセル単位)。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティに設定されていない`DrawMode.OwnerDrawVariable`、すべての項目、標準的なために、インデックス パラメーターの値は無視されます<xref:System.Windows.Forms.ListBox>サイズは同じです。 オーナー描画を使用しているときに、このプロパティを使用することができます<xref:System.Windows.Forms.ListBox>内の任意のアイテムのサイズを決定する、<xref:System.Windows.Forms.ListBox>です。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターで指定された値が 0 未満か、項目数より大きい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetItemRectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRectangle (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRectangle(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetItemRectangle(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRectangle (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRectangle(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">外接する四角形が返される項目の 0 から始まるインデックス番号。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の項目の外接する四角形を返します。</summary>
        <returns>指定した項目の外接する四角形を表す <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 項目が指定されている場合、`index`パラメーターが表示されていない、このメソッドによって返される四角形は、コントロールの表示部分の外側になります。 このメソッドを使用すると、一覧内のアイテムの位置とサイズを決定します。 項目の高さを取得する可変サイズのオーナー描画リスト項目特に行うこともできます、<xref:System.Windows.Forms.ListBox.GetItemHeight%2A>メソッドです。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターの値がゼロ未満か、<see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> クラスの <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> プロパティの値以上です。</exception>
      </Docs>
    </Member>
    <Member MemberName="GetScaledBounds">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Rectangle GetScaledBounds (System.Drawing.Rectangle bounds, System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance valuetype System.Drawing.Rectangle GetScaledBounds(valuetype System.Drawing.Rectangle bounds, valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetScaledBounds(System.Drawing.Rectangle,System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetScaledBounds (bounds As Rectangle, factor As SizeF, specified As BoundsSpecified) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Drawing::Rectangle GetScaledBounds(System::Drawing::Rectangle bounds, System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="System.Drawing.Rectangle" />
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="bounds">ディスプレイの範囲の取得条件となる領域を指定する <see cref="T:System.Drawing.Rectangle" />。</param>
        <param name="factor">コントロールの境界の高さおよび幅。</param>
        <param name="specified">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> の値の 1 つ。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> のスケールが設定される境界を取得します。</summary>
        <returns>コントロールのスケールが設定される境界を表す <see cref="T:System.Drawing.Rectangle" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox>クラスのオーバーライド、<xref:System.Windows.Forms.Control.GetScaledBounds%2A?displayProperty=nameWithType>メソッドを現在の高さではなく、要求された高さが調整されることを確認します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelected">
      <MemberSignature Language="C#" Value="public bool GetSelected (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool GetSelected(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.GetSelected(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSelected (index As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetSelected(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">選択されているかどうかを確認する対象となる項目の 0 から始まるインデックス番号。</param>
        <summary>指定した項目が選択されているかどうかを示す値を返します。</summary>
        <returns>
          指定した項目が <see cref="T:System.Windows.Forms.ListBox" /> 内で現在選択されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、指定した項目が選択されているかどうかをすばやく確認します。 このメソッドは、特定の操作の場合、複数選択内の特定の項目を実行する必要があるとき<xref:System.Windows.Forms.ListBox>が選択されています。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.GetSelected%2A>でアイテムを決定する方法、<xref:System.Windows.Forms.ListBox>が選択されていないアイテムを選択し、選択されている項目の選択を解除するために選択します。 例を使用して、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>プロパティを有効にする、<xref:System.Windows.Forms.ListBox>が複数あるを使用して項目を選択、<xref:System.Windows.Forms.ListBox.Sorted%2A>の項目を並べ替える方法を説明するプロパティ、<xref:System.Windows.Forms.ListBox>自動的にします。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox>、名前付き`listBox1`、フォームに追加されましたが、`InitializeMyListBox`からこの例で定義されたメソッドが呼び出されます、<xref:System.Windows.Forms.Form.Load>フォームのイベントです。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターの値がゼロ未満か、<see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> クラスの <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> プロパティの値以上です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HorizontalExtent">
      <MemberSignature Language="C#" Value="public int HorizontalExtent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 HorizontalExtent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalExtent As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int HorizontalExtent { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> の水平スクロール バーでスクロールできる幅を取得または設定します。</summary>
        <value>水平スクロール バーでコントロールをスクロールできる幅 (ピクセル単位)。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、場合のみ役に立つ値を報告、<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>プロパティに設定されている`true`です。 場合の幅、<xref:System.Windows.Forms.ListBox>水平スクロール バーの水平方向にスクロール項目は、このプロパティの値よりも小さい、<xref:System.Windows.Forms.ListBox>です。 場合の幅、<xref:System.Windows.Forms.ListBox>は、この値以上になると、水平スクロール バーを非表示にします。 このプロパティの値がによって動的に更新されません、<xref:System.Windows.Forms.ListBox>です。 このプロパティはいつの項目を<xref:System.Windows.Forms.ListBox>オーナー描画します。 たとえば場合のオーナー描画項目、<xref:System.Windows.Forms.ListBox>は 200 ピクセル、幅、ですが、 <xref:System.Windows.Forms.ListBox> 60 ピクセル、<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>プロパティ、コントロールの表示領域に、アイテムの右端をスクロールするために 200 に設定する必要があります。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>と<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>内のすべての項目テキストを示す水平スクロール バーを表示するプロパティ、<xref:System.Windows.Forms.ListBox>コントロール。 また、例では、<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>する項目はサイズが部分的には表示されないようにするプロパティ、<xref:System.Windows.Forms.ListBox>コントロール。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`フォームに追加されました。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="HorizontalScrollbar">
      <MemberSignature Language="C#" Value="public bool HorizontalScrollbar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HorizontalScrollbar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      <MemberSignature Language="VB.NET" Value="Public Property HorizontalScrollbar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HorizontalScrollbar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>水平スクロール バーをコントロールに表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          水平スクロール バーをコントロールに表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>プロパティを決定するかどうか、<xref:System.Windows.Forms.ListBox>水平スクロールを表示する必要がありますバーの場合内のアイテムの幅、<xref:System.Windows.Forms.ListBox>コントロールの右の端を超えて拡張します。 このプロパティに設定するときに`true`、内のアイテムの幅に基づく、スクロール バーが自動的に表示、<xref:System.Windows.Forms.ListBox>です。 場合、<xref:System.Windows.Forms.ListBox>オーナー描画<xref:System.Windows.Forms.ListBox>、水平スクロール バーを正しく表示するために設定する必要があります、<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>プロパティです。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>と<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>内のすべての項目テキストを示す水平スクロール バーを表示するプロパティ、<xref:System.Windows.Forms.ListBox>コントロール。 また、例では、<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>する項目はサイズが部分的には表示されないようにするプロパティ、<xref:System.Windows.Forms.ListBox>コントロール。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`フォームに追加されました。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalExtent" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IndexFromPoint">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した座標にある項目の 0 から始まるインデックス番号を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (System.Drawing.Point p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(valuetype System.Drawing.Point p) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (p As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(System::Drawing::Point p);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="p">項目のインデックスを取得するために使用する座標を保持している <see cref="T:System.Drawing.Point" /> オブジェクト。</param>
        <summary>指定した座標にある項目の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した座標にある項目の 0 から始まるインデックス番号。一致する項目が見つからない場合は <see langword="ListBox.NoMatches" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドでは、コントロール内で特定の場所にある項目を確認することができます。 このメソッドを使用するには、ユーザーを右クリックしたときに、一覧内でどの項目が選択されているを決定する、<xref:System.Windows.Forms.ListBox>です。 カーソルの位置を決定しに渡される、`p`のパラメーター、<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>ユーザーが項目を決定するメソッド経由でマウスを右クリックします。 タスクと特定の項目に基づく機能を提供するユーザーに、ショートカット メニューを表示できます。  
  
   
  
## Examples  
 次のコード例を使用して、ドラッグ アンド ドロップ操作を実行する方法を示します、<xref:System.Windows.Forms.ListBox>コントロールにドロップする項目を含む、<xref:System.Windows.Forms.RichTextBox>コントロール。 フォームのセットのコンス トラクター、<xref:System.Windows.Forms.RichTextBox.AllowDrop%2A>プロパティを`true`をドラッグ アンド ドロップ操作を有効にする、<xref:System.Windows.Forms.RichTextBox>です。 この例では、<xref:System.Windows.Forms.Control.MouseDown>のイベント、<xref:System.Windows.Forms.ListBox>を呼び出すことによって、ドラッグ操作を開始する、<xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドです。 この例では、<xref:System.Windows.Forms.Control.DragEnter>に項目をドラッグしている場合を決定するイベント、<xref:System.Windows.Forms.RichTextBox>は有効なデータ型です。 <xref:System.Windows.Forms.Control.DragDrop>イベントにドラッグした項目の実際の削除を実行する、<xref:System.Windows.Forms.RichTextBox>内で現在のカーソル位置にあるコントロール、<xref:System.Windows.Forms.RichTextBox>です。 この例では、する必要があります、<xref:System.Windows.Forms.Control.DragDrop>と<xref:System.Windows.Forms.Control.DragEnter>の例で定義されたイベント ハンドラーに接続されたイベント。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexFromPoint">
      <MemberSignature Language="C#" Value="public int IndexFromPoint (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexFromPoint(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.IndexFromPoint(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexFromPoint (x As Integer, y As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexFromPoint(int x, int y);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">検索する位置の x 座標。</param>
        <param name="y">検索する位置の y 座標。</param>
        <summary>指定した座標にある項目の 0 から始まるインデックス番号を返します。</summary>
        <returns>指定した座標にある項目の 0 から始まるインデックス番号。一致する項目が見つからない場合は <see langword="ListBox.NoMatches" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、コントロール内の特定の場所にある項目を特定することができます。 このメソッドを使用するには、ユーザーを右クリックしたときに、一覧内でどの項目が選択されているを決定する、<xref:System.Windows.Forms.ListBox>です。 カーソルの位置を特定してに渡すことができます、`x`と`y`のパラメーター、<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>ユーザーが項目を決定するメソッド経由でマウスを右クリックします。 タスクと特定の項目に基づく機能を提供するユーザーに、ショートカット メニューを表示できます。  
  
   
  
## Examples  
 次のコード例を使用して、ドラッグ アンド ドロップ操作を実行する方法を示します、<xref:System.Windows.Forms.ListBox>コントロールにドロップする項目を含む、<xref:System.Windows.Forms.RichTextBox>コントロール。 フォームのセットのコンス トラクター、<xref:System.Windows.Forms.RichTextBox.AllowDrop%2A>プロパティを`true`をドラッグ アンド ドロップ操作を有効にする、<xref:System.Windows.Forms.RichTextBox>です。 この例では、<xref:System.Windows.Forms.Control.MouseDown>のイベント、<xref:System.Windows.Forms.ListBox>を呼び出すことによって、ドラッグ操作を開始する、<xref:System.Windows.Forms.Control.DoDragDrop%2A>メソッドです。 この例では、<xref:System.Windows.Forms.Control.DragEnter>に項目をドラッグしている場合を決定するイベント、<xref:System.Windows.Forms.RichTextBox>は有効なデータ型です。 <xref:System.Windows.Forms.Control.DragDrop>イベントにドラッグした項目の実際の削除を実行する、<xref:System.Windows.Forms.RichTextBox>内で現在のカーソル位置にあるコントロール、<xref:System.Windows.Forms.RichTextBox>です。 この例では、する必要があります、<xref:System.Windows.Forms.Control.DragDrop>と<xref:System.Windows.Forms.Control.DragEnter>の例で定義されたイベント ハンドラーに接続されたイベント。  
  
 [!code-cpp[RichTextBox.AllowDrop#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CPP/form1.cpp#1)]
 [!code-csharp[RichTextBox.AllowDrop#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RichTextBox.AllowDrop/CS/form1.cs#1)]
 [!code-vb[RichTextBox.AllowDrop#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RichTextBox.AllowDrop/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntegralHeight">
      <MemberSignature Language="C#" Value="public bool IntegralHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IntegralHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.IntegralHeight" />
      <MemberSignature Language="VB.NET" Value="Public Property IntegralHeight As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IntegralHeight { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>一部の項目しか表示されない状況を避けるために、コントロールのサイズを変更するかどうかを示す値を取得または設定します。</summary>
        <value>
          一部の項目しか表示されない状況を避けるためにコントロールのサイズを変更する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに設定するときに`true`コントロールに自動的にサイズを変更し、項目が部分的に表示されないことを確認してください。 元のサイズを維持する場合、<xref:System.Windows.Forms.ListBox>にこのプロパティを設定する、フォームの領域の要件に基づき、`false`です。  
  
 既定では、<xref:System.Windows.Forms.ListBox>と<xref:System.Windows.Forms.CheckedListBox>サイズは、全体の項目のみが表示されるようにします。 場合は、<xref:System.Windows.Forms.ListBox>または<xref:System.Windows.Forms.CheckedListBox>を完全にドッキングされている領域を埋める、次のように設定します。<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>に`false`です。 これにより、領域に完全にコントロールが、最後の項目は完全に表示されません。  
  
 場合、<xref:System.Windows.Forms.ListBox>項目が含まれていないこのプロパティは影響を与えません。  
  
> [!NOTE]
>  整数の高さがの高さに基づく、 <xref:System.Windows.Forms.ListBox>、クライアント領域の高さではなくです。 その結果、ときに、<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>プロパティが設定されて`true`項目をまだ部分的に表示するスクロール バーが表示されます。  
  
> [!NOTE]
>  場合、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティに設定されている`DrawMode.OwnerDrawVariable`、このプロパティは影響を与えません。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>と<xref:System.Windows.Forms.ListBox.HorizontalExtent%2A>内のすべての項目テキストを示す水平スクロール バーを表示するプロパティ、<xref:System.Windows.Forms.ListBox>コントロール。 また、例では、<xref:System.Windows.Forms.ListBox.IntegralHeight%2A>する項目はサイズが部分的には表示されないようにするプロパティ、<xref:System.Windows.Forms.ListBox>コントロール。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`フォームに追加されました。  
  
 [!code-cpp[ListView.HorizontalExtent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.HorizontalExtent/CPP/form1.cpp#1)]
 [!code-csharp[ListView.HorizontalExtent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.HorizontalExtent/CS/form1.cs#1)]
 [!code-vb[ListView.HorizontalExtent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.HorizontalExtent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
      </Docs>
    </Member>
    <Member MemberName="ItemHeight">
      <MemberSignature Language="C#" Value="public virtual int ItemHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ItemHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ItemHeight" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ItemHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ItemHeight { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(13)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の項目の高さを取得または設定します。</summary>
        <value>コントロール内の項目の高さ (ピクセル単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティに設定されている`DrawMode.OwnerDrawFixed`、すべてのアイテムを同じ高さがあります。 ときに、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティに設定されている`DrawMode.OwnerDrawVariable`、<xref:System.Windows.Forms.ListBox.ItemHeight%2A>プロパティに追加された各項目の高さを指定する、<xref:System.Windows.Forms.ListBox>です。 オーナー描画のリスト内の各項目が別の高さを持てないために、使用して、<xref:System.Windows.Forms.ListBox.GetItemHeight%2A>内の特定の項目の高さを取得するメソッド、<xref:System.Windows.Forms.ListBox>です。 使用する場合、<xref:System.Windows.Forms.ListBox.ItemHeight%2A>プロパティを<xref:System.Windows.Forms.ListBox>可変の高さの項目をこのプロパティは、コントロール内の最初の項目の高さを返します。  
  
 最大の高さ、<xref:System.Windows.Forms.ListBox>項目は、255 (ピクセル)。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <see cref="P:System.Windows.Forms.ListBox.ItemHeight" /> プロパティが 0 ピクセル未満または 255 ピクセルを超える値に設定されました。</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.GetItemHeight(System.Int32)" />
        <altmember cref="P:System.Windows.Forms.ListBox.DrawMode" />
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.ObjectCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/ObjectCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListBox.ObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::ObjectCollection ^ Items { System::Windows::Forms::ListBox::ObjectCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+ObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> の項目を取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> 内の項目を表す <see cref="T:System.Windows.Forms.ListBox" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティでは、この参照に格納されている項目の一覧を取得することができます、<xref:System.Windows.Forms.ListBox>です。 この参照に項目を追加、アイテムを削除して、コレクション内の項目の数を取得します。 項目のコレクションで実行できるタスクの詳細については、次を参照してください。、<xref:System.Windows.Forms.ListBox.ObjectCollection>クラスのリファレンス トピックです。  
  
 項目を操作することも、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListControl.DataSource%2A>プロパティです。 使用する場合、<xref:System.Windows.Forms.ListControl.DataSource%2A>に項目を追加するプロパティ、 <xref:System.Windows.Forms.ListBox>、内の項目を表示することができます、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.Items%2A>プロパティが追加または削除できないアイテムのメソッドを使用してリストから、<xref:System.Windows.Forms.ListBox.ObjectCollection>です。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Windows.Forms.ListBox>コントロールの列に複数の項目を表示し、コントロールの一覧で選択した 1 つ以上の項目を持つことができます。 例のコードに 50 個の項目の追加、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>を使用して、一覧から項目を 3 つのクラスと、選択、<xref:System.Windows.Forms.ListBox.SetSelected%2A>メソッドです。 コードからの値を表示、<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>コレクション (を通じて、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>プロパティ) および<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>(を通じて、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>プロパティ)。 この例は、コードにありから呼び出すことが必要です、<xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListBox.ObjectCollection" />
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>オーナー描画 <see cref="T:System.Windows.Forms.ListBox" /> が作成され、リスト項目のサイズが決定されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 項目になりますで描画する前にサイズを指定するには、このイベントのイベント ハンドラーを作成することができます、<xref:System.Windows.Forms.ListBox.DrawItem>イベント。 イベントは、のみいつ発生するか、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティに設定されている<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>です。  
  
 有効な最大の高さ、<xref:System.Windows.Forms.ListBox>項目は、255 (ピクセル)。 設定、<xref:System.Windows.Forms.MeasureItemEventArgs.ItemHeight%2A>のプロパティ、<xref:System.Windows.Forms.MeasureItemEventArgs>予期しない結果が生じるこのイベントを処理するときに 255 より大きい値にします。  
  
 イベント処理の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。  
  
   
  
## Examples  
 次のコード例では、オーナー描画を示しています<xref:System.Windows.Forms.ListBox>を設定して、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティを<xref:System.Windows.Forms.DrawMode.OwnerDrawVariable>処理し、<xref:System.Windows.Forms.ListBox.DrawItem>と<xref:System.Windows.Forms.ListBox.MeasureItem>イベント。 設定についても示します、<xref:System.Windows.Forms.ListBox.BorderStyle%2A>と<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>プロパティとを使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>メソッドです。  
  
 この例を実行するインポートの空のフォームに貼り付ける、<xref:System.Drawing>名前空間および<xref:System.Windows.Forms>名前空間。 呼び出す`InitializeOwnerDrawnListBox`フォームのコンス トラクターからまたは<xref:System.Windows.Forms.Form.Load>イベント処理メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.ItemHeight" />
      </Docs>
    </Member>
    <Member MemberName="MouseClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.MouseClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseClick;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがマウスで <see cref="T:System.Windows.Forms.ListBox" /> コントロールをクリックすると発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiColumn">
      <MemberSignature Language="C#" Value="public bool MultiColumn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiColumn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.MultiColumn" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiColumn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiColumn { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> が複数列をサポートするかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox" /> が複数列をサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数の列、<xref:System.Windows.Forms.ListBox>垂直方向のスクロールが不要に必要な列の数にアイテムを配置します。 ユーザーは、キーボードを使用して、現在表示されていない列に移動します。 設定、<xref:System.Windows.Forms.ListBox.HorizontalScrollbar%2A>プロパティを`true`をユーザーが現在の可視領域に表示されていない列にスクロールを有効にする水平スクロール バーを表示する、<xref:System.Windows.Forms.ListBox>です。 値、<xref:System.Windows.Forms.ListBox.ColumnWidth%2A>プロパティは、各列の幅を決定します。  
  
   
  
## Examples  
 次のコード例は、単純な 2 つの列を示します<xref:System.Windows.Forms.ListBox>です。  
  
 [!code-csharp[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBox.MultiColumn#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBox.MultiColumn/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">複数列の <see cref="T:System.Windows.Forms.ListBox" /> の高さは可変にできません。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
        <altmember cref="P:System.Windows.Forms.ListBox.ColumnWidth" />
      </Docs>
    </Member>
    <Member MemberName="NoMatches">
      <MemberSignature Language="C#" Value="public const int NoMatches = -1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 NoMatches = (-1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.ListBox.NoMatches" />
      <MemberSignature Language="VB.NET" Value="Public Const NoMatches As Integer  = -1" />
      <MemberSignature Language="C++ CLI" Value="public: int NoMatches = -1;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>-1</MemberValue>
      <Docs>
        <summary>検索中に一致する値が見つからなかったことを示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この定数は、によって返される、 <xref:System.Windows.Forms.ListBox.FindString%2A>、 <xref:System.Windows.Forms.ListBox.FindStringExact%2A>、および<xref:System.Windows.Forms.ListBox.IndexFromPoint%2A>メソッドの検索に一致する値が見つからない場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnChangeUICues">
      <MemberSignature Language="C#" Value="protected override void OnChangeUICues (System.Windows.Forms.UICuesEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnChangeUICues(class System.Windows.Forms.UICuesEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnChangeUICues(System.Windows.Forms.UICuesEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnChangeUICues (e As UICuesEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnChangeUICues(System::Windows::Forms::UICuesEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.UICuesEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.UICuesEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ChangeUICues" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDataSourceChanged">
      <MemberSignature Language="C#" Value="protected override void OnDataSourceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDataSourceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDataSourceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDataSourceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDataSourceChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.DataSourceChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDisplayMemberChanged">
      <MemberSignature Language="C#" Value="protected override void OnDisplayMemberChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnDisplayMemberChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDisplayMemberChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnDisplayMemberChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnDisplayMemberChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.DisplayMemberChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListBox.DrawItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。  
  
 <xref:System.Windows.Forms.ListBox.OnDrawItem%2A>メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 オーナー描画を作成する方法を次のコード例に示します<xref:System.Windows.Forms.ListBox>項目。 コードを使用して、<xref:System.Windows.Forms.ListBox.DrawMode%2A>描画された項目が固定されることを指定するプロパティのサイズと<xref:System.Windows.Forms.ListBox.DrawItem>に各項目の描画を実行するイベント、<xref:System.Windows.Forms.ListBox>です。 プロパティとメソッドのコード例を使用して、<xref:System.Windows.Forms.DrawItemEventArgs>クラスは、項目を描画するイベント ハンドラーにパラメーターとして渡されます。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>と呼ばれるコントロール`listBox1`ことと、フォームに追加された、<xref:System.Windows.Forms.ListBox.DrawItem>コード例で定義されているイベント ハンドラーでイベントが処理します。 また、例でに項目が追加されている必要があります、<xref:System.Windows.Forms.ListBox>をこの順序で"Apple"、「オレンジ」および「プラム」のテキストを含むです。  
  
 [!code-csharp[ListBox.DrawMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.DrawMode/CS/form1.cs#1)]
 [!code-vb[ListBox.DrawMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.DrawMode/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListBox.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.FontChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>ウィンドウ ハンドルが作成されたときにそのことを示して、列幅などの特性を設定できるようにします。 継承クラスでは、<see langword="base.OnHandleCreated" /> を呼び出す必要があります。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>項目が正しく設定および消去されるようオーバーライドされています。 継承コントロールでは、<see langword="base.OnHandleDestroyed" /> を呼び出す必要があります。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.MeasureItemEventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListBox.MeasureItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。  
  
 <xref:System.Windows.Forms.ListBox.OnMeasureItem%2A>メソッドでは、派生クラスでデリゲートを結び付けずに、イベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>派生クラスで <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListBox.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> メソッドを呼び出してください。</para>
        </block>
        <altmember cref="E:System.Windows.Forms.ListBox.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedValueChanged">
      <MemberSignature Language="C#" Value="protected override void OnSelectedValueChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSelectedValueChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.OnSelectedValueChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSelectedValueChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSelectedValueChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary>
          <see cref="E:System.Windows.Forms.ListControl.SelectedValueChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Padding" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListBox.Padding" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベント処理の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> コントロールが描画されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このイベントは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeight">
      <MemberSignature Language="C#" Value="public int PreferredHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 PreferredHeight" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.PreferredHeight" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PreferredHeight As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int PreferredHeight { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内のすべての項目を組み合わせた高さを取得します。</summary>
        <value>コントロール内のすべての項目を組み合わせた高さ (ピクセル単位)。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用する、高さを決定すること、<xref:System.Windows.Forms.ListBox>サイズを調整できないリスト内の利用可能なすべての項目を表示するために、垂直スクロール バーが表示されないようにする必要があります。 場合内の項目の金額、<xref:System.Windows.Forms.ListBox>のサイズが大きいの値を使用して、コントロールをサイズ変更、<xref:System.Windows.Forms.ListBox.PreferredHeight%2A>プロパティが発生する可能性があります、<xref:System.Windows.Forms.ListBox>フォームのクライアント領域の外部でサイズまたは<xref:System.Windows.Forms.ListBox>コンテナーです。  
  
   
  
## Examples  
 次のコード例は、設定する方法を示します、<xref:System.Windows.Forms.Control.Size%2A>のプロパティ、<xref:System.Windows.Forms.ListBox>の値に基づいて、<xref:System.Windows.Forms.ListBox.PreferredHeight%2A>プロパティのすべてのアイテムを表示するために、<xref:System.Windows.Forms.ListBox>スクロール バーを使用しません。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`フォームに追加されました。  
  
 [!code-cpp[ListBox.PreferredHeight#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.PreferredHeight/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.PreferredHeight#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.PreferredHeight/CS/form1.cs#1)]
 [!code-vb[ListBox.PreferredHeight#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.PreferredHeight/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Control.Height" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>強制的に、コントロールがクライアント領域を無効化し、直後にそのコントロール自体とその子コントロールを再描画するようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItem">
      <MemberSignature Language="C#" Value="protected override void RefreshItem (int index);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItem(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItem(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItem (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItem(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">更新する要素の、0 から始まるインデックス。</param>
        <summary>指定したインデックスにある項目を更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Windows.Forms.ListControl.DisplayMember%2A>プロパティ セットに割り当てられているデータ ソースのプロパティは、 <xref:System.Windows.Forms.ListControl.DisplayMember%2A> 、変更を使用して、<xref:System.Windows.Forms.ListBox.RefreshItem%2A>の値を更新する方法、<xref:System.Windows.Forms.ListBox>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshItems">
      <MemberSignature Language="C#" Value="protected override void RefreshItems ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RefreshItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RefreshItems" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RefreshItems ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RefreshItems();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> のすべての項目を更新し、それらの項目の新しい文字列を取得します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RescaleConstantsForDpi">
      <MemberSignature Language="C#" Value="protected override void RescaleConstantsForDpi (int deviceDpiOld, int deviceDpiNew);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void RescaleConstantsForDpi(int32 deviceDpiOld, int32 deviceDpiNew) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.RescaleConstantsForDpi(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub RescaleConstantsForDpi (deviceDpiOld As Integer, deviceDpiNew As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void RescaleConstantsForDpi(int deviceDpiOld, int deviceDpiNew);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deviceDpiOld" Type="System.Int32" />
        <Parameter Name="deviceDpiNew" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="deviceDpiOld">変更前の DPI 値。</param>
        <param name="deviceDpiNew">変更後の DPI 値。</param>
        <summary>DPI の変更が発生したときに、コントロールの再スケーリングの定数を提供します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetBackColor">
      <MemberSignature Language="C#" Value="public override void ResetBackColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetBackColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetBackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetBackColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetBackColor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.BackColor" /> プロパティを既定値にリセットします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetForeColor">
      <MemberSignature Language="C#" Value="public override void ResetForeColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResetForeColor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ResetForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResetForeColor ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResetForeColor();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.Control.ForeColor" /> プロパティを既定値にリセットします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがテキストを右から左に表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.RightToLeft" /> 値のいずれか 1 つ。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、右から左に記述されている言語をサポートするメニューを使用します。 このプロパティに設定するときに`true`項目のテキストが右から左から右のメソッドに既定ではなく左に表示されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleControl">
      <MemberSignature Language="C#" Value="protected override void ScaleControl (System.Drawing.SizeF factor, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ScaleControl(valuetype System.Drawing.SizeF factor, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ScaleControl(System.Drawing.SizeF,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub ScaleControl (factor As SizeF, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void ScaleControl(System::Drawing::SizeF factor, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.Drawing.SizeF" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="factor">コントロールの高さと幅のスケールを設定する際のファクター。</param>
        <param name="specified">コントロールのサイズと位置を定義するときに使用するコントロールの境界を指定する <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値。</param>
        <summary>コントロールの位置、サイズ、埋め込み、およびマージンのスケールを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAlwaysVisible">
      <MemberSignature Language="C#" Value="public bool ScrollAlwaysVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollAlwaysVisible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ScrollAlwaysVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollAlwaysVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScrollAlwaysVisible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>垂直スクロール バーを常に表示するかどうかを示す値を取得または設定します。</summary>
        <value>
          垂直スクロール バーを常に表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>プロパティが垂直スクロール バーが常に表示されるかどうかを示す場合でも内の項目数、<xref:System.Windows.Forms.ListBox>垂直スクロール バーを表示するには必要ありません。 既定では、<xref:System.Windows.Forms.ListBox>だけを表示することを保証するための十分な項目があるときに垂直スクロール バーが表示されます。 複数の列の<xref:System.Windows.Forms.ListBox>、<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>プロパティは、水平スクロール バーが表示されることを示します。 複数の列のこのプロパティの値に関係なく、垂直スクロール バーが表示されません<xref:System.Windows.Forms.ListBox>です。  
  
   
  
## Examples  
 次のコード例に示しますオーナー描画<xref:System.Windows.Forms.ListBox>を設定して、<xref:System.Windows.Forms.ListBox.DrawMode%2A>プロパティを`OwnerDrawVariable`値と処理、<xref:System.Windows.Forms.ListBox.DrawItem>と<xref:System.Windows.Forms.ListBox.MeasureItem>イベント。 設定についても示します、<xref:System.Windows.Forms.ListBox.BorderStyle%2A>と<xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A>プロパティとを使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A>メソッドです。  
  
 この例を実行するインポートの空のフォームに貼り付ける、<xref:System.Drawing>名前空間および<xref:System.Windows.Forms>名前空間。 呼び出す`InitializeOwnerDrawnListBox`フォームのコンス トラクターからまたは<xref:System.Windows.Forms.Form.Load>イベント処理メソッドです。  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.HorizontalScrollbar" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndex">
      <MemberSignature Language="C#" Value="public override int SelectedIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SelectedIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndex" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int SelectedIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で現在選択されている項目の 0 から始まるインデックス番号を取得または設定します。</summary>
        <value>現在選択されている項目の 0 から始まるインデックス番号。 項目が選択されていない場合は、値 -1 が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標準の<xref:System.Windows.Forms.ListBox>で選択されている項目のインデックスを特定するこのプロパティを使用することができます、<xref:System.Windows.Forms.ListBox>です。 場合、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>のプロパティ、<xref:System.Windows.Forms.ListBox>に設定されている`SelectionMode.MultiSimple`または`SelectionMode.MultiExtended`(複数選択を示す<xref:System.Windows.Forms.ListBox>) 一覧で複数の項目が選択されていると、このプロパティは、選択したアイテムにインデックスを返すことができます。  
  
 選択した項目を複数選択内のすべてのインデックスを含むコレクションを取得する<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>プロパティです。 現在選択されている項目を取得する場合、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.SelectedItem%2A>プロパティです。 さらに、使用することができます、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>複数選択で選択されたすべての項目を取得するプロパティ<xref:System.Windows.Forms.ListBox>です。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>を持つプロパティ、<xref:System.Windows.Forms.ListBox.TopIndex%2A>プロパティの表示領域内の項目の一覧の一番上に、現在選択されている項目を移動する、<xref:System.Windows.Forms.ListBox>です。 さらに例を使用して項目を削除する方法を示します、<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>クラス、およびすべての選択を使用して項目をクリアする方法、<xref:System.Windows.Forms.ListBox.ClearSelected%2A>メソッドです。 コードは最初、現在選択されている項目を移動、<xref:System.Windows.Forms.ListBox>一覧の先頭にします。 コードは、現在選択されている項目の前にすべての項目を削除し、すべての選択項目をクリア、<xref:System.Windows.Forms.ListBox>です。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>項目を含むが、フォームに追加されで選択した項目が現在は、<xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">代入された値が -1 未満か、項目数以上です。</exception>
        <exception cref="T:System.ArgumentException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> プロパティが <see langword="None" /> に設定されている。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListBox.SelectedIndex" /> プロパティまたは <see cref="P:System.Windows.Forms.ListBox.SelectedIndices" /> コレクションが変更されたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイミングを決定するには、このイベントのイベント ハンドラーを作成することで選択されたインデックス、<xref:System.Windows.Forms.ListBox>が変更されました。 これを利用する他のコントロールの現在の選択に基づいて情報を表示する必要がある場合、<xref:System.Windows.Forms.ListBox>です。 このイベントのイベント ハンドラーを使用して、他のコントロールでの情報を読み込むことができます。  
  
 場合、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>プロパティに設定されている<xref:System.Windows.Forms.SelectionMode.MultiSimple?displayProperty=nameWithType>または<xref:System.Windows.Forms.SelectionMode.MultiExtended?displayProperty=nameWithType>に変更を加えた、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>コレクションの選択項目から項目を削除するには、このイベントが発生します。  
  
 イベント処理の詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)です。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>イベントを検索し、別の項目を選択<xref:System.Windows.Forms.ListBox>コントロール。 この例では、<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>タイミングを決定するイベント内の選択項目、<xref:System.Windows.Forms.ListBox>が変更されました。 コード例は、次の項目を使用して、テキストを読み取り、<xref:System.Windows.Forms.ListBox.SelectedItem%2A>プロパティや呼び出し、<xref:System.Windows.Forms.ListBox.FindString%2A>別メソッド<xref:System.Windows.Forms.ListBox>によって返されるテキストを使用して<xref:System.Windows.Forms.ListBox.SelectedItem%2A>、最初の<xref:System.Windows.Forms.ListBox>します。 他の項目が見つかった場合<xref:System.Windows.Forms.ListBox>項目が選択されています。 この例には、その 2 つが必要があります<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`と`listBox2`、ことと、フォームに追加されている両方<xref:System.Windows.Forms.ListBox>コントロールのと同じでは項目を含めます。 例では、例で定義されたイベント処理メソッドに接続されている必要があります、<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>のイベント`listBox1`です。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListBox.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListBox::SelectedIndexCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で現在選択されているすべての項目の 0 から始まるインデックス番号を格納するコレクションを取得します。</summary>
        <value>コントロール内で現在選択されている項目のインデックスを格納している <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />。 項目が現在選択されていない場合は、空の <see cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数選択の<xref:System.Windows.Forms.ListBox>、このプロパティで選択されているすべての項目のインデックスを含むコレクションを返します、<xref:System.Windows.Forms.ListBox>です。 単一選択の<xref:System.Windows.Forms.ListBox>、このプロパティの唯一の選択した項目のインデックスを含む 1 つの要素を含むコレクションを返します、<xref:System.Windows.Forms.ListBox>です。 コレクションの項目を操作する方法の詳細については、次を参照してください。<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>です。  
  
 <xref:System.Windows.Forms.ListBox>クラスには、選択した項目を参照する方法の数が用意されています。 使用する代わりに、 <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> 、単一選択で現在選択されている項目のインデックス位置を取得するプロパティ<xref:System.Windows.Forms.ListBox>、使用することができます、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>プロパティです。 現在選択されている項目を取得する場合、 <xref:System.Windows.Forms.ListBox>、項目のインデックス位置ではなくを使用して、<xref:System.Windows.Forms.ListBox.SelectedItem%2A>プロパティです。 さらに、使用することができます、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>複数選択で選択されたすべての項目を取得する場合は、プロパティ<xref:System.Windows.Forms.ListBox>です。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.FindString%2A>の項目の検索文字列のすべてのインスタンスを検索する方法、<xref:System.Windows.Forms.ListBox>です。 例では、バージョンを使用して、<xref:System.Windows.Forms.ListBox.FindString%2A>メソッド内のすべての項目の継続的な検索を実行する開始検索インデックスを指定することができます、<xref:System.Windows.Forms.ListBox>です。 タイミングを決定する方法も示します、<xref:System.Windows.Forms.ListBox.FindString%2A>メソッドは、再帰的な検索を回避する項目の一覧の下部に達した後に、一覧の先頭から検索を開始します。 項目が見つかると、<xref:System.Windows.Forms.ListBox>は、選択したを使用して、<xref:System.Windows.Forms.ListBox.SetSelected%2A>メソッドです。  
  
 [!code-cpp[ListBox.FindString#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.FindString/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.FindString#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.FindString/CS/form1.cs#1)]
 [!code-vb[ListBox.FindString#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.FindString/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItem" />
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItem">
      <MemberSignature Language="C#" Value="public object SelectedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SelectedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectedItem As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SelectedItem { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で現在選択されている項目を取得または設定します。</summary>
        <value>コントロール内で現在選択されている項目を表すオブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 標準の<xref:System.Windows.Forms.ListBox>で選択されている項目を決定する、このプロパティを使用することができます、<xref:System.Windows.Forms.ListBox>です。 場合、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>のプロパティ、<xref:System.Windows.Forms.ListBox>に設定されている`SelectionMode.MultiSimple`または`SelectionMode.MultiExtended`(複数選択を示す<xref:System.Windows.Forms.ListBox>) 一覧で複数の項目が選択されていると、このプロパティは、選択した項目を返すことができます。  
  
 複数選択で選択されているすべての項目を含むコレクションを取得する<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>プロパティです。 現在選択されている項目のインデックス位置を取得するかどうか、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>プロパティです。 さらに、使用することができます、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>複数選択の選択したすべてのインデックスを取得するプロパティ<xref:System.Windows.Forms.ListBox>です。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>イベントを検索し、別の項目を選択<xref:System.Windows.Forms.ListBox>コントロール。 この例では、<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>タイミングを決定するイベント内の選択項目、<xref:System.Windows.Forms.ListBox>が変更されました。 コード例は、次の項目を使用して、テキストを読み取り、<xref:System.Windows.Forms.ListBox.SelectedItem%2A>プロパティや呼び出し、<xref:System.Windows.Forms.ListBox.FindString%2A>別メソッド<xref:System.Windows.Forms.ListBox>によって返されるテキストを使用して<xref:System.Windows.Forms.ListBox.SelectedItem%2A>、最初の<xref:System.Windows.Forms.ListBox>します。 他の項目が見つかった場合<xref:System.Windows.Forms.ListBox>項目が選択されています。 この例には、その 2 つが必要があります<xref:System.Windows.Forms.ListBox>という名前のコントロール`listBox1`と`listBox2`、ことと、フォームに追加されている両方<xref:System.Windows.Forms.ListBox>コントロールのと同じでは項目を含めます。 例では、例で定義されたイベント処理メソッドに接続されている必要があります、<xref:System.Windows.Forms.ListBox.SelectedIndexChanged>のイベント`listBox1`です。  
  
 [!code-cpp[ListBox.SelectedIndexChanged#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndexChanged#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndexChanged#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndexChanged/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListBox.SelectedObjectCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListBox/SelectedObjectCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListBox.SelectedObjectCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListBox::SelectedObjectCollection ^ SelectedItems { System::Windows::Forms::ListBox::SelectedObjectCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListBox+SelectedObjectCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で現在選択されている項目を格納するコレクションを取得します。</summary>
        <value>コントロール内で現在選択されている項目を格納している <see cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数選択の<xref:System.Windows.Forms.ListBox>、このプロパティで選択されているすべての項目を含むコレクションを返します、<xref:System.Windows.Forms.ListBox>です。 単一選択の<xref:System.Windows.Forms.ListBox>、このプロパティの唯一の選択した項目を含む 1 つの要素を含むコレクションを返します、<xref:System.Windows.Forms.ListBox>です。 コレクションの項目を操作する方法の詳細については、次を参照してください。<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>です。  
  
 <xref:System.Windows.Forms.ListBox>クラスには、選択した項目を参照する方法の数が用意されています。 使用する代わりに、 <xref:System.Windows.Forms.ListBox.SelectedItems%2A> 、単一選択で現在選択されている項目を取得するプロパティ<xref:System.Windows.Forms.ListBox>、使用することができます、<xref:System.Windows.Forms.ListBox.SelectedItem%2A>プロパティです。 現在選択されている項目のインデックス位置を取得する場合、 <xref:System.Windows.Forms.ListBox>、項目自体ではなくを使用して、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>プロパティです。 さらに、使用することができます、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>複数選択で選択されているすべての項目のインデックス位置を取得する場合は、プロパティ<xref:System.Windows.Forms.ListBox>です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionMode">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.SelectionMode SelectionMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SelectionMode SelectionMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.SelectionMode" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SelectionMode As SelectionMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::SelectionMode SelectionMode { System::Windows::Forms::SelectionMode get(); void set(System::Windows::Forms::SelectionMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SelectionMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> で項目を選択する方法を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.SelectionMode" /> 値のいずれか 1 つ。 既定値は、<see langword="SelectionMode.One" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.SelectionMode%2A>プロパティでは、項目の数を決定することができます、<xref:System.Windows.Forms.ListBox>ユーザーが同時に選択できるし、ユーザーが複数選択を許可する方法です。 ときに、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>プロパティに設定されている`SelectionMode.MultiExtended`、shift キーを押し、マウスのクリックしてやキーを押してシフトし、方向キー (上向きの矢印、下向きの矢印、左矢印および右矢印) のいずれか、選択範囲を以前に選択した項目から現在のアイテムにします。 CTRL キーを押し、マウスをクリックして、選択または、リスト内の項目の選択を解除します。 プロパティを設定すると`SelectionMode.MultiSimple`マウスのクリックして、または space キーを押して選択または、リスト内の項目を選択解除します。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.GetSelected%2A>でアイテムを決定する方法、<xref:System.Windows.Forms.ListBox>が選択されていないアイテムを選択し、選択されている項目の選択を解除するために選択します。 例を使用して、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>プロパティを有効にする、<xref:System.Windows.Forms.ListBox>が複数あるを使用して項目を選択、<xref:System.Windows.Forms.ListBox.Sorted%2A>の項目を並べ替える方法を説明するプロパティ、<xref:System.Windows.Forms.ListBox>自動的にします。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox>、名前付き`listBox1`、フォームに追加されましたが、`InitializeMyListBox`からこの例で定義されたメソッドが呼び出されます、<xref:System.Windows.Forms.Form.Load>フォームのイベントです。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">代入された値が、<see cref="T:System.Windows.Forms.SelectionMode" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.SelectionMode" />
      </Docs>
    </Member>
    <Member MemberName="SetBoundsCore">
      <MemberSignature Language="C#" Value="protected override void SetBoundsCore (int x, int y, int width, int height, System.Windows.Forms.BoundsSpecified specified);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetBoundsCore(int32 x, int32 y, int32 width, int32 height, valuetype System.Windows.Forms.BoundsSpecified specified) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetBoundsCore (x As Integer, y As Integer, width As Integer, height As Integer, specified As BoundsSpecified)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetBoundsCore(int x, int y, int width, int height, System::Windows::Forms::BoundsSpecified specified);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="specified" Type="System.Windows.Forms.BoundsSpecified" />
      </Parameters>
      <Docs>
        <param name="x">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Left" /> プロパティ値。</param>
        <param name="y">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Top" /> プロパティ値。</param>
        <param name="width">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Width" /> プロパティ値。</param>
        <param name="height">コントロールの新しい <see cref="P:System.Windows.Forms.Control.Height" /> プロパティ値。</param>
        <param name="specified">
          <see cref="T:System.Windows.Forms.BoundsSpecified" /> 値のビットごとの組み合わせ。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> コントロールの指定した境界を設定します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 高さ、<xref:System.Windows.Forms.ListBox>コントロールが増加し、複数の減少、<xref:System.Windows.Forms.ListBox.ItemHeight%2A>プロパティです。 高さが数値の倍数ではないを<xref:System.Windows.Forms.ListBox.ItemHeight%2A>の高さ、<xref:System.Windows.Forms.ListBox>複数である高さより小さい最大によって変更されます。  
  
 通常、その現在の値を使用して、指定されたパラメーターに含まれていない境界に対応するパラメーターが渡されます。 たとえば、 `height`、 `width`、または`x`または`y`のプロパティ、<xref:System.Windows.Forms.Control.Location%2A>プロパティは、コントロールの現在のインスタンスへの参照で渡すことができます。 ただしで渡されるすべての値が受け入れられ、コントロールに適用します。  
  
 `specified`パラメーターは、コントロールの要素を表す<xref:System.Windows.Forms.Control.Bounds%2A>アプリケーションによって変更します。 たとえば、変更する場合、 <xref:System.Windows.Forms.Control.Size%2A> 、コントロールの`specified`パラメーター値が<xref:System.Windows.Forms.BoundsSpecified.Size>です。 ただし場合、<xref:System.Windows.Forms.Control.Size%2A>への応答の調整、<xref:System.Windows.Forms.Control.Dock%2A>プロパティが設定されている、`specified`パラメーター値が<xref:System.Windows.Forms.BoundsSpecified.None>です。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>オーバーライドする場合<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />派生クラスでは、基本クラスの呼び出しを必ず<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />を変更するコントロールの境界を強制する方法です。 派生クラスがサイズ制限を追加、<see cref="M:System.Windows.Forms.ListBox.SetBoundsCore(System.Int32,System.Int32,System.Int32,System.Int32,System.Windows.Forms.BoundsSpecified)" />メソッドです。</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="SetItemCore">
      <MemberSignature Language="C#" Value="protected override void SetItemCore (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemCore(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemCore(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemCore (index As Integer, value As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemCore(int index, System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">オブジェクトの配列インデックス。</param>
        <param name="value">オブジェクト。</param>
        <summary>派生クラスで、指定したインデックスを使用してオブジェクトを設定します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemsCore">
      <MemberSignature Language="C#" Value="protected override void SetItemsCore (System.Collections.IList value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void SetItemsCore(class System.Collections.IList value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetItemsCore(System.Collections.IList)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub SetItemsCore (value As IList)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void SetItemsCore(System::Collections::IList ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Collections.IList" />
      </Parameters>
      <Docs>
        <param name="value">コントロールに挿入するオブジェクトの配列。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> の内容を消去し、指定した項目をコントロールに追加します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSelected">
      <MemberSignature Language="C#" Value="public void SetSelected (int index, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSelected(int32 index, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.SetSelected(System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSelected (index As Integer, value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSelected(int index, bool value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="index">
          <see cref="T:System.Windows.Forms.ListBox" /> 内で選択または選択解除する項目の 0 から始まるインデックス番号。</param>
        <param name="value">
          指定された項目を選択する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の指定された項目を選択または選択解除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用するには、複数選択項目の選択を設定する<xref:System.Windows.Forms.ListBox>です。 単一選択項目を選択する<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>プロパティです。  
  
   
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Windows.Forms.ListBox>コントロールの列に複数の項目を表示し、コントロールの一覧で選択した 1 つ以上の項目を持つことができます。 例のコードに 50 個の項目の追加、<xref:System.Windows.Forms.ListBox>を使用して、<xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection>を使用して、一覧から項目を 3 つのクラスと、選択、<xref:System.Windows.Forms.ListBox.SetSelected%2A>メソッドです。 コードからの値を表示、<xref:System.Windows.Forms.ListBox.SelectedObjectCollection>コレクション (を通じて、<xref:System.Windows.Forms.ListBox.SelectedItems%2A>プロパティ) および<xref:System.Windows.Forms.ListBox.SelectedIndexCollection>(を通じて、<xref:System.Windows.Forms.ListBox.SelectedIndices%2A>プロパティ)。 この例は、コードにありから呼び出すことが必要です、<xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">指定したインデックスが有効値の範囲にありません。</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="P:System.Windows.Forms.ListBox.SelectionMode" /> プロパティが <see langword="None" /> に設定されました。</exception>
        <altmember cref="P:System.Windows.Forms.ListBox.SelectedIndex" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="protected virtual void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.Sort" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Sort();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の項目を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.Sort%2A> 場合、それ自体への各項目を追加するコレクションを強制的、<xref:System.Windows.Forms.ListBox.Sorted%2A>プロパティは`true`します。 各項目は、正しい位置に挿入されます。  
  
   
  
## Examples  
 次のコード例では、使用方法を示します、<xref:System.Windows.Forms.ListBox.Sort%2A>メソッドです。 継承することを示します、<xref:System.Windows.Forms.ListBox>クラスとオーバーライド、<xref:System.Windows.Forms.ListBox.Sort%2A>ユーザー定義の並べ替えを実行する派生クラスのメソッドです。 実行には、この例は、空のフォームで、次のコードを貼り付けます。  
  
 [!code-cpp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxSort#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxSort/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>このメソッドは、独自の並べ替えルーチンを提供する派生クラスでオーバーライドできます。 オーバーライドの結果にアクセスして<see cref="M:System.Windows.Forms.ListBox.Sort" />を設定することによって、<see cref="P:System.Windows.Forms.ListBox.Sorted" />プロパティを<see langword="true" />です。 項目を追加するときに、 <see cref="T:System.Windows.Forms.ListBox" />、最初の項目を並べ替えるし、新しい項目を追加する方が効率的です。</para>
        </block>
        <altmember cref="P:System.Windows.Forms.ListBox.Sorted" />
      </Docs>
    </Member>
    <Member MemberName="Sorted">
      <MemberSignature Language="C#" Value="public bool Sorted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Sorted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Sorted" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Sorted { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内の項目をアルファベット順に並べ替えるかどうかを示す値を取得または設定します。</summary>
        <value>
          コントロール内の項目を並べ替える場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Forms.ListBox.Sorted%2A>を自動的に並べ替えるプロパティがアルファベット順で文字列、<xref:System.Windows.Forms.ListBox>です。 項目が追加されると、並べ替えに<xref:System.Windows.Forms.ListBox>項目が並べ替えられたリスト内の適切な場所に移動されます。 項目を追加するときに、 <xref:System.Windows.Forms.ListBox>、最初の項目を並べ替えるし、新しい項目を追加する方が効率的です。  
  
 A<xref:System.Windows.Forms.ListBox>でその<xref:System.Windows.Forms.ListBox.Sorted%2A>'éý'`true`を使用してデータにバインドされていません、<xref:System.Windows.Forms.ListControl.DataSource%2A>プロパティです。 バインドされたデータを並べ替えられて表示を<xref:System.Windows.Forms.ListBox>、並べ替えをサポートするデータ ソースにバインドし、並べ替えを提供するデータ ソースを保持する必要があります。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.GetSelected%2A>でアイテムを決定する方法、<xref:System.Windows.Forms.ListBox>が選択されていないアイテムを選択し、選択されている項目の選択を解除するために選択します。 例を使用して、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>プロパティを有効にする、<xref:System.Windows.Forms.ListBox>が複数あるを使用して項目を選択、<xref:System.Windows.Forms.ListBox.Sorted%2A>の項目を並べ替える方法を説明するプロパティ、<xref:System.Windows.Forms.ListBox>自動的にします。 この例では、する必要があります、 <xref:System.Windows.Forms.ListBox>、名前付き`listBox1`、フォームに追加されましたが、`InitializeMyListBox`からこの例で定義されたメソッドが呼び出されます、<xref:System.Windows.Forms.Form.Load>フォームのイベントです。  
  
 [!code-cpp[ListBox.GetSelected#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.GetSelected/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.GetSelected#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.GetSelected/CS/form1.cs#1)]
 [!code-vb[ListBox.GetSelected#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.GetSelected/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 内で現在選択されている項目のテキストを取得または検索します。</summary>
        <value>コントロール内で現在選択されている項目のテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの値が、文字列値に設定されている場合、<xref:System.Windows.Forms.ListBox>内で項目を検索、<xref:System.Windows.Forms.ListBox>を指定したテキストと一致する、項目を選択します。 現在選択されている項目を決定する、このプロパティを使用することも、<xref:System.Windows.Forms.ListBox>です。 場合、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>のプロパティ、<xref:System.Windows.Forms.ListBox>に設定されている`SelectionMode.MultiExtended`、このプロパティは、最初に選択した項目のテキストを返します。 場合、<xref:System.Windows.Forms.ListBox.SelectionMode%2A>のプロパティ、<xref:System.Windows.Forms.ListBox>に設定されていない`SelectionMode.None`、このプロパティは、最初に選択した項目のテキストを返します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListBox.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="P:System.Windows.Forms.ListBox.Text" /> プロパティが変更されると発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopIndex">
      <MemberSignature Language="C#" Value="public int TopIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TopIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.TopIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property TopIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int TopIndex { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> に最初に表示される項目のインデックスを取得または設定します。</summary>
        <value>コントロールに最初に表示される項目の 0 から始まるインデックス番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 最初に、項目のインデックス位置にゼロ (0) がの可視領域の上部にある、<xref:System.Windows.Forms.ListBox>です。 場合の内容、<xref:System.Windows.Forms.ListBox>がスクロールされた、コントロールの表示領域の上部にある別のアイテムがあります。 内のインデックスを取得するこのプロパティを使用することができます、<xref:System.Windows.Forms.ListBox.ObjectCollection>の<xref:System.Windows.Forms.ListBox>がコントロールの表示領域の上部にある現在配置されている項目の。 このプロパティは、コントロールの表示領域の上部にある一覧でアイテムを配置にも使用できます。  
  
   
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Windows.Forms.ListBox.SelectedIndex%2A>を持つプロパティ、<xref:System.Windows.Forms.ListBox.TopIndex%2A>プロパティの表示領域内の項目の一覧の一番上に、現在選択されている項目を移動する、<xref:System.Windows.Forms.ListBox>です。 さらに例を使用して項目を削除する方法を示します、<xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A>のメソッド、<xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType>クラス、およびすべての選択を使用して項目をクリアする方法、<xref:System.Windows.Forms.ListBox.ClearSelected%2A>メソッドです。 コードは最初、現在選択されている項目を移動、<xref:System.Windows.Forms.ListBox>一覧の先頭にします。 コードは、現在選択されている項目の前にすべての項目を削除し、すべての選択項目をクリア、<xref:System.Windows.Forms.ListBox>です。 この例では、する必要があります、<xref:System.Windows.Forms.ListBox>項目を含むが、フォームに追加されで選択した項目が現在は、<xref:System.Windows.Forms.ListBox>です。  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> の文字列形式を返します。</summary>
        <returns>文字数が 0 でない場合は、コントロールの型、<see cref="T:System.Windows.Forms.ListBox" /> コントロール内の項目数、および <see cref="T:System.Windows.Forms.ListBox" /> 内の最初の項目の Text プロパティを記述した文字列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCustomTabOffsets">
      <MemberSignature Language="C#" Value="public bool UseCustomTabOffsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCustomTabOffsets" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseCustomTabOffsets" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCustomTabOffsets As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCustomTabOffsets { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> 整数配列を使用して <see cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" /> が文字列を描画するときに、タブ文字を認識および展開するかどうかを示す値を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.ListBox" /> がタブ文字を認識および展開する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.ListBox.CustomTabOffsets" />
      </Docs>
    </Member>
    <Member MemberName="UseTabStops">
      <MemberSignature Language="C#" Value="public bool UseTabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseTabStops" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.UseTabStops" />
      <MemberSignature Language="VB.NET" Value="Public Property UseTabStops As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseTabStops { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.ListBox" /> で文字列を描画するときにタブ文字を認識して展開するかどうかを示す値を取得または設定します。</summary>
        <value>
          コントロールでタブ文字を展開できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例を作成する方法を示しています、<xref:System.Windows.Forms.ListBox>タブ文字を持つ項目を表示します。  
  
 [!code-cpp[ListBox.UseTabStops#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.UseTabStops/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.UseTabStops#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.UseTabStops/CS/form1.cs#1)]
 [!code-vb[ListBox.UseTabStops#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.UseTabStops/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを操作します。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="WmReflectCommand">
      <MemberSignature Language="C#" Value="protected virtual void WmReflectCommand (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WmReflectCommand(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WmReflectCommand(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WmReflectCommand (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WmReflectCommand(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">トップレベル ウィンドウが <see cref="T:System.Windows.Forms.Message" /> コントロールに送信した <see cref="T:System.Windows.Forms.ListBox" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.ListView" /> コントロールがトップレベル ウィンドウから受け取るコマンド メッセージを処理します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Windows メッセージ オブジェクト。</param>
        <summary>リストのウィンドウ プロシージャ。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスを継承する追加の機能を追加するときに上書きできますが、呼び出す必要があります、<xref:System.Windows.Forms.ListBox.WndProc%2A>の一覧を続行する適切に機能することを確認する基本クラスのメソッドです。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを操作します。 関連する列挙。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>