<Type Name="MenuItem" FullName="System.Windows.Forms.MenuItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="49db1c290139f2cb55f34bbacd2850364305d2f0" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70441348" /></Metadata><TypeSignature Language="C#" Value="public class MenuItem : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuItem extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MenuItem" />
  <TypeSignature Language="VB.NET" Value="Public Class MenuItem&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuItem : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type MenuItem = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><see cref="T:System.Windows.Forms.MainMenu" /> または <see cref="T:System.Windows.Forms.ContextMenu" /> 内に表示される個別の項目を表します。 <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> コントロールは、以前のバージョンの <see cref="T:System.Windows.Forms.MenuItem" /> コントロールに代わると共に追加の機能を提供します。ただし、<see cref="T:System.Windows.Forms.MenuItem" /> コントロールは、下位互換性を保つ目的および将来使用する目的で保持されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 を表示するに<xref:System.Windows.Forms.MainMenu>は、をまたは<xref:System.Windows.Forms.ContextMenu>に追加する必要があります。 <xref:System.Windows.Forms.MenuItem> サブメニューを作成するには<xref:System.Windows.Forms.MenuItem> 、親<xref:System.Windows.Forms.MenuItem>の<xref:System.Windows.Forms.Menu.MenuItems%2A>プロパティにオブジェクトを追加します。  
  
 クラス<xref:System.Windows.Forms.MenuItem>には、メニュー項目の外観と機能を構成できるようにするプロパティが用意されています。 メニュー項目の横にチェックマークを表示するには、 <xref:System.Windows.Forms.MenuItem.Checked%2A>プロパティを使用します。 この機能を使用すると、相互に排他的なメニュー項目の一覧で選択されているメニュー項目を識別できます。 たとえば、 <xref:System.Windows.Forms.TextBox>コントロールのテキストの色を設定するための一連のメニュー項目がある場合は、 <xref:System.Windows.Forms.MenuItem.Checked%2A>プロパティを使用して、現在選択されている色を識別できます。 <xref:System.Windows.Forms.MenuItem.Shortcut%2A>プロパティを使用して、メニュー項目を選択するために押すことができるキーボードの組み合わせを定義できます。  
  
 マルチ<xref:System.Windows.Forms.MenuItem>ドキュメントインターフェイス (mdi) アプリケーションに表示されるオブジェクトの場合は、 <xref:System.Windows.Forms.MenuItem.MergeMenu%2A>メソッドを使用して、の MDI 親のメニューを子フォームと結合して、統合メニュー構造を作成できます。 <xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem.CloneMenu%2A>となど <xref:System.Windows.Forms.ContextMenu> では、を同時に複数の場所で再利用することはできないため、メソッドを使用して、別の場所で使用するのコピーを作成できます。 <xref:System.Windows.Forms.MainMenu>  
  
 <xref:System.Windows.Forms.MenuItem.Popup>イベントを使用すると、メニューが表示される前にタスクを実行できます。 たとえば、このイベントのイベントハンドラーを作成して、コードの状態に基づいてメニュー項目を表示または非表示にすることができます。 この<xref:System.Windows.Forms.MenuItem.Select>イベントを使用すると、ユーザーがメニュー項目の上にマウスポインターを置いたときに、アプリケーションのメニュー項目の詳細なヘルプを提供するなどのタスクを実行できます。  
  
   
  
## Examples  
 次のコード例では、フォームのメニュー構造を作成します。 このコード例では<xref:System.Windows.Forms.MenuItem> 、トップレベルのメニュー項目を表すを追加し、フォントサイズを選択するためにサブメニュー項目を追加して、アプリケーションで大きいフォントと小さいフォントの選択肢を表すメニュー項目に2つのサブメニュー項目を追加します。 この例では、という<xref:System.Windows.Forms.MainMenu>名前`mainMenu1`のオブジェクトと<xref:System.Windows.Forms.MenuItem> 、 `menuItem2`、 `menuItem1`、 `menuItem3`、およびと`menuItem4`いう名前の4つのオブジェクトが必要です。  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuMerge" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>空白のキャプションを使用して、<see cref="T:System.Windows.Forms.MenuItem" /> を初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このコンストラクターを使用して<xref:System.Windows.Forms.MenuItem>空のを作成した後は、 <xref:System.Windows.Forms.MenuItem>クラスのプロパティとメソッドを使用して、 <xref:System.Windows.Forms.MenuItem>の外観と動作を指定できます。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem> 、このバージョンのコンストラクターを使用してを作成します。  
  
 [!code-cpp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem text" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプション。</param>
        <summary>メニュー項目のキャプションを指定して、<see cref="T:System.Windows.Forms.MenuItem" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `text`パラメーターを使用してメニュー項目のキャプションを指定する場合、アクセスキーとして使用する文字の前に ' & ' 文字を配置することで、アクセスキーを指定することもできます。 たとえば、"File" の "F" をアクセスキーとして指定するには、メニュー項目のキャプションを "& ファイル" として指定します。 この機能を使用して、メニューにキーボードナビゲーションを提供できます。  
  
 パラメーターを "`-`" に設定すると、メニュー項目は標準のメニュー項目ではなく、区切り記号 (水平線) として表示されます。 `text`  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem> 、構築時にメニュー項目のキャプションを指定するを作成します。  
  
 [!code-cpp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, onClick As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * EventHandler -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, onClick)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプション。</param>
        <param name="onClick">このメニュー項目の <see cref="T:System.EventHandler" /> イベントを処理する <see cref="E:System.Windows.Forms.MenuItem.Click" />。</param>
        <summary>メニュー項目のキャプション、<see cref="E:System.Windows.Forms.MenuItem.Click" /> イベントを処理するイベント ハンドラーを指定して、クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `text`パラメーターを使用してメニュー項目のキャプションを指定する場合、アクセスキーとして使用する文字の前に ' & ' を配置することで、アクセスキーを指定することもできます。 たとえば、"File" の "F" をアクセスキーとして指定するには、メニュー項目のキャプションを "& ファイル" として指定します。 この機能を使用して、メニューにキーボードナビゲーションを提供できます。  
  
 パラメーターを "`-`" に設定すると、メニュー項目は標準のメニュー項目ではなく、区切り記号 (水平線) として表示されます。 `text`  
  
 また、このコンストラクターを使用して、作成されるメニュー項目の<xref:System.Windows.Forms.MenuItem.Click>イベントを処理するデリゲートを指定することもできます。 この<xref:System.EventHandler>コンストラクターに渡すは、 <xref:System.Windows.Forms.MenuItem.Click>イベントを処理できるイベントハンドラーを呼び出すように構成されている必要があります。 イベントの処理の詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem> 、指定されたキャプション<xref:System.EventHandler>と、メニュー項目の<xref:System.Windows.Forms.MenuItem.Click>イベントを処理するイベントハンドラーに接続されたデリゲートを使用して、オブジェクトを作成します。  
  
 [!code-cpp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, items)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプション。</param>
        <param name="items">このメニュー項目のサブメニュー項目が格納されている <see cref="T:System.Windows.Forms.MenuItem" /> オブジェクトの配列。</param>
        <summary>メニュー項目のキャプション、メニュー項目に対して定義されているサブメニュー項目の配列を指定して、クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `text`パラメーターを使用してメニュー項目のキャプションを指定する場合、アクセスキーとして使用する文字の前に ' & ' を配置することで、アクセスキーを指定することもできます。 たとえば、"File" の "F" をアクセスキーとして指定するには、メニュー項目のキャプションを "& ファイル" として指定します。 この機能を使用して、メニューにキーボードナビゲーションを提供できます。  
  
 パラメーターを "`-`" に設定すると、メニュー項目は標準のメニュー項目ではなく、区切り記号 (水平線) として表示されます。 `text`  
  
 パラメーター `items`を使用すると、メニュー項目の配列を割り当てて、このメニュー項目のサブメニューを定義できます。 配列内の各項目には、メニュー項目の配列を割り当てることもできます。 これにより、完全なメニュー構造を作成し、メニュー項目のコンストラクターに割り当てることができます。  
  
 イベントの処理の詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、指定されたキャプションを使用してオブジェクトを作成します。このイベントハンドラーは、サブメニュー項目の配列内の各メニュー項目のイベントを処理するメソッドに接続されています。  
  
 [!code-cpp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick, System.Windows.Forms.Shortcut shortcut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick, valuetype System.Windows.Forms.Shortcut shortcut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick, System::Windows::Forms::Shortcut shortcut);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : string * EventHandler * System.Windows.Forms.Shortcut -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (text, onClick, shortcut)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
      </Parameters>
      <Docs>
        <param name="text">メニュー項目のキャプション。</param>
        <param name="onClick">このメニュー項目の <see cref="T:System.EventHandler" /> イベントを処理する <see cref="E:System.Windows.Forms.MenuItem.Click" />。</param>
        <param name="shortcut"><see cref="T:System.Windows.Forms.Shortcut" /> 値のいずれか。</param>
        <summary>メニュー項目のキャプション、イベント ハンドラー、関連付けられているショートカット キーを指定して、クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `text`パラメーターを使用してメニュー項目のキャプションを指定する場合、アクセスキーとして使用する文字の前に ' & ' を配置することで、アクセスキーを指定することもできます。 たとえば、"File" の "F" をアクセスキーとして指定するには、メニュー項目のキャプションを "& ファイル" として指定します。 この機能を使用して、メニューにキーボードナビゲーションを提供できます。 このコンストラクターを使用すると、アクセスキーに加えてショートカットキーを指定して、キーボードナビゲーションを行うこともできます。 ショートカットキーを使用すると、メニュー項目のアクティブ化に使用できるキーの組み合わせを指定できます。  
  
 パラメーターを "`-`" に設定すると、メニュー項目は標準のメニュー項目ではなく、区切り記号 (水平線) として表示されます。 `text`  
  
 また、このコンストラクターを使用して、作成されるメニュー項目の<xref:System.Windows.Forms.MenuItem.Click>イベントを処理するデリゲートを指定することもできます。 この<xref:System.EventHandler>コンストラクターに渡すは、 <xref:System.Windows.Forms.MenuItem.Click>イベントを処理できるイベントハンドラーを呼び出すように構成されている必要があります。 イベントの処理の詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、指定されたキャプション、ショートカットキー、およびメニュー項目のイベントを処理するメソッドに接続されているイベントハンドラーを使用して、オブジェクトを作成します。  
  
 [!code-cpp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (System.Windows.Forms.MenuMerge mergeType, int mergeOrder, System.Windows.Forms.Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MenuMerge mergeType, int32 mergeOrder, valuetype System.Windows.Forms.Shortcut shortcut, string text, class System.EventHandler onClick, class System.EventHandler onPopup, class System.EventHandler onSelect, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::Windows::Forms::MenuMerge mergeType, int mergeOrder, System::Windows::Forms::Shortcut shortcut, System::String ^ text, EventHandler ^ onClick, EventHandler ^ onPopup, EventHandler ^ onSelect, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MenuItem : System.Windows.Forms.MenuMerge * int * System.Windows.Forms.Shortcut * string * EventHandler * EventHandler * EventHandler * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="new System.Windows.Forms.MenuItem (mergeType, mergeOrder, shortcut, text, onClick, onPopup, onSelect, items)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mergeType" Type="System.Windows.Forms.MenuMerge" />
        <Parameter Name="mergeOrder" Type="System.Int32" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="onPopup" Type="System.EventHandler" />
        <Parameter Name="onSelect" Type="System.EventHandler" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="mergeType"><see cref="T:System.Windows.Forms.MenuMerge" /> 値のいずれか 1 つ。</param>
        <param name="mergeOrder">メニュー項目がマージされた場合に、このメニュー項目がマージ後のメニューで占める位置を相対的に示す値。</param>
        <param name="shortcut"><see cref="T:System.Windows.Forms.Shortcut" /> 値のいずれか 1 つ。</param>
        <param name="text">メニュー項目のキャプション。</param>
        <param name="onClick">このメニュー項目の <see cref="T:System.EventHandler" /> イベントを処理する <see cref="E:System.Windows.Forms.MenuItem.Click" />。</param>
        <param name="onPopup">このメニュー項目の <see cref="T:System.EventHandler" /> イベントを処理する <see cref="E:System.Windows.Forms.MenuItem.Popup" />。</param>
        <param name="onSelect">このメニュー項目の <see cref="T:System.EventHandler" /> イベントを処理する <see cref="E:System.Windows.Forms.MenuItem.Select" />。</param>
        <param name="items">このメニュー項目のサブメニュー項目が格納されている <see cref="T:System.Windows.Forms.MenuItem" /> オブジェクトの配列。</param>
        <summary>キャプション、<see cref="T:System.Windows.Forms.MenuItem" />、<see cref="E:System.Windows.Forms.MenuItem.Click" />、<see cref="E:System.Windows.Forms.MenuItem.Select" /> の各イベントに対して定義されているイベント ハンドラー、メニュー項目のショートカット キー、マージの種類、およびマージ順序を指定して、<see cref="E:System.Windows.Forms.MenuItem.Popup" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `text`パラメーターを使用してメニュー項目のキャプションを指定する場合、アクセスキーとして使用する文字の前に ' & ' を配置することで、アクセスキーを指定することもできます。 たとえば、"File" の "F" をアクセスキーとして指定するには、メニュー項目のキャプションを "& ファイル" として指定します。 この機能を使用して、メニューにキーボードナビゲーションを提供できます。  
  
 パラメーターを "`-`" に設定すると、メニュー項目は標準のメニュー項目ではなく、区切り記号 (水平線) として表示されます。 `text`  
  
 パラメーター `items`を使用すると、メニュー項目の配列を割り当てて、このメニュー項目のサブメニューを定義できます。 配列内の各項目には、メニュー項目の配列を割り当てることもできます。 これにより、完全なメニュー構造を作成し、メニュー項目のコンストラクターに割り当てることができます。  
  
 パラメーター `mergeType` と `mergeOrder` パラメーターを使用すると、メニュー項目が別のメニューにマージされた場合に、このメニュー項目がどのように動作するかを決定できます。 `mergeType`パラメーターに指定する値に応じて、メニュー項目とそのサブメニュー項目を、マージするメニューと共に追加、削除、置換、またはマージできます。 パラメーター `mergeOrder`は、メニューをマージするときに、作成されるメニュー項目を配置する場所を決定します。  
  
 また、このコンストラクターを使用してを<xref:System.Windows.Forms.MenuItem>作成し、メニュー項目のクリックを処理するコード内のイベントハンドラーに接続することもできます。 この<xref:System.EventHandler>コンストラクターに渡すは、 <xref:System.Windows.Forms.MenuItem.Click>イベントを処理できるイベントハンドラーを呼び出すように構成する必要があります。 このコンストラクターのバージョンを使用する<xref:System.Windows.Forms.MenuItem.Popup>と、イベントと<xref:System.Windows.Forms.MenuItem.Select>イベントを接続して、このメニュー項目がいつ選択されたかを判断することもできます。 これらのイベントは、サブメニュー項目の横にチェックマークを表示するかどうかや、アプリケーションの状態に基づいてメニュー項目を有効または無効にするかどうかを決定するなどのタスクに使用できます。 イベント<xref:System.Windows.Forms.MenuItem.Select>と<xref:System.Windows.Forms.MenuItem.Click>イベントは、親メニュー <xref:System.Windows.Forms.MenuItem>項目ではないオブジェクトに対してのみ発生します。 イベントの処理の詳細については、「[イベントの処理と発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、キャプションとショートカットキーを持つメニュー項目を作成します。 メニュー項目には<xref:System.Windows.Forms.MenuItem.Popup>、、 <xref:System.Windows.Forms.MenuItem.Click>、および<xref:System.Windows.Forms.MenuItem.Select>の各イベントに対して定義されたイベントハンドラーもあります。 このメニュー項目がマージされると、メニュー項目がメニューに追加され、結合順序が0になります。  
  
 [!code-cpp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Popup" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Select" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="BarBreak">
      <MemberSignature Language="C#" Value="public bool BarBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BarBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.BarBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property BarBreak As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BarBreak { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BarBreak : bool with get, set" Usage="System.Windows.Forms.MenuItem.BarBreak" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> が、新しい行 (<see cref="T:System.Windows.Forms.MainMenu" /> オブジェクトに追加されたメニュー項目の場合) または新しい列 (<see cref="T:System.Windows.Forms.ContextMenu" /> に表示されるサブメニュー項目またはメニュー項目の場合) に配置されるかどうかを示す値を取得または設定します。</summary>
        <value>メニュー項目が新しい行または新しい列に配置される場合は <see langword="true" />。メニュー項目が既定の位置に配置される場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティを使用し<xref:System.Windows.Forms.MenuItem.BarBreak%2A>てメニューを作成し、各メニュー項目を縦に並べて表示するのではなく、横方向に配置することができます。 このプロパティを使用して、トップレベルメニュー項目の複数行を含むメニューバーを作成することもできます。  
  
 このプロパティは、プロパティ<xref:System.Windows.Forms.MenuItem.Break%2A>がに`true`設定されている<xref:System.Windows.Forms.MenuItem.Break%2A>各メニュー項目の左端にバーが表示されるという点で、プロパティとは異なります。 バーは、メニュー項目がトップレベルのメニュー項目ではない場合にのみ表示されます。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem> 、2つのサブメニュー項目を持つを作成します。 2つのサブメニュー項目は、 <xref:System.Windows.Forms.MenuItem.BarBreak%2A>プロパティを使用して垂直方向ではなく、水平方向に表示されます。  
  
 [!code-cpp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.BarBreak Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Break" />
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public bool Break { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Break" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Break" />
      <MemberSignature Language="VB.NET" Value="Public Property Break As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Break { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Break : bool with get, set" Usage="System.Windows.Forms.MenuItem.Break" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目が、新しい行 (<see cref="T:System.Windows.Forms.MainMenu" /> オブジェクトに追加されたメニュー項目の場合) または新しい列 (<see cref="T:System.Windows.Forms.ContextMenu" /> に表示されるサブメニュー項目またはメニュー項目の場合) に配置されるかどうかを示す値を取得または設定します。</summary>
        <value>メニュー項目が新しい行または新しい列に配置される場合は <see langword="true" />。メニュー項目が既定の位置に配置される場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティを使用し<xref:System.Windows.Forms.MenuItem.Break%2A>てメニューを作成し、各メニューを縦に並べた一覧ではなく、横方向に配置できます。 このプロパティを使用して、トップレベルメニュー項目の複数行を含むメニューバーを作成することもできます。  
  
   
  
## Examples  
 次のコード例では、一番上の行にトップレベルのメニュー項目を2つ、一番下の行に1つのメニュー項目を含むメニューを作成します。  
  
 [!code-cpp[Classic MenuItem.Break Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Break Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Break Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Break Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.BarBreak" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Checked : bool with get, set" Usage="System.Windows.Forms.MenuItem.Checked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のテキストの横にチェック マークを表示するかどうかを示す値を取得または設定します。</summary>
        <value>メニュー項目の隣にチェック マークがある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem.Checked%2A>プロパティをメニュー内の他のメニュー項目と組み合わせて使用すると、アプリケーションの状態を指定できます。 たとえば、項目グループのメニュー項目にチェックマークを付けて、アプリケーションのテキストに表示されるフォントのサイズを特定できます。 また、 <xref:System.Windows.Forms.MenuItem.Checked%2A>プロパティを使用して、相互に排他的なメニュー項目のグループで選択したメニュー項目を識別することもできます。  
  
> [!NOTE]
>  トップレベルのメニュー項目の`true`場合、このプロパティをに設定することはできません。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem.Checked%2A> 、プロパティを使用して、アプリケーションの状態を指定しています。 この例では、メニュー項目のグループを使用して、 <xref:System.Windows.Forms.TextBox>コントロール内のテキストの色を指定します。 指定されたイベントハンドラーは、 <xref:System.Windows.Forms.MenuItem.Click> 3 つのメニュー項目のイベントによって使用されます。 各メニュー項目は、テキストの色`menuItemRed` 、(赤) `menuItemGreen` 、(緑)、 `menuItemBlue`または (青) を指定します。 イベントハンドラーは、どのメニュー項目がクリックされたかを判断し、選択されたメニュー項目にチェックマークを配置<xref:System.Windows.Forms.TextBox>し、フォームのコントロールのテキストの色を変更します。 この例では、 <xref:System.Drawing>このコードが配置されているフォームに名前空間が追加されている必要があります。 また、この例では<xref:System.Windows.Forms.TextBox> 、という名前のであるという`textBox1`形式のにが追加されている必要もあります。  
  
 [!code-cpp[Classic MenuItem.Checked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Checked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Checked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Checked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="T:System.Windows.Forms.MenuItem" /> はトップレベル メニューであるか、子があります。</exception>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberSignature Language="F#" Value="member this.Click : EventHandler " Usage="member this.Click : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に対して定義されているショートカット キーまたはアクセス キーを使用して、そのメニュー項目がクリックまたは選択されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントは、ユーザーが<xref:System.Windows.Forms.MenuItem>これをクリックしたときに発生します。 <xref:System.Windows.Forms.MenuItem.Click> このイベントは、ユーザーがキーボードを使用してメニュー項目を選択し、Enter キーを押した場合にも発生します。 また、 <xref:System.Windows.Forms.MenuItem>に関連付けられているアクセスキーまたはショートカットキーが押されている場合にも発生する可能性があります。 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
> [!NOTE]
>  のプロパティ<xref:System.Windows.Forms.Menu.MenuItems%2A> <xref:System.Windows.Forms.MenuItem>に項目が含まれている場合、このイベントは発生しません。 このイベントは、親メニュー項目に対しては発生しません。  
  
   
  
## Examples  
 <xref:System.Windows.Forms.MenuItem.Click>イベントを使用してを<xref:System.Windows.Forms.MenuItem>クリックしたときにタスクを実行する方法を次のコード例に示します。 この例では<xref:System.Windows.Forms.MainMenu> 、 `mainMenu1`というを作成し`topMenuItem` 、`File`2 つ`menuItem1` <xref:System.Windows.Forms.MenuItem>の`Open`オブジェクト () と () を追加します。 `Click` 次 `menuItem1_Click` に、イベントをイベントハンドラーに接続します。 ユーザーが`Open`メニュー項目<xref:System.Windows.Forms.OpenFileDialog>をクリックすると、が初期化されて表示されます。 この例では、という名前<xref:System.Windows.Forms.Form> `Form1`のを作成しておく必要があります。  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CloneMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> のコピーを作成します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ CloneMenu();" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : unit -&gt; System.Windows.Forms.MenuItem" Usage="menuItem.CloneMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Forms.MenuItem" /> のコピーを作成します。</summary>
        <returns>複製されたメニュー項目を表す <see cref="T:System.Windows.Forms.MenuItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem>のコピーを取得しない限り、 <xref:System.Windows.Forms.MenuItem>複数の場所でオブジェクトを使用することはできません。 このメソッドを呼び出して<xref:System.Windows.Forms.ContextMenu>、アプリケーション内の、、またはその他の<xref:System.Windows.Forms.MenuItem>で使用<xref:System.Windows.Forms.MainMenu>するために、このメニュー項目のコピーを作成できます。 メニュー項目が複製されると、元のメニュー項目に指定されているすべてのイベントハンドラーは、複製されたバージョンのメニュー項目で引き続き機能します。 たとえば、を<xref:System.Windows.Forms.MenuItem>作成し、イベントをイベントハンドラー <xref:System.Windows.Forms.MenuItem.Click>に接続した場合などです。 メニュー項目が複製されると、複製されたメニュー項目は同じイベントハンドラーを呼び出します。  
  
   
  
## Examples  
 を<xref:System.Windows.Forms.MenuItem>複製し、 <xref:System.Windows.Forms.ContextMenu>に表示するコード例を次に示します。 この例では、 <xref:System.Windows.Forms.MenuItem>が`menuItem1`という<xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.ContextMenu>名前のフォーム上のに存在し、という`contextMenu1`名前のオブジェクトがフォームにも存在する必要があります。  
  
 [!code-cpp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected void CloneMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CloneMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CloneMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CloneMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberSignature Language="F#" Value="override this.CloneMenu : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItem.CloneMenu itemSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">コピー対象のメニュー項目を表す <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>指定した <see cref="T:System.Windows.Forms.MenuItem" /> のコピーを作成します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ショートカットメニューまたはアプリケーション内の別のメニュー構造で使用するために既に作成したメニュー項目のコピーを作成するには、このメソッドを呼び出します。 このバージョンの<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>では、メソッドを呼び出す<xref:System.Windows.Forms.MenuItem>メニュー項目ではなく、コピーする特定のを指定できます。 このメソッドを使用すると、別<xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem>ののコピーを使用して新しいオブジェクトを初期化できます。 メニュー項目が複製されると、元のメニュー項目に指定されているすべてのイベントハンドラーは、複製されたバージョンのメニュー項目で引き続き機能します。 たとえば、を<xref:System.Windows.Forms.MenuItem>作成し、イベントをイベントハンドラー <xref:System.Windows.Forms.MenuItem.Click>に接続した場合などです。 メニュー項目が複製されると、複製されたメニュー項目は同じイベントハンドラーを呼び出します。  
  
   
  
## Examples  
 次のコード例では、 <xref:System.Windows.Forms.MenuItem>フォームので<xref:System.Windows.Forms.MainMenu>使用される<xref:System.Windows.Forms.MenuItem>既存ののコピーを使用して、新しいを初期化します。 <xref:System.Windows.Forms.MenuItem> 次 <xref:System.Windows.Forms.ContextMenu> に、複製されたをフォームのに追加します。 この例では、 <xref:System.Windows.Forms.MenuItem>が既に作成さ`menuItem1`れ、と<xref:System.Windows.Forms.ContextMenu>いう名前で、コントロールが`contextMenu1`作成され、という名前が付けられている必要があります。  
  
 [!code-cpp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItem">
      <MemberSignature Language="C#" Value="public bool DefaultItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DefaultItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DefaultItem { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultItem : bool with get, set" Usage="System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が既定のメニュー項目かどうかを示す値を取得または設定します。</summary>
        <value>メニュー項目がメニューの既定の項目の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メニューの既定のメニュー項目は、太字になっています。 ユーザーが既定の項目を含むサブメニューをダブルクリックすると、既定の項目が選択され、サブメニューが閉じられます。 <xref:System.Windows.Forms.MenuItem.DefaultItem%2A>プロパティを使用して、メニューまたはショートカットメニューに表示される既定のアクションを示すことができます。  
  
   
  
## Examples  
 次のコード例では、2つのサブメニュー項目を含むメニュー項目を作成します。 この例で`menuItem2`は、 <xref:System.Windows.Forms.MenuItem.DefaultItem%2A>プロパティを使用して、既定のメニュー項目としてを設定します。  
  
 [!code-cpp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="menuItem.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> で使用されていたリソース (メモリを除く) を解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem> を使い終わったら、<xref:System.Windows.Forms.MenuItem.Dispose%2A>を呼び出します。 <xref:System.Windows.Forms.MenuItem.Dispose%2A>メソッドによって、<xref:System.Windows.Forms.MenuItem> は使用不可の状態になります。 を呼び出し<xref:System.Windows.Forms.MenuItem.Dispose%2A>た後は、に対するすべての<xref:System.Windows.Forms.MenuItem>参照を解放して、占有していたメモリがガベージコレクションによって回収されるようにする必要があります。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MenuItem>への最後の参照を解放する前に、必ず<xref:System.Windows.Forms.MenuItem.Dispose%2A>を呼び出してください。 それ以外の場合、 <xref:System.Windows.Forms.MenuItem>が使用しているリソースは、ガベージコレクションが<xref:System.Windows.Forms.MenuItem>オブジェクトのデストラクターを呼び出すまで解放されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目の <see cref="P:System.Windows.Forms.MenuItem.OwnerDraw" /> プロパティが <see langword="true" /> に設定されていて、そのメニュー項目の描画が要求された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントハンドラー <xref:System.Windows.Forms.DrawItemEventArgs> <xref:System.Drawing.Graphics>に渡される引数は、オブジェクトを提供します。このオブジェクトを使用すると、メニュー項目の表面で描画やその他のグラフィカル操作を実行できます。 <xref:System.Windows.Forms.MenuItem.DrawItem> このイベントハンドラーを使用すると、アプリケーションのニーズを満たすカスタムメニューを作成できます。 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 <xref:System.Windows.Forms.MenuItem.DrawItem>イベントを処理する方法を次のコード例に示します。 この例では、 <xref:System.Drawing.Brush> <xref:System.Drawing.Font>とを使用してメニュー項目を描画し<xref:System.Drawing.Rectangle> 、メニュー項目の周囲にを描画します。 描画は<xref:System.Drawing.Graphics>オブジェクトを使用して実行され、 <xref:System.Windows.Forms.DrawItemEventArgs>パラメーターのイベントハンドラーに渡されます。 この例では、項目の<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>プロパティをに`true`初期化している必要があります。 このC#例では、次のコードをフォームのコンストラクターのの後`InitializeComponent`に追加して、イベントをフックします。  
  
 `this.menuItem1.DrawItem += new DrawItemEventHandler(menuItem1_DrawItem);`  
  
 [!code-cpp[OwnerDraw example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/OwnerDraw example/CPP/form1.cpp#1)]
 [!code-csharp[OwnerDraw example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/OwnerDraw example/CS/form1.cs#1)]
 [!code-vb[OwnerDraw example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/OwnerDraw example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.MenuItem.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が有効であるどうかを示す値を取得または設定します。</summary>
        <value>メニュー項目が有効な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 無効<xref:System.Windows.Forms.MenuItem>になっているは、その状態を示す灰色の色で表示されます。 親メニュー項目が無効になっている場合、すべてのサブメニュー項目は表示されません。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Windows.Forms.MenuItem.Popup>イベントを使用して、切り取り、コピー、および削除の各操作をサポートするオブジェクトが、表示されるメニューの前に有効になっているかどうか<xref:System.Windows.Forms.MenuItem>を判断する方法を示しています。 この例では`textBox1`、フォーム<xref:System.Windows.Forms.TextBox>上のコントロールが有効であるかどうか、入力フォーカスがあるかどうか、 <xref:System.Windows.Forms.MenuItem>およびオブジェクトを有効にする前にテキストが選択されているかどうかを判断します。 この例では、 <xref:System.Windows.Forms.MenuItem> 、 `menuCopy`、およびと`menuCut` `menuDelete`いう名前の3つのオブジェクトが作成されている必要があります。  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Index : int with get, set" Usage="System.Windows.Forms.MenuItem.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>親メニュー内のメニュー項目の位置を示す値を取得または設定します。</summary>
        <value>親メニュー内のメニュー項目の位置を表す 0 から始まるインデックス番号。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、親メニューのメニュー項目コレクション内のメニュー項目のインデックス位置を提供します。 このプロパティを使用すると、メニュー項目の位置をメニュー内の別の場所に変更できます。 作成時にメニュー構造内の位置を<xref:System.Windows.Forms.MenuItem>指定するために、を作成するときにこのプロパティを使用することもできます。  
  
   
  
## Examples  
 次のコード例では、メニュー内の2つのメニュー項目の位置を切り替えます。 次のコード例では、 <xref:System.Windows.Forms.MenuItem>とと`menuItem2`いう名前`menuItem1`の2つのオブジェクトを作成する必要があります。 メニュー `menuItem1`項目は、メニュー内で1つ上の位置`menuItem2`に移動し、1つ上の位置に移動します。  
  
 [!code-cpp[Classic MenuItem.Index Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Index Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Index Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Index Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">代入された値が 0 未満か、項目数より大きい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public override bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsParent : bool" Usage="System.Windows.Forms.MenuItem.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に子メニュー項目が含まれているかどうかを示す値を取得します。</summary>
        <value>メニュー項目に子メニュー項目が含まれている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティをプロパティと共に<xref:System.Windows.Forms.MenuItem.Parent%2A>使用すると、メニュー構造全体を通じてコード内を移動できます。  
  
   
  
## Examples  
 次のコード例では、 <xref:System.Windows.Forms.MenuItem>という名前`menuItem1`のに関連付けられているサブメニューがあるかどうかを判断します。 サブメニューが存在する場合は、 <xref:System.Windows.Forms.MenuItem.Enabled%2A>プロパティをに`false`設定して無効にします。 この例では、という<xref:System.Windows.Forms.MenuItem>名前`menuItem1`のが作成されている必要があります。  
  
 [!code-cpp[Classic MenuItem.IsParent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.IsParent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.IsParent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MdiList">
      <MemberSignature Language="C#" Value="public bool MdiList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MdiList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MdiList" />
      <MemberSignature Language="VB.NET" Value="Public Property MdiList As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MdiList { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MdiList : bool with get, set" Usage="System.Windows.Forms.MenuItem.MdiList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に、関連付けられているフォーム内に表示されるマルチ ドキュメント インターフェイス (MDI) 子ウィンドウのリストを表示するかどうかを示す値を取得または設定します。</summary>
        <value>このメニュー項目に MDI 子ウィンドウのリストを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メニュー項目を選択して MDI 子ウィンドウの一覧を表示すると、そのリストがメニュー項目のサブメニューとして表示されます。 [ウィンドウ] の一覧には、MDI 子フォームとして定義されているフォームのみが表示されます。 一度に表示できる子ウィンドウは9つだけです。 9個を超える子ウィンドウが表示されている場合は、"その他のウィンドウ..."メニュー項目は、ウィンドウの一覧の最後に表示されます。 このメニュー項目をクリックすると、現在アクティブになっている子ウィンドウの完全な一覧を含むダイアログボックスが表示されます。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem> 、mdi フォームで現在開いている mdi 子フォームの一覧を表示するために使用するを作成します。  
  
 [!code-cpp[Classic MenuItem.MdiList Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MdiList Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MdiList Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberSignature Language="F#" Value="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " Usage="member this.MeasureItem : System.Windows.Forms.MeasureItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニューにメニュー項目を描画する前に、そのメニュー項目のサイズを確認する必要がある場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントを発生させるには、メニュー項目の<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>プロパティがに`true`設定されている必要があります。 このイベントは、メニュー項目のサイズを指定できるように、オーナー描画メニューが描画される前に発生します。 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 このメンバーの使用例を次のコード例に示します。 この例では、イベントハンドラーが<xref:System.Windows.Forms.MenuItem.MeasureItem>イベントの発生を報告します。 このレポートは、イベントがいつ発生し、デバッグに役立つかを理解するのに役立ちます。  
  
 コード例を実行するには、という名前<xref:System.Windows.Forms.MenuItem> `MenuItem1`の型のインスタンスを含むプロジェクトに貼り付けます。 次に、イベントハンドラーが<xref:System.Windows.Forms.MenuItem.MeasureItem>イベントに関連付けられていることを確認します。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#499](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#499)]
 [!code-vb[System.Windows.Forms.EventExamples#499](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#499)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="MenuID">
      <MemberSignature Language="C#" Value="protected int MenuID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MenuID" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MenuID" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property MenuID As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int MenuID { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MenuID : int" Usage="System.Windows.Forms.MenuItem.MenuID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目の Windows 識別子を示す値を取得します。</summary>
        <value>メニュー項目の Windows 識別子。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.MenuItem" /> と別の <see cref="T:System.Windows.Forms.MenuItem" /> をマージします。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem MergeMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem MergeMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ MergeMenu();" />
      <MemberSignature Language="F#" Value="override this.MergeMenu : unit -&gt; System.Windows.Forms.MenuItem" Usage="menuItem.MergeMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.MenuItem" /> と別の <see cref="T:System.Windows.Forms.MenuItem" /> をマージし、マージ後に作成された <see cref="T:System.Windows.Forms.MenuItem" /> を返します。</summary>
        <returns>マージされたメニュー項目を表す <see cref="T:System.Windows.Forms.MenuItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンの<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>を呼び出すと、 <xref:System.Windows.Forms.MenuItem>現在の項目の機能に影響を与えずに別のメニュー項目とマージできる、現在のメニュー項目のコピーが返されます。 このバージョンの<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>メソッドは、 <xref:System.Windows.Forms.MenuItem.CloneMenu%2A>パラメーターを含まないメソッドを呼び出す場合と似ています。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public void MergeMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MergeMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MergeMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberSignature Language="F#" Value="override this.MergeMenu : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItem.MergeMenu itemSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">このメニュー項目とマージするメニュー項目を指定する <see cref="T:System.Windows.Forms.MenuItem" />。</param>
        <summary>別のメニュー項目とこのメニュー項目をマージします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メニュー項目は、メニュー項目の<xref:System.Windows.Forms.MenuItem.MergeType%2A>プロパティと<xref:System.Windows.Forms.MenuItem.MergeOrder%2A>プロパティの値に従ってマージされます。 このバージョンの<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>メソッドを使用すると、2 <xref:System.Windows.Forms.MenuItem>つのオブジェクト (およびそのサブメニュー) を1つのメニューにマージできます。 複数のドキュメントインターフェイス (MDI) 親フォームと子の両方にメニューがある場合、メニューのマージは自動的に処理されます。 このバージョンのメソッドを使用すると、 <xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MainMenu> <xref:System.Windows.Forms.ContextMenu>コントロールに配置されている2つのオブジェクト (およびそのサブメニュー項目) を内の1つのメニューにマージできます。 たとえば、このバージョン<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>のメソッドを呼び出して、ファイルと編集メニューのメニュー項目を、に追加して<xref:System.Windows.Forms.ContextMenu>表示する<xref:System.Windows.Forms.MenuItem>ことができる単一のにマージできます。  
  
   
  
## Examples  
 次のコード例では、このバージョン<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>のメソッドを使用して、 <xref:System.Windows.Forms.MenuItem>のコピーを作成し、別のにマージします。 <xref:System.Windows.Forms.MenuItem> 次 <xref:System.Windows.Forms.ContextMenu> に、マージされたをコントロールに追加します。 この例`menuItem1`では、と`menuItem2`いう2つのメニュー項目があり、そこにサブメニュー項目`contextMenu1`と、メニュー項目を表示するという名前の<xref:System.Windows.Forms.ContextMenu>が含まれている必要があります。 `menuItem1`と`menuItem2`には、それぞれ異なるメニュー項目が含まれています。 の呼び出し<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>が行われると、統合メニューが作成されます。  
  
 [!code-cpp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeOrder">
      <MemberSignature Language="C#" Value="public int MergeOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MergeOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeOrder As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MergeOrder { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MergeOrder : int with get, set" Usage="System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が別のメニューにマージされた場合に、そのメニュー項目がマージ後のメニューで占める位置を相対的に示す値を取得または設定します。</summary>
        <value>メニュー項目のマージ後の位置を示す 0 から始まるインデックス番号。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メニュー項目のマージ順序では、 <xref:System.Windows.Forms.MenuItem>が含まれているメニュー構造が別のメニューにマージされた場合に、このメニュー項目が実行する相対位置を指定します。  
  
   
  
## Examples  
 次のコード例では、 <xref:System.Windows.Forms.MenuItem.MergeOrder%2A>プロパティを使用して、マージされたメニューの表示方法を制御します。 これは完全な例であり、プロジェクトに追加すると実行できます。  
  
 [!code-cpp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="M:System.Windows.Forms.MenuItem.MergeMenu" />
      </Docs>
    </Member>
    <Member MemberName="MergeType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuMerge MergeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MenuMerge MergeType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeType" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeType As MenuMerge" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuMerge MergeType { System::Windows::Forms::MenuMerge get(); void set(System::Windows::Forms::MenuMerge value); };" />
      <MemberSignature Language="F#" Value="member this.MergeType : System.Windows.Forms.MenuMerge with get, set" Usage="System.Windows.Forms.MenuItem.MergeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuMerge</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目が別のメニューにマージされた場合に、そのメニュー項目がどのように動作するかを示す値を取得または設定します。</summary>
        <value>メニュー項目のマージの種類を表す <see cref="T:System.Windows.Forms.MenuMerge" /> 値。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メニュー項目のマージの種類は、マージされている別のメニュー項目と同じマージ順序を持つメニュー項目の動作を示します。 結合されたメニューを使用して、2つ以上の既存のメニューに基づいて統合メニューを作成できます。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem> 、 <xref:System.Windows.Forms.MenuItem.MergeType%2A>と<xref:System.Windows.Forms.MenuItem.MergeOrder%2A>を指定してを作成し、メニュー項目が最初の位置にマージされたメニューに追加されるようにします。  
  
 [!code-cpp[Classic MenuItem.MergeType Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeType Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">代入された値が、<see cref="T:System.Windows.Forms.MenuMerge" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.MenuMerge" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Mnemonic">
      <MemberSignature Language="C#" Value="public char Mnemonic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Mnemonic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mnemonic As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Mnemonic { char get(); };" />
      <MemberSignature Language="F#" Value="member this.Mnemonic : char" Usage="System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に関連付けられているニーモニック文字を示す値を取得します。</summary>
        <value>メニュー項目に関連付けられているニーモニック文字を表す文字。 <see cref="T:System.Windows.Forms.MenuItem" /> のテキストでニーモニック文字が指定されていない場合は、NUL 文字 (ASCII 値 0) を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ニーモニック文字は、 <xref:System.Windows.Forms.MenuItem>のテキストのアンパサンド文字 (&) の後の最初の文字です。 アンパサンドは、ニーモニック文字を定義する代わりに、 <xref:System.Windows.Forms.MenuItem>のテキストにアンパサンドを表示するために使用されるため、このプロパティはニーモニックを返しません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Text" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnClick : EventArgs -&gt; unit&#xA;override this.OnClick : EventArgs -&gt; unit" Usage="menuItem.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.MenuItem.Click" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 <xref:System.Windows.Forms.MenuItem.Click>イベントを使用してを<xref:System.Windows.Forms.MenuItem>クリックしたときにタスクを実行する方法を次のコード例に示します。 この例では<xref:System.Windows.Forms.MainMenu> 、 `mainMenu1`というを作成し`topMenuItem` 、`File`2 つ`menuItem1` <xref:System.Windows.Forms.MenuItem>の`Open`オブジェクト () と () を追加します。 `Click` 次 `menuItem1_Click` に、イベントをイベントハンドラーに接続します。 ユーザーが`Open`メニュー項目<xref:System.Windows.Forms.OpenFileDialog>をクリックすると、が初期化されて表示されます。 この例では、という名前<xref:System.Windows.Forms.Form> `Form1`のを作成しておく必要があります。  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawItemEventArgs -&gt; unit" Usage="menuItem.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawItemEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.MenuItem.DrawItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />メソッドを呼び出してください。</para></block>
        <altmember cref="T:System.Windows.Forms.DrawItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInitMenuPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnInitMenuPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitMenuPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitMenuPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitMenuPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnInitMenuPopup : EventArgs -&gt; unit&#xA;override this.OnInitMenuPopup : EventArgs -&gt; unit" Usage="menuItem.OnInitMenuPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.MenuItem.Popup" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit&#xA;override this.OnMeasureItem : System.Windows.Forms.MeasureItemEventArgs -&gt; unit" Usage="menuItem.OnMeasureItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.MeasureItemEventArgs" /> 。</param>
        <summary><see cref="E:System.Windows.Forms.MenuItem.MeasureItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />メソッドを呼び出してください。</para></block>
        <altmember cref="T:System.Windows.Forms.MeasureItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="menuItem.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.MenuItem.Popup" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Windows.Forms.MenuItem.Popup>イベントを使用して、切り取り、コピー、および削除の各操作をサポートするオブジェクトが、表示されるメニューの前に有効になっているかどうか<xref:System.Windows.Forms.MenuItem>を判断する方法を示しています。 この例では`textBox1`、フォーム<xref:System.Windows.Forms.TextBox>上のコントロールが有効であるかどうか、入力フォーカスがあるかどうか、 <xref:System.Windows.Forms.MenuItem>およびオブジェクトを有効にする前にテキストが選択されているかどうかを判断します。 この例では、 <xref:System.Windows.Forms.MenuItem> 、 `menuCopy`、およびと`menuCut` `menuDelete`いう名前の3つのオブジェクトが作成されている必要があります。  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnSelect (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelect(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelect (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelect(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelect : EventArgs -&gt; unit&#xA;override this.OnSelect : EventArgs -&gt; unit" Usage="menuItem.OnSelect e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.MenuItem.Select" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
   
  
## Examples  
 クラスのイベントを<xref:System.Windows.Forms.StatusBar>使用<xref:System.Windows.Forms.StatusBarPanel>して、コントロールのにヘルプテキストを割り当てる方法を次のコード例に示します。 <xref:System.Windows.Forms.MenuItem.Select> <xref:System.Windows.Forms.MenuItem> この例では<xref:System.Windows.Forms.MenuItem> 、、 `menuOpen` `menuSave`、および`menuExit`という名前のオブジェクト<xref:System.Windows.Forms.MainMenu>がフォーム上のコントロールに追加されている必要があります。 この例では、と<xref:System.Windows.Forms.StatusBar>いう名前`statusBar1`のコントロールがフォームに追加されている必要もあります。 コントロール<xref:System.Windows.Forms.StatusBar>には、 <xref:System.Windows.Forms.StatusBarPanel>が含まれている必要があります。  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラス<see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />でをオーバーライドする場合は、必ず基底クラスの<see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OwnerDraw : bool with get, set" Usage="System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定したコードがメニュー項目を描画するのか、Windows がメニュー項目を描画するのかを示す値を取得または設定します。</summary>
        <value>コードがメニュー項目を描画する場合は <see langword="true" />。Windows がメニュー項目を描画する場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティが<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A>に`true`設定されている場合は、メニュー項目のすべての描画を処理する必要があります。 この機能を使用して、独自の特殊なメニュー表示を作成できます。  
  
   
  
## Examples  
 次のコード例は、オーナー描画のメニュー項目を持つメニューを示しています。 この例では<xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> 、プロパティを設定`AddHandler`し、ステートメント`AddressOf`と<xref:System.Windows.Forms.MenuItem.DrawItem>演算子を使用して、イベントを処理するデリゲートを指定します。 この例を実行するには、、 <xref:System> <xref:System.Windows.Forms>、および<xref:System.Drawing>の各名前空間をインポートするフォームに貼り付けます。 フォーム`InitializeMenu`のコンストラクターまたは`Load`メソッドからを呼び出します。  
  
 [!code-cpp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.Menu" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Menu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu ^ Parent { System::Windows::Forms::Menu ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.Menu" Usage="System.Windows.Forms.MenuItem.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このメニュー項目が含まれているメニューを示す値を取得します。</summary>
        <value>このメニュー項目が含まれているメニューを表す <see cref="T:System.Windows.Forms.Menu" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用して、 <xref:System.Windows.Forms.Menu>サブメニューのオブジェクトを取得できます。 このプロパティによっ<xref:System.Windows.Forms.Menu>て返されたオブジェクト<xref:System.Windows.Forms.MenuItem>をオブジェクトにキャストして、それを操作できます。  
  
   
  
## Examples  
 この例では、メインメニューとトップレベルメニュー項目`menuItem1` (`File`) を作成します。 また、 `menuItem2` (`New`) と`menuItem3` `menuItem1`(`Open`) の2つのメニュー項目を作成し、のメニュー項目リストに追加します。 次に、が親メニュー `menuItem3` (true) を持っているかどうかを確認し、メッセージボックスにこの親メニューの情報を表示します。 この例では、という名前<xref:System.Windows.Forms.Form> `Form1`のを作成している必要があります。  
  
 [!code-cpp[ParentMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentMenu/CPP/form1.cpp#1)]
 [!code-csharp[ParentMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentMenu/CS/form1.cs#1)]
 [!code-vb[ParentMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformClick();" />
      <MemberSignature Language="F#" Value="member this.PerformClick : unit -&gt; unit" Usage="menuItem.PerformClick " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="E:System.Windows.Forms.Control.Click" /> の <see cref="T:System.Windows.Forms.MenuItem" /> イベントを生成し、ユーザーによるクリック操作をシミュレートします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメニューを使用すると、イベント情報を渡さずに、コードを使用してメニュー項目をアクティブにすることができます。 たとえば、アプリケーションで発生したアクションに基づいてメニュー項目をアクティブ化する場合は、その<xref:System.Windows.Forms.MenuItem.PerformClick%2A> <xref:System.Windows.Forms.MenuItem>のメソッドを呼び出すことができます。  
  
   
  
## Examples  
 この例では、 `PerformClick`メソッドを使用して、プログラムでメニュー項目をクリックします。 まず、メインメニュー (`mainMenu1`) を作成し、それに2つ`File`の`menuItem1`メニュー項目 () と`menuItem2` (`Edit`) を追加します。 また、 <xref:System.Windows.Forms.MenuItem.Click>イベントを使用して、メニュー項目がクリックされたときにイベントハンドラーにデータを送信することもできます。 次に、 `PerformClick`メソッドを使用して`File`メニュー項目をクリックします。 アプリケーションを起動すると、 `File`メニュー項目がアクティブになり、"ファイルメニューがクリックされました" というテキストを含むメッセージボックスが表示されます。 画面に表示されます。 この例では、という名前<xref:System.Windows.Forms.Form> `Form1`のを作成しておく必要があります。  
  
 [!code-cpp[PerformClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformClick/CPP/form1.cpp#1)]
 [!code-csharp[PerformClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformClick/CS/form1.cs#1)]
 [!code-vb[PerformClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelect">
      <MemberSignature Language="C#" Value="public virtual void PerformSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformSelect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PerformSelect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PerformSelect();" />
      <MemberSignature Language="F#" Value="abstract member PerformSelect : unit -&gt; unit&#xA;override this.PerformSelect : unit -&gt; unit" Usage="menuItem.PerformSelect " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このメニュー項目に <see cref="E:System.Windows.Forms.MenuItem.Select" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用すると、 <xref:System.Windows.Forms.MenuItem.Select>イベントハンドラーにイベント情報を渡さずにイベントを発生させることができます。  
  
   
  
## Examples  
 この例では、 `PerformSelect`メソッドを使用して、プログラムでメニュー項目を選択します。 まず、メインメニュー (`mainMenu1`) を作成し、それに2つ`File`の`menuItem1`メニュー項目 () と`menuItem2` (`Edit`) を追加します。 また、 <xref:System.Windows.Forms.MenuItem.Select>イベントを使用して、メニュー項目が選択されたときにイベントハンドラーにデータを送信することもできます。 次に、 `PerformSelect`メソッドを使用して`File`メニュー項目を選択します。 アプリケーションを`File`起動すると、メニュー項目が選択され、"ファイルメニューが選択されています" というテキストを含むメッセージボックスが表示されます。 画面に表示されます。 この例では、という名前<xref:System.Windows.Forms.Form> `Form1`のを作成しておく必要があります。  
  
 [!code-cpp[PerformSelect#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformSelect/CPP/form1.cpp#1)]
 [!code-csharp[PerformSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformSelect/CS/form1.cs#1)]
 [!code-vb[PerformSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformSelect/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MenuItem.PerformClick" />
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のリストが表示される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、メニュー項目にサブメニュー項目が表示されている場合にのみ発生します。 このイベントハンドラーを使用すると、アプリケーションの状態に基づいてメニュー項目を追加、削除、有効化、無効化、チェック、またはオフにすることができます。 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Windows.Forms.MenuItem.Popup>イベントを使用して、切り取り、コピー、および削除の各操作をサポートするオブジェクトが、表示されるメニューの前に有効になっているかどうか<xref:System.Windows.Forms.MenuItem>を判断する方法を示しています。 この例では`textBox1`、フォーム<xref:System.Windows.Forms.TextBox>上のコントロールが有効であるかどうか、入力フォーカスがあるかどうか、 <xref:System.Windows.Forms.MenuItem>およびオブジェクトを有効にする前にテキストが選択されているかどうかを判断します。 この例では、 <xref:System.Windows.Forms.MenuItem> 、 `menuCopy`、およびと`menuCut` `menuDelete`いう名前の3つのオブジェクトが作成されている必要があります。  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioCheck">
      <MemberSignature Language="C#" Value="public bool RadioCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RadioCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property RadioCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RadioCheck { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RadioCheck : bool with get, set" Usage="System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> がチェックされている場合、チェック マークの代わりにオプション ボタンを表示するかどうかを示す値を取得または設定します。</summary>
        <value>メニュー項目がチェックされた場合に、チェック マークの代わりにオプション ボタンが使用される場合は <see langword="true" />。標準のチェック マークが表示される場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 チェックマークは、メニュー項目のグループに対して相互排他的な状態を示すとは限りません。 このプロパティを使用すると、メニュー項目のチェックマークが相互に排他的であることをユーザーに示すことができます。  
  
   
  
## Examples  
 次のコード例では<xref:System.Windows.Forms.MenuItem.Checked%2A> 、プロパティを使用して、アプリケーションの状態を変更します。 この例では、 <xref:System.Windows.Forms.TextBox>コントロールのテキストの色を指定するために使用されるメニュー項目のグループが用意されています。 この例では、3つのメニュー項目の<xref:System.Windows.Forms.MenuItem.Click>イベントによって、指定されたイベントハンドラーが使用されます。 各メニュー項目は、色`menuItemRed` `menuItemGreen`、、、また`menuItemBlue`はを指定します。 イベントハンドラーは、どのメニュー項目がクリックされたかを判断し、選択したメニュー項目にチェックマークを付け、 <xref:System.Windows.Forms.TextBox>という名前`textBox1`のフォームコントロールのテキストの色を変更します。 また、この例で<xref:System.Windows.Forms.MenuItem.RadioCheck%2A>は、プロパティを使用して、相互に排他的なメニュー項目を表示するためにラジオボタンチェックを使用する方法を示しています。 この例では、 <xref:System.Drawing?displayProperty=nameWithType>このコードを含むフォームに名前空間が追加されている必要があります。  
  
 [!code-cpp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Checked" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public event EventHandler Select;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Select" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Select" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Select As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Select;" />
      <MemberSignature Language="F#" Value="member this.Select : EventHandler " Usage="member this.Select : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがメニュー項目の上にポインターを置いた場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、通常、ユーザーがメニュー項目の上にマウスポインターを置いたときに発生します。 イベントは、ユーザーがキーボードを使用してメニュー項目を強調表示したときに、方向キーを持つメニュー項目にスクロールすることによっても発生することがあります。 このイベントを使用すると、アプリケーションのステータスバーでこのメニュー項目に関連する詳細なヘルプ文字列を表示できます。 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
> [!NOTE]
>  のプロパティ<xref:System.Windows.Forms.Menu.MenuItems%2A> <xref:System.Windows.Forms.MenuItem>に項目が含まれている場合、このイベントは発生しません。 このイベントは、親メニュー項目に対しては発生しません。  
  
   
  
## Examples  
 クラスのイベントを<xref:System.Windows.Forms.StatusBar>使用<xref:System.Windows.Forms.StatusBarPanel>して、コントロールのにヘルプテキストを割り当てる方法を次のコード例に示します。 <xref:System.Windows.Forms.MenuItem.Select> <xref:System.Windows.Forms.MenuItem> この例では<xref:System.Windows.Forms.MenuItem> 、、 `menuOpen` `menuSave`、および`menuExit`という名前のオブジェクト<xref:System.Windows.Forms.MainMenu>がフォーム上のコントロールに追加されている必要があります。 この例では、と<xref:System.Windows.Forms.StatusBar>いう名前`statusBar1`のコントロールがフォームに追加されている必要もあります。 コントロール<xref:System.Windows.Forms.StatusBar>には、 <xref:System.Windows.Forms.StatusBarPanel>が含まれている必要があります。  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
      </Docs>
    </Member>
    <Member MemberName="Shortcut">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Shortcut Shortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Shortcut Shortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Shortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property Shortcut As Shortcut" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Shortcut Shortcut { System::Windows::Forms::Shortcut get(); void set(System::Windows::Forms::Shortcut value); };" />
      <MemberSignature Language="F#" Value="member this.Shortcut : System.Windows.Forms.Shortcut with get, set" Usage="System.Windows.Forms.MenuItem.Shortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Shortcut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目に関連付けられているショートカット キーを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.Shortcut" /> 値のいずれか。 既定値は、<see langword="Shortcut.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ショートカットキーは、ユーザーがメニューシステムで頻繁に使用するメニュー項目をアクティブ化したり、マウスやその他のポインターデバイスにアクセスできないユーザーに対して、アプリケーションへのキーボードアクセスを提供したりするための方法を提供します。  
  
   
  
## Examples  
 次のコード例では、メニュー項目を作成し、キャプションを設定し、ショートカットキーを割り当てて、メニュー項目を表示し、メニュー項目のショートカットキーを表示します。 この例では、 <xref:System.Windows.Forms.MenuItem>という名前`menuItem1`のが作成されている必要があります。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">代入された値が、<see cref="T:System.Windows.Forms.Shortcut" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="ShowShortcut">
      <MemberSignature Language="C#" Value="public bool ShowShortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowShortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowShortcut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowShortcut { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowShortcut : bool with get, set" Usage="System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のキャプションの横に、そのメニュー項目に関連付けられているショートカット キーを表示するかどうかを示す値を取得または設定します。</summary>
        <value>ショートカット キーの組み合わせをメニュー項目のキャプションの横に表示する場合は <see langword="true" />。ショートカット キーの組み合わせを表示しない場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、メニュー領域を節約したり、ショートカットキーが表示されないようにするためにユーザーがメニューからショートカットを非表示にするオプションを指定できます。  
  
   
  
## Examples  
 次のコード例では、メニュー項目を作成し、キャプションを設定し、ショートカットキーを割り当てて、メニュー項目を表示し、メニュー項目のショートカットキーを表示します。 この例では、 <xref:System.Windows.Forms.MenuItem>という名前`menuItem1`のが作成されている必要があります。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.MenuItem.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目のキャプションを示す値を取得または設定します。</summary>
        <value>メニュー項目のテキスト キャプション。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メニュー項目のキャプションを指定する場合は、アクセスキーとして使用する文字の前に ' & ' を配置することで、アクセスキーを指定することもできます。 たとえば、"File" の "F" をアクセスキーとして指定するには、メニュー項目のキャプションを "& ファイル" として指定します。 この機能を使用して、メニューにキーボードナビゲーションを提供できます。  
  
 このプロパティを "`-`" に設定すると、メニュー項目は標準のメニュー項目ではなく、区切り記号 (水平線) として表示されます。  
  
   
  
## Examples  
 次のコード例では、メニュー項目を作成し、キャプションを設定し、ショートカットキーを割り当てて、メニュー項目を表示し、メニュー項目のショートカットキーを表示します。 この例では、 <xref:System.Windows.Forms.MenuItem>という名前`menuItem1`のが作成されている必要があります。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Mnemonic" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="menuItem.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> を表す文字列を返します。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.MenuItem" /> を表す文字列。 コントロールの種類と <see cref="P:System.Windows.Forms.MenuItem.Text" /> プロパティを格納する文字列。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Visible : bool with get, set" Usage="System.Windows.Forms.MenuItem.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>メニュー項目を表示するかどうかを示す値を取得または設定します。</summary>
        <value>メニュー項目をメニューに表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを使用すると、メニューを結合したり、メニューを無効にしたりしなくても、メニュー構造を変更できます。 たとえば、アプリケーションのメニューから機能の完全なセクションを非表示にする場合は、このプロパティをに設定する`false`ことによって、ユーザーに表示されないようにすることができます。  
  
   
  
## Examples  
 次のコード例では、メニュー項目を作成し、キャプションを設定し、ショートカットキーを割り当てて、メニュー項目を表示し、メニュー項目のショートカットキーを表示します。 この例では、 <xref:System.Windows.Forms.MenuItem>という名前`menuItem1`のが作成されている必要があります。  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
