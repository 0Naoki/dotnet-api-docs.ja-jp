<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8c9d000578e8ade0326c86daf432d3d053ae8ce3" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39882922" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>形式に依存しないデータ転送機構を提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject`インターフェイスを使って、<xref:System.Windows.Forms.Clipboard>クラスとドラッグ アンド ドロップ操作でします。  
  
 クラスで実装された場合、<xref:System.Windows.Forms.IDataObject>メソッドは、クラスのインスタンスで複数の形式でデータを格納するユーザーを許可します。 1 つ以上の形式でデータを格納するには、形式の要件がわからない場合がありますが、ターゲット アプリケーションが格納されているデータを取得できる可能性が高くなります。 インスタンスにデータを格納する<xref:System.Windows.Forms.IDataObject>を呼び出し、<xref:System.Windows.Forms.IDataObject.SetData%2A>メソッドでデータ形式を指定し、`format`パラメーター。 設定、`autoConvert`パラメーターを`false`格納されたデータが取得されたときに別の形式に変換しないかどうか。 呼び出す<xref:System.Windows.Forms.IDataObject.SetData%2A>の 1 つのインスタンスで複数回<xref:System.Windows.Forms.IDataObject>1 つ以上の形式でデータを格納します。  
  
 格納されたデータを取得する、<xref:System.Windows.Forms.IDataObject>呼び出すことによって、<xref:System.Windows.Forms.IDataObject.GetData%2A>で書式設定メソッドと、データを指定する、`format`パラメーター。 設定、`autoConvert`パラメーターを`false`を指定した形式で格納されたデータのみを取得します。 指定した形式に格納されているデータを変換するには設定`autoConvert`に`true`、または使用しないでください`autoConvert`します。  
  
 格納されたデータの形式を決定する、 <xref:System.Windows.Forms.IDataObject>、次を使用して、<xref:System.Windows.Forms.IDataObject>メソッド。  
  
-   呼び出す、<xref:System.Windows.Forms.IDataObject.GetFormats%2A>データが使用するすべての形式の配列を取得します。 設定、`autoConvert`パラメーターを`false`データが格納されている形式のみを取得します。 データの使用可能なすべての形式を取得するには、次のように設定します。`autoConvert`に`true`、またはこのパラメーターを使用しません。  
  
-   呼び出す、<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>格納されたデータが特定の形式で使用できるかどうかを判断するメソッド。 格納されたデータを指定した形式に変換したくない場合は、設定、`autoConvert`パラメーター`false`します。  
  
 参照してください、<xref:System.Windows.Forms.DataObject>このインターフェイスの実装のクラス。 参照してください、 <xref:System.Windows.Forms.DataFormats> 、定義済みのクラス<xref:System.Windows.Forms.Clipboard>データ形式。  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデータ形式に関連付けられているデータを取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>指定したデータ形式に関連付けられているデータを取得します。</summary>
        <returns>指定した形式に関連付けられているデータ、または <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定した形式でデータを検索することはできません、データ形式に変換しようとします。 このメソッドが戻るかどうかは、指定した形式にデータを変換できません、`null`します。  
  
 データが、関連付けまたは形式に変換できるかどうかを確認するのには、呼び出す<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>呼び出す前に<xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す<xref:System.Windows.Forms.IDataObject.GetFormats%2A>のこのインスタンスに格納されたデータの有効な形式の一覧。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject,`の使用を示すために、`GetData`メソッド。 格納されているデータを取得するメソッドが使用される`myDataObject`に関連付けられた、`Text`形式。 この例では既に作成したこと、<xref:System.Windows.Forms.Form>という名前`Form1`と<xref:System.Windows.Forms.TextBox>という名前`textBox1`します。  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式を表す <see cref="T:System.Type" />。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>指定したクラス型形式に関連付けられているデータを取得します。</summary>
        <returns>指定した形式に関連付けられているデータ、または <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、指定した形式でデータを検索することはできません、データ形式に変換しようとします。 このメソッドが戻るかどうかは、指定した形式にデータを変換できません、`null`します。  
  
 データが、関連付けまたは形式に変換できるかどうかを確認するのには、呼び出す<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>呼び出す前に<xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す<xref:System.Windows.Forms.IDataObject.GetFormats%2A>のこのインスタンスに格納されたデータの有効な形式の一覧。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`GetData`メソッド。 格納されているデータを取得するメソッドが使用される`myObject`、特定の種類に関連付けられている`myType`します。 取得したデータの種類は、メッセージ ボックスに表示されます。 この例では既に作成したこと、<xref:System.Windows.Forms.Form>という`Form1`。  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">取得するデータの形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="autoConvert">指定した形式にデータを変換する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したデータ形式に関連付けられているデータを取得します。データを指定形式に変換できるかどうかを確認するためにブール値を使用します。</summary>
        <returns>指定した形式に関連付けられているデータ、または <see langword="null" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、`autoConvert`パラメーターが`true`形式にデータを変換しようと、このメソッドは、指定した形式でデータを検索することはできません。 データは、指定した形式に変換できない場合、またはでデータが格納されている場合、`autoConvert`パラメーターに設定`false`、このメソッドが戻る`null`します。  
  
 場合、`autoConvert`パラメーターが`false`、このメソッドは、指定した形式でデータを返しますまたは`null`形式でデータが見つからない場合。  
  
 データが、関連付けまたは形式に変換できるかどうかを確認するのには、呼び出す<xref:System.Windows.Forms.IDataObject.GetDataPresent%2A>呼び出す前に<xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す<xref:System.Windows.Forms.IDataObject.GetFormats%2A>のこのインスタンスに格納されたデータの有効な形式の一覧。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`GetData`メソッド。 例に格納されたデータの取得、`DataObject`を使用して、`autoConvert`データ形式に変換するかどうかを指定するパラメーター。 まず、`myDataObject`テキスト データで作成されます。 次の例は、データを取得するには、2 回試みます。 最初の試行でという文字列とセットの形式を指定、`autoConvert`パラメーター`false`します。 この試用版が失敗し、結果は「メッセージは 1」というラベルの付いたメッセージ ボックスに表示されます。 例を使用して同じデータの取得、2 つ目の試用版、`autoConvert`パラメーターに設定`true`します。 この試用版が成功し、結果は「メッセージ 2」というラベルの付いたメッセージ ボックスに表示されます。 この例では作成した、<xref:System.Windows.Forms.Form>という`Form1`。  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>インスタンスに格納されているデータが、指定した形式に関連付けられているかどうかを確認します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">確認対象の形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>インスタンスに格納されているデータが、指定した形式と関連付けられているかどうかや、その形式に変換できるかどうかを確認します。</summary>
        <returns>インスタンスに格納されているデータが、指定されている形式に関連付けられている場合や、その形式に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これで、形式が存在するかどうかを確認するには、このメソッドを呼び出す<xref:System.Windows.Forms.DataObject>呼び出す前に<xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す<xref:System.Windows.Forms.IDataObject.GetFormats%2A>のこのインスタンスで使用可能な形式です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`GetDataPresent`メソッド。 最初に、文字列を使用してデータ オブジェクトを作成し、`Text`形式。 データに存在することを確認し、`Text`書式を設定し、メッセージ ボックスに、結果を表示します。 この例では作成した、<xref:System.Windows.Forms.Form>という`Form1`。  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">確認対象となる形式を表す <see cref="T:System.Type" />。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <summary>インスタンスに格納されているデータが、指定した形式と関連付けられているかどうかや、その形式に変換できるかどうかを確認します。</summary>
        <returns>インスタンスに格納されているデータが、指定されている形式に関連付けられている場合や、その形式に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これで、形式が存在するかどうかを確認するには、このメソッドを呼び出す<xref:System.Windows.Forms.DataObject>呼び出す前に<xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す<xref:System.Windows.Forms.IDataObject.GetFormats%2A>のこのインスタンスで使用可能な形式です。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`GetDataPresent`メソッド。 まず、コンポーネントを作成します (`myComponent`) し、データ オブジェクトに格納 (`myDataObject`)。 指定されたデータが格納されているかどうかを確認し、`myDataObject`します。 評価されると、 `true`、メッセージ ボックスに、結果を表示し、テキスト ボックスに、データ型を表示します。 この例では、既に作成したこと、<xref:System.Windows.Forms.Form>という名前`Form1`と<xref:System.Windows.Forms.TextBox>という`textBox1`します。  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">確認対象の形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="autoConvert">インスタンスに格納されているデータを指定した形式に変換できるかどうかを確認する場合は <see langword="true" />。データが指定した形式かどうかを確認する場合は <see langword="false" />。</param>
        <summary>インスタンスに格納されているデータが、指定した形式に関連付けられているかどうかを確認します。データを指定形式に変換できるかどうかを確認するためにブール値を使用します。</summary>
        <returns>データが指定した形式である場合や、その形式に変換できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これで、形式が存在するかどうかを確認するには、このメソッドを呼び出す<xref:System.Windows.Forms.DataObject>呼び出す前に<xref:System.Windows.Forms.IDataObject.GetData%2A>します。 呼び出す<xref:System.Windows.Forms.IDataObject.GetFormats%2A>のこのインスタンスで使用可能な形式です。  
  
 このメソッドが戻る`true`とき。  
  
-   `autoConvert`パラメーターが`true`データが適切な形式に変換できる形式とします。  
  
-   `autoConvert`パラメーターが`false`データが、適切な形式です。  
  
 このメソッドが戻る`false`とき。  
  
-   `autoConvert`パラメーターが`true`とこのメソッドは、指定した形式でデータを検索することはできませんし、指定した形式に変換できないデータまたはでデータが格納されている`autoConvert`設定`false`します。  
  
-   `autoConvert`パラメーターが`false`、し、指定された形式では、このインスタンスにデータが存在しません。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`GetDataPresent`メソッド。 まず、データ オブジェクトを作成します (`myDataObject`) 文字列を使用して、`Text`形式。 関連付けられたデータ オブジェクトを照会し、`Text`形式で、`autoConvert`パラメーターに設定`false`します。 この試用版が失敗し、結果は「メッセージは 1」というラベルの付いたメッセージ ボックスに表示されます。 設定が、2 つ目の試用版、`autoConvert`パラメーター`true`します。 この試用版が成功し、結果は「メッセージ 2」というラベルの付いたメッセージ ボックスに表示されます。 この例では作成した、<xref:System.Windows.Forms.Form>という`Form1`。  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>このインスタンスに格納されたデータに関連付けられているすべての形式、または変換できるすべての形式のリストを返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>このインスタンスに格納されたデータに関連付けられているすべての形式、または変換できるすべての形式のリストを返します。</summary>
        <returns>オブジェクトに格納されているデータがサポートする形式すべてのリストを表す名前の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出しの前に、サポートされているデータ形式を取得するには、このメソッドを呼び出し、<xref:System.Windows.Forms.IDataObject.GetData%2A>メソッド。 参照してください、<xref:System.Windows.Forms.DataFormats>クラスの定義済みの形式。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`GetFormats`メソッド。 まず、データ オブジェクトを作成します (`myDataObject`) 文字列を使用して、`Text`形式。 すべてのデータ形式と、データ オブジェクト内のデータ変換形式を取得し、メッセージ ボックスに、結果のリストを表示します。 この例では、作成した、<xref:System.Windows.Forms.Form>という`Form1`します。  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">インスタンスに格納されたデータが関連付けられている形式、またはそのデータを変換できる形式をすべて取得する場合は <see langword="true" />。ネイティブ データ形式だけを取得する場合は <see langword="false" />。</param>
        <summary>インスタンスに格納されているデータが関連付けられている形式、またはそのデータを変換できる形式のリストを取得します。データを変換できる形式をすべて取得するのか、ネイティブ データ形式だけを取得するのかを確認するためにブール値を使用します。</summary>
        <returns>オブジェクトに格納されているデータがサポートする形式すべてのリストを表す名前の配列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出しの前に、サポートされているデータ形式を取得するには、このメソッドを呼び出し、<xref:System.Windows.Forms.IDataObject.GetData%2A>メソッド。 参照してください、<xref:System.Windows.Forms.DataFormats>クラスの定義済みの形式。  
  
> [!NOTE]
>  データは、格納されている変換が許可されている場合、要求の形式が格納されている形式と互換性のある場合は、別の形式に変換できます。 テキストに変換できる Unicode として格納されているデータなどです。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`GetFormats`メソッド。 まず、データ オブジェクトを作成します (`myDataObject`) 文字列を使用して、`UnicodeText`形式。 そのデータに関連付けられている形式を取得する 2 つのクエリを作成します。 最初のクエリでは、設定、`autoConvert`パラメーターを`false`: この場合、データのネイティブ形式のみが返されます。 2 番目のクエリでは、設定、`autoConvert`パラメーターを`true`形式に変換できるデータを含む形式の一覧を取得するようにします。 各ケースでは、メッセージ ボックスに、結果のリストが表示されます。 この例では、作成した、<xref:System.Windows.Forms.Form>という`Form1`します。  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したデータおよびそのデータに関連付けられている形式をインスタンスに格納します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">格納するデータ。</param>
        <summary>指定したデータを、そのデータのクラスに基づく形式で、このインスタンスに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 形式は、データ クラスから派生します。  
  
 このメソッドを使用して格納されているデータは、取得されるときに互換性のある形式に変換できます。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`SetData`メソッド。 まず、コンポーネントを作成します (`myComponent`) し、データ オブジェクトに格納 (`myDataObject`)。 指定されたデータが、データ オブジェクトに格納され、メッセージ ボックスに結果を表示するかどうかがチェックされます。 この例では作成した、<xref:System.Windows.Forms.Form>という`Form1`。  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="data">格納するデータ。</param>
        <summary>指定したデータおよびそのデータに関連付けられている形式をインスタンスに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象アプリケーションの形式がわからない場合は、このメソッドを使用して複数の形式でデータを格納できます。  
  
 このメソッドを使用して格納されているデータは、取得されるときに互換性のある形式に変換できます。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`SetData`メソッド。 まず、データ オブジェクトを作成します (`myDataObject`) オブジェクトを指定する文字列を格納し、`UnicodeText`形式。 オブジェクトに指定することで格納されているデータを取得し、 `Text` 、データに変換されるように、書式設定、`Text`形式。 結果は、メッセージ ボックスに表示されます。 この例では、作成した、<xref:System.Windows.Forms.Form>という`Form1`します。  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式を表す <see cref="T:System.Type" />。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="data">格納するデータ。</param>
        <summary>指定されているデータおよびそのデータに関連付けられているクラス型をインスタンスに格納します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象アプリケーションの形式がわからない場合は、このメソッドを使用して複数の形式でデータを格納できます。  
  
 このメソッドを使用して格納されているデータは、取得されるときに互換性のある形式に変換できます。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`SetData`メソッド。 まず、コンポーネントを作成します (`myComponent`) し、データ オブジェクトに格納 (`myDataObject`) を使用して、`myType`データ形式を指定します。 指定した型のデータが、オブジェクトに格納され、メッセージ ボックスに結果を表示するかどうかがチェックされます。 この例では作成した、<xref:System.Windows.Forms.Form>という`Form1`。  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">データに関連付けられている形式。 定義済みの形式については、<see cref="T:System.Windows.Forms.DataFormats" /> のトピックを参照してください。</param>
        <param name="autoConvert">データを別の形式に変換できるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="data">格納するデータ。</param>
        <summary>指定されているデータおよびそのデータに関連付けられている形式をインスタンスに格納します。データを別の形式に変換できるかどうかを確認するためにブール値を使用します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 対象アプリケーションの形式がわからない場合は、このメソッドを使用して複数の形式でデータを格納できます。  
  
 このメソッドの実装は、次を参照してください。<xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 この例では、<xref:System.Windows.Forms.DataObject>クラスを実装`IDataObject`の使用を示すために、`SetData`メソッド。 まず、データ オブジェクトを作成します (`myDataObject`) を格納し、 `UnicodeText` 、文字列、`autoConvert`パラメーターに設定`false`します。 次に、オブジェクトに格納されたデータに関連付けられている形式を取得し、メッセージ ボックスに結果を表示します。 データに関連付けられている唯一の形式は、`UnicodeText`形式。 この例では、作成した、<xref:System.Windows.Forms.Form>という`Form1`します。  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>