<Type Name="ContextMenu" FullName="System.Windows.Forms.ContextMenu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2dc306ce508cf6635105b4b95f14eaae372393bd" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53484500" /></Metadata><TypeSignature Language="C#" Value="public class ContextMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ContextMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ContextMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class ContextMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class ContextMenu : System::Windows::Forms::Menu" />
  <TypeSignature Language="F#" Value="type ContextMenu = class&#xA;    inherit Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.DefaultEvent("Popup")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>ショートカット メニューを表します。 <see cref="T:System.Windows.Forms.ContextMenuStrip" /> コントロールは、以前のバージョンの <see cref="T:System.Windows.Forms.ContextMenu" /> コントロールに代わると共に追加の機能を提供します。ただし、<see cref="T:System.Windows.Forms.ContextMenu" /> コントロールは、下位互換性を保つ目的および将来使用する目的で保持されます。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ContextMenu>クラスは、コントロールまたはフォームの領域の上にマウスの右ボタンをクリックすると表示されるショートカット メニューを表します。 ショートカット メニューは通常から別のメニュー項目を組み合わせて使用、<xref:System.Windows.Forms.MainMenu>のユーザーがアプリケーションのコンテキストを指定した場合に便利な形式です。 たとえばに割り当てられているショートカット メニューを使用することができます、<xref:System.Windows.Forms.TextBox>コントロール、またはコピーとテキストの貼り付けのクリップボード機能内のテキストの検索、テキストのフォントを変更するためのメニュー項目を提供するコントロール。 表示することも新しい<xref:System.Windows.Forms.MenuItem>内にないオブジェクトのショートカット メニューで、<xref:System.Windows.Forms.MainMenu>が適していない状況特定のコマンドを提供する、<xref:System.Windows.Forms.MainMenu>を表示します。  
  
 通常、ユーザーがコントロールまたはフォーム自体でマウスの右ボタンをクリックすると、ショートカット メニューが表示されます。 表示されているコントロールと<xref:System.Windows.Forms.Form>が、<xref:System.Windows.Forms.Control.ContextMenu%2A>をバインドするプロパティ、<xref:System.Windows.Forms.ContextMenu>クラスのショートカット メニューを表示するコントロールにします。 1 つ以上のコントロールを使用できます、<xref:System.Windows.Forms.ContextMenu>します。 使用することができます、<xref:System.Windows.Forms.ContextMenu.SourceControl%2A>プロパティのコントロールは、コントロールに固有のタスクを実行するために、または、コントロールに表示されるショートカット メニューを変更する最後のショートカット メニューを表示します。  
  
 チェック マークを設定、アイテムを無効にし、メニューは、ユーザーに表示される前に] メニューの [その他のタスクを実行するには、ショートカット メニューを表示されていることを認識する可能性があります。 処理することができます、<xref:System.Windows.Forms.ContextMenu.Popup>ショートカット メニューが表示されている場合を決定するイベントです。  
  
> [!NOTE]
>  再利用するために<xref:System.Windows.Forms.MenuItem>オブジェクトに表示される、<xref:System.Windows.Forms.MainMenu>で使用するため、 <xref:System.Windows.Forms.ContextMenu>、メニューを使用して、コピーを作成する必要があります、<xref:System.Windows.Forms.MenuItem.CloneMenu%2A>のメソッド、<xref:System.Windows.Forms.MenuItem>クラス。 1 つに、メニュー項目とそのサブメニュー項目をマージすることも<xref:System.Windows.Forms.MenuItem>オブジェクトを使用して、<xref:System.Windows.Forms.MenuItem.MergeMenu%2A>のメソッド、<xref:System.Windows.Forms.MenuItem>クラス。  
  
   
  
## Examples  
 次のコード例のイベント ハンドラーを作成し、<xref:System.Windows.Forms.ContextMenu.Popup>のイベント、<xref:System.Windows.Forms.ContextMenu>します。 イベント ハンドラーのコードでは、2 つのコントロールのことが決定、<xref:System.Windows.Forms.PictureBox>という名前`pictureBox1`と<xref:System.Windows.Forms.TextBox>という名前`textBox1`ショートカット メニューを表示するコントロールです。 どのコントロールによって、 <xref:System.Windows.Forms.ContextMenu> 、ショートカット メニューを表示するコントロールを追加、適切な<xref:System.Windows.Forms.MenuItem>オブジェクトを<xref:System.Windows.Forms.ContextMenu>します。 この例では、インスタンスが必要です、<xref:System.Windows.Forms.ContextMenu>という名前のクラス`contextMenu1`フォーム内で定義されている。 またこの例ではある必要があります、<xref:System.Windows.Forms.TextBox>と<xref:System.Windows.Forms.PictureBox>フォームに追加、<xref:System.Windows.Forms.Control.ContextMenu%2A>これらのコントロールのプロパティに設定されて`contextMenu1`します。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="T:System.Windows.Forms.MainMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ContextMenu" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>メニュー項目を指定せずに、<see cref="T:System.Windows.Forms.ContextMenu" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンのコンス トラクターを使用したメニュー項目を追加できます、<xref:System.Windows.Forms.ContextMenu>を使用して、<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.Menu.MenuItemCollection>クラス。 アクセスできる、<xref:System.Windows.Forms.Menu.MenuItemCollection>を通じて、<xref:System.Windows.Forms.Menu.MenuItems%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ContextMenu (System.Windows.Forms.MenuItem[] menuItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] menuItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (menuItems As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ContextMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ menuItems);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ContextMenu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.ContextMenu" Usage="new System.Windows.Forms.ContextMenu menuItems" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="menuItems" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="menuItems">ショートカット メニューに追加するメニュー項目を表す <see cref="T:System.Windows.Forms.MenuItem" /> オブジェクトの配列。</param>
        <summary>一連の <see cref="T:System.Windows.Forms.ContextMenu" /> オブジェクトを指定して、<see cref="T:System.Windows.Forms.MenuItem" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 作成するコンス トラクターのこのバージョンを使用することができます、<xref:System.Windows.Forms.ContextMenu>を持つ、そのメニュー項目を作成時に指定します。 コンス トラクターのこのバージョンが使用されるに追加のメニュー項目を追加することができます、<xref:System.Windows.Forms.ContextMenu>を使用して、<xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.Menu.MenuItemCollection>クラス。 アクセスできる、<xref:System.Windows.Forms.Menu.MenuItemCollection>を通じて、<xref:System.Windows.Forms.Menu.MenuItems%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例を示しますのショートカット メニューの構築と使用、<xref:System.Windows.Forms.ContextMenu.Show%2A>メソッド。 例を実行するには、Button1 という名前のボタンを含むフォームで、次のコードを貼り付けます。 すべてのイベントがイベント処理メソッドに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberSignature Language="F#" Value="member this.Collapse : EventHandler " Usage="member this.Collapse : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ショートカット メニューが折りたたまれたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ContextMenu.Collapse>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ContextMenu>という`ContextMenu1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ContextMenu.Collapse>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#170](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#170)]
 [!code-vb[System.Windows.Forms.EventExamples#170](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#170)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCollapse : EventArgs -&gt; unit&#xA;override this.OnCollapse : EventArgs -&gt; unit" Usage="contextMenu.OnCollapse e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ContextMenu.Collapse" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected internal virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPopup : EventArgs -&gt; unit&#xA;override this.OnPopup : EventArgs -&gt; unit" Usage="contextMenu.OnPopup e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ContextMenu.Popup" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ContextMenu.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberSignature Language="F#" Value="member this.Popup : EventHandler " Usage="member this.Popup : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ショートカット メニューが表示される前に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは初期化に使用することができます、<xref:System.Windows.Forms.MenuItem>オブジェクトに表示されます。 使用する場合など、 <xref:System.Windows.Forms.ContextMenu> 3 つの<xref:System.Windows.Forms.TextBox>コントロールとは、特定のメニュー項目を無効にする、<xref:System.Windows.Forms.ContextMenu>に応じて<xref:System.Windows.Forms.TextBox>がショートカット メニューを表示するには、このイベントのイベント ハンドラーを作成することができます。 使って、<xref:System.Windows.Forms.ContextMenu.SourceControl%2A>判断するためにプロパティ<xref:System.Windows.Forms.TextBox>表示しようとしていますが、 <xref:System.Windows.Forms.ContextMenu> 、適切なを無効にして<xref:System.Windows.Forms.MenuItem>オブジェクト。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例のイベント ハンドラーを作成し、<xref:System.Windows.Forms.ContextMenu.Popup>のイベント、<xref:System.Windows.Forms.ContextMenu>します。 イベント ハンドラーのコードでは、2 つのコントロールのことが決定、<xref:System.Windows.Forms.PictureBox>という名前`pictureBox1`と<xref:System.Windows.Forms.TextBox>という名前`textBox1`ショートカット メニューを表示するコントロールです。 どのコントロールによって、 <xref:System.Windows.Forms.ContextMenu> 、ショートカット メニューを表示するコントロールを追加、適切な<xref:System.Windows.Forms.MenuItem>オブジェクトを<xref:System.Windows.Forms.ContextMenu>します。 この例では、インスタンスが必要です、<xref:System.Windows.Forms.ContextMenu>という名前のクラス`contextMenu1`フォーム内で定義されている。 またこの例ではある必要があります、<xref:System.Windows.Forms.TextBox>と<xref:System.Windows.Forms.PictureBox>フォームに追加、<xref:System.Windows.Forms.Control.ContextMenu%2A>これらのコントロールのプロパティに設定されて`contextMenu1`します。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData, System.Windows.Forms.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData, class System.Windows.Forms.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys,System.Windows.Forms.Control)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData, System::Windows::Forms::Control ^ control);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys * System.Windows.Forms.Control -&gt; bool" Usage="contextMenu.ProcessCmdKey (msg, keyData, control)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
      </Parameters>
      <Docs>
        <param name="msg">処理するウィンドウ メッセージを表す、参照渡しされた <see cref="T:System.Windows.Forms.Message" />。</param>
        <param name="keyData">処理するキーを表す <see cref="T:System.Windows.Forms.Keys" /> 値の 1 つ。</param>
        <param name="control">コマンド キーの適用先のコントロール。</param>
        <summary>コマンド キーを処理します。</summary>
        <returns>文字がコントロールによって処理された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドは、メッセージのプリプロセス コマンド キーを処理中に呼び出されます。 コマンド キーは、通常の入力キーに常に優先されるキーです。 コマンド キーの例には、アクセラレータやメニューのショートカットが含まれます。 メソッドが返す必要があります`true`コマンド キーを処理したことを示すまたは`false`をキーは、コマンド キーではないことを示します。 このメソッドは、コントロールは、Windows フォーム アプリケーションまたは ActiveX コントロールとしてホストされている場合にのみ呼び出されます。  
  
 <xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A>メソッドはまず、コントロールがあるかどうかを判断、 <xref:System.Windows.Forms.ContextMenu>、でき、そうである場合、<xref:System.Windows.Forms.ContextMenu>コマンド キーを処理します。 親のキーが渡されるコマンド キーが メニューのショートカット、コントロールに親がある場合は、<xref:System.Windows.Forms.ContextMenu.ProcessCmdKey%2A>メソッド。 実質的な効果は、そのコマンドのキーは「バブル」コントロールの階層構造です。 だけでなく、ユーザーが押されたキー、キーのデータもかを示しますでの修飾キーが押された場合に、キーと同時にします。 修飾子キーには、shift キーを押し、CTRL、ALT キーが含まれます。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">アンマネージ コードを呼び出す直前の呼び出し元。 関連付けられた列挙体。 <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <block subset="none" type="overrides"><para>オーバーライドする場合、<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />派生クラスでメソッドをコントロールを返します<see langword="true" />をキーが処理されたことを示します。 基本クラスの呼び出しの結果、コントロールによって処理されないキー<see cref="M:System.Windows.Forms.Control.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />メソッドが返される必要があります。 コントロールがこのメソッドをオーバーライドする必要はほとんどありません。</para></block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeft : System.Windows.Forms.RightToLeft with get, set" Usage="System.Windows.Forms.ContextMenu.RightToLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがテキストを右から左に表示するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.RightToLeft" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、右から左に記述されている言語をサポートするために、メニューを使用できます。 このプロパティに設定しているときに`RightToLeft.Yes`、メニュー項目のテキストが右から左右のメソッドからの既定ではなく左に表示されます。  
  
> [!NOTE]
>  右から左への配置を有効にすると、Windows フォーム コントロールにどのように影響する方法の詳細については、次を参照してください。、<xref:System.Windows.Forms.Control.RightToLeft%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">プロパティに割り当てられた値が <see cref="T:System.Windows.Forms.RightToLeft" /> 列挙体の有効なメンバーではありません。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Show">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した位置にショートカット メニューを表示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point -&gt; unit" Usage="contextMenu.Show (control, pos)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="control">ショートカット メニューが関連付けられたコントロールを指定する <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="pos">メニューを表示する座標を指定する <see cref="T:System.Drawing.Point" />。 座標は、<paramref name="control" /> パラメーターで指定したコントロールのクライアント座標に対して相対的に指定されます。</param>
        <summary>指定した位置にショートカット メニューを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常、<xref:System.Windows.Forms.ContextMenu>ユーザー コントロールまたはフォームの領域でマウスの右ボタンをクリックしたときに表示を<xref:System.Windows.Forms.ContextMenu>にバインドされます。 このメソッドを使用して、手動で特定の場所でショートカット メニューを表示して特定のコントロールにバインドすることができます。 このメソッドには、メニューが閉じられるまでは返しません。  
  
   
  
## Examples  
 次のコード例を示しますのショートカット メニューの構築と使用、<xref:System.Windows.Forms.ContextMenu.Show%2A>メソッド。 例を実行するには、Button1 という名前のボタンを含むフォームで、次のコードを貼り付けます。 すべてのイベントがイベント処理メソッドに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ManualContextMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ManualContextMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="control" /> パラメーターが <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">コントロールのハンドルが存在しないか、コントロールが表示されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (System.Windows.Forms.Control control, System.Drawing.Point pos, System.Windows.Forms.LeftRightAlignment alignment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class System.Windows.Forms.Control control, valuetype System.Drawing.Point pos, valuetype System.Windows.Forms.LeftRightAlignment alignment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ContextMenu.Show(System.Windows.Forms.Control,System.Drawing.Point,System.Windows.Forms.LeftRightAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Show(System::Windows::Forms::Control ^ control, System::Drawing::Point pos, System::Windows::Forms::LeftRightAlignment alignment);" />
      <MemberSignature Language="F#" Value="member this.Show : System.Windows.Forms.Control * System.Drawing.Point * System.Windows.Forms.LeftRightAlignment -&gt; unit" Usage="contextMenu.Show (control, pos, alignment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Windows.Forms.Control" />
        <Parameter Name="pos" Type="System.Drawing.Point" />
        <Parameter Name="alignment" Type="System.Windows.Forms.LeftRightAlignment" />
      </Parameters>
      <Docs>
        <param name="control">ショートカット メニューが関連付けられたコントロールを指定する <see cref="T:System.Windows.Forms.Control" />。</param>
        <param name="pos">メニューを表示する座標を指定する <see cref="T:System.Drawing.Point" />。 座標は、<paramref name="control" /> パラメーターで指定したコントロールのクライアント座標に対して相対的に指定されます。</param>
        <param name="alignment">コントロールの配置を <paramref name="pos" /> パラメーターを基準に相対的に指定する <see cref="T:System.Windows.Forms.LeftRightAlignment" />。</param>
        <summary>位置および配置を指定してショートカット メニューを表示します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceControl">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control SourceControl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control SourceControl" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SourceControl As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ SourceControl { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SourceControl : System.Windows.Forms.Control" Usage="System.Windows.Forms.ContextMenu.SourceControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ショートカット メニューを表示しているコントロールを取得します。</summary>
        <value>ショートカット メニューを表示しているコントロールを表す <see cref="T:System.Windows.Forms.Control" />。 ショートカット メニューを表示しているコントロールがない場合、このプロパティは <see langword="null" /> を返します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティがで定義されているショートカット メニューを使用するコントロールが表示されますが現在を決定する、<xref:System.Windows.Forms.ContextMenu>します。 ショートカット メニューが表示されていない場合は、どのコントロールが最後に、ショートカット メニューを表示するかを判断するこのプロパティを使用できます。 このプロパティを使用することができます、<xref:System.Windows.Forms.ContextMenu.Popup>イベントをコントロールに適切なメニュー項目を表示することを確認します。 このプロパティを使用して、ショートカット メニューに表示されるメニュー コマンドに関連付けられているタスクを実行するメソッドに、コントロールへの参照を渡すことができますも。 <xref:System.Windows.Forms.Form>クラスから継承<xref:System.Windows.Forms.Control>場合、に、このプロパティを使用することもできます、<xref:System.Windows.Forms.ContextMenu>フォームに関連付けられています。  
  
   
  
## Examples  
 次のコード例のイベント ハンドラーを作成し、<xref:System.Windows.Forms.ContextMenu.Popup>のイベント、<xref:System.Windows.Forms.ContextMenu>します。 イベント ハンドラーのコードでは、2 つのコントロールのことが決定、<xref:System.Windows.Forms.PictureBox>という名前`pictureBox1`と<xref:System.Windows.Forms.TextBox>という名前`textBox1`ショートカット メニューを表示するコントロールです。 どのコントロールによって、 <xref:System.Windows.Forms.ContextMenu> 、ショートカット メニューを表示するコントロールを追加、適切な<xref:System.Windows.Forms.MenuItem>オブジェクトを<xref:System.Windows.Forms.ContextMenu>します。 この例では、インスタンスが必要です、<xref:System.Windows.Forms.ContextMenu>という名前のクラス`contextMenu1`フォーム内で定義されている。 またこの例ではある必要があります、<xref:System.Windows.Forms.TextBox>と<xref:System.Windows.Forms.PictureBox>フォームに追加、<xref:System.Windows.Forms.Control.ContextMenu%2A>これらのコントロールのプロパティに設定されて`contextMenu1`します。  
  
 [!code-cpp[Classic ContextMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ContextMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ContextMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ContextMenu Example/CS/source.cs#1)]
 [!code-vb[Classic ContextMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ContextMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>