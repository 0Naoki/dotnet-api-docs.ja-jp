<Type Name="Cursor" FullName="System.Windows.Forms.Cursor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e8cf468bc493a426f0c909ac5571fe37cd37eb18" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30640366" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class Cursor : IDisposable, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit Cursor extends System.Object implements class System.IDisposable, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Cursor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Cursor&#xA;Implements IDisposable, ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Cursor sealed : IDisposable, System::Runtime::Serialization::ISerializable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Editor("System.Drawing.Design.CursorEditor, System.Drawing.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.CursorConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>マウス ポインターの描画に使用されるイメージを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カーソルは、画面上の場所は、マウス、ペン、ボールなどのポインティング デバイスによって制御される小さな画像です。 ユーザーがポインティング デバイスを移動すると、オペレーティング システムがそれに応じて、カーソルを移動します。  
  
 別のカーソルの形状は、マウス操作をユーザーに通知するために使用されます。 例では、編集、または、テキストを選択するときの<xref:System.Windows.Forms.Cursors.IBeam%2A?displayProperty=nameWithType>カーソルが通常表示されます。 待機カーソルは、通常、プロセスが現在実行されているユーザーを通知するために使用されます。 プロセス、ユーザーが待機する必要がありますの例についてをファイルに保存されたり、コントロールなど、ファイルを開いている、 <xref:System.Windows.Forms.DataGrid>、<xref:System.Windows.Forms.ListBox>または<xref:System.Windows.Forms.TreeView>大量のデータにします。  
  
 派生するすべてのコントロール、<xref:System.Windows.Forms.Control>クラスが、<xref:System.Windows.Forms.Control.Cursor%2A>プロパティです。 マウス ポインターがコントロールの境界内にある場合に表示されるカーソルを変更するに割り当てる、<xref:System.Windows.Forms.Cursor>を<xref:System.Windows.Forms.Control.Cursor%2A>コントロールのプロパティです。 割り当てることによって、アプリケーション レベルでカーソルを表示することができます、<xref:System.Windows.Forms.Cursor>を<xref:System.Windows.Forms.Cursor.Current%2A>プロパティです。 たとえば場合、アプリケーションの目的は、テキスト ファイルを編集するのには、可能性があります設定する、<xref:System.Windows.Forms.Cursor.Current%2A>プロパティを<xref:System.Windows.Forms.Cursors.WaitCursor%2A?displayProperty=nameWithType>中に表示される待機カーソル アプリケーション経由でファイルの読み込みし、保存を任意のマウス イベントが処理されていることを防ぐためにします。 プロセスが完了したら、設定、<xref:System.Windows.Forms.Cursor.Current%2A>プロパティを<xref:System.Windows.Forms.Cursors.Default%2A?displayProperty=nameWithType>コントロールの種類ごとに適切なカーソルを表示するアプリケーション。  
  
> [!NOTE]
>  呼び出す場合<xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType>リセットする前に、<xref:System.Windows.Forms.Cursor.Current%2A>プロパティ、<xref:System.Windows.Forms.Cursors.Default%2A?displayProperty=nameWithType>カーソル、アプリケーションはマウス イベントのリッスンを再開し、適切な表示を再開<xref:System.Windows.Forms.Cursor>アプリケーションの各コントロールに対してです。  
  
 既存のハンドルなど、いくつかのソースからカーソル オブジェクトを作成できます<xref:System.Windows.Forms.Cursor>、標準的な<xref:System.Windows.Forms.Cursor>ファイル、リソース、またはデータ ストリーム。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Cursor>クラスがアニメーション化されたカーソル (.ani ファイル) または黒と白以外の色でカーソルをサポートしていません。  
  
 使用することができます、カーソルとして使用するイメージが小さすぎる場合、<xref:System.Windows.Forms.Cursor.DrawStretched%2A>カーソルの境界を占めるように画像を強制する方法です。 一時的に非表示にする、カーソルを呼び出して、<xref:System.Windows.Forms.Cursor.Hide%2A>メソッドを呼び出すことによって、復元、<xref:System.Windows.Forms.Cursor.Show%2A>メソッドです。  
  
 .NET Framework 4.5.2、以降の<xref:System.Windows.Forms.Cursor>app.config ファイルには、次のエントリが含まれている場合は、システム DPI 設定に基づいてのサイズ変更されます。  
  
```  
<appSettings>  
  <add key="EnableWindowsFormsHighDpiAutoResizing" value="true" />  
</appSettings>  
```  
  
   
  
## Examples  
 次のコード例では、カスタムのカーソルを使用する方法を示すフォームを表示します。 カスタム<xref:System.Windows.Forms.Cursor>アプリケーションのリソース ファイルに埋め込まれています。 例では、という名前のカーソル ファイルに含まれているカーソルを必要と`MyCursor.cur`です。 コマンドラインを使用して、この例をコンパイルするには、次のフラグを含めます。 `/res:MyCursor.Cur, CustomCursor.MyCursor.Cur`  
  
 [!code-csharp[System.Windows.Forms.Cursor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor/CS/customcursor.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor/VB/customcursor.vb#1)]  
  
 次のコード例にある顧客情報が表示されます、<xref:System.Windows.Forms.TreeView>コントロール。 ツリーのルート ノードは、顧客名を表示し、子ツリー ノードは、各顧客に割り当てられている注文番号を表示します。 この例では、1,000 人の顧客が 15 の注文に表示されます。 再描画する、<xref:System.Windows.Forms.TreeView>を使用して抑制、<xref:System.Windows.Forms.TreeView.BeginUpdate%2A>と<xref:System.Windows.Forms.TreeView.EndUpdate%2A>メソッド、および待機<xref:System.Windows.Forms.Cursor>が表示されます中に、<xref:System.Windows.Forms.TreeView>を作成し、描画、<xref:System.Windows.Forms.TreeNode>オブジェクト。 この例では、という名前のカーソル ファイルがある必要があります`MyWait.cur`アプリケーション ディレクトリにします。 必要です、`Customer`オブジェクトのコレクションが保持できる`Order`オブジェクト、およびのインスタンスが作成されたこと、<xref:System.Windows.Forms.TreeView>の control 権限、<xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.Cursors" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Cursor" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(IntPtr handle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">作成するカーソルの Windows ハンドルを表す <see cref="T:System.IntPtr" />。</param>
        <summary>指定した Windows ハンドルで <see cref="T:System.Windows.Forms.Cursor" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 完了したことと、カーソル ハンドルを解放する必要があります。 リソースの破棄に関する詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)です。  
  
   
  
## Examples  
 次のコード例からカーソルを作成、<xref:System.Windows.Forms.Cursor.Current%2A>カーソルの<xref:System.Windows.Forms.Cursor.Handle%2A>、その位置とクリッピング四角形を変更します。 カーソルに移動、左から 50 ピクセルが、コードの実行時になります。 フォームの境界内にカーソルのクリッピング四角形を変更するさらに、(既定では、ユーザーの画面全体)。 この例では、ある必要があります、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Button>がクリックされたときに、このコードを呼び出すためです。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="handle" /> は <see cref="F:System.IntPtr.Zero" />です。</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.Windows.Forms.Cursor" /> の読み込み元のデータ ストリーム。</param>
        <summary>指定したデータ ストリームで <see cref="T:System.Windows.Forms.Cursor" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたデータ ストリーム`stream`カーソル (.cur) ファイルを含める必要があります。  
  
> [!NOTE]
>  は、アニメーション カーソル (.ani ファイル) はサポートされていない、<xref:System.Windows.Forms.Cursor>クラスです。  
  
   
  
## Examples  
 次のコード例からカーソルを読み込む、<xref:System.IO.Stream>によって作成された、<xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A>のメソッド、<xref:System.Windows.Forms.OpenFileDialog>です。 メソッドが呼び出されたときに、<xref:System.Windows.Forms.OpenFileDialog>をユーザーに表示されるとタイミング、します。 設定の異なるファイルを選択し、ダイアログを閉じる、ファイルが開かれていると、<xref:System.IO.Stream>返される作成に使用される、<xref:System.Windows.Forms.Cursor>です。  
  
 [!code-cpp[CursorFromResource#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CursorFromResource/CPP/mycursor.cpp#1)]
 [!code-csharp[CursorFromResource#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CursorFromResource/CS/mycursor.cs#1)]
 [!code-vb[CursorFromResource#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CursorFromResource/VB/mycursor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IO.Stream" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">読み込むカーソル ファイル。</param>
        <summary>指定したファイルで <see cref="T:System.Windows.Forms.Cursor" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `fileName`パラメーターは、標準的なカーソル (.cur) ファイルを参照する必要があります。  
  
> [!NOTE]
>  は、アニメーション カーソル (.ani ファイル) はサポートされていない、<xref:System.Windows.Forms.Cursor>クラスです。  
  
   
  
## Examples  
 次のコード例にある顧客情報が表示されます、<xref:System.Windows.Forms.TreeView>コントロール。 ツリーのルート ノードは、顧客名を表示し、子ツリー ノードは、各顧客に割り当てられている注文番号を表示します。 この例では、1,000 人の顧客が 15 の注文に表示されます。 再描画する、<xref:System.Windows.Forms.TreeView>を使用して抑制、<xref:System.Windows.Forms.TreeView.BeginUpdate%2A>と<xref:System.Windows.Forms.TreeView.EndUpdate%2A>メソッド、および待機<xref:System.Windows.Forms.Cursor>が表示されます中に、<xref:System.Windows.Forms.TreeView>を作成し、描画、<xref:System.Windows.Forms.TreeNode>オブジェクト。 この例では、ある必要があります、`Customer`オブジェクトのコレクションが保持できる`Order`オブジェクト。 インスタンスを作成することも必要です、<xref:System.Windows.Forms.TreeView>の control 権限、<xref:System.Windows.Forms.Form>です。  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Cursor (Type type, string resource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type type, string resource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.#ctor(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Cursor(Type ^ type, System::String ^ resource);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resource" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">リソース <see cref="T:System.Type" />。</param>
        <param name="resource">リソースの名前。</param>
        <summary>指定したリソースの種類を使用し、指定したリソースから <see cref="T:System.Windows.Forms.Cursor" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 カーソルをアプリケーション内でリソースとして埋め込む方法の例を次に示します。 埋め込むには、リソースをリソース名の後に、コンマ、そのアセンブリの完全パスを参照します。 埋め込みリソースからカーソルを読み込む方法について説明する例を参照してください。  
  
```  
Using the C# compiler:  
csc /resource:"MyWaitCursor.cur","MyCursors.MyWaitCursor.cur" MyCursor.cs  
Using the Visual Basic compiler:  
vbc /resource:"MyWaitCursor.cur","MyCursors.MyWaitCursor.cur" MyCursor.vb  
```  
  
> [!NOTE]
>  リソース参照コンパイルするときにだけでなく、コードで参照するときは、c# および Visual Basic 両方のコンパイラの大文字小文字を区別します。  
  
   
  
## Examples  
 次のコード例を使用して、カスタムのカーソルの使用方法を示すフォームが表示されます、<xref:System.Windows.Forms.Cursor.%23ctor%2A>コンス トラクターです。 カスタム<xref:System.Windows.Forms.Cursor>アプリケーションのリソース ファイルに埋め込まれています。 例では、カーソルをという名前のカーソル ファイルに含まれている必要があります。`MyCursor.cur`です。 コマンドラインを使用して、この例をコンパイルするには、次のフラグを含めます。 `/res:MyCursor.Cur, CustomCursor.MyCursor.Cur`  
  
 [!code-csharp[System.Windows.Forms.Cursor#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor/CS/customcursor.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor/VB/customcursor.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clip">
      <MemberSignature Language="C#" Value="public static System.Drawing.Rectangle Clip { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Rectangle Clip" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Clip" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Clip As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Rectangle Clip { System::Drawing::Rectangle get(); void set(System::Drawing::Rectangle value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルのクリッピング四角形を表す境界を取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Cursor" /> のクリッピング四角形を画面座標で表す <see cref="T:System.Drawing.Rectangle" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クリップされたカーソルは、クリッピング四角形内でのみの移動を許可します。 一般に、システムにより、このマウスがキャプチャされている場合にのみです。 カーソルが現在クリップされていない場合、結果として得られる四角形には、画面全体のサイズが含まれています。  
  
   
  
## Examples  
 次のコード例からカーソルを作成、<xref:System.Windows.Forms.Cursor.Current%2A>カーソルの<xref:System.Windows.Forms.Cursor.Handle%2A>、その位置とクリッピング四角形を変更します。 カーソルに移動、左から 50 ピクセルが、コードの実行時になります。 フォームの境界内にカーソルのクリッピング四角形を変更するさらに、(既定では、ユーザーの画面全体)。 この例では、ある必要があります、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Button>がクリックされたときに、このコードを呼び出すためです。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">このプロパティを設定するすべてのウィンドウ。 関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="CopyHandle">
      <MemberSignature Language="C#" Value="public IntPtr CopyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int CopyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.CopyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr CopyHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.Cursor" /> のハンドルをコピーします。</summary>
        <returns>カーソルのハンドルを表す <see cref="T:System.IntPtr" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドの呼び出しの結果として作成されたハンドルが完了したら、それは破棄されませんのガベージ コレクターによってためときに破棄する必要があります。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IntPtr" />
        <altmember cref="M:System.Windows.Forms.Cursor.Dispose" />
        <altmember cref="T:System.GC" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.Cursor Current { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Forms.Cursor Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Current" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Current As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Forms::Cursor ^ Current { System::Windows::Forms::Cursor ^ get(); void set(System::Windows::Forms::Cursor ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス カーソルを表すカーソル オブジェクトを取得または設定します。</summary>
        <value>マウス カーソルを表す <see cref="T:System.Windows.Forms.Cursor" />。 マウス カーソルが表示されない場合、既定値は <see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、<xref:System.Windows.Forms.Cursor.Current%2A>プロパティが現在表示されているカーソルを変更します。 アプリケーションは、マウス イベントをリッスンするように続行できません。 アプリケーションが実行時間の長い操作中のマウス イベントに応答する必要があることを通知するには、使用、<xref:System.Windows.Forms.Application.UseWaitCursor%2A>プロパティです。 ただし、ほとんどの場合は、バック グラウンド スレッドを使用して、実行時間の長い操作を管理し、ユーザーがアクセスできるユーザー インターフェイスのままにする方が適切です。 バック グラウンド タスクを簡単に実装の詳細については、次を参照してください。<xref:System.ComponentModel.BackgroundWorker>です。  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">このプロパティを設定する安全なサブウィンドウです。 関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeSubWindows" /></permission>
        <altmember cref="M:System.Windows.Forms.Application.DoEvents" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Cursor" /> によって使用されているすべてのリソースを解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Cursor.Dispose%2A> を使い終わったら <xref:System.Windows.Forms.Cursor> を呼び出します。 `Dispose` メソッドによって、<xref:System.Windows.Forms.Cursor> は使用不可の状態になります。 呼び出した後<xref:System.Windows.Forms.Cursor.Dispose%2A>へのすべての参照を解放する必要があります、<xref:System.Windows.Forms.Cursor>ガベージ コレクターがメモリを再利用できるようにする、<xref:System.Windows.Forms.Cursor>占有されていた。 詳細については、次を参照してください。[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.Cursor.Dispose%2A> への最後の参照を解放する前に、必ず <xref:System.Windows.Forms.Cursor> を呼び出してください。 それ以外の場合、ガベージ コレクターによって解放されるまで、使用されているリソースは解放されません。  
  
   
  
## Examples  
 次のコード例では、フォームの通常のサイズとストレッチ モードで 2 倍のサイズを指定したカーソルを描画します。 この例は、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Cursor>を渡すメソッドが呼び出されるとします。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public void Draw (System.Drawing.Graphics g, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Draw(class System.Drawing.Graphics g, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Draw (g As Graphics, targetRect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Draw(System::Drawing::Graphics ^ g, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Cursor" /> が描画される <see cref="T:System.Drawing.Graphics" /> 表面。</param>
        <param name="targetRect">
          <see cref="T:System.Windows.Forms.Cursor" /> の境界を表す <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>カーソルを、指定した範囲内の、指定した表面に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって表されるグラフィックスの表面上で発生した描画コマンド、`g`パラメーターが、<xref:System.Drawing.Graphics>への呼び出しを渡すために、既存のイメージをレンダリングする方法に関する情報を含まない、<xref:System.Windows.Forms.Cursor>です。 <xref:System.Windows.Forms.Cursor.Draw%2A>メソッドを指定した寸法にイメージをトリミングしを指定することができます、<xref:System.Drawing.Rectangle>を描画するために、<xref:System.Windows.Forms.Cursor>です。 このメソッドは通常、グラフィックスの表面にカーソルを描画する場合に使用されます。 たとえば、ユーザーからのカーソルの選択のダイアログがあります、<xref:System.Windows.Forms.ListBox>コントロール、またはグループの<xref:System.Windows.Forms.RadioButton>コントロール。  
  
   
  
## Examples  
 次のコード例では、フォームの通常のサイズとストレッチ モードで 2 倍のサイズを指定したカーソルを描画します。 この例では、ある必要があります、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Cursor>が呼び出されると、メソッドに渡されるオブジェクト。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.DrawStretched(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="DrawStretched">
      <MemberSignature Language="C#" Value="public void DrawStretched (System.Drawing.Graphics g, System.Drawing.Rectangle targetRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DrawStretched(class System.Drawing.Graphics g, valuetype System.Drawing.Rectangle targetRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.DrawStretched(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DrawStretched (g As Graphics, targetRect As Rectangle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DrawStretched(System::Drawing::Graphics ^ g, System::Drawing::Rectangle targetRect);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="g" Type="System.Drawing.Graphics" />
        <Parameter Name="targetRect" Type="System.Drawing.Rectangle" />
      </Parameters>
      <Docs>
        <param name="g">
          <see cref="T:System.Windows.Forms.Cursor" /> が描画される <see cref="T:System.Drawing.Graphics" /> 表面。</param>
        <param name="targetRect">
          <see cref="T:System.Windows.Forms.Cursor" /> の境界を表す <see cref="T:System.Drawing.Rectangle" />。</param>
        <summary>カーソルを拡大した書式で、指定した範囲内の、指定した表面に描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 によって表されるグラフィックスの表面上で発生した描画コマンド、`g`パラメーターが、<xref:System.Drawing.Graphics>オブジェクトにへの呼び出しを渡すために、既存のイメージをレンダリングする方法に関する情報が含まれていません、<xref:System.Windows.Forms.Cursor>オブジェクト。 <xref:System.Windows.Forms.Cursor.DrawStretched%2A>メソッドに指定されたイメージの伸縮<xref:System.Drawing.Rectangle>カーソルを描画するときにします。  
  
   
  
## Examples  
 次のコード例では、フォームの通常のサイズとストレッチ モードで 2 倍のサイズを指定したカーソルを描画します。 この例では、ある必要があります、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Cursor>が呼び出されると、メソッドに渡されるオブジェクト。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.Draw(System.Drawing.Graphics,System.Drawing.Rectangle)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">比較対象の <see cref="T:System.Windows.Forms.Cursor" />。</param>
        <summary>このカーソルが、指定した <see cref="T:System.Windows.Forms.Cursor" /> に等しいかどうかを示す値を返します。</summary>
        <returns>
          カーソルが、指定した <see cref="T:System.Windows.Forms.Cursor" /> に等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例からカーソルを作成、<xref:System.Windows.Forms.Cursor.Current%2A>カーソルの<xref:System.Windows.Forms.Cursor.Handle%2A>、その位置とクリッピング四角形を変更します。 カーソルに移動、左から 50 ピクセルが、コードの実行時になります。 フォームの境界内にカーソルのクリッピング四角形を変更するさらに、(既定では、ユーザーの画面全体)。 この例は、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Button>がクリックされたときに、このコードを呼び出すためです。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Cursor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Cursor ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>オブジェクトが、ガベージ コレクションによって収集される前に、リソースの解放とその他のクリーンアップ操作の実行を試みることができるようにします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在の <see cref="T:System.Windows.Forms.Cursor" /> のハッシュ コードを取得します。</summary>
        <returns>現在の <see cref="T:System.Windows.Forms.Cursor" /> のハッシュ コード。</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Object.GetHashCode" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルのハンドルを取得します。</summary>
        <value>カーソルのハンドルを表す <see cref="T:System.IntPtr" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これは、ハンドルのコピーではありません。その破棄しません。  
  
   
  
## Examples  
 次のコード例からカーソルを作成、<xref:System.Windows.Forms.Cursor.Current%2A>カーソルの<xref:System.Windows.Forms.Cursor.Handle%2A>、その位置とクリッピング四角形を変更します。 カーソルに移動、左から 50 ピクセルが、コードの実行時になります。 フォームの境界内にカーソルのクリッピング四角形を変更するさらに、(既定では、ユーザーの画面全体)。 この例は、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Button>がクリックされたときに、このコードを呼び出すためです。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">ハンドル値は <see cref="F:System.IntPtr.Zero" /> です。</exception>
        <altmember cref="M:System.Windows.Forms.Cursor.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public static void Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Hide" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Hide ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Hide();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>カーソルを非表示にします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Cursor.Show%2A>と<xref:System.Windows.Forms.Cursor.Hide%2A>メソッドの呼び出しを分散する必要があります。 呼び出すたびに、<xref:System.Windows.Forms.Cursor.Hide%2A>メソッドに対応する呼び出しが存在する必要があります、<xref:System.Windows.Forms.Cursor.Show%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例では、マウス ポインターがボタンのクライアント領域に入ったときにカーソルを非表示にします。 同様に、マウス ポインターがボタンのクライアント領域を離れると、カーソルが再度表示されます。 この例は、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.Button>という`myButton`です。  
  
 [!code-cpp[CursorFromResource#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CursorFromResource/CPP/mycursor.cpp#3)]
 [!code-csharp[CursorFromResource#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CursorFromResource/CS/mycursor.cs#3)]
 [!code-vb[CursorFromResource#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CursorFromResource/VB/mycursor.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">すべてのウィンドウには、このメソッドを呼び出します。 関連する列挙。 <see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
        <altmember cref="M:System.Windows.Forms.Cursor.Show" />
      </Docs>
    </Member>
    <Member MemberName="HotSpot">
      <MemberSignature Language="C#" Value="public System.Drawing.Point HotSpot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point HotSpot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.HotSpot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HotSpot As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point HotSpot { System::Drawing::Point get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルのホット スポットを取得します。</summary>
        <value>カーソルのホット スポットを表す <see cref="T:System.Drawing.Point" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Cursor.HotSpot%2A>は、<xref:System.Drawing.Point>画面の他の要素と連携する、カーソル内です。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.Cursor left, System.Windows.Forms.Cursor right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.Cursor left, class System.Windows.Forms.Cursor right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.op_Equality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As Cursor, right As Cursor) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::Cursor ^ left, System::Windows::Forms::Cursor ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.Cursor" />
        <Parameter Name="right" Type="System.Windows.Forms.Cursor" />
      </Parameters>
      <Docs>
        <param name="left">比較する <see cref="T:System.Windows.Forms.Cursor" />。</param>
        <param name="right">比較する <see cref="T:System.Windows.Forms.Cursor" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.Cursor" /> クラスの 2 つのインスタンスが等しいかどうかを示す値を返します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.Cursor" /> クラスの 2 つのインスタンスが等しい場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子を同等の方法は、します。 <xref:System.Windows.Forms.Cursor.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 次のコード例では、フォームの通常のサイズとストレッチ モードで 2 倍のサイズを指定したカーソルを描画します。 この例は、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Cursor>が呼び出されると、メソッドに渡されるオブジェクト。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.op_Inequality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.Cursor left, System.Windows.Forms.Cursor right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.Cursor left, class System.Windows.Forms.Cursor right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.op_Inequality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As Cursor, right As Cursor) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::Cursor ^ left, System::Windows::Forms::Cursor ^ right);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.Cursor" />
        <Parameter Name="right" Type="System.Windows.Forms.Cursor" />
      </Parameters>
      <Docs>
        <param name="left">比較する <see cref="T:System.Windows.Forms.Cursor" />。</param>
        <param name="right">比較する <see cref="T:System.Windows.Forms.Cursor" />。</param>
        <summary>
          <see cref="T:System.Windows.Forms.Cursor" /> クラスの 2 つのインスタンスが等しくないかどうかを示す値を返します。</summary>
        <returns>
          <see cref="T:System.Windows.Forms.Cursor" /> クラスの 2 つのインスタンスが等しくない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[この演算子を同等の方法は、します。 <xref:System.Windows.Forms.Cursor.Equals%28System.Object%29?displayProperty=nameWithType>  
  
## Examples  
 次のコード例では、フォームの通常のサイズとストレッチ モードで 2 倍のサイズを指定したカーソルを描画します。 この例は、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Cursor>を渡すメソッドが呼び出されるとします。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.op_Equality(System.Windows.Forms.Cursor,System.Windows.Forms.Cursor)" />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public static System.Drawing.Point Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Position" />
      <MemberSignature Language="VB.NET" Value="Public Shared Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Drawing::Point Position { System::Drawing::Point get(); void set(System::Drawing::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソルの位置を取得または設定します。</summary>
        <value>カーソルの位置を画面座標で表す <see cref="T:System.Drawing.Point" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Cursor.Position%2A>プロパティと同じ、<xref:System.Windows.Forms.Control.MousePosition%2A?displayProperty=nameWithType>プロパティです。  
  
   
  
## Examples  
 次のコード例からカーソルを作成、<xref:System.Windows.Forms.Cursor.Current%2A>カーソルの<xref:System.Windows.Forms.Cursor.Handle%2A>、その位置とクリッピング四角形を変更します。 カーソルに移動、左から 50 ピクセルが、コードの実行時になります。 フォームの境界内にカーソルのクリッピング四角形を変更するさらに、(既定では、ユーザーの画面全体)。 この例は、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Button>がクリックされたときに、このコードを呼び出すためです。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#1)]
 [!code-csharp[System.Windows.Forms.Cursor Members#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#1)]
 [!code-vb[System.Windows.Forms.Cursor Members#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Point" />
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public static void Show ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Show() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.Show" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Show ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Show();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>カーソルを表示します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Cursor.Show%2A>と<xref:System.Windows.Forms.Cursor.Hide%2A>メソッドの呼び出しを分散する必要があります。 呼び出すたびに、<xref:System.Windows.Forms.Cursor.Hide%2A>メソッドに対応する呼び出しが存在する必要があります、<xref:System.Windows.Forms.Cursor.Show%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例では、マウス ポインターがボタンのクライアント領域に入ったときにカーソルを非表示にします。 同様に、マウス ポインターがボタンのクライアント領域を離れると、カーソルが再度表示されます。 この例は、<xref:System.Windows.Forms.Form>で、<xref:System.Windows.Forms.Button>という`myButton`です。  
  
 [!code-cpp[CursorFromResource#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CursorFromResource/CPP/mycursor.cpp#3)]
 [!code-csharp[CursorFromResource#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CursorFromResource/CS/mycursor.cs#3)]
 [!code-vb[CursorFromResource#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CursorFromResource/VB/mycursor.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Cursor.Hide" />
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Size" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>カーソル オブジェクトのサイズを取得します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Cursor" /> の幅と高さを表す <see cref="T:System.Drawing.Size" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、フォームの通常のサイズとストレッチ モードで 2 倍のサイズを指定したカーソルを描画します。 この例は、<xref:System.Windows.Forms.Form>と<xref:System.Windows.Forms.Cursor>が呼び出されると、メソッドに渡されるオブジェクト。  
  
 [!code-cpp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CPP/cursorstuff.cpp#2)]
 [!code-csharp[System.Windows.Forms.Cursor Members#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/CS/cursorstuff.cs#2)]
 [!code-vb[System.Windows.Forms.Cursor Members#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.Cursor Members/VB/cursorstuff.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Size" />
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo si, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo si, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (si As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ si, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="si" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="si">
          <see cref="T:System.Runtime.Serialization.SerializationInfo" /> クラス。</param>
        <param name="context">
          <see cref="T:System.Runtime.Serialization.StreamingContext" /> クラス。</param>
        <summary>オブジェクトをシリアル化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Cursor.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Windows.Forms.Cursor" /> に関するデータを格納するオブジェクトを取得または設定します。</summary>
        <value>
          <see cref="T:System.Windows.Forms.Cursor" /> に関するデータを格納している <see cref="T:System.Object" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Cursor.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.Cursor" /> を表すユーザーが判読できる文字列を取得します。</summary>
        <returns>この <see cref="T:System.Windows.Forms.Cursor" /> を表す <see cref="T:System.String" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>