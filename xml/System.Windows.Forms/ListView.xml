<Type Name="ListView" FullName="System.Windows.Forms.ListView">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cd7e9531f7e0ab908a8192dc3a562209ddfa345b" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56397058" /></Metadata><TypeSignature Language="C#" Value="public class ListView : System.Windows.Forms.Control" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListView extends System.Windows.Forms.Control" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListView" />
  <TypeSignature Language="VB.NET" Value="Public Class ListView&#xA;Inherits Control" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListView : System::Windows::Forms::Control" />
  <TypeSignature Language="F#" Value="type ListView = class&#xA;    inherit Control" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Control</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("SelectedIndexChanged")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Items")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Windows.Forms.Docking(System.Windows.Forms.DockingBehavior.Ask)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.ListViewDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>4 つの異なるビューの 1 つを使用して表示できる項目のコレクションを表示する、Windows リスト ビュー コントロールを表します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.ListView>コントロールでは、項目のテキストと、必要に応じて、項目の種類を識別するアイコンを持つ項目の一覧を表示できます。 たとえば、ファイルの Windows エクスプ ローラーの一覧に見た目は似ています、<xref:System.Windows.Forms.ListView>コントロール。 ファイルと、ツリーで現在選択されているフォルダーの一覧が表示されます。 各ファイルおよびフォルダーにファイルまたはフォルダーの種類を識別できるように、関連付けられているアイコンが表示されます。 <xref:System.Windows.Forms.ListViewItem>クラス内の項目を表す、<xref:System.Windows.Forms.ListView>コントロール。 一覧に表示される項目は、5 つの異なるビューのいずれかで表示できます。 大きいアイコン、小さいアイコンまたは小さいアイコンを垂直方向に一覧項目を表示できます。 項目には、サブ項目を親項目に関連する情報が含まれることもできます。 詳細ビューでは、サブ項目に表示される情報を識別する列ヘッダーを持つグリッドで、項目とそのサブ項目を表示できます。 以下に示す可用性がありますが、並べて表示ビューを使用すると、テキスト情報の横にある大きいアイコンを含むタイルとして項目とそのサブ項目を表示できます。 <xref:System.Windows.Forms.ListView> サポートの 1 つまたは複数を選択します。 複数選択機能により、ユーザーと同様の方法で項目の一覧から選択、<xref:System.Windows.Forms.ListBox>コントロール。 さらに、ユーザーは、タスクを実行する選択した項目をアクティブ化できます。 たとえば、使用する、<xref:System.Windows.Forms.ListView>アプリケーションを開いて、使用するファイルの一覧を表示するコントロール。 ユーザーを開き、ダブルクリックして、項目をアクティブ化し、アプリケーションでファイルを開くファイルを選択できます。 <xref:System.Windows.Forms.ListView>を使用して、チェック ボックスを表示することも、<xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティ、ユーザーが操作を実行し項目を確認できるようにします。 使用することができます、<xref:System.Windows.Forms.ListView>さまざまな方法で制御します。 アプリケーション、データベース、またはテキスト ファイルから情報を表示するコントロールを使用できます。 <xref:System.Windows.Forms.ListView>などを処理するファイルのセットを選択すると、ユーザーから情報を取得できます。  
  
 <xref:System.Windows.Forms.ListView> 多くの外観と動作の柔軟性を提供するプロパティを提供します。 <xref:System.Windows.Forms.ListView.View%2A>プロパティでは、項目を表示する方法を変更することができます。 <xref:System.Windows.Forms.ListView.LargeImageList%2A>、<xref:System.Windows.Forms.ListView.SmallImageList%2A>と<xref:System.Windows.Forms.ListView.StateImageList%2A>プロパティで指定できる、<xref:System.Windows.Forms.ImageList>項目の場合に表示される画像を含むオブジェクト、 <xref:System.Windows.Forms.ListView.StateImageList%2A>、チェック ボックスをときに表示される、 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティに設定されて`true`します。 どの項目がチェックするには、使用することができます、<xref:System.Windows.Forms.ListView.CheckedItems%2A>プロパティにアクセスする、<xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>コレクション。 <xref:System.Windows.Forms.ListView.Columns%2A>プロパティへのアクセスを許可する、 <xref:System.Windows.Forms.ListView.ColumnHeaderCollection>、列ヘッダーを格納しているときに表示される、<xref:System.Windows.Forms.ListView.View%2A>コントロールのプロパティに設定されて<xref:System.Windows.Forms.View.Details>します。 項目が追加、削除、<xref:System.Windows.Forms.ListView>を通じて、<xref:System.Windows.Forms.ListView.Items%2A>プロパティ。 <xref:System.Windows.Forms.ListView.Items%2A>プロパティを使用すると、アクセス、<xref:System.Windows.Forms.ListView.ListViewItemCollection>のコントロールは、コントロール内の項目を操作するためのメソッドを提供します。 ユーザーが項目のテキストを編集できるようにする場合は、使用、<xref:System.Windows.Forms.ListView.LabelEdit%2A>プロパティ。 コントロールに多数のアイテムが含まれている場合、並べ替えられた一覧に表示するユーザーを簡単には多くの場合。 使用することができます、<xref:System.Windows.Forms.ListView.Sorting%2A>プロパティをアルファベット順に並べ替えます。 外観をカスタマイズできる完全にも、<xref:System.Windows.Forms.ListView>コントロール。 これを行うには、設定、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティを`true`し、次のイベントの 1 つ以上の処理: <xref:System.Windows.Forms.ListView.DrawItem>、 <xref:System.Windows.Forms.ListView.DrawSubItem>、<xref:System.Windows.Forms.ListView.DrawColumnHeader>します。  
  
 プロパティの多くは、<xref:System.Windows.Forms.ListView>コントロールは際に使用される、<xref:System.Windows.Forms.ListView.View%2A>コントロールのプロパティに設定されて<xref:System.Windows.Forms.View.Details>します。 <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>プロパティのユーザーに許可、<xref:System.Windows.Forms.ListView>実行時に列の順序を再構成するコントロール。 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>プロパティは、アイテムとアイテムのサブ項目だけではなく選択することができます。 項目とサブ項目の境界を識別するために詳細ビューでグリッド線を表示する、 <xref:System.Windows.Forms.ListView>、使用することができます、<xref:System.Windows.Forms.ListView.GridLines%2A>プロパティ。 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティでは、表示する列ヘッダーの種類を指定することができます。  
  
 A<xref:System.Windows.Forms.ListView>コントロールが仮想モードで運用する、<xref:System.Windows.Forms.ListViewItem>に格納されているのではなくオブジェクトが動的に生成される、<xref:System.Windows.Forms.ListView.Items%2A>コレクション。 これは、非常に大きい一覧または一覧の内容が頻繁に変更を処理するための便利なことができます。 仮想モードを有効にするには設定、<xref:System.Windows.Forms.ListView.VirtualMode%2A>プロパティを`true`を処理し、 <xref:System.Windows.Forms.ListView.RetrieveVirtualItem>、 <xref:System.Windows.Forms.ListView.CacheVirtualItems>、および<xref:System.Windows.Forms.ListView.SearchForVirtualItem>イベント。  
  
 使用可能な多くのプロパティだけでなく、<xref:System.Windows.Forms.ListView>メソッドとイベントに追加の機能を提供する、アプリケーションで使用できますが、制御、<xref:System.Windows.Forms.ListView>します。 <xref:System.Windows.Forms.ListView.BeginUpdate%2A>と<xref:System.Windows.Forms.ListView.EndUpdate%2A>メソッドを使用することに多くの項目を追加するときにパフォーマンスを向上させるために、<xref:System.Windows.Forms.ListView>コントロールが項目が追加されるたびに再描画するを防ぎます。 場合、<xref:System.Windows.Forms.ListView>コントロールが項目とサブ項目を表示する次のように、ユーザーは、サブ項目を右クリックしたときに機能を提供する可能性があります。 持つサブ項目がクリックされたアイテムを確認するには、使用することができます、<xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッド。 項目の検証を実行して、ユーザーが編集した後、変更するユーザーに特定の項目を表示したい場合があります。 <xref:System.Windows.Forms.ListView.EnsureVisible%2A>特定の項目がコントロールの表示領域であることを確認するメソッドを呼び出すことができます。  
  
 場合、<xref:System.Windows.Forms.ListView.LabelEdit%2A>プロパティに設定`true`前に、と後のイベント ハンドラーを作成して変更されたテキストを編集するテキストを検証などのタスクを実行することができます、<xref:System.Windows.Forms.ListView.BeforeLabelEdit>と<xref:System.Windows.Forms.ListView.AfterLabelEdit>イベント。 ファイルを開くときに表示される項目を編集するためのダイアログ ボックスを表示するなどのタスクを実行する、 <xref:System.Windows.Forms.ListView>、イベント ハンドラーを作成することができます、<xref:System.Windows.Forms.ListView.ItemActivate>イベント。 項目の並べ替えにユーザーを許可するかどうか、<xref:System.Windows.Forms.ListView>のイベント ハンドラーを作成するには、列ヘッダーをクリックすると、<xref:System.Windows.Forms.ListView.ColumnClick>並べ替えを実行するイベントです。 ときに、<xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティに設定されて`true`、項目のチェック状態の変更が処理することによって発生した場合を決定する、<xref:System.Windows.Forms.ListView.ItemCheck>イベント。  
  
 背景イメージを設定することも、<xref:System.Windows.Forms.ListView>で、<xref:System.Windows.Forms.Control.BackgroundImage%2A>プロパティ。 アプリケーションがあります、<xref:System.STAThreadAttribute>でその`Main`の背景画像を正しく表示するメソッド、<xref:System.Windows.Forms.ListView>コントロール。 さらに場合、<xref:System.Windows.Forms.ListView>背景イメージを含むコントロールが Internet Explorer でホストされている、comctl32.dll バージョン 6.0 を背景画像が表示されるプロパティであることを確認するアプリケーションのマニフェスト ファイル内の依存アセンブリとして指定します。  
  
> [!NOTE]
>  設定、<xref:System.Windows.Forms.Control.Cursor%2A>プロパティを<xref:System.Windows.Forms.ListView>コントロール内のカーソルの外観に影響がない[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]1.1 以前のバージョン。  
  
 Windows XP および Windows Server 2003 を強化する 3 つの機能を提供、<xref:System.Windows.Forms.ListView>制御、アプリケーションを呼び出すと、<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>メソッド: タイルの表示、グループ化、および挿入マークします。  
  
 並べて表示ビューでは、大きいアイコンの横にある項目とサブ項目のテキストを表示することで、グラフィカルとテキストの情報を調整することができます。 設定、<xref:System.Windows.Forms.ListView.View%2A>プロパティを<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>この動作を有効にします。  
  
 グループ化機能を使用して、視覚的に関連するカテゴリに項目をグループ化できます。 使用して、<xref:System.Windows.Forms.ListView.Groups%2A>プロパティを追加する<xref:System.Windows.Forms.ListViewGroup>オブジェクトを<xref:System.Windows.Forms.ListView>この機能を有効にする場合を制御します。 機能を一時的に無効にするには、設定、<xref:System.Windows.Forms.ListView.ShowGroups%2A>プロパティを`false`します。  
  
 挿入マーク機能では、ドラッグ アンド ドロップの項目の格納場所を示す視覚的なフィードバックを再配置を指定できます。 使用して、<xref:System.Windows.Forms.ListViewInsertionMark>を通じてオブジェクトを取得、<xref:System.Windows.Forms.ListView.InsertionMark%2A>挿入マークを表示するプロパティ。  
  
 これらの機能は、Windows XP および Windows Server 2003 でのみ使用できます。 以前のオペレーティング システムでこれらの機能に関連するコードが影響を与えません、並べて表示ビューは、大きなアイコンのビューとして表示されますおよび挿入マークおよびグループは表示されません。 場合によっては、これらの機能は、使用できるかどうかを決定するコードを含めるし、使用可能でない場合は、代替機能を提供する可能性があります。 これらの機能は、オペレーティング システムのテーマ機能を提供するのと同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>メソッドのオーバー ロードを渡します、<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>値。  
  
 次の表にはいくつかの<xref:System.Windows.Forms.ListView>メンバーと、ビューで有効です。  
  
|ListView のメンバー|表示|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> メソッド|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> プロパティ|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> イベント|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッド|<xref:System.Windows.Forms.View.Details>、 <xref:System.Windows.Forms.View.List>、または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> メソッド|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> メソッド|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> プロパティ|除くすべてのビュー <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティ|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> プロパティ|<xref:System.Windows.Forms.View.LargeIcon>、 <xref:System.Windows.Forms.View.SmallIcon>、または <xref:System.Windows.Forms.View.Tile>|  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.Windows.Forms.ImageList" />
    <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListView();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Activation">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ItemActivation Activation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ItemActivation Activation" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Activation" />
      <MemberSignature Language="VB.NET" Value="Public Property Activation As ItemActivation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ItemActivation Activation { System::Windows::Forms::ItemActivation get(); void set(System::Windows::Forms::ItemActivation value); };" />
      <MemberSignature Language="F#" Value="member this.Activation : System.Windows.Forms.ItemActivation with get, set" Usage="System.Windows.Forms.ListView.Activation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemActivation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をアクティブにするためにユーザーが実行する必要のあるアクションの種類を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ItemActivation" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.ItemActivation.Standard" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Activation%2A>プロパティでは、ユーザーが内の項目をアクティブ化する方法を指定することができます、<xref:System.Windows.Forms.ListView>コントロール。 内の項目をアクティブ化、<xref:System.Windows.Forms.ListView>項目を選択するだけとは異なります。 項目がアクティブになる、アクションは通常のイベント ハンドラーで、<xref:System.Windows.Forms.ListView.ItemActivate>イベント。 たとえば、項目がアクティブになるファイルを開くまたは編集する項目を許可する ダイアログ ボックスを表示可能性があります。 通常、アクティブにユーザーが、項目をダブルクリックします。 場合、<xref:System.Windows.Forms.ListView.Activation%2A>プロパティに設定されて<xref:System.Windows.Forms.ItemActivation.OneClick>、アクティブ化して 1 つの項目の時間 をクリックします。 設定、<xref:System.Windows.Forms.ListView.Activation%2A>プロパティを<xref:System.Windows.Forms.ItemActivation.TwoClick>2 回のクリックでそれらの間の任意の期間があるため、標準のダブルクリックは異なります。  
  
> [!NOTE]
>  場合、<xref:System.Windows.Forms.ListView.Activation%2A>プロパティに設定されて<xref:System.Windows.Forms.ItemActivation.OneClick>または<xref:System.Windows.Forms.ItemActivation.TwoClick>、ラベルの編集は許可されませんの値に関係なく、<xref:System.Windows.Forms.ListView.LabelEdit%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値が、<see cref="T:System.Windows.Forms.ItemActivation" /> メンバーではありません。</exception>
        <altmember cref="T:System.Windows.Forms.ItemActivation" />
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
      </Docs>
    </Member>
    <Member MemberName="AfterLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler AfterLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler AfterLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AfterLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ AfterLabelEdit;" />
      <MemberSignature Language="F#" Value="member this.AfterLabelEdit : System.Windows.Forms.LabelEditEventHandler " Usage="member this.AfterLabelEdit : System.Windows.Forms.LabelEditEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目のラベルがユーザーによって編集されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AfterLabelEdit>イベントは、ユーザーは、項目のテキストの変更が完了すると発生します。 新しい項目のユーザーが入力文字列がイベントに渡され、イベント ハンドラーは、変更を拒否できます。 イベント ハンドラーは、変更を拒否する場合、ユーザーがアイテムの編集を開始する前に、テキストをテキスト元に戻します。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>イベントはラベルの編集がコミットされを呼び出す前に実行、<xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType>このイベントのハンドラー メソッドは、元の値を使用して項目を並べ替えられます。  
  
 ために、<xref:System.Windows.Forms.ListView.AfterLabelEdit>イベントを発生させる、<xref:System.Windows.Forms.ListView.LabelEdit%2A>のプロパティ、<xref:System.Windows.Forms.ListView>にコントロールを設定する必要があります`true`します。  
  
 イベント ハンドラーを作成することができます、<xref:System.Windows.Forms.ListView.BeforeLabelEdit>ユーザー項目のテキストを編集する前に、タスクを実行するイベントです。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.ListView.AfterLabelEdit>新しく編集されたラベルをアルファベットの文字に制限するイベントです。 この例では、<xref:System.Text.ASCIIEncoding>クラスの新しいラベルの各文字の ASCII 文字コードを取得します。 文字が数字を表す ASCII コードの間にある場合は、項目に新しいラベルを適用できません。 この例では、作成済みである必要があります、<xref:System.Windows.Forms.ListView>フォームとそれに追加された項目へのコントロール。 また、例では接続していることが必要です、<xref:System.Windows.Forms.ListView.AfterLabelEdit>イベントをコードの例で定義されているイベント ハンドラー。 使用するには、 <xref:System.Text.ASCIIEncoding> 、ファイルに含める必要があります、クラス、<xref:System.Text>名前空間。  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ListViewAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Alignment" />
      <MemberSignature Language="VB.NET" Value="Public Property Alignment As ListViewAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewAlignment Alignment { System::Windows::Forms::ListViewAlignment get(); void set(System::Windows::Forms::ListViewAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.Alignment : System.Windows.Forms.ListViewAlignment with get, set" Usage="System.Windows.Forms.ListView.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の項目の配置を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ListViewAlignment" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.ListViewAlignment.Top" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Alignment%2A>プロパティのみの配置に影響と、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.LargeIcon>または<xref:System.Windows.Forms.View.SmallIcon>します。  
  
> [!NOTE]
>  このプロパティに影響を与えません、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.List>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値が <see cref="T:System.Windows.Forms.ListViewAlignment" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
      </Docs>
    </Member>
    <Member MemberName="AllowColumnReorder">
      <MemberSignature Language="C#" Value="public bool AllowColumnReorder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowColumnReorder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowColumnReorder As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowColumnReorder { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowColumnReorder : bool with get, set" Usage="System.Windows.Forms.ListView.AllowColumnReorder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが列ヘッダーをドラッグしてコントロールの列の並べ替えができるかどうかを示す値を、取得または設定します。</summary>
        <value>ドラッグ アンド ドロップによる列の並べ替えができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 値を設定、<xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>プロパティには効果がない場合を除き、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details>します。 このプロパティを使用して、実行時にコントロールの列を移動できるようにすることができます。 ときに、<xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>プロパティに設定されて`true`ユーザーは、アプリケーション内でニーズを満たす方法で、項目とそのサブ項目を表示するコントロールの列を配置できます。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ArrangeIcons">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロール内の項目がアイコンとして表示されるときに、それらの項目を配置します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons();" />
      <MemberSignature Language="F#" Value="member this.ArrangeIcons : unit -&gt; unit" Usage="listView.ArrangeIcons " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの項目が <see cref="P:System.Windows.Forms.ListView.Alignment" /> プロパティの値に基づいてアイコンとして表示されるときに、それらの項目を配置します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A>メソッドのみときに便利です、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.LargeIcon>または<xref:System.Windows.Forms.View.SmallIcon>します。 このバージョンの呼び出し、<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>メソッドの値に基づいて項目を配置する、<xref:System.Windows.Forms.ListView.Alignment%2A>プロパティ。 整列する項目が発生するのとは異なる値に基づく、<xref:System.Windows.Forms.ListView.Alignment%2A>プロパティの他のバージョンを使用して、<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="ArrangeIcons">
      <MemberSignature Language="C#" Value="public void ArrangeIcons (System.Windows.Forms.ListViewAlignment value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ArrangeIcons(valuetype System.Windows.Forms.ListViewAlignment value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ArrangeIcons(System.Windows.Forms.ListViewAlignment)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ArrangeIcons (value As ListViewAlignment)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ArrangeIcons(System::Windows::Forms::ListViewAlignment value);" />
      <MemberSignature Language="F#" Value="member this.ArrangeIcons : System.Windows.Forms.ListViewAlignment -&gt; unit" Usage="listView.ArrangeIcons value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListViewAlignment" />
      </Parameters>
      <Docs>
        <param name="value"><see cref="T:System.Windows.Forms.ListViewAlignment" /> 値のいずれか。</param>
        <summary>コントロール内の項目が指定した配置設定を使用してアイコンとして表示されるときに、それらの項目を配置します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ArrangeIcons%2A>メソッドのみときに便利です、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.LargeIcon>または<xref:System.Windows.Forms.View.SmallIcon>します。 このバージョンの<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>メソッドは、アイコンを整列、<xref:System.Windows.Forms.ListView>に基づいて、<xref:System.Windows.Forms.ListViewAlignment>で指定された値、`value`パラメーター。 このメソッドを呼び出すことは、値を変更しない、<xref:System.Windows.Forms.ListView.Alignment%2A>コントロールのプロパティ。 このメソッドを使用したよりも別の値を使用して、コントロールのアイコンの整列を<xref:System.Windows.Forms.ListView.Alignment%2A>プロパティ。 配置する項目の値に基づく、<xref:System.Windows.Forms.ListView.Alignment%2A>プロパティの他のバージョンを使用して、<xref:System.Windows.Forms.ListView.ArrangeIcons%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="value" /> パラメーターで指定された値が、<see cref="T:System.Windows.Forms.ListViewAlignment" /> 列挙体のメンバーではありません。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewAlignment" />
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoArrange">
      <MemberSignature Language="C#" Value="public bool AutoArrange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoArrange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.AutoArrange" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoArrange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoArrange { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoArrange : bool with get, set" Usage="System.Windows.Forms.ListView.AutoArrange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アイコンが自動的に配置されるかどうかを取得または設定します。</summary>
        <value>アイコンが自動的に配置され、グリッドにスナップされる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.AutoArrange%2A>プロパティ内の項目を配置のみ、<xref:System.Windows.Forms.ListView>タイミングを制御、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.LargeIcon>または<xref:System.Windows.Forms.View.SmallIcon>します。 内の項目の配置を変更する、<xref:System.Windows.Forms.ListView>コントロールを使用して、<xref:System.Windows.Forms.ListView.Alignment%2A>プロパティ。 使用することができます<xref:System.Windows.Forms.ListView.AutoArrange%2A>すべての項目であることを確認する、<xref:System.Windows.Forms.ListView>コントロールは実行時に重複を回避するために自動的に配置されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Alignment" />
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumn">
      <MemberSignature Language="C#" Value="public void AutoResizeColumn (int columnIndex, System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumn(int32 columnIndex, valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumn (columnIndex As Integer, headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumn(int columnIndex, System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumn : int * System.Windows.Forms.ColumnHeaderAutoResizeStyle -&gt; unit" Usage="listView.AutoResizeColumn (columnIndex, headerAutoResize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="columnIndex" Type="System.Int32" />
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="columnIndex">サイズを変更する列の 0 から始まるインデックス。</param>
        <param name="headerAutoResize"><see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 値のいずれか。</param>
        <summary>特定の列の幅を、サイズ変更スタイルで示された幅にサイズ変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出すことは有効な 1 回、<xref:System.Windows.Forms.ListView>を格納していると<xref:System.Windows.Forms.Form>が構築済みで、<xref:System.Windows.Forms.ListView>列ヘッダーと列は項目が入力されます。 新しい項目を追加する場合、 <xref:System.Windows.Forms.ListView>、サイズしない限り、列が変更されない<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>が再度呼び出されます。  
  
   
  
## Examples  
 次の例では、初期化、<xref:System.Windows.Forms.ListView>詳細ビューと自動的を使用して列のサイズを変更、<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A>メソッド。 この例を実行するには、Windows フォームと呼び出しにこのコードを貼り付ける、`InitializeResizingListView`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><see cref="P:System.Windows.Forms.ListView.Columns" /> が <see langword="null" /> の場合に <paramref name="columnIndex" /> が 0 より大きい値です。  
  
または 
 <paramref name="columnIndex" /> が 0 未満か、列セットの数よりも大きい値です。</exception>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException"><paramref name="headerAutoResize" /> が <see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 列挙体のメンバーではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="AutoResizeColumns">
      <MemberSignature Language="C#" Value="public void AutoResizeColumns (System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AutoResizeColumns(valuetype System.Windows.Forms.ColumnHeaderAutoResizeStyle headerAutoResize) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.AutoResizeColumns(System.Windows.Forms.ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AutoResizeColumns (headerAutoResize As ColumnHeaderAutoResizeStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AutoResizeColumns(System::Windows::Forms::ColumnHeaderAutoResizeStyle headerAutoResize);" />
      <MemberSignature Language="F#" Value="member this.AutoResizeColumns : System.Windows.Forms.ColumnHeaderAutoResizeStyle -&gt; unit" Usage="listView.AutoResizeColumns headerAutoResize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="headerAutoResize" Type="System.Windows.Forms.ColumnHeaderAutoResizeStyle" />
      </Parameters>
      <Docs>
        <param name="headerAutoResize"><see cref="T:System.Windows.Forms.ColumnHeaderAutoResizeStyle" /> 値のいずれか。</param>
        <summary>列の幅を、サイズ変更スタイルで示された幅にサイズ変更します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出すことは有効な 1 回、<xref:System.Windows.Forms.ListView>を格納していると<xref:System.Windows.Forms.Form>が構築済みで、<xref:System.Windows.Forms.ListView>列ヘッダーと列は項目が入力されます。 新しい項目を追加する場合、 <xref:System.Windows.Forms.ListView>、サイズしない限り、列が変更されない<xref:System.Windows.Forms.ListView.AutoResizeColumns%2A>が再度呼び出されます。  
  
   
  
## Examples  
 次のコード例を示します初期化、<xref:System.Windows.Forms.ListView>詳細ビューを使用して列を自動的にサイズ変更で、<xref:System.Windows.Forms.ListView.AutoResizeColumns%2A>メソッド。 この例を実行するには、Windows フォームと呼び出しにこのコードを貼り付ける、`InitializeResizingListView2`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#9)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Windows.Forms.ListView.AutoResizeColumn(System.Int32,System.Windows.Forms.ColumnHeaderAutoResizeStyle)" /> が <see cref="F:System.Windows.Forms.ColumnHeaderAutoResizeStyle.None" /> に設定されていない場合に、<see cref="P:System.Windows.Forms.ListView.View" /> 以外の値を使用して <see cref="F:System.Windows.Forms.View.Details" /> が呼び出されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color BackColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color BackColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color BackColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.BackColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListView.BackColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>背景色を取得または設定します。</summary>
        <value>背景の <see cref="T:System.Drawing.Color" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public override System.Drawing.Image BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Image BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImage" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImage As Image" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Image ^ BackgroundImage { System::Drawing::Image ^ get(); void set(System::Drawing::Image ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : System.Drawing.Image with get, set" Usage="System.Windows.Forms.ListView.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Image</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>この <see cref="T:System.Windows.Forms.ListView" /> コントロールに表示される背景イメージを取得または設定します。</summary>
        <value>コントロールの背景に表示するイメージ。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageChanged : EventHandler " Usage="member this.BackgroundImageChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.ListView.BackgroundImage" /> プロパティの値が変更された場合に発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayout">
      <MemberSignature Language="C#" Value="public override System.Windows.Forms.ImageLayout BackgroundImageLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ImageLayout BackgroundImageLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property BackgroundImageLayout As ImageLayout" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::ImageLayout BackgroundImageLayout { System::Windows::Forms::ImageLayout get(); void set(System::Windows::Forms::ImageLayout value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayout : System.Windows.Forms.ImageLayout with get, set" Usage="System.Windows.Forms.ListView.BackgroundImageLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ImageLayout" /> 値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ImageLayout" /> 値のいずれか。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティの背景イメージのレイアウトに影響を与えません、<xref:System.Windows.Forms.ListView>コントロール、したがっては表示されませんが、デザイナーで、または intellisense。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値が <see cref="T:System.Windows.Forms.ImageLayout" /> 値ではありません。</exception>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler BackgroundImageLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BackgroundImageLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BackgroundImageLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BackgroundImageLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ BackgroundImageLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageLayoutChanged : EventHandler " Usage="member this.BackgroundImageLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.ListView.BackgroundImageLayout" /> プロパティが変更されたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageTiled">
      <MemberSignature Language="C#" Value="public bool BackgroundImageTiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BackgroundImageTiled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberSignature Language="VB.NET" Value="Public Property BackgroundImageTiled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BackgroundImageTiled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BackgroundImageTiled : bool with get, set" Usage="System.Windows.Forms.ListView.BackgroundImageTiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> の背景イメージを並べて表示する必要があるかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ListView" /> の背景イメージを並べて表示する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BackgroundImageTiled%2A>プロパティが返す`false`イメージが設定されていない場合。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeforeLabelEdit">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.LabelEditEventHandler BeforeLabelEdit" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BeforeLabelEdit As LabelEditEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::LabelEditEventHandler ^ BeforeLabelEdit;" />
      <MemberSignature Language="F#" Value="member this.BeforeLabelEdit : System.Windows.Forms.LabelEditEventHandler " Usage="member this.BeforeLabelEdit : System.Windows.Forms.LabelEditEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.LabelEditEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーが項目のラベルの編集を開始すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.BeforeLabelEdit>イベント、ユーザーが項目のテキストの変更を開始するときに発生します。 イベント ハンドラーは、このイベントをキャンセルした場合、ユーザーは、テキストを編集できません。 このイベントを使用するには、ユーザーが特定の項目を編集することを防ぐために、<xref:System.Windows.Forms.ListView>コントロール。 場合、<xref:System.Windows.Forms.ListView.LabelEdit%2A>のプロパティ、<xref:System.Windows.Forms.ListView>に設定されているコントロール`false`、<xref:System.Windows.Forms.ListView.BeforeLabelEdit>イベントは発生しません。 項目のラベルを編集するユーザーのすべての試行は自動的に拒否されます。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、処理を示しています、<xref:System.Windows.Forms.ListView.BeforeLabelEdit>イベントを使用して、<xref:System.Windows.Forms.LabelEditEventArgs.Item%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A?displayProperty=nameWithType>プロパティ。 例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前のコントロール`ListView1`と少なくとも 3 つの項目が設定されます。 例では、イベント ハンドラーがそのイベントに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.LabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="BeginUpdate">
      <MemberSignature Language="C#" Value="public void BeginUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void BeginUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.BeginUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub BeginUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void BeginUpdate();" />
      <MemberSignature Language="F#" Value="member this.BeginUpdate : unit -&gt; unit" Usage="listView.BeginUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Windows.Forms.ListView.EndUpdate" /> メソッドが呼び出されるまで、コントロールは描画できません。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数の項目を追加することをお勧め、<xref:System.Windows.Forms.ListView>を使用して、<xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A>のメソッド、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> (を使用してアクセス、<xref:System.Windows.Forms.ListView.Items%2A>のプロパティ、 <xref:System.Windows.Forms.ListView>)。 これにより、1 つの操作の一覧に項目の配列を追加することができます。 追加する場合は、項目を使用して、時間に 1 つただし、<xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListView.ListViewItemCollection>クラスを使用できます、<xref:System.Windows.Forms.ListView.BeginUpdate%2A>メソッドをコントロールが再描画するを防ぐために、<xref:System.Windows.Forms.ListView>項目が追加されるたびにします。 コントロールに項目を追加するタスクを完了すると、ときに呼び出す、<xref:System.Windows.Forms.ListView.EndUpdate%2A>を有効にする、<xref:System.Windows.Forms.ListView>を再描画します。 この方法で項目を追加するときにちらつきませんの描画、<xref:System.Windows.Forms.ListView>コントロールに多数の項目が追加されて場合。  
  
 場合<xref:System.Windows.Forms.ListView.BeginUpdate%2A>2 回以上と呼ばれる<xref:System.Windows.Forms.ListView.EndUpdate%2A>と同じ回数だけ呼び出す必要があります。 最後の呼び出しまで<xref:System.Windows.Forms.ListView.EndUpdate%2A>、<xref:System.Windows.Forms.ListView>再描画されません。 また、複数の呼び出しを<xref:System.Windows.Forms.ListView.BeginUpdate%2A>影響がありません。  
  
   
  
## Examples  
 次のコード例を示します初期化、<xref:System.Windows.Forms.ListView>チェック ボックスを格納するコントロール。 使用する方法も示します、<xref:System.Windows.Forms.ListView.BeginUpdate%2A>と<xref:System.Windows.Forms.ListView.EndUpdate%2A>メソッド。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という`ListView1`します。 呼び出す、`InititalizeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.EndUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BorderStyle BorderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.BorderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property BorderStyle As BorderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BorderStyle BorderStyle { System::Windows::Forms::BorderStyle get(); void set(System::Windows::Forms::BorderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.BorderStyle : System.Windows.Forms.BorderStyle with get, set" Usage="System.Windows.Forms.ListView.BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(-504)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの境界線スタイルを取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.BorderStyle" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.BorderStyle.Fixed3D" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Windows.Forms.ListView.BorderStyle%2A>の境界線スタイルを変更するプロパティを<xref:System.Windows.Forms.ListView>コントロールをフォーム上の他のコントロールの境界線のスタイル設定に一致します。 たとえば、なし、フォーム上の他のコントロールの枠線が表示されている場合を設定できます、<xref:System.Windows.Forms.ListView.BorderStyle%2A>のプロパティ、<xref:System.Windows.Forms.ListView>コントロールを<xref:System.Windows.Forms.BorderStyle.None>他のコントロールと一致します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値が <see cref="T:System.Windows.Forms.BorderStyle" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.BorderStyle" />
      </Docs>
    </Member>
    <Member MemberName="CacheVirtualItems">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.CacheVirtualItemsEventHandler CacheVirtualItems" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.CacheVirtualItems" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CacheVirtualItems As CacheVirtualItemsEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::CacheVirtualItemsEventHandler ^ CacheVirtualItems;" />
      <MemberSignature Language="F#" Value="member this.CacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventHandler " Usage="member this.CacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CacheVirtualItemsEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>仮想モードで <see cref="T:System.Windows.Forms.ListView" /> の表示領域の内容が変化し、<see cref="T:System.Windows.Forms.ListView" /> によって項目の新しい範囲が必要であると判断された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントはのみに発生するとき<xref:System.Windows.Forms.ListView.VirtualMode%2A>は`true`します。 このイベントの処理により、<xref:System.Windows.Forms.ListView>項目情報を更新するキャッシュに保持が簡単に使用できるようにします。 これにより、大きなリストまたはリスト アイテムが含まれる、計算する高価なパフォーマンスが向上することができます。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、キャッシュの更新を本当に必要し、キャッシュを再構築されていることを確認するイベント ハンドラーを確認します。 このコード例が示されている例の一部、<xref:System.Windows.Forms.ListView.VirtualMode%2A>プロパティ。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#3)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckBoxes">
      <MemberSignature Language="C#" Value="public bool CheckBoxes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckBoxes" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckBoxes" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckBoxes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckBoxes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckBoxes : bool with get, set" Usage="System.Windows.Forms.ListView.CheckBoxes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの各項目の横にチェック ボックスを表示するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ListView" /> コントロール内の各項目の横にチェック ボックスを表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティでは、一覧に各アイテムの横のチェック ボックスを表示することができます。 これにより、アプリケーションのアイテムの一覧を表示する (場合にサブ項目と、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて`View.Details`)、ユーザーは、チェック ボックスをクリックして選択できます。 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティの複数の項目を選択する方法を提供する、 <xref:System.Windows.Forms.ListView> CTRL キーを使用せずに制御します。 アプリケーションによっては、複数の選択方法、標準ではなく、項目を選択するチェック ボックスを使用して、ユーザーを簡単に可能性があります。 場合でも、<xref:System.Windows.Forms.ListView.MultiSelect%2A>のプロパティ、<xref:System.Windows.Forms.ListView>に設定されているコントロール`false`、チェック ボックスを表示し、ユーザーに複数の選択機能を提供できます。 この機能はしないする複数の項目を選択するまだユーザーがアプリケーション内で操作を実行するリストから複数の項目を選択できるようにする場合に便利です。  
  
 項目がチェックされている場合を判断するのイベント ハンドラーを作成、<xref:System.Windows.Forms.ListView.ItemCheck>イベント。 チェックインされているすべての項目を取得する、<xref:System.Windows.Forms.ListView>を使用して、<xref:System.Windows.Forms.ListView.CheckedItems%2A>プロパティにアクセスする、<xref:System.Windows.Forms.ListView.CheckedIndexCollection>コントロール。 チェックインされているすべての項目のインデックスを取得する、<xref:System.Windows.Forms.ListView>を使用して、<xref:System.Windows.Forms.ListView.CheckedIndices%2A>プロパティ。  
  
 場合、<xref:System.Windows.Forms.ImageList>で指定された、<xref:System.Windows.Forms.ListView.StateImageList%2A>プロパティ、イメージのインデックス位置 0 と 1 に、<xref:System.Windows.Forms.ImageList>チェック ボックスが表示されます。 インデックス位置 0 にイメージがオフのチェック ボックスの代わりに表示され、チェックされたチェック ボックスではなく、インデックス位置 1 イメージが表示されます。  
  
> [!NOTE]
>  このプロパティ設定すると`true`、<xref:System.Windows.Forms.ListView.ItemCheck>イベントが発生します。  
>   
>  チェック ボックスがないときに表示される、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Tile>します。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="P:System.Windows.Forms.ListView.MultiSelect" />
      </Docs>
    </Member>
    <Member MemberName="CheckedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedIndexCollection CheckedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedIndexCollection CheckedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedIndices As ListView.CheckedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedIndexCollection ^ CheckedIndices { System::Windows::Forms::ListView::CheckedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedIndices : System.Windows.Forms.ListView.CheckedIndexCollection" Usage="System.Windows.Forms.ListView.CheckedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの現在チェックされている項目のインデックスを取得します。</summary>
        <value>現在チェックされている項目のインデックスを含んでいる <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />。 項目が現在チェックされていない場合は、空の <see cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときにこのプロパティは便利なだけ、<xref:System.Windows.Forms.ListView.CheckBoxes%2A>のプロパティ、<xref:System.Windows.Forms.ListView>に設定されているコントロール`true`します。 <xref:System.Windows.Forms.ListView.CheckedIndices%2A>プロパティ内のインデックス位置を含むコレクションを返します、<xref:System.Windows.Forms.ListView.ListViewItemCollection>のコントロールでオンになっているすべての項目。 コレクション内の項目を操作する方法の詳細については、次を参照してください。<xref:System.Windows.Forms.ListView.CheckedIndexCollection>します。  
  
 チェックインされている項目のコレクションを取得するかどうか、<xref:System.Windows.Forms.ListView>コントロールを使用して、項目をオンになっているのインデックス位置ではなく、<xref:System.Windows.Forms.ListView.CheckedItems%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedItems" />
      </Docs>
    </Member>
    <Member MemberName="CheckedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.CheckedListViewItemCollection CheckedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/CheckedListViewItemCollection CheckedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CheckedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CheckedItems As ListView.CheckedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::CheckedListViewItemCollection ^ CheckedItems { System::Windows::Forms::ListView::CheckedListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CheckedItems : System.Windows.Forms.ListView.CheckedListViewItemCollection" Usage="System.Windows.Forms.ListView.CheckedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+CheckedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの現在チェックされている項目を取得します。</summary>
        <value>現在チェックされている項目を含んでいる <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />。 項目が現在チェックされていない場合は、空の <see cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときにこのプロパティは便利なだけ、<xref:System.Windows.Forms.ListView.CheckBoxes%2A>のプロパティ、<xref:System.Windows.Forms.ListView>に設定されているコントロール`true`します。 <xref:System.Windows.Forms.ListView.CheckedItems%2A>プロパティ、コントロールでオンになっているすべての項目を含むコレクションを返します。 コレクション内の項目を操作する方法の詳細については、次を参照してください。<xref:System.Windows.Forms.ListView.CheckedListViewItemCollection>します。  
  
 内のインデックス位置のコレクションを取得するかどうか、<xref:System.Windows.Forms.ListView.ListViewItemCollection>でオンになっている項目の<xref:System.Windows.Forms.ListView>コントロールを使用して、項目をオンになっているのではなく、<xref:System.Windows.Forms.ListView.CheckedIndices%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例を示しますチェック<xref:System.Windows.Forms.ListView>を処理する、<xref:System.Windows.Forms.ListView.ItemChecked>イベント。 この例では、<xref:System.Windows.Forms.ListView.CheckedItems%2A>項目がオンまたはオフになるたびに新しい価格を集計するためのプロパティ。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前`ListView1`と<xref:System.Windows.Forms.TextBox>という名前の`Textbox1`します。 呼び出す、`InititalizeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView2#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView2#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.CheckedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckedIndices" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="listView.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールからすべての項目と列を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、すべてのアイテムと列を削除することができます、<xref:System.Windows.Forms.ListView>コントロールに個別に電話しなくても`Clear`からメソッド、<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>と<xref:System.Windows.Forms.ListView.ListViewItemCollection>クラス。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.Clear%2A>メソッドはクリアしません<xref:System.Windows.Forms.ListView.Groups%2A>の指定、<xref:System.Windows.Forms.ListView>コントロール。 クリアする<xref:System.Windows.Forms.ListView.Groups%2A>呼び出す<xref:System.Windows.Forms.ListViewGroupCollection.Clear%2A?displayProperty=nameWithType>します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します<xref:System.Windows.Forms.ListView.Clear%2A>と<xref:System.Windows.Forms.ListViewItem.Selected%2A?displayProperty=nameWithType>メンバー。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前の`ListView1`とという名前のフォームの下部にあるボタン`Button1`します。 呼び出す、`InitializeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。  
  
 [!code-cpp[System.Windows.Forms.ListView4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView4/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.ColumnHeaderCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Clear" />
      </Docs>
    </Member>
    <Member MemberName="ColumnClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnClickEventHandler ColumnClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnClickEventHandler ColumnClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnClick As ColumnClickEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnClickEventHandler ^ ColumnClick;" />
      <MemberSignature Language="F#" Value="member this.ColumnClick : System.Windows.Forms.ColumnClickEventHandler " Usage="member this.ColumnClick : System.Windows.Forms.ColumnClickEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnClickEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがリスト ビュー コントロール内の列ヘッダーをクリックすると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnClick>内の項目の詳細ビューで列ヘッダーのいずれかをクリックすると、イベントが発生した、<xref:System.Windows.Forms.ListView>コントロール (ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details>)。 <xref:System.Windows.Forms.ListView.ColumnClick>で項目の並べ替えにイベントが処理される通常の<xref:System.Windows.Forms.ListView>を並べ替えるには、列、クリックされた列を使用しています。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例を含むフォームを作成し、<xref:System.Windows.Forms.ListView>コントロールを手動で項目の列を並べ替える、<xref:System.Windows.Forms.ListView>コントロールがクリックされました。 例と呼ばれるクラス定義`ListViewItemComparer`を実装する、<xref:System.Collections.IComparer?displayProperty=nameWithType>インターフェイスを実行する、<xref:System.Windows.Forms.ListViewItem>比較します。 インスタンスを作成する例では、`ListViewItemComparer`設定を使用して、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>のプロパティ、<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.ListView.Sort%2A>でメソッドを呼び出す、<xref:System.Windows.Forms.ListView.ColumnClick>イベント ハンドラーで定義されているメソッドを使用して`ListViewItemComparer`クリックしてされた列に基づく、項目の並べ替えを実行します。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ColumnReordered">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnReorderedEventHandler ColumnReordered" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnReordered" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnReordered As ColumnReorderedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnReorderedEventHandler ^ ColumnReordered;" />
      <MemberSignature Language="F#" Value="member this.ColumnReordered : System.Windows.Forms.ColumnReorderedEventHandler " Usage="member this.ColumnReordered : System.Windows.Forms.ColumnReorderedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnReorderedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーの順序が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnReordered>イベントがキャンセル可能なイベントであり、イベントを処理し、設定によって取り消されることができます、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>プロパティを`true`します。 ただし、イベントが取り消された場合、<xref:System.Windows.Forms.ColumnReorderedEventArgs.NewDisplayIndex%2A>の<xref:System.Windows.Forms.ColumnReorderedEventArgs>には変更されません、<xref:System.Windows.Forms.ColumnReorderedEventArgs.OldDisplayIndex%2A>値。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.ColumnReordered>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.ColumnReordered>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#467](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#467)]
 [!code-vb[System.Windows.Forms.EventExamples#467](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#467)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ColumnHeaderCollection Columns { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ColumnHeaderCollection Columns" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Columns" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Columns As ListView.ColumnHeaderCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ColumnHeaderCollection ^ Columns { System::Windows::Forms::ListView::ColumnHeaderCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Columns : System.Windows.Forms.ListView.ColumnHeaderCollection" Usage="System.Windows.Forms.ListView.Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ColumnHeaderCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ColumnHeaderCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに表示されるすべての列ヘッダーのコレクションを取得します。</summary>
        <value><see cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" /> プロパティが <see cref="P:System.Windows.Forms.ListView.View" /> に設定されているときに表示される列ヘッダーを表す <see cref="F:System.Windows.Forms.View.Details" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Columns%2A>プロパティを含むコレクションを返します、<xref:System.Windows.Forms.ColumnHeader>オブジェクトに表示される、<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.ColumnHeader> オブジェクトに表示される列の定義、<xref:System.Windows.Forms.ListView>タイミングを制御、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details>します。 内の各項目のサブ項目の情報を表示する各列の使用、<xref:System.Windows.Forms.ListView>します。 コレクション内の項目を操作する方法の詳細については、次を参照してください。<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>します。  
  
> [!NOTE]
>  場合、<xref:System.Windows.Forms.ListView>コントロールには、指定された任意の列ヘッダーはありません。 設定すると、<xref:System.Windows.Forms.ListView.View%2A>プロパティを<xref:System.Windows.Forms.View.Details>、<xref:System.Windows.Forms.ListView>コントロールはすべての項目が表示されません。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ColumnHeaderCollection" />
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangedEventHandler ColumnWidthChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanged As ColumnWidthChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangedEventHandler ^ ColumnWidthChanged;" />
      <MemberSignature Language="F#" Value="member this.ColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventHandler " Usage="member this.ColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の幅が正常に変更された後で発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 列の幅の変更が取り消された場合、このイベントは発生しませんが、<xref:System.Windows.Forms.ListView.ColumnWidthChanging>イベント  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.ColumnWidthChanged>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.ColumnWidthChanged>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#468](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#468)]
 [!code-vb[System.Windows.Forms.EventExamples#468](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#468)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthChanging">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ColumnWidthChangingEventHandler ColumnWidthChanging" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ColumnWidthChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ColumnWidthChanging As ColumnWidthChangingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ColumnWidthChangingEventHandler ^ ColumnWidthChanging;" />
      <MemberSignature Language="F#" Value="member this.ColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventHandler " Usage="member this.ColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnWidthChangingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列の幅が変更される場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、使用して新しい列の幅を確認することができます、<xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType>プロパティ、および [キャンセル] を設定して選択した場合、イベント、<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>プロパティを`true`します。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、処理を示しています、<xref:System.Windows.Forms.ListView.ColumnWidthChanging>イベント。 また、<xref:System.Windows.Forms.ColumnWidthChangingEventArgs.NewWidth%2A?displayProperty=nameWithType>と<xref:System.ComponentModel.CancelEventArgs.Cancel%2A>メンバー。 この例を実行するには、Windows フォームにコードを貼り付けます。 呼び出す`InitializeListView1`フォームのコンス トラクターからまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#6)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="listView.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> コントロールのアクセシビリティ オブジェクトの新しいインスタンスを作成します。</summary>
        <returns>この <see cref="T:System.Windows.Forms.Control.ControlAccessibleObject" /> コントロールの <see cref="T:System.Windows.Forms.ListView" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="listView.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールのハンドルを作成します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.ListView.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value>常に <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.ListView.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの既定のサイズを取得します。</summary>
        <value>コントロールの既定の <see cref="T:System.Drawing.Size" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="listView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</param>
        <summary><see cref="T:System.Windows.Forms.ListView" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 呼び出す、<xref:System.Windows.Forms.ListView.Dispose%2A>メソッド、コンポーネントが不要になったとき。 このメソッドは、(コンポーネントにサイトがある場合) がコンテナーからコンポーネントを削除し、破棄イベントを発生させます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleBuffered">
      <MemberSignature Language="C#" Value="protected override bool DoubleBuffered { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleBuffered" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Property DoubleBuffered As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property bool DoubleBuffered { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoubleBuffered : bool with get, set" Usage="System.Windows.Forms.ListView.DoubleBuffered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ちらつきを軽減または回避するために、2 次バッファーを使用してコントロールの表面を再描画するかどうかを示す値を取得または設定します。</summary>
        <value>ダブル バッファリングを使用してコントロールの表面を再描画する必要がある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawColumnHeader">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewColumnHeaderEventHandler DrawColumnHeader" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawColumnHeader" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawColumnHeader As DrawListViewColumnHeaderEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewColumnHeaderEventHandler ^ DrawColumnHeader;" />
      <MemberSignature Language="F#" Value="member this.DrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventHandler " Usage="member this.DrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewColumnHeaderEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> の詳細ビューが描画され、<see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> プロパティが <see langword="true" /> に設定されている場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントでは、外観をカスタマイズすることができます、<xref:System.Windows.Forms.ListView>オーナー描画を使用して制御します。 発生した場合にのみ、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティに設定されて`true`と<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>します。 このイベントは、コントロールの各列ヘッダーに発生します。 オーナー描画の詳細については、次を参照してください。、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティの参照トピック。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例の実装を提供する、<xref:System.Windows.Forms.ListView.DrawColumnHeader>イベント ハンドラー。 完全な例での実装を含む、<xref:System.Windows.Forms.ListView.DrawSubItem>イベント ハンドラーを参照してください、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>リファレンス トピック。  
  
 [!code-csharp[ListViewOwnerDraw#5](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#5)]
 [!code-vb[ListViewOwnerDraw#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawListViewItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewItemEventHandler ^ DrawItem;" />
      <MemberSignature Language="F#" Value="member this.DrawItem : System.Windows.Forms.DrawListViewItemEventHandler " Usage="member this.DrawItem : System.Windows.Forms.DrawListViewItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> が描画され、<see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> プロパティが <see langword="true" /> に設定されているときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントでは、外観をカスタマイズすることができます、<xref:System.Windows.Forms.ListView>オーナー描画を使用して制御します。 発生した場合にのみ、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティに設定されて`true`します。 オーナー描画の詳細については、次を参照してください。、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティの参照トピック。  
  
 <xref:System.Windows.Forms.ListView.DrawItem>ごとにイベントが発生する可能性が<xref:System.Windows.Forms.ListView>項目。 ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView.DrawSubItem>と<xref:System.Windows.Forms.ListView.DrawColumnHeader>イベントにも発生します。 この場合、処理することができます、 <xref:System.Windows.Forms.ListView.DrawItem> 、バック グラウンドなど、すべてのアイテムに共通する要素を描画および処理するイベント、<xref:System.Windows.Forms.ListView.DrawSubItem>テキスト値などの個々 のサブ項目の要素を描画するイベントです。 すべての項目を描画することも、<xref:System.Windows.Forms.ListView>はあまり便利なことが考えられますが、2 つのイベントのいずれかのみを使用を制御します。 詳細ビューで列ヘッダーを描画するために処理する必要があります、<xref:System.Windows.Forms.ListView.DrawColumnHeader>イベント。  
  
> [!NOTE]
>  基になる Win32 コントロールでのバグにより、<xref:System.Windows.Forms.ListView.DrawItem>イベントは発生せずに付属する<xref:System.Windows.Forms.ListView.DrawSubItem>行上にマウス ポインターが移動したときに、詳細ビュー内の行ごとに 1 回のイベント、何かの原因で描画される、<xref:System.Windows.Forms.ListView.DrawSubItem>イベント ハンドラーを指定カスタムの背景に描画によって描画される、<xref:System.Windows.Forms.ListView.DrawItem>イベント ハンドラー。 例を参照してください、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>を余分なイベントの発生時に、各行を無効にする回避策についてのリファレンス トピック。 別の回避策にすべてのカスタム描画コードを格納する、<xref:System.Windows.Forms.ListView.DrawSubItem>イベント ハンドラーとペイント (サブ項目を含む) 全体の項目の背景を場合にのみ、<xref:System.Windows.Forms.DrawListViewSubItemEventArgs.ColumnIndex%2A?displayProperty=nameWithType>値は 0 です。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例の実装を提供する、<xref:System.Windows.Forms.ListView.DrawItem>イベント ハンドラー。 完全な例では、次を参照してください。、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>リファレンス トピック。  
  
 [!code-csharp[ListViewOwnerDraw#3](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#3)]
 [!code-vb[ListViewOwnerDraw#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="DrawSubItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawListViewSubItemEventHandler DrawSubItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.DrawSubItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawSubItem As DrawListViewSubItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawListViewSubItemEventHandler ^ DrawSubItem;" />
      <MemberSignature Language="F#" Value="member this.DrawSubItem : System.Windows.Forms.DrawListViewSubItemEventHandler " Usage="member this.DrawSubItem : System.Windows.Forms.DrawListViewSubItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawListViewSubItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> の詳細ビューが描画され、<see cref="P:System.Windows.Forms.ListView.OwnerDraw" /> プロパティが <see langword="true" /> に設定されている場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントでは、外観をカスタマイズすることができます、<xref:System.Windows.Forms.ListView>オーナー描画を使用して制御します。 発生した場合にのみ、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティに設定されて`true`と<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>します。 オーナー描画の詳細については、次を参照してください。、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティの参照トピック。  
  
> [!NOTE]
>  サブ項目の情報は、並べて表示ビューに通常表示されるだけでなく、詳細ビューしますが、その、並べて表示ビューでのハンドラーで描画する必要があります、<xref:System.Windows.Forms.ListView.DrawItem>イベント。  
  
 <xref:System.Windows.Forms.ListView.DrawSubItem>ごとにイベントが発生する可能性が<xref:System.Windows.Forms.ListView>サブ項目。 処理することができます、 <xref:System.Windows.Forms.ListView.DrawItem> 、バック グラウンドなど、すべてのサブ項目に共通する要素を描画および処理するイベント、<xref:System.Windows.Forms.ListView.DrawSubItem>テキスト値などの個々 のサブ項目の要素を描画するイベントです。 すべての項目を描画することも、<xref:System.Windows.Forms.ListView>はあまり便利なことが考えられますが、2 つのイベントのいずれかのみを使用を制御します。 詳細ビューで列ヘッダーを描画するために処理する必要があります、<xref:System.Windows.Forms.ListView.DrawColumnHeader>イベント。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListView.DrawSubItem>いないすべてのサブ項目のイベントは発生しません<xref:System.Windows.Forms.ColumnHeader>オブジェクトが追加されました、<xref:System.Windows.Forms.ListView.Columns%2A>コレクション。 また、それぞれの最初のサブ項目<xref:System.Windows.Forms.ListViewItem>オブジェクトは、親アイテム自体を表しており、最初の列に表示されます。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例の実装を提供する、<xref:System.Windows.Forms.ListView.DrawSubItem>イベント ハンドラー。 完全な例では、次を参照してください。、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>リファレンス トピック。  
  
 [!code-csharp[ListViewOwnerDraw#4](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#4)]
 [!code-vb[ListViewOwnerDraw#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ColumnHeader" />
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.OwnerDraw" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="EndUpdate">
      <MemberSignature Language="C#" Value="public void EndUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EndUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EndUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Sub EndUpdate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EndUpdate();" />
      <MemberSignature Language="F#" Value="member this.EndUpdate : unit -&gt; unit" Usage="listView.EndUpdate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="M:System.Windows.Forms.ListView.BeginUpdate" /> メソッドによって中断されていたリスト ビュー コントロールの描画を再開します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複数の項目を追加することをお勧め、<xref:System.Windows.Forms.ListView>を使用して、<xref:System.Windows.Forms.ListView.ListViewItemCollection.AddRange%2A>のメソッド、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> (を使用してアクセス、<xref:System.Windows.Forms.ListView.Items%2A>のプロパティ、 <xref:System.Windows.Forms.ListView>)。 これにより、1 つの操作の一覧に項目の配列を追加することができます。 追加する場合は、項目を使用して、時間に 1 つただし、<xref:System.Windows.Forms.ListView.ListViewItemCollection.Add%2A>のメソッド、<xref:System.Windows.Forms.ListView.ListViewItemCollection>クラスを使用できます、<xref:System.Windows.Forms.ListView.BeginUpdate%2A>メソッドをコントロールが再描画するを防ぐために、<xref:System.Windows.Forms.ListView>項目が追加されるたびにします。 コントロールに項目を追加するタスクを完了すると後の呼び出し、<xref:System.Windows.Forms.ListView.EndUpdate%2A>を有効にする、<xref:System.Windows.Forms.ListView>を再描画します。 この方法で項目を追加するときにちらつきませんの描画、<xref:System.Windows.Forms.ListView>項目数が多い、コントロールに追加されている場合。  
  
 場合<xref:System.Windows.Forms.ListView.BeginUpdate%2A>2 回以上と呼ばれる<xref:System.Windows.Forms.ListView.EndUpdate%2A>と同じ回数だけ呼び出す必要があります。 最後の呼び出しまで<xref:System.Windows.Forms.ListView.EndUpdate%2A>、<xref:System.Windows.Forms.ListView>再描画されません。 また、複数の呼び出しを<xref:System.Windows.Forms.ListView.BeginUpdate%2A>影響がありません。  
  
   
  
## Examples  
 次のコード例を示します初期化、<xref:System.Windows.Forms.ListView>チェック ボックスを格納するコントロール。 使用しても示しています、<xref:System.Windows.Forms.ListView.BeginUpdate%2A>と<xref:System.Windows.Forms.ListView.EndUpdate%2A>メソッド。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という`ListView1`します。 呼び出す、`InititalizeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.BeginUpdate" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.AddRange(System.Windows.Forms.ListViewItem[])" />
        <altmember cref="M:System.Windows.Forms.ListView.ListViewItemCollection.Add(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="EnsureVisible">
      <MemberSignature Language="C#" Value="public void EnsureVisible (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnsureVisible(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub EnsureVisible (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void EnsureVisible(int index);" />
      <MemberSignature Language="F#" Value="member this.EnsureVisible : int -&gt; unit" Usage="listView.EnsureVisible index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">表示されるまでスクロールする項目の、0 から始まるインデックス番号。</param>
        <summary>必要に応じてコントロールの内容をスクロールして、指定した項目がコントロール内に確実に表示されるようにします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して特定の項目が内に表示されることを確認することができます、<xref:System.Windows.Forms.ListView>コントロール。 内の項目で検証を実行するときに、 <xref:System.Windows.Forms.ListView>、呼び出すことができます、<xref:System.Windows.Forms.ListView.EnsureVisible%2A>検証に失敗した項目が表示されていることを確認する方法、<xref:System.Windows.Forms.ListView>コントロールの項目に変更を実行するユーザーをできるようにします。 確認するアイテムが表示される場合は、表示可能領域の上にあるが、<xref:System.Windows.Forms.ListView>コントロールを呼び出し、<xref:System.Windows.Forms.ListView.EnsureVisible%2A>メソッドは、コントロールの表示可能領域の最初の項目があるまで、コントロールの内容がスクロールします。 項目が表示可能領域の下にある場合、<xref:System.Windows.Forms.ListView>コントロールを呼び出す、<xref:System.Windows.Forms.ListView.EnsureVisible%2A>メソッドの内容をスクロールは、<xref:System.Windows.Forms.ListView>まで項目がコントロールの表示可能領域の最後の項目を制御します。  
  
 表示領域の上部にある項目が配置されているか判断する、<xref:System.Windows.Forms.ListView>コントロールを使用して、<xref:System.Windows.Forms.ListView.TopItem%2A>プロパティ。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.TopItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="FindItemWithText">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したテキスト値で始まる最初の <see cref="T:System.Windows.Forms.ListViewItem" /> を検索します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">検索するテキストです。</param>
        <summary>指定したテキスト値で始まる最初の <see cref="T:System.Windows.Forms.ListViewItem" /> を検索します。</summary>
        <returns>指定したテキスト値で始まる最初の <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 検索では、大文字と小文字を区別しません。  
  
 `text`パラメーターが必要な一致したテキストの部分文字列を指定できます。 さらに、このメソッドは、指定したテキストで始まる最初の項目を返します。 たとえば場合、 <xref:System.Windows.Forms.ListView> 2 つのリスト アイテムの最初の項目のテキストが「山かっ」に設定し、2 番目の項目のテキストが"bracket"- への呼び出しに設定されて<xref:System.Windows.Forms.ListView.FindItemWithText%2A>を渡す`brack`ように、パラメーターは、項目のテキストが"bracket"を返します。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>メソッドを返します。`null`リストが空か、一致する項目がない場合。  
  
   
  
## Examples  
 次のコード例に示します、<xref:System.Windows.Forms.ListView.FindItemWithText%2A>メソッド。 この例を実行するには、Windows フォームと呼び出しに次のコードを貼り付け、`InitializeFindListView`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。 メソッド呼び出しの結果を表示するボタンをクリックします。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string * bool * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText (text, includeSubItemsInSearch, startIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">検索するテキストです。</param>
        <param name="includeSubItemsInSearch">検索にサブ項目を含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="startIndex">検索を開始する位置の項目のインデックス。</param>
        <summary>指定したテキスト値で始まる最初の <see cref="T:System.Windows.Forms.ListViewItem" /> または <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" /> (指定されている場合) を検索します。 検索は、指定したインデックス位置から開始されます。</summary>
        <returns>指定したテキスト値で始まる最初の <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 検索では、大文字と小文字を区別しません。  
  
 `text`パラメーターが必要な一致したテキストの部分文字列を指定できます。 さらに、このメソッドは、指定したテキストで始まる最初の項目を返します。 たとえば場合、 <xref:System.Windows.Forms.ListView> 2 つのリスト アイテムの最初の項目のテキストが「山かっ」に設定し、2 番目の項目のテキストが"bracket"- への呼び出しに設定されて<xref:System.Windows.Forms.ListView.FindItemWithText%2A>brack"渡す"ように、パラメーターが返される項目のテキストが"bracket"。  
  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>メソッドを返します。`null`リストが空か、一致する項目がない場合。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> が 0 未満か、<see cref="T:System.Windows.Forms.ListView" /> の項目数より大きい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindItemWithText">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindItemWithText (string text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindItemWithText(string text, bool includeSubItemsInSearch, int32 startIndex, bool isPrefixSearch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindItemWithText(System.String,System.Boolean,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindItemWithText (text As String, includeSubItemsInSearch As Boolean, startIndex As Integer, isPrefixSearch As Boolean) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindItemWithText(System::String ^ text, bool includeSubItemsInSearch, int startIndex, bool isPrefixSearch);" />
      <MemberSignature Language="F#" Value="member this.FindItemWithText : string * bool * int * bool -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindItemWithText (text, includeSubItemsInSearch, startIndex, isPrefixSearch)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="includeSubItemsInSearch" Type="System.Boolean" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="isPrefixSearch" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="text">検索するテキストです。</param>
        <param name="includeSubItemsInSearch">検索にサブ項目を含める場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <param name="startIndex">検索を開始する位置の項目のインデックス。</param>
        <param name="isPrefixSearch">部分的な一致を許可する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>指定したテキスト値で始まる最初の <see cref="T:System.Windows.Forms.ListViewItem" /> または <see cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" /> (指定されている場合) を検索します。 検索は、指定したインデックス位置から開始されます。</summary>
        <returns>指定したテキスト値で始まる最初の <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindItemWithText%2A>メソッドを返します。`null`リストが空か、一致する項目がない場合。  
  
 検索では、大文字と小文字を区別しません。  
  
 `text`パラメーターが必要な一致したテキストの部分文字列を指定できます。 このメソッドは、しない限り、指定したテキストで始まる最初の項目は返さ`false`に渡された`isPrefixSearch`します。 たとえば場合、 <xref:System.Windows.Forms.ListView> 2 つのリスト アイテムの最初の項目のテキストが「山かっ」に設定し、2 番目の項目のテキストが"bracket"- への呼び出しに設定されて<xref:System.Windows.Forms.ListView.FindItemWithText%2A>渡す"brack"検索テキストはテキストに、項目に戻ると、"bracket"。 場合`isPrefixSearch`に設定されている`false`、この呼び出しが返す`null`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> が 0 未満か、<see cref="T:System.Windows.Forms.ListView" /> の項目数より大きい値です。</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FindNearestItem">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定したポイントから次の項目を検索します。検索は、指定した方向で実行されます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint dir, System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint dir, valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint dir, System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.FindNearestItem : System.Windows.Forms.SearchDirectionHint * System.Drawing.Point -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindNearestItem (dir, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dir" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="dir"><see cref="T:System.Windows.Forms.SearchDirectionHint" /> 値のいずれか。</param>
        <param name="point">検索の開始位置を示すポイント。</param>
        <summary>指定したポイントから次の項目を検索します。検索は、指定した方向で実行されます。</summary>
        <returns>指定したポイントに最も近い <see cref="T:System.Windows.Forms.ListViewItem" /> を検索します。検索は、指定した方向で実行されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>メソッドを返します。`null`指定した方向に項目が見つからない場合。 最も近い項目を識別する、アプリケーションが実行されているオペレーティング システムによって異なることができの結果に影響を与える<xref:System.Windows.Forms.ListView.FindNearestItem%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.ListView.View" /> が <see cref="F:System.Windows.Forms.View.SmallIcon" /> または <see cref="F:System.Windows.Forms.View.LargeIcon" /> 以外の値に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="FindNearestItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FindNearestItem (System.Windows.Forms.SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem FindNearestItem(valuetype System.Windows.Forms.SearchDirectionHint searchDirection, int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.FindNearestItem(System.Windows.Forms.SearchDirectionHint,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindNearestItem (searchDirection As SearchDirectionHint, x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ FindNearestItem(System::Windows::Forms::SearchDirectionHint searchDirection, int x, int y);" />
      <MemberSignature Language="F#" Value="member this.FindNearestItem : System.Windows.Forms.SearchDirectionHint * int * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.FindNearestItem (searchDirection, x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="searchDirection" Type="System.Windows.Forms.SearchDirectionHint" />
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="searchDirection"><see cref="T:System.Windows.Forms.SearchDirectionHint" /> 値のいずれか。</param>
        <param name="x">検索を開始する位置を表すポイントの x 座標。</param>
        <param name="y">検索を開始する位置を表すポイントの y 座標。</param>
        <summary>指定した x 座標と y 座標から次の項目を検索します。検索は、指定した方向で実行されます。</summary>
        <returns>指定した検索方向にある、特定の座標に最も近い <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FindNearestItem%2A>メソッドを返します。`null`指定した方向に項目が見つからない場合。 最も近い項目を識別する、アプリケーションが実行されているオペレーティング システムによって異なることができの結果に影響を与える<xref:System.Windows.Forms.ListView.FindNearestItem%2A>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.ListView.View" /> が <see cref="F:System.Windows.Forms.View.SmallIcon" /> または <see cref="F:System.Windows.Forms.View.LargeIcon" /> 以外の値に設定されています。</exception>
      </Docs>
    </Member>
    <Member MemberName="FocusedItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem FocusedItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem FocusedItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FocusedItem" />
      <MemberSignature Language="VB.NET" Value="Public Property FocusedItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ FocusedItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FocusedItem : System.Windows.Forms.ListViewItem with get, set" Usage="System.Windows.Forms.ListView.FocusedItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>現在フォーカスを持つコントロールの項目を取得または設定します。</summary>
        <value>フォーカスがある項目を表す <see cref="T:System.Windows.Forms.ListViewItem" />。<see cref="T:System.Windows.Forms.ListView" /> 内のどの項目にもフォーカスがない場合は <see langword="null" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FocusedItem%2A>プロパティが返す、<xref:System.Windows.Forms.ListViewItem>のフォーカスされた四角形が表示されている項目を表す、<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.ListView>コントロールに、表示する項目以外の直接編集可能な領域がないときに、<xref:System.Windows.Forms.ListView>コントロールにフォーカスが内の項目、<xref:System.Windows.Forms.ListView>その項目のテキストを囲むフォーカス十字線を表示します。 通常、選択した最後の内の項目、<xref:System.Windows.Forms.ListView>コントロールがフォーカスを持つ項目。 項目は、フォーカスの十字線を表示する 1 つにありますが、実際には必ずしもで選択した項目、<xref:System.Windows.Forms.ListView>します。 使用して、<xref:System.Windows.Forms.ListView.SelectedItems%2A>または<xref:System.Windows.Forms.ListView.SelectedIndices%2A>で選択された項目を取得するプロパティ、<xref:System.Windows.Forms.ListView>コントロール、<xref:System.Windows.Forms.ListView.FocusedItem%2A>プロパティが、必ずしも選択されていません。 使用することができます、<xref:System.Windows.Forms.ListView.FocusedItem%2A>でどの項目が最後に確認するプロパティをクリックした、<xref:System.Windows.Forms.ListView>選択状態に関係なく、コントロール。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="ForeColor">
      <MemberSignature Language="C#" Value="public override System.Drawing.Color ForeColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color ForeColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ForeColor" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ForeColor As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::Color ForeColor { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberSignature Language="F#" Value="member this.ForeColor : System.Drawing.Color with get, set" Usage="System.Windows.Forms.ListView.ForeColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>前景色を取得または設定します。</summary>
        <value>前景色である <see cref="T:System.Drawing.Color" />。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FullRowSelect">
      <MemberSignature Language="C#" Value="public bool FullRowSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullRowSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.FullRowSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property FullRowSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FullRowSelect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FullRowSelect : bool with get, set" Usage="System.Windows.Forms.ListView.FullRowSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をクリックするとそのすべてのサブ項目を選択するかどうかを示す値を取得または設定します。</summary>
        <value>項目をクリックすると項目とそのすべてのサブ項目を選択する場合は <see langword="true" />。項目をクリックすると項目だけを選択する場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>プロパティには効果がない場合を除き、<xref:System.Windows.Forms.ListView.View%2A>のプロパティ、<xref:System.Windows.Forms.ListView>に設定されているコントロール<xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.FullRowSelect%2A>プロパティが通常、際に使用される、<xref:System.Windows.Forms.ListView>多くのサブ項目とそのアイテムが表示されますが、項目のテキストがコントロールの内容の水平スクロールにより表示されないときに、選択した項目を表示することができるようにする必要です。  
  
> [!NOTE]
>  ときに<xref:System.Windows.Forms.ListView.FullRowSelect%2A>に設定されている`true`のツールヒントを<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>は表示されません。 親のツールヒントのみ<xref:System.Windows.Forms.ListViewItem>が表示されます。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="F:System.Windows.Forms.View.Details" />
      </Docs>
    </Member>
    <Member MemberName="GetItemAt">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem GetItemAt (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewItem GetItemAt(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemAt(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemAt (x As Integer, y As Integer) As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewItem ^ GetItemAt(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.GetItemAt : int * int -&gt; System.Windows.Forms.ListViewItem" Usage="listView.GetItemAt (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">項目を検索する位置の x 座標 (クライアント座標)。</param>
        <param name="y">項目を検索する位置の y 座標 (クライアント座標)。</param>
        <summary>指定した位置にある項目を取得します。</summary>
        <returns>指定した位置にある項目を表す <see cref="T:System.Windows.Forms.ListViewItem" />。 指定した位置に項目がない場合、メソッドは <see langword="null" /> を返します。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッドを使用して、特定の場所のクライアント領域内に配置されている項目を確認できます、<xref:System.Windows.Forms.ListView>コントロール。 ユーザーがクリックするか、サブ項目を右クリックしたときに、このメソッドを使用することができます (ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて`View.Details`) し、どの項目がクリックされたユーザーがマウスをクリックした時に、マウスの座標に基づいてサブアイテムを所有しているを確認します。  
  
> [!NOTE]
>  ときに、<xref:System.Windows.Forms.ListView.FullRowSelect%2A>プロパティの値が`false`、(これは、コントロールの詳細モードの場合、最初の列に表示されます)、親アイテムの境界内、指定した場所にある場合にのみ、このメソッドは項目を返します。 設定する必要があります、<xref:System.Windows.Forms.ListView.FullRowSelect%2A>プロパティを`true`サブ項目の境界内の場所を指定して、このメソッドで項目を取得します。 使用することも、<xref:System.Windows.Forms.ListView.HitTest%2A>特定位置にある項目に関する詳細情報を取得します。  
  
 内の項目のドラッグ アンド ドロップの再配置を行う、 <xref:System.Windows.Forms.ListView>、使用する、<xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType>メソッドではなく、<xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッド。 <xref:System.Windows.Forms.ListViewInsertionMark.NearestIndex%2A?displayProperty=nameWithType>メソッドは、マウス ポインターが配置されている場所に関係なく、最も近い項目を検索します。 <xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッドを返しますこれに対して、`null`指定した位置に項目がない場合。  
  
> [!NOTE]
>  <xref:System.Windows.Forms.ListViewInsertionMark>クラスは、アプリケーションを呼び出すと、Windows XP と Windows Server 2003 でのみサポート、<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>メソッド。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Windows.Forms.PictureBox>と<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.PictureBox>に設定して初期化される、<xref:System.Windows.Forms.PictureBox.BorderStyle%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.PictureBox.SizeMode%2A?displayProperty=nameWithType>プロパティを使用して、<xref:System.Windows.Forms.BorderStyle>と<xref:System.Windows.Forms.PictureBoxSizeMode>列挙型、それぞれします。 <xref:System.Windows.Forms.ListView>サンプル ディレクトリからの画像が表示されます。 <xref:System.Windows.Forms.ListView.GetItemAt%2A>メソッドは、処理するときで使用、<xref:System.Windows.Forms.ListView>コントロールの<xref:System.Windows.Forms.Control.MouseDown>項目が選択されているかどうかを決定するイベントです。 イベント ハンドラーが設定して、選択したファイルを表示する項目が選択されている場合、<xref:System.Windows.Forms.PictureBox.Image%2A?displayProperty=nameWithType>プロパティ。 例では、C:\documents and Users\Documents\My Pictures \sample pictures の別のディレクトリ内にある JPG ファイルが存在する必要があります。 この例を実行するには、フォームと呼び出しにコードを貼り付けます、`InitializePictureBox`と`PopulateListView`フォームのコンス トラクター内のメソッドまたは`Load`メソッド。 すべてのイベントがイベント ハンドラーに関連付けられていることを確認します。  
  
 [!code-cpp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewAndPictureBox#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewAndPictureBox/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Control.PointToScreen(System.Drawing.Point)" />
        <altmember cref="M:System.Windows.Forms.Control.PointToClient(System.Drawing.Point)" />
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetItemRect">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>コントロール内の項目の外接する四角形を取得します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index);" />
      <MemberSignature Language="F#" Value="member this.GetItemRect : int -&gt; System.Drawing.Rectangle" Usage="listView.GetItemRect index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">外接する四角形が返される <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 内の項目の 0 から始まるインデックス番号。</param>
        <summary>リスト ビュー コントロール内の特定の項目の外接する四角形を取得します。</summary>
        <returns>指定した <see cref="T:System.Drawing.Rectangle" /> の外接する四角形を表す <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンのによって返される外接する四角形、<xref:System.Windows.Forms.ListView.GetItemRect%2A>メソッドは、アイコン、項目のテキスト、およびサブ項目のテキストを含むアイテム全体を表します。 項目の特定部分の外接する四角形を指定するその他のバージョンを使用して、<xref:System.Windows.Forms.ListView.GetItemRect%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
      </Docs>
    </Member>
    <Member MemberName="GetItemRect">
      <MemberSignature Language="C#" Value="public System.Drawing.Rectangle GetItemRect (int index, System.Windows.Forms.ItemBoundsPortion portion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.Rectangle GetItemRect(int32 index, valuetype System.Windows.Forms.ItemBoundsPortion portion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.GetItemRect(System.Int32,System.Windows.Forms.ItemBoundsPortion)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetItemRect (index As Integer, portion As ItemBoundsPortion) As Rectangle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Rectangle GetItemRect(int index, System::Windows::Forms::ItemBoundsPortion portion);" />
      <MemberSignature Language="F#" Value="member this.GetItemRect : int * System.Windows.Forms.ItemBoundsPortion -&gt; System.Drawing.Rectangle" Usage="listView.GetItemRect (index, portion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Rectangle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="portion" Type="System.Windows.Forms.ItemBoundsPortion" />
      </Parameters>
      <Docs>
        <param name="index">外接する四角形が返される <see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> 内の項目の 0 から始まるインデックス番号。</param>
        <param name="portion">外接する四角形を取得する <see cref="T:System.Windows.Forms.ItemBoundsPortion" /> の部分を表す <see cref="T:System.Windows.Forms.ListViewItem" /> 値の 1 つ。</param>
        <summary>リスト ビュー コントロール内の特定の項目の外接する四角形の指定した部分を取得します。</summary>
        <returns>指定した <see cref="T:System.Drawing.Rectangle" /> の指定した部分の外接する四角形を表す <see cref="T:System.Windows.Forms.ListViewItem" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このバージョンのによって返される外接する四角形、<xref:System.Windows.Forms.ListView.GetItemRect%2A>メソッドで指定された項目のセクションのみを表す、`portion`パラメーター。 項目全体の外接する四角形を返すをその他のバージョンの使用、<xref:System.Windows.Forms.ListView.GetItemRect%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Rectangle" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ItemBoundsPortion" />
      </Docs>
    </Member>
    <Member MemberName="GridLines">
      <MemberSignature Language="C#" Value="public bool GridLines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GridLines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.GridLines" />
      <MemberSignature Language="VB.NET" Value="Public Property GridLines As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GridLines { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GridLines : bool with get, set" Usage="System.Windows.Forms.ListView.GridLines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの項目とサブ項目を含む行と列の間にグリッド線を表示するかどうかを示す値を取得または設定します。</summary>
        <value>項目とサブ項目の周りにグリッド線を描画する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.GridLines%2A>プロパティには効果がない場合を除き、<xref:System.Windows.Forms.ListView.View%2A>のプロパティ、<xref:System.Windows.Forms.ListView>に設定されているコントロール<xref:System.Windows.Forms.View.Details>。 <xref:System.Windows.Forms.ListView.GridLines%2A>プロパティでは、行と列に表示されるを識別するために行を表示することができます、<xref:System.Windows.Forms.ListView>項目とそのサブ項目を表示、制御します。 表示されるグリッド線には、Microsoft excel などの行と列をアプリケーションとしてサイズ変更する機能は提供されません。 サイズを変更する列の右側にマウス ポインターを移動 をクリックし、列が必要なサイズまでドラッグすることによって、列ヘッダーが表示されている場合、列のみをサイズ変更できます。 グリッド線の機能は、表示されている境界とサブ項目の項目の周りをコントロールのユーザーに提供に使用されます。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="Groups">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewGroupCollection Groups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewGroupCollection Groups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Groups" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Groups As ListViewGroupCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewGroupCollection ^ Groups { System::Windows::Forms::ListViewGroupCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Groups : System.Windows.Forms.ListViewGroupCollection" Usage="System.Windows.Forms.ListView.Groups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewGroupCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewGroupCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに割り当てられた <see cref="T:System.Windows.Forms.ListViewGroup" /> オブジェクトのコレクションを取得します。</summary>
        <value><see cref="T:System.Windows.Forms.ListViewGroupCollection" /> コントロール内のすべてのグループを格納する <see cref="T:System.Windows.Forms.ListView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>グループ化機能では、論理的に関連の視覚的なグループを作成できます。<xref:System.Windows.Forms.ListView>項目。 各グループは、テキストの水平方向の行ヘッダーとそのグループに割り当てられた項目で構成されます。 左、右、またはコントロールの中央にヘッダー テキストを揃えることができます。 すべてのグループに割り当てられている、<xref:System.Windows.Forms.ListView>コントロールが表示されるたびに、<xref:System.Windows.Forms.ListView.View%2A>プロパティが以外の値に設定されて<xref:System.Windows.Forms.View.List?displayProperty=nameWithType>します。  
  
 <xref:System.Windows.Forms.ListView> グループは、ユーザーが、使いやすいカテゴリにアイテムを分離することで探している項目の検索に役立ちます。 必要な任意のカテゴリを作成できます。 1 つの一般的なアプローチでは、リストの並べ替え方法に基づいて項目をグループ化します。 たとえば、アルファベット順またはサブ項目の種類や詳細ビューで列見出しをクリックして一覧を並べ替えるときの日付など、リストが並べ替えられる場合は、項目名の最初の文字で項目をグループことができます。 Windows エクスプ ローラーでは、この種類のグループ化を使用します。  
  
 1 つ以上の追加のグループ化機能を使用する<xref:System.Windows.Forms.ListViewGroup>オブジェクトを<xref:System.Windows.Forms.ListView.Groups%2A>のコレクションを<xref:System.Windows.Forms.ListView>コントロール。 グループ ヘッダーのテキストとヘッダーの配置を設定、<xref:System.Windows.Forms.ListViewGroup.%23ctor%2A>コンス トラクター、またはそれらの設定を使用して、<xref:System.Windows.Forms.ListViewGroup.Header%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.ListViewGroup.HeaderAlignment%2A?displayProperty=nameWithType>プロパティ。  
  
 グループ化機能を一時的に無効にするには設定、<xref:System.Windows.Forms.ListView.ShowGroups%2A>プロパティを`false`します。  
  
 内のグループを指定することで項目をグループに割り当てることができます、<xref:System.Windows.Forms.ListViewItem.%23ctor%2A>を設定して、コンス トラクター、<xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType>プロパティ、または直接する項目を追加することで、<xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType>グループのコレクション。 表示される前に、すべての項目をグループに割り当てる必要があります。 ヘッダー ラベルを持つ既定のグループにグループに割り当てられていないすべての項目が表示されます"DefaultGroup{0}"。 既定のグループが含まれていない、<xref:System.Windows.Forms.ListView.Groups%2A>コレクションを変更することはできません。 主に、すべての項目がグループに正しく追加されていることを確認する、デバッグに便利です。  
  
 項目は、一度に 1 つグループ内にのみできます。 設定して、項目が所属するグループを変更することができます、<xref:System.Windows.Forms.ListViewItem.Group%2A?displayProperty=nameWithType>プロパティの実行時または追加することによって、<xref:System.Windows.Forms.ListViewGroup.Items%2A?displayProperty=nameWithType>前のグループから自動的に削除されますが、別のグループのコレクション。  
  
 グループを使用する場合は、挿入マーク機能を無効になっています。 これは、挿入マーク機能の使用でドラッグ アンド ドロップを再配置中にグループ化機能のグループのメンバーシップによって項目を並べ替えますため、<xref:System.Windows.Forms.ListView>コントロールをその項目を既に順序付けしません。  
  
 <xref:System.Windows.Forms.ListView> グループは、アプリケーションを呼び出すと、Windows XP と Windows Server 2003 でのみ使用可能な<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>メソッド。 以前のオペレーティング システムでは、グループに関するすべてのコードが影響を与えません、グループは表示されません。 その結果、グループ化機能に依存するすべてのコードが正しく動作しない可能性があります。  
  
 グループ化機能が使用可能かどうかを決定するコードを含めるし、が利用できない場合は、代替機能を提供する可能性があります。 たとえば、グループ、並べ替えをサポートしないオペレーティング システムで実行されているときに、別の並べ替えを提供する可能性があります。  
  
 グループ化機能は、オペレーティング システムのテーマ機能を提供するのと同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>メソッドのオーバー ロードを渡します、<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>値。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.ListView>サブ項目に値の詳細ビューで項目を整理するグループ化機能。 この形式のグループ化は、Windows エクスプ ローラーで使用されるグループ化に似ています。 例では、グループは動的に作成されます。 サブ項目の各列の一意のサブ項目の値ごとに 1 つのグループが作成されます。 親項目列で、一意の初期名ごとに 1 つのグループが作成されます。 列のヘッダーをクリックすると、その列に対して作成されたグループに、項目が並べ替えられます。 同じ列ヘッダーを再度クリックすると、グループの順序を反転させます。  
  
 [!code-cpp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CPP/listviewgroupsexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/CS/listviewgroupsexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Groups#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Groups/VB/listviewgroupsexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="P:System.Windows.Forms.ListView.ShowGroups" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="HeaderStyle">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ColumnHeaderStyle HeaderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ColumnHeaderStyle HeaderStyle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HeaderStyle" />
      <MemberSignature Language="VB.NET" Value="Public Property HeaderStyle As ColumnHeaderStyle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ColumnHeaderStyle HeaderStyle { System::Windows::Forms::ColumnHeaderStyle get(); void set(System::Windows::Forms::ColumnHeaderStyle value); };" />
      <MemberSignature Language="F#" Value="member this.HeaderStyle : System.Windows.Forms.ColumnHeaderStyle with get, set" Usage="System.Windows.Forms.ListView.HeaderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ColumnHeaderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>列ヘッダーのスタイルを取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.ColumnHeaderStyle.Clickable" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティを使用するときに表示される列ヘッダーの種類を指定する、<xref:System.Windows.Forms.ListView.View%2A>のプロパティ、<xref:System.Windows.Forms.ListView>に設定されているコントロール<xref:System.Windows.Forms.View.Details>と<xref:System.Windows.Forms.ListView>コントロールに<xref:System.Windows.Forms.ColumnHeader>で指定されたオブジェクト<xref:System.Windows.Forms.ListView.ColumnHeaderCollection>. <xref:System.Windows.Forms.ColumnHeader> オブジェクトに表示される列の定義、<xref:System.Windows.Forms.ListView>コントロール。 内の各項目のサブ項目の情報を表示する各列の使用、<xref:System.Windows.Forms.ListView>します。  
  
 <xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティでは、列ヘッダーを表示または、表示される場合かどうかが、動作として、クリック可能なボタンかどうかを指定することができます。 場合、<xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティに設定されて<xref:System.Windows.Forms.ColumnHeaderStyle.None?displayProperty=nameWithType>、ですが、列ヘッダーは表示されませんが、項目とサブ項目の<xref:System.Windows.Forms.ListView>コントロールは列にも配置されます。 場合、<xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティに設定されて<xref:System.Windows.Forms.ColumnHeaderStyle.Clickable?displayProperty=nameWithType>、列ヘッダーがボタン内の項目の並べ替えなどのアクションを実行するためにユーザーがクリックしてできるように動作、<xref:System.Windows.Forms.ListView>制御項目をクリックした列をキーとして使用します。 この動作を実装するには、イベントのハンドラーで、<xref:System.Windows.Forms.ListView.ColumnClick>イベント。 場合、<xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティに設定されて<xref:System.Windows.Forms.ColumnHeaderStyle.Nonclickable?displayProperty=nameWithType>、列ヘッダーの表示がクリックすることはできません。  
  
   
  
## Examples  
 次のコード例に示します、<xref:System.Windows.Forms.ListView>複数の項目を選択できるようにします。 設定の例に示します、<xref:System.Windows.Forms.ListView.HideSelection%2A>と<xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティ。 また、 <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>、<xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType>プロパティ。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前のオブジェクト`ListView1`と<xref:System.Windows.Forms.TextBox>という名前の`TextBox1`します。 呼び出す、`InitializeListView`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値が <see cref="T:System.Windows.Forms.ColumnHeaderStyle" /> 値ではありません。</exception>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnHeaderStyle" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="HideSelection">
      <MemberSignature Language="C#" Value="public bool HideSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HideSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HideSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HideSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HideSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HideSelection : bool with get, set" Usage="System.Windows.Forms.ListView.HideSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールがフォーカスを失ったときに、そのコントロールで選択されている項目が強調表示されたままかどうかを示す値を取得または設定します。</summary>
        <value>コントロールがフォーカスを失ったときに、選択されている項目が強調表示されない場合は <see langword="true" />。コントロールがフォーカスを失っても、選択されている項目が強調表示されたままである場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定すると`false`で選択された項目、<xref:System.Windows.Forms.ListView>コントロールをオペレーティング システムで指定された現在の選択項目の色は異なる色で強調表示されたまま維持ときに、<xref:System.Windows.Forms.ListView>コントロールがフォーカスを失った。 このプロパティを使用して、ユーザー フォーム上の別のコントロールをクリックするか、別のウィンドウに移動するとき、表示、ユーザーが選択された項目を保持することができます。  
  
> [!NOTE]
>  アプリケーションのユーザー補助の懸念がある場合は、設定することをお勧め、<xref:System.Windows.Forms.ListView.HideSelection%2A>プロパティを`false`します。  
  
   
  
## Examples  
 次のコード例に示します、<xref:System.Windows.Forms.ListView>複数の項目を選択できるようにします。 設定の例に示します、<xref:System.Windows.Forms.ListView.HideSelection%2A>と<xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティ。 また、 <xref:System.Windows.Forms.ColumnHeader.Text%2A?displayProperty=nameWithType>、 <xref:System.Windows.Forms.ColumnHeader.TextAlign%2A?displayProperty=nameWithType>、および<xref:System.Windows.Forms.ColumnHeader.Width%2A?displayProperty=nameWithType>プロパティ。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前のオブジェクト`ListView1`と<xref:System.Windows.Forms.TextBox>という名前の`TextBox1`します。 呼び出す、`InitializeListView`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="HitTest">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定した x 座標と y 座標の項目情報を提示します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.HitTest : System.Drawing.Point -&gt; System.Windows.Forms.ListViewHitTestInfo" Usage="listView.HitTest point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">項目の情報を取得する位置を表す <see cref="T:System.Drawing.Point" />。 座標は、このコントロールの左上隅を起点とした相対座標です。</param>
        <summary>指定した位置の項目情報を提示します。</summary>
        <returns>指定した位置の項目情報。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 かどうか、ポイントが、項目またはサブ項目と項目で、ポイントがある場所など、ラベルやイメージの領域を確認するのには、このメソッドを使用します。 座標が、返された、コントロールの外側にあるかどうかは<xref:System.Windows.Forms.ListViewHitTestInfo>オブジェクトには、 <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> "None"; のプロパティと<xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A>と<xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A>プロパティに設定されます`null`します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">ポイントに、0 未満の座標が含まれています。</exception>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewHitTestInfo HitTest (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ListViewHitTestInfo HitTest(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.HitTest(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function HitTest (x As Integer, y As Integer) As ListViewHitTestInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ListViewHitTestInfo ^ HitTest(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.HitTest : int * int -&gt; System.Windows.Forms.ListViewHitTestInfo" Usage="listView.HitTest (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewHitTestInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">項目情報を取得する位置を表す x 座標。 座標は、このコントロールの左上隅を起点とした相対座標です。</param>
        <param name="y">項目情報を取得する位置を表す y 座標。 座標は、このコントロールの左上隅を起点とした相対座標です。</param>
        <summary>指定した x 座標と y 座標の項目情報を提示します。</summary>
        <returns>指定した x 座標と y 座標の項目情報。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 かどうか、ポイントが、項目またはサブ項目と項目で、ポイントがある場所など、ラベルやイメージの領域を確認するのには、このメソッドを使用します。 座標が、返された、コントロールの外側にあるかどうかは<xref:System.Windows.Forms.ListViewHitTestInfo>オブジェクトには、 <xref:System.Windows.Forms.ListViewHitTestInfo.Location%2A> "None"; のプロパティと<xref:System.Windows.Forms.ListViewHitTestInfo.Item%2A>と<xref:System.Windows.Forms.ListViewHitTestInfo.SubItem%2A>プロパティに設定されます`null`します。  
  
   
  
## Examples  
 次のコード例に示しますを使用して、<xref:System.Windows.Forms.ListView.HitTest%2A>のマウス イベントの場所を決定する方法、<xref:System.Windows.Forms.ListView>します。 この例を実行するを含む Windows フォームに貼り付け、<xref:System.Windows.Forms.ListView>という`listView1`項目に設定されます。 関連付ける、<xref:System.Windows.Forms.Control.MouseDown>イベントを`listView1`で、`listView1_MouseDown`この例ではメソッドです。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#7)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">x 座標または y 座標が 0 未満です。</exception>
      </Docs>
    </Member>
    <Member MemberName="HotTracking">
      <MemberSignature Language="C#" Value="public bool HotTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HotTracking" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HotTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property HotTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HotTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HotTracking : bool with get, set" Usage="System.Windows.Forms.ListView.HotTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターが置かれたときに、項目またはサブ項目のテキストの外観がハイパーリンクになるかどうかを示す値を取得または設定します。</summary>
        <value>マウスが置かれたときに、項目のテキストの外観がハイパーリンクになる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ホット トラッキング中を有効にすると、<xref:System.Windows.Forms.ListView.Activation%2A>プロパティを設定する<xref:System.Windows.Forms.ItemActivation.OneClick>と<xref:System.Windows.Forms.ListView.HoverSelection%2A>プロパティを設定する`true`します。 さらに、実行時のラベル編集が許可されないホット トラッキングが有効にするとします。  
  
   
  
## Examples  
 次のコード例に示します、<xref:System.Windows.Forms.ListView>ホット トラッキングが有効になっているとします。 この例を実行するには、Windows フォームと呼び出しに次のコードを貼り付け、`InitializeHotTrackingListView`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-csharp[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewWhidbeyProperties#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewWhidbeyProperties/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HoverSelection">
      <MemberSignature Language="C#" Value="public bool HoverSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HoverSelection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.HoverSelection" />
      <MemberSignature Language="VB.NET" Value="Public Property HoverSelection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HoverSelection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HoverSelection : bool with get, set" Usage="System.Windows.Forms.ListView.HoverSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターが項目の上に数秒間留まったときに、項目が自動的に選択されるかどうかを示す値を取得または設定します。</summary>
        <value>マウス ポインターが移動したときに項目が自動的に選択される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定すると`true`、ユーザーに項目をポイントすることができます、<xref:System.Windows.Forms.ListView>コントロール項目を選択します。 複数の項目を選択できます (ときに、<xref:System.Windows.Forms.ListView.MultiSelect%2A>プロパティが設定を true に)、CTRL キーを押しながら各項目をポイントします。 この機能を使用するには項目を選択して、アプリケーションのユーザーを簡単にメソッドを提供、<xref:System.Windows.Forms.ListView>コントロール。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertionMark">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewInsertionMark InsertionMark { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewInsertionMark InsertionMark" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.InsertionMark" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertionMark As ListViewInsertionMark" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewInsertionMark ^ InsertionMark { System::Windows::Forms::ListViewInsertionMark ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertionMark : System.Windows.Forms.ListViewInsertionMark" Usage="System.Windows.Forms.ListView.InsertionMark" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewInsertionMark</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> コントロール内で項目がドラッグされる場合に目的のドロップ位置を示すために使用されるオブジェクトを取得します。</summary>
        <value>挿入マークを表す <see cref="T:System.Windows.Forms.ListViewInsertionMark" /> オブジェクト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>挿入マーク機能では、新しい位置に項目がドラッグされるときに、ドラッグ アンド ドロップ操作で目的のドロップ位置を視覚的に示すことができます。 この機能は場合にのみ、<xref:System.Windows.Forms.ListView.AutoArrange%2A>プロパティに設定されて`true`とタイミング、<xref:System.Windows.Forms.ListView>コントロールが項目を自動的に並べ替えられません。 自動並べ替えを防ぐために、<xref:System.Windows.Forms.ListView.Sorting%2A>にプロパティを設定する必要があります<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>と<xref:System.Windows.Forms.ListView.View%2A>にプロパティを設定する必要があります<xref:System.Windows.Forms.View.LargeIcon?displayProperty=nameWithType>、 <xref:System.Windows.Forms.View.SmallIcon?displayProperty=nameWithType>、または<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>します。 さらに、挿入マーク機能できない可能性があります使用して、表示、<xref:System.Windows.Forms.ListView>のグループ化機能グループのメンバーシップによって、項目を注文するための機能をグループ化します。  
  
 <xref:System.Windows.Forms.ListViewInsertionMark>クラスは通常のハンドラーで使用、<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>または<xref:System.Windows.Forms.Control.MouseMove?displayProperty=nameWithType>項目がドラッグされると、挿入マークの位置を更新するイベントです。 ハンドラーで使用されても、<xref:System.Windows.Forms.Control.DragDrop?displayProperty=nameWithType>または<xref:System.Windows.Forms.Control.MouseUp?displayProperty=nameWithType>の正しい場所にドラッグした項目を挿入するイベントです。 詳細については、次を参照してください。<xref:System.Windows.Forms.ListViewInsertionMark>と[方法。Windows フォーム ListView コントロールに挿入マークを表示](~/docs/framework/winforms/controls/how-to-display-an-insertion-mark-in-a-windows-forms-listview-control.md)します。  
  
> [!NOTE]
>  挿入マーク機能は Windows XP および Windows Server 2003 でのみ使用できますが、アプリケーションを呼び出すと、<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>メソッド。 以前のオペレーティング システムでは、挿入マークに関連するすべてのコードは効果がなく、挿入マークは表示されません。 その結果、挿入マーク機能に依存する任意のコードが正しく動作しない可能性があります。 この機能は、使用できるかどうかを決定するコードを含めるしが利用できない場合は、代替機能を提供する可能性があります。 たとえば、挿入マークをサポートしないオペレーティング システムで実行されているときの位置を変更する項目のドラッグ アンド ドロップを実装するコードをすべてバイパスする可能性があります。  
>   
>  挿入マーク機能は、オペレーティング システムのテーマ機能を提供するのと同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>メソッドのオーバー ロードを渡します、<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>値。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.ListView>挿入マーク機能します。 この例では、標準的なドラッグ イベントを使用するドラッグ アンド ドロップの項目の並べ替えを実装します。 挿入マークの位置は、イベントのハンドラーで更新、<xref:System.Windows.Forms.Control.DragOver?displayProperty=nameWithType>イベント。 このハンドラーで、最も近い項目の中間点にマウス ポインターの位置を比較し、結果を使用して、アイテムの左右に挿入マークを表示するかどうかを判断します。  
  
 [!code-cpp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CPP/listviewinsertionmarkexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/CS/listviewinsertionmarkexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.InsertionMark#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.InsertionMark/VB/listviewinsertionmarkexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewInsertionMark" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="listView.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> 値のいずれか。</param>
        <summary>指定されているキーが、通常の入力キーであるか、またはプリプロセスを必要とする特殊なキーであるかを確認します。</summary>
        <returns>指定されているキーが通常の入力キーである場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemActivate">
      <MemberSignature Language="C#" Value="public event EventHandler ItemActivate;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ItemActivate" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemActivate" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemActivate As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ ItemActivate;" />
      <MemberSignature Language="F#" Value="member this.ItemActivate : EventHandler " Usage="member this.ItemActivate : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>アイテムがアクティブになったときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemActivate>イベントは、ユーザーが 1 つまたは複数の項目をアクティブ化が発生した、<xref:System.Windows.Forms.ListView>コントロール。 シングル クリックまたはダブルクリックの値に応じてのいずれかで項目をアクティブにする、<xref:System.Windows.Forms.ListView.Activation%2A>プロパティ、またはキーボードを使用します。 イベント ハンドラー内で、<xref:System.Windows.Forms.ListView.ItemActivate>イベントを参照できます、<xref:System.Windows.Forms.ListView.SelectedItems%2A>または<xref:System.Windows.Forms.ListView.SelectedIndices%2A>プロパティで選択した項目のコレクションへのアクセスを<xref:System.Windows.Forms.ListView>を決定する項目をアクティブ化します。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.ItemActivate>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.ItemActivate>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#473](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#473)]
 [!code-vb[System.Windows.Forms.EventExamples#473](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#473)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ItemCheck">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckEventHandler ItemCheck;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckEventHandler ItemCheck" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemCheck" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemCheck As ItemCheckEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckEventHandler ^ ItemCheck;" />
      <MemberSignature Language="F#" Value="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " Usage="member this.ItemCheck : System.Windows.Forms.ItemCheckEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目のチェックの状態が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.CheckBoxes%2A>にプロパティを設定する必要があります内の各項目の横に表示されるチェック ボックスの順序では true、<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.ListView.ItemCheck>イベントは、または項目のチェックの状態が変更されたときに発生します。、<xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティに設定されて`true`します。 イベント ハンドラーを作成することができます、<xref:System.Windows.Forms.ListView.ItemCheck>項目がチェックインされるたびに、項目のアイコンまたは別のアプリケーション固有のタスクの状態を変更するなどのタスクを実行するイベント、<xref:System.Windows.Forms.ListView>コントロール。  
  
> [!NOTE]
>  ウィンドウ ハンドルが作成されていない場合がある場合、<xref:System.Windows.Forms.ListView.ItemCheck>イベントは、イベントが遅延されます。 (フォームが表示される) とウィンドウのハンドルが作成されると、いずれかの遅延<xref:System.Windows.Forms.ListView.ItemCheck>イベントが発生します。 詳細については、「<xref:System.Windows.Forms.Control.HandleCreated>」を参照してください。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例を示しますチェック<xref:System.Windows.Forms.ListView>を処理するコントロール、<xref:System.Windows.Forms.ListView.ItemCheck>イベント。 メソッドを使用して、<xref:System.Windows.Forms.ItemCheckEventArgs.CurrentValue%2A?displayProperty=nameWithType>と<xref:System.Windows.Forms.ItemCheckEventArgs.Index%2A?displayProperty=nameWithType>プロパティを取得し、選択したメニュー項目の価格を反映します。 この例を実行するを含むフォームに次のコードを貼り付け、`ListView`という名前`ListView1`と`TextBox`という名前`Textbox1`します。 呼び出す、`InititalizeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。 いることを確認、<xref:System.Windows.Forms.ListView.ItemCheck>イベントは、この例では、イベント ハンドラーに関連付けられています。  
  
 [!code-cpp[System.Windows.Forms.ListView2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView2#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView2#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView2/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView2#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView2/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemChecked">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemCheckedEventHandler ItemChecked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemCheckedEventHandler ItemChecked" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemChecked" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChecked As ItemCheckedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemCheckedEventHandler ^ ItemChecked;" />
      <MemberSignature Language="F#" Value="member this.ItemChecked : System.Windows.Forms.ItemCheckedEventHandler " Usage="member this.ItemChecked : System.Windows.Forms.ItemCheckedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemCheckedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目のチェック状態が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントは、のような<xref:System.Windows.Forms.ListView.ItemCheck>イベントは、項目がチェックされた後に発生します。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.ItemChecked>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 別の例では、次を参照してください。、<xref:System.Windows.Forms.ListView.ItemCheck>イベント。 イベント ハンドラーがアタッチされている場合にも、コードは同等に機能、<xref:System.Windows.Forms.ListView.ItemChecked>イベント。  
  
 この例のコードを実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.ItemChecked>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#475](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#475)]
 [!code-vb[System.Windows.Forms.EventExamples#475](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#475)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDrag">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemDragEventHandler ItemDrag;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemDragEventHandler ItemDrag" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemDrag" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemDrag As ItemDragEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemDragEventHandler ^ ItemDrag;" />
      <MemberSignature Language="F#" Value="member this.ItemDrag : System.Windows.Forms.ItemDragEventHandler " Usage="member this.ItemDrag : System.Windows.Forms.ItemDragEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemDragEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ユーザーがアイテムのドラッグを始めたときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ItemDrag>イベントは、ユーザーが項目のドラッグを開始するときに発生します。 イベント ハンドラーでは通常、<xref:System.Windows.Forms.ListView.ItemDrag>イベントを呼び出してドラッグのタスクを実行する、<xref:System.Windows.Forms.Control.DoDragDrop%2A?displayProperty=nameWithType>メソッド。 このイベントを使用するには、アプリケーションの内外に項目をドラッグするために必要なタスクを実行する<xref:System.Windows.Forms.ListView>コントロール。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.ItemDrag>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.ItemDrag>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#476](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#476)]
 [!code-vb[System.Windows.Forms.EventExamples#476](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#476)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventHandler" />
      </Docs>
    </Member>
    <Member MemberName="ItemMouseHover">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemMouseHoverEventHandler ItemMouseHover" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemMouseHover" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemMouseHover As ListViewItemMouseHoverEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemMouseHoverEventHandler ^ ItemMouseHover;" />
      <MemberSignature Language="F#" Value="member this.ItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventHandler " Usage="member this.ItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemMouseHoverEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>マウス ポインターをアイテムの上に移動したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.ItemMouseHover>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.ItemMouseHover>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#477](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#477)]
 [!code-vb[System.Windows.Forms.EventExamples#477](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#477)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.ListViewItemCollection Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/ListViewItemCollection Items" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Items" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Items As ListView.ListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::ListViewItemCollection ^ Items { System::Windows::Forms::ListView::ListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Items : System.Windows.Forms.ListView.ListViewItemCollection" Usage="System.Windows.Forms.ListView.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListViewItemCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+ListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内のすべての項目を格納するコレクションを取得します。</summary>
        <value><see cref="T:System.Windows.Forms.ListView.ListViewItemCollection" /> コントロール内のすべての項目を格納する <see cref="T:System.Windows.Forms.ListView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Windows.Forms.ListView.ListViewItemCollection>このプロパティによって返される、項目を追加、アイテムを削除して項目の数を取得します。 コレクション内の項目で実行できるタスクの詳細については、次を参照してください。、<xref:System.Windows.Forms.ListView.ListViewItemCollection>クラスのリファレンス トピック。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.ListViewItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="ItemSelectionChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewItemSelectionChangedEventHandler ItemSelectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemSelectionChanged As ListViewItemSelectionChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewItemSelectionChangedEventHandler ^ ItemSelectionChanged;" />
      <MemberSignature Language="F#" Value="member this.ItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventHandler " Usage="member this.ItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItemSelectionChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目の選択状態が変更されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 仮想モードで、<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>イベントが複数の項目の選択状態が変更されたときに発生します。  
  
 <xref:System.Windows.Forms.ListView.ItemSelectionChanged>イベントの選択を解除する選択または選択選択解除されてから項目の状態を変更するかどうかに発生します。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.ItemSelectionChanged>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.ItemSelectionChanged>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#478](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#478)]
 [!code-vb[System.Windows.Forms.EventExamples#478](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#478)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      </Docs>
    </Member>
    <Member MemberName="LabelEdit">
      <MemberSignature Language="C#" Value="public bool LabelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LabelEdit : bool with get, set" Usage="System.Windows.Forms.ListView.LabelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの項目のラベルをユーザーが編集できるかどうかを示す値を取得または設定します。</summary>
        <value>実行時にユーザーが項目のラベルを編集できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Forms.ListView.LabelEdit%2A>プロパティに設定されて`true`モードを編集し、項目のテキストにラベルのテキストを配置するには、もう一度クリックすると、ユーザーは、項目のテキストを選択 をクリックして項目のテキストを変更することです。 ユーザーは、変更、または項目のテキスト ラベルを置き換えます。 使用することができます、<xref:System.Windows.Forms.ListView.BeforeLabelEdit>と<xref:System.Windows.Forms.ListView.AfterLabelEdit>前に、と後、ユーザー項目のテキストを編集するには、タスクを実行するイベントです。 このプロパティ設定されている場合、サブ項目のテキストを変更できません`true`します。 サブ項目のテキストを変更するには、コントロールのサブ項目をダブルクリックしたときに、ユーザーにダイアログ ボックスを表示できます。  
  
> [!NOTE]
>  場合、<xref:System.Windows.Forms.ListView.Activation%2A>プロパティに設定されて<xref:System.Windows.Forms.ItemActivation.OneClick>または<xref:System.Windows.Forms.ItemActivation.TwoClick>、ラベルの編集は許可されませんの値に関係なく、<xref:System.Windows.Forms.ListView.LabelEdit%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
      </Docs>
    </Member>
    <Member MemberName="LabelWrap">
      <MemberSignature Language="C#" Value="public bool LabelWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LabelWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LabelWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property LabelWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool LabelWrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.LabelWrap : bool with get, set" Usage="System.Windows.Forms.ListView.LabelWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目がアイコンとしてコントロールに表示されているときに、項目のラベルを折り返すかどうかを示す値を取得または設定します。</summary>
        <value>項目がアイコンとして表示されるときに、項目のラベルを折り返す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Forms.ListView.LabelWrap%2A>プロパティに設定されて`true`、必要な場合、項目のテキストがテキストの次の行にラップされます。 テキストが 2 行のテキストよりも長い場合は、文字列は短縮されます。 ユーザーは、項目を選択する場合は、すべての項目のテキストが表示されます。 場合、<xref:System.Windows.Forms.ListView.LabelWrap%2A>プロパティに設定されて`false`、1 行にすべての項目のテキストが表示されます。 全体の項目のテキストが表示されるときに、<xref:System.Windows.Forms.ListView.LabelWrap%2A>に設定されている`false`します。 このプロパティは、使用する場合にのみ、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.LargeIcon>または<xref:System.Windows.Forms.View.SmallIcon>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.View" />
      </Docs>
    </Member>
    <Member MemberName="LargeImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList LargeImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList LargeImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.LargeImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property LargeImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ LargeImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LargeImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.LargeImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をコントロールで大きいアイコンとして表示するときに使用する <see cref="T:System.Windows.Forms.ImageList" /> を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ImageList" /> プロパティが <see cref="P:System.Windows.Forms.ListView.View" /> に設定されているときに使用するアイコンを格納している <see cref="F:System.Windows.Forms.View.LargeIcon" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.LargeImageList%2A>プロパティでは、指定することができます、<xref:System.Windows.Forms.ImageList>大きいアイコン表示で項目を表示するときに使用するアイコンを格納しているオブジェクト (ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.LargeIcon>)。 <xref:System.Windows.Forms.ListView>コントロールは、任意のグラフィック形式で受け入れることができます、<xref:System.Windows.Forms.ImageList>アイコンを表示するときにコントロールをサポートしています。 <xref:System.Windows.Forms.ListView>コントロールは .ico ファイルに限定されません。 1 回、<xref:System.Windows.Forms.ImageList>に割り当てられている、<xref:System.Windows.Forms.ListView.LargeImageList%2A>プロパティを設定できます、<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>の各プロパティ<xref:System.Windows.Forms.ListViewItem>で、<xref:System.Windows.Forms.ListView>で適切なイメージのインデックス位置にコントロール、<xref:System.Windows.Forms.ImageList>します。 アイコンのサイズ、<xref:System.Windows.Forms.ListView.LargeImageList%2A>で指定された、<xref:System.Windows.Forms.ImageList.ImageSize%2A>します。  
  
 1 つのみのインデックスに指定できるため、<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType>プロパティ、<xref:System.Windows.Forms.ImageList>で指定されたオブジェクト、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティが表示するイメージの同じインデックス位置にあります。 たとえば場合、<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>のプロパティを<xref:System.Windows.Forms.ListViewItem>が設定を 0 には大小のアイコンを使用するイメージの同じインデックス位置にある必要があります、<xref:System.Windows.Forms.ImageList>で指定されたオブジェクト、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。  
  
> [!NOTE]
>  イメージを指定するにはキーを持つ、大小のバージョンのイメージを各イメージ リスト内の同じインデックス位置に配置する必要があります。 ビューを切り替える場合は、1 つのリスト内のイメージのインデックス位置が指定されたキーの値に関係なく、他のリストのイメージを検索に使用されます。  
  
 設定する、<xref:System.Windows.Forms.ImageList>と小さいアイコンの項目を表示するときに使用する (すべてのビュー モードの他にも<xref:System.Windows.Forms.View.LargeIcon>)、使用、<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 項目の状態を表示するのには、使用してイメージを使用するかどうか、<xref:System.Windows.Forms.ListView.StateImageList%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="ListViewItemSorter">
      <MemberSignature Language="C#" Value="public System.Collections.IComparer ListViewItemSorter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IComparer ListViewItemSorter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberSignature Language="VB.NET" Value="Public Property ListViewItemSorter As IComparer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IComparer ^ ListViewItemSorter { System::Collections::IComparer ^ get(); void set(System::Collections::IComparer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ListViewItemSorter : System.Collections.IComparer with get, set" Usage="System.Windows.Forms.ListView.ListViewItemSorter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IComparer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールの並べ替え比較子を取得または設定します。</summary>
        <value>コントロールの並べ替え比較子を表す <see cref="T:System.Collections.IComparer" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティでは、内の項目の並べ替えを実行するオブジェクトを指定することができます、<xref:System.Windows.Forms.ListView>タイミングを制御、<xref:System.Windows.Forms.ListView.Sort%2A>メソッドが呼び出されるか、項目が一覧に追加されたとき。 項目がないので注意は、それぞれのラベル テキストが変更されたときに自動的に並べ替えられます。  
  
 指定したオブジェクトを実装するクラスのインスタンスである必要があります、<xref:System.Collections.IComparer>インターフェイスと呼ばれる 1 つのメソッドを<xref:System.Collections.Comparer.Compare%2A?displayProperty=nameWithType>します。  
  
 このプロパティを使用して、カスタムの並べ替えをたとえば、詳細ビューで列ヘッダーがクリックされたときに提供することができます。 これを行うには、実装するクラスを作成、<xref:System.Collections.IComparer>インターフェイスし、並べ替える列のインデックスを受け取るコンス トラクターを提供します。 ハンドラーを実装することができますし、<xref:System.Windows.Forms.ListView.ColumnClick>クリックされた列のインデックスを使用してこのクラスのインスタンスを作成するイベントです。 設定すると、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティ、新しいインスタンスを<xref:System.Windows.Forms.ListView>コントロールの指定したオブジェクトを使用してを自動的に並べ替えます。 後続の呼び出し、<xref:System.Windows.Forms.ListView.Sort%2A>メソッドが同じオブジェクトを使用します。  
  
> [!NOTE]
>  値を設定すると、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティ、<xref:System.Windows.Forms.ListView.Sort%2A>メソッドが自動的に呼び出されます。  
  
   
  
## Examples  
 次のコード例を含むフォームを作成し、<xref:System.Windows.Forms.ListView>コントロールを手動で項目の列を並べ替える、<xref:System.Windows.Forms.ListView>コントロールがクリックされました。 例と呼ばれるクラス定義`ListViewItemComparer`を実装する、<xref:System.Collections.IComparer?displayProperty=nameWithType>インターフェイスを実行する、<xref:System.Windows.Forms.ListViewItem>比較します。 インスタンスを作成する例では、`ListViewItemComparer`設定を使用して、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>のプロパティ、<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.ListView.Sort%2A>でメソッドを呼び出す、<xref:System.Windows.Forms.ListView.ColumnClick>イベント ハンドラーで定義されているメソッドを使用して`ListViewItemComparer`クリックしてされた列に基づく、項目の並べ替えを実行します。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IComparer" />
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
      </Docs>
    </Member>
    <Member MemberName="MultiSelect">
      <MemberSignature Language="C#" Value="public bool MultiSelect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MultiSelect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.MultiSelect" />
      <MemberSignature Language="VB.NET" Value="Public Property MultiSelect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MultiSelect { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.MultiSelect : bool with get, set" Usage="System.Windows.Forms.ListView.MultiSelect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>複数の項目を選択できるかどうかを示す値を取得または設定します。</summary>
        <value>コントロールの複数の項目を一度に選択できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Forms.ListView.MultiSelect%2A>プロパティに設定されて`true`で複数の項目を選択できる、<xref:System.Windows.Forms.ListView>コントロール。 複数の項目を選択するには、ユーザーを選択する項目をクリックして CTRL キーを保持する必要があります。 最初の項目を選択する をクリックし、最後の項目を選択する をクリックして、SHIFT キーを押しながら、連続した項目を選択できます。 複数選択機能を使用するには複数の項目を選択する、<xref:System.Windows.Forms.ListView>を制御し、選択したすべてのアイテムに対して操作を実行します。 たとえば、ユーザーは、複数の項目を選択し、選択した項目に対して実行できるタスクのセットが表示されるショートカット メニューを表示する選択項目を右クリックします。  
  
 選択されている項目を決定する、<xref:System.Windows.Forms.ListView>コントロールを使用して、<xref:System.Windows.Forms.ListView.SelectedItems%2A>プロパティ。 <xref:System.Windows.Forms.ListView.SelectedItems%2A>プロパティを使用すると、アクセス、<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>選択した項目の一覧を格納しています。 インデックス位置する場合、 <xref:System.Windows.Forms.ListView.ListViewItemCollection> 、アイテムの代わりに使用することができます、<xref:System.Windows.Forms.ListView.SelectedIndices%2A>プロパティにアクセスする、<xref:System.Windows.Forms.ListView.SelectedIndexCollection>します。  
  
 複数選択できるようにしないかどうか、 <xref:System.Windows.Forms.ListView>、まだユーザーに提供する複数の項目を設定して、チェック ボックスを表示することができます、選択するための方法を<xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティを`true`します。  
  
   
  
## Examples  
 次のコード例に示します、<xref:System.Windows.Forms.ListView>複数の項目を選択できるようにします。 設定の例に示します、<xref:System.Windows.Forms.ListView.HideSelection%2A>と<xref:System.Windows.Forms.ListView.HeaderStyle%2A>プロパティ。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前のオブジェクト`ListView1`と<xref:System.Windows.Forms.TextBox>という名前の`TextBox1`します。 呼び出す、`InitializeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="OnAfterLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnAfterLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAfterLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAfterLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAfterLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAfterLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit&#xA;override this.OnAfterLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit" Usage="listView.OnAfterLabelEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.LabelEditEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnAfterLabelEdit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.ListView.AfterLabelEdit>新しく編集されたラベルをアルファベットの文字に制限するイベントです。 この例では、<xref:System.Text.ASCIIEncoding>クラスの新しいラベルの各文字の ASCII 文字コードを取得します。 文字が数字を表す ASCII コードの間にある場合は、項目に新しいラベルを適用できません。 この例では、作成済みである必要があります、<xref:System.Windows.Forms.ListView>フォームとそれに追加された項目へのコントロール。 また、例では接続していることが必要です、<xref:System.Windows.Forms.ListView.AfterLabelEdit>イベントをコードの例で定義されているイベント ハンドラー。 使用するには、 <xref:System.Text.ASCIIEncoding> 、ファイルに含める必要があります、クラス、<xref:System.Text>名前空間。  
  
 [!code-cpp[ListView.AfterLabelEdit#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CPP/form1.cpp#1)]
 [!code-csharp[ListView.AfterLabelEdit#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.AfterLabelEdit/CS/form1.cs#1)]
 [!code-vb[ListView.AfterLabelEdit#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.AfterLabelEdit/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnAfterLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnBackgroundImageChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackgroundImageChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackgroundImageChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackgroundImageChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackgroundImageChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackgroundImageChanged : EventArgs -&gt; unit" Usage="listView.OnBackgroundImageChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.BackgroundImageChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnBackgroundImageChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnBackgroundImageChanged(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnBeforeLabelEdit">
      <MemberSignature Language="C#" Value="protected virtual void OnBeforeLabelEdit (System.Windows.Forms.LabelEditEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBeforeLabelEdit(class System.Windows.Forms.LabelEditEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBeforeLabelEdit (e As LabelEditEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBeforeLabelEdit(System::Windows::Forms::LabelEditEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBeforeLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit&#xA;override this.OnBeforeLabelEdit : System.Windows.Forms.LabelEditEventArgs -&gt; unit" Usage="listView.OnBeforeLabelEdit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.LabelEditEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.LabelEditEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnBeforeLabelEdit%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnBeforeLabelEdit(System.Windows.Forms.LabelEditEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
        <altmember cref="T:System.Windows.Forms.LabelEditEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnCacheVirtualItems">
      <MemberSignature Language="C#" Value="protected virtual void OnCacheVirtualItems (System.Windows.Forms.CacheVirtualItemsEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCacheVirtualItems(class System.Windows.Forms.CacheVirtualItemsEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCacheVirtualItems (e As CacheVirtualItemsEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCacheVirtualItems(System::Windows::Forms::CacheVirtualItemsEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventArgs -&gt; unit&#xA;override this.OnCacheVirtualItems : System.Windows.Forms.CacheVirtualItemsEventArgs -&gt; unit" Usage="listView.OnCacheVirtualItems e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.CacheVirtualItemsEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.CacheVirtualItemsEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.CacheVirtualItems" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnCacheVirtualItems%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnCacheVirtualItems(System.Windows.Forms.CacheVirtualItemsEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnClick (System.Windows.Forms.ColumnClickEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnClick(class System.Windows.Forms.ColumnClickEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnClick (e As ColumnClickEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnClick(System::Windows::Forms::ColumnClickEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnClick : System.Windows.Forms.ColumnClickEventArgs -&gt; unit&#xA;override this.OnColumnClick : System.Windows.Forms.ColumnClickEventArgs -&gt; unit" Usage="listView.OnColumnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnClickEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ColumnClickEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ColumnClick" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnColumnClick%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
   
  
## Examples  
 次のコード例を含むフォームを作成し、<xref:System.Windows.Forms.ListView>コントロールを手動で項目の列を並べ替える、<xref:System.Windows.Forms.ListView>コントロールがクリックされました。 例と呼ばれるクラス定義`ListViewItemComparer`を実装する、<xref:System.Collections.IComparer?displayProperty=nameWithType>インターフェイスを実行する、<xref:System.Windows.Forms.ListViewItem>比較します。 インスタンスを作成する例では、`ListViewItemComparer`設定を使用して、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>のプロパティ、<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.ListView.Sort%2A>でメソッドを呼び出す、<xref:System.Windows.Forms.ListView.ColumnClick>イベント ハンドラーで定義されているメソッドを使用して`ListViewItemComparer`クリックしてされた列に基づく、項目の並べ替えを実行します。  
  
 [!code-cpp[ListView.ColumnClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListView.ColumnClick/CPP/listviewsort1.cpp#1)]
 [!code-csharp[ListView.ColumnClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListView.ColumnClick/CS/listviewsort1.cs#1)]
 [!code-vb[ListView.ColumnClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListView.ColumnClick/VB/listviewsort1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnColumnClick(System.Windows.Forms.ColumnClickEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.ColumnClick" />
        <altmember cref="T:System.Windows.Forms.ColumnClickEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnColumnReordered">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnReordered (System.Windows.Forms.ColumnReorderedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnReordered(class System.Windows.Forms.ColumnReorderedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnReordered (e As ColumnReorderedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnReordered(System::Windows::Forms::ColumnReorderedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnReordered : System.Windows.Forms.ColumnReorderedEventArgs -&gt; unit&#xA;override this.OnColumnReordered : System.Windows.Forms.ColumnReorderedEventArgs -&gt; unit" Usage="listView.OnColumnReordered e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnReorderedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ColumnReorderedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ColumnReordered" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnColumnReordered%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnColumnReordered(System.Windows.Forms.ColumnReorderedEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanged (System.Windows.Forms.ColumnWidthChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanged(class System.Windows.Forms.ColumnWidthChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanged (e As ColumnWidthChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanged(System::Windows::Forms::ColumnWidthChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventArgs -&gt; unit&#xA;override this.OnColumnWidthChanged : System.Windows.Forms.ColumnWidthChangedEventArgs -&gt; unit" Usage="listView.OnColumnWidthChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ColumnWidthChangedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ColumnWidthChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanged(System.Windows.Forms.ColumnWidthChangedEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnColumnWidthChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnColumnWidthChanging (System.Windows.Forms.ColumnWidthChangingEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnColumnWidthChanging(class System.Windows.Forms.ColumnWidthChangingEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnColumnWidthChanging (e As ColumnWidthChangingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnColumnWidthChanging(System::Windows::Forms::ColumnWidthChangingEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventArgs -&gt; unit&#xA;override this.OnColumnWidthChanging : System.Windows.Forms.ColumnWidthChangingEventArgs -&gt; unit" Usage="listView.OnColumnWidthChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ColumnWidthChangingEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ColumnWidthChangingEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ColumnWidthChanging" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.ColumnWidthChanging>イベントはドラッグ機能で、「を表示するウィンドウの内容ドラッグ中に」オプションが無効になっている場合は、ウィンドウの完全な発生しません。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnColumnWidthChanging%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnColumnWidthChanging(System.Windows.Forms.ColumnWidthChangingEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawColumnHeader">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawColumnHeader (System.Windows.Forms.DrawListViewColumnHeaderEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawColumnHeader(class System.Windows.Forms.DrawListViewColumnHeaderEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawColumnHeader (e As DrawListViewColumnHeaderEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawColumnHeader(System::Windows::Forms::DrawListViewColumnHeaderEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventArgs -&gt; unit&#xA;override this.OnDrawColumnHeader : System.Windows.Forms.DrawListViewColumnHeaderEventArgs -&gt; unit" Usage="listView.OnDrawColumnHeader e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawListViewColumnHeaderEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.DrawColumnHeader" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnDrawColumnHeader%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnDrawColumnHeader(System.Windows.Forms.DrawListViewColumnHeaderEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawListViewItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawListViewItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawListViewItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawListViewItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawItem : System.Windows.Forms.DrawListViewItemEventArgs -&gt; unit&#xA;override this.OnDrawItem : System.Windows.Forms.DrawListViewItemEventArgs -&gt; unit" Usage="listView.OnDrawItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.DrawItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnDrawItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnDrawItem(System.Windows.Forms.DrawListViewItemEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="T:System.Windows.Forms.DrawListViewItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnDrawSubItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawSubItem (System.Windows.Forms.DrawListViewSubItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawSubItem(class System.Windows.Forms.DrawListViewSubItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawSubItem (e As DrawListViewSubItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawSubItem(System::Windows::Forms::DrawListViewSubItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnDrawSubItem : System.Windows.Forms.DrawListViewSubItemEventArgs -&gt; unit&#xA;override this.OnDrawSubItem : System.Windows.Forms.DrawListViewSubItemEventArgs -&gt; unit" Usage="listView.OnDrawSubItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawListViewSubItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.DrawSubItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnDrawSubItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnDrawSubItem(System.Windows.Forms.DrawListViewSubItemEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="T:System.Windows.Forms.DrawListViewSubItemEventArgs" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
      </Docs>
    </Member>
    <Member MemberName="OnEnabledChanged">
      <MemberSignature Language="C#" Value="protected override void OnEnabledChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnEnabledChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnEnabledChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnEnabledChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnEnabledChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnEnabledChanged : EventArgs -&gt; unit" Usage="listView.OnEnabledChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納するオブジェクト。</param>
        <summary><see cref="E:System.Windows.Forms.Control.EnabledChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="listView.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see langword="FontChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="listView.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.HandleCreated" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="listView.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.HandleDestroyed" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnItemActivate">
      <MemberSignature Language="C#" Value="protected virtual void OnItemActivate (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemActivate(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemActivate (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemActivate(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemActivate : EventArgs -&gt; unit&#xA;override this.OnItemActivate : EventArgs -&gt; unit" Usage="listView.OnItemActivate e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ItemActivate" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnItemActivate%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnItemActivate(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemActivate" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemCheck">
      <MemberSignature Language="C#" Value="protected virtual void OnItemCheck (System.Windows.Forms.ItemCheckEventArgs ice);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemCheck(class System.Windows.Forms.ItemCheckEventArgs ice) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemCheck (ice As ItemCheckEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemCheck(System::Windows::Forms::ItemCheckEventArgs ^ ice);" />
      <MemberSignature Language="F#" Value="abstract member OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit&#xA;override this.OnItemCheck : System.Windows.Forms.ItemCheckEventArgs -&gt; unit" Usage="listView.OnItemCheck ice" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ice" Type="System.Windows.Forms.ItemCheckEventArgs" />
      </Parameters>
      <Docs>
        <param name="ice">イベント データを格納している <see cref="T:System.Windows.Forms.ItemCheckEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ItemCheck" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnItemCheck%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnItemCheck(System.Windows.Forms.ItemCheckEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemCheck" />
        <altmember cref="T:System.Windows.Forms.ItemCheckEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChecked">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChecked (System.Windows.Forms.ItemCheckedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChecked(class System.Windows.Forms.ItemCheckedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChecked (e As ItemCheckedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChecked(System::Windows::Forms::ItemCheckedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemChecked : System.Windows.Forms.ItemCheckedEventArgs -&gt; unit&#xA;override this.OnItemChecked : System.Windows.Forms.ItemCheckedEventArgs -&gt; unit" Usage="listView.OnItemChecked e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemCheckedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ItemCheckedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ItemChecked" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnItemChecked%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnItemChecked(System.Windows.Forms.ItemCheckedEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnItemDrag">
      <MemberSignature Language="C#" Value="protected virtual void OnItemDrag (System.Windows.Forms.ItemDragEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemDrag(class System.Windows.Forms.ItemDragEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemDrag (e As ItemDragEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemDrag(System::Windows::Forms::ItemDragEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemDrag : System.Windows.Forms.ItemDragEventArgs -&gt; unit&#xA;override this.OnItemDrag : System.Windows.Forms.ItemDragEventArgs -&gt; unit" Usage="listView.OnItemDrag e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemDragEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ItemDragEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ItemDrag" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnItemDrag%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnItemDrag(System.Windows.Forms.ItemDragEventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.ItemDrag" />
        <altmember cref="T:System.Windows.Forms.ItemDragEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnItemMouseHover">
      <MemberSignature Language="C#" Value="protected virtual void OnItemMouseHover (System.Windows.Forms.ListViewItemMouseHoverEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemMouseHover(class System.Windows.Forms.ListViewItemMouseHoverEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemMouseHover (e As ListViewItemMouseHoverEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemMouseHover(System::Windows::Forms::ListViewItemMouseHoverEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventArgs -&gt; unit&#xA;override this.OnItemMouseHover : System.Windows.Forms.ListViewItemMouseHoverEventArgs -&gt; unit" Usage="listView.OnItemMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemMouseHoverEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ListViewItemMouseHoverEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ItemMouseHover" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnItemMouseHover%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnItemMouseHover(System.Windows.Forms.ListViewItemMouseHoverEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnItemSelectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemSelectionChanged (System.Windows.Forms.ListViewItemSelectionChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemSelectionChanged(class System.Windows.Forms.ListViewItemSelectionChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemSelectionChanged (e As ListViewItemSelectionChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemSelectionChanged(System::Windows::Forms::ListViewItemSelectionChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventArgs -&gt; unit&#xA;override this.OnItemSelectionChanged : System.Windows.Forms.ListViewItemSelectionChangedEventArgs -&gt; unit" Usage="listView.OnItemSelectionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ListViewItemSelectionChangedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnItemSelectionChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnItemSelectionChanged(System.Windows.Forms.ListViewItemSelectionChangedEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseHover">
      <MemberSignature Language="C#" Value="protected override void OnMouseHover (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseHover(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseHover (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseHover(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseHover : EventArgs -&gt; unit" Usage="listView.OnMouseHover e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.MouseHover" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Windows.Forms.ListView.OnMouseHover%2A>メソッドが呼び出されたは、マウスを置く、 <xref:System.Windows.Forms.ListViewItem>、メソッドの生成、<xref:System.Windows.Forms.ListView.ItemMouseHover>イベント。  
  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnMouseHover%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnMouseHover(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnMouseLeave">
      <MemberSignature Language="C#" Value="protected override void OnMouseLeave (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseLeave(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnMouseLeave(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseLeave (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseLeave(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMouseLeave : EventArgs -&gt; unit" Usage="listView.OnMouseLeave e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.MouseLeave" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnParentChanged">
      <MemberSignature Language="C#" Value="protected override void OnParentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnParentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnParentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnParentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnParentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnParentChanged : EventArgs -&gt; unit" Usage="listView.OnParentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.ParentChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnResize">
      <MemberSignature Language="C#" Value="protected override void OnResize (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnResize(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnResize(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnResize (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnResize(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnResize : EventArgs -&gt; unit" Usage="listView.OnResize e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.Resize" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRetrieveVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnRetrieveVirtualItem (System.Windows.Forms.RetrieveVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRetrieveVirtualItem(class System.Windows.Forms.RetrieveVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRetrieveVirtualItem (e As RetrieveVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRetrieveVirtualItem(System::Windows::Forms::RetrieveVirtualItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventArgs -&gt; unit&#xA;override this.OnRetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventArgs -&gt; unit" Usage="listView.OnRetrieveVirtualItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.RetrieveVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.RetrieveVirtualItemEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnRetrieveVirtualItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnRetrieveVirtualItem(System.Windows.Forms.RetrieveVirtualItemEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnRightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnRightToLeftLayoutChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnRightToLeftLayoutChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnRightToLeftLayoutChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnRightToLeftLayoutChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnRightToLeftLayoutChanged : EventArgs -&gt; unit&#xA;override this.OnRightToLeftLayoutChanged : EventArgs -&gt; unit" Usage="listView.OnRightToLeftLayoutChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnRightToLeftLayoutChanged(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSearchForVirtualItem">
      <MemberSignature Language="C#" Value="protected virtual void OnSearchForVirtualItem (System.Windows.Forms.SearchForVirtualItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSearchForVirtualItem(class System.Windows.Forms.SearchForVirtualItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSearchForVirtualItem (e As SearchForVirtualItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSearchForVirtualItem(System::Windows::Forms::SearchForVirtualItemEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventArgs -&gt; unit&#xA;override this.OnSearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventArgs -&gt; unit" Usage="listView.OnSearchForVirtualItem e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.SearchForVirtualItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.SearchForVirtualItemEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.SearchForVirtualItem" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnSearchForVirtualItem%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnSearchForVirtualItem(System.Windows.Forms.SearchForVirtualItemEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OnSelectedIndexChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnSelectedIndexChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelectedIndexChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelectedIndexChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelectedIndexChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnSelectedIndexChanged : EventArgs -&gt; unit&#xA;override this.OnSelectedIndexChanged : EventArgs -&gt; unit" Usage="listView.OnSelectedIndexChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnSelectedIndexChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" /> メソッドを呼び出してください。</para></block>
        <altmember cref="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
        <altmember cref="T:System.EventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnSystemColorsChanged">
      <MemberSignature Language="C#" Value="protected override void OnSystemColorsChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnSystemColorsChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnSystemColorsChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnSystemColorsChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnSystemColorsChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnSystemColorsChanged : EventArgs -&gt; unit" Usage="listView.OnSystemColorsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.EventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.Control.SystemColorsChanged" /> イベントを発生させます。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnVirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnVirtualItemsSelectionRangeChanged (System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnVirtualItemsSelectionRangeChanged(class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnVirtualItemsSelectionRangeChanged (e As ListViewVirtualItemsSelectionRangeChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnVirtualItemsSelectionRangeChanged(System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnVirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs -&gt; unit&#xA;override this.OnVirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs -&gt; unit" Usage="listView.OnVirtualItemsSelectionRangeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">イベント データを格納している <see cref="T:System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs" />。</param>
        <summary><see cref="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" /> イベントを発生させます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントを発生させると、イベント ハンドラーがデリゲートから呼び出されます。 詳細については、次を参照してください。[処理とイベントの発生](~/docs/standard/events/index.md)します。  
  
 <xref:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged%2A> メソッドを使用すると、デリゲートを結び付けずに、派生クラスでイベントを処理することもできます。 派生クラスでイベントを処理する場合は、この手法をお勧めします。  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>派生クラスで <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> をオーバーライドする場合は、登録されているデリゲートがイベントを受け取ることができるように、基本クラスの <see cref="M:System.Windows.Forms.ListView.OnVirtualItemsSelectionRangeChanged(System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventArgs)" /> メソッドを呼び出してください。</para></block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OwnerDraw : bool with get, set" Usage="System.Windows.Forms.ListView.OwnerDraw" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> コントロールを描画したのがオペレーティング システムか作成したコードかを示す値を取得または設定します。</summary>
        <value>独自のコードによって <see cref="T:System.Windows.Forms.ListView" /> コントロールを描画する場合は <see langword="true" />。オペレーティング システムによって <see cref="T:System.Windows.Forms.ListView" /> コントロールを描画する場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A<xref:System.Windows.Forms.ListView>オペレーティング システムによって通常コントロールを描画します。 外観をカスタマイズするために<xref:System.Windows.Forms.ListView>項目、サブ項目、および列ヘッダーのセット、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティを`true`、次のイベントの 1 つ以上のハンドラーを用意し、: <xref:System.Windows.Forms.ListView.DrawItem>、 <xref:System.Windows.Forms.ListView.DrawSubItem>、<xref:System.Windows.Forms.ListView.DrawColumnHeader>します。 これには、オーナー描画が呼び出されます。 ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>、3 つすべてのイベントが発生した場合は、のみ、<xref:System.Windows.Forms.ListView.DrawItem>イベントが発生しました。  
  
> [!NOTE]
>  サブ項目の情報は、並べて表示ビューに通常表示されるだけでなく、詳細ビューしますが、その、並べて表示ビューでのハンドラーで描画する必要があります、<xref:System.Windows.Forms.ListView.DrawItem>イベント。 <xref:System.Windows.Forms.ListView.DrawSubItem>いないすべてのサブ項目のイベントは発生しません<xref:System.Windows.Forms.ColumnHeader>オブジェクトが追加されました、<xref:System.Windows.Forms.ListView.Columns%2A>コレクション。 また、それぞれの最初のサブ項目<xref:System.Windows.Forms.ListViewItem>オブジェクトは、親アイテム自体を表しており、最初の列に表示されます。  
  
 詳細ビューで処理することができます、 <xref:System.Windows.Forms.ListView.DrawItem> 、バック グラウンドなど、すべてのサブ項目に共通する要素を描画および処理するイベント、<xref:System.Windows.Forms.ListView.DrawSubItem>テキスト値などの個々 のサブ項目の要素を描画するイベントです。 すべての項目を描画することも、<xref:System.Windows.Forms.ListView>はあまり便利なことが考えられますが、2 つのイベントのいずれかのみを使用を制御します。 詳細ビューで列ヘッダーを描画するために処理する必要があります、<xref:System.Windows.Forms.ListView.DrawColumnHeader>イベント。  
  
> [!NOTE]
>  オーナー描画、オーバーライドとグラフィックスのちらつきの問題を回避するために、<xref:System.Windows.Forms.ListView>を制御し、設定、<xref:System.Windows.Forms.ListView.DoubleBuffered%2A>プロパティを`true`します。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例のカスタム描画を指定する方法を示します、<xref:System.Windows.Forms.ListView>コントロール。 <xref:System.Windows.Forms.ListView>コントロールの例ではグラデーションの背景。 赤の前景色と背景が黒、負の値を持つサブ項目があります。  
  
 ハンドラーを<xref:System.Windows.Forms.ListView.DrawItem>イベント全体の項目の背景を描画します。 ハンドラーを<xref:System.Windows.Forms.ListView.DrawSubItem>イベント テキスト値とテキストと負の値を持つサブ項目の背景を描画します。 ハンドラーを<xref:System.Windows.Forms.ListView.DrawColumnHeader>イベントは、それぞれの列ヘッダーを描画します。  
  
 A<xref:System.Windows.Forms.ContextMenu>コンポーネントは、詳細ビューとリスト ビューを切り替える方法を提供します。 リスト ビューのみで、<xref:System.Windows.Forms.ListView.DrawItem>イベントが発生します。 この場合、テキストと背景が両方に描画、<xref:System.Windows.Forms.ListView.DrawItem>イベント ハンドラー。  
  
 [!code-csharp[ListViewOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewOwnerDraw/CS/listviewownerdraw.cs#1)]
 [!code-vb[ListViewOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewOwnerDraw/VB/listviewownerdraw.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.DrawItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawSubItem" />
        <altmember cref="E:System.Windows.Forms.ListView.DrawColumnHeader" />
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItem" />
        <altmember cref="P:System.Windows.Forms.ListView.View" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="Padding">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Padding Padding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Padding Padding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Padding" />
      <MemberSignature Language="VB.NET" Value="Public Property Padding As Padding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Padding Padding { System::Windows::Forms::Padding get(); void set(System::Windows::Forms::Padding value); };" />
      <MemberSignature Language="F#" Value="member this.Padding : System.Windows.Forms.Padding with get, set" Usage="System.Windows.Forms.ListView.Padding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Padding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> コントロールとその内容との間の間隔を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.Padding" /> コントロールとその内容との間の間隔を指定する <see cref="T:System.Windows.Forms.ListView" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PaddingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler PaddingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PaddingChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.PaddingChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event PaddingChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ PaddingChanged;" />
      <MemberSignature Language="F#" Value="member this.PaddingChanged : EventHandler " Usage="member this.PaddingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.ListView.Padding" /> プロパティの値が変化したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paint">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.PaintEventHandler Paint;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.PaintEventHandler Paint" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.Paint" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Paint As PaintEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::PaintEventHandler ^ Paint;" />
      <MemberSignature Language="F#" Value="member this.Paint : System.Windows.Forms.PaintEventHandler " Usage="member this.Paint : System.Windows.Forms.PaintEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.PaintEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> コントロールが描画されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>コントロールは、オペレーティング システムによって描画または所有者を描画するため、<xref:System.Windows.Forms.ListView.Paint>イベントが発生したことはありません。 オーナー描画の詳細については、次を参照してください。、<xref:System.Windows.Forms.ListView.OwnerDraw%2A>プロパティ。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RealizeProperties">
      <MemberSignature Language="C#" Value="protected void RealizeProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void RealizeProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RealizeProperties" />
      <MemberSignature Language="VB.NET" Value="Protected Sub RealizeProperties ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void RealizeProperties();" />
      <MemberSignature Language="F#" Value="member this.RealizeProperties : unit -&gt; unit" Usage="listView.RealizeProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>コントロールの外観を管理する <see cref="T:System.Windows.Forms.ListView" /> コントロールのプロパティを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedrawItems">
      <MemberSignature Language="C#" Value="public void RedrawItems (int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RedrawItems(int32 startIndex, int32 endIndex, bool invalidateOnly) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.RedrawItems(System.Int32,System.Int32,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RedrawItems (startIndex As Integer, endIndex As Integer, invalidateOnly As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RedrawItems(int startIndex, int endIndex, bool invalidateOnly);" />
      <MemberSignature Language="F#" Value="member this.RedrawItems : int * int * bool -&gt; unit" Usage="listView.RedrawItems (startIndex, endIndex, invalidateOnly)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
        <Parameter Name="invalidateOnly" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="startIndex">再描画される範囲内の最初の項目のインデックス。</param>
        <param name="endIndex">再描画される範囲内の最後の項目のインデックス。</param>
        <param name="invalidateOnly">その範囲の項目を無効にする場合は <see langword="true" />。項目を無効にして再描画する場合は <see langword="false" />。</param>
        <summary>ある範囲の <see cref="T:System.Windows.Forms.ListViewItem" /> オブジェクトを強制的に再描画します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.RedrawItems%2A>メソッドができるかどうかを使用、<xref:System.Windows.Forms.ListView>仮想モードまたは標準モードでは、します。  
  
 場合、<xref:System.Windows.Forms.ListView.BeginUpdate%2A>を呼び出す前にメソッドが呼び出された<xref:System.Windows.Forms.ListView.RedrawItems%2A>、再描画は発生しません。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="startIndex" /> または <paramref name="endIndex" /> が 0 未満か、<see cref="T:System.Windows.Forms.ListView" /> 内の項目数以上です。または、仮想モードの場合、<see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> の値より大きい値です。  
  
または 
指定された <paramref name="startIndex" /> が <paramref name="endIndex." /> より大きい値です。</exception>
      </Docs>
    </Member>
    <Member MemberName="RetrieveVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.RetrieveVirtualItemEventHandler RetrieveVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RetrieveVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RetrieveVirtualItem As RetrieveVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::RetrieveVirtualItemEventHandler ^ RetrieveVirtualItem;" />
      <MemberSignature Language="F#" Value="member this.RetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventHandler " Usage="member this.RetrieveVirtualItem : System.Windows.Forms.RetrieveVirtualItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RetrieveVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> が仮想モードで、<see cref="T:System.Windows.Forms.ListViewItem" /> を必要とする場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ときに、<xref:System.Windows.Forms.ListView>オブジェクトが仮想モードで、作成<xref:System.Windows.Forms.ListViewItem>を使用してではなく動的にオブジェクト、<xref:System.Windows.Forms.ListView.Items%2A>コレクション。 このイベントは、オブジェクトを作成する必要があります、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 このイベントのハンドラーを作成する必要があります、適切な<xref:System.Windows.Forms.ListViewItem>渡すは、バックアップや、キャッシュから取得し、<xref:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item%2A>プロパティ。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このイベントのハンドラーを示します。 この例で listView1 必要がある各<xref:System.Windows.Forms.ListViewItem>そのインデックスの 2 乗を表示します。 このコード例が示されている例の一部、<xref:System.Windows.Forms.ListView.VirtualMode%2A>プロパティ。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#2)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.RetrieveVirtualItemEventArgs.Item" /> イベントの処理時に <see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> プロパティが項目に設定されていません。</exception>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayout">
      <MemberSignature Language="C#" Value="public virtual bool RightToLeftLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RightToLeftLayout" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeftLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool RightToLeftLayout { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RightToLeftLayout : bool with get, set" Usage="System.Windows.Forms.ListView.RightToLeftLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールを右から左方向にレイアウトするかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ListView" /> コントロールが右から左方向にレイアウトされることを示す場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView>右から左に、言語は読み取り専用プロパティは、国際対応のアプリケーションで使用するためです。 設定した場合<xref:System.Windows.Forms.ListView>と<xref:System.Windows.Forms.RightToLeft>コントロールの内容とテキストを true にレイアウトする右から左にします。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RightToLeftLayoutChanged">
      <MemberSignature Language="C#" Value="public event EventHandler RightToLeftLayoutChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler RightToLeftLayoutChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.RightToLeftLayoutChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RightToLeftLayoutChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ RightToLeftLayoutChanged;" />
      <MemberSignature Language="F#" Value="member this.RightToLeftLayoutChanged : EventHandler " Usage="member this.RightToLeftLayoutChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.ListView.RightToLeftLayout" /> プロパティの値が変化したときに発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.RightToLeftLayoutChanged>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#462](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#462)]
 [!code-vb[System.Windows.Forms.EventExamples#462](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#462)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrollable">
      <MemberSignature Language="C#" Value="public bool Scrollable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Scrollable" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Scrollable" />
      <MemberSignature Language="VB.NET" Value="Public Property Scrollable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Scrollable { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Scrollable : bool with get, set" Usage="System.Windows.Forms.ListView.Scrollable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>すべての項目を表示する十分な領域がない場合に、スクロール バーをコントロールに追加するかどうかを示す値を取得または設定します。</summary>
        <value>必要に応じてスクロール バーをコントロールに追加して、ユーザーがすべての項目を参照できるようにする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティに設定しているときに`true`、<xref:System.Windows.Forms.ListView>項目の数は、コントロールのクライアント領域のサイズを超えています。 ときに使用する垂直スクロール バーが表示されます。 このプロパティを使用して、利用できるすべての項目をユーザーがアクセスできるように、<xref:System.Windows.Forms.ListView>コントロール。  
  
> [!NOTE]
>  バージョンので、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]より前のバージョン 2.0 では、列ヘッダーが描画されません正しくをこのプロパティを設定するとき`false`と大きくするコントロールのサイズを変更します。 この問題を回避するには、このプロパティを設定`true`で、<xref:System.Windows.Forms.Form.ResizeBegin>イベント ハンドラーと設定し直す`false`で、<xref:System.Windows.Forms.Form.ResizeEnd>イベント ハンドラー。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchForVirtualItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.SearchForVirtualItemEventHandler SearchForVirtualItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SearchForVirtualItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SearchForVirtualItem As SearchForVirtualItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::SearchForVirtualItemEventHandler ^ SearchForVirtualItem;" />
      <MemberSignature Language="F#" Value="member this.SearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventHandler " Usage="member this.SearchForVirtualItem : System.Windows.Forms.SearchForVirtualItemEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SearchForVirtualItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> が仮想モードの場合に、検索が実行されると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このイベントが発生したときに、<xref:System.Windows.Forms.ListView>仮想モードでは、<xref:System.Windows.Forms.ListView.FindNearestItem%2A>または<xref:System.Windows.Forms.ListView.FindItemWithText%2A>メソッドが呼び出されます。 このイベントを処理するときにによって提供される項目の一覧から項目を計算する必要があります、<xref:System.Windows.Forms.ListView.Items%2A>プロパティと一致する検索条件と設定、<xref:System.Windows.Forms.SearchForVirtualItemEventArgs.Index%2A?displayProperty=nameWithType>プロパティのインデックスを<xref:System.Windows.Forms.ListViewItem>します。 項目が指定されていない場合<xref:System.Windows.Forms.ListView.FindNearestItem%2A>と<xref:System.Windows.Forms.ListView.FindItemWithText%2A>戻ります`null`します。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、検索は 1万最初の 2 乗のリストで指定した整数に最も近い一致を返します。 このコード例が示されている例の一部、<xref:System.Windows.Forms.ListView.VirtualMode%2A>プロパティ。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#4)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectedIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectedIndexChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.SelectedIndexChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event SelectedIndexChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ SelectedIndexChanged;" />
      <MemberSignature Language="F#" Value="member this.SelectedIndexChanged : EventHandler " Usage="member this.SelectedIndexChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.ListView.SelectedIndices" /> コレクションが変更された場合に発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>コレクションが変更されるたびに、<xref:System.Windows.Forms.ListViewItem.Selected%2A>のプロパティを<xref:System.Windows.Forms.ListViewItem>変更します。 プロパティの変更がプログラムで発生することが、またはユーザーが項目を選択またはアイテムの選択を解除します。 ユーザーは、複数選択を実行するには、ctrl キーを押さずに項目を選択するときに、コントロールはまず、前の選択をクリアします。 この場合、このイベントは、以前に選択した項目ごとに 1 回と、新しく選択された項目の 1 つの時刻に発生します。  
  
 選択されている項目を決定する、<xref:System.Windows.Forms.ListView>コントロールを使用して、<xref:System.Windows.Forms.ListView.SelectedItems%2A>プロパティにアクセスする、<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>します。 選択した項目に変更があるたびにタスクを実行するには、このイベントのイベント ハンドラーを作成することができます、<xref:System.Windows.Forms.ListView>コントロール。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.ListView.SelectedItems%2A>プロパティ、<xref:System.Windows.Forms.ListView.SelectedIndexChanged>イベント、<xref:System.Windows.Forms.ListView.HeaderStyle%2A>メンバー、および<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>クラス。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前のオブジェクト`ListView1`と<xref:System.Windows.Forms.TextBox>という名前の`TextBox1`します。 呼び出す、`InitializeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。 この例では、イベント ハンドラーが正しく関連付けられている必要があります、<xref:System.Windows.Forms.ListView.SelectedIndexChanged>イベント  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
        <altmember cref="M:System.Windows.Forms.ListView.OnSelectedIndexChanged(System.EventArgs)" />
        <altmember cref="T:System.EventHandler" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedIndices">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedIndexCollection SelectedIndices { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedIndexCollection SelectedIndices" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedIndices" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedIndices As ListView.SelectedIndexCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedIndexCollection ^ SelectedIndices { System::Windows::Forms::ListView::SelectedIndexCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedIndices : System.Windows.Forms.ListView.SelectedIndexCollection" Usage="System.Windows.Forms.ListView.SelectedIndices" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedIndexCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の選択された項目のインデックスを取得します。</summary>
        <value>選択された項目のインデックスを格納している <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />。 項目が現在選択されていない場合は、空の <see cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>する前に、プロパティがアクセスされる場合は、プロパティに任意のインデックスは含まれません、<xref:System.Windows.Forms.ListView>ハンドルを作成すると、通常に発生するときに、<xref:System.Windows.Forms.ListView>フォームでの表示に最初に読み込まれます。 ハンドルが作成されるかどうかを確認できる、<xref:System.Windows.Forms.Control.IsHandleCreated%2A>プロパティ。 ときに、<xref:System.Windows.Forms.ListView.MultiSelect%2A>プロパティに設定されて`true`、このプロパティで選択されているすべての項目のインデックスを含むコレクションを返します、<xref:System.Windows.Forms.ListView>します。 単一選択の<xref:System.Windows.Forms.ListView>、このプロパティの唯一の選択した項目のインデックスを含む 1 つの要素を含むコレクションを返します、<xref:System.Windows.Forms.ListView>します。 コレクション内の項目で実行できるタスクの詳細については、次を参照してください。<xref:System.Windows.Forms.ListView.SelectedIndexCollection>します。  
  
 選択されている項目のコレクションを取得するかどうか、<xref:System.Windows.Forms.ListView>コントロールを使用して、項目、選択したのインデックス位置ではなく、<xref:System.Windows.Forms.ListView.SelectedItems%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例に示しますを使用して、 <xref:System.Windows.Forms.ListView.SelectedIndices%2A>、 <xref:System.Windows.Forms.ListView.SelectedIndexChanged>、および<xref:System.Windows.Forms.ListView.HeaderStyle%2A>メンバーおよび<xref:System.Windows.Forms.ListView.SelectedIndexCollection>クラス。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前のオブジェクト`ListView1`と<xref:System.Windows.Forms.TextBox>という名前の`TextBox1`します。 呼び出す、`InitializeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。 この例では、イベント ハンドラーが正しく関連付けられている必要があります、<xref:System.Windows.Forms.ListView.SelectedIndexChanged>イベント。  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#3)]
[!code-csharp[System.Windows.Forms.ListView1#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#3)]
[!code-vb[System.Windows.Forms.ListView1#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedIndexCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedItems" />
      </Docs>
    </Member>
    <Member MemberName="SelectedItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListView.SelectedListViewItemCollection SelectedItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListView/SelectedListViewItemCollection SelectedItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SelectedItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectedItems As ListView.SelectedListViewItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListView::SelectedListViewItemCollection ^ SelectedItems { System::Windows::Forms::ListView::SelectedListViewItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectedItems : System.Windows.Forms.ListView.SelectedListViewItemCollection" Usage="System.Windows.Forms.ListView.SelectedItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListView+SelectedListViewItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の選択された項目を取得します。</summary>
        <value>コントロール内の選択された項目を格納している <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />。 項目が現在選択されていない場合は、空の <see cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" /> が返されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SelectedItems%2A>する前に、プロパティがアクセスされる場合は、プロパティにすべての項目は含まれません、<xref:System.Windows.Forms.ListView>ハンドルを作成すると、通常に発生するときに<xref:System.Windows.Forms.ListView>フォームでの表示に最初に読み込まれます。 ハンドルが作成されるかどうかを確認できる、<xref:System.Windows.Forms.Control.IsHandleCreated%2A>プロパティ。 ときに、<xref:System.Windows.Forms.ListView.MultiSelect%2A>プロパティに設定されて`true`、このプロパティで選択した項目を含むコレクションを返します、<xref:System.Windows.Forms.ListView>します。 単一選択の<xref:System.Windows.Forms.ListView>、このプロパティの唯一の選択した項目を含むコレクションを返します、<xref:System.Windows.Forms.ListView>します。 コレクション内の項目で実行できるタスクの詳細については、次を参照してください。<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>します。  
  
 内のインデックス位置のコレクションを取得するかどうか、<xref:System.Windows.Forms.ListView.ListViewItemCollection>で選択されている項目の<xref:System.Windows.Forms.ListView>コントロールを使用して、項目が選択されているのではなく、<xref:System.Windows.Forms.ListView.SelectedIndices%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例に示しますを使用して、 <xref:System.Windows.Forms.ListView.SelectedItems%2A>、<xref:System.Windows.Forms.ListView.SelectedIndexChanged>イベント、および<xref:System.Windows.Forms.ListView.HeaderStyle%2A>メンバーと<xref:System.Windows.Forms.ListView.SelectedListViewItemCollection>クラス。 この例を実行するを含むフォームに次のコードを貼り付け、<xref:System.Windows.Forms.ListView>という名前のオブジェクト`ListView1`と<xref:System.Windows.Forms.TextBox>という名前の`TextBox1`します。 呼び出す、`InitializeListView`フォームのコンス トラクターのメソッドまたは`Load`メソッド。 この例では、イベント ハンドラーが正しく関連付けられている必要があります、<xref:System.Windows.Forms.ListView.SelectedIndexChanged>イベント  
  
 [!code-cpp[System.Windows.Forms.ListView1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#1)]  
[!code-cpp[System.Windows.Forms.ListView1#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CPP/form1.cpp#2)]
[!code-csharp[System.Windows.Forms.ListView1#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView1/CS/form1.cs#2)]
[!code-vb[System.Windows.Forms.ListView1#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView1/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView.SelectedListViewItemCollection" />
        <altmember cref="P:System.Windows.Forms.ListView.SelectedIndices" />
      </Docs>
    </Member>
    <Member MemberName="ShowGroups">
      <MemberSignature Language="C#" Value="public bool ShowGroups { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowGroups" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowGroups" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowGroups As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowGroups { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowGroups : bool with get, set" Usage="System.Windows.Forms.ListView.ShowGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をグループ化して表示するかどうかを示す値を取得または設定します。</summary>
        <value>項目をグループ化して表示する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 すべてのグループに割り当てられている、<xref:System.Windows.Forms.ListView>コントロールが表示されるたびに、<xref:System.Windows.Forms.ListView.View%2A>プロパティが以外の値に設定されて<xref:System.Windows.Forms.View.List>します。 <xref:System.Windows.Forms.ListView>グループ化機能では、論理的に関連の視覚的なグループを作成できます。 <xref:System.Windows.Forms.ListView> Windows XP および Windows Server 2003 上の項目。 この機能を有効にする、アプリケーションを呼び出す必要があります、<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>メソッド。 詳細については、<xref:System.Windows.Forms.ListView.Groups%2A> プロパティを参照してください。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Groups" />
        <altmember cref="T:System.Windows.Forms.ListViewGroup" />
        <altmember cref="T:System.Windows.Forms.ListViewGroupCollection" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="ShowItemToolTips">
      <MemberSignature Language="C#" Value="public bool ShowItemToolTips { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowItemToolTips" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowItemToolTips As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowItemToolTips { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowItemToolTips : bool with get, set" Usage="System.Windows.Forms.ListView.ShowItemToolTips" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListViewItem" /> に配置されている <see cref="T:System.Windows.Forms.ListView" /> オブジェクトにツールヒントが表示されるかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ListViewItem" /> のツールヒントが表示される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Windows.Forms.ListView.ShowItemToolTips%2A>プロパティに設定されて`true`、any<xref:System.Windows.Forms.ListViewItem>を表示するツールヒントを持つ。 それ以外の場合、何も表示されます。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.ListView.ShowItemToolTips%2A>と<xref:System.Windows.Forms.ListViewItem.ToolTipText%2A?displayProperty=nameWithType>プロパティ。 この例を実行するには、Windows フォームと呼び出しにコードを貼り付けます`InitializeItemsWithToolTips`フォームのコンス トラクターからまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-csharp[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/CS/form1.cs#4)]
 [!code-vb[System.Windows.Forms.ListViewItemWhidbeyMembers#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemWhidbeyMembers/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList SmallImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList SmallImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.SmallImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property SmallImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ SmallImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SmallImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.SmallImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>項目をコントロールで小さいアイコンとして表示するときに使用する <see cref="T:System.Windows.Forms.ImageList" /> を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ImageList" /> プロパティが <see cref="P:System.Windows.Forms.ListView.View" /> に設定されているときに使用するアイコンを格納している <see cref="F:System.Windows.Forms.View.SmallIcon" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティでは、指定することができます、<xref:System.Windows.Forms.ImageList>と小さいアイコンの項目を表示するときに使用するアイコンを格納しているオブジェクト (ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティが以外の任意の値に設定されて<xref:System.Windows.Forms.View.LargeIcon>)。 <xref:System.Windows.Forms.ListView>コントロールは、任意のグラフィック形式で受け入れることができます、<xref:System.Windows.Forms.ImageList>アイコンを表示するときにコントロールをサポートしています。 <xref:System.Windows.Forms.ListView>コントロールは .ico ファイルに限定されません。 1 回、<xref:System.Windows.Forms.ImageList>に割り当てられている、<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティを設定できます、<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>の各プロパティ<xref:System.Windows.Forms.ListViewItem>で、<xref:System.Windows.Forms.ListView>で適切なイメージのインデックス位置にコントロール、<xref:System.Windows.Forms.ImageList>します。 アイコンのサイズ、<xref:System.Windows.Forms.ListView.SmallImageList%2A>で指定された、<xref:System.Windows.Forms.ImageList.ImageSize%2A>プロパティ。  
  
 1 つのみのインデックスに指定できるため、<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A?displayProperty=nameWithType>プロパティ、<xref:System.Windows.Forms.ImageList>で指定されたオブジェクト、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティが表示するイメージの同じインデックス位置にあります。 たとえば場合、<xref:System.Windows.Forms.ListViewItem.ImageIndex%2A>のプロパティを<xref:System.Windows.Forms.ListViewItem>が設定を 0 には大小のアイコンを使用するイメージの同じインデックス位置にある必要があります、<xref:System.Windows.Forms.ImageList>で指定されたオブジェクト、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。  
  
> [!NOTE]
>  イメージを指定するにはキーを持つ、大小のバージョンのイメージを各イメージ リスト内の同じインデックス位置に配置する必要があります。 ビューを切り替える場合は、1 つのリスト内のイメージのインデックス位置が指定されたキーの値に関係なく、他のリストのイメージを検索に使用されます。  
  
 設定する、<xref:System.Windows.Forms.ImageList>大きいアイコン表示で項目を表示するときに使用する (ときに、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.LargeIcon>)、使用、<xref:System.Windows.Forms.ListView.LargeImageList%2A>プロパティ。 項目の状態を表示するのには、使用してイメージを使用するかどうか、<xref:System.Windows.Forms.ListView.StateImageList%2A>プロパティ。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListView" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.StateImageList" />
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public void Sort ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Sort() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.Sort" />
      <MemberSignature Language="VB.NET" Value="Public Sub Sort ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Sort();" />
      <MemberSignature Language="F#" Value="member this.Sort : unit -&gt; unit" Usage="listView.Sort " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リスト ビューの項目を並べ替えます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 通常を使用して項目を並べ替える、<xref:System.Windows.Forms.ListView.Sorting%2A>プロパティで、項目のテキストに基づいて項目を並べ替えます。 並べ替え順序をカスタマイズするには、実装するクラスを記述する必要があります、<xref:System.Collections.IComparer>インターフェイスし、設定、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティをそのクラスのオブジェクト。 これはサブ項目のテキストで項目を並べ替えたい場合などに便利です。 アイテムの手動の並べ替えを実行する方法の詳細については、の例を参照してください、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティ。  
  
 場合、<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>プロパティが以外の値に設定されて<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>場合や、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティが設定されて、リストはアイテムが追加されたときに自動的に並べ替えします。 ラベルのテキストが変更されたときに、項目が自動的に並べ替えられていません。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.ListViewItemSorter" />
      </Docs>
    </Member>
    <Member MemberName="Sorting">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.SortOrder Sorting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.SortOrder Sorting" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Sorting" />
      <MemberSignature Language="VB.NET" Value="Public Property Sorting As SortOrder" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::SortOrder Sorting { System::Windows::Forms::SortOrder get(); void set(System::Windows::Forms::SortOrder value); };" />
      <MemberSignature Language="F#" Value="member this.Sorting : System.Windows.Forms.SortOrder with get, set" Usage="System.Windows.Forms.ListView.Sorting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.SortOrder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロール内の項目の並べ替え順序を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.SortOrder" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.SortOrder.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.Sorting%2A>プロパティでは、項目内で並べ替えるかどうかを指定することができます、<xref:System.Windows.Forms.ListView>コントロール。 既定では、並べ替えは実行されません。 ときに、<xref:System.Windows.Forms.ListView.Sorting%2A>プロパティに設定されて<xref:System.Windows.Forms.SortOrder.Ascending>または<xref:System.Windows.Forms.SortOrder.Descending>、内の項目、<xref:System.Windows.Forms.ListView>自動的にアルファベットの昇順で並べ替えられます (にプロパティを設定すると<xref:System.Windows.Forms.SortOrder.Ascending>) または降順 (ときに、プロパティに設定されて<xref:System.Windows.Forms.SortOrder.Descending>)。 このプロパティを使用して自動的に表示される項目を並べ替えることができます、<xref:System.Windows.Forms.ListView>コントロール項目の数が多いが使用できる場合は、項目を検索するユーザーを容易にできるようにします。  
  
 並べ替えを使用してではなく、独自の項目を実行するかどうか、<xref:System.Windows.Forms.ListView.Sorting%2A>プロパティを使用して、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティと組み合わせて、<xref:System.Windows.Forms.ListView.Sort%2A>メソッド。  
  
 場合、<xref:System.Windows.Forms.ListView.Sorting%2A?displayProperty=nameWithType>プロパティが以外の値に設定されて<xref:System.Windows.Forms.SortOrder.None?displayProperty=nameWithType>場合は、<xref:System.Windows.Forms.ListView.ListViewItemSorter%2A>プロパティが設定されて、リストの並べ替えに自動的に項目が追加されます。 ラベルのテキストが変更されたときに、項目が自動的に並べ替えられていません。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値が <see cref="T:System.Windows.Forms.SortOrder" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.SortOrder" />
      </Docs>
    </Member>
    <Member MemberName="StateImageList">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ImageList StateImageList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ImageList StateImageList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.StateImageList" />
      <MemberSignature Language="VB.NET" Value="Public Property StateImageList As ImageList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ImageList ^ StateImageList { System::Windows::Forms::ImageList ^ get(); void set(System::Windows::Forms::ImageList ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StateImageList : System.Windows.Forms.ImageList with get, set" Usage="System.Windows.Forms.ListView.StateImageList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ImageList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのアプリケーション定義の状態に関連付けられた <see cref="T:System.Windows.Forms.ImageList" /> を取得または設定します。</summary>
        <value>項目のアプリケーション定義の状態を示すのに使用される、状態のイメージのセットを格納した <see cref="T:System.Windows.Forms.ImageList" />。 既定値は、<see langword="null" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.StateImageList%2A>プロパティでは、指定することができます、<xref:System.Windows.Forms.ImageList>内の項目のアプリケーション固有の状態を表すために使用するイメージを格納している、<xref:System.Windows.Forms.ListView>コントロール。 状態のイメージは、項目のアイコンの左側に表示されます。 Checked と unchecked のチェック ボックスなどの状態のイメージを使用して、アプリケーション定義の項目の状態を示すことができます。 状態イメージのすべてのビューでは、<xref:System.Windows.Forms.ListView>コントロール。  
  
 場合、<xref:System.Windows.Forms.ImageList>で指定された、<xref:System.Windows.Forms.ListView.StateImageList%2A>プロパティおよび<xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティに設定されて`true`、イメージのインデックス位置 0 と 1 に、<xref:System.Windows.Forms.ImageList>チェック ボックスが表示されます。 インデックス位置 0 にイメージがオフのチェック ボックスの代わりに表示され、チェックされたチェック ボックスではなく、インデックス位置 1 イメージが表示されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.LargeImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.SmallImageList" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.ListView.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>このクラスでは、このプロパティは使用されません。</summary>
        <value><see cref="T:System.Windows.Forms.ListView" /> コントロール内で表示するテキスト。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このクラスでは、このプロパティは使用されません。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.TextChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextChanged;" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler " Usage="member this.TextChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="P:System.Windows.Forms.ListView.Text" /> プロパティが変更されたときに発生します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public System.Drawing.Size TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size TileSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TileSize" />
      <MemberSignature Language="VB.NET" Value="Public Property TileSize As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size TileSize { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.TileSize : System.Drawing.Size with get, set" Usage="System.Windows.Forms.ListView.TileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>タイル ビューで表示されるタイルのサイズを取得または設定します。</summary>
        <value>新しいタイルのサイズを格納している <see cref="T:System.Drawing.Size" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 タイルのサイズの場合にこのプロパティを制御、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>します。 このプロパティを設定するサブ項目のテキストが長すぎて 1 行に表示するときに、行の折り返しを防ぐために便利です。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Windows.Forms.ListView>タイル機能。 例では、並べて表示ビューは、ブックを表す項目を表示します。 各項目は、書籍、タイトル、作成者、および発行年のアイコンを含むタイルとして表示されます。 例のコードが動作する、Book.ico という名前の例と同じディレクトリでアイコン ファイルを含める必要があります。 アイコンなしのビューで、関連する行をコメント アウトしてタイルを表示する、<xref:System.Windows.Forms.ImageList>オブジェクト。  
  
 [!code-cpp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CPP/listviewtilingexample.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/CS/listviewtilingexample.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.Tiling#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.Tiling/VB/listviewtilingexample.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.ListViewItem.ListViewSubItemCollection" />
        <altmember cref="T:System.Windows.Forms.View" />
      </Docs>
    </Member>
    <Member MemberName="TopItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ListViewItem TopItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.ListViewItem TopItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.TopItem" />
      <MemberSignature Language="VB.NET" Value="Public Property TopItem As ListViewItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ListViewItem ^ TopItem { System::Windows::Forms::ListViewItem ^ get(); void set(System::Windows::Forms::ListViewItem ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TopItem : System.Windows.Forms.ListViewItem with get, set" Usage="System.Windows.Forms.ListView.TopItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールで最初に表示される項目を取得または設定します。</summary>
        <value>コントロールで最初に表示される項目を表す <see cref="T:System.Windows.Forms.ListViewItem" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 上部にあるゼロ (0) のインデックス位置に項目が初期状態では、<xref:System.Windows.Forms.ListView>コントロール。 場合、<xref:System.Windows.Forms.ListView>コントロールの内容をスクロール、コントロールの上部にある別の項目を指定できます。 このプロパティを使用してまたはの上部に表示される項目を確認することができます、<xref:System.Windows.Forms.ListView>コントロール。 値、<xref:System.Windows.Forms.ListView.TopItem%2A>プロパティは常に保持されない、目的の最上位の項目がリスト ビューがある場所に応じて。  
  
 表示される項目の数、<xref:System.Windows.Forms.ListView>いつでも制御は、リスト ビューの高さとそれに含まれる項目のサイズによって異なります。 項目がリスト ビューの高さを超える場合は、項目が、ユーザーがスクロール、複数のページに続行されます。 設定した場合、<xref:System.Windows.Forms.ListView.TopItem%2A>プロパティの最後のページ内の項目を<xref:System.Windows.Forms.ListView>、項目は、ビューに自動的にスクロールがただし、<xref:System.Windows.Forms.ListView.TopItem%2A>は最後のページの実際の最上位の項目に設定されます。  
  
 確実に特定の項目はをコントロールの可視領域では必ずしも上端の位置で)、使用、<xref:System.Windows.Forms.ListView.EnsureVisible%2A>メソッド。  
  
> [!NOTE]
>  なしに、このプロパティを設定すると有効、<xref:System.Windows.Forms.ListView.Scrollable%2A>プロパティの値が`false`します。  
>   
>  このプロパティの設定は、バージョンのではサポートされていません、[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]より前のバージョン 2.0。  
  
   
  
## Examples  
 スタイルをリセットする次のコード例に示します、<xref:System.Windows.Forms.ListViewItem>を使用すると、オブジェクトのサブ項目、<xref:System.Windows.Forms.ListView.TopItem%2A>プロパティおよび<xref:System.Windows.Forms.ListViewItem.ListViewSubItem.ResetStyle%2A?displayProperty=nameWithType>メソッド。 例を実行するには、という名前のボタンを含むフォームに次のコードを貼り付け`Button1`を呼び出すと、`InitializeListView`フォームのコンス トラクターのメソッドまたは<xref:System.Windows.Forms.Form.Load>イベント ハンドラー。  
  
 [!code-cpp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ListViewItemStyle#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListViewItemStyle/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.ListView.View" /> プロパティは、<see cref="F:System.Windows.Forms.View.LargeIcon" />、<see cref="F:System.Windows.Forms.View.SmallIcon" />、または <see cref="F:System.Windows.Forms.View.Tile" /> に設定されます。</exception>
        <altmember cref="T:System.Windows.Forms.ListViewItem" />
        <altmember cref="M:System.Windows.Forms.ListView.EnsureVisible(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="listView.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> コントロールの文字列形式を返します。</summary>
        <returns>コントロールの種類を示す文字列、<see cref="T:System.Windows.Forms.ListView" /> コントロール内の項目数、および項目数が 0 ではない場合は <see cref="T:System.Windows.Forms.ListView" /> 内の最初の項目の種類。</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateExtendedStyles">
      <MemberSignature Language="C#" Value="protected void UpdateExtendedStyles ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void UpdateExtendedStyles() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.UpdateExtendedStyles" />
      <MemberSignature Language="VB.NET" Value="Protected Sub UpdateExtendedStyles ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void UpdateExtendedStyles();" />
      <MemberSignature Language="F#" Value="member this.UpdateExtendedStyles : unit -&gt; unit" Usage="listView.UpdateExtendedStyles " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>リスト ビュー コントロールに適用されている拡張スタイルを更新します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用することができます、<xref:System.Windows.Forms.ListView.UpdateExtendedStyles%2A>メソッドで使用する拡張スタイルをオーバーライドする派生クラスで、<xref:System.Windows.Forms.ListView>コントロール。 このメソッドを呼び出す場合は、行う必要がありますをでプロパティによって設定された拡張スタイル、<xref:System.Windows.Forms.ListView>コントロールがコントロールの派生バージョンで利用します。  
  
 拡張スタイルを適用するプロパティを次に、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.Activation%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.HoverSelection%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ListView.Activation" />
        <altmember cref="P:System.Windows.Forms.ListView.AllowColumnReorder" />
        <altmember cref="P:System.Windows.Forms.ListView.CheckBoxes" />
        <altmember cref="P:System.Windows.Forms.ListView.FullRowSelect" />
        <altmember cref="P:System.Windows.Forms.ListView.GridLines" />
        <altmember cref="P:System.Windows.Forms.ListView.HoverSelection" />
      </Docs>
    </Member>
    <Member MemberName="UseCompatibleStateImageBehavior">
      <MemberSignature Language="C#" Value="public bool UseCompatibleStateImageBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseCompatibleStateImageBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property UseCompatibleStateImageBehavior As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseCompatibleStateImageBehavior { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseCompatibleStateImageBehavior : bool with get, set" Usage="System.Windows.Forms.ListView.UseCompatibleStateImageBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 または [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 と互換性のある状態イメージの動作を <see cref="T:System.Windows.Forms.ListView" /> で使用するかどうかを示す値を取得または設定します。</summary>
        <value>状態イメージの動作が [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 と互換性のある場合は <see langword="true" />。その動作が [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 と互換性のある場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 変更、<xref:System.Windows.Forms.ListView>を制御、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 には、項目がオンまたはオフであるかどうか、または中間の状態を示すために設定するカスタムの状態のイメージが有効にします。 この機能を追加すると、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 2.0 には、.NET Framework 1.1 とは異なる動作です。 動作に依存するアプリケーションを作成した場合、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] 1.1 では、ことを確認します、<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>プロパティに設定されて`true`、これは、既定値。 完全にカスタム状態のイメージを活用するには次のように設定します。<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>に`false`します。  
  
> [!NOTE]
>  使用する場合、[!INCLUDE[vsprvsext](~/includes/vsprvsext-md.md)]デザイナー、<xref:System.Windows.Forms.ListView.UseCompatibleStateImageBehavior%2A>プロパティに設定する`false`します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.View View { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.View View" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.View" />
      <MemberSignature Language="VB.NET" Value="Public Property View As View" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::View View { System::Windows::Forms::View get(); void set(System::Windows::Forms::View value); };" />
      <MemberSignature Language="F#" Value="member this.View : System.Windows.Forms.View with get, set" Usage="System.Windows.Forms.ListView.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.View</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールに項目を表示する方法を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.View" /> 値のいずれか。 既定値は、<see cref="F:System.Windows.Forms.View.LargeIcon" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListView.View%2A>プロパティでは、ディスプレイの種類を指定することができます、<xref:System.Windows.Forms.ListView>項目を表示するコントロールを使用します。 設定することができます、<xref:System.Windows.Forms.ListView.View%2A>大きいまたは小さいアイコンが表示された各項目を表示または垂直方向の一覧で項目を表示するプロパティ。 豊富なオプションとは、使用するだけでなく、項目が各項目に指定されたすべてのサブ項目を表示する詳細ビューです。 各項目は、垂直方向に表示されている各アイテムは、列見出し、列に表示される各項目のサブ項目をグリッドに表示されます。 詳細ビューは、ユーザーにデータベース情報を表示する最適な方法です。 Windows XP と Windows Server 2003 では、独自のサブ項目の情報と共に大きいアイコンを表示することによって情報グラフィカルとテキスト情報のバランスを取るタイルとして項目を表示することもできます。 並べて表示ビューを有効にする、アプリケーションを呼び出す必要があります、<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>メソッド。 小さなイメージのビューでは、アイコンの右側に各項目のアイコンとテキスト情報を表示します。 大きいイメージ ビューには、アイコンとテキストの情報アイコンの下で各項目が表示されます。 イメージ リストのアイコンのサイズがで指定された、<xref:System.Windows.Forms.ImageList.ImageSize%2A>のプロパティ、<xref:System.Windows.Forms.ImageList>の<xref:System.Windows.Forms.ListView.SmallImageList%2A>または<xref:System.Windows.Forms.ListView.LargeImageList%2A>プロパティ。  
  
> [!NOTE]
>  大小のアイコンの表示で、複数のイメージ リストを使用している場合、<xref:System.Windows.Forms.ListView>コントロールを配置する必要あります小規模と大規模なバージョンで同じイメージのインデックス、各イメージ リスト内の場所。 ビューを切り替える場合は、1 つのリスト内のイメージのインデックス位置が指定されたキーの値に関係なく、他のリストのイメージを検索に使用されます。  
  
 ほとんどのプロパティの<xref:System.Windows.Forms.ListView>コントロールに影響するさまざまなビューの動作またはが表示されます。 ときに、項目のビューに影響を与えるいくつかのプロパティは便利なだけ、<xref:System.Windows.Forms.ListView.View%2A>プロパティがすべてのビューでは、特定の値に設定します。 などのプロパティなど、<xref:System.Windows.Forms.ListView.GridLines%2A>と<xref:System.Windows.Forms.ListView.FullRowSelect%2A>が役立つ場合に、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>中、<xref:System.Windows.Forms.ListView.MultiSelect%2A>と<xref:System.Windows.Forms.ListView.CheckBoxes%2A>プロパティは、すべてのビューで役に立ちます。  
  
 次の表にはいくつかの<xref:System.Windows.Forms.ListView>メンバーと、ビューで有効です。  
  
|ListView のメンバー|表示|  
|---------------------|----------|  
|<xref:System.Windows.Forms.ListView.Alignment%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoArrange%2A> プロパティ|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.AutoResizeColumn%2A> メソッド|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.CheckBoxes%2A>|除くすべてのビュー <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Columns%2A> プロパティ|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.DrawSubItem> イベント|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.FindItemWithText%2A> メソッド|<xref:System.Windows.Forms.View.Details>、 <xref:System.Windows.Forms.View.List>、または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.FindNearestItem%2A> メソッド|<xref:System.Windows.Forms.View.SmallIcon> または <xref:System.Windows.Forms.View.LargeIcon>|  
|<xref:System.Windows.Forms.ListView.GetItemAt%2A> メソッド|<xref:System.Windows.Forms.View.Details> または <xref:System.Windows.Forms.View.Tile>|  
|<xref:System.Windows.Forms.ListView.Groups%2A> プロパティ|除くすべてのビュー <xref:System.Windows.Forms.View.List>|  
|<xref:System.Windows.Forms.ListView.HeaderStyle%2A> プロパティ|<xref:System.Windows.Forms.View.Details>|  
|<xref:System.Windows.Forms.ListView.InsertionMark%2A> プロパティ|<xref:System.Windows.Forms.View.LargeIcon>、 <xref:System.Windows.Forms.View.SmallIcon>、または <xref:System.Windows.Forms.View.Tile>|  
  
 使用することができます、<xref:System.Windows.Forms.ListView.View%2A>プロパティ、アプリケーション内のデータのさまざまなビューを提供する、またはそのビューの特典を利用する特定のビューをロックします。 たとえば、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて多くの場合、<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>詳細ビューは、多数の他のビューでは使用できないオプションの表示を提供するためです。  
  
> [!NOTE]
>  場合、<xref:System.Windows.Forms.ListView>コントロールには、指定された任意の列ヘッダーはありません。 設定すると、<xref:System.Windows.Forms.ListView.View%2A>プロパティを<xref:System.Windows.Forms.View.Details?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView>コントロールはすべての項目が表示されません。 場合、<xref:System.Windows.Forms.ListView>コントロールには、指定された任意の列ヘッダーはありません。 設定すると、<xref:System.Windows.Forms.ListView.View%2A>プロパティを<xref:System.Windows.Forms.View.Tile?displayProperty=nameWithType>、<xref:System.Windows.Forms.ListView>コントロールはすべてのサブ項目が表示されません。  
  
 並べて表示ビューでは、右側の左側とテキストの情報を各項目を大きいアイコンが表示されます。 サブ項目を続けて項目ラベルのテキストの情報で構成されます。 既定では、最初のサブ項目のみが表示されます、項目のラベルに対応します。 追加のサブ項目を表示するに追加する必要があります<xref:System.Windows.Forms.ColumnHeader>オブジェクトを<xref:System.Windows.Forms.ListView.Columns%2A>コレクション。 各サブ項目をタイルには、列ヘッダーに対応します。 設定する必要があるサブ項目が表示され、表示される順序を制御する、<xref:System.Windows.Forms.ListViewItem.ListViewSubItem.Name%2A?displayProperty=nameWithType>各項目のプロパティと<xref:System.Windows.Forms.ColumnHeader.Name%2A?displayProperty=nameWithType>の各ヘッダーのプロパティ。 ことができますし、追加、削除、およびヘッダーを再配置、<xref:System.Windows.Forms.ListView.Columns%2A>目的の結果を実現するためにコレクション。  
  
 タイル ビューでタイルのサイズを制御するには、設定、<xref:System.Windows.Forms.ListView.TileSize%2A>プロパティ。 これは 1 行の場合は、サブ項目のテキストが長すぎるときに、行の折り返しを防ぐために役立ちます。  
  
 並べて表示ビューの例は、次を参照してください。、<xref:System.Windows.Forms.ListView.TileSize%2A>プロパティ。  
  
> [!NOTE]
>  列は、詳細ビューで表示されますのみが、詳細ビューまたはタイル ビューでは列ヘッダーのないサブ項目は表示されません。  
  
 並べて表示ビューは Windows XP および Windows Server 2003 でのみ使用できますが、アプリケーションを呼び出すと、<xref:System.Windows.Forms.Application.EnableVisualStyles%2A?displayProperty=nameWithType>メソッド。 旧バージョンのオペレーティング システムでは、並べて表示ビューに関するコードがすべて無効になり、<xref:System.Windows.Forms.ListView> コントロールは大きなアイコンのビューで表示されます。 その結果、並べて表示ビューに依存する任意のコードが正しく動作しない可能性があります。  
  
 並べて表示ビューは、使用できるかどうかを決定するコードを含めるしが利用できない場合は、代替機能を提供する可能性があります。 たとえば、オーナー描画の外観をカスタマイズするを使用する<xref:System.Windows.Forms.ListView>並べて表示ビュー内の項目、並べて表示ビューをサポートしないオペレーティング システムで実行されているときに、大きいアイコン表示する適切な描画のコードを使用する可能性があります。  
  
 タイルの表示機能は、オペレーティング システムのテーマ機能を提供するのと同じライブラリによって提供されます。 このライブラリの可用性を確認するには、呼び出し、<xref:System.Windows.Forms.FeatureSupport.IsPresent%28System.Object%29?displayProperty=nameWithType>メソッドのオーバー ロードを渡します、<xref:System.Windows.Forms.OSFeature.Themes?displayProperty=nameWithType>値。  
  
   
  
## Examples  
 次のコード例を作成、 <xref:System.Windows.Forms.ListView> 3 つのコントロール<xref:System.Windows.Forms.ListViewItem>指定されたオブジェクトと 3 つ<xref:System.Windows.Forms.ListViewItem.ListViewSubItem>項目ごとに指定されたオブジェクト。 例でも作成<xref:System.Windows.Forms.ColumnHeader>詳細ビューで、サブ項目を表示するオブジェクト。 2 つ<xref:System.Windows.Forms.ImageList>オブジェクトが作成用のイメージを提供するコード例も、<xref:System.Windows.Forms.ListViewItem>オブジェクト。 これら<xref:System.Windows.Forms.ImageList>オブジェクトに追加されます、<xref:System.Windows.Forms.ListView.LargeImageList%2A>と<xref:System.Windows.Forms.ListView.SmallImageList%2A>プロパティ。 例では、作成するのには、次のプロパティを使用して、<xref:System.Windows.Forms.ListView>コントロール。  
  
-   <xref:System.Windows.Forms.ListView.View%2A>  
  
-   <xref:System.Windows.Forms.ListView.LabelEdit%2A>  
  
-   <xref:System.Windows.Forms.ListView.AllowColumnReorder%2A>  
  
-   <xref:System.Windows.Forms.ListView.CheckBoxes%2A>  
  
-   <xref:System.Windows.Forms.ListView.FullRowSelect%2A>  
  
-   <xref:System.Windows.Forms.ListView.GridLines%2A>  
  
-   <xref:System.Windows.Forms.ListView.Sorting%2A>  
  
 この例にコードを追加することが必要です、<xref:System.Windows.Forms.Form>コンス トラクターまたはフォーム上の別の方法の例で作成したメソッドを呼び出します。 また、例ではイメージがという名前が必要です`MySmallImage1`、 `MySmallImage2`、 `MyLargeImage1`、および`MyLargeImage2`C: ドライブのルート ディレクトリにあります  
  
 [!code-cpp[ListViewExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListViewExample/CPP/form1.cpp#1)]
 [!code-csharp[ListViewExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListViewExample/CS/form1.cs#1)]
 [!code-vb[ListViewExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListViewExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">指定された値が <see cref="T:System.Windows.Forms.View" /> 値ではありません。</exception>
        <altmember cref="T:System.Windows.Forms.View" />
        <altmember cref="P:System.Windows.Forms.ListView.TileSize" />
        <altmember cref="M:System.Windows.Forms.Application.EnableVisualStyles" />
      </Docs>
    </Member>
    <Member MemberName="VirtualItemsSelectionRangeChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event VirtualItemsSelectionRangeChanged As ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ListViewVirtualItemsSelectionRangeChangedEventHandler ^ VirtualItemsSelectionRangeChanged;" />
      <MemberSignature Language="F#" Value="member this.VirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler " Usage="member this.VirtualItemsSelectionRangeChanged : System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ListViewVirtualItemsSelectionRangeChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> が仮想モードのときに、ある範囲の項目の選択状態が変化すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Windows.Forms.ListView>仮想モードでは、<xref:System.Windows.Forms.ListView.ItemSelectionChanged>イベントが発生します。  
  
 イベントの処理の詳細については、「[処理とイベントの発生](~/docs/standard/events/index.md)」を参照してください。  
  
   
  
## Examples  
 次のコード例では、このメンバーの使用を示します。 例では、イベント ハンドラーが発生するときに報告、<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>イベント。 このレポートでは、イベントが発生してデバッグに役立つについて説明します。 複数のイベントまたは頻繁に発生するイベントを報告する、交換を検討<xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType>で<xref:System.Console.WriteLine%2A?displayProperty=nameWithType>またはメッセージを複数行に追加<xref:System.Windows.Forms.TextBox>します。  
  
 コード例を実行する型のインスタンスを含むプロジェクトに貼り付けること<xref:System.Windows.Forms.ListView>という`ListView1`します。 イベント ハンドラーに関連付けられていることを確認し、<xref:System.Windows.Forms.ListView.VirtualItemsSelectionRangeChanged>イベント。  
  
 [!code-csharp[System.Windows.Forms.EventExamples#482](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#482)]
 [!code-vb[System.Windows.Forms.EventExamples#482](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#482)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.ListView.ItemSelectionChanged" />
      </Docs>
    </Member>
    <Member MemberName="VirtualListSize">
      <MemberSignature Language="C#" Value="public int VirtualListSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VirtualListSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualListSize" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualListSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int VirtualListSize { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.VirtualListSize : int with get, set" Usage="System.Windows.Forms.ListView.VirtualListSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>仮想モードの場合にリストに格納されている <see cref="T:System.Windows.Forms.ListViewItem" /> オブジェクトの数を取得または設定します。</summary>
        <value>仮想モードの場合に <see cref="T:System.Windows.Forms.ListViewItem" /> に格納されている <see cref="T:System.Windows.Forms.ListView" /> オブジェクトの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 取得または設定、<xref:System.Windows.Forms.ListView.VirtualListSize%2A>プロパティと<xref:System.Windows.Forms.ListView.VirtualMode%2A>に設定`false`効果はありません、<xref:System.Windows.Forms.ListView>します。  
  
 場合<xref:System.Windows.Forms.ListView.VirtualMode%2A>に設定されている`true`、および<xref:System.Windows.Forms.ListView.VirtualListSize%2A>プロパティが 0 より大きい処理する必要があります場合、<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>イベント、有効な提供<xref:System.Windows.Forms.ListViewItem>します。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> が 0 未満の値に設定されています。</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.ListView.VirtualMode" /> が <see langword="true" /> に設定されていて、<see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> が 0 より大きく、<see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> が処理されません。</exception>
        <altmember cref="P:System.Windows.Forms.ListView.VirtualMode" />
      </Docs>
    </Member>
    <Member MemberName="VirtualMode">
      <MemberSignature Language="C#" Value="public bool VirtualMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool VirtualMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListView.VirtualMode" />
      <MemberSignature Language="VB.NET" Value="Public Property VirtualMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool VirtualMode { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.VirtualMode : bool with get, set" Usage="System.Windows.Forms.ListView.VirtualMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ListView" /> コントロールに対して独自のデータ管理操作を指定したかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Windows.Forms.ListView" /> が指定されたデータ管理操作を使用する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定、<xref:System.Windows.Forms.ListView.VirtualMode%2A>プロパティを`true`配置、<xref:System.Windows.Forms.ListView>仮想モードにします。 仮想モードの場合、通常<xref:System.Windows.Forms.ListView.Items%2A>コレクションは使用されません。 代わりに、<xref:System.Windows.Forms.ListViewItem>としてオブジェクトが動的に作成された、<xref:System.Windows.Forms.ListView>それらが必要です。  
  
 仮想モードは、多くの状況で役立ちます。 場合、<xref:System.Windows.Forms.ListView>既にメモリに非常に大きいコレクションからオブジェクトを設定する必要がありますを作成する、<xref:System.Windows.Forms.ListViewItem>オブジェクトの各エントリを無駄にすることができます。 仮想モードでは、必要な項目のみが作成されます。 それ以外の場合の値、<xref:System.Windows.Forms.ListViewItem>オブジェクトは、多くの場合、再計算する必要があり、コレクション全体にこれを行うと、許容できないパフォーマンスが生成されます。 仮想モードでは、必要な項目のみが計算されます。  
  
 仮想モードを使用するために処理する必要があります、<xref:System.Windows.Forms.ListView.RetrieveVirtualItem>たびに発生するイベント、<xref:System.Windows.Forms.ListView>項目が必要です。 このイベント ハンドラーを作成する必要があります、<xref:System.Windows.Forms.ListViewItem>指定したインデックスに属しているオブジェクト。 さらに、<xref:System.Windows.Forms.ListView.VirtualListSize%2A>プロパティは、仮想一覧のサイズに設定する必要があります。  
  
 処理、<xref:System.Windows.Forms.ListView.SearchForVirtualItem>イベントにより、仮想モードで検索します。 このイベントが処理されない場合、<xref:System.Windows.Forms.ListView.FindItemWithText%2A>と<xref:System.Windows.Forms.ListView.FindNearestItem%2A>メソッドが返す`null`します。  
  
 処理することができます、<xref:System.Windows.Forms.ListView.CacheVirtualItems>のキャッシュを維持するためにイベント<xref:System.Windows.Forms.ListViewItem>オブジェクト。 場合、計算または参照を作成する、<xref:System.Windows.Forms.ListViewItem>オブジェクトが高価でパフォーマンスを向上させることができます、キャッシュを維持します。  
  
 場合、<xref:System.Windows.Forms.ListView.View%2A>プロパティに設定されて<xref:System.Windows.Forms.View.Tile>、値に自動的に変更が<xref:System.Windows.Forms.View.LargeIcon>とき<xref:System.Windows.Forms.ListView.VirtualMode%2A>に設定されている`true`します。  
  
 仮想モードで、<xref:System.Windows.Forms.ListView.Items%2A>コレクションが無効になっています。 結果にアクセスしようとして、<xref:System.InvalidOperationException>します。 場合も、同様の<xref:System.Windows.Forms.ListView.CheckedItems%2A>コレクションと<xref:System.Windows.Forms.ListView.SelectedItems%2A>コレクション。 選択したか、チェックされた項目を取得する場合を使用して、<xref:System.Windows.Forms.ListView.SelectedIndices%2A>と<xref:System.Windows.Forms.ListView.CheckedIndices%2A>コレクション代わりにします。  
  
   
  
## Examples  
 この例で、単純な<xref:System.Windows.Forms.ListView>10, 000 正方形で構成されます。 検索を処理し、パフォーマンスの向上にキャッシュを使用します。  
  
 [!code-csharp[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/cs/VirtualMode.cs#1)]
 [!code-vb[System.Windows.Forms.ListView.VirtualMode#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView.VirtualMode/vb/VirtualMode.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><see cref="P:System.Windows.Forms.ListView.VirtualMode" /> が <see langword="true" /> に設定されていて、次のいずれかの条件に該当します。 
-   <see cref="P:System.Windows.Forms.ListView.VirtualListSize" /> が 0 より大きく、<see cref="E:System.Windows.Forms.ListView.RetrieveVirtualItem" /> が処理されない。  
  
または 
-   <see cref="P:System.Windows.Forms.ListView.Items" />、<see cref="P:System.Windows.Forms.ListView.CheckedItems" />、または <see cref="P:System.Windows.Forms.ListView.SelectedItems" /> に項目が含まれている。  
  
または 
-   <see cref="P:System.Windows.Forms.ListView.Items" /> が編集されている。</exception>
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListView.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="listView.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">処理対象の Windows <see cref="T:System.Windows.Forms.Message" />。</param>
        <summary><see cref="M:System.Windows.Forms.Control.WndProc(System.Windows.Forms.Message@)" /> をオーバーライドします。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>