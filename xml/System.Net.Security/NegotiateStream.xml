<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <Metadata><Meta Name="ms.openlocfilehash" Value="11db0f7e9d3843d1816a582e23224cbcdac14a7f" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52234166" /></Metadata><TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <TypeSignature Language="F#" Value="type NegotiateStream = class&#xA;    inherit AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="9721f-101">クライアント サーバー通信で Negotiate セキュリティ プロトコルを使用してクライアントの認証と (オプションで) サーバーの認証を行うストリームを提供します。</span><span class="sxs-lookup"><span data-stu-id="9721f-101">Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-102">使用して、<xref:System.Net.Security.NegotiateStream>認証およびセキュリティで保護された情報をクラスが、クライアントとサーバーの間で送信します。</span><span class="sxs-lookup"><span data-stu-id="9721f-102">Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server.</span></span> <span data-ttu-id="9721f-103">使用して<xref:System.Net.Security.NegotiateStream>次を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="9721f-103">Using <xref:System.Net.Security.NegotiateStream>, you can do the following.</span></span>  
  
-   <span data-ttu-id="9721f-104">権限の借用または委任のサーバーにクライアントの資格情報を送信します。</span><span class="sxs-lookup"><span data-stu-id="9721f-104">Send the client's credentials to the server for Impersonation or Delegation.</span></span>  
  
-   <span data-ttu-id="9721f-105">サーバー認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="9721f-105">Request server authentication.</span></span>  
  
-   <span data-ttu-id="9721f-106">暗号化や、データを転送する前にサインインします。</span><span class="sxs-lookup"><span data-stu-id="9721f-106">Encrypt and/or sign data before transmitting it.</span></span>  
  
 <span data-ttu-id="9721f-107">認証は、情報を送信する前に実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-107">Authentication must be performed before transmitting information.</span></span> <span data-ttu-id="9721f-108">クライアントは、同期を使用して認証を要求<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドで、認証が完了するまでブロック、または非同期<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>メソッドで、認証が完了するを待機中にブロックしないでください。</span><span class="sxs-lookup"><span data-stu-id="9721f-108">Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete.</span></span> <span data-ttu-id="9721f-109">サーバーは、同期を使用して認証を要求<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>または非同期<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-109">Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span> <span data-ttu-id="9721f-110">クライアント、および必要に応じて、サーバーは、Negotiate セキュリティ プロトコルを使用して認証されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-110">The client, and optionally the server, is authenticated using the Negotiate security protocol.</span></span> <span data-ttu-id="9721f-111">Windows 95/98 システムでは、Windows NT LAN Manager (NTLM) は、認証に使用されるプロトコルです。</span><span class="sxs-lookup"><span data-stu-id="9721f-111">On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication.</span></span> <span data-ttu-id="9721f-112">その他のプラットフォーム、Kerberos プロトコルが認証に使用場合、クライアントとサーバーの両方をサポートします。それ以外の場合、NTLM が使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-112">On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used.</span></span> <span data-ttu-id="9721f-113">これらのプロトコルの詳細な説明についてには、msdn のプラットフォーム SDK ドキュメントを参照して msdn.microsoft.com/library/ にします。</span><span class="sxs-lookup"><span data-stu-id="9721f-113">For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/.</span></span> <span data-ttu-id="9721f-114"><xref:System.Net.Security.NegotiateStream>クラスは、セキュリティ サポート プロバイダー インターフェイス (SSPI) を使用して認証を実行します。</span><span class="sxs-lookup"><span data-stu-id="9721f-114">The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).</span></span>  
  
 <span data-ttu-id="9721f-115">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスで使用される、<xref:System.Net.Security.NegotiateStream>転送中に、データを保護するためにします。</span><span class="sxs-lookup"><span data-stu-id="9721f-115">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission.</span></span> <span data-ttu-id="9721f-116">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-116">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span> <span data-ttu-id="9721f-117">リモート クライアントまたはサーバーを使用してに関する情報を取得することができます、<xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="9721f-117">You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.</span></span>  
  
 <span data-ttu-id="9721f-118">認証が失敗した場合が表示されます、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-118">If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-119">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-119">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="9721f-120">同期を使用してデータを送信する<xref:System.Net.Security.NegotiateStream.Write%2A>または非同期<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-120">You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods.</span></span> <span data-ttu-id="9721f-121">同期を使用してデータを受信する<xref:System.Net.Security.NegotiateStream.Read%2A>または非同期<xref:System.Net.Security.NegotiateStream.BeginRead%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-121">You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods.</span></span> <span data-ttu-id="9721f-122">セキュリティ サービスの暗号化または署名が有効になっているなど、これらは自動的に適用してデータを<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-122">If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-123"><xref:System.Net.Security.NegotiateStream>を作成するときにストリームを使用してデータ転送、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-123">The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-124">指定するオプションがあるこの基になるストリームを指定するときに閉じるかどうか、<xref:System.Net.Security.NegotiateStream>も基になるストリームを閉じます。</span><span class="sxs-lookup"><span data-stu-id="9721f-124">When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-125">次のコード例に示しますを使用するクライアント サーバー接続のクライアント側、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-125">The following code example demonstrates the client side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-126">クライアントが認証し、サーバーにメッセージを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="9721f-126">The client authenticates and sends a message to the server asynchronously.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 <span data-ttu-id="9721f-127">次のコード例に示しますを使用するクライアント サーバー接続のサーバー側、<xref:System.Net.Security.NegotiateStream>にクライアントを認証し、クライアントから送信されたメッセージを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="9721f-127">The following code example demonstrates the server side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream> to authenticate the client and read a message sent by the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/8bf0b428-5a21-4299-8d6e-bf8251fd978a"><span data-ttu-id="9721f-128">バージョン 3.5 SP1 における HTTPWebRequest の NTLM 認証への変更</span><span class="sxs-lookup"><span data-stu-id="9721f-128">Changes to NTLM authentication for HTTPWebRequest in Version 3.5 SP1</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9721f-129"><see cref="T:System.Net.Security.NegotiateStream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9721f-129">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-130">防ぐために、<xref:System.Net.Security.NegotiateStream>から指定したストリームを閉じると、使用して、<xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>コンス トラクター。</span><span class="sxs-lookup"><span data-stu-id="9721f-130">To prevent the <xref:System.Net.Security.NegotiateStream> from closing the stream that you supply, use the <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream innerStream" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="9721f-131"><see cref="T:System.Net.Security.NegotiateStream" /> がデータの送受信に使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-131">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <summary><span data-ttu-id="9721f-132"><see cref="T:System.Net.Security.NegotiateStream" /> を指定して <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9721f-132">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="9721f-133">次のコード例では、このコンス トラクターの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="9721f-133">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="F#" Value="new System.Net.Security.NegotiateStream : System.IO.Stream * bool -&gt; System.Net.Security.NegotiateStream" Usage="new System.Net.Security.NegotiateStream (innerStream, leaveInnerStreamOpen)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="9721f-134"><see cref="T:System.Net.Security.NegotiateStream" /> がデータの送受信に使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-134">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <param name="leaveInnerStreamOpen"><span data-ttu-id="9721f-135">この <see cref="T:System.Net.Security.NegotiateStream" /> を閉じても、<c>innerstream</c> が影響を受けないことを示す場合は <see langword="true" />。この <see cref="T:System.Net.Security.NegotiateStream" /> を閉じると、<paramref name="innerStream" /> も閉じられることを示す場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-135"><see langword="true" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> has no effect on <c>innerstream</c>; <see langword="false" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> also closes <paramref name="innerStream" />.</span></span></param>
        <summary><span data-ttu-id="9721f-136">指定した <see cref="T:System.IO.Stream" /> とストリームを閉じる動作を使用して、<see cref="T:System.Net.Security.NegotiateStream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="9721f-136">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" /> and stream closure behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-137">指定すると`true`の`leaveStreamOpen`パラメーター、閉じる、<xref:System.Net.Security.NegotiateStream>も何も起こりません、`innerStream`ストリーム; 明示的に閉じる必要があります`innerStream`が不要になった場合。</span><span class="sxs-lookup"><span data-stu-id="9721f-137">When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-138">次のコード例では、このコンス トラクターの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="9721f-138">The following code example demonstrates calling this constructor.</span></span> <span data-ttu-id="9721f-139">このコード例が示されている例の一部、<xref:System.Net.Security.NegotiateStream>クラス。</span><span class="sxs-lookup"><span data-stu-id="9721f-139">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-140"><paramref name="innerStream" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-140"><paramref name="innerStream" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-141">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-141">\- or -</span></span> 
 <span data-ttu-id="9721f-142"><paramref name="innerStream" /> と <see cref="F:System.IO.Stream.Null" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="9721f-142"><paramref name="innerStream" /> is equal to <see cref="F:System.IO.Stream.Null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9721f-143">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-143">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : unit -&gt; unit&#xA;override this.AuthenticateAsClient : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9721f-144">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-144">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-145">認証に使用して、クライアントの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-145">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-146">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-146">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-147">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されたとします。</span><span class="sxs-lookup"><span data-stu-id="9721f-147">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9721f-148"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用される SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="9721f-148">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-149">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-149">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-150">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-150">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-151">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-151">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-152">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-152">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-153">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-153">The authentication failed.</span></span> <span data-ttu-id="9721f-154">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-154">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-155">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-155">The authentication failed.</span></span> <span data-ttu-id="9721f-156">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-156">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-157">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-157">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-158">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-158">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-159">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-159">\- or -</span></span> 
<span data-ttu-id="9721f-160">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-160">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-161">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-161">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-162">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-162">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-163"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-163">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-164">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-164">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-165">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-165">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9721f-166">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-166">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-167">認証プロセスでは、指定したクライアントの資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-167">The authentication process uses the specified client credential.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-168">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されたとします。</span><span class="sxs-lookup"><span data-stu-id="9721f-168">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9721f-169"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用される SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="9721f-169">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-170">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-170">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-171">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-171">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-172">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-172">The authentication failed.</span></span> <span data-ttu-id="9721f-173">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-173">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-174">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-174">The authentication failed.</span></span> <span data-ttu-id="9721f-175">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-175">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-176">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-176">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-177">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-177">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-178">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-178">\- or -</span></span> 
<span data-ttu-id="9721f-179">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-179">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-180">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-180">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-181"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-181"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-182">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-182">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-183"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-183">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-184">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-184">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9721f-185">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-185">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-186">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-186">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9721f-187">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-187">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-188">認証プロセスでは、指定したクライアントの資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-188">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-189">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されたとします。</span><span class="sxs-lookup"><span data-stu-id="9721f-189">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9721f-190"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用される SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="9721f-190">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-191"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>拡張保護では、このメソッドに渡されるため、`binding`からのアプリケーションでパラメーターを取得すると<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられている<xref:System.Net.Security.SslStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-191">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9721f-192">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-192">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-193">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-193">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-194"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-194"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-195">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-195">\- or -</span></span> 
 <span data-ttu-id="9721f-196"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-196"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-197">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-197">The authentication failed.</span></span> <span data-ttu-id="9721f-198">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-198">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-199">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-199">The authentication failed.</span></span> <span data-ttu-id="9721f-200">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-200">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-201">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-201">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-202">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-202">\- or -</span></span> 
<span data-ttu-id="9721f-203">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-203">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-204">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-204">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-205">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-205">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-206">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-206">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-207">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-207">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-208">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-208">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-209">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-209">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9721f-210">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-210">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-211">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-211">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-212">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-212">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-213">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-213">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-214">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-214">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-215">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-215">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-216">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-216">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-217">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-217">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-218">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-218">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-219"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="9721f-219"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-220"><paramref name="targetName" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="9721f-220"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-221">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-221">The authentication failed.</span></span> <span data-ttu-id="9721f-222">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-222">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-223">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-223">The authentication failed.</span></span> <span data-ttu-id="9721f-224">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-224">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-225">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-225">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-226">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-226">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-227">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-227">\- or -</span></span> 
<span data-ttu-id="9721f-228">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-228">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-229">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-229">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-230">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-230">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-231"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-231">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-232">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-232">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9721f-233">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-233">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-234">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-234">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-235">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-235">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9721f-236">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-236">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-237">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-237">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-238">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-238">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-239">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-239">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-240">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-240">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-241">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-241">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-242">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-242">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-243"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>拡張保護では、このメソッドに渡されるため、`binding`からのアプリケーションでパラメーターを取得すると<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられている<xref:System.Net.Security.SslStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-243">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9721f-244">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-244">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-245">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-245">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-246"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-246"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-247">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-247">\- or -</span></span> 
 <span data-ttu-id="9721f-248"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-248"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-249"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="9721f-249"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-250">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-250">The authentication failed.</span></span> <span data-ttu-id="9721f-251">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-251">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-252">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-252">The authentication failed.</span></span> <span data-ttu-id="9721f-253">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-253">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-254">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-254">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-255">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-255">\- or -</span></span> 
<span data-ttu-id="9721f-256">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-256">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-257">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-257">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-258">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-258">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-259">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-259">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9721f-260">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-260">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9721f-261">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-261">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="9721f-262"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-262">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-263">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-263">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-264">認証に使用して、クライアントの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-264">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-265">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-265">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-266">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されたとします。</span><span class="sxs-lookup"><span data-stu-id="9721f-266">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9721f-267"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用される SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="9721f-267">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-268">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-268">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-269">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-269">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-270">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-270">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-271">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-271">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-272">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-272">The authentication failed.</span></span> <span data-ttu-id="9721f-273">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-273">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-274">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-274">The authentication failed.</span></span> <span data-ttu-id="9721f-275">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-275">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-276">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-276">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-277">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-277">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-278">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-278">\- or -</span></span> 
<span data-ttu-id="9721f-279">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-279">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-280">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-280">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-281">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-281">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-282"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-282">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-283">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-283">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-284">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-284">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9721f-285">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-285">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9721f-286">認証プロセスでは、指定したクライアントの資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-286">The authentication process uses the specified client credential.</span></span></summary>
        <returns><span data-ttu-id="9721f-287"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-287">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-288">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-288">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-289">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されたとします。</span><span class="sxs-lookup"><span data-stu-id="9721f-289">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9721f-290"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用される SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="9721f-290">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-291">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-291">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-292">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-292">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-293">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-293">The authentication failed.</span></span> <span data-ttu-id="9721f-294">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-294">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-295">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-295">The authentication failed.</span></span> <span data-ttu-id="9721f-296">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-296">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-297">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-297">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-298">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-298">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-299">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-299">\- or -</span></span> 
<span data-ttu-id="9721f-300">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-300">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-301">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-301">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-302"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-302"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-303">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-303">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-304"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-304">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-305">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-305">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9721f-306">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-306">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-307">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-307">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="9721f-308">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-308">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9721f-309">認証プロセスでは、指定したクライアントの資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-309">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <returns><span data-ttu-id="9721f-310"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-310">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-311">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-311">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-312">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、相互認証が要求されたとします。</span><span class="sxs-lookup"><span data-stu-id="9721f-312">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="9721f-313"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用される SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="9721f-313">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-314"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>拡張保護では、このメソッドに渡されるため、`binding`からのアプリケーションでパラメーターを取得すると<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられている<xref:System.Net.Security.SslStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-314">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9721f-315">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-315">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-316">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-316">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-317"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-317"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-318">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-318">\- or -</span></span> 
 <span data-ttu-id="9721f-319"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-319"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-320">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-320">The authentication failed.</span></span> <span data-ttu-id="9721f-321">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-321">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-322">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-322">The authentication failed.</span></span> <span data-ttu-id="9721f-323">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-323">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-324">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-324">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-325">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-325">\- or -</span></span> 
<span data-ttu-id="9721f-326">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-326">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-327">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-327">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-328">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-328">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-329">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-329">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-330">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-330">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-331">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-331">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-332">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-332">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9721f-333">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-333">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-334">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-334">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9721f-335">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-335">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="9721f-336"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-336">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-337">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-337">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-338">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-338">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-339">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-339">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-340">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-340">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-341">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-341">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-342">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-342">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-343">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-343">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-344"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="9721f-344"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-345"><paramref name="targetName" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="9721f-345"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-346">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-346">The authentication failed.</span></span> <span data-ttu-id="9721f-347">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-347">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-348">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-348">The authentication failed.</span></span> <span data-ttu-id="9721f-349">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-349">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-350">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-350">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-351">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-351">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-352">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-352">\- or -</span></span> 
<span data-ttu-id="9721f-353">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-353">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-354">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-354">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-355">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-355">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-356"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-356">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsClientAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsClientAsync (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-357">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-357">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9721f-358">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-358">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-359">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-359">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-360">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-360">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9721f-361">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-361">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-362">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-362">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9721f-363">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-363">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <returns><span data-ttu-id="9721f-364"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-364">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-365">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-365">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-366">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-366">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-367">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-367">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-368">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-368">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-369">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-369">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-370"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>拡張保護では、このメソッドに渡されるため、`binding`からのアプリケーションでパラメーターを取得すると<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられている<xref:System.Net.Security.SslStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-370">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="9721f-371">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-371">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-372">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-372">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-373"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-373"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-374">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-374">\- or -</span></span> 
 <span data-ttu-id="9721f-375"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-375"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-376"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="9721f-376"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-377">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-377">The authentication failed.</span></span> <span data-ttu-id="9721f-378">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-378">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-379">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-379">The authentication failed.</span></span> <span data-ttu-id="9721f-380">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-380">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-381">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-381">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-382">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-382">\- or -</span></span> 
<span data-ttu-id="9721f-383">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-383">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-384">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-384">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-385">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-385">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-386">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-386">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9721f-387">クライアント サーバー接続の認証のサーバー側を処理します。</span><span class="sxs-lookup"><span data-stu-id="9721f-387">Handles the server side of an authentication for a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-388">これらのメソッドは、認証が進行中はブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-388">These methods block while the authentication is in progress.</span></span> <span data-ttu-id="9721f-389">認証が完了するを待機中にブロックからアプリケーションを防ぐためには、使用、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-389">To prevent the application from blocking while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : unit -&gt; unit&#xA;override this.AuthenticateAsServer : unit -&gt; unit" Usage="negotiateStream.AuthenticateAsServer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9721f-390">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-390">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-391">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-391">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-392">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-392">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-393">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-393">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9721f-394">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-394">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-395">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-395">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-396">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-396">This method blocks until the operation completes.</span></span> <span data-ttu-id="9721f-397">操作が完了するまでのブロックを防ぐための 1 つを使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-397">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-398">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-398">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-399">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-399">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-400">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-400">The authentication failed.</span></span> <span data-ttu-id="9721f-401">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-401">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-402">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-402">The authentication failed.</span></span> <span data-ttu-id="9721f-403">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-403">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-404">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-404">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-405">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-405">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-406">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-406">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-407"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-407">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit&#xA;override this.AuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; unit" Usage="negotiateStream.AuthenticateAsServer policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="9721f-408">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-408">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="9721f-409">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-409">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-410">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-410">The authentication process uses the specified extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-411">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-411">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-412">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-412">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-413">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-413">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9721f-414">場合、`policy`パラメーターが`null`が拡張保護ポリシーを使用し、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設定<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-414">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9721f-415">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-415">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-416">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-416">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-417">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-417">This method blocks until the operation completes.</span></span> <span data-ttu-id="9721f-418">操作が完了するまでのブロックを防ぐための 1 つを使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-418">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-419">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-419">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-420">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-420">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-421"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-421">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-422">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-422">The authentication failed.</span></span> <span data-ttu-id="9721f-423">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-423">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-424">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-424">The authentication failed.</span></span> <span data-ttu-id="9721f-425">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-425">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-426">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-426">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-427">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-427">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9721f-428">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="9721f-428">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-429">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-429">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-430">サーバーの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-430">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-431">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-431">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9721f-432">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-432">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-433">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-433">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-434">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-434">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-435">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-435">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-436">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-436">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-437">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-437">This method blocks until the operation completes.</span></span> <span data-ttu-id="9721f-438">操作が完了するまでのブロックを防ぐための 1 つを使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-438">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-439">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-439">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-440">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-440">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-441"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-441"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-442"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-442"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-443">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-443">The authentication failed.</span></span> <span data-ttu-id="9721f-444">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-444">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-445">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-445">The authentication failed.</span></span> <span data-ttu-id="9721f-446">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-446">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-447">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-447">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-448">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-448">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-449">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-449">\- or -</span></span> 
<span data-ttu-id="9721f-450">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-450">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9721f-451">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-451">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-452">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-452">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-453">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-453">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-454"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-454">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit&#xA;override this.AuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; unit" Usage="negotiateStream.AuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-455">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-455">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="9721f-456">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-456">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-457">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-457">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9721f-458">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-458">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-459">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-459">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-460">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-460">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-461">場合、`policy`パラメーターが`null`が拡張保護ポリシーを使用し、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設定<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-461">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9721f-462">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-462">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-463">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-463">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-464">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-464">This method blocks until the operation completes.</span></span> <span data-ttu-id="9721f-465">操作が完了するまでのブロックを防ぐための 1 つを使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-465">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-466">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-466">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-467">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-467">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-468"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-468">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-469"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-469"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-470"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-470"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-471">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-471">The authentication failed.</span></span> <span data-ttu-id="9721f-472">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-472">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-473">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-473">The authentication failed.</span></span> <span data-ttu-id="9721f-474">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-474">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-475">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-475">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-476">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-476">\- or -</span></span> 
<span data-ttu-id="9721f-477">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-477">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9721f-478">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-478">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-479">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-479">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-480">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-480">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9721f-481">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="9721f-481">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-482">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-482">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9721f-483">クライアントとサーバー間の接続のサーバー側の認証を非同期操作として処理します。</span><span class="sxs-lookup"><span data-stu-id="9721f-483">Handles the server side of an authentication for a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : unit -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9721f-484">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-484">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="9721f-485"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-485">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-486">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-486">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-487">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-487">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-488">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-488">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-489">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-489">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9721f-490">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-490">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-491">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-491">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-492">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-492">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-493">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-493">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-494">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-494">The authentication failed.</span></span> <span data-ttu-id="9721f-495">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-495">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-496">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-496">The authentication failed.</span></span> <span data-ttu-id="9721f-497">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-497">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-498">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-498">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-499">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-499">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-500">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-500">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-501"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-501">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync policy" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="9721f-502">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-502">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="9721f-503">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-503">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9721f-504">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-504">The authentication process uses the specified extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="9721f-505"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-505">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-506">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-506">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-507">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-507">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-508">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-508">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-509">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-509">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9721f-510">場合、`policy`パラメーターが`null`が拡張保護ポリシーを使用し、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設定<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-510">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9721f-511">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-511">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-512">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-512">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-513">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-513">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-514">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-514">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-515"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-515">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-516">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-516">The authentication failed.</span></span> <span data-ttu-id="9721f-517">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-517">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-518">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-518">The authentication failed.</span></span> <span data-ttu-id="9721f-519">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-519">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-520">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-520">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-521">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-521">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9721f-522">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="9721f-522">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-523">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-523">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-524">サーバーの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-524">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-525">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-525">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9721f-526">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-526">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-527">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-527">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9721f-528">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-528">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="9721f-529"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-529">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-530">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-530">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-531">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-531">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-532">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-532">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-533">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-533">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-534">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-534">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-535"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-535"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-536"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-536"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-537">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-537">The authentication failed.</span></span> <span data-ttu-id="9721f-538">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-538">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-539">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-539">The authentication failed.</span></span> <span data-ttu-id="9721f-540">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-540">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-541">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-541">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-542">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-542">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-543">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-543">\- or -</span></span> 
<span data-ttu-id="9721f-544">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-544">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9721f-545">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-545">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-546">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-546">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-547">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-547">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-548"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-548">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="F#" Value="abstract member AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task&#xA;override this.AuthenticateAsServerAsync : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.AuthenticateAsServerAsync (credential, policy, requiredProtectionLevel, requiredImpersonationLevel)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-549">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-549">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="9721f-550">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-550">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-551">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-551">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9721f-552">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-552">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="9721f-553">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="9721f-553">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="9721f-554">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-554">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="9721f-555"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-555">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
<span data-ttu-id="9721f-556">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-556">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-557">場合、`policy`パラメーターが`null`が拡張保護ポリシーを使用し、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設定<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-557">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9721f-558">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-558">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-559">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-559">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-560">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-560">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-561">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-561">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-562"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-562">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-563"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-563"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-564"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-564"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-565">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-565">The authentication failed.</span></span> <span data-ttu-id="9721f-566">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-566">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-567">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-567">The authentication failed.</span></span> <span data-ttu-id="9721f-568">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-568">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-569">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-569">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-570">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-570">\- or -</span></span> 
<span data-ttu-id="9721f-571">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-571">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9721f-572">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-572">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-573">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-573">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-574">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-574">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9721f-575">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="9721f-575">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-576">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-576">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9721f-577">クライアントとサーバー間の接続のクライアント側を認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-577">Begins an asynchronous operation to authenticate the client side of a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-578">このメソッドのオーバー ロードでは、認証の進行中はブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-578">The overloads of this method do not block while authentication is in progress.</span></span> <span data-ttu-id="9721f-579">認証が完了するを待機中にブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-579">To block while waiting for the authentication to complete, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="9721f-580">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-580">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-581">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-581">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="9721f-582">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-582">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-583">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-583">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-584">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-584">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-585">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-585">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-586">認証に使用して、クライアントの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-586">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-587">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-587">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-588">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-588">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span> <span data-ttu-id="9721f-589"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用される SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="9721f-589">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-590">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-590">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-591">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-591">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-592">呼び出すことによって、非同期認証操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-592">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9721f-593">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-593">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-594">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-594">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-595">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-595">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-596">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-596">In this case, you can retry the authentication with a different credential.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-597">次のコード例では、クライアントの非同期の認証を開始するには、このメソッドの呼び出しを示しています。</span><span class="sxs-lookup"><span data-stu-id="9721f-597">The following code example demonstrates calling this method to begin an asynchronous authentication for the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-598">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-598">The authentication failed.</span></span> <span data-ttu-id="9721f-599">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-599">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-600">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-600">The authentication failed.</span></span> <span data-ttu-id="9721f-601">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-601">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-602">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-602">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-603">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-603">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-604">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-604">\- or -</span></span> 
<span data-ttu-id="9721f-605">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-605">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-606">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-606">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-607">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-607">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-608"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-608">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-609">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-609">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-610">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-610">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-611">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-611">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-612">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-612">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9721f-613">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-613">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-614">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-614">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-615">認証プロセスでは、指定した資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-615">The authentication process uses the specified credentials.</span></span> <span data-ttu-id="9721f-616">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-616">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-617">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-617">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-618">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-618">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-619">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-619">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-620">呼び出すことによって、非同期認証操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-620">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9721f-621">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-621">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-622">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-622">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-623">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-623">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-624">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-624">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-625"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-625"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-626">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-626">\- or -</span></span> 
 <span data-ttu-id="9721f-627"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-627"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-628">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-628">The authentication failed.</span></span> <span data-ttu-id="9721f-629">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-629">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-630">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-630">The authentication failed.</span></span> <span data-ttu-id="9721f-631">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-631">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-632">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-632">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-633">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-633">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-634">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-634">\- or -</span></span> 
<span data-ttu-id="9721f-635">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-635">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-636">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-636">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-637">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-637">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-638"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-638">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-639">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-639">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9721f-640">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-640">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-641">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-641">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-642">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-642">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-643">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-643">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9721f-644">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-644">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-645">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-645">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-646">認証プロセスでは、指定した資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-646">The authentication process uses the specified credentials and channel binding.</span></span> <span data-ttu-id="9721f-647">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-647">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-648">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-648">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-649">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-649">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-650">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-650">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-651">呼び出すことによって、非同期認証操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-651">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9721f-652">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-652">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-653">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-653">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-654">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-654">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-655">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-655">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-656"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-656"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-657">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-657">\- or -</span></span> 
 <span data-ttu-id="9721f-658"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-658"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-659">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-659">The authentication failed.</span></span> <span data-ttu-id="9721f-660">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-660">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-661">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-661">The authentication failed.</span></span> <span data-ttu-id="9721f-662">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-662">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-663">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-663">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-664">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-664">\- or -</span></span> 
<span data-ttu-id="9721f-665">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-665">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-666">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-666">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-667">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-667">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-668">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-668">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-669">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-669">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-670">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-670">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-671">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-671">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9721f-672">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-672">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-673">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-673">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-674">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-674">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9721f-675">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-675">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-676">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-676">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-677">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-677">The authentication process uses the specified credentials and authentication options.</span></span> <span data-ttu-id="9721f-678">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-678">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-679">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-679">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-680">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-680">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-681">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-681">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-682">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-682">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-683">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-683">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-684">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-684">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-685">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-685">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-686">呼び出すことによって、非同期認証操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-686">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9721f-687">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-687">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-688">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-688">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-689">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-689">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-690">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-690">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-691"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-691"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-692">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-692">\- or -</span></span> 
 <span data-ttu-id="9721f-693"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-693"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-694">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-694">The authentication failed.</span></span> <span data-ttu-id="9721f-695">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-695">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-696">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-696">The authentication failed.</span></span> <span data-ttu-id="9721f-697">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-697">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-698">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-698">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-699">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-699">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-700">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-700">\- or -</span></span> 
<span data-ttu-id="9721f-701">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-701">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-702">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-702">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-703">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-703">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-704"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-704">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsClient : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ChannelBinding * string * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsClient (credential, binding, targetName, requiredProtectionLevel, allowedImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-705">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-705">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="9721f-706">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-706">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="9721f-707">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="9721f-707">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-708">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-708">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="9721f-709">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-709">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-710">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-710">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-711">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-711">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9721f-712">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-712">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-713">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-713">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-714">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-714">The authentication process uses the specified credentials, authentication options, and channel binding.</span></span> <span data-ttu-id="9721f-715">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-715">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-716">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-716">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-717">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-717">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-718">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-718">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-719">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-719">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-720">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-720">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-721">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-721">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-722">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-722">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-723">呼び出すことによって、非同期認証操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-723">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="9721f-724">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-724">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-725">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-725">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-726">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-726">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-727">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-727">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-728"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-728"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="9721f-729">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-729">\- or -</span></span> 
 <span data-ttu-id="9721f-730"><paramref name="targetName" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-730"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-731">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-731">The authentication failed.</span></span> <span data-ttu-id="9721f-732">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-732">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-733">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-733">The authentication failed.</span></span> <span data-ttu-id="9721f-734">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-734">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-735">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-735">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-736">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-736">\- or -</span></span> 
<span data-ttu-id="9721f-737">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-737">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="9721f-738">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-738">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-739">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-739">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-740">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-740">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="9721f-741">クライアントとサーバー間の接続のサーバー側の認証を処理する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-741">Begins an asynchronous operation to handle the server side of authenticating a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-742">このメソッドのオーバー ロードでは、認証の進行中はブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-742">The overloads of this method do not block while the authentication is in progress.</span></span> <span data-ttu-id="9721f-743">認証が完了するを待機中にブロックを使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-743">To block while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="9721f-744">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-744">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-745">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-745">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="9721f-746">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-746">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-747">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-747">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-748">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-748">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-749">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-749">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-750">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-750">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-751">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-751">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-752">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-752">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9721f-753">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-753">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-754">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-754">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-755">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-755">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-756">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-756">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-757">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-757">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-758">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-758">The authentication failed.</span></span> <span data-ttu-id="9721f-759">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-759">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-760">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-760">The authentication failed.</span></span> <span data-ttu-id="9721f-761">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-761">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-762">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-762">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-763">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-763">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-764">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-764">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-765"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-765">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (policy, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="9721f-766">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-766">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-767">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-767">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-768">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-768">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9721f-769">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-769">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-770">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-770">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-771">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-771">The authentication process uses the specified extended protection policy.</span></span> <span data-ttu-id="9721f-772">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-772">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-773">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-773">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-774">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-774">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="9721f-775">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-775">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="9721f-776">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルが<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-776">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="9721f-777">場合、`policy`パラメーターが`null`が拡張保護ポリシーを使用し、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設定<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-777">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9721f-778">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-778">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-779">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-779">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-780">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-780">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-781">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-781">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-782">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-782">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-783"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-783">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-784">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-784">The authentication failed.</span></span> <span data-ttu-id="9721f-785">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-785">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-786">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-786">The authentication failed.</span></span> <span data-ttu-id="9721f-787">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-787">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-788">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-788">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-789">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-789">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9721f-790">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="9721f-790">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-791">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-791">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-792">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-792">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-793">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-793">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9721f-794">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-794">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-795">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-795">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-796">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-796">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="9721f-797">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-797">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-798">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-798">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-799">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="9721f-799">The authentication process uses the specified server credentials and authentication options.</span></span> <span data-ttu-id="9721f-800">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-800">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-801">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-801">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-802">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-802">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-803">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-803">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-804">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-804">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-805">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-805">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-806">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-806">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-807">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-807">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-808">呼び出すことによって、非同期認証操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-808">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="9721f-809">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-809">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-810">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-810">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-811">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-811">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-812">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-812">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-813"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-813"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-814"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-814"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-815">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-815">The authentication failed.</span></span> <span data-ttu-id="9721f-816">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-816">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-817">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-817">The authentication failed.</span></span> <span data-ttu-id="9721f-818">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-818">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-819">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-819">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-820">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-820">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-821">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-821">\- or -</span></span> 
<span data-ttu-id="9721f-822">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-822">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9721f-823">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-823">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-824">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-824">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="9721f-825">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-825">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="9721f-826"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="9721f-826">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="abstract member BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginAuthenticateAsServer : System.Net.NetworkCredential * System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy * System.Net.Security.ProtectionLevel * System.Security.Principal.TokenImpersonationLevel * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginAuthenticateAsServer (credential, policy, requiredProtectionLevel, requiredImpersonationLevel, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="9721f-827">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-827">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="9721f-828">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-828">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="9721f-829">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-829">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="9721f-830">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-830">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-831">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-831">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-832">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-832">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9721f-833">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-833">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-834">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-834">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="9721f-835">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-835">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span> <span data-ttu-id="9721f-836">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-836">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="9721f-837">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-837">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-838">使用して、`requiredProtectionLevel`認証済みのストリームを使用して送信されるデータのセキュリティ サービスを要求するパラメーター。</span><span class="sxs-lookup"><span data-stu-id="9721f-838">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="9721f-839">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="9721f-839">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="9721f-840">認証が成功したとは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-840">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="9721f-841">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-841">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="9721f-842">場合、`policy`パラメーターが`null`が拡張保護ポリシーを使用し、<xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A>設定<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-842">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="9721f-843">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-843">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-844">操作が完了するまでにブロックするのいずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="9721f-844">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="9721f-845">呼び出すことによって、非同期認証操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-845">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="9721f-846">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-846">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-847">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-847">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-848">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-848">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-849">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-849">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-850"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-850">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-851"><paramref name="credential" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-851"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="9721f-852"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-852"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-853">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-853">The authentication failed.</span></span> <span data-ttu-id="9721f-854">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-854">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-855">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-855">The authentication failed.</span></span> <span data-ttu-id="9721f-856">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-856">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-857">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-857">Authentication has already occurred.</span></span>  
  
<span data-ttu-id="9721f-858">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-858">\- or -</span></span> 
<span data-ttu-id="9721f-859">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="9721f-859">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="9721f-860">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-860">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-861">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-861">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-862">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-862">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="9721f-863">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="9721f-863">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <related type="Article" href="~/docs/framework/network-programming/integrated-windows-authentication-with-extended-protection.md"><span data-ttu-id="9721f-864">統合 Windows 認証と拡張保護</span><span class="sxs-lookup"><span data-stu-id="9721f-864">Integrated Windows Authentication with Extended Protection</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginRead : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginRead (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9721f-865">ストリームから読み取ったバイトを受け取る <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="9721f-865">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9721f-866">このストリームから読み取ったデータの格納を開始する位置を示す、<paramref name="buffer" /> 内のインデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="9721f-866">The zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="9721f-867">ストリームから読み取る最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="9721f-867">The maximum number of bytes to read from the stream.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-868">読み取り操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-868">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the read operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-869">読み取り操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-869">A user-defined object containing information about the read operation.</span></span> <span data-ttu-id="9721f-870">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-870">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-871">ストリームからデータを読み取り、指定した配列に格納する非同期読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-871">Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="9721f-872">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-872">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-873">暗号化、署名または暗号化および署名が有効になっている場合、読み取り操作は基になるストリームからデータを読み取ります、データの整合性をチェックし、暗号化を解除します。</span><span class="sxs-lookup"><span data-stu-id="9721f-873">If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it.</span></span> <span data-ttu-id="9721f-874">使用中のデータの暗号化や署名などのセキュリティ サービスなし、されていない場合、このメソッドは、基になるストリームの非同期読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-874">If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="9721f-875">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-875">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-876">操作が完了するまでにブロックするを使用して、<xref:System.Net.Security.NegotiateStream.Read%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-876">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="9721f-877">呼び出すことによって、非同期読み取り操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndRead%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-877">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method.</span></span> <span data-ttu-id="9721f-878">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-878">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-879">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-879">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-880"><xref:System.Net.Security.NegotiateStream>クラスは、複数の同時読み取り操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-880">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations.</span></span> <span data-ttu-id="9721f-881">他の操作が、同じストリームで既に実行中の読み取り中に、読み取り操作を開始しようとした場合、<xref:System.NotSupportedException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9721f-881">If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="9721f-882">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-882">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9721f-883">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-883">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-884">次のコード例では、非同期読み取り操作の開始を示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-884">The following code example demonstrates starting an asynchronous read operation.</span></span> <span data-ttu-id="9721f-885">このコード例が示されている例の一部、<xref:System.Net.Security.NegotiateStream>クラス。</span><span class="sxs-lookup"><span data-stu-id="9721f-885">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-886"><paramref name="buffer" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-886"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-887"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="9721f-887"><paramref name="offset" /> is less than 0.</span></span>  
  
<span data-ttu-id="9721f-888">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-888">\- or -</span></span> 
 <span data-ttu-id="9721f-889"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="9721f-889"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="9721f-890">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-890">\- or -</span></span> 
 <span data-ttu-id="9721f-891"><paramref name="offset" /> に <paramref name="count" /> を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="9721f-891"><paramref name="offset" /> plus <paramref name="count" /> is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9721f-892">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-892">The read operation failed.</span></span>  
  
<span data-ttu-id="9721f-893">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-893">\- or -</span></span> 
<span data-ttu-id="9721f-894">暗号化が使用されていますが、データを復号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="9721f-894">Encryption is in use, but the data could not be decrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-895">既に実行中の読み取り操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="9721f-895">There is already a read operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-896">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-896">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-897">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-897">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberSignature Language="F#" Value="override this.BeginWrite : byte[] * int * int * AsyncCallback * obj -&gt; IAsyncResult" Usage="negotiateStream.BeginWrite (buffer, offset, count, asyncCallback, asyncState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9721f-898">ストリームに書き込むバイトを提供する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="9721f-898">A <see cref="T:System.Byte" /> array that supplies the bytes to be written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9721f-899">ストリームに書き込むバイトの読み取りを開始する位置を示す、<paramref name="buffer" /> 内のインデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="9721f-899">The zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="9721f-900"><paramref name="buffer" /> から読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="9721f-900">An <see cref="T:System.Int32" /> value that specifies the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="9721f-901">書き込み操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="9721f-901">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the write operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="9721f-902">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-902">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="9721f-903">このオブジェクトは、操作の完了時に <paramref name="asyncCallback" /> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-903">This object is passed to the <paramref name="asyncCallback" /> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="9721f-904">指定したバッファーからストリームに <see cref="T:System.Byte" /> を書き込む非同期書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-904">Begins an asynchronous write operation that writes <see cref="T:System.Byte" />s from the specified buffer to the stream.</span></span></summary>
        <returns><span data-ttu-id="9721f-905">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-905">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-906">暗号化、署名または暗号化および署名が有効になっている場合このメソッド バッファーからデータを読み取ります、暗号化、署名、または暗号化し署名、および基になるストリームを使用して送信します。</span><span class="sxs-lookup"><span data-stu-id="9721f-906">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="9721f-907">使用中のデータの暗号化や署名などのセキュリティ サービスなし、されていない場合、このメソッドは、基になるストリームに非同期の書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="9721f-907">If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="9721f-908">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="9721f-908">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="9721f-909">操作が完了するまでにブロックするを使用して、<xref:System.Net.Security.NegotiateStream.Read%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-909">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="9721f-910">呼び出すことによって、非同期読み取り操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndWrite%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-910">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method.</span></span> <span data-ttu-id="9721f-911">通常、メソッドは、によって呼び出される、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="9721f-911">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="9721f-912">詳細については、非同期プログラミング モデルを使用して、次を参照してください[Calling Synchronous Methods Asynchronously。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="9721f-912">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="9721f-913"><xref:System.Net.Security.NegotiateStream>クラスが複数の同時書き込み操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-913">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="9721f-914">別の書き込み操作の同一のストリームで既に実行中に、書き込み操作を開始しようとした場合、<xref:System.NotSupportedException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9721f-914">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="9721f-915">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-915">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9721f-916">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-916">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-917">次のコード例では、非同期の書き込み操作の開始を示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-917">The following code example demonstrates beginning an asynchronous write operation.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 <span data-ttu-id="9721f-918">次のメソッドは、操作の完了時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-918">The following method is called when the operation completes.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-919"><paramref name="buffer" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-919"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-920"><paramref name="offset is less than 0" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-920"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="9721f-921">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-921">\- or -</span></span> 
 <span data-ttu-id="9721f-922"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="9721f-922"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="9721f-923">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-923">\- or -</span></span> 
 <span data-ttu-id="9721f-924"><paramref name="offset" /> に count を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="9721f-924"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9721f-925">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-925">The write operation failed.</span></span>  
  
<span data-ttu-id="9721f-926">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-926">\- or -</span></span> 
<span data-ttu-id="9721f-927">暗号化が使用されていますが、データを暗号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="9721f-927">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-928">既に実行中の書き込み操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="9721f-928">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-929">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-929">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-930">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-930">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanRead : bool" Usage="System.Net.Security.NegotiateStream.CanRead" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-931">基になるストリームが読み取り可能かどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-931">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is readable.</span></span></summary>
        <value><span data-ttu-id="9721f-932">認証が行われており、基になるストリームが読み取り可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-932"><see langword="true" /> if authentication has occurred and the underlying stream is readable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-933">認証が成功したが発生した場合、このプロパティは呼び出すことによって返される値を返します、<xref:System.IO.Stream.CanRead%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-933">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream.</span></span> <span data-ttu-id="9721f-934">インスタンスを作成するときに、基になるストリームが指定されて、<xref:System.Net.Security.NegotiateStream>クラス。</span><span class="sxs-lookup"><span data-stu-id="9721f-934">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-935">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-935">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanSeek : bool" Usage="System.Net.Security.NegotiateStream.CanSeek" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-936">基になるストリームがシークできるかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-936">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is seekable.</span></span></summary>
        <value><span data-ttu-id="9721f-937">このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-937">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-938">位置を設定しないで、<xref:System.Net.Security.NegotiateStream>オブジェクトまたはその基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-938">You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream.</span></span> <span data-ttu-id="9721f-939">インスタンスを作成するときに、基になるストリームが指定されて、<xref:System.Net.Security.NegotiateStream>クラス。</span><span class="sxs-lookup"><span data-stu-id="9721f-939">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-940">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-940">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanTimeout : bool" Usage="System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-941">基になるストリームがタイムアウトをサポートしているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-941">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream supports time-outs.</span></span></summary>
        <value><span data-ttu-id="9721f-942">基になるストリームがタイムアウトをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-942"><see langword="true" /> if the underlying stream supports time-outs; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-943">このプロパティは、呼び出しによって返される値を返します、<xref:System.IO.Stream.CanTimeout%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-943">This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="9721f-944">インスタンスを作成するときに、基になるストリームが指定されて、<xref:System.Net.Security.NegotiateStream>クラス。</span><span class="sxs-lookup"><span data-stu-id="9721f-944">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-945">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-945">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanWrite : bool" Usage="System.Net.Security.NegotiateStream.CanWrite" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-946">基になるストリームが書き込み可能かどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-946">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is writable.</span></span></summary>
        <value><span data-ttu-id="9721f-947">認証が行われており、基になるストリームが書き込み可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-947"><see langword="true" /> if authentication has occurred and the underlying stream is writable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-948">認証が成功したが発生した場合、このプロパティは呼び出すことによって返される値を返します、<xref:System.IO.Stream.CanWrite%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-948">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream.</span></span> <span data-ttu-id="9721f-949">インスタンスを作成するときに、基になるストリームが指定されて、<xref:System.Net.Security.NegotiateStream>クラス。</span><span class="sxs-lookup"><span data-stu-id="9721f-949">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-950">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-950">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="negotiateStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><span data-ttu-id="9721f-951">マネージド リソースとアンマネージド リソースの両方を解放する場合は <see langword="true" />。アンマネージド リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-951"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="9721f-952"><see cref="T:System.Net.Security.NegotiateStream" /> によって使用されているアンマネージド リソースを解放し、オプションでマネージド リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="9721f-952">Releases the unmanaged resources used by the <see cref="T:System.Net.Security.NegotiateStream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-953">このメソッドは、パブリック`Dispose()`メソッドと<xref:System.Object.Finalize%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-953">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="9721f-954">`Dispose()` 保護された起動`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`します。</span><span class="sxs-lookup"><span data-stu-id="9721f-954">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="9721f-955"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`に設定`false`します。</span><span class="sxs-lookup"><span data-stu-id="9721f-955"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="9721f-956">ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Net.Security.NegotiateStream>参照。</span><span class="sxs-lookup"><span data-stu-id="9721f-956">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references.</span></span> <span data-ttu-id="9721f-957">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="9721f-957">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><span data-ttu-id="9721f-958">
            <see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="9721f-958">
            <see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="9721f-959">オーバーライドするときに<see langword="Dispose(Boolean)" />の事前に呼び出したで以前破棄されたオブジェクトを参照しないように注意する<see langword="Dispose" />します。</span><span class="sxs-lookup"><span data-stu-id="9721f-959">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="9721f-960">実装する方法についての詳細は<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)します。</span><span class="sxs-lookup"><span data-stu-id="9721f-960">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
<span data-ttu-id="9721f-961">詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100))します。</span><span class="sxs-lookup"><span data-stu-id="9721f-961">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/ddae83kx(v=vs.100)).</span></span></para></block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsClient : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsClient : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9721f-962"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="9721f-962">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></param>
        <summary><span data-ttu-id="9721f-963"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> の呼び出しで開始した保留中の非同期のクライアント認証操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="9721f-963">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-964">操作が完了していない場合、このメソッドは、終了する前をブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-964">If the operation has not completed, this method blocks until it does.</span></span> <span data-ttu-id="9721f-965">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-965">When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-966">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-966">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-967">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-967">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-968">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-968">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="9721f-969">この操作を同期的に実行するには、いずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-969">To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-970"><paramref name="asyncResult" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-970"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-971"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="9721f-971"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-972">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-972">The authentication failed.</span></span> <span data-ttu-id="9721f-973">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-973">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-974">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-974">The authentication failed.</span></span> <span data-ttu-id="9721f-975">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-975">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-976">完了する保留中のクライアント認証がありません。</span><span class="sxs-lookup"><span data-stu-id="9721f-976">There is no pending client authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="abstract member EndAuthenticateAsServer : IAsyncResult -&gt; unit&#xA;override this.EndAuthenticateAsServer : IAsyncResult -&gt; unit" Usage="negotiateStream.EndAuthenticateAsServer asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9721f-977"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="9721f-977">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></param>
        <summary><span data-ttu-id="9721f-978"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> の呼び出しで開始した保留中の非同期のクライアント認証操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="9721f-978">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-979">操作が完了していない場合、このメソッドは、終了する前をブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-979">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="9721f-980">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスを使って、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-980">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="9721f-981">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>プロパティを相互認証が発生したかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="9721f-981">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="9721f-982">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-982">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="9721f-983">この場合、別の資格情報を使用して認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-983">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="9721f-984">この操作を同期的に実行するには、使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-984">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-985"><paramref name="asyncResult" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-985"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-986"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="9721f-986"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="9721f-987">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-987">The authentication failed.</span></span> <span data-ttu-id="9721f-988">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-988">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="9721f-989">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-989">The authentication failed.</span></span> <span data-ttu-id="9721f-990">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="9721f-990">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-991">完了する保留中の認証がありません。</span><span class="sxs-lookup"><span data-stu-id="9721f-991">There is no pending authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndRead : IAsyncResult -&gt; int" Usage="negotiateStream.EndRead asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9721f-992"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="9721f-992">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="9721f-993"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで開始された、非同期の読み取り操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="9721f-993">Ends an asynchronous read operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="9721f-994">基になるストリームから読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="9721f-994">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-995">操作が完了していない場合、このメソッドは、終了する前をブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-995">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="9721f-996">この操作を同期的に実行するには、使用、<xref:System.Net.Security.NegotiateStream.Read%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-996">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="9721f-997">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-997">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9721f-998">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-998">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-999">次のコード例では、読み取り操作の非同期の終了を示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-999">The following code example demonstrates ending an asynchronous read operation.</span></span> <span data-ttu-id="9721f-1000">操作を開始する例を参照してください<xref:System.Net.Security.NegotiateStream.BeginRead%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1000">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-1001"><paramref name="asyncResult" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-1001"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-1002"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで asyncResult が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="9721f-1002">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-1003">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1003">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9721f-1004">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-1004">The read operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="override this.EndWrite : IAsyncResult -&gt; unit" Usage="negotiateStream.EndWrite asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="9721f-1005"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="9721f-1005">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="9721f-1006"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで開始された、非同期の書き込み操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1006">Ends an asynchronous write operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1007">操作が完了していない場合、このメソッドは、終了する前をブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1007">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="9721f-1008">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1008">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9721f-1009">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1009">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="9721f-1010">この操作を同期的に実行するには、使用、<xref:System.Net.Security.NegotiateStream.Write%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1010">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1011">次のコード例では、非同期書き込み操作を完了するために呼び出されるメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1011">The following code example demonstrates a method that is called to complete the asynchronous write operation.</span></span> <span data-ttu-id="9721f-1012">操作を開始する例を参照してください<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1012">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-1013"><paramref name="asyncResult" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-1013"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-1014"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで asyncResult が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="9721f-1014">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-1015">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1015">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9721f-1016">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-1016">The write operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="negotiateStream.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="9721f-1017">バッファーに格納されたデータが基になるデバイスに書き込まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1017">Causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1018">このメソッドは<xref:System.IO.Stream.Flush%2A>基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-1018">This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1019">次のコード例では、ストリームのフラッシュを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1019">The following code example demonstrates flushing the stream.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="override this.FlushAsync : System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task" Usage="negotiateStream.FlushAsync cancellationToken" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberSignature Language="F#" Value="member this.ImpersonationLevel : System.Security.Principal.TokenImpersonationLevel" Usage="System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1020">サーバーでクライアントの資格情報を使用する方法を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1020">Gets a value that indicates how the server can use the client's credentials.</span></span></summary>
        <value><span data-ttu-id="9721f-1021"><see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="9721f-1021">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1022">このメソッドを呼び出す前に正常に認証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="9721f-1022">You must successfully authenticate before calling this method.</span></span> <span data-ttu-id="9721f-1023">クライアントは、のいずれかを呼び出すことによって認証を要求するときに、偽装レベルを指定、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1023">Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="9721f-1024">指定せずに認証する場合、 <xref:System.Security.Principal.TokenImpersonationLevel> 、<xref:System.Security.Principal.TokenImpersonationLevel.Identification>使用されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1024">If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1025">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1025">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-1026">認証に失敗したか、認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1026">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1027">認証が成功したかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1027">Gets a <see cref="T:System.Boolean" /> value that indicates whether authentication was successful.</span></span></summary>
        <value><span data-ttu-id="9721f-1028">認証が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1028"><see langword="true" /> if successful authentication occurred; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1029">クライアントが呼び出すことによって認証、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1029">Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="9721f-1030">サーバーを呼び出すことによって認証、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1030">Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1031">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1031">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEncrypted : bool" Usage="System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1032">この <see cref="T:System.Net.Security.NegotiateStream" /> がデータの暗号化を使用するかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1032">Gets a <see cref="T:System.Boolean" /> value that indicates whether this <see cref="T:System.Net.Security.NegotiateStream" /> uses data encryption.</span></span></summary>
        <value><span data-ttu-id="9721f-1033">ネットワーク上で送信する前にデータを暗号化し、データがリモート エンドポイントに到達したときに復号化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1033"><see langword="true" /> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1034">暗号化は、データのプライバシーを保護するのに役立ちます具体的には、これはことデータが転送中に、サード パーティによって解読できないことを確認するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1034">Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1035">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1035">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMutuallyAuthenticated : bool" Usage="System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1036">サーバーとクライアントの両方が認証されているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1036">Gets a <see cref="T:System.Boolean" /> value that indicates whether both the server and the client have been authenticated.</span></span></summary>
        <value><span data-ttu-id="9721f-1037">サーバーが認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1037"><see langword="true" /> if the server has been authenticated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1038">相互認証は、クライアントが、サーバー認証に対して資格情報を提供するときに、クライアントによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1038">Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication.</span></span> <span data-ttu-id="9721f-1039">既定では、クライアントは、相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1039">By default, clients request mutual authentication.</span></span>  
  
 <span data-ttu-id="9721f-1040">Negotiate プロトコルは、クライアントとサーバーでサポートされるセキュリティ プロトコルに応じて、NTLM または Kerberos のいずれかを選択します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1040">The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server.</span></span> <span data-ttu-id="9721f-1041">NTLM は、相互認証をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1041">NTLM does not support mutual authentication.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1042">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1042">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServer : bool" Usage="System.Net.Security.NegotiateStream.IsServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1043">この <see cref="T:System.Net.Security.NegotiateStream" /> が使用する接続のローカル側がサーバーとして認証されたかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1043">Gets a <see cref="T:System.Boolean" /> value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.NegotiateStream" /> was authenticated as the server.</span></span></summary>
        <value><span data-ttu-id="9721f-1044">ローカル エンドポイントが、認証される接続のサーバー側として正常に認証された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1044"><see langword="true" /> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1045">このプロパティが返されますかどうか、認証に失敗しましたまたは発生しなかった、`false`します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1045">If authentication failed or did not occur, this property returns `false`.</span></span>  
  
 <span data-ttu-id="9721f-1046">サーバーで、認証に呼び出し、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1046">To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1047">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1047">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSigned : bool" Usage="System.Net.Security.NegotiateStream.IsSigned" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1048">このストリームを使用して送信されるデータに署名するかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1048">Gets a <see cref="T:System.Boolean" /> value that indicates whether the data sent using this stream is signed.</span></span></summary>
        <value><span data-ttu-id="9721f-1049">データの送信前に署名する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1049"><see langword="true" /> if the data is signed before being transmitted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1050">データの署名は、データの整合性を保護するのに役立ちますつまり、受信者をデータが転送中に改ざんされているかどうかを判断することができます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1050">Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1051">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1051">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int64" Usage="System.Net.Security.NegotiateStream.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1052">基になるストリームの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1052">Gets the length of the underlying stream.</span></span></summary>
        <value><span data-ttu-id="9721f-1053">基になるストリームの長さを指定する <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1053">A <see cref="T:System.Int64" /> that specifies the length of the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1054">このプロパティは、呼び出しによって返される値を返します、<xref:System.IO.Stream.Length%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-1054">This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream.</span></span> <span data-ttu-id="9721f-1055">基になるストリームがシーク可能でない場合このプロパティは通常、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1055">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="9721f-1056">基になるストリームの実行時の型は、スローされる例外の実行時の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1056">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1057">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1057">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-1058">基になるストリームが <see cref="T:System.Net.Sockets.NetworkStream" /> の場合、このプロパティの値の取得はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1058">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int64 with get, set" Usage="System.Net.Security.NegotiateStream.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1059">基になるストリーム内の現在位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1059">Gets or sets the current position in the underlying stream.</span></span></summary>
        <value><span data-ttu-id="9721f-1060">基になるストリーム内の現在の位置を指定する <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1060">A <see cref="T:System.Int64" /> that specifies the current position in the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1061">このプロパティは、呼び出しによって返される値を返します、<xref:System.IO.Stream.Position%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-1061">This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream.</span></span> <span data-ttu-id="9721f-1062">基になるストリームがシーク可能でない場合このプロパティは通常、例外をスローします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1062">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="9721f-1063">基になるストリームの実行時の型は、スローされる例外の実行時の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1063">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-1064">このプロパティの設定は、サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1064">Setting this property is not supported.</span></span>  
  
<span data-ttu-id="9721f-1065">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-1065">\- or -</span></span> 
<span data-ttu-id="9721f-1066">基になるストリームが <see cref="T:System.Net.Sockets.NetworkStream" /> の場合、このプロパティの値の取得はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1066">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Read : byte[] * int * int -&gt; int" Usage="negotiateStream.Read (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9721f-1067">ストリームから読み取ったバイトを受け取る <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="9721f-1067">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9721f-1068">このストリームから読み取ったデータの格納を開始する位置を示す、<paramref name="buffer" /> 内のインデックス番号が 0 から始まる位置を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1068">A <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="9721f-1069">ストリームから読み取る最大バイト数を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1069">A <see cref="T:System.Int32" /> containing the maximum number of bytes to read from the stream.</span></span></param>
        <summary><span data-ttu-id="9721f-1070">このストリームからデータを読み取り、指定した配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1070">Reads data from this stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="9721f-1071">基になるストリームから読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="9721f-1071">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span> <span data-ttu-id="9721f-1072">読み取るデータがこれ以上存在しない場合は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1072">When there is no more data to be read, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1073">読み取る最大`count`現在からのバイト ストリームし、に保存`buffer`から始まる`offset`します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1073">The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.</span></span>  
  
 <span data-ttu-id="9721f-1074">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1074">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9721f-1075">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1075">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="9721f-1076">この操作を非同期的に実行するには使用、<xref:System.Net.Security.NegotiateStream.BeginRead%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1076">To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1077">次のコード例に示しますからの読み取り、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1077">The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9721f-1078">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-1078">The read operation failed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-1079">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1079">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-1080"><see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="9721f-1080">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> operation is already in progress.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.ReadTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1081">読み取り操作がブロックしてデータを待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1081">Gets or sets the amount of time a read operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="9721f-1082">読み取り操作が失敗するまでの経過時間を指定する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1082">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a read operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1083">このプロパティは、呼び出しによって返される値を返します、<xref:System.IO.Stream.ReadTimeout%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-1083">This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="9721f-1084">このプロパティを設定するときに、<xref:System.IO.Stream.ReadTimeout%2A>基になるストリームの値が指定された値に設定します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1084">When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.</span></span>  
  
 <span data-ttu-id="9721f-1085">基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>、<xref:System.Net.Security.NegotiateStream.ReadTimeout%2A>はミリ秒でありに設定されている<xref:System.Threading.Timeout.Infinite>既定では読み取ることの操作はタイムアウトしないようにします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1085">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1086">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1086">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RemoteIdentity : System.Security.Principal.IIdentity" Usage="System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1087">この認証されたストリームを共有するリモート側の ID に関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1087">Gets information about the identity of the remote party sharing this authenticated stream.</span></span></summary>
        <value><span data-ttu-id="9721f-1088">リモート エンドポイントの ID を示す <see cref="T:System.Security.Principal.IIdentity" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="9721f-1088">An <see cref="T:System.Security.Principal.IIdentity" /> object that describes the identity of the remote endpoint.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1089">クライアントによってアクセスされると、このプロパティを返します、<xref:System.Security.Principal.GenericIdentity>サーバーと使用される認証プロトコルのサービス プリンシパル名 (SPN) を格納しています。</span><span class="sxs-lookup"><span data-stu-id="9721f-1089">When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used.</span></span> <span data-ttu-id="9721f-1090">サーバーによってアクセスされると、このプロパティを返します、<xref:System.Security.Principal.WindowsIdentity>クライアントをについて説明します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1090">When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client.</span></span> <span data-ttu-id="9721f-1091">場合、<xref:System.Security.Principal.WindowsIdentity>が利用できない、クライアント情報が返されますのサーバーに、<xref:System.Security.Principal.GenericIdentity>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1091">If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1092">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1092">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-1093">認証に失敗したか、認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1093">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberSignature Language="F#" Value="override this.Seek : int64 * System.IO.SeekOrigin -&gt; int64" Usage="negotiateStream.Seek (offset, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="9721f-1094">この値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1094">This value is ignored.</span></span></param>
        <param name="origin"><span data-ttu-id="9721f-1095">この値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1095">This value is ignored.</span></span></param>
        <summary><span data-ttu-id="9721f-1096"><see cref="T:System.NotSupportedException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1096">Throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="9721f-1097">常に <see cref="T:System.NotSupportedException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1097">Always throws a <see cref="T:System.NotSupportedException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1098">このメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="9721f-1098">Do not call this method.</span></span> <span data-ttu-id="9721f-1099">関数は、継承されますでサポートされていない<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1099">It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-1100">シークは、<see cref="T:System.Net.Security.NegotiateStream" /> でサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1100">Seeking is not supported on <see cref="T:System.Net.Security.NegotiateStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberSignature Language="F#" Value="override this.SetLength : int64 -&gt; unit" Usage="negotiateStream.SetLength value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="9721f-1101">ストリームの長さを指定する <see cref="T:System.Int64" /> 値。</span><span class="sxs-lookup"><span data-stu-id="9721f-1101">An <see cref="T:System.Int64" /> value that specifies the length of the stream.</span></span></param>
        <summary><span data-ttu-id="9721f-1102">基になるストリームの長さを設定します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1102">Sets the length of the underlying stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberSignature Language="F#" Value="override this.Write : byte[] * int * int -&gt; unit" Usage="negotiateStream.Write (buffer, offset, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="9721f-1103">ストリームに書き込むバイトを提供する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="9721f-1103">A <see cref="T:System.Byte" /> array that supplies the bytes written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="9721f-1104">ストリームに書き込むバイトの読み取りを開始する位置を示す、<paramref name="buffer" /> 内のインデックス番号が 0 から始まる位置を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1104">An <see cref="T:System.Int32" /> containing the zero-based location in <paramref name="buffer" /> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="9721f-1105"><paramref name="buffer" /> から読み取るバイト数を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1105">A <see cref="T:System.Int32" /> containing the number of bytes to read from <paramref name="buffer" />.</span></span></param>
        <summary><span data-ttu-id="9721f-1106">指定したバッファーとオフセットを使用して、基になるストリームに指定した <see cref="T:System.Byte" /> 数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1106">Write the specified number of <see cref="T:System.Byte" />s to the underlying stream using the specified buffer and offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1107">暗号化、署名または暗号化および署名が有効になっている場合このメソッド バッファーからデータを読み取ります、暗号化、署名、または暗号化し署名、および基になるストリームを使用して送信します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1107">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="9721f-1108">このメソッドを呼び出す場合、使用中のデータの暗号化や署名などのセキュリティのサービスなし、<xref:System.IO.Stream.Write%2A>基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-1108">If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.</span></span>  
  
 <span data-ttu-id="9721f-1109">このメソッドは、書き込み操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1109">This method blocks while the write operation completes.</span></span> <span data-ttu-id="9721f-1110">使用して、操作が完了するまでのブロックを防ぐため、<xref:System.Net.Security.NegotiateStream.Write%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1110">To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
 <span data-ttu-id="9721f-1111">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1111">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="9721f-1112">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="9721f-1112">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="9721f-1113"><xref:System.Net.Security.NegotiateStream>クラスが複数の同時書き込み操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1113">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="9721f-1114">別の書き込み操作の同一のストリームで既に実行中に、書き込み操作を開始しようとした場合、<xref:System.NotSupportedException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="9721f-1114">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1115">次のコード例に示しますへの書き込み、<xref:System.Net.Security.NegotiateStream>します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1115">The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="9721f-1116"><paramref name="buffer" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="9721f-1116"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="9721f-1117"><paramref name="offset is less than 0" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1117"><paramref name="offset is less than 0" />.</span></span>  
  
<span data-ttu-id="9721f-1118">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-1118">\- or -</span></span> 
 <span data-ttu-id="9721f-1119"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="9721f-1119"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
<span data-ttu-id="9721f-1120">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-1120">\- or -</span></span> 
 <span data-ttu-id="9721f-1121"><paramref name="offset" /> に count を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="9721f-1121"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="9721f-1122">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="9721f-1122">The write operation failed.</span></span>  
  
<span data-ttu-id="9721f-1123">\- または</span><span class="sxs-lookup"><span data-stu-id="9721f-1123">\- or -</span></span> 
<span data-ttu-id="9721f-1124">暗号化が使用されていますが、データを暗号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="9721f-1124">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="9721f-1125">既に実行中の書き込み操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1125">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="9721f-1126">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="9721f-1126">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="9721f-1127">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="9721f-1127">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.WriteTimeout : int with get, set" Usage="System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="9721f-1128">書き込み操作がブロックしてデータを待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1128">Gets or sets the amount of time a write operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="9721f-1129">書き込み操作が失敗するまでの経過時間を指定する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="9721f-1129">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a write operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="9721f-1130">このプロパティは、呼び出しによって返される値を返します、<xref:System.IO.Stream.WriteTimeout%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="9721f-1130">This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="9721f-1131">設定操作で指定された値の設定、<xref:System.IO.Stream.WriteTimeout%2A>基になるストリームの値。</span><span class="sxs-lookup"><span data-stu-id="9721f-1131">For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.</span></span>  
  
 <span data-ttu-id="9721f-1132">基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>、<xref:System.Net.Security.NegotiateStream.WriteTimeout%2A>はミリ秒でありに設定されている<xref:System.Threading.Timeout.Infinite>既定では書き込み操作はタイムアウトしないようにします。</span><span class="sxs-lookup"><span data-stu-id="9721f-1132">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="9721f-1133">次のコード例では、このプロパティの値を表示するを示します。</span><span class="sxs-lookup"><span data-stu-id="9721f-1133">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>