<Type Name="NegotiateStream" FullName="System.Net.Security.NegotiateStream">
  <TypeSignature Language="C#" Value="public class NegotiateStream : System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NegotiateStream extends System.Net.Security.AuthenticatedStream" />
  <TypeSignature Language="DocId" Value="T:System.Net.Security.NegotiateStream" />
  <TypeSignature Language="VB.NET" Value="Public Class NegotiateStream&#xA;Inherits AuthenticatedStream" />
  <TypeSignature Language="C++ CLI" Value="public ref class NegotiateStream : System::Net::Security::AuthenticatedStream" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Security</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Net.Security.AuthenticatedStream</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="19558-101">クライアント サーバー通信で Negotiate セキュリティ プロトコルを使用してクライアントの認証と (オプションで) サーバーの認証を行うストリームを提供します。</span><span class="sxs-lookup"><span data-stu-id="19558-101">Provides a stream that uses the Negotiate security protocol to authenticate the client, and optionally the server, in client-server communication.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-102">使用して、<xref:System.Net.Security.NegotiateStream>認証用、および情報をセキュリティで保護するためにクラスが、クライアントとサーバー間で送信します。</span><span class="sxs-lookup"><span data-stu-id="19558-102">Use the <xref:System.Net.Security.NegotiateStream> class for authentication and to help secure information transmitted between a client and a server.</span></span> <span data-ttu-id="19558-103">使用して<xref:System.Net.Security.NegotiateStream>次を行うことができます。</span><span class="sxs-lookup"><span data-stu-id="19558-103">Using <xref:System.Net.Security.NegotiateStream>, you can do the following.</span></span>  
  
-   <span data-ttu-id="19558-104">権限の借用または委任用のサーバーにクライアントの資格情報を送信します。</span><span class="sxs-lookup"><span data-stu-id="19558-104">Send the client's credentials to the server for Impersonation or Delegation.</span></span>  
  
-   <span data-ttu-id="19558-105">サーバー認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-105">Request server authentication.</span></span>  
  
-   <span data-ttu-id="19558-106">暗号化または転送する前にデータに署名します。</span><span class="sxs-lookup"><span data-stu-id="19558-106">Encrypt and/or sign data before transmitting it.</span></span>  
  
 <span data-ttu-id="19558-107">認証は、情報を送信する前に実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-107">Authentication must be performed before transmitting information.</span></span> <span data-ttu-id="19558-108">クライアントが、同期を使用して認証を要求<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドで、認証が完了するまでブロック、または非同期<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>メソッドで、認証が完了するを待っているときにブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-108">Clients request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods, which block until the authentication completes, or the asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods, which do not block while waiting for the authentication to complete.</span></span> <span data-ttu-id="19558-109">サーバーは、同期を使用して認証を要求<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>または非同期<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-109">Servers request authentication using the synchronous <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span> <span data-ttu-id="19558-110">クライアント、および必要に応じて、サーバーは、Negotiate セキュリティ プロトコルを使用して認証されます。</span><span class="sxs-lookup"><span data-stu-id="19558-110">The client, and optionally the server, is authenticated using the Negotiate security protocol.</span></span> <span data-ttu-id="19558-111">Windows 95/98 システムでは、Windows NT LAN Manager (NTLM) は、認証に使用されるプロトコルです。</span><span class="sxs-lookup"><span data-stu-id="19558-111">On Windows 95/98 systems, Windows NT LAN Manager (NTLM) is the protocol used for authentication.</span></span> <span data-ttu-id="19558-112">その他のプラットフォームでは、Kerberos プロトコルが使用認証の場合、クライアントとサーバーの両方をサポートします。それ以外の場合、NTLM が使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-112">On other platforms the Kerberos protocol is used for authentication if both client and server support it; otherwise NTLM is used.</span></span> <span data-ttu-id="19558-113">これらのプロトコルの詳細な説明についてには、msdn、プラットフォーム SDK ドキュメントを参照して msdn.microsoft.com/library/ にします。</span><span class="sxs-lookup"><span data-stu-id="19558-113">For detailed descriptions of these protocols, see the Platform SDK documentation on MSDN, at msdn.microsoft.com/library/.</span></span> <span data-ttu-id="19558-114"><xref:System.Net.Security.NegotiateStream>クラスはセキュリティ サポート プロバイダー インターフェイス (SSPI) を使用して認証を実行します。</span><span class="sxs-lookup"><span data-stu-id="19558-114">The <xref:System.Net.Security.NegotiateStream> class performs the authentication using the Security Support Provider Interface (SSPI).</span></span>  
  
 <span data-ttu-id="19558-115">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスで使用される、<xref:System.Net.Security.NegotiateStream>転送中に、データを保護するためにします。</span><span class="sxs-lookup"><span data-stu-id="19558-115">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services will be used by the <xref:System.Net.Security.NegotiateStream> to help secure your data during transmission.</span></span> <span data-ttu-id="19558-116">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-116">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span> <span data-ttu-id="19558-117">リモート クライアントまたはサーバーの使用に関する情報を取得することができます、<xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A>プロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-117">You can get information about the remote client or server using the <xref:System.Net.Security.NegotiateStream.RemoteIdentity%2A> property.</span></span>  
  
 <span data-ttu-id="19558-118">認証が失敗した場合が表示されます、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-118">If the authentication fails, you will receive an <xref:System.Security.Authentication.AuthenticationException> or a <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-119">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-119">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="19558-120">同期を使用してデータを送信する<xref:System.Net.Security.NegotiateStream.Write%2A>または非同期<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-120">You send data using the synchronous <xref:System.Net.Security.NegotiateStream.Write%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginWrite%2A> methods.</span></span> <span data-ttu-id="19558-121">同期を使用してデータを受信する<xref:System.Net.Security.NegotiateStream.Read%2A>または非同期<xref:System.Net.Security.NegotiateStream.BeginRead%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-121">You receive data using the synchronous <xref:System.Net.Security.NegotiateStream.Read%2A> or asynchronous <xref:System.Net.Security.NegotiateStream.BeginRead%2A> methods.</span></span> <span data-ttu-id="19558-122">セキュリティ サービスの暗号化や署名が有効になっているなど、これらが自動的に適用してデータに、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-122">If security services such as encryption or signing are enabled, these are automatically applied to your data by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-123"><xref:System.Net.Security.NegotiateStream>を作成するときに指定したストリームを使用してデータを転送、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-123">The <xref:System.Net.Security.NegotiateStream> transmits data using a stream that you supply when creating the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-124">指定するオプションがあるこの基になるストリームを指定するときに終了するかどうか、<xref:System.Net.Security.NegotiateStream>も、基になるストリームを閉じます。</span><span class="sxs-lookup"><span data-stu-id="19558-124">When you supply this underlying stream, you have the option to specify whether closing the <xref:System.Net.Security.NegotiateStream> also closes the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-125">次のコード例に示しますを使用するクライアント/サーバー接続のクライアント側、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-125">The following code example demonstrates the client side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-126">クライアントは認証し、サーバーにメッセージを非同期的に送信します。</span><span class="sxs-lookup"><span data-stu-id="19558-126">The client authenticates and sends a message to the server asynchronously.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#0)]
 [!code-csharp[NclNegoAsyncClient#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#0)]  
  
 <span data-ttu-id="19558-127">次のコード例に示しますを使用するクライアント/サーバー接続のサーバー側、<xref:System.Net.Security.NegotiateStream>をクライアントを認証し、クライアントによって送信されたメッセージを確認します。</span><span class="sxs-lookup"><span data-stu-id="19558-127">The following code example demonstrates the server side of a client-server connection that uses the <xref:System.Net.Security.NegotiateStream> to authenticate the client and read a message sent by the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#0](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#0)]
 [!code-csharp[NclNegoAsyncServer#0](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="19558-128"><see cref="T:System.Net.Security.NegotiateStream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="19558-128">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-129">防ぐために、<xref:System.Net.Security.NegotiateStream>から指定したストリームを閉じると、使用して、<xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29>コンス トラクターです。</span><span class="sxs-lookup"><span data-stu-id="19558-129">To prevent the <xref:System.Net.Security.NegotiateStream> from closing the stream that you supply, use the <xref:System.Net.Security.NegotiateStream.%23ctor%28System.IO.Stream%2CSystem.Boolean%29> constructor.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="19558-130"><see cref="T:System.Net.Security.NegotiateStream" /> がデータの送受信に使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-130">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <summary><span data-ttu-id="19558-131"><see cref="T:System.Net.Security.NegotiateStream" /> を指定して <see cref="T:System.IO.Stream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="19558-131">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="19558-132">次のコード例では、このコンス トラクターを呼び出すことを示します。</span><span class="sxs-lookup"><span data-stu-id="19558-132">The following code example demonstrates calling this constructor.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#3)]
 [!code-csharp[NclNegoSyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NegotiateStream (System.IO.Stream innerStream, bool leaveInnerStreamOpen);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream innerStream, bool leaveInnerStreamOpen) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.#ctor(System.IO.Stream,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (innerStream As Stream, leaveInnerStreamOpen As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NegotiateStream(System::IO::Stream ^ innerStream, bool leaveInnerStreamOpen);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="innerStream" Type="System.IO.Stream" />
        <Parameter Name="leaveInnerStreamOpen" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="innerStream"><span data-ttu-id="19558-133"><see cref="T:System.Net.Security.NegotiateStream" /> がデータの送受信に使用する <see cref="T:System.IO.Stream" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-133">A <see cref="T:System.IO.Stream" /> object used by the <see cref="T:System.Net.Security.NegotiateStream" /> for sending and receiving data.</span></span></param>
        <param name="leaveInnerStreamOpen">
          <span data-ttu-id="19558-134">この <see cref="T:System.Net.Security.NegotiateStream" /> を閉じても、<c>innerstream</c> が影響を受けないことを示す場合は <see langword="true" />。この <see cref="T:System.Net.Security.NegotiateStream" /> を閉じると、<c>innerStream</c> も閉じられることを示す場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-134"><see langword="true" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> has no effect on <c>innerstream</c>; <see langword="false" /> to indicate that closing this <see cref="T:System.Net.Security.NegotiateStream" /> also closes <c>innerStream</c>.</span></span></param>
        <summary><span data-ttu-id="19558-135">指定した <see cref="T:System.IO.Stream" /> とストリームを閉じる動作を使用して、<see cref="T:System.Net.Security.NegotiateStream" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="19558-135">Initializes a new instance of the <see cref="T:System.Net.Security.NegotiateStream" /> class using the specified <see cref="T:System.IO.Stream" /> and stream closure behavior.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-136">指定すると`true`の`leaveStreamOpen`パラメーター、閉じる、<xref:System.Net.Security.NegotiateStream>に影響を与えません、`innerStream`ストリーム; 明示的に閉じる必要があります`innerStream`が不要になったときにします。</span><span class="sxs-lookup"><span data-stu-id="19558-136">When you specify `true` for the `leaveStreamOpen` parameter, closing the <xref:System.Net.Security.NegotiateStream> has no effect on the `innerStream` stream; you must explicitly close `innerStream` when you no longer need it.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-137">次のコード例では、このコンス トラクターを呼び出すことを示します。</span><span class="sxs-lookup"><span data-stu-id="19558-137">The following code example demonstrates calling this constructor.</span></span> <span data-ttu-id="19558-138">このコード例に示されている例の一部である、<xref:System.Net.Security.NegotiateStream>クラスです。</span><span class="sxs-lookup"><span data-stu-id="19558-138">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#1)]
 [!code-csharp[NclNegoAsyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-139"><paramref name="innerStream" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-139"><paramref name="innerStream" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-140">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-140">\- or -</span></span>  
  
 <span data-ttu-id="19558-141"><paramref name="innerStream" /> と <see cref="F:System.IO.Stream.Null" /> が等価です。</span><span class="sxs-lookup"><span data-stu-id="19558-141"><paramref name="innerStream" /> is equal to <see cref="F:System.IO.Stream.Null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="19558-142">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-142">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19558-143">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-143">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-144">認証に使用して、クライアントの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-144">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-145">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-145">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-146">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、および相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-146">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="19558-147"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用する SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="19558-147">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-148">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-148">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-149">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-149">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-150">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-150">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-151">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-151">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-152">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-152">The authentication failed.</span></span> <span data-ttu-id="19558-153">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-153">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-154">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-154">The authentication failed.</span></span> <span data-ttu-id="19558-155">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-155">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-156">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-156">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-157">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-157">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-158">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-158">\- or -</span></span>  
  
 <span data-ttu-id="19558-159">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-159">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-160">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-160">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-161">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-161">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-162"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-162">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-163">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-163">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-164">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-164">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="19558-165">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-165">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-166">認証プロセスでは、指定したクライアントの資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-166">The authentication process uses the specified client credential.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-167">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、および相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-167">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="19558-168"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用する SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="19558-168">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-169">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-169">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-170">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-170">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-171">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-171">The authentication failed.</span></span> <span data-ttu-id="19558-172">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-172">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-173">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-173">The authentication failed.</span></span> <span data-ttu-id="19558-174">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-174">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-175">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-175">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-176">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-176">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-177">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-177">\- or -</span></span>  
  
 <span data-ttu-id="19558-178">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-178">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-179">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-179">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-180"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-180"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-181">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-181">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-182"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-182">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-183">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-183">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="19558-184">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="19558-184">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-185">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-185">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="19558-186">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-186">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-187">認証プロセスでは、指定したクライアントの資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-187">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-188">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、および相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-188">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="19558-189"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用する SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="19558-189">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-190"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>でこのメソッドに渡される拡張保護の使用、`binding`からのアプリケーションでパラメーターを取得するよう<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられた<xref:System.Net.Security.SslStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-190">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="19558-191">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-191">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-192">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-192">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-193"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-193"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-194">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-194">\- or -</span></span>  
  
 <span data-ttu-id="19558-195"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-195"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-196">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-196">The authentication failed.</span></span> <span data-ttu-id="19558-197">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-197">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-198">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-198">The authentication failed.</span></span> <span data-ttu-id="19558-199">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-199">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-200">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-200">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-201">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-201">\- or -</span></span>  
  
 <span data-ttu-id="19558-202">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-202">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-203">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-203">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-204">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-204">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-205">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-205">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-206">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-206">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-207">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-207">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="19558-208">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-208">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-209">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-209">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-210">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-210">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-211">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-211">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-212">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-212">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-213">成功した認証とは限りませんを要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-213">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-214">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-214">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-215">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-215">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-216">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-216">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-217"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="19558-217"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-218"><paramref name="targetName" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="19558-218"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-219">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-219">The authentication failed.</span></span> <span data-ttu-id="19558-220">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-220">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-221">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-221">The authentication failed.</span></span> <span data-ttu-id="19558-222">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-222">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-223">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-223">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-224">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-224">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-225">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-225">\- or -</span></span>  
  
 <span data-ttu-id="19558-226">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-226">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-227">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-227">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-228">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-228">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-229"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-229">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsClient (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-230">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-230">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="19558-231">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="19558-231">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-232">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-232">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-233">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-233">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="19558-234">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-234">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-235">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-235">Called by clients to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-236">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-236">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-237">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-237">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-238">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-238">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-239">成功した認証とは限りませんを要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-239">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-240">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-240">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-241"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>でこのメソッドに渡される拡張保護の使用、`binding`からのアプリケーションでパラメーターを取得するよう<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられた<xref:System.Net.Security.SslStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-241">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="19558-242">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-242">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-243">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-243">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-244"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-244"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-245">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-245">\- or -</span></span>  
  
 <span data-ttu-id="19558-246"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-246"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-247"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="19558-247"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-248">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-248">The authentication failed.</span></span> <span data-ttu-id="19558-249">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-249">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-250">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-250">The authentication failed.</span></span> <span data-ttu-id="19558-251">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-251">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-252">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-252">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-253">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-253">\- or -</span></span>  
  
 <span data-ttu-id="19558-254">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-254">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-255">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-255">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-256">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-256">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsClientAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="19558-257">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-257">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19558-258">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-258">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="19558-259"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-259">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-260">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-260">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-261">認証に使用して、クライアントの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-261">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-262">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-262">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-263">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、および相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-263">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="19558-264"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用する SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="19558-264">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-265">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-265">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-266">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-266">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-267">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-267">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-268">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-268">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-269">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-269">The authentication failed.</span></span> <span data-ttu-id="19558-270">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-270">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-271">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-271">The authentication failed.</span></span> <span data-ttu-id="19558-272">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-272">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-273">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-273">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-274">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-274">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-275">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-275">\- or -</span></span>  
  
 <span data-ttu-id="19558-276">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-276">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-277">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-277">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-278">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-278">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-279"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-279">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-280">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-280">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-281">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-281">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="19558-282">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-282">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="19558-283">認証プロセスでは、指定したクライアントの資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-283">The authentication process uses the specified client credential.</span></span></summary>
        <returns><span data-ttu-id="19558-284"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-284">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-285">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-285">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-286">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、および相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-286">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="19558-287"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用する SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="19558-287">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-288">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-288">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-289">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-289">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-290">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-290">The authentication failed.</span></span> <span data-ttu-id="19558-291">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-291">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-292">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-292">The authentication failed.</span></span> <span data-ttu-id="19558-293">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-293">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-294">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-294">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-295">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-295">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-296">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-296">\- or -</span></span>  
  
 <span data-ttu-id="19558-297">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-297">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-298">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-298">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-299"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-299"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-300">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-300">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-301"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-301">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-302">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-302">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="19558-303">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="19558-303">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-304">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-304">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <summary><span data-ttu-id="19558-305">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-305">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="19558-306">認証プロセスでは、指定したクライアントの資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-306">The authentication process uses the specified client credential and the channel binding.</span></span></summary>
        <returns><span data-ttu-id="19558-307"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-307">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-308">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-308">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-309">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>、および相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-309">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>, and mutual authentication is requested.</span></span> <span data-ttu-id="19558-310"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用する SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="19558-310">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-311"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>でこのメソッドに渡される拡張保護の使用、`binding`からのアプリケーションでパラメーターを取得するよう<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられた<xref:System.Net.Security.SslStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-311">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="19558-312">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-312">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-313">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-313">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-314"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-314"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-315">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-315">\- or -</span></span>  
  
 <span data-ttu-id="19558-316"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-316"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-317">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-317">The authentication failed.</span></span> <span data-ttu-id="19558-318">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-318">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-319">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-319">The authentication failed.</span></span> <span data-ttu-id="19558-320">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-320">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-321">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-321">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-322">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-322">\- or -</span></span>  
  
 <span data-ttu-id="19558-323">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-323">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-324">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-324">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-325">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-325">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-326">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-326">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-327">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-327">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-328">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-328">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="19558-329">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-329">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-330">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-330">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="19558-331">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-331">The authentication process uses the specified credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="19558-332"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-332">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-333">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-333">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-334">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-334">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-335">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-335">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-336">成功した認証とは限りませんを要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-336">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-337">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-337">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-338">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-338">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-339">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-339">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-340"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="19558-340"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-341"><paramref name="targetName" /> が null です。</span><span class="sxs-lookup"><span data-stu-id="19558-341"><paramref name="targetName" /> is null.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-342">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-342">The authentication failed.</span></span> <span data-ttu-id="19558-343">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-343">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-344">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-344">The authentication failed.</span></span> <span data-ttu-id="19558-345">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-345">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-346">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-346">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-347">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-347">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-348">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-348">\- or -</span></span>  
  
 <span data-ttu-id="19558-349">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-349">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-350">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-350">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-351">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-351">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-352"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-352">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsClientAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsClientAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsClientAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsClientAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsClientAsync (credential As NetworkCredential, binding As ChannelBinding, targetName As String, requiredProtectionLevel As ProtectionLevel, allowedImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsClientAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-353">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-353">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="19558-354">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="19558-354">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-355">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-355">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-356">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-356">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="19558-357">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-357">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-358">クライアントによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-358">Called by clients to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="19558-359">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-359">The authentication process uses the specified credential, authentication options, and channel binding.</span></span></summary>
        <returns><span data-ttu-id="19558-360"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-360">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-361">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-361">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-362">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-362">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-363">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-363">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-364">成功した認証とは限りませんを要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-364">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-365">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-365">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-366"><xref:System.Security.Authentication.ExtendedProtection.ChannelBinding>でこのメソッドに渡される拡張保護の使用、`binding`からのアプリケーションでパラメーターを取得するよう<xref:System.Net.Security.SslStream.TransportContext%2A>プロパティに関連付けられた<xref:System.Net.Security.SslStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-366">The <xref:System.Security.Authentication.ExtendedProtection.ChannelBinding> used for extended protection that is passed to this method in the `binding` parameter would be retrieved by an application from <xref:System.Net.Security.SslStream.TransportContext%2A> property on the associated <xref:System.Net.Security.SslStream>.</span></span>  
  
 <span data-ttu-id="19558-367">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-367">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-368">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-368">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-369"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-369"><paramref name="targetName" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-370">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-370">\- or -</span></span>  
  
 <span data-ttu-id="19558-371"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-371"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-372"><paramref name="allowedImpersonationLevel" /> は有効な値ではありません。</span><span class="sxs-lookup"><span data-stu-id="19558-372"><paramref name="allowedImpersonationLevel" /> is not a valid value.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-373">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-373">The authentication failed.</span></span> <span data-ttu-id="19558-374">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-374">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-375">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-375">The authentication failed.</span></span> <span data-ttu-id="19558-376">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-376">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-377">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-377">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-378">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-378">\- or -</span></span>  
  
 <span data-ttu-id="19558-379">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-379">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-380">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-380">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-381">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-381">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="19558-382">クライアント サーバー接続の認証のサーバー側を処理します。</span><span class="sxs-lookup"><span data-stu-id="19558-382">Handles the server side of an authentication for a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-383">これらのメソッドは、実行中は、認証をブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-383">These methods block while the authentication is in progress.</span></span> <span data-ttu-id="19558-384">認証を完了を待っている間にブロックからアプリケーションを防ぐためを使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-384">To prevent the application from blocking while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19558-385">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-385">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-386">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-386">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-387">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-387">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-388">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="19558-388">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="19558-389">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-389">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-390">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-390">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-391">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-391">This method blocks until the operation completes.</span></span> <span data-ttu-id="19558-392">操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-392">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-393">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-393">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-394">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-394">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-395">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-395">The authentication failed.</span></span> <span data-ttu-id="19558-396">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-396">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-397">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-397">The authentication failed.</span></span> <span data-ttu-id="19558-398">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-398">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-399">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-399">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-400">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-400">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-401">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-401">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-402"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-402">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (policy As ExtendedProtectionPolicy)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="19558-403">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="19558-403">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="19558-404">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-404">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-405">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-405">The authentication process uses the specified extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-406">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-406">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-407">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-407">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-408">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="19558-408">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="19558-409">場合、`policy`パラメーターは`null`、拡張保護ポリシーが使用されているし、 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 'éý'<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>です。</span><span class="sxs-lookup"><span data-stu-id="19558-409">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="19558-410">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-410">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-411">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-411">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-412">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-412">This method blocks until the operation completes.</span></span> <span data-ttu-id="19558-413">操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-413">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-414">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-414">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-415">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-415">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-416"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="19558-416">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-417">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-417">The authentication failed.</span></span> <span data-ttu-id="19558-418">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-418">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-419">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-419">The authentication failed.</span></span> <span data-ttu-id="19558-420">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-420">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-421">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-421">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-422">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-422">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="19558-423">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="19558-423">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-424">サーバーの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-424">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-425">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-425">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="19558-426">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-426">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-427">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-427">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-428">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-428">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-429">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-429">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-430">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-430">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-431">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-431">This method blocks until the operation completes.</span></span> <span data-ttu-id="19558-432">操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-432">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-433">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-433">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-434">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-434">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-435"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-435"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-436"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-436"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-437">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-437">The authentication failed.</span></span> <span data-ttu-id="19558-438">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-438">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-439">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-439">The authentication failed.</span></span> <span data-ttu-id="19558-440">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-440">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-441">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-441">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-442">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-442">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-443">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-443">\- or -</span></span>  
  
 <span data-ttu-id="19558-444">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-444">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="19558-445">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-445">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-446">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-446">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-447">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-447">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-448"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-448">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void AuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AuthenticateAsServer (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-449">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-449">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="19558-450">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="19558-450">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-451">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-451">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="19558-452">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-452">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-453">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-453">Called by servers to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-454">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-454">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-455">場合、`policy`パラメーターは`null`、拡張保護ポリシーが使用されているし、 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 'éý'<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>です。</span><span class="sxs-lookup"><span data-stu-id="19558-455">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="19558-456">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-456">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-457">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-457">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-458">このメソッドは、操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-458">This method blocks until the operation completes.</span></span> <span data-ttu-id="19558-459">操作が完了するまでブロックを防ぐためには、いずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-459">To prevent blocking until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-460">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-460">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-461">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-461">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-462"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="19558-462">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-463"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-463"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-464"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-464"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-465">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-465">The authentication failed.</span></span> <span data-ttu-id="19558-466">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-466">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-467">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-467">The authentication failed.</span></span> <span data-ttu-id="19558-468">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-468">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-469">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-469">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-470">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-470">\- or -</span></span>  
  
 <span data-ttu-id="19558-471">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-471">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="19558-472">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-472">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-473">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-473">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-474">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-474">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="19558-475">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="19558-475">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="AuthenticateAsServerAsync">
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="19558-476">クライアントとサーバー間の接続のサーバー側の認証を非同期操作として処理します。</span><span class="sxs-lookup"><span data-stu-id="19558-476">Handles the server side of an authentication for a client-server connection as an asynchronous operation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync () As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19558-477">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-477">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span></summary>
        <returns><span data-ttu-id="19558-478"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-478">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-479">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-479">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-480">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-480">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-481">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-481">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-482">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="19558-482">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="19558-483">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-483">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-484">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-484">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-485">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-485">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-486">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-486">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-487">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-487">The authentication failed.</span></span> <span data-ttu-id="19558-488">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-488">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-489">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-489">The authentication failed.</span></span> <span data-ttu-id="19558-490">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-490">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-491">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-491">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-492">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-492">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-493">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-493">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-494"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-494">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (policy As ExtendedProtectionPolicy) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="19558-495">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="19558-495">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <summary><span data-ttu-id="19558-496">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-496">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="19558-497">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-497">The authentication process uses the specified extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="19558-498"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-498">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-499">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-499">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-500">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-500">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-501">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-501">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-502">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="19558-502">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="19558-503">場合、`policy`パラメーターは`null`、拡張保護ポリシーが使用されているし、 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 'éý'<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>です。</span><span class="sxs-lookup"><span data-stu-id="19558-503">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="19558-504">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-504">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-505">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-505">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-506">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-506">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-507">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-507">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-508"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="19558-508">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-509">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-509">The authentication failed.</span></span> <span data-ttu-id="19558-510">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-510">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-511">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-511">The authentication failed.</span></span> <span data-ttu-id="19558-512">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-512">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-513">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-513">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-514">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-514">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="19558-515">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="19558-515">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-516">サーバーの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-516">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the server.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-517">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-517">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="19558-518">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-518">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-519">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-519">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="19558-520">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-520">The authentication process uses the specified server credentials and authentication options.</span></span></summary>
        <returns><span data-ttu-id="19558-521"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-521">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-522">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-522">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-523">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-523">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-524">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-524">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-525">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-525">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-526">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-526">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-527"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-527"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-528"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-528"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-529">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-529">The authentication failed.</span></span> <span data-ttu-id="19558-530">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-530">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-531">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-531">The authentication failed.</span></span> <span data-ttu-id="19558-532">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-532">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-533">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-533">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-534">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-534">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-535">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-535">\- or -</span></span>  
  
 <span data-ttu-id="19558-536">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-536">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="19558-537">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-537">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-538">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-538">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-539">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-539">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-540"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-540">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="AuthenticateAsServerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AuthenticateAsServerAsync (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AuthenticateAsServerAsync(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.AuthenticateAsServerAsync(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AuthenticateAsServerAsync (credential As NetworkCredential, policy As ExtendedProtectionPolicy, requiredProtectionLevel As ProtectionLevel, requiredImpersonationLevel As TokenImpersonationLevel) As Task" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task ^ AuthenticateAsServerAsync(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-541">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-541">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="19558-542">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="19558-542">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-543">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-543">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="19558-544">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-544">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <summary><span data-ttu-id="19558-545">サーバーによって呼び出され、クライアントとサーバー間の接続で非同期操作としてクライアントと (オプションで) サーバーを認証します。</span><span class="sxs-lookup"><span data-stu-id="19558-545">Called by servers to authenticate the client, and optionally the server, in a client-server connection as an asynchronous operation.</span></span> <span data-ttu-id="19558-546">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-546">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span></summary>
        <returns><span data-ttu-id="19558-547"><see cref="T:System.Threading.Tasks.Task" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-547">Returns <see cref="T:System.Threading.Tasks.Task" /></span></span>  
  
 <span data-ttu-id="19558-548">非同期操作を表すタスク オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-548">The task object representing the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-549">場合、`policy`パラメーターは`null`、拡張保護ポリシーが使用されているし、 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 'éý'<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>です。</span><span class="sxs-lookup"><span data-stu-id="19558-549">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="19558-550">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-550">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-551">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-551">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-552">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-552">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-553">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-553">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-554"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="19558-554">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-555"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-555"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-556"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-556"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-557">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-557">The authentication failed.</span></span> <span data-ttu-id="19558-558">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-558">You can use this object to try to r-authenticate.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-559">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-559">The authentication failed.</span></span> <span data-ttu-id="19558-560">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-560">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-561">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-561">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-562">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-562">\- or -</span></span>  
  
 <span data-ttu-id="19558-563">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-563">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="19558-564">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-564">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-565">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-565">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-566">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-566">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="19558-567">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="19558-567">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsClient">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="19558-568">クライアントとサーバー間の接続のクライアント側を認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-568">Begins an asynchronous operation to authenticate the client side of a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-569">認証が進行中は、このメソッドのオーバー ロードはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-569">The overloads of this method do not block while authentication is in progress.</span></span> <span data-ttu-id="19558-570">認証を完了を待っている間にブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-570">To block while waiting for the authentication to complete, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="19558-571">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-571">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-572">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-572">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="19558-573">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-573">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-574">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-574">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-575">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-575">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-576">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-576">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-577">認証に使用して、クライアントの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-577">The authentication uses the client's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-578">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-578">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-579">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルと<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>です。</span><span class="sxs-lookup"><span data-stu-id="19558-579">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, and the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span> <span data-ttu-id="19558-580"><xref:System.Net.Security.NegotiateStream>クラスが相互認証に使用する SPN を作成します。</span><span class="sxs-lookup"><span data-stu-id="19558-580">The <xref:System.Net.Security.NegotiateStream> class will construct the SPN used for mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-581">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-581">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-582">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-582">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-583">呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-583">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="19558-584">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-584">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-585">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-585">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-586">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-586">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-587">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-587">In this case, you can retry the authentication with a different credential.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-588">次のコード例では、クライアントの非同期の認証を開始するには、このメソッドを呼び出すことを示します。</span><span class="sxs-lookup"><span data-stu-id="19558-588">The following code example demonstrates calling this method to begin an asynchronous authentication for the client.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#2)]
 [!code-csharp[NclNegoAsyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-589">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-589">The authentication failed.</span></span> <span data-ttu-id="19558-590">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-590">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-591">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-591">The authentication failed.</span></span> <span data-ttu-id="19558-592">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-592">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-593">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-593">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-594">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-594">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-595">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-595">\- or -</span></span>  
  
 <span data-ttu-id="19558-596">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-596">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-597">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-597">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-598">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-598">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-599"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-599">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-600">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-600">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-601">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-601">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-602">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-602">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-603">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-603">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="19558-604">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-604">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-605">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-605">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-606">認証プロセスでは、指定した資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-606">The authentication process uses the specified credentials.</span></span> <span data-ttu-id="19558-607">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-607">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-608">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-608">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-609">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-609">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-610">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-610">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-611">呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-611">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="19558-612">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-612">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-613">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-613">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-614">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-614">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-615">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-615">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-616"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-616"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-617">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-617">\- or -</span></span>  
  
 <span data-ttu-id="19558-618"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-618"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-619">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-619">The authentication failed.</span></span> <span data-ttu-id="19558-620">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-620">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-621">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-621">The authentication failed.</span></span> <span data-ttu-id="19558-622">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-622">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-623">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-623">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-624">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-624">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-625">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-625">\- or -</span></span>  
  
 <span data-ttu-id="19558-626">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-626">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-627">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-627">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-628">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-628">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-629"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-629">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-630">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-630">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="19558-631">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="19558-631">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-632">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-632">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-633">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-633">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-634">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-634">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="19558-635">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-635">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-636">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-636">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-637">認証プロセスでは、指定した資格情報およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-637">The authentication process uses the specified credentials and channel binding.</span></span> <span data-ttu-id="19558-638">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-638">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-639">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-639">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-640">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-640">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-641">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-641">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-642">呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-642">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="19558-643">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-643">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-644">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-644">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-645">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-645">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-646">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-646">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-647"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-647"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-648">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-648">\- or -</span></span>  
  
 <span data-ttu-id="19558-649"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-649"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-650">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-650">The authentication failed.</span></span> <span data-ttu-id="19558-651">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-651">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-652">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-652">The authentication failed.</span></span> <span data-ttu-id="19558-653">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-653">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-654">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-654">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-655">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-655">\- or -</span></span>  
  
 <span data-ttu-id="19558-656">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-656">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-657">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-657">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-658">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-658">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-659">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-659">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-660">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-660">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-661">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-661">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="19558-662">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-662">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-663">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-663">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-664">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-664">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="19558-665">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-665">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-666">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-666">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-667">認証プロセスでは、指定した資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-667">The authentication process uses the specified credentials and authentication options.</span></span> <span data-ttu-id="19558-668">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-668">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-669">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-669">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-670">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-670">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-671">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-671">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-672">成功した認証とは限りませんを要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-672">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-673">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-673">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-674">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-674">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-675">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-675">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-676">呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-676">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="19558-677">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-677">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-678">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-678">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-679">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-679">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-680">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-680">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-681"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-681"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-682">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-682">\- or -</span></span>  
  
 <span data-ttu-id="19558-683"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-683"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-684">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-684">The authentication failed.</span></span> <span data-ttu-id="19558-685">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-685">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-686">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-686">The authentication failed.</span></span> <span data-ttu-id="19558-687">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-687">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-688">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-688">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-689">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-689">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-690">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-690">\- or -</span></span>  
  
 <span data-ttu-id="19558-691">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-691">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-692">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-692">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-693">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-693">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-694"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-694">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsClient (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsClient(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ChannelBinding binding, string targetName, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel allowedImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ChannelBinding,System.String,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsClient(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ChannelBinding ^ binding, System::String ^ targetName, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel allowedImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="binding" Type="System.Security.Authentication.ExtendedProtection.ChannelBinding" />
        <Parameter Name="targetName" Type="System.String" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="allowedImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-695">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-695">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="binding"><span data-ttu-id="19558-696">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />。</span><span class="sxs-lookup"><span data-stu-id="19558-696">The <see cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" /> that is used for extended protection.</span></span></param>
        <param name="targetName"><span data-ttu-id="19558-697">認証するサーバーを一意に識別するサービス プリンシパル名 (SPN)。</span><span class="sxs-lookup"><span data-stu-id="19558-697">The Service Principal Name (SPN) that uniquely identifies the server to authenticate.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-698">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-698">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="allowedImpersonationLevel"><span data-ttu-id="19558-699">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-699">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-700">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-700">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-701">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-701">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="19558-702">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-702">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-703">クライアントによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-703">Called by clients to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-704">認証プロセスでは、指定した資格情報、認証オプション、およびチャネル バインディングが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-704">The authentication process uses the specified credentials, authentication options, and channel binding.</span></span> <span data-ttu-id="19558-705">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-705">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-706">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-706">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-707">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-707">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-708">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-708">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-709">成功した認証とは限りませんを要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-709">Successful authentication does not guarantee that the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-710">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-710">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-711">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-711">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-712">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-712">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-713">呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-713">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsClient%2A> method.</span></span> <span data-ttu-id="19558-714">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-714">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-715">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-715">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-716">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-716">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-717">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-717">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-718"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-718"><paramref name="credential" /> is <see langword="null" />.</span></span>  
  
 <span data-ttu-id="19558-719">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-719">\- or -</span></span>  
  
 <span data-ttu-id="19558-720"><paramref name="targetName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-720"><paramref name="targetName" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-721">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-721">The authentication failed.</span></span> <span data-ttu-id="19558-722">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-722">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-723">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-723">The authentication failed.</span></span> <span data-ttu-id="19558-724">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-724">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-725">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-725">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-726">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-726">\- or -</span></span>  
  
 <span data-ttu-id="19558-727">このストリームは、かつて、サーバーとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-727">This stream was used previously to attempt authentication as the server.</span></span> <span data-ttu-id="19558-728">ストリームを使用して、クライアントとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-728">You cannot use the stream to retry authentication as the client.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-729">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-729">This object has been closed.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ChannelBinding" />
      </Docs>
    </Member>
    <MemberGroup MemberName="BeginAuthenticateAsServer">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="19558-730">クライアントとサーバー間の接続のサーバー側の認証を処理する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-730">Begins an asynchronous operation to handle the server side of authenticating a client-server connection.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-731">このメソッドのオーバー ロードでは、実行中は、認証はブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-731">The overloads of this method do not block while the authentication is in progress.</span></span> <span data-ttu-id="19558-732">認証が完了するを待っているときに、禁止するを使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-732">To block while waiting for the authentication to complete, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="asyncCallback"><span data-ttu-id="19558-733">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-733">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-734">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-734">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="19558-735">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-735">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-736">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-736">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-737">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-737">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-738">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-738">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-739">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-739">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-740">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-740">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-741">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="19558-741">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="19558-742">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-742">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-743">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-743">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-744">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-744">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-745">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-745">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-746">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-746">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-747">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-747">The authentication failed.</span></span> <span data-ttu-id="19558-748">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-748">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-749">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-749">The authentication failed.</span></span> <span data-ttu-id="19558-750">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-750">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-751">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-751">This object has been closed.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-752">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-752">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-753">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-753">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-754"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-754">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="policy"><span data-ttu-id="19558-755">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="19558-755">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-756">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-756">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-757">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-757">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="19558-758">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-758">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-759">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-759">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-760">認証プロセスでは、指定した拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-760">The authentication process uses the specified extended protection policy.</span></span> <span data-ttu-id="19558-761">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-761">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-762">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-762">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-763">認証に使用して、サーバーの<xref:System.Net.CredentialCache.DefaultCredentials%2A>します。</span><span class="sxs-lookup"><span data-stu-id="19558-763">The authentication uses the server's <xref:System.Net.CredentialCache.DefaultCredentials%2A>.</span></span> <span data-ttu-id="19558-764">サーバーのサービス プリンシパル名 (SPN) が指定されていません。</span><span class="sxs-lookup"><span data-stu-id="19558-764">No Service Principal Name (SPN) is specified for the server.</span></span> <span data-ttu-id="19558-765">偽装レベルが<xref:System.Security.Principal.TokenImpersonationLevel.Identification>、セキュリティ レベルは<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>します。</span><span class="sxs-lookup"><span data-stu-id="19558-765">The impersonation level is <xref:System.Security.Principal.TokenImpersonationLevel.Identification>, the security level is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign>.</span></span>  
  
 <span data-ttu-id="19558-766">場合、`policy`パラメーターは`null`、拡張保護ポリシーが使用されているし、 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 'éý'<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>です。</span><span class="sxs-lookup"><span data-stu-id="19558-766">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="19558-767">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-767">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-768">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-768">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-769">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-769">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-770">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-770">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-771">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-771">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-772"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="19558-772">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-773">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-773">The authentication failed.</span></span> <span data-ttu-id="19558-774">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-774">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-775">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-775">The authentication failed.</span></span> <span data-ttu-id="19558-776">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-776">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-777">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-777">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-778">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-778">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="19558-779">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="19558-779">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-780">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-780">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-781">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-781">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="19558-782">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-782">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-783">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-783">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-784">操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-784">A user-defined object containing information about the operation.</span></span> <span data-ttu-id="19558-785">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-785">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-786">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-786">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-787">認証プロセスでは、指定したサーバーの資格情報と認証オプションを使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-787">The authentication process uses the specified server credentials and authentication options.</span></span> <span data-ttu-id="19558-788">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-788">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-789">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-789">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-790">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-790">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-791">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-791">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-792">成功した認証とは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-792">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-793">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-793">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-794">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-794">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-795">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-795">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-796">呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-796">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="19558-797">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-797">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-798">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-798">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-799">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-799">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-800">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-800">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-801"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-801"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-802"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-802"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-803">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-803">The authentication failed.</span></span> <span data-ttu-id="19558-804">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-804">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-805">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-805">The authentication failed.</span></span> <span data-ttu-id="19558-806">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-806">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-807">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-807">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-808">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-808">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-809">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-809">\- or -</span></span>  
  
 <span data-ttu-id="19558-810">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-810">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="19558-811">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-811">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-812">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-812">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="19558-813">明示的なを使用する<see cref="T:System.Net.NetworkCredential" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-813">to use the explicit <see cref="T:System.Net.NetworkCredential" />.</span></span> <span data-ttu-id="19558-814"><see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" /> (関連する列挙体)</span><span class="sxs-lookup"><span data-stu-id="19558-814">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPrincipal" />.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="BeginAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginAuthenticateAsServer (System.Net.NetworkCredential credential, System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, System.Net.Security.ProtectionLevel requiredProtectionLevel, System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginAuthenticateAsServer(class System.Net.NetworkCredential credential, class System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy policy, valuetype System.Net.Security.ProtectionLevel requiredProtectionLevel, valuetype System.Security.Principal.TokenImpersonationLevel requiredImpersonationLevel, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer(System.Net.NetworkCredential,System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy,System.Net.Security.ProtectionLevel,System.Security.Principal.TokenImpersonationLevel,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginAuthenticateAsServer(System::Net::NetworkCredential ^ credential, System::Security::Authentication::ExtendedProtection::ExtendedProtectionPolicy ^ policy, System::Net::Security::ProtectionLevel requiredProtectionLevel, System::Security::Principal::TokenImpersonationLevel requiredImpersonationLevel, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="System.Net.NetworkCredential" />
        <Parameter Name="policy" Type="System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
        <Parameter Name="requiredProtectionLevel" Type="System.Net.Security.ProtectionLevel" />
        <Parameter Name="requiredImpersonationLevel" Type="System.Security.Principal.TokenImpersonationLevel" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="credential"><span data-ttu-id="19558-815">クライアントの ID を確立するために使用される <see cref="T:System.Net.NetworkCredential" />。</span><span class="sxs-lookup"><span data-stu-id="19558-815">The <see cref="T:System.Net.NetworkCredential" /> that is used to establish the identity of the client.</span></span></param>
        <param name="policy"><span data-ttu-id="19558-816">拡張保護に使用する <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />。</span><span class="sxs-lookup"><span data-stu-id="19558-816">The <see cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" /> that is used for extended protection.</span></span></param>
        <param name="requiredProtectionLevel"><span data-ttu-id="19558-817">ストリームのセキュリティ サービスを示す <see cref="T:System.Net.Security.ProtectionLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-817">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values, indicating the security services for the stream.</span></span></param>
        <param name="requiredImpersonationLevel"><span data-ttu-id="19558-818">サーバーがクライアントの資格情報を使用してリソースにアクセスする方法を示す <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値の 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-818">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values, indicating how the server can use the client's credentials to access resources.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-819">認証完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-819">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the authentication is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-820">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-820">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="19558-821">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-821">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-822">サーバーによって呼び出され、クライアントとサーバー間の接続でクライアントと (オプションで) サーバーを認証する非同期操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-822">Called by servers to begin an asynchronous operation to authenticate the client, and optionally the server, in a client-server connection.</span></span> <span data-ttu-id="19558-823">認証プロセスでは、指定したサーバーの資格情報、認証オプション、および拡張保護ポリシーが使用されます。</span><span class="sxs-lookup"><span data-stu-id="19558-823">The authentication process uses the specified server credentials, authentication options, and extended protection policy.</span></span> <span data-ttu-id="19558-824">このメソッドはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-824">This method does not block.</span></span></summary>
        <returns><span data-ttu-id="19558-825">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-825">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-826">使用して、`requiredProtectionLevel`パラメーターを認証されたストリームを使用して送信されるデータのセキュリティ サービスを要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-826">Use the `requiredProtectionLevel` parameter to request security services for data transmitted using the authenticated stream.</span></span> <span data-ttu-id="19558-827">たとえば、暗号化および署名されたデータを表示するには、次のように指定します。、<xref:System.Net.Security.ProtectionLevel.EncryptAndSign>値。</span><span class="sxs-lookup"><span data-stu-id="19558-827">For example, to have the data encrypted and signed, specify the <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> value.</span></span> <span data-ttu-id="19558-828">成功した認証とは限りませんが、要求された<xref:System.Net.Security.ProtectionLevel>が許可されています。</span><span class="sxs-lookup"><span data-stu-id="19558-828">Successful authentication does not guarantee that, the requested <xref:System.Net.Security.ProtectionLevel> has been granted.</span></span> <span data-ttu-id="19558-829">確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-829">You must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 <span data-ttu-id="19558-830">場合、`policy`パラメーターは`null`、拡張保護ポリシーが使用されているし、 <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> 'éý'<xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>です。</span><span class="sxs-lookup"><span data-stu-id="19558-830">If the `policy` parameter is `null`, then an extended protection policy is used that has <xref:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.PolicyEnforcement%2A> set to <xref:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Never>.</span></span>  
  
 <span data-ttu-id="19558-831">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-831">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-832">操作が完了するまでブロックするには、いずれかを使用、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドのオーバー ロードします。</span><span class="sxs-lookup"><span data-stu-id="19558-832">To block until the operation completes, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method overloads.</span></span>  
  
 <span data-ttu-id="19558-833">呼び出しで、認証の非同期操作を完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-833">The asynchronous authentication operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndAuthenticateAsServer%2A> method.</span></span> <span data-ttu-id="19558-834">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-834">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-835">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-835">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-836">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-836">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-837">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-837">In this case, you can retry the authentication with a different credential.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-838"><paramref name="policy" /> パラメーターで渡された拡張保護ポリシーの <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> と <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> は、どちらも <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="19558-838">The <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomChannelBinding" /> and <see cref="P:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy.CustomServiceNames" /> on the extended protection policy passed in the <paramref name="policy" /> parameter are both <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-839"><paramref name="credential" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-839"><paramref name="credential" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="19558-840"><paramref name="requiredImpersonationLevel" /> は、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />、<see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />、または <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" /> である必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-840"><paramref name="requiredImpersonationLevel" /> must be <see cref="F:System.Security.Principal.TokenImpersonationLevel.Identification" />, <see cref="F:System.Security.Principal.TokenImpersonationLevel.Impersonation" />, or <see cref="F:System.Security.Principal.TokenImpersonationLevel.Delegation" />,</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-841">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-841">The authentication failed.</span></span> <span data-ttu-id="19558-842">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-842">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-843">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-843">The authentication failed.</span></span> <span data-ttu-id="19558-844">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-844">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-845">認証が既に発生しました。</span><span class="sxs-lookup"><span data-stu-id="19558-845">Authentication has already occurred.</span></span>  
  
 <span data-ttu-id="19558-846">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-846">\- or -</span></span>  
  
 <span data-ttu-id="19558-847">このストリームは、かつて、クライアントとして認証を行う目的で使用されていました。</span><span class="sxs-lookup"><span data-stu-id="19558-847">This stream was used previously to attempt authentication as the client.</span></span> <span data-ttu-id="19558-848">このストリームを使用して、サーバーとして認証を再試行することはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-848">You cannot use the stream to retry authentication as the server.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-849">Windows 95 と Windows 98 はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-849">Windows 95 and Windows 98 are not supported.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-850">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-850">This object has been closed.</span></span></exception>
        <exception cref="T:System.PlatformNotSupportedException"><span data-ttu-id="19558-851">拡張保護をサポートしていないプラットフォームで、<paramref name="policy" /> パラメーターが <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> に設定されました。</span><span class="sxs-lookup"><span data-stu-id="19558-851">The <paramref name="policy" /> parameter was set to <see cref="F:System.Security.Authentication.ExtendedProtection.PolicyEnforcement.Always" /> on a platform that does not support extended protection.</span></span></exception>
        <altmember cref="T:System.Security.Authentication.ExtendedProtection.ExtendedProtectionPolicy" />
      </Docs>
    </Member>
    <Member MemberName="BeginRead">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginRead (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginRead(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginRead(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="19558-852">ストリームから読み取ったバイトを受け取る <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="19558-852">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="19558-853">このストリームから読み取ったデータの格納を開始する位置を示す、<c>buffer</c> 内のインデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="19558-853">The zero-based location in <c>buffer</c> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="19558-854">ストリームから読み取る最大バイト数。</span><span class="sxs-lookup"><span data-stu-id="19558-854">The maximum number of bytes to read from the stream.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-855">読み取り操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-855">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the read operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-856">読み取り操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-856">A user-defined object containing information about the read operation.</span></span> <span data-ttu-id="19558-857">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-857">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-858">ストリームからデータを読み取り、指定した配列に格納する非同期読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-858">Begins an asynchronous read operation that reads data from the stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="19558-859">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-859">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-860">暗号化、署名、または暗号化および署名が有効になっている場合、読み取り操作は基になるストリームからデータを読み取ります、データの整合性をチェックし、復号化します。</span><span class="sxs-lookup"><span data-stu-id="19558-860">If encryption, signing, or encryption and signing are enabled, the read operation reads the data from the underlying stream, checks the integrity of the data, and decrypts it.</span></span> <span data-ttu-id="19558-861">セキュリティには、使用するには、データの暗号化や署名などサービスなし、されていない場合、このメソッドは、基になるストリームで非同期読み取り操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-861">If no security services such as data encryption or signing are in use, this method starts an asynchronous read operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="19558-862">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-862">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-863">操作が完了するまでをブロックするを使用して、<xref:System.Net.Security.NegotiateStream.Read%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-863">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="19558-864">非同期の読み取り操作を呼び出すことによって完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndRead%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-864">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndRead%2A> method.</span></span> <span data-ttu-id="19558-865">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-865">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-866">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-866">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-867"><xref:System.Net.Security.NegotiateStream>クラスが複数の同時読み取り操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="19558-867">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous read operations.</span></span> <span data-ttu-id="19558-868">他の操作は、同一のストリームで既に実行中の読み取り中に、読み取り操作を開始しようとする場合、<xref:System.NotSupportedException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="19558-868">If you attempt to start a read operation while another read operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="19558-869">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-869">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="19558-870">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-870">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-871">次のコード例では、非同期読み取り操作の開始を示します。</span><span class="sxs-lookup"><span data-stu-id="19558-871">The following code example demonstrates starting an asynchronous read operation.</span></span> <span data-ttu-id="19558-872">このコード例に示されている例の一部である、<xref:System.Net.Security.NegotiateStream>クラスです。</span><span class="sxs-lookup"><span data-stu-id="19558-872">This code example is part of a larger example provided for the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#1)]
 [!code-csharp[NclNegoAsyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-873"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-873"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="19558-874"><paramref name="offset" /> が 0 未満です。</span><span class="sxs-lookup"><span data-stu-id="19558-874"><paramref name="offset" /> is less than 0.</span></span>  
  
 <span data-ttu-id="19558-875">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-875">\- or -</span></span>  
  
 <span data-ttu-id="19558-876"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="19558-876"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="19558-877">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-877">\- or -</span></span>  
  
 <span data-ttu-id="19558-878"><paramref name="offset" /> に <paramref name="count" /> を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="19558-878"><paramref name="offset" /> plus <paramref name="count" /> is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="19558-879">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-879">The read operation failed.</span></span>  
  
 <span data-ttu-id="19558-880">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-880">\- or -</span></span>  
  
 <span data-ttu-id="19558-881">暗号化が使用されていますが、データを復号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="19558-881">Encryption is in use, but the data could not be decrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-882">既に実行中の読み取り操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="19558-882">There is already a read operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-883">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-883">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-884">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-884">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginWrite">
      <MemberSignature Language="C#" Value="public override IAsyncResult BeginWrite (byte[] buffer, int offset, int count, AsyncCallback asyncCallback, object asyncState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.IAsyncResult BeginWrite(unsigned int8[] buffer, int32 offset, int32 count, class System.AsyncCallback asyncCallback, object asyncState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override IAsyncResult ^ BeginWrite(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count, AsyncCallback ^ asyncCallback, System::Object ^ asyncState);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="asyncCallback" Type="System.AsyncCallback" />
        <Parameter Name="asyncState" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="19558-885">ストリームに書き込むバイトを提供する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="19558-885">A <see cref="T:System.Byte" /> array that supplies the bytes to be written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="19558-886">ストリームに書き込むバイトの読み取りを開始する位置を示す、<c>buffer</c> 内のインデックス番号が 0 から始まる位置。</span><span class="sxs-lookup"><span data-stu-id="19558-886">The zero-based location in <c>buffer</c> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="19558-887"><c>buffer</c> から読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="19558-887">An <see cref="T:System.Int32" /> value that specifies the number of bytes to read from <c>buffer</c>.</span></span></param>
        <param name="asyncCallback"><span data-ttu-id="19558-888">書き込み操作の完了時に呼び出すメソッドを参照する <see cref="T:System.AsyncCallback" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="19558-888">An <see cref="T:System.AsyncCallback" /> delegate that references the method to invoke when the write operation is complete.</span></span></param>
        <param name="asyncState"><span data-ttu-id="19558-889">書き込み操作に関する情報を格納するユーザー定義のオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-889">A user-defined object containing information about the write operation.</span></span> <span data-ttu-id="19558-890">このオブジェクトは、操作の完了時に <c>asyncCallback</c> デリゲートに渡されます。</span><span class="sxs-lookup"><span data-stu-id="19558-890">This object is passed to the <c>asyncCallback</c> delegate when the operation completes.</span></span></param>
        <summary><span data-ttu-id="19558-891">指定したバッファーからストリームに <see cref="T:System.Byte" /> を書き込む非同期書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-891">Begins an asynchronous write operation that writes <see cref="T:System.Byte" />s from the specified buffer to the stream.</span></span></summary>
        <returns><span data-ttu-id="19558-892">非同期操作の状態を示す <see cref="T:System.IAsyncResult" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-892">An <see cref="T:System.IAsyncResult" /> object indicating the status of the asynchronous operation.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-893">暗号化、署名、または暗号化および署名が有効になっている場合このメソッド バッファーからデータを読み取ります、暗号化、署名、または暗号化し署名、および基になるストリームを使用して送信します。</span><span class="sxs-lookup"><span data-stu-id="19558-893">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="19558-894">セキュリティには、使用するには、データの暗号化や署名などサービスなし、されていない場合、このメソッドは、基になるストリームに非同期の書き込み操作を開始します。</span><span class="sxs-lookup"><span data-stu-id="19558-894">If no security services such as data encryption or signing are in use, this method starts an asynchronous write operation on the underlying stream.</span></span>  
  
 <span data-ttu-id="19558-895">このメソッドは非同期であり、操作が完了するにはブロックしません。</span><span class="sxs-lookup"><span data-stu-id="19558-895">This method is asynchronous and does not block while the operation completes.</span></span> <span data-ttu-id="19558-896">操作が完了するまでをブロックするを使用して、<xref:System.Net.Security.NegotiateStream.Read%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-896">To block until the operation completes, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="19558-897">非同期の読み取り操作を呼び出すことによって完了する必要があります、<xref:System.Net.Security.NegotiateStream.EndWrite%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-897">The asynchronous read operation must be completed by calling the <xref:System.Net.Security.NegotiateStream.EndWrite%2A> method.</span></span> <span data-ttu-id="19558-898">通常、このメソッドはによって、`asyncCallback`を委任します。</span><span class="sxs-lookup"><span data-stu-id="19558-898">Typically, the method is invoked by the `asyncCallback` delegate.</span></span> <span data-ttu-id="19558-899">詳細については、非同期プログラミング モデルを使用して、次を参照してください[同期のメソッドを非同期に呼び出す。](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span><span class="sxs-lookup"><span data-stu-id="19558-899">For detailed information about using the asynchronous programming model, see [Calling Synchronous Methods Asynchronously](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md)</span></span>  
  
 <span data-ttu-id="19558-900"><xref:System.Net.Security.NegotiateStream>クラスが複数の同時書き込み操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="19558-900">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="19558-901">別の書き込み操作は、同じストリームで既に実行中に、書き込み操作を開始しようとする場合、<xref:System.NotSupportedException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="19558-901">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
 <span data-ttu-id="19558-902">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-902">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="19558-903">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-903">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-904">次のコード例では、非同期の書き込み操作を開始を示します。</span><span class="sxs-lookup"><span data-stu-id="19558-904">The following code example demonstrates beginning an asynchronous write operation.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#3)]
 [!code-csharp[NclNegoAsyncClient#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#3)]  
  
 <span data-ttu-id="19558-905">次のメソッドは、操作の完了時に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="19558-905">The following method is called when the operation completes.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-906"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-906"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="19558-907"><paramref name="offset is less than 0" />。</span><span class="sxs-lookup"><span data-stu-id="19558-907"><paramref name="offset is less than 0" />.</span></span>  
  
 <span data-ttu-id="19558-908">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-908">\- or -</span></span>  
  
 <span data-ttu-id="19558-909"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="19558-909"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="19558-910">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-910">\- or -</span></span>  
  
 <span data-ttu-id="19558-911"><paramref name="offset" /> に count を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="19558-911"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="19558-912">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-912">The write operation failed.</span></span>  
  
 <span data-ttu-id="19558-913">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-913">\- or -</span></span>  
  
 <span data-ttu-id="19558-914">暗号化が使用されていますが、データを暗号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="19558-914">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-915">既に実行中の書き込み操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="19558-915">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-916">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-916">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-917">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-917">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CanRead">
      <MemberSignature Language="C#" Value="public override bool CanRead { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRead" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanRead" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanRead As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanRead { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-918">基になるストリームが読み取り可能かどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-918">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is readable.</span></span></summary>
        <value>
          <span data-ttu-id="19558-919">認証が行われており、基になるストリームが読み取り可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-919"><see langword="true" /> if authentication has occurred and the underlying stream is readable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-920">成功した認証が発生した場合、このプロパティは呼び出しによって返される値を返します、<xref:System.IO.Stream.CanRead%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-920">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanRead%2A> property on the underlying stream.</span></span> <span data-ttu-id="19558-921">インスタンスを作成するときに、基になるストリームが指定されている、<xref:System.Net.Security.NegotiateStream>クラスです。</span><span class="sxs-lookup"><span data-stu-id="19558-921">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-922">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-922">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanSeek">
      <MemberSignature Language="C#" Value="public override bool CanSeek { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanSeek" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanSeek" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanSeek As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanSeek { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-923">基になるストリームがシークできるかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-923">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is seekable.</span></span></summary>
        <value><span data-ttu-id="19558-924">このプロパティは常に <see langword="false" /> を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-924">This property always returns <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-925">位置を設定しないで、<xref:System.Net.Security.NegotiateStream>オブジェクトまたはその基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-925">You should not attempt to set the position of the <xref:System.Net.Security.NegotiateStream> object or its underlying stream.</span></span> <span data-ttu-id="19558-926">インスタンスを作成するときに、基になるストリームが指定されている、<xref:System.Net.Security.NegotiateStream>クラスです。</span><span class="sxs-lookup"><span data-stu-id="19558-926">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-927">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-927">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Net.Security.NegotiateStream.Position" />
      </Docs>
    </Member>
    <Member MemberName="CanTimeout">
      <MemberSignature Language="C#" Value="public override bool CanTimeout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanTimeout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanTimeout { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-928">基になるストリームがタイムアウトをサポートしているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-928">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream supports time-outs.</span></span></summary>
        <value>
          <span data-ttu-id="19558-929">基になるストリームがタイムアウトをサポートしている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-929"><see langword="true" /> if the underlying stream supports time-outs; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-930">このプロパティを呼び出すことによって返される値を返します、<xref:System.IO.Stream.CanTimeout%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-930">This property returns the value returned by invoking the <xref:System.IO.Stream.CanTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="19558-931">インスタンスを作成するときに、基になるストリームが指定されている、<xref:System.Net.Security.NegotiateStream>クラスです。</span><span class="sxs-lookup"><span data-stu-id="19558-931">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-932">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-932">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanWrite">
      <MemberSignature Language="C#" Value="public override bool CanWrite { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanWrite" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.CanWrite" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanWrite As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanWrite { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-933">基になるストリームが書き込み可能かどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-933">Gets a <see cref="T:System.Boolean" /> value that indicates whether the underlying stream is writable.</span></span></summary>
        <value>
          <span data-ttu-id="19558-934">認証が行われており、基になるストリームが書き込み可能な場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-934"><see langword="true" /> if authentication has occurred and the underlying stream is writable; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-935">成功した認証が発生した場合、このプロパティは呼び出しによって返される値を返します、<xref:System.IO.Stream.CanWrite%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-935">If successful authentication has occurred, this property returns the value returned by invoking the <xref:System.IO.Stream.CanWrite%2A> property on the underlying stream.</span></span> <span data-ttu-id="19558-936">インスタンスを作成するときに、基になるストリームが指定されている、<xref:System.Net.Security.NegotiateStream>クラスです。</span><span class="sxs-lookup"><span data-stu-id="19558-936">The underlying stream is specified when you create an instance of the <xref:System.Net.Security.NegotiateStream> class.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-937">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-937">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="19558-938">マネージ リソースとアンマネージ リソースの両方を解放する場合は <see langword="true" />。アンマネージ リソースだけを解放する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-938"><see langword="true" /> to release both managed and unmanaged resources; <see langword="false" /> to release only unmanaged resources.</span></span></param>
        <summary><span data-ttu-id="19558-939"><see cref="T:System.Net.Security.NegotiateStream" /> によって使用されているアンマネージ リソースを解放し、オプションでマネージ リソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="19558-939">Releases the unmanaged resources used by the <see cref="T:System.Net.Security.NegotiateStream" /> and optionally releases the managed resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-940">このメソッドは、パブリック`Dispose()`メソッドおよび<xref:System.Object.Finalize%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-940">This method is called by the public `Dispose()` method and the <xref:System.Object.Finalize%2A> method.</span></span> <span data-ttu-id="19558-941">`Dispose()` プロテクト呼び出します`Dispose(Boolean)`メソッドを`disposing`パラメーターに設定`true`です。</span><span class="sxs-lookup"><span data-stu-id="19558-941">`Dispose()` invokes the protected `Dispose(Boolean)` method with the `disposing` parameter set to `true`.</span></span> <span data-ttu-id="19558-942"><xref:System.Object.Finalize%2A> 呼び出す`Dispose`で`disposing`'éý'`false`です。</span><span class="sxs-lookup"><span data-stu-id="19558-942"><xref:System.Object.Finalize%2A> invokes `Dispose` with `disposing` set to `false`.</span></span>  
  
 <span data-ttu-id="19558-943">ときに、`disposing`パラメーターが true の場合、このメソッドは、すべてのマネージ オブジェクトによって保持されているすべてのリソースを解放します。 この<xref:System.Net.Security.NegotiateStream>参照します。</span><span class="sxs-lookup"><span data-stu-id="19558-943">When the `disposing` parameter is true, this method releases all resources held by any managed objects that this <xref:System.Net.Security.NegotiateStream> references.</span></span> <span data-ttu-id="19558-944">このメソッドは、参照される各オブジェクトの `Dispose()` メソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="19558-944">This method invokes the `Dispose()` method of each referenced object.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="19558-945"><see langword="Dispose" /> は、他のオブジェクトから複数回呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="19558-945"><see langword="Dispose" /> can be called multiple times by other objects.</span></span> <span data-ttu-id="19558-946">オーバーライドする場合<see langword="Dispose(Boolean)" />既に破棄されているを以前の呼び出しでオブジェクトを参照しないように注意する<see langword="Dispose" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-946">When overriding <see langword="Dispose(Boolean)" /> be careful not to reference objects that have been previously disposed of in an earlier call to <see langword="Dispose" />.</span></span> <span data-ttu-id="19558-947">実装する方法の詳細についての<see langword="Dispose(Boolean)" />を参照してください[Dispose メソッドの実装](~/docs/standard/garbage-collection/implementing-dispose.md)です。</span><span class="sxs-lookup"><span data-stu-id="19558-947">For more information about how to implement <see langword="Dispose(Boolean)" />, see [Implementing a Dispose Method](~/docs/standard/garbage-collection/implementing-dispose.md).</span></span>  
  
 <span data-ttu-id="19558-948">詳細については<see langword="Dispose" />と<see cref="M:System.Object.Finalize" />を参照してください[アンマネージ リソースのクリーンアップ](~/docs/standard/garbage-collection/unmanaged.md)と[Finalize メソッドをオーバーライドする](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3)です。</span><span class="sxs-lookup"><span data-stu-id="19558-948">For more information about <see langword="Dispose" /> and <see cref="M:System.Object.Finalize" />, see [Cleaning Up Unmanaged Resources](~/docs/standard/garbage-collection/unmanaged.md) and [Overriding the Finalize Method](http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</span></span></para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsClient">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsClient (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsClient(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="19558-949"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="19558-949">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></param>
        <summary><span data-ttu-id="19558-950"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> の呼び出しで開始した保留中の非同期のクライアント認証操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="19558-950">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-951">操作が完了していない場合、このメソッドはそれまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-951">If the operation has not completed, this method blocks until it does.</span></span> <span data-ttu-id="19558-952">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-952">When the authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-953">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-953">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-954">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-954">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-955">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-955">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="19558-956">この操作を同期的に実行するには、いずれかの操作を使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-956">To perform this operation synchronously, use one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-957"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-957"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="19558-958"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="19558-958"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-959">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-959">The authentication failed.</span></span> <span data-ttu-id="19558-960">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-960">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-961">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-961">The authentication failed.</span></span> <span data-ttu-id="19558-962">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-962">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-963">完了する保留中のクライアント認証がありません。</span><span class="sxs-lookup"><span data-stu-id="19558-963">There is no pending client authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndAuthenticateAsServer">
      <MemberSignature Language="C#" Value="public virtual void EndAuthenticateAsServer (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndAuthenticateAsServer(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndAuthenticateAsServer(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub EndAuthenticateAsServer (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void EndAuthenticateAsServer(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="19558-964"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="19558-964">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></param>
        <summary><span data-ttu-id="19558-965"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> の呼び出しで開始した保留中の非同期のクライアント認証操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="19558-965">Ends a pending asynchronous client authentication operation that was started with a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-966">操作が完了していない場合、このメソッドはそれまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-966">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="19558-967">認証が成功した場合、確認する必要があります、<xref:System.Net.Security.NegotiateStream.IsEncrypted%2A>と<xref:System.Net.Security.NegotiateStream.IsSigned%2A>プロパティを確認してどのようなセキュリティ サービスがによって使用される、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-967">When authentication succeeds, you must check the <xref:System.Net.Security.NegotiateStream.IsEncrypted%2A> and <xref:System.Net.Security.NegotiateStream.IsSigned%2A> properties to determine what security services are used by the <xref:System.Net.Security.NegotiateStream>.</span></span> <span data-ttu-id="19558-968">チェック、<xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A>相互認証が行われたかどうかを決定するプロパティです。</span><span class="sxs-lookup"><span data-stu-id="19558-968">Check the <xref:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated%2A> property to determine whether mutual authentication occurred.</span></span>  
  
 <span data-ttu-id="19558-969">受信した認証に失敗した場合、<xref:System.Security.Authentication.AuthenticationException>または<xref:System.Security.Authentication.InvalidCredentialException>です。</span><span class="sxs-lookup"><span data-stu-id="19558-969">If the authentication fails, you receive an <xref:System.Security.Authentication.AuthenticationException> or an <xref:System.Security.Authentication.InvalidCredentialException>.</span></span> <span data-ttu-id="19558-970">ここでは、別の資格情報を使用して認証を再試行することができます。</span><span class="sxs-lookup"><span data-stu-id="19558-970">In this case, you can retry the authentication with a different credential.</span></span>  
  
 <span data-ttu-id="19558-971">この操作を同期的に実行するを使用して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-971">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-972"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-972"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="19558-973"><see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" /> への呼び出しで <paramref name="asyncResult" /> が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="19558-973"><paramref name="asyncResult" /> was not created by a call to <see cref="Overload:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer" />.</span></span></exception>
        <exception cref="T:System.Security.Authentication.AuthenticationException"><span data-ttu-id="19558-974">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-974">The authentication failed.</span></span> <span data-ttu-id="19558-975">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-975">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.Security.Authentication.InvalidCredentialException"><span data-ttu-id="19558-976">認証に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-976">The authentication failed.</span></span> <span data-ttu-id="19558-977">このオブジェクトを使用して、認証を再試行できます。</span><span class="sxs-lookup"><span data-stu-id="19558-977">You can use this object to retry the authentication.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-978">完了する保留中の認証がありません。</span><span class="sxs-lookup"><span data-stu-id="19558-978">There is no pending authentication to complete.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndRead">
      <MemberSignature Language="C#" Value="public override int EndRead (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 EndRead(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndRead(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function EndRead (asyncResult As IAsyncResult) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int EndRead(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="19558-979"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="19558-979">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="19558-980"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで開始された、非同期の読み取り操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="19558-980">Ends an asynchronous read operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <returns><span data-ttu-id="19558-981">基になるストリームから読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="19558-981">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-982">操作が完了していない場合、このメソッドはそれまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-982">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="19558-983">この操作を同期的に実行するを使用して、<xref:System.Net.Security.NegotiateStream.Read%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-983">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Read%2A> method.</span></span>  
  
 <span data-ttu-id="19558-984">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-984">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="19558-985">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-985">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-986">次のコード例では、読み取り操作の非同期の終了を示します。</span><span class="sxs-lookup"><span data-stu-id="19558-986">The following code example demonstrates ending an asynchronous read operation.</span></span> <span data-ttu-id="19558-987">例については、操作を開始を示す、次を参照してください。<xref:System.Net.Security.NegotiateStream.BeginRead%2A>です。</span><span class="sxs-lookup"><span data-stu-id="19558-987">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginRead%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#3](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#3)]
 [!code-csharp[NclNegoAsyncServer#3](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-988"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-988"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-989"><see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで asyncResult が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="19558-989">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-990">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-990">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="19558-991">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-991">The read operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="EndWrite">
      <MemberSignature Language="C#" Value="public override void EndWrite (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndWrite(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.EndWrite(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndWrite (asyncResult As IAsyncResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndWrite(IAsyncResult ^ asyncResult);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult"><span data-ttu-id="19558-992"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しによって返される <see cref="T:System.IAsyncResult" /> インスタンス。</span><span class="sxs-lookup"><span data-stu-id="19558-992">An <see cref="T:System.IAsyncResult" /> instance returned by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /></span></span></param>
        <summary><span data-ttu-id="19558-993"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで開始された、非同期の書き込み操作を終了します。</span><span class="sxs-lookup"><span data-stu-id="19558-993">Ends an asynchronous write operation that was started with a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-994">操作が完了していない場合、このメソッドはそれまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-994">If the operation has not completed, this method blocks until it does.</span></span>  
  
 <span data-ttu-id="19558-995">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-995">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="19558-996">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-996">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="19558-997">この操作を同期的に実行するを使用して、<xref:System.Net.Security.NegotiateStream.Write%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-997">To perform this operation synchronously, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-998">次のコード例では、非同期の書き込み操作を完了するために呼び出されるメソッドを示します。</span><span class="sxs-lookup"><span data-stu-id="19558-998">The following code example demonstrates a method that is called to complete the asynchronous write operation.</span></span> <span data-ttu-id="19558-999">例については、操作を開始を示す、次を参照してください。<xref:System.Net.Security.NegotiateStream.BeginWrite%2A>です。</span><span class="sxs-lookup"><span data-stu-id="19558-999">For an example that demonstrates starting the operation, see <xref:System.Net.Security.NegotiateStream.BeginWrite%2A>.</span></span>  
  
 [!code-cpp[NclNegoAsyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoasyncClient/CPP/NclNegoasyncClient.cpp#4)]
 [!code-csharp[NclNegoAsyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoasyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-1000"><paramref name="asyncResult" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-1000"><paramref name="asyncResult" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="19558-1001"><see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" /> の呼び出しで asyncResult が作成されませんでした。</span><span class="sxs-lookup"><span data-stu-id="19558-1001">The asyncResult was not created by a call to <see cref="M:System.Net.Security.NegotiateStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-1002">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1002">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="19558-1003">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-1003">The write operation failed.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="19558-1004">バッファーに格納されたデータが基になるデバイスに書き込まれるようにします。</span><span class="sxs-lookup"><span data-stu-id="19558-1004">Causes any buffered data to be written to the underlying device.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1005">このメソッドを呼び出して<xref:System.IO.Stream.Flush%2A>基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-1005">This method invokes <xref:System.IO.Stream.Flush%2A> on the underlying stream.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1006">次のコード例では、ストリームのフラッシュを示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1006">The following code example demonstrates flushing the stream.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlushAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task FlushAsync (System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task FlushAsync(valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.FlushAsync(System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task ^ FlushAsync(System::Threading::CancellationToken cancellationToken);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="cancellationToken">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImpersonationLevel">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.TokenImpersonationLevel ImpersonationLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.Principal.TokenImpersonationLevel ImpersonationLevel" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ImpersonationLevel" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ImpersonationLevel As TokenImpersonationLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::TokenImpersonationLevel ImpersonationLevel { System::Security::Principal::TokenImpersonationLevel get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.TokenImpersonationLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1007">サーバーでクライアントの資格情報を使用する方法を示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1007">Gets a value that indicates how the server can use the client's credentials.</span></span></summary>
        <value><span data-ttu-id="19558-1008"><see cref="T:System.Security.Principal.TokenImpersonationLevel" /> 値のいずれか 1 つ。</span><span class="sxs-lookup"><span data-stu-id="19558-1008">One of the <see cref="T:System.Security.Principal.TokenImpersonationLevel" /> values.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1009">正常に、このメソッドを呼び出す前に認証する必要があります。</span><span class="sxs-lookup"><span data-stu-id="19558-1009">You must successfully authenticate before calling this method.</span></span> <span data-ttu-id="19558-1010">クライアントは、のいずれかを呼び出すことによって認証を要求するときに、偽装レベルを指定、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1010">Clients specify the impersonation level when they request authentication by calling one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="19558-1011">指定せずに認証する場合、 <xref:System.Security.Principal.TokenImpersonationLevel> 、<xref:System.Security.Principal.TokenImpersonationLevel.Identification>を使用します。</span><span class="sxs-lookup"><span data-stu-id="19558-1011">If you authenticate without specifying a <xref:System.Security.Principal.TokenImpersonationLevel> , <xref:System.Security.Principal.TokenImpersonationLevel.Identification> is used.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1012">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1012">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-1013">認証に失敗したか、認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1013">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="IsAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1014">認証が成功したかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1014">Gets a <see cref="T:System.Boolean" /> value that indicates whether authentication was successful.</span></span></summary>
        <value>
          <span data-ttu-id="19558-1015">認証が成功した場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1015"><see langword="true" /> if successful authentication occurred; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1016">クライアントの認証を呼び出して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1016">Clients authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A> methods.</span></span> <span data-ttu-id="19558-1017">呼び出してサーバーに認証、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1017">Servers authenticate by calling the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1018">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1018">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEncrypted">
      <MemberSignature Language="C#" Value="public override bool IsEncrypted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEncrypted" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsEncrypted" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEncrypted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEncrypted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1019">この <see cref="T:System.Net.Security.NegotiateStream" /> がデータの暗号化を使用するかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1019">Gets a <see cref="T:System.Boolean" /> value that indicates whether this <see cref="T:System.Net.Security.NegotiateStream" /> uses data encryption.</span></span></summary>
        <value>
          <span data-ttu-id="19558-1020">ネットワーク上で送信する前にデータを暗号化し、データがリモート エンドポイントに到達したときに復号化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1020"><see langword="true" /> if data is encrypted before being transmitted over the network and decrypted when it reaches the remote endpoint; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1021">暗号化したデータのプライバシーの保護を利用します。つまり、ことが、データを転送中に、サード パーティによって解読できないことを確認するのに役立ちます。</span><span class="sxs-lookup"><span data-stu-id="19558-1021">Encryption helps to protect the privacy of the data; namely, it helps to ensure that while data is in transit it cannot be deciphered by third parties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1022">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1022">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Security.ProtectionLevel" />
      </Docs>
    </Member>
    <Member MemberName="IsMutuallyAuthenticated">
      <MemberSignature Language="C#" Value="public override bool IsMutuallyAuthenticated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMutuallyAuthenticated" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsMutuallyAuthenticated" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsMutuallyAuthenticated As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsMutuallyAuthenticated { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1023">サーバーとクライアントの両方が認証されているかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1023">Gets a <see cref="T:System.Boolean" /> value that indicates whether both the server and the client have been authenticated.</span></span></summary>
        <value>
          <span data-ttu-id="19558-1024">サーバーが認証されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1024"><see langword="true" /> if the server has been authenticated; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1025">相互認証は、クライアントが、サーバー認証用の資格情報を提供するときに、クライアントによって指定されます。</span><span class="sxs-lookup"><span data-stu-id="19558-1025">Mutual authentication is specified by the client when the client wants the server to provide credentials for authentication.</span></span> <span data-ttu-id="19558-1026">既定では、クライアントは、相互認証を要求します。</span><span class="sxs-lookup"><span data-stu-id="19558-1026">By default, clients request mutual authentication.</span></span>  
  
 <span data-ttu-id="19558-1027">Negotiate プロトコルは、クライアントとサーバーでサポートされるセキュリティ プロトコルに応じて、NTLM または Kerberos のいずれかを選択します。</span><span class="sxs-lookup"><span data-stu-id="19558-1027">The Negotiate protocol selects either NTLM or Kerberos depending on the security protocols supported by the client and server.</span></span> <span data-ttu-id="19558-1028">NTLM は、相互認証をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1028">NTLM does not support mutual authentication.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1029">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1029">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServer">
      <MemberSignature Language="C#" Value="public override bool IsServer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServer" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsServer" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsServer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsServer { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1030">この <see cref="T:System.Net.Security.NegotiateStream" /> が使用する接続のローカル側がサーバーとして認証されたかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1030">Gets a <see cref="T:System.Boolean" /> value that indicates whether the local side of the connection used by this <see cref="T:System.Net.Security.NegotiateStream" /> was authenticated as the server.</span></span></summary>
        <value>
          <span data-ttu-id="19558-1031">ローカル エンドポイントが、認証される接続のサーバー側として正常に認証された場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1031"><see langword="true" /> if the local endpoint was successfully authenticated as the server side of the authenticated connection; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1032">認証失敗または発生しなかった、このプロパティを返します`false`です。</span><span class="sxs-lookup"><span data-stu-id="19558-1032">If authentication failed or did not occur, this property returns `false`.</span></span>  
  
 <span data-ttu-id="19558-1033">サーバーで、認証に呼び出して、<xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1033">To authenticate as the server, call the <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A> or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1034">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1034">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSigned">
      <MemberSignature Language="C#" Value="public override bool IsSigned { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSigned" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.IsSigned" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsSigned As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsSigned { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1035">このストリームを使用して送信されるデータに署名するかどうかを示す <see cref="T:System.Boolean" /> 値を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1035">Gets a <see cref="T:System.Boolean" /> value that indicates whether the data sent using this stream is signed.</span></span></summary>
        <value>
          <span data-ttu-id="19558-1036">データの送信前に署名する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1036"><see langword="true" /> if the data is signed before being transmitted; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1037">データの整合性を保護することにデータの署名つまり、データが転送中に改ざんされているかどうかを決定する受信者と役に立ちます。</span><span class="sxs-lookup"><span data-stu-id="19558-1037">Data signing helps to protect the integrity of the data; namely, it helps the recipient determine whether the data has been tampered with while in transit.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1038">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1038">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#1)]
 [!code-csharp[NclNegoSyncClient#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public override long Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Length" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Length" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Length As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Length { long get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1039">基になるストリームの長さを取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1039">Gets the length of the underlying stream.</span></span></summary>
        <value><span data-ttu-id="19558-1040">基になるストリームの長さを指定する <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1040">A <see cref="T:System.Int64" /> that specifies the length of the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1041">このプロパティを呼び出すことによって返される値を返します、<xref:System.IO.Stream.Length%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-1041">This property returns the value returned by invoking the <xref:System.IO.Stream.Length%2A> property on the underlying stream.</span></span> <span data-ttu-id="19558-1042">基になるストリームがシーク可能でない場合、このプロパティは例外をスロー通常します。</span><span class="sxs-lookup"><span data-stu-id="19558-1042">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="19558-1043">基になるストリームの実行時の型では、スローされる例外の実行時の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="19558-1043">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1044">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1044">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-1045">基になるストリームが <see cref="T:System.Net.Sockets.NetworkStream" /> の場合、このプロパティの値の取得はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1045">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override long Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 Position" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property long Position { long get(); void set(long value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1046">基になるストリーム内の現在位置を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="19558-1046">Gets or sets the current position in the underlying stream.</span></span></summary>
        <value><span data-ttu-id="19558-1047">基になるストリーム内の現在の位置を指定する <see cref="T:System.Int64" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1047">A <see cref="T:System.Int64" /> that specifies the current position in the underlying stream.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1048">このプロパティを呼び出すことによって返される値を返します、<xref:System.IO.Stream.Position%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-1048">This property returns the value returned by invoking the <xref:System.IO.Stream.Position%2A> property on the underlying stream.</span></span> <span data-ttu-id="19558-1049">基になるストリームがシーク可能でない場合、このプロパティは例外をスロー通常します。</span><span class="sxs-lookup"><span data-stu-id="19558-1049">If the underlying stream is not seekable, this property will typically throw an exception.</span></span> <span data-ttu-id="19558-1050">基になるストリームの実行時の型では、スローされる例外の実行時の型を決定します。</span><span class="sxs-lookup"><span data-stu-id="19558-1050">The run-time type of the underlying stream determines the run-time type of the exception that is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-1051">このプロパティの設定は、サポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1051">Setting this property is not supported.</span></span>  
  
 <span data-ttu-id="19558-1052">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-1052">\- or -</span></span>  
  
 <span data-ttu-id="19558-1053">基になるストリームが <see cref="T:System.Net.Sockets.NetworkStream" /> の場合、このプロパティの値の取得はサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1053">Getting the value of this property is not supported when the underlying stream is a <see cref="T:System.Net.Sockets.NetworkStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override int Read (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 Read(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read (buffer As Byte(), offset As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int Read(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="19558-1054">ストリームから読み取ったバイトを受け取る <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="19558-1054">A <see cref="T:System.Byte" /> array that receives the bytes read from the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="19558-1055">このストリームから読み取ったデータの格納を開始する位置を示す、<c>buffer</c> 内のインデックス番号が 0 から始まる位置を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1055">A <see cref="T:System.Int32" /> containing the zero-based location in <c>buffer</c> at which to begin storing the data read from this stream.</span></span></param>
        <param name="count"><span data-ttu-id="19558-1056">ストリームから読み取る最大バイト数を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1056">A <see cref="T:System.Int32" /> containing the maximum number of bytes to read from the stream.</span></span></param>
        <summary><span data-ttu-id="19558-1057">このストリームからデータを読み取り、指定した配列に格納します。</span><span class="sxs-lookup"><span data-stu-id="19558-1057">Reads data from this stream and stores it in the specified array.</span></span></summary>
        <returns><span data-ttu-id="19558-1058">基になるストリームから読み取るバイト数を指定する <see cref="T:System.Int32" /> 値。</span><span class="sxs-lookup"><span data-stu-id="19558-1058">A <see cref="T:System.Int32" /> value that specifies the number of bytes read from the underlying stream.</span></span> <span data-ttu-id="19558-1059">読み取るデータがこれ以上存在しない場合は 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="19558-1059">When there is no more data to be read, returns 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1060">メソッドは、最大数を読み取ります`count`現在からのバイト ストリームおよびそれらの格納に`buffer`始点`offset`です。</span><span class="sxs-lookup"><span data-stu-id="19558-1060">The method reads a maximum of `count` bytes from the current stream and stores them in `buffer` beginning at `offset`.</span></span>  
  
 <span data-ttu-id="19558-1061">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-1061">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="19558-1062">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1062">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="19558-1063">この操作を非同期的に実行するを使用して、<xref:System.Net.Security.NegotiateStream.BeginRead%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1063">To perform this operation asynchronously, use the <xref:System.Net.Security.NegotiateStream.BeginRead%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1064">次のコード例に示しますからの読み取り、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-1064">The following code example demonstrates reading from a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncServer#1](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncServer/CPP/NclNegoSyncServer.cpp#1)]
 [!code-csharp[NclNegoSyncServer#1](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncServer/CS/server.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="19558-1065">読み取り操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-1065">The read operation failed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-1066">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1066">Authentication has not occurred.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-1067"><see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> 操作は既に実行されています。</span><span class="sxs-lookup"><span data-stu-id="19558-1067">A <see cref="M:System.Net.Security.NegotiateStream.Read(System.Byte[],System.Int32,System.Int32)" /> operation is already in progress.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ReadTimeout">
      <MemberSignature Language="C#" Value="public override int ReadTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ReadTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.ReadTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ReadTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int ReadTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1068">読み取り操作がブロックしてデータを待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="19558-1068">Gets or sets the amount of time a read operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="19558-1069">読み取り操作が失敗するまでの経過時間を指定する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1069">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a read operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1070">このプロパティを呼び出すことによって返される値を返します、<xref:System.IO.Stream.ReadTimeout%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-1070">This property returns the value returned by invoking the <xref:System.IO.Stream.ReadTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="19558-1071">このプロパティを設定すると、<xref:System.IO.Stream.ReadTimeout%2A>基になるストリームの値が指定した値に設定します。</span><span class="sxs-lookup"><span data-stu-id="19558-1071">When you set this property, the <xref:System.IO.Stream.ReadTimeout%2A> value on the underlying stream is set to the specified value.</span></span>  
  
 <span data-ttu-id="19558-1072">基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>、 <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> (ミリ秒単位) に設定されている<xref:System.Threading.Timeout.Infinite>既定では操作がタイムアウトしないをしないで読み取れるようにします。</span><span class="sxs-lookup"><span data-stu-id="19558-1072">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.ReadTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that read operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1073">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1073">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoteIdentity">
      <MemberSignature Language="C#" Value="public virtual System.Security.Principal.IIdentity RemoteIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Principal.IIdentity RemoteIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.RemoteIdentity" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property RemoteIdentity As IIdentity" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Security::Principal::IIdentity ^ RemoteIdentity { System::Security::Principal::IIdentity ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.Principal.IIdentity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1074">この認証されたストリームを共有するリモート側の ID に関する情報を取得します。</span><span class="sxs-lookup"><span data-stu-id="19558-1074">Gets information about the identity of the remote party sharing this authenticated stream.</span></span></summary>
        <value><span data-ttu-id="19558-1075">リモート エンドポイントの ID を示す <see cref="T:System.Security.Principal.IIdentity" /> オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="19558-1075">An <see cref="T:System.Security.Principal.IIdentity" /> object that describes the identity of the remote endpoint.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1076">アクセスする場合、クライアントによって、このプロパティを返します、<xref:System.Security.Principal.GenericIdentity>サーバーと使用される認証プロトコルのサービス プリンシパル名 (SPN) を格納します。</span><span class="sxs-lookup"><span data-stu-id="19558-1076">When accessed by the client, this property returns a <xref:System.Security.Principal.GenericIdentity> containing the Service Principal Name (SPN) of the server and the authentication protocol used.</span></span> <span data-ttu-id="19558-1077">アクセスする場合、サーバーによって、このプロパティを返します、<xref:System.Security.Principal.WindowsIdentity>クライアントを記述します。</span><span class="sxs-lookup"><span data-stu-id="19558-1077">When accessed by the server, this property returns a <xref:System.Security.Principal.WindowsIdentity> that describes the client.</span></span> <span data-ttu-id="19558-1078">場合、<xref:System.Security.Principal.WindowsIdentity>が利用できない、クライアント情報が返されます内のサーバーに、<xref:System.Security.Principal.GenericIdentity>です。</span><span class="sxs-lookup"><span data-stu-id="19558-1078">If the <xref:System.Security.Principal.WindowsIdentity> is not available, client information is returned to the server in a <xref:System.Security.Principal.GenericIdentity>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1079">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1079">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoAsyncServer#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoAsyncServer/CPP/NclNegoAsyncServer.cpp#2)]
 [!code-csharp[NclNegoAsyncServer#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoAsyncServer/CS/server.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-1080">認証に失敗したか、認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1080">Authentication failed or has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public override long Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int64 Seek(int64 offset, valuetype System.IO.SeekOrigin origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Seek(System.Int64,System.IO.SeekOrigin)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Seek (offset As Long, origin As SeekOrigin) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override long Seek(long offset, System::IO::SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset"><span data-ttu-id="19558-1081">この値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="19558-1081">This value is ignored.</span></span></param>
        <param name="origin"><span data-ttu-id="19558-1082">この値は無視されます。</span><span class="sxs-lookup"><span data-stu-id="19558-1082">This value is ignored.</span></span></param>
        <summary><span data-ttu-id="19558-1083"><see cref="T:System.NotSupportedException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="19558-1083">Throws <see cref="T:System.NotSupportedException" />.</span></span></summary>
        <returns><span data-ttu-id="19558-1084">常に <see cref="T:System.NotSupportedException" /> をスローします。</span><span class="sxs-lookup"><span data-stu-id="19558-1084">Always throws a <see cref="T:System.NotSupportedException" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1085">このメソッドを呼び出さないでください。</span><span class="sxs-lookup"><span data-stu-id="19558-1085">Do not call this method.</span></span> <span data-ttu-id="19558-1086">関数は、継承されますでサポートされていない<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-1086">It is inherited, but is not supported by <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-1087">シークは、<see cref="T:System.Net.Security.NegotiateStream" /> でサポートされていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1087">Seeking is not supported on <see cref="T:System.Net.Security.NegotiateStream" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SetLength">
      <MemberSignature Language="C#" Value="public override void SetLength (long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SetLength(int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.SetLength(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SetLength (value As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SetLength(long value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="value"><span data-ttu-id="19558-1088">ストリームの長さを指定する <see cref="T:System.Int64" /> 値。</span><span class="sxs-lookup"><span data-stu-id="19558-1088">An <see cref="T:System.Int64" /> value that specifies the length of the stream.</span></span></param>
        <summary><span data-ttu-id="19558-1089">基になるストリームの長さを設定します。</span><span class="sxs-lookup"><span data-stu-id="19558-1089">Sets the length of the underlying stream.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public override void Write (byte[] buffer, int offset, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Write(unsigned int8[] buffer, int32 offset, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Security.NegotiateStream.Write(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Write (buffer As Byte(), offset As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Write(cli::array &lt;System::Byte&gt; ^ buffer, int offset, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.MonoTODO</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer"><span data-ttu-id="19558-1090">ストリームに書き込むバイトを提供する <see cref="T:System.Byte" /> 配列。</span><span class="sxs-lookup"><span data-stu-id="19558-1090">A <see cref="T:System.Byte" /> array that supplies the bytes written to the stream.</span></span></param>
        <param name="offset"><span data-ttu-id="19558-1091">ストリームに書き込むバイトの読み取りを開始する位置を示す、<c>buffer</c> 内のインデックス番号が 0 から始まる位置を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1091">An <see cref="T:System.Int32" /> containing the zero-based location in <c>buffer</c> at which to begin reading bytes to be written to the stream.</span></span></param>
        <param name="count"><span data-ttu-id="19558-1092"><c>buffer</c> から読み取るバイト数を格納する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1092">A <see cref="T:System.Int32" /> containing the number of bytes to read from <c>buffer</c>.</span></span></param>
        <summary><span data-ttu-id="19558-1093">指定したバッファーとオフセットを使用して、基になるストリームに指定した <see cref="T:System.Byte" /> 数を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="19558-1093">Write the specified number of <see cref="T:System.Byte" />s to the underlying stream using the specified buffer and offset.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1094">暗号化、署名、または暗号化および署名が有効になっている場合このメソッド バッファーからデータを読み取ります、暗号化、署名、または暗号化し署名、および基になるストリームを使用して送信します。</span><span class="sxs-lookup"><span data-stu-id="19558-1094">If encryption, signing, or encryption and signing are enabled, this method reads the data from buffer, encrypts, signs, or encrypts and signs it, and transmits it using the underlying stream.</span></span> <span data-ttu-id="19558-1095">このメソッドを呼び出す場合は、セキュリティ サービスのない使用中では、データの暗号化や署名など、<xref:System.IO.Stream.Write%2A>基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-1095">If no security services such as data encryption or signing are in use, this method invokes <xref:System.IO.Stream.Write%2A> on the underlying stream.</span></span>  
  
 <span data-ttu-id="19558-1096">このメソッドは、書き込み操作が完了するまでブロックします。</span><span class="sxs-lookup"><span data-stu-id="19558-1096">This method blocks while the write operation completes.</span></span> <span data-ttu-id="19558-1097">操作が完了するまでブロックを回避するには<xref:System.Net.Security.NegotiateStream.Write%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1097">To prevent blocking while the operation completes, use the <xref:System.Net.Security.NegotiateStream.Write%2A> method.</span></span>  
  
 <span data-ttu-id="19558-1098">正常に認証が完了するまでは、このメソッドを呼び出すことはできません。</span><span class="sxs-lookup"><span data-stu-id="19558-1098">You cannot call this method until you have successfully authenticated.</span></span> <span data-ttu-id="19558-1099">を認証するには、のいずれかを呼び出して、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>、 <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>、または<xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A>メソッドです。</span><span class="sxs-lookup"><span data-stu-id="19558-1099">To authenticate, call one of the <xref:System.Net.Security.NegotiateStream.AuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsClient%2A>, <xref:System.Net.Security.NegotiateStream.AuthenticateAsServer%2A>, or <xref:System.Net.Security.NegotiateStream.BeginAuthenticateAsServer%2A> methods.</span></span>  
  
 <span data-ttu-id="19558-1100"><xref:System.Net.Security.NegotiateStream>クラスが複数の同時書き込み操作をサポートしていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1100">The <xref:System.Net.Security.NegotiateStream> class does not support multiple simultaneous write operations.</span></span> <span data-ttu-id="19558-1101">別の書き込み操作は、同じストリームで既に実行中に、書き込み操作を開始しようとする場合、<xref:System.NotSupportedException>例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="19558-1101">If you attempt to start a write operation while another write operation is already executing on the same stream, a <xref:System.NotSupportedException> exception will be thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1102">次のコード例に示しますへの書き込み、<xref:System.Net.Security.NegotiateStream>です。</span><span class="sxs-lookup"><span data-stu-id="19558-1102">The following code example demonstrates writing to a <xref:System.Net.Security.NegotiateStream>.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#4](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#4)]
 [!code-csharp[NclNegoSyncClient#4](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="19558-1103"><paramref name="buffer" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="19558-1103"><paramref name="buffer" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="19558-1104"><paramref name="offset is less than 0" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1104"><paramref name="offset is less than 0" />.</span></span>  
  
 <span data-ttu-id="19558-1105">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-1105">\- or -</span></span>  
  
 <span data-ttu-id="19558-1106"><paramref name="offset" /> が <paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="19558-1106"><paramref name="offset" /> is greater than the length of <paramref name="buffer" />.</span></span>  
  
 <span data-ttu-id="19558-1107">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-1107">\- or -</span></span>  
  
 <span data-ttu-id="19558-1108"><paramref name="offset" /> に count を加算した値が、<paramref name="buffer" /> の長さを超えています。</span><span class="sxs-lookup"><span data-stu-id="19558-1108"><paramref name="offset" /> plus count is greater than the length of <paramref name="buffer" />.</span></span></exception>
        <exception cref="T:System.IO.IOException"><span data-ttu-id="19558-1109">書き込み操作に失敗しました。</span><span class="sxs-lookup"><span data-stu-id="19558-1109">The write operation failed.</span></span>  
  
 <span data-ttu-id="19558-1110">\- または</span><span class="sxs-lookup"><span data-stu-id="19558-1110">\- or -</span></span>  
  
 <span data-ttu-id="19558-1111">暗号化が使用されていますが、データを暗号化できませんでした。</span><span class="sxs-lookup"><span data-stu-id="19558-1111">Encryption is in use, but the data could not be encrypted.</span></span></exception>
        <exception cref="T:System.NotSupportedException"><span data-ttu-id="19558-1112">既に実行中の書き込み操作が存在します。</span><span class="sxs-lookup"><span data-stu-id="19558-1112">There is already a write operation in progress.</span></span></exception>
        <exception cref="T:System.ObjectDisposedException"><span data-ttu-id="19558-1113">このオブジェクトは閉じられました。</span><span class="sxs-lookup"><span data-stu-id="19558-1113">This object has been closed.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="19558-1114">認証が行われていません。</span><span class="sxs-lookup"><span data-stu-id="19558-1114">Authentication has not occurred.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="WriteTimeout">
      <MemberSignature Language="C#" Value="public override int WriteTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 WriteTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Net.Security.NegotiateStream.WriteTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property WriteTimeout As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int WriteTimeout { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Security</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="19558-1115">書き込み操作がブロックしてデータを待機する時間を取得または設定します。</span><span class="sxs-lookup"><span data-stu-id="19558-1115">Gets or sets the amount of time a write operation blocks waiting for data.</span></span></summary>
        <value><span data-ttu-id="19558-1116">書き込み操作が失敗するまでの経過時間を指定する <see cref="T:System.Int32" />。</span><span class="sxs-lookup"><span data-stu-id="19558-1116">A <see cref="T:System.Int32" /> that specifies the amount of time that will elapse before a write operation fails.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="19558-1117">このプロパティを呼び出すことによって返される値を返します、<xref:System.IO.Stream.WriteTimeout%2A>プロパティを基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="19558-1117">This property returns the value returned by invoking the <xref:System.IO.Stream.WriteTimeout%2A> property on the underlying stream.</span></span> <span data-ttu-id="19558-1118">指定された値の設定、集合演算、<xref:System.IO.Stream.WriteTimeout%2A>基になるストリームの値。</span><span class="sxs-lookup"><span data-stu-id="19558-1118">For set operations, the specified value sets the <xref:System.IO.Stream.WriteTimeout%2A> value on the underlying stream.</span></span>  
  
 <span data-ttu-id="19558-1119">基になるストリームがある場合、 <xref:System.Net.Sockets.NetworkStream>、 <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> (ミリ秒単位) に設定されている<xref:System.Threading.Timeout.Infinite>既定では書き込み操作はタイムアウトしないようにします。</span><span class="sxs-lookup"><span data-stu-id="19558-1119">If the underlying stream is a <xref:System.Net.Sockets.NetworkStream>, <xref:System.Net.Security.NegotiateStream.WriteTimeout%2A> is in milliseconds and is set to <xref:System.Threading.Timeout.Infinite> by default so that write operations do not time out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="19558-1120">次のコード例では、このプロパティの値の表示を示しています。</span><span class="sxs-lookup"><span data-stu-id="19558-1120">The following code example demonstrates displaying the value of this property.</span></span>  
  
 [!code-cpp[NclNegoSyncClient#2](~/samples/snippets/cpp/VS_Snippets_Remoting/NclNegoSyncClient/CPP/NclNegoSyncClient.cpp#2)]
 [!code-csharp[NclNegoSyncClient#2](~/samples/snippets/csharp/VS_Snippets_Remoting/NclNegoSyncClient/CS/client.cs#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>