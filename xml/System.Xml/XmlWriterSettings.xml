<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7860161af0480191bd26b797987d160249630be6" /><Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/01/2018" /><Meta Name="ms.locfileid" Value="52734579" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.XmlWriter" /> メソッドで作成された <see cref="Overload:System.Xml.XmlWriter.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter.Create%2A>メソッドを取得するための推奨メカニズムは、<xref:System.Xml.XmlWriter>インスタンス。 <xref:System.Xml.XmlWriter.Create%2A>メソッドは、<xref:System.Xml.XmlWriterSettings>クラスで実装する機能を指定、<xref:System.Xml.XmlWriter>作成されるオブジェクト。  
  
> [!NOTE]
>  使用する場合、<xref:System.Xml.XmlWriter>オブジェクトを<xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A>メソッドを使用する必要がある、<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A>プロパティを取得する、<xref:System.Xml.XmlWriterSettings>正しい設定を持つオブジェクト。 これにより、作成された <xref:System.Xml.XmlWriter> オブジェクトに正しい出力設定が適用されます。  
  
 <xref:System.Xml.XmlWriterSettings>クラスはそのコントロールのデータへの準拠と出力形式のプロパティを提供します。  
  
 データ一致チェックと自動修正では、これらのプロパティを使用します。  
  
|プロパティ|指定内容|[値]|既定値|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|セットは、W3C によって定義された文字が有効な XML であるかを確認するかどうか文字です。|`true` または `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|出力が整形式 XML 1.0 ドキュメントやフラグメントのことを確認するかどうか。|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (ドキュメント レベル)、 <xref:System.Xml.ConformanceLevel.Fragment> (フラグメント レベル)、または<xref:System.Xml.ConformanceLevel.Auto>(自動検出)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (ドキュメント レベルの一致)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|すべての閉じられていない要素に終了タグを追加するかどうかと、<xref:System.Xml.XmlWriter.Close%2A>メソッドが呼び出されます。|`true` または `false`|`true`|  
  
 出力形式を指定するには、これらのプロパティを使用します。  
  
|プロパティ|指定内容|[値]|既定値|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|テキストに使用するエンコーディングします。|<xref:System.Text.Encoding?displayProperty=nameWithType> の値|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|要素をインデントするかどうか|`true` または `false`|`false` (インデントなし)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|インデントするときに使用する文字列の文字 (ときに使用される<xref:System.Xml.XmlWriterSettings.Indent%2A>に設定されている`true`)。|String|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|改行に使用する文字を指定します。|String|`\r\n` (キャリッジ リターン、ライン フィード)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|改行文字を処理する方法。|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType> 値: <xref:System.Xml.NewLineHandling.Entitize> (正規化) <xref:System.Xml.NewLineHandling.Replace> (置換)、または<xref:System.Xml.NewLineHandling.None>(未変更のままに)|<xref:System.Xml.NewLineHandling.Replace> (で指定された文字で置き換える<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|個々 の行に属性を書き込むかどうか (にない場合は影響<xref:System.Xml.XmlWriterSettings.Indent%2A>は`false`)。|`true` または `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|XML 宣言を書き込むかどうか。|`true` または `false`|`false`|  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Xml.XmlWriter>を XML ファイルに書き込み、新しい行に各属性を書き込みます。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 このサンプルでは、次の出力が生成されます。  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表のインスタンスの初期プロパティ値<xref:System.Xml.XmlWriterSettings>します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペース。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n` (キャリッジ リターン、改行します。)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Xml.XmlWriter>インデントにタブ文字を使用するオブジェクト。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期 <see cref="T:System.Xml.XmlWriter" /> メソッドを <see cref="T:System.Xml.XmlWriter" /> の特定のインスタンスで使用できるかどうかを示す値を取得または設定します。</summary>
        <value>非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この値を設定する必要があります`true`新規に作成するときに<xref:System.Xml.XmlWriter>非同期を使用する場合にインスタンス<xref:System.Xml.XmlWriter>そのインスタンス上のメソッド。 後に、<xref:System.Xml.XmlWriter>インスタンスが作成された、<xref:System.Xml.XmlWriterSettings.Async%2A>プロパティは読み取り専用です。 このプロパティの既定値は `false` です。  
  
 このフラグは無視されます、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>オーバー ロードします。 つまり、新規に作成する場合<xref:System.Xml.XmlWriter>既存に基づいて<xref:System.Xml.XmlWriter>、非同期動作は、入力に依存<xref:System.Xml.XmlWriter>、使用することはできませんし、<xref:System.Xml.XmlWriterSettings.Async%2A>非同期動作を変更するフラグ。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Async および Await を使用した非同期プログラミング (C# および Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメント内のすべての文字が W3C の「[XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/#charsets)」(XML 1.0 勧告) の「2.2 Characters」(2.2 文字) に準拠していることを XML ライターがチェックする必要があるかどうかを示す値を取得または設定します。</summary>
        <value>文字をチェックする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 場合、<xref:System.Xml.XmlWriter>オブジェクトは、文字のチェックをサポートしている、任意の文字が W3C の「2.2 characters 文字」セクションで指定された、有効な XML 文字の範囲外にある場合に例外をスローした[XML 1.0 勧告](https://www.w3.org/TR/REC-xml/#charsets)します。  
  
 文字のチェックは、XML 名に無効な文字のチェックまたはすべての XML 名が有効であるかをチェックは含まれません。 これらのチェックの一致チェックの一部であり、常に実行します。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriterSettings" /> インスタンスのコピーを作成します。</summary>
        <returns>複製された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製された<xref:System.Xml.XmlWriterSettings>オブジェクトを元のオブジェクトで設定の影響を与えずに変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> メソッドを呼び出したときに、<see cref="T:System.IO.TextWriter" /> が、基になるストリームまたは <see cref="M:System.Xml.XmlWriter.Close" /> も閉じる必要があるかどうかを示す値を取得または設定します。</summary>
        <value>基になるストリームまたは <see cref="T:System.IO.TextWriter" /> も閉じる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この設定は、ストリームに XML を記述し、後にストリームの末尾に追加情報を追加するときに便利です、<xref:System.Xml.XmlWriter>書き込みを終了しました。  
  
 このプロパティにのみ適用されます<xref:System.Xml.XmlWriter>出力 XML インスタンスのコンテンツをストリームまたは<xref:System.IO.TextWriter>。 そうしないと、この設定は無視されます。  
  
   
  
## Examples  
 次の例では、メモリ ストリームを XML フラグメントを書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ライターが XML 出力をチェックする準拠のレベルを取得または設定します。</summary>
        <value>準拠のレベル (ドキュメント、フラグメント、自動検出) を指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType>プロパティがチェックされ、書き込まれるストリームは、特定の一連の規則に準拠しているかを保証する XML ライターを構成します。 XML データは、整形式 XML 1.0 ドキュメントまたはドキュメント フラグメントの規則に準拠していることを確認するチェックできます。 次の表では、3 つの設定について説明します。 既定ではドキュメント レベルの一致です。  
  
|設定|説明|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|XML 出力が準拠していることにより、[の整形式 XML 1.0 ドキュメントの規則](https://www.w3.org/TR/REC-xml/#sec-well-formed)準拠のいずれかのプロセッサで処理できるとします。<br /><br /> ドキュメントの一致チェックは、フラグメント レベルのチェックの大部分が含まれますも、次を確認します。<br /><br /> -最上位の項目は、XML 宣言、DTD、要素、コメント、空白文字、または処理命令以外のノードにありません。<br />XML データでは、1 つだけの最上位の要素ノードがあります。<br /><br /> XML ライターには、書き込まれる DTD 情報を解析しません。 ユーザーが、DTD が整形式であることを保証します。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|XML 出力に準拠していることにより、[整形式 XML 1.0 ドキュメント フラグメントの規則](https://www.w3.org/TR/REC-xml/#wf-entities)します。<br /><br /> この設定は、最上位レベルで複数のルート要素またはテキスト ノードを含む XML データを受け入れます。 このレベルのチェックでは、すべてのプロセッサで、読み込むストリームが XML 1.0 の外部解析対象エンティティとして処理できることが保証されます。<br /><br /> DTD 情報は、ドキュメント フラグメントで許可されていません。|  
|<xref:System.Xml.ConformanceLevel.Auto>|XML ライターが受信データに基づくの一致チェック レベルを決定する必要がありますを指定します。 この設定は、生成された XML が整形式 XML ドキュメントまたはフラグメントするがかどうかがわからない場合に便利です。<br /><br /> ドキュメントの一致チェックは、次の場合に適用されます。<br /><br /> If、<xref:System.Xml.XmlWriter.WriteStartDocument%2A>メソッドが呼び出されます。<br />場合、DTD 情報が書き込まれます。<br /><br /> XML データには、次のいずれかが含まれている場合、フラグメント一致チェックが適用されます。<br /><br /> ルート レベルでのテキスト、CDATA、または EntityReference ノード。<br />のルート レベルで複数の要素。<br />ルート レベル要素はなし。<br /><br /> テキスト ノードを書き出そうとしてルート レベルに DTD があるなどの矛盾がある場合には <xref:System.Xml.XmlException> がスローされます。<br /><br /> 別、ラップする場合<xref:System.Xml.XmlWriter>オブジェクトは外側のオブジェクトは追加の準拠チェックを実行しません。 これは、左から基になるオブジェクト。|  
  
 XML ライターでは、指定されたレベルの準拠に違反するすべての情報を検出する場合は、例外をスローします。 場合によっては、XML ライターは自動的に準拠エラーを修正します。 たとえば、ライターは例外をスローせず閉じられていない属性を閉じます。 次の表は、さまざまな一致の違反は、各設定で処理されます。  
  
|条件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|DTD 情報が見つかりました。|しないこの設定の違反です。 ただし、XML ライターは、DTD をチェックしませんユーザーは、DTD が整形式であることを確認する必要があります。|<xref:System.Xml.XmlException> スローされます。|ドキュメントの一致チェックが適用されます。|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> が呼ばれたとき。|この設定の違反とは見なされません。|<xref:System.Xml.XmlException> スローされます。|ドキュメントの一致チェックが適用されます。|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> は複数回呼び出されます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|(要素または属性ノードでは) 以下ではない最上位レベルにテキスト値が表示されます。|<xref:System.Xml.XmlException> スローされます。|違反とは見なされません。|フラグメント一致チェックが適用されます。|  
|複数の要素または要素はありませんが、最上位レベルに表示されます。|<xref:System.Xml.XmlException> スローされます。|違反とは見なされません。|フラグメント一致チェックが適用されます。|  
|最上位の項目には空白です。|違反とは見なされません。|違反とは見なされません。|違反とは見なされません。|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A> 属性ノードを終了すると呼ばれるはありません。|XML ライターで修正されます。|XML ライターで修正されます。|XML ライターで修正されます。|  
|XML ライターが不適切に入れ子になった状態 (たとえば、<xref:System.Xml.XmlWriter.WriteStartElement%2A>呼び出しの後に、 <xref:System.Xml.XmlWriter.WriteEndAttribute%2A>)。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|最上位の項目は、属性です。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|複数の連続したテキスト ノードがある。|違反とは見なされませんが、テキスト ノードを連結するユーザーの責任です。|違反とは見なされませんが、テキスト ノードを連結するユーザーの責任です。|違反とは見なされませんが、テキスト ノードを連結するユーザーの責任です。|  
|同じ名前空間プレフィックスが要素内で 2 回宣言されている。|XML ライターでは、2 つ目の名前空間の新しいプレフィックスを生成します。|XML ライターでは、2 つ目の名前空間の新しいプレフィックスを生成します。|XML ライターでは、2 つ目の名前空間の新しいプレフィックスを生成します。|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A> プレフィックスと、そのスコープ内で宣言されていない名前空間を指定しますまたは、プレフィックスが別の名前空間に関連付けられています。|必要な名前空間ノードを XML ライターに書き込みます。|必要な名前空間ノードを XML ライターに書き込みます。|必要な名前空間ノードを XML ライターに書き込みます。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> そのスコープ内で宣言されていない名前空間プレフィックスを指定します。|必要な名前空間ノードを XML ライターに書き込みます。|必要な名前空間ノードを XML ライターに書き込みます。|必要な名前空間ノードを XML ライターに書き込みます。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A> プレフィックスと名前空間が、プレフィックスが別のスコープ内名前空間に関連付けを指定します。|XML ライターは、指定したプレフィックスを無視し、正しいプレフィックスを検索、または、新しいプレフィックスが生成されます。|XML ライターは、指定したプレフィックスを無視し、正しいプレフィックスを検索、または、新しいプレフィックスが生成されます。|XML ライターは、指定したプレフィックスを無視し、正しいプレフィックスを検索、または、新しいプレフィックスが生成されます。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> スコープ内で存在しない名前空間を使用して、要素コンテンツの書き込みに使用されます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A> スコープ内で存在しない名前空間を使用して属性コンテンツの書き込みに使用されます。|XML ライターでは、必要な名前空間宣言を書き込みます。|XML ライターでは、必要な名前空間宣言を書き込みます。|XML ライターでは、必要な名前空間宣言を書き込みます。|  
|`xml:space`属性が有効な値が含まれていません。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|無効な名前が検出される。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|`xml` URI にプレフィックスは一致しません。|XML ライターではこの種類の違反について確認します。|XML ライターではこの種類の違反について確認します。|XML ライターではこの種類の違反について確認します。|  
|`xml`にプレフィックスは一致しません、 http://www.w3.org/XML/1998/namespace URI。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|`xmlns`プレフィックスまたはローカル名は URI に一致しません。|XML ライターではこの種類の違反について確認します。|XML ライターではこの種類の違反について確認します。|XML ライターではこの種類の違反について確認します。|  
|`xmlns`プレフィックスまたはローカル名に一致しません、 http://www.w3.org/2000/xmlns URI。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
  
   
  
## Examples  
 次の例では、メモリ ストリームを XML フラグメントを書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> が URI 属性をエスケープしないかどうかを示す値を取得または設定します。</summary>
        <value><see langword="true" /> 場合、 <see cref="T:System.Xml.XmlWriter" /> URI 属性をエスケープしません。 そうしないと、<see langword="false" />します。 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用するテキスト エンコーディングの種類を取得または設定します。</summary>
        <value>使用するテキスト エンコーディング。 既定値は、<see langword="Encoding.UTF8" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlWriter>一度にすべてではなく 1 文字ずつ文字のバッファーをエンコードします。 例外がスローされます、<xref:System.Xml.XmlWriter.Flush%2A>エンコード エラーが発生した場合、メソッドが呼び出されます。  
  
 <xref:System.Xml.XmlWriterSettings.Encoding%2A>プロパティは、<xref:System.Xml.XmlWriter>作成するには、指定したインスタンス<xref:System.IO.Stream>または指定したファイル名を使用します。 場合、<xref:System.Xml.XmlWriter>インスタンスが作成されると、指定した<xref:System.IO.TextWriter>、<xref:System.Xml.XmlWriterSettings.Encoding%2A>プロパティは、基になるエンコードすることによってオーバーライドされた<xref:System.IO.TextWriter>。 たとえば、このプロパティは、特定の Unicode (utf-16) に設定されて<xref:System.Xml.XmlWriter>が、基になるライターは、 <xref:System.IO.StreamWriter> (から派生した<xref:System.IO.TextWriter>) 出力エンコードは付きの UTF8 に設定、utf-8 でエンコードされたになります。  
  
 場合、<xref:System.Xml.XmlWriter>インスタンスが作成されるその他の出力パラメーター、<xref:System.Xml.XmlWriterSettings.Encoding%2A>プロパティは無視されます。  
  
 次に例を示します。  
  
-   <xref:System.Xml.XmlWriterSettings.Encoding%2A> の既定値は `Encoding.UTF8`です。  
  
-   <xref:System.IO.StreamWriter>に設定されている`Encoding.Unicode`と<xref:System.IO.StreamWriter>上書きのエンコーディング、<xref:System.Xml.XmlWriterSettings.Encoding%2A>設定します。  
  
-   出力されます。`Encoding.Unicode`します。  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  同意しない、<xref:System.Text.Encoding>信頼できないソースからのオブジェクト。  
  
   
  
## Examples  
 次の例では、メモリ ストリームを XML フラグメントを書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素にインデントを設定するかどうかを示す値を取得または設定します。</summary>
        <value>各要素を新しい行に書き込んでインデントを設定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは<xref:System.Xml.XmlWriter>インスタンスのテキストの内容を出力する。 それ以外の場合、この設定は無視されます。  
  
 要素に混合コンテンツが含まれていない限り、要素がインデントされます。 1 回、<xref:System.Xml.XmlWriter.WriteString%2A>または<xref:System.Xml.XmlWriter.WriteWhitespace%2A>混合要素コンテンツを記述するメソッドが呼び出される、<xref:System.Xml.XmlWriter>インデントを停止します。 混合コンテンツ要素が閉じられると、インデント、再開します。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Xml.XmlWriter>インデントにタブ文字を使用するオブジェクト。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インデント処理を行うときに使用する文字列を取得または設定します。 この設定は、<see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティが <see langword="true" /> に設定されている場合に使用します。</summary>
        <value>インデント処理を行うときに使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は 2 つのスペースです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは<xref:System.Xml.XmlWriter>インスタンスのテキストの内容を出力する。 それ以外の場合、この設定は無視されます。 <xref:System.Xml.XmlWriter>インデント文字が無効な XML になる場合に例外をスローします。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Xml.XmlWriter>インデントにタブ文字を使用するオブジェクト。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> に代入された値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML コンテンツの書き込み時に、重複する名前空間宣言を <see cref="T:System.Xml.XmlWriter" /> で削除するかどうかを示す値を取得または設定します。 既定の動作では、ライターの名前空間リゾルバーに存在するすべての名前空間宣言がライターによって出力されます。</summary>
        <value><see cref="T:System.Xml.NamespaceHandling" /> で重複する名前空間宣言を削除するかどうかを指定するための <see cref="T:System.Xml.XmlWriter" /> 列挙体。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>改行に使用する文字列を取得または設定します。</summary>
        <value>改行に使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は<c>\r\n</c> (キャリッジ リターン、改行) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは<xref:System.Xml.XmlWriter>インスタンスのテキストの内容を出力する。 それ以外の場合、この設定は無視されます。 <xref:System.Xml.XmlWriter>改行文字が無効な XML になる場合に例外をスローします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> に代入された値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力内の改行を正規化するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Xml.NewLineHandling" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.NewLineHandling.Replace" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この設定は、コンテンツまたは属性値のテキストを書き込むときに適用されます。 各、<xref:System.Xml.NewLineHandling>値以下で説明します。  
  
-   <xref:System.Xml.NewLineHandling.Entitize>設定、<xref:System.Xml.XmlWriter>を正規化することではそれ以外の場合維持しない改行文字を置換する<xref:System.Xml.XmlReader>文字エンティティとします。 これは、正規化することで、出力は読み取り専用ラウンドト リップ シナリオで役立ちます<xref:System.Xml.XmlReader>します。 属性の値とのラウンド トリップ以降の追加の正規化規則が適用されます`\t`、`\n`と`\r`で正規化と属性値内の領域に置き換え、<xref:System.Xml.XmlReader>します。  
  
-   <xref:System.Xml.NewLineHandling.Replace>設定、<xref:System.Xml.XmlWriter>で改行文字を置換する`\r\n`、Microsoft Windows オペレーティング システムで使用される新しい行の形式であります。 これにより、メモ帳や Microsoft Word のアプリケーションでファイルを正しく表示されるようにします。 この設定によりもに、属性内の改行文字を保持する文字エンティティに置き換えます。 これが既定値です。  
  
-   <xref:System.Xml.NewLineHandling.None>設定、<xref:System.Xml.XmlWriter>変更されていない入力のままにします。 この設定は、新しい行の処理したくない場合に使用されます。 によって、出力が読み取られるときに便利ですが、<xref:System.Xml.XmlReader>正規化を実行しません (たとえば、<xref:System.Xml.XmlTextReader>既定の設定でします)。  
  
 次の表の出力を表示する、<xref:System.Xml.XmlWriter.WriteString%2A>メソッドを指定すると、入力値に応じて、<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>プロパティの設定。 テーブルは、テキスト コンテンツの書き込み時に出力を表示および属性値を書き込むときにします。  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|含ま|& #D \n。|\n|(&AMP; A); #D|\t|  
|置換|\r\n|\r\n|\r\n|\t|  
|なし|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|含ま|(&AMP; A); #D &AMP; #A;|(&AMP; A) #A;|(&AMP; A); #D|&\#9;|  
|置換|(&AMP; A); #D &AMP; #A;|(&AMP; A) #A;|(&AMP; A); #D|&\#9;|  
|なし|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  <xref:System.Xml.XmlWriter> CDATA セクション、コメント、または処理命令内のコンテンツの書き込み時に、次の動作が。 新しい行が、その文字エンティティを置き換えられません場合でも、<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>プロパティに設定されて<xref:System.Xml.NewLineHandling.Entitize>します。 CDATA セクションでは、コメント、または処理命令で文字エンティティが認識されないためにです。 場合、<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>プロパティに設定されて<xref:System.Xml.NewLineHandling.None>または<xref:System.Xml.NewLineHandling.Replace>、テキスト ノードの値を作成するときと同じ動作です。  
  
 次の表では、どのような正規化について説明します<xref:System.Xml.XmlReader>の各入力の空白を返します。 詳細については、2.11 および W3C の 3.3.3 のセクションを参照してください。 [XML 1.0 勧告](https://www.w3.org/TR/REC-xml/)します。  
  
> [!NOTE]
>  正規化のリーダーは any<xref:System.Xml.XmlReader>によって作成されたオブジェクト、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>メソッド。 これらのオブジェクトは、常に、改行の正規化と属性の完全な正規化を実行します。 <xref:System.Xml.XmlTextReader>オブジェクトもは正規化のリーダーである場合<xref:System.Xml.XmlTextReader.Normalization%2A>プロパティに設定されて`true`します。  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|テキスト ノードの値|\n|\n|\n|\t|  
|属性の値|1 つのスペース|1 つのスペース|1 つのスペース|1 つのスペース|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しい行に属性を書き込むかどうかを示す値を取得または設定します。</summary>
        <value>個々の行に属性を書き込む場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。  
  
 <block subset="none" type="note"><para>  
 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティ値が <see langword="false" /> の場合、この設定は無効です。  
  
</para></block>  
  
 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> を <see langword="true" /> に設定すると、各属性は、新しい行にインデントを 1 レベル増やして記述されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは<xref:System.Xml.XmlWriter>インスタンスのテキストの内容を出力する。 それ以外の場合、この設定は無視されます。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Xml.XmlWriter>を XML ファイルに書き込み、新しい行に各属性を書き込みます。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 このサンプルでは、次の出力が生成されます。  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 宣言を省略するかどうかを示す値を取得または設定します。</summary>
        <value>XML 宣言を省略する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> で、XML 宣言が書き込まれます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは<xref:System.Xml.XmlWriter>インスタンスのテキストの内容を出力する。 それ以外の場合、この設定は無視されます。  
  
 場合<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>に設定されている`false`、XML 宣言が自動的に書き込まれます  
  
 場合、XML 宣言が常に書き込まれる<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>に設定されている<xref:System.Xml.ConformanceLevel.Document>場合でも、<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>に設定されている`true`します。  
  
 場合、XML 宣言が書き込まれていない<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>に設定されている<xref:System.Xml.ConformanceLevel.Fragment>します。 呼び出すことができます<xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>XML 宣言を明示的に記述します。  
  
   
  
## Examples  
 次の例では、メモリ ストリームを XML フラグメントを書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> 出力をシリアル化するために使用するメソッドを取得します。</summary>
        <value><see cref="T:System.Xml.XmlOutputMethod" /> 値のいずれか 1 つ。 既定値は、<see cref="F:System.Xml.XmlOutputMethod.Xml" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、出力をシリアル化に使用する方法を指定します。 出力は、HTML の規則では、XML 1.0 規則、およびなどを使用してシリアル化することができます。 この設定は、XSLT プロセッサでは設定され、Visual Studio によって内部的に使用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定クラスのメンバーを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、既定のインスタンスのプロパティ値<xref:System.Xml.XmlWriterSettings>します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`。|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2 つのスペース。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されるときに <see cref="M:System.Xml.XmlWriter.Close" /> がすべての閉じられていない要素タグに終了タグを追加するかどうかを示す値を取得または設定します。</summary>
        <value>閉じられていない要素タグがすべて閉じられる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このフラグを設定した場合`false`、出力 XML ファイルを整形できない可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>