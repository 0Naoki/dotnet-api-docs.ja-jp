<Type Name="XmlWriterSettings" FullName="System.Xml.XmlWriterSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="f5aa9e60ee55b7f5c4a9a753c267c11fae72ce0e" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70558833" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlWriterSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlWriterSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlWriterSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlWriterSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlWriterSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlWriterSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.XmlWriter" /> メソッドで作成された <see cref="Overload:System.Xml.XmlWriter.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インスタンスを取得<xref:System.Xml.XmlWriter>するには、メソッドを使用することをお勧めします。 <xref:System.Xml.XmlWriter.Create%2A> メソッド<xref:System.Xml.XmlWriter.Create%2A>は、 <xref:System.Xml.XmlWriterSettings>クラスを使用して、作成される<xref:System.Xml.XmlWriter>オブジェクトに実装する機能を指定します。  
  
> [!NOTE]
>  メソッドを使用して<xref:System.Xml.XmlWriter>オブジェクト<xref:System.Xml.Xsl.XslCompiledTransform.OutputSettings%2A> <xref:System.Xml.XmlWriterSettings>を使用している場合は、プロパティを使用して、正しい設定のオブジェクトを取得する必要があります。 <xref:System.Xml.Xsl.XslCompiledTransform.Transform%2A> これにより、作成された <xref:System.Xml.XmlWriter> オブジェクトに正しい出力設定が適用されます。  
  
 クラス<xref:System.Xml.XmlWriterSettings>には、データの一致と出力形式を制御するプロパティが用意されています。  
  
 データの一致チェックと自動修正の場合は、次のプロパティを使用します。  
  
|プロパティ|指定内容|[値]|既定値|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|W3C によって定義されているように、文字が有効な XML 文字セットに含まれているかどうかを確認するかどうか。|`true` または `false`|`true`|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|出力が整形式の XML 1.0 ドキュメントまたはフラグメントであるかどうかをチェックするかどうか。|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>(ドキュメントレベル)、 <xref:System.Xml.ConformanceLevel.Fragment> (フラグメントレベル)、または<xref:System.Xml.ConformanceLevel.Auto> (自動検出)|<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>(ドキュメントレベルの準拠)|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|メソッドが呼び出されたときに、 <xref:System.Xml.XmlWriter.Close%2A>閉じていないすべての要素に終了タグを追加するかどうかを指定します。|`true` または `false`|`true`|  
  
 出力形式を指定するには、次のプロパティを使用します。  
  
|プロパティ|指定内容|[値]|既定値|  
|--------------|---------------|-----------|-------------|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|使用するテキストエンコーディング。|<xref:System.Text.Encoding?displayProperty=nameWithType> の値|<xref:System.Text.Encoding.UTF8?displayProperty=nameWithType>|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|要素にインデントを指定するかどうか|`true` または `false`|`false`(インデントなし)|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|をインデントするときに使用する文字列。 <xref:System.Xml.XmlWriterSettings.Indent%2A>がに`true`設定されている場合に使用します。|String|2 つのスペース|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|改行に使用する文字列。|String|`\r\n`(キャリッジリターン、ラインフィード)|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|改行文字を処理する方法。|<xref:System.Xml.NewLineHandling?displayProperty=nameWithType>値: <xref:System.Xml.NewLineHandling.Entitize> (正規化)、 <xref:System.Xml.NewLineHandling.Replace> (置換)、また<xref:System.Xml.NewLineHandling.None>は (変更なしのまま)|<xref:System.Xml.NewLineHandling.Replace>(によって<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>指定された文字で置き換えます)|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|個々の行に属性を書き込むかどうかを指定<xref:System.Xml.XmlWriterSettings.Indent%2A>し`false`ます (がの場合は効果がありません)。|`true` または `false`|`false`|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|XML 宣言を書き込むかどうかを指定します。|`true` または `false`|`false`|  
  
   
  
## Examples  
 次の例では<xref:System.Xml.XmlWriter> 、XML ファイルへの書き込みを行い、各属性を新しい行に書き込むを作成します。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 このサンプルでは、次の出力が生成されます。  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlWriterSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlWriterSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriterSettings" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表に、の<xref:System.Xml.XmlWriterSettings>インスタンスのプロパティの初期値を示します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2つのスペース。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`(キャリッジリターン、改行)。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>。|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
   
  
## Examples  
 次の例では<xref:System.Xml.XmlWriter> 、インデントにタブ文字を使用するオブジェクトを作成します。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlWriterSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期 <see cref="T:System.Xml.XmlWriter" /> メソッドを <see cref="T:System.Xml.XmlWriter" /> の特定のインスタンスで使用できるかどうかを示す値を取得または設定します。</summary>
        <value>非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このインスタンスで非同期`true` <xref:System.Xml.XmlWriter>メソッドを使用する場合は、 <xref:System.Xml.XmlWriter>新しいインスタンスを作成するときにこの値をに設定する必要があります。 インスタンスが作成されると<xref:System.Xml.XmlWriterSettings.Async%2A> 、プロパティは読み取り専用になります。 <xref:System.Xml.XmlWriter> このプロパティの既定値は `false` です。  
  
 このフラグは、 <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>オーバーロードによって無視されます。 つまり、既存<xref:System.Xml.XmlWriter>のに基づいて新しい<xref:System.Xml.XmlWriter>を作成する場合、非同期動作は入力<xref:System.Xml.XmlWriter>に依存し、 <xref:System.Xml.XmlWriterSettings.Async%2A>フラグを使用して非同期動作を変更することはできません。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Async および Await を使用した非同期プログラミング (C# および Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlWriterSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ドキュメント内のすべての文字が W3C の「[XML 1.0 Recommendation](https://www.w3.org/TR/REC-xml/#charsets)」(XML 1.0 勧告) の「2.2 Characters」(2.2 文字) に準拠していることを XML ライターがチェックする必要があるかどうかを示す値を取得または設定します。</summary>
        <value>文字をチェックする場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 オブジェクトが<xref:System.Xml.XmlWriter>文字のチェックをサポートしている場合は、W3C[勧告『 xml 1.0 』](https://www.w3.org/TR/REC-xml/#charsets)の「2.2 文字」セクションで指定されている有効な XML 文字の範囲外にある文字があると、例外がスローされます。  
  
 文字チェックには、XML 名に無効な文字があるかどうかのチェックや、すべての XML 名が有効であるかどうかのチェックは含まれません。 これらのチェックは一致チェックの一部であり、常に実行されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlWriterSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlWriterSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlWriterSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlWriterSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlWriterSettings" Usage="xmlWriterSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlWriterSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriterSettings" /> インスタンスのコピーを作成します。</summary>
        <returns>複製された <see cref="T:System.Xml.XmlWriterSettings" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製<xref:System.Xml.XmlWriterSettings>されたオブジェクトは、元のオブジェクトの設定に影響を与えることなく変更できます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseOutput">
      <MemberSignature Language="C#" Value="public bool CloseOutput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseOutput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseOutput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseOutput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseOutput : bool with get, set" Usage="System.Xml.XmlWriterSettings.CloseOutput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> メソッドを呼び出したときに、<see cref="T:System.IO.TextWriter" /> が、基になるストリームまたは <see cref="M:System.Xml.XmlWriter.Close" /> も閉じる必要があるかどうかを示す値を取得または設定します。</summary>
        <value>基になるストリームまたは <see cref="T:System.IO.TextWriter" /> も閉じる場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この設定は、XML をストリームに書き込み、の<xref:System.Xml.XmlWriter>書き込みが完了した後にストリームの末尾に追加情報を追加する場合に便利です。  
  
 このプロパティは、XML <xref:System.Xml.XmlWriter>コンテンツを<xref:System.IO.TextWriter>ストリームに出力するインスタンスにのみ適用されます。それ以外の場合、この設定は無視されます。  
  
   
  
## Examples  
 次の例では、XML フラグメントをメモリストリームに書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlWriterSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ライターが XML 出力をチェックする準拠のレベルを取得または設定します。</summary>
        <value>準拠のレベル (ドキュメント、フラグメント、自動検出) を指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 プロパティ<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A?displayProperty=nameWithType>は、記述されているストリームが特定の規則のセットに準拠していることを確認し、それを保証するように XML ライターを構成します。 XML データは、整形式の XML 1.0 ドキュメントまたはドキュメントフラグメントのルールに準拠しているかどうかを確認できます。 次の表では、3つの設定について説明します。 既定値はドキュメントレベルの準拠です。  
  
|設定|説明|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|XML 出力が[整形式の xml 1.0 ドキュメントの規則](https://www.w3.org/TR/REC-xml/#sec-well-formed)に準拠していること、および準拠しているプロセッサで処理できることを確認します。<br /><br /> ドキュメントの一致チェックには、ほとんどのフラグメントレベルのチェックが含まれ、次のことも確認します。<br /><br /> -最上位レベルの項目に、XML 宣言、DTD、要素、コメント、空白、または処理命令以外のノードがありません。<br />-XML データには、最上位レベルの要素ノードが1つだけあります。<br /><br /> XML ライターは、書き込まれた DTD 情報を解析しません。 ユーザーは、DTD が整形式であることを確認する必要があります。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|XML 出力が、整形[式の xml 1.0 ドキュメントフラグメントの規則](https://www.w3.org/TR/REC-xml/#wf-entities)に準拠していることを確認します。<br /><br /> この設定は、最上位レベルに複数のルート要素またはテキストノードを含む XML データを受け入れます。 このレベルのチェックでは、すべてのプロセッサで、読み込むストリームが XML 1.0 の外部解析対象エンティティとして処理できることが保証されます。<br /><br /> ドキュメントフラグメントで DTD 情報を使用することはできません。|  
|<xref:System.Xml.ConformanceLevel.Auto>|XML ライターが、受信データに基づいた一致チェックのレベルを決定する必要があることを指定します。 この設定は、生成された XML が整形式の XML ドキュメントであるかフラグメントであるかがわからない場合に便利です。<br /><br /> ドキュメントの一致チェックは、次の場合に適用されます。<br /><br /> - <xref:System.Xml.XmlWriter.WriteStartDocument%2A>メソッドが呼び出された場合。<br />-DTD 情報が記述されている場合。<br /><br /> XML データに次のいずれかが含まれている場合、フラグメント一致チェックが適用されます。<br /><br /> -ルートレベルのテキスト、CDATA、または EntityReference ノード。<br />-ルートレベルに複数の要素があります。<br />-ルートレベルに要素がありません。<br /><br /> テキスト ノードを書き出そうとしてルート レベルに DTD があるなどの矛盾がある場合には <xref:System.Xml.XmlException> がスローされます。<br /><br /> 別<xref:System.Xml.XmlWriter>のオブジェクトをラップしている場合、外側のオブジェクトは追加の準拠チェックを実行しません。これは、基になるオブジェクトに残されます。|  
  
 指定した準拠レベルに違反する情報が XML ライターによって検出されると、例外がスローされます。 場合によっては、XML ライターが準拠エラーを自動的に修正します。 たとえば、ライターは、例外をスローせずに、閉じられていない属性を閉じます。 次の表は、各設定でさまざまな準拠違反がどのように処理されるかを示しています。  
  
|条件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|DTD 情報が見つかりました。|この設定の違反ではありません。 ただし、XML ライターは DTD をチェックしません。ユーザーは、DTD が整形式であることを確認する必要があります。|<xref:System.Xml.XmlException>がスローされます。|ドキュメントの一致チェックが適用されます。|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> が呼び出されます。|この設定の違反とは見なされません。|<xref:System.Xml.XmlException>がスローされます。|ドキュメントの一致チェックが適用されます。|  
|<xref:System.Xml.XmlWriter.WriteStartDocument%2A> は複数回呼び出されます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
|テキスト値が最上位レベルに表示されます (要素ノードまたは属性ノードの下にはありません)。|<xref:System.Xml.XmlException>がスローされます。|違反とは見なされません。|フラグメント一致チェックが適用されます。|  
|最上位レベルに複数の要素または要素は表示されません。|<xref:System.Xml.XmlException>がスローされます。|違反とは見なされません。|フラグメント一致チェックが適用されます。|  
|最上位の項目は空白です。|違反とは見なされません。|違反とは見なされません。|違反とは見なされません。|  
|<xref:System.Xml.XmlWriter.WriteEndAttribute%2A>は、属性ノードを終了するために呼び出されません。|XML ライターによって修正されます。|XML ライターによって修正されます。|XML ライターによって修正されます。|  
|XML ライターが不適切に入れ子にされた状態にあります<xref:System.Xml.XmlWriter.WriteStartElement%2A> (たとえば、呼び出しの<xref:System.Xml.XmlWriter.WriteEndAttribute%2A>後にが続きます)。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
|最上位レベルの項目は属性です。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
|複数の連続したテキスト ノードがある。|違反とは見なされませんが、テキストノードを連結するのはユーザーの責任です。|違反とは見なされませんが、テキストノードを連結するのはユーザーの責任です。|違反とは見なされませんが、テキストノードを連結するのはユーザーの責任です。|  
|同じ名前空間プレフィックスが要素内で 2 回宣言されている。|XML ライターは、2番目の名前空間の新しいプレフィックスを生成します。|XML ライターは、2番目の名前空間の新しいプレフィックスを生成します。|XML ライターは、2番目の名前空間の新しいプレフィックスを生成します。|  
|<xref:System.Xml.XmlWriter.WriteStartElement%2A>は、そのスコープ内で宣言されていないプレフィックスと名前空間を指定します。または、プレフィックスが別の名前空間に関連付けられています。|XML ライターは、必要な名前空間ノードを書き込みます。|XML ライターは、必要な名前空間ノードを書き込みます。|XML ライターは、必要な名前空間ノードを書き込みます。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>プレフィックスと、そのスコープ内で宣言されていない名前空間を指定します。|XML ライターは、必要な名前空間ノードを書き込みます。|XML ライターは、必要な名前空間ノードを書き込みます。|XML ライターは、必要な名前空間ノードを書き込みます。|  
|<xref:System.Xml.XmlWriter.WriteStartAttribute%2A>プレフィックスと名前空間を指定しますが、プレフィックスは別のスコープ内の名前空間に関連付けられています。|XML ライターは、指定されたプレフィックスを無視し、正しいプレフィックスを検索するか、新しいプレフィックスを生成します。|XML ライターは、指定されたプレフィックスを無視し、正しいプレフィックスを検索するか、新しいプレフィックスを生成します。|XML ライターは、指定されたプレフィックスを無視し、正しいプレフィックスを検索するか、新しいプレフィックスを生成します。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A>は、スコープ内に存在しない名前空間を使用して要素の内容を書き込むために使用されます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
|<xref:System.Xml.XmlWriter.WriteQualifiedName%2A>は、スコープ内に存在しない名前空間を使用して属性の内容を書き込むために使用されます。|XML ライターは、必要な名前空間宣言を書き込みます。|XML ライターは、必要な名前空間宣言を書き込みます。|XML ライターは、必要な名前空間宣言を書き込みます。|  
|属性`xml:space`に有効な値が含まれていません。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
|無効な名前が検出される。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
|プレフィックス`xml`が URI と一致しません。|XML ライターは、この種類の違反を確認しません。|XML ライターは、この種類の違反を確認しません。|XML ライターは、この種類の違反を確認しません。|  
|プレフィックス`xml`が URI とhttp://www.w3.org/XML/1998/namespace一致しません。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
|プレフィックス`xmlns`またはローカル名が URI と一致しません。|XML ライターは、この種類の違反を確認しません。|XML ライターは、この種類の違反を確認しません。|XML ライターは、この種類の違反を確認しません。|  
|プレフィックス`xmlns`またはローカル名がhttp://www.w3.org/2000/xmlns URI と一致しません。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|<xref:System.Xml.XmlException>がスローされます。|  
  
   
  
## Examples  
 次の例では、XML フラグメントをメモリストリームに書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoNotEscapeUriAttributes">
      <MemberSignature Language="C#" Value="public bool DoNotEscapeUriAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoNotEscapeUriAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property DoNotEscapeUriAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DoNotEscapeUriAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DoNotEscapeUriAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.DoNotEscapeUriAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> が URI 属性をエスケープしないかどうかを示す値を取得または設定します。</summary>
        <value><see langword="true" />が URI 属性をエスケープしない場合は。 <see langword="false" />それ以外の場合は。 <see cref="T:System.Xml.XmlWriter" /> 既定値は、<see langword="false" /> です。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); void set(System::Text::Encoding ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding with get, set" Usage="System.Xml.XmlWriterSettings.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>使用するテキスト エンコーディングの種類を取得または設定します。</summary>
        <value>使用するテキスト エンコーディング。 既定値は、<see langword="Encoding.UTF8" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 は<xref:System.Xml.XmlWriter> 、文字単位ではなく、文字のバッファーをすべて一度にエンコードします。 例外は、エンコードエラーが<xref:System.Xml.XmlWriter.Flush%2A>発生した場合にメソッドが呼び出されるとスローされます。  
  
 プロパティは、指定<xref:System.Xml.XmlWriter> <xref:System.IO.Stream>したまたは指定したファイル名を使用して作成されたインスタンスにのみ適用されます。 <xref:System.Xml.XmlWriterSettings.Encoding%2A> 指定<xref:System.Xml.XmlWriter> <xref:System.IO.TextWriter>した <xref:System.Xml.XmlWriterSettings.Encoding%2A> を使用してインスタンスを作成した場合、プロパティは、基になるのエンコーディングによってオーバーライドされます。 <xref:System.IO.TextWriter> たとえば、このプロパティが特定<xref:System.Xml.XmlWriter>のに対して Unicode (utf-16) に設定されていても、基になるライターが (から<xref:System.IO.TextWriter>派生した) で、 <xref:System.IO.StreamWriter>エンコーディングが UTF8 に設定されている場合、出力は utf-8 でエンコードされます。  
  
 インスタンスが他の出力パラメーターを使用して作成<xref:System.Xml.XmlWriterSettings.Encoding%2A>された場合、プロパティは無視されます。 <xref:System.Xml.XmlWriter>  
  
 次に例を示します。  
  
-   <xref:System.Xml.XmlWriterSettings.Encoding%2A> の既定値は `Encoding.UTF8`です。  
  
-   がに`Encoding.Unicode`設定され、 <xref:System.IO.StreamWriter>のエンコーディングに<xref:System.Xml.XmlWriterSettings.Encoding%2A>よって設定がオーバーライドされます。 <xref:System.IO.StreamWriter>  
  
-   出力はになり`Encoding.Unicode`ます。  
  
```csharp  
using (StreamWriter output =  
    new StreamWriter(new FileStream("Xml01.xml", FileMode.Create), Encoding.Unicode))  
{  
    using (XmlWriter xmlWriter =  
        XmlWriter.Create(output, new XmlWriterSettings()))  
    {  
        xmlWriter.WriteStartDocument();  
        xmlWriter.WriteStartElement("Root");  
        xmlWriter.WriteEndElement();  
        xmlWriter.WriteEndDocument();  
    }  
}  
```  
  
> [!IMPORTANT]
>  信頼されて<xref:System.Text.Encoding>いないソースからのオブジェクトは受け入れないでください。  
  
   
  
## Examples  
 次の例では、XML フラグメントをメモリストリームに書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="public bool Indent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Indent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.Indent" />
      <MemberSignature Language="VB.NET" Value="Public Property Indent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Indent { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Indent : bool with get, set" Usage="System.Xml.XmlWriterSettings.Indent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>要素にインデントを設定するかどうかを示す値を取得または設定します。</summary>
        <value>各要素を新しい行に書き込んでインデントを設定する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、テキスト<xref:System.Xml.XmlWriter>コンテンツを出力するインスタンスにのみ適用されます。それ以外の場合、この設定は無視されます。  
  
 要素に混合コンテンツが含まれていない限り、要素はインデントされます。 メソッドまた<xref:System.Xml.XmlWriter.WriteString%2A> <xref:System.Xml.XmlWriter.WriteWhitespace%2A>はメソッドを呼び出して、 <xref:System.Xml.XmlWriter>混合要素コンテンツを書き出すと、はインデントを停止します。 混合コンテンツ要素が閉じられると、インデントが解除されます。  
  
   
  
## Examples  
 次の例では<xref:System.Xml.XmlWriter> 、インデントにタブ文字を使用するオブジェクトを作成します。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentChars">
      <MemberSignature Language="C#" Value="public string IndentChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IndentChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.IndentChars" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IndentChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChars : string with get, set" Usage="System.Xml.XmlWriterSettings.IndentChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>インデント処理を行うときに使用する文字列を取得または設定します。 この設定は、<see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティが <see langword="true" /> に設定されている場合に使用します。</summary>
        <value>インデント処理を行うときに使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は 2 つのスペースです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、テキスト<xref:System.Xml.XmlWriter>コンテンツを出力するインスタンスにのみ適用されます。それ以外の場合、この設定は無視されます。 インデント<xref:System.Xml.XmlWriter>文字によって無効な XML が生成される場合、は例外をスローします。  
  
   
  
## Examples  
 次の例では<xref:System.Xml.XmlWriter> 、インデントにタブ文字を使用するオブジェクトを作成します。  
  
 [!code-csharp[XmlWriterSettings.Indent#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.Indent/CS/writeindent.cs#1)]
 [!code-vb[XmlWriterSettings.Indent#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.Indent/VB/writeindent.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlWriterSettings.IndentChars" /> に代入された値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NamespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NamespaceHandling NamespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NamespaceHandling NamespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NamespaceHandling As NamespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NamespaceHandling NamespaceHandling { System::Xml::NamespaceHandling get(); void set(System::Xml::NamespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceHandling : System.Xml.NamespaceHandling with get, set" Usage="System.Xml.XmlWriterSettings.NamespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NamespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML コンテンツの書き込み時に、重複する名前空間宣言を <see cref="T:System.Xml.XmlWriter" /> で削除するかどうかを示す値を取得または設定します。 既定の動作では、ライターの名前空間リゾルバーに存在するすべての名前空間宣言がライターによって出力されます。</summary>
        <value><see cref="T:System.Xml.NamespaceHandling" /> で重複する名前空間宣言を削除するかどうかを指定するための <see cref="T:System.Xml.XmlWriter" /> 列挙体。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineChars">
      <MemberSignature Language="C#" Value="public string NewLineChars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NewLineChars" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineChars As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ NewLineChars { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineChars : string with get, set" Usage="System.Xml.XmlWriterSettings.NewLineChars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>改行に使用する文字列を取得または設定します。</summary>
        <value>改行に使用する文字列。 これには任意の文字列値を設定できます。 ただし、有効な XML にするには、空白、タブ、復帰、ライン フィードなどの有効な空白文字だけを指定する必要があります。 既定値は<c>\r\n</c> (キャリッジリターン、改行) です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、テキスト<xref:System.Xml.XmlWriter>コンテンツを出力するインスタンスにのみ適用されます。それ以外の場合、この設定は無視されます。 改行<xref:System.Xml.XmlWriter>文字によって無効な XML が生成される場合、は例外をスローします。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Xml.XmlWriterSettings.NewLineChars" /> に代入された値が <see langword="null" /> です。</exception>
      </Docs>
    </Member>
    <Member MemberName="NewLineHandling">
      <MemberSignature Language="C#" Value="public System.Xml.NewLineHandling NewLineHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.NewLineHandling NewLineHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineHandling As NewLineHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::NewLineHandling NewLineHandling { System::Xml::NewLineHandling get(); void set(System::Xml::NewLineHandling value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineHandling : System.Xml.NewLineHandling with get, set" Usage="System.Xml.XmlWriterSettings.NewLineHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.NewLineHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>出力内の改行を正規化するかどうかを示す値を取得または設定します。</summary>
        <value><see cref="T:System.Xml.NewLineHandling" /> 値のいずれか。 既定値は、<see cref="F:System.Xml.NewLineHandling.Replace" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この設定は、テキストの内容または属性値を書き込むときに適用されます。 それぞれの値<xref:System.Xml.NewLineHandling>について以下に説明します。  
  
-   この設定により<xref:System.Xml.XmlWriter> 、は、文字エンティティを使用した正規化<xref:System.Xml.XmlReader>によって保存されない新しい行文字を置き換えるようにに指示します。 <xref:System.Xml.NewLineHandling.Entitize> これは、正規化<xref:System.Xml.XmlReader>によって出力が読み込まれるラウンドトリップシナリオで役立ちます。 から`\t` `\r` のラウンド <xref:System.Xml.XmlReader> トリップ時の属性値には、追加の正規化規則が適用されます。また、で正規化された場合、属性値のスペースで置き換えられます。 `\n`  
  
-   この<xref:System.Xml.NewLineHandling.Replace>設定は、 <xref:System.Xml.XmlWriter>新しい行文字を Microsoft Windows `\r\n`オペレーティングシステムで使用される新しい行形式と置き換えるようにに指示します。 これにより、メモ帳または Microsoft Word アプリケーションによってファイルが正しく表示されるようになります。 また、この設定により、属性の新しい行が文字エンティティに置き換えられ、文字が保持されます。 これが既定値です。  
  
-   設定<xref:System.Xml.NewLineHandling.None>は、 <xref:System.Xml.XmlWriter>入力を変更せずに残すようにに指示します。 この設定は、改行処理が不要な場合に使用します。 これは、正規化を行わない (たとえば<xref:System.Xml.XmlReader> <xref:System.Xml.XmlTextReader> 、既定の設定を持つ) によって出力が読み込まれる場合に便利です。  
  
 次の表は、 <xref:System.Xml.XmlWriter.WriteString%2A> <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>プロパティの設定に応じて、入力値が指定された場合のメソッドの出力を示しています。 これらの表は、テキストコンテンツの書き込み時と属性値の書き込み時の出力を示しています。  
  
 `Text Node Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|含まれる|& #D; \n|\n|& #D;|\t|  
|Replace|\r\n|\r\n|\r\n|\t|  
|なし|\r\n|\n|\r|\t|  
  
 `Attribute Value:`  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|含まれる|& #D; & #A;|& #A;|& #D;|&\#ませ|  
|Replace|& #D; & #A;|& #A;|& #D;|&\#ませ|  
|なし|\r\n|\n|\r|\t|  
  
> [!NOTE]
>  は<xref:System.Xml.XmlWriter> 、CDATA セクション、コメント、または処理命令内にコンテンツを書き込むときに、次の動作をします。 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>プロパティがに<xref:System.Xml.NewLineHandling.Entitize>設定されている場合でも、新しい行は文字エンティティには置き換えられません。 これは、文字エンティティが CDATA セクション、コメント、または処理命令で認識されないためです。 プロパティがまたは<xref:System.Xml.NewLineHandling.None> <xref:System.Xml.NewLineHandling.Replace>に設定されている場合、動作はテキストノードの値を書き込む場合と同じです。 <xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>  
  
 次の表では、各<xref:System.Xml.XmlReader>空白文字の入力に対して正規化が返す内容について説明します。 詳細については、W3C 勧告『 [XML 1.0 』](https://www.w3.org/TR/REC-xml/)の2.11 および3.3.3 のセクションを参照してください。  
  
> [!NOTE]
>  標準化されたリーダー <xref:System.Xml.XmlReader>は、 <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>メソッドによって作成された任意のオブジェクトです。 これらのオブジェクトは、常に改行の正規化と属性の完全な正規化を実行します。 プロパティが<xref:System.Xml.XmlTextReader> に `true` 設定されている場合は、オブジェクトを正規化されたリーダーにすることも<xref:System.Xml.XmlTextReader.Normalization%2A>できます。  
  
||\r\n|\n|\r|\t|  
|-|------------|---------|---------|---------|  
|テキストノードの値|\n|\n|\n|\t|  
|属性の値|1つのスペース|1つのスペース|1つのスペース|1つのスペース|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NewLineOnAttributes">
      <MemberSignature Language="C#" Value="public bool NewLineOnAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NewLineOnAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberSignature Language="VB.NET" Value="Public Property NewLineOnAttributes As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NewLineOnAttributes { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.NewLineOnAttributes : bool with get, set" Usage="System.Xml.XmlWriterSettings.NewLineOnAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>新しい行に属性を書き込むかどうかを示す値を取得または設定します。</summary>
        <value>個々の行に属性を書き込む場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。  
  
 <block subset="none" type="note"><para>  
 <see cref="P:System.Xml.XmlWriterSettings.Indent" /> プロパティ値が <see langword="false" /> の場合、この設定は無効です。  
  
</para></block>  
  
 <see cref="P:System.Xml.XmlWriterSettings.NewLineOnAttributes" /> を <see langword="true" /> に設定すると、各属性は、新しい行にインデントを 1 レベル増やして記述されます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、テキスト<xref:System.Xml.XmlWriter>コンテンツを出力するインスタンスにのみ適用されます。それ以外の場合、この設定は無視されます。  
  
   
  
## Examples  
 次の例では<xref:System.Xml.XmlWriter> 、XML ファイルへの書き込みを行い、各属性を新しい行に書き込むを作成します。  
  
 [!code-csharp[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/CS/writenewlineattrs.cs#1)]
 [!code-vb[XmlWriterSettings.NewLineOnAttributes#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.NewLineOnAttributes/VB/writenewlineattrs.vb#1)]  
  
 このサンプルでは、次の出力が生成されます。  
  
```xml  
<order  
  orderID="367A54"  
  date="2001-05-03">  
  <price>19.95</price>  
</order>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OmitXmlDeclaration">
      <MemberSignature Language="C#" Value="public bool OmitXmlDeclaration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OmitXmlDeclaration" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberSignature Language="VB.NET" Value="Public Property OmitXmlDeclaration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OmitXmlDeclaration { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.OmitXmlDeclaration : bool with get, set" Usage="System.Xml.XmlWriterSettings.OmitXmlDeclaration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML 宣言を省略するかどうかを示す値を取得または設定します。</summary>
        <value>XML 宣言を省略する場合は <see langword="true" />、それ以外の場合は <see langword="false" />。 既定値は <see langword="false" /> で、XML 宣言が書き込まれます。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、テキスト<xref:System.Xml.XmlWriter>コンテンツを出力するインスタンスにのみ適用されます。それ以外の場合、この設定は無視されます。  
  
 が<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> に `false` 設定されている場合、XML 宣言は自動的に書き込まれます。  
  
 が<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>に設定され<xref:System.Xml.ConformanceLevel.Document>ている <xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A> 場合でも、がに設定されている場合、XML 宣言は常に書き込まれます。 `true`  
  
 がに<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A> <xref:System.Xml.ConformanceLevel.Fragment>設定されている場合、XML 宣言は書き込まれません。 を呼び出し<xref:System.Xml.XmlWriter.WriteProcessingInstruction%2A>て、XML 宣言を明示的に書き込むことができます。  
  
   
  
## Examples  
 次の例では、XML フラグメントをメモリストリームに書き込みます。  
  
 [!code-csharp[XmlWriterSettings.CloseOutput#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriterSettings.CloseOutput/CS/writestream2.cs#1)]
 [!code-vb[XmlWriterSettings.CloseOutput#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriterSettings.CloseOutput/VB/writestream2.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputMethod">
      <MemberSignature Language="C#" Value="public System.Xml.XmlOutputMethod OutputMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlOutputMethod OutputMethod" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OutputMethod As XmlOutputMethod" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlOutputMethod OutputMethod { System::Xml::XmlOutputMethod get(); };" />
      <MemberSignature Language="F#" Value="member this.OutputMethod : System.Xml.XmlOutputMethod" Usage="System.Xml.XmlWriterSettings.OutputMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlOutputMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> 出力をシリアル化するために使用するメソッドを取得します。</summary>
        <value><see cref="T:System.Xml.XmlOutputMethod" /> 値のいずれか。 既定値は、<see cref="F:System.Xml.XmlOutputMethod.Xml" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは、出力をシリアル化するために使用するメソッドを指定します。 出力は、HTML ルール、XML 1.0 ルールなどを使用してシリアル化できます。 この設定は、XSLT プロセッサによって設定され、Visual Studio によって内部的に使用されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlWriterSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlWriterSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定クラスのメンバーを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表は、の<xref:System.Xml.XmlWriterSettings>インスタンスの既定のプロパティ値を示しています。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlWriterSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlWriterSettings.CloseOutput%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlWriterSettings.Encoding%2A>|`Encoding.UTF8`.|  
|<xref:System.Xml.XmlWriterSettings.Indent%2A>|`false`。|  
|<xref:System.Xml.XmlWriterSettings.IndentChars%2A>|2つのスペース。|  
|<xref:System.Xml.XmlWriterSettings.NewLineChars%2A>|`\r\n`。|  
|<xref:System.Xml.XmlWriterSettings.NewLineHandling%2A>|<xref:System.Xml.NewLineHandling.Replace>.|  
|<xref:System.Xml.XmlWriterSettings.NewLineOnAttributes%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.OmitXmlDeclaration%2A>|`false`.|  
|<xref:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose%2A>|`true`。|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocumentOnClose">
      <MemberSignature Language="C#" Value="public bool WriteEndDocumentOnClose { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WriteEndDocumentOnClose" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberSignature Language="VB.NET" Value="Public Property WriteEndDocumentOnClose As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WriteEndDocumentOnClose { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WriteEndDocumentOnClose : bool with get, set" Usage="System.Xml.XmlWriterSettings.WriteEndDocumentOnClose" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlWriter" /> メソッドが呼び出されるときに <see cref="M:System.Xml.XmlWriter.Close" /> がすべての閉じられていない要素タグに終了タグを追加するかどうかを示す値を取得または設定します。</summary>
        <value>閉じられていない要素タグがすべて閉じられる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は <see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このフラグをに`false`設定した場合、出力 XML ファイルの形式が適切でない可能性があります。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
