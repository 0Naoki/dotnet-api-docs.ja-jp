<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata><Meta Name="ms.openlocfilehash" Value="897f2dbabe83aff7ed32611692dfd4d8665bbf57" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53476713" /></Metadata><TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><see cref="T:System.Xml.XmlReader" /> メソッドで作成された <see cref="Overload:System.Xml.XmlReader.Create" /> オブジェクトでサポートする一連の機能を指定します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用する、<xref:System.Xml.XmlReader.Create%2A>メソッドを取得する<xref:System.Xml.XmlReader>インスタンス。 このメソッドを使用して、<xref:System.Xml.XmlReaderSettings>クラスで実装する機能を指定、<xref:System.Xml.XmlReader>オブジェクトが作成されます。  
  
 「解説」セクションを参照して、<xref:System.Xml.XmlReader>と<xref:System.Xml.XmlReader.Create%2A>一致チェック検証、およびその他一般的なシナリオを使用する設定についてのページを参照します。 参照してください、<xref:System.Xml.XmlReaderSettings.%23ctor>既定の設定の一覧については、コンス トラクター。  
  
## <a name="security-considerations"></a>セキュリティの考慮事項  
 使用する場合は、次を検討してください、<xref:System.Xml.XmlReaderSettings>クラス。  
  
-   <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> オブジェクトの <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> および <xref:System.Xml.XmlReaderSettings> の検証フラグは、既定では設定されていません。 これらのフラグが設定されていると、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトの <xref:System.Xml.XmlReaderSettings> が <xref:System.Xml.XmlReader> のインスタンス ドキュメント中に出現したスキーマの場所を解決するために使用されます。 場合、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>オブジェクトが`null`、スキーマの場所が解決しない場合でも、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>と<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>検証フラグを設定します。  
  
-   検証を実行しているときにスキーマを追加すると新しい型が追加されるため、検証しているドキュメントの検証結果を変えることができます。 結果として、信頼できるソースからの外部スキーマだけが解決されるようにする必要があります。  
  
-   検証エラー メッセージは、コンテンツ モデルの機密情報を公開できます。 検証エラーと警告メッセージを処理を使用して、<xref:System.Xml.Schema.ValidationEventHandler>デリゲート、またはとして公開されます、<xref:System.Xml.Schema.XmlSchemaValidationException>にイベント ハンドラーが指定されていない場合、<xref:System.Xml.XmlReaderSettings>オブジェクト (検証の警告が発生しない、<xref:System.Xml.Schema.XmlSchemaValidationException>がスローされます)。 このコンテンツ モデルの情報は、信頼されていないシナリオでない公開しないでください。 検証の警告メッセージが既定で抑制され、設定によって報告できる、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings>フラグ。  
  
-   <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>のプロパティ、<xref:System.Xml.Schema.XmlSchemaValidationException>例外の原因となったスキーマ ファイルへの URI のパスを返します。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>信頼されていないシナリオで、プロパティを公開しない必要があります。  
  
-   無効にすると、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>検証、信頼できない大きな XML ドキュメントの大きな部分 id 制約を含むスキーマに対して高可用性のシナリオで文書のフラグ (既定で有効) をお勧めします。  
  
-   <xref:System.Xml.XmlReaderSettings> オブジェクトはユーザー資格情報など、重要な情報を含むことがあります。 <xref:System.Xml.XmlReaderSettings> オブジェクトをキャッシュしたり、<xref:System.Xml.XmlReaderSettings> オブジェクトをあるコンポーネントから別のコンポーネントに渡したりする場合には注意が必要です。  
  
-   既定で DTD の処理は無効になっています。 DTD の処理を有効にした場合は、信頼されていないソースから可能なサービス拒否攻撃の Dtd を含む意識する必要があります。 使用して、<xref:System.Xml.XmlSecureResolver>リソース制限を<xref:System.Xml.XmlReader>にアクセスできます。  
  
-   信頼できないソースからの <xref:System.Xml.NameTable>、<xref:System.Xml.XmlNamespaceManager>、および <xref:System.Xml.XmlResolver> オブジェクトなどのサポート コンポーネントは受け入れないようにします。  
  
-   <xref:System.Xml.XmlReader> を使用するアプリケーションのメモリ使用量が、解析済み XML ドキュメントのサイズに相関する場合があります。 非常に大きな XML ドキュメントを送信して解析させることは、サービス拒否攻撃 (DoS) の一種です。 設定によって解析できるドキュメントのサイズを制限することができます、<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>プロパティとエンティティの展開の設定により生成される文字数を制限、<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>プロパティ。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Xml.XmlReader>を使用して、<xref:System.Xml.XmlUrlResolver>のために必要な資格情報を使用します。  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/data/xml/index.md">XML ドキュメントと XML データ</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表のインスタンスの初期プロパティ値<xref:System.Xml.XmlReaderSettings>します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (エンティティの展開から生成される文字の数に制限はありません)。|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (制限はありません、XML ドキュメントのサイズ)。|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`。|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`。 このプロパティは今後使用しません。 代わりに、<xref:System.Xml.XmlTextReader.DtdProcessing%2A> を使用してください。 設定した場合<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>既定値に`true`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>に`Prohibit`します。 設定した場合<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>に`false`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>に`Parse`します。|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|空の <xref:System.Xml.Schema.XmlSchemaSet> オブジェクト。|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>。|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>。|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|新しい <xref:System.Xml.XmlUrlResolver> オブジェクト。|  
  
   
  
## Examples  
 次の例は、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用する設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">XML リゾルバー。</param>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>非同期 <see cref="T:System.Xml.XmlReader" /> メソッドを <see cref="T:System.Xml.XmlReader" /> の特定のインスタンスで使用できるかどうかを取得または設定します。</summary>
        <value>非同期メソッドを使用できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 この値を設定する必要があります`true`新規に作成するときに<xref:System.Xml.XmlReader>非同期を使用する場合にインスタンス<xref:System.Xml.XmlReader>そのインスタンス上のメソッド。 後に、<xref:System.Xml.XmlReader>インスタンスが作成された、<xref:System.Xml.XmlReaderSettings.Async%2A>プロパティは読み取り専用です。 このプロパティの既定値は `false` です。  
  
 このフラグは無視されます、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>オーバー ロードします。 つまり、新規に作成する場合<xref:System.Xml.XmlReader>既存に基づいて<xref:System.Xml.XmlReader>、非同期動作は、入力に依存<xref:System.Xml.XmlReader>、使用することはできませんし、<xref:System.Xml.XmlReaderSettings.Async%2A>非同期動作を変更するフラグ。  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/db854f91-ccef-4035-ae4d-0911fde808c7">Async および Await を使用した非同期プログラミング (C# および Visual Basic)</related>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文字のチェックを行うかどうかを示す値を取得または設定します。</summary>
        <value>文字をチェックする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。  
  
 <block subset="none" type="note"><para>  
 <see cref="T:System.Xml.XmlReader" /> がテキスト データの処理を行う場合は、プロパティの設定に関係なく、XML 名とテキストの内容が有効であることを常にチェックします。 <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> を <see langword="false" /> に設定すると、文字エンティティ参照に対する文字のチェック機能がオフになります。  
  
</para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティは読み取りし、スローの XML データの文字を確認する XML リーダーに指示する<xref:System.Xml.XmlException>任意の文字が有効な XML 文字の範囲外にある場合。 文字チェックが有効な場合は、以下が保証されます。  
  
-   定義されている文字が、有効な XML 文字の範囲内では、 [2.2 文字](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets)W3C XML 1.0 勧告のセクション。  
  
-   定義されているすべての XML 名が有効では、 [2.3 Common Syntactic Constructs](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) W3C XML 1.0 勧告のセクション。  
  
 このプロパティを設定すると`true`、既定の設定は、 <xref:System.Xml.XmlException> XML ファイルには、無効な文字または無効な XML 名が含まれている場合、例外がスローされます (たとえば、要素名を数字で始まる)。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Xml.XmlReaderSettings" /> インスタンスのコピーを作成します。</summary>
        <returns>複製された <see cref="T:System.Xml.XmlReaderSettings" /> オブジェクト。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 複製された<xref:System.Xml.XmlReaderSettings>オブジェクトを元のオブジェクトで設定の影響を与えずに変更できます。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーを閉じるときに基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる必要があるかどうかを示す値を取得または設定します。</summary>
        <value>リーダーを閉じるときに基になるストリームまたは <see cref="T:System.IO.TextReader" /> を閉じる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ストリームのときに、この設定を使用または<xref:System.IO.TextReader>に渡される、<xref:System.Xml.XmlReader.Create%2A>メソッド。 場合は、リーダーを作成した URI を持つ、または、外部ドキュメント型定義を開くときに、常に閉じられている、リーダーが閉じられたときなど、独自の処理用のリーダーでストリームが作成されます。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> が従う準拠のレベルを取得または設定します。</summary>
        <value>XML リーダーが適用する準拠のレベルを指定する列挙値のいずれか。 既定値は、<see cref="F:System.Xml.ConformanceLevel.Document" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 XML リーダーによって作成される、<xref:System.Xml.XmlReader.Create%2A>メソッドは、既定では、次のコンプライアンス要件を満たします。  
  
-   新しい行と属性の値は、W3C に従って正規化されます[XML 1.0 勧告](https://www.w3.org/TR/2006/REC-xml-20060816/)します。  
  
-   すべてのエンティティは自動的に展開します。  
  
-   リーダーは検証されない場合でも、ドキュメント型定義で宣言されている既定の属性は常に追加します。  
  
-   適切な XML 名前空間 URI に割り当てられた XML プレフィックスの宣言が許可されています。  
  
-   1 つの表記名`NotationType`属性宣言と`NmTokens`1 つの`Enumeration`属性宣言は異なります。  
  
 使用することができます、<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>プロパティを確認し、読み込むストリームが整形式 XML 1.0 ドキュメントまたはドキュメント フラグメントの規則に準拠していることを保証します。 データが満たしていない場合、<xref:System.Xml.XmlException>例外がスローされます。 既定値は<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>(ドキュメント レベルの一致)。  
  
 次の 3 つの準拠レベルは次のとおりです。  
  
|設定|説明|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|により、XML データを整形式 XML 1.0 ドキュメントの規則に準拠していること。 このレベルのチェックにより、すべてのプロセッサとして読み取られて、ストリームを処理できることが、[整形式 XML 1.0 ドキュメント](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed)します。<br /><br /> リーダーは以下をチェックします。<br /><br /> -最上位の項目は XML 宣言、ドキュメント型定義 (DTD)、要素、コメント、空白文字、または処理命令以外のノードに必要ありません。<br />XML データには、1 つの最上位の要素ノードが必要です。|  
|<xref:System.Xml.ConformanceLevel.Fragment>|により、XML データを整形式 XML 1.0 ドキュメント フラグメントの規則に準拠していること。<br /><br /> この設定では、複数のルート要素を持つ XML データやトップレベルのテキスト ノードが受け入れられます。 このレベルのチェックにより、すべてのプロセッサとして読み取られて、ストリームを処理できることが、[外部解析エンティティ](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities)します。|  
|<xref:System.Xml.ConformanceLevel.Auto>|リーダーが受信データに基づくの一致チェック レベルを決定する必要がありますを指定します。<br /><br /> XML データに DTD 情報が含まれている場合、ドキュメントの一致チェックが適用されます。<br /><br /> XML データに次のいずれかが含まれている場合、フラグメントの一致チェックが適用されます。<br /><br /> ルート レベルのテキスト、CDATA、またはエンティティ参照ノード。<br />のルート レベルで複数の要素。<br />ルート レベル要素はなし。<br /><br /> ルート レベルにテキスト ノードと DTD があるなどの矛盾がある場合には <xref:System.Xml.XmlException> がスローされます。<br /><br /> この設定は、既存の <xref:System.Xml.XmlReader.Create%2A> に追加機能を追加するために <xref:System.Xml.XmlReader> メソッドが使われた場合のラップ シナリオで使用することができます。 この場合、<xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType>一致チェックは追加されません。 一致チェックはラップされている <xref:System.Xml.XmlReader> に任されます。|  
  
> [!NOTE]
>  XML 1.0 勧告では、DTD がある場合にはドキュメント レベルの一致が必要です。 そのため、リーダーがサポートするために構成されている場合<xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>、XML データには、ドキュメント型定義 (DTD) が含まれていますが、<xref:System.Xml.XmlException>がスローされます。  
  
 ここでは、リーダーの設定に応じて、特定の一致の違反を処理する方法、<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>プロパティ。  
  
|条件|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|テキストまたは型指定された値は、最上位レベルに表示されます。|<xref:System.Xml.XmlException> スローされます。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|複数の要素または要素がないは、最上位に表示されます。|<xref:System.Xml.XmlException> スローされます。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|最上位の項目には空白です。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|最上位の項目は、属性 (テキスト ノードとして認識) です。|<xref:System.Xml.XmlException> スローされます。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|複数の連続したテキスト ノードがある。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|この設定の違反とは見なされません。|  
|同じ名前空間プレフィックスは、2 回、同じローカル スコープで宣言されます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|要素または属性の名前空間は、ローカル スコープに存在しません。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|データには、プレフィックスと名前空間の不一致が含まれています。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|`xml:space` 属性には、無効な値が含まれています。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|無効な名前が検出される。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
|`xml`にプレフィックスは一致しません、 http://www.w3.org/XML/1998/namespace URI。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|<xref:System.Xml.XmlException> スローされます。|  
  
   
  
## Examples  
 次の例では、作成、 <xref:System.Xml.XmlReader> XML フラグメントを読み取るオブジェクト。  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>DTD の処理を決定する値を取得または設定します。</summary>
        <value>DTD の処理を決定する列挙値の 1 つ。 既定値は、<see cref="F:System.Xml.DtdProcessing.Prohibit" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ドキュメント型定義 (DTD) 検証は、W3C で定義されている検証制約を使用して実装[Extensible Markup Language (XML) 1.0 (fourth edition) の推奨事項](https://www.w3.org/TR/2006/REC-xml-20060816/)します。 Dtd では、正式な文法を使用して、構造体と準拠する XML ドキュメントの構文を記述するにはこれらは、コンテンツと、XML ドキュメントに使用できる値を指定します。  
  
 このプロパティは、次の値のいずれか 1 つをとります。  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> DTD の処理を有効にするには  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> スローする、 <xref:System.Xml.XmlException> DTD を検出するときに例外。  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> DTD せずに警告や例外処理を無効にします。  
  
 DTD を基準として検証を実行する場合、<xref:System.Xml.XmlReader> は、XML ドキュメントの DOCTYPE 宣言で定義されている DTD を使用します。 DOCTYPE 宣言では、インラインの DTD を指定するか、または外部 DTD ファイルへの参照を指定できます。 DTD に対して XML ファイルを検証するには。  
  
-   <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> プロパティを `DtdProcessing.Parse.` に設定します。  
  
-   <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> プロパティを `ValidationType.DTD`に設定します。  
  
-   DTD が認証を必要とするネットワーク上に格納された外部ファイルの場合は、<xref:System.Xml.XmlResolver> オブジェクトを必要な資格情報と共に <xref:System.Xml.XmlReader.Create%2A> メソッドに渡します。  
  
> [!IMPORTANT]
>  場合、<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A>プロパティに設定されて<xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>、 <xref:System.Xml.XmlReader> Dtd は報告されません。 これは、DTD/DOCTYPE が出力時に失われるということを意味します。  
  
   
  
## Examples  
 DTD ファイルを使用して XML ファイルの検証を行う例を次に示します。  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>入力  
 この例は、`itemDTD.xml` ファイルを入力として使用します。  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コメントを無視するかどうかを示す値を取得または設定します。</summary>
        <value>コメントを無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定`true`リーダーから返される複数の連続したテキスト ノードで発生することができます。 これは検証には影響しません。  
  
   
  
## Examples  
 次の例は、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用する設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>処理命令を無視するかどうかを示す値を取得または設定します。</summary>
        <value>処理命令を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定`true`リーダーから返される複数の連続したテキスト ノードで発生することができます。 これは検証には影響しません。  
  
   
  
## Examples  
 次の例は、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用する設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>意味のない空白を無視するかどうかを示す値を取得または設定します。</summary>
        <value>空白を無視する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 重要とは見なされません空白文字には、スペース、タブ、および読みやすくするためのマークアップの分離に使用される行の空白行が含まれています。 この例では、要素のコンテンツ内の空白です。  
  
 このプロパティの設定では、混合コンテンツ モード、または空白文字の範囲内で行われる内のマークアップ間の空白文字には影響しません、`xml:space='preserve'`属性。  
  
   
  
## Examples  
 次の例は、処理命令、コメント、および意味のない空白を除去するリーダーを構築するために使用する設定オブジェクトを作成します。  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
        <value>行番号オフセット。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>設定は、ポイントを決定します。 場所、<xref:System.Xml.IXmlLineInfo.LineNumber%2A>プロパティは、カウントを開始します。 これは、大きなドキュメント内の XML データが埋め込まれている場合に便利です。 などの場合は、XML データは、大きなドキュメントに埋め込まれたドキュメントの行番号 101 のデータの開始、100 行目で、リーダーを開始することを指定する場合があります。 そのため、リーダーは、XML の最初の行を解析中に例外をスローしました、これは 1 行目ではなく、101 行として行番号レポートします。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> オブジェクトの行番号オフセットを取得または設定します。</summary>
        <value>ラインの位置のオフセット。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>設定は、ポイントを決定します。 場所、<xref:System.Xml.IXmlLineInfo.LinePosition%2A>プロパティは、カウントを開始します。 これは、大きなドキュメント内で、XML データが埋め込まれ、XML の先頭に新しい行がない場合に便利です。 ここでは、リーダーは、XML の解析中に例外をスローする場合は、メインのドキュメントを基準と、XML フラグメントの基準としただけでなく、行の位置を返すこと。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>エンティティの展開時に許容されるドキュメント内の最大文字数を示す値を取得または設定します。</summary>
        <value>エンティティの展開時に許容される最大文字数。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ゼロ (0) の値は、エンティティの展開から生成される文字の数に制限がないことを意味します。 0 以外の値には、エンティティの展開につながる文字の最大数を指定します。  
  
 リーダーは、拡張サイズは、このプロパティを超えるようなエンティティを含むドキュメントを読み取ろうとすると場合、<xref:System.Xml.XmlException>がスローされます。  
  
 このプロパティを使用すると、サービス拒否攻撃を軽減するために、攻撃者がエンティティの展開を使用してメモリの制限を超える XML ドキュメントを送信します。 エンティティの展開から生成される文字を制限することで、攻撃を検出し、確実に回復できます。  
  
   
  
## Examples  
 次のコードでは、このプロパティを設定し、設定した制限より大きいサイズに展開されるエンティティを含むドキュメントの解析を試みます。 実際のシナリオで、まだ有効なドキュメントを処理するために十分な大きさの値にこの制限の悪意のあるドキュメントからの脅威を制限するのに十分な小さな設定すると。  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    "]>" + Environment.NewLine + _  
    "<Root>Content &anEntity;</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD  
settings.MaxCharactersFromEntities = 30  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 この例を実行すると、次の出力が生成されます。  
  
```  
There is an error in XML document (MaxCharactersFromEntities, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XML ドキュメントの最大文字数を示す値を取得または設定します。 ゼロ (0) の値は、XML ドキュメントのサイズに制限がないことを示します。 0 以外の値は、最大サイズを文字数で示します。</summary>
        <value>XML ドキュメント内の最大文字数。 既定値は 0 です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 ゼロ (0) の値は、解析済みドキュメント内の文字の数に制限がないことを意味します。 0 以外の値には、解析できる文字の最大数を指定します。  
  
 ドキュメントの最大文字数には、エンティティの展開から生成される文字の数が含まれています。  
  
 リーダーが、このプロパティを超えるサイズのドキュメントの読み取りを試みると、<xref:System.Xml.XmlException>がスローされます。  
  
 このプロパティを使用すると、サービス拒否攻撃を軽減するために、攻撃者が非常に大きな XML ドキュメントを送信します。 ドキュメントのサイズを制限することで、攻撃を検出し、確実に回復できます。  
  
   
  
## Examples  
 次のコードでは、このプロパティを設定し、制限を超えるドキュメントの解析を試みます。 実際のシナリオで、まだ有効なドキュメントを処理するために十分な大きさの値にこの制限の悪意のあるドキュメントからの脅威を制限するのに十分な小さな設定すると。  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 このコードを実行すると、次の出力が生成されます。  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>最小単位に分割された文字列の比較に使用する <see cref="T:System.Xml.XmlNameTable" /> を取得または設定します。</summary>
        <value>この <see cref="T:System.Xml.XmlNameTable" /> オブジェクトを使用して作成されたすべての <see cref="T:System.Xml.XmlReader" /> インスタンスで使用する、最小単位に分割されたすべての文字列を格納する <see cref="T:System.Xml.XmlReaderSettings" />。  
  
既定値は、<see langword="null" /> です。 この値が <see langword="null" /> の場合、作成された <see cref="T:System.Xml.XmlReader" /> インスタンスは、新しい空の <see cref="T:System.Xml.NameTable" /> を使用します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このプロパティを設定、<xref:System.Xml.XmlNameTable>インスタンスのすべての間で共通の名前テーブルを共有する場合、作成した<xref:System.Xml.XmlReader>インスタンス。  
  
> [!NOTE]
>  <xref:System.Xml.NameTable> クラスはスレッドセーフではありません。 間の共有したがってできない<xref:System.Xml.XmlReader>別のスレッドで同時に実行するオブジェクト。  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>文書型定義 (DTD) 処理を禁止するかどうかを示す値を取得または設定します。 このプロパティは今後使用しません。 代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</summary>
        <value>DTD 処理を禁止する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="true" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 設定すると`true`、<xref:System.Xml.XmlReader>スロー、 <xref:System.Xml.XmlException> DTD コンテンツが発生したとき。 サービス拒否攻撃が懸念される場合や、信頼関係のないソースを扱う場合は、DTD 処理を無効にしてください。  
  
 DTD 処理を有効にした場合、<xref:System.Xml.XmlSecureResolver> を使用して <xref:System.Xml.XmlReader> でアクセス可能なリソースを制限できます。 また、XML 処理に対するメモリと時間の割り当てが制限されるようにアプリケーションをデザインすることもできます。 たとえば、ASP.NET アプリケーション内でタイムアウト制限を設定します。  
  
 このプロパティは今後使用しません。 代わりに、<xref:System.Xml.XmlTextReader.DtdProcessing%2A> を使用してください。 設定した場合<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>既定値に`true`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>に`Prohibit`します。 設定した場合<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>に`false`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>に`Parse`します。  
  
   
  
## Examples  
 次の例では、DTD を使用してデータを検証します。  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 この例では、入力として、itemDTD.xml ファイルを使用します。  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>設定クラスのメンバーを既定値にリセットします。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表のインスタンスの初期プロパティ値<xref:System.Xml.XmlReaderSettings>します。  
  
|プロパティ|初期値|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`。|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`。|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (エンティティの展開から生成される文字の数に制限はありません)。|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (制限はありません、XML ドキュメントのサイズ)。|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`。|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`。 このプロパティは今後使用しません。 代わりに、<xref:System.Xml.XmlTextReader.DtdProcessing%2A> を使用してください。 設定した場合<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>既定値に`true`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>に`Prohibit`します。 設定した場合<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>に`false`設定<xref:System.Xml.XmlTextReader.DtdProcessing%2A>に`Parse`します。|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|空の <xref:System.Xml.Schema.XmlSchemaSet> オブジェクト。|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>。|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>。|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|新しい <xref:System.Xml.XmlUrlResolver> オブジェクト。|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スキーマの検証を行うときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" /> を取得または設定します。</summary>
        <value>スキーマ検証を実行するときに使用する <see cref="T:System.Xml.Schema.XmlSchemaSet" />。 既定値は空の <see cref="T:System.Xml.Schema.XmlSchemaSet" /> オブジェクトです。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
> -   不明または信頼できないソースまたは場所からのスキーマを使用しないでください。 これは、コードのセキュリティが低下します。  
> -   (インライン スキーマを含む) XML スキーマが本質的に、サービス拒否攻撃; に対する脆弱性信頼されていないシナリオでに受け付けられません。  
> -   スキーマ検証エラー メッセージと例外は、コンテンツ モデルまたはスキーマ ファイルの URI のパスに関する機密情報を公開できます。 信頼されていない呼び出し元にこの情報を公開しないように注意します。  
> -   詳細については、「セキュリティの考慮事項」セクションを参照してください。  
  
 <xref:System.Xml.Schema.XmlSchemaSet>クラスは XML スキーマ定義言語 (XSD) スキーマのみをサポートします。 <xref:System.Xml.XmlReader> 作成されたインスタンス、 <xref:System.Xml.XmlReader.Create%2A> Xml-data Reduced (XDR) スキーマ検証を有効にする方法を構成することはできません。  
  
## <a name="security-considerations"></a>セキュリティの考慮事項  
  
-   不明または信頼できないソースからスキーマを使用しないでください。 これは、コードのセキュリティが低下します。 <xref:System.Xml.XmlUrlResolver>クラスは、外部スキーマを解決するのには既定で使用されます。 インクルード、インポートの解像度を無効にして、スキーマの要素を再定義、設定、<xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType>プロパティを`null`します。  
  
-   使用した結果発生した例外、<xref:System.Xml.Schema.XmlSchemaSet>クラスなど、<xref:System.Xml.Schema.XmlSchemaException>クラスは、信頼されていないシナリオで公開してはなりません機密情報を含めることができます。 たとえば、<xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>のプロパティ、<xref:System.Xml.Schema.XmlSchemaException>例外の原因となったスキーマ ファイルへの URI のパスを返します。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>信頼されていないシナリオで、プロパティを公開しない必要があります。 この機密情報が信頼されていないシナリオで公開されないように、例外を正しく処理する必要があります。  
  
   
  
## Examples  
 使用して次の例、<xref:System.Xml.XmlReaderSettings>オブジェクトと<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>にスキーマを XML ドキュメントに関連付けるメソッド。 スキーマを追加、<xref:System.Xml.XmlReaderSettings.Schemas%2A>のプロパティ、<xref:System.Xml.XmlReaderSettings>オブジェクト。 値、<xref:System.Xml.XmlReaderSettings.Schemas%2A>プロパティは、<xref:System.Xml.Schema.XmlSchemaSet>オブジェクト。 スキーマは、XML ドキュメントがスキーマのコンテンツ モデルに準拠していることを検証に使用されます。 スキーマ検証エラーと警告の処理によって、<xref:System.Xml.XmlReaderSettings.ValidationEventHandler>で定義されている、<xref:System.Xml.XmlReaderSettings>オブジェクト。  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 例では、入力として、books.xml ファイルを使用します。  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 例では、入力値として books.xsd ファイルを使用します。  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リーダーが検証エラーを検出すると発生します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 これらのイベントの場合は、XML インスタンス ドキュメントを読み取り中に発生する、<xref:System.Xml.XmlReaderSettings.ValidationType%2A>に設定されている<xref:System.Xml.ValidationType.DTD>または<xref:System.Xml.ValidationType.Schema>します。 場合、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings>で設定が有効になって、<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>プロパティの検証の警告が発生した場合にもこれらのイベントが発生します。  
  
 リーダーが検証の構成し、検証イベント ハンドラーが設定されていない場合、<xref:System.Xml.Schema.XmlSchemaValidationException>すべての検証エラーがスローされます。 (検証の警告が発生しない、<xref:System.Xml.Schema.XmlSchemaValidationException>がスローされます)。  
  
> [!IMPORTANT]
>  検証エラー メッセージは、コンテンツ モデルの機密情報を公開できます。 検証エラーと警告メッセージを処理を使用して、<xref:System.Xml.Schema.ValidationEventHandler>デリゲート、またはとして公開されます、<xref:System.Xml.Schema.XmlSchemaValidationException>にイベント ハンドラーが指定されていない場合、<xref:System.Xml.XmlReaderSettings>オブジェクト (検証の警告が発生しない、<xref:System.Xml.Schema.XmlSchemaValidationException>がスローされます)。 このコンテンツ モデルの情報は、信頼されていないシナリオでない公開しないでください。 検証の警告メッセージが既定で抑制され、設定によって報告できる、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings>フラグ。  
>   
>  <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>のプロパティ、<xref:System.Xml.Schema.XmlSchemaValidationException>例外の原因となったスキーマ ファイルへの URI のパスを返します。 <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A>信頼されていないシナリオで、プロパティを公開しない必要があります。  
  
   
  
## Examples  
 次の例は、インライン スキーマを使用して検証して、検証の警告を表示することも、リーダーを作成するように指定する設定を示しています。 検証イベント ハンドラーを使用して、<xref:System.Xml.Schema.XmlSeverityType>警告とエラーを区別するために列挙します。  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スキーマ検証の設定を示す値を取得または設定します。 この設定は、スキーマを検証する <see cref="T:System.Xml.XmlReader" /> オブジェクトに適用されます (<see langword="ValidationType.Schema" /> に設定されている <see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> プロパティ)。</summary>
        <value>検証オプションを指定する列挙値のビットごとの組み合わせ。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> は既定で有効になります。 <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />、<see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />、および <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> は既定で無効になります。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> オブジェクトの <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> および <xref:System.Xml.XmlReaderSettings> の検証フラグは、既定では設定されていません。 これらのフラグが設定されていると、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトの <xref:System.Xml.XmlReaderSettings> が <xref:System.Xml.XmlReader> のインスタンス ドキュメント中に出現したスキーマの場所を解決するために使用されます。 場合、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>オブジェクトが`null`、スキーマの場所が解決しない場合でも、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>と<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>検証フラグを設定します。  
>   
>  検証を実行しているときにスキーマを追加すると新しい型が追加されるため、検証しているドキュメントの検証結果を変えることができます。 結果として、信頼できるソースからの外部スキーマだけが解決されるようにする必要があります。  
>   
>  無効にすると、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>検証、信頼できない大きな XML ドキュメントの大きな部分 id 制約を含むスキーマに対して高可用性のシナリオで文書のフラグ (既定で有効) をお勧めします。  
  
   
  
## Examples  
 次の例では、インライン XML スキーマに対して XML ファイルを検証を有効にする、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>設定します。 検証の警告を表示する XML リーダーが構成されている、sp も警告が表示、予想されるルート要素にします。  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>入力  
 この例では、inlineSchema.xml ファイルを入力として使用します。  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>出力  
 警告: 一致するスキーマが見つかりません。 検証が実行されませんでした。 要素 'root' のスキーマ情報が見つかりませんでした。  
  
 検証エラー: 要素 'xsdHeadCount:HeadCount' に無効な子要素 'division' を持ちます。 'ID' を指定してください。"  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlReader" /> で読み込むときに検証または型の割り当てを実行するかどうかを示す値を取得または設定します。</summary>
        <value>読み込むときに XmlReader で検証または型の割り当てを実行するかどうかを示す <see cref="T:System.Xml.ValidationType" /> 値の 1 つ。 既定値は、<see langword="ValidationType.None" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の表、<xref:System.Xml.ValidationType>値。  
  
> [!NOTE]
>  <xref:System.Xml.ValidationType.Auto>と<xref:System.Xml.ValidationType.XDR>列挙値が .NET Framework version 2.0 で廃止されています。  
  
|ValidationType|説明|  
|--------------------|-----------------|  
|`DTD`|検証は、ドキュメント型定義 (DTD) を使用して実行されます。 **注:**<xref:System.Xml.XmlReaderSettings.DtdProcessing%2A>プロパティを設定する必要がありますも<xref:System.Xml.DtdProcessing.Parse>します。|  
|`None`|<xref:System.Xml.XmlReader>任意の種類の割り当てを実行またはデータを検証しません。|  
|`Schema`|検証と型の割り当ては、XML スキーマ定義言語 (XSD) スキーマを使用して実行されます。 リーダーは、次を使用して XML スキーマにアクセスします。<br /><br /> -を使用して、<xref:System.Xml.XmlReaderSettings.Schemas%2A>プロパティにアクセスする、<xref:System.Xml.Schema.XmlSchemaSet>このリーダーに関連付けられているオブジェクト。<br />-XML インスタンス ドキュメントに含まれていると、インライン スキーマを使用します。 (、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>オプションを有効にする必要があります)。<br />-スキーマ位置ヒントで指定された XML スキーマを使用する (`xsi:schemaLocation`または`xsi:noNamespaceSchemaLocation`属性)、XML インスタンス ドキュメントに記載します。 (、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>オプションを有効にする必要があります)。|  
  
   
  
## Examples  
 次の例では、検証に格納されているスキーマを使用して、<xref:System.Xml.Schema.XmlSchemaSet>します。  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 サンプルでは、次の入力ファイルを使用します。  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</summary>
        <value>外部ドキュメントへのアクセスに使用する <see cref="T:System.Xml.XmlResolver" />。 <see langword="null" /> に設定されている場合、<see cref="T:System.Xml.XmlException" /> が外部リソースにアクセスしようとすると、<see cref="T:System.Xml.XmlReader" /> がスローされます。 既定値は、資格情報のない新しい <see cref="T:System.Xml.XmlUrlResolver" /> です。  以降、.NET Framework 4.5.2 では、この設定は、既定値は<see langword="null" />します。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver>使用を検索し、XML インスタンス ドキュメントを開きますかを検索し、XML インスタンス ドキュメントによって参照される外部リソースを開きます。 これには、エンティティ、DTD またはスキーマを含めることができます。 <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType>ネットワーク認証に必要な資格情報を指定するプロパティを使用できます。  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlReaderSettings.XmlResolver%2A>含めることができます、ユーザーの資格情報などの機密情報注意する必要がありますをキャッシュする場合<xref:System.Xml.XmlReaderSettings>、オブジェクトを渡すときや、 <xref:System.Xml.XmlReaderSettings> 1 つのコンポーネントからを別のオブジェクト。  
>   
>  <xref:System.Xml.XmlSecureResolver>外部ドキュメントへのアクセスに使用できます。 <xref:System.Xml.XmlSecureResolver>クラスの別の実装をセキュリティで保護できます<xref:System.Xml.XmlResolver>ラップすることによって、<xref:System.Xml.XmlResolver>オブジェクトとリソースを制限することを基になる<xref:System.Xml.XmlResolver>にアクセスします。  
>   
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> オブジェクトの <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> および <xref:System.Xml.XmlReaderSettings> の検証フラグは、既定では設定されていません。 これらのフラグが設定されていると、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A> オブジェクトの <xref:System.Xml.XmlReaderSettings> が <xref:System.Xml.XmlReader> のインスタンス ドキュメント中に出現したスキーマの場所を解決するために使用されます。 場合、<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>オブジェクトが`null`、スキーマの場所が解決しない場合でも、<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema>と<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation>検証フラグを設定します。  
>   
>  検証を実行しているときにスキーマを追加すると新しい型が追加されるため、検証しているドキュメントの検証結果を変えることができます。 結果として、信頼できるソースからの外部スキーマだけが解決されるようにする必要があります。  
  
   
  
## Examples  
 次の例では、作成、<xref:System.Xml.XmlReader>を使用して、<xref:System.Xml.XmlSecureResolver>既定の資格情報を使用します。  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>