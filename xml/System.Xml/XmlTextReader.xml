<Type Name="XmlTextReader" FullName="System.Xml.XmlTextReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="90c77f83b2fbfa6e63a1bd5b61d10dfe1d19eaf4" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52244279" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlTextReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <TypeSignature Language="F#" Value="type XmlTextReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="167a8-101">XML データへの高速で非キャッシュの前方向アクセスを提供するリーダーを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="167a8-101">Represents a reader that provides fast, non-cached, forward-only access to XML data.</span>
      </span>
      <span data-ttu-id="167a8-102">.NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlReader" /> クラスを使用することをお勧めします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="167a8-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlReader" /> class instead.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-103">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-103">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-104"><xref:System.Xml.XmlTextReader> XML データのストリームに順方向専用、読み取り専用アクセスを提供します。</span><span class="sxs-lookup"><span data-stu-id="167a8-104"><xref:System.Xml.XmlTextReader> provides forward-only, read-only access to a stream of XML data.</span></span> <span data-ttu-id="167a8-105">現在のノードとは、現在リーダーが置かれているノードのことです。</span><span class="sxs-lookup"><span data-stu-id="167a8-105">The current node refers to the node on which the reader is positioned.</span></span> <span data-ttu-id="167a8-106">リーダーを前方への読み取り方法を使用し、プロパティは、現在のノードの値を反映します。</span><span class="sxs-lookup"><span data-stu-id="167a8-106">The reader is advanced using any of the read methods and properties reflect the value of the current node.</span></span>  
  
 <span data-ttu-id="167a8-107">このクラスは実装<xref:System.Xml.XmlReader>W3C Extensible Markup Language (XML) 1.0 と XML の推奨事項で名前空間に準拠しているとします。</span><span class="sxs-lookup"><span data-stu-id="167a8-107">This class implements <xref:System.Xml.XmlReader> and conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</span></span> <span data-ttu-id="167a8-108">`XmlTextReader` 次の機能を提供します。</span><span class="sxs-lookup"><span data-stu-id="167a8-108">`XmlTextReader` provides the following functionality:</span></span>  
  
-   <span data-ttu-id="167a8-109">整形式 XML の規則を適用します。</span><span class="sxs-lookup"><span data-stu-id="167a8-109">Enforces the rules of well-formed XML.</span></span>  
  
-   <span data-ttu-id="167a8-110">`XmlTextReader` データの検証は提供されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-110">`XmlTextReader` does not provide data validation.</span></span>  
  
-   <span data-ttu-id="167a8-111">確認します`DocumentType`ノードは、整形します。</span><span class="sxs-lookup"><span data-stu-id="167a8-111">Checks that `DocumentType` nodes are well-formed.</span></span> <span data-ttu-id="167a8-112">`XmlTextReader` DTD が整形を確認しますが、dtd では検証されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-112">`XmlTextReader` checks the DTD for well-formedness, but does not validate using the DTD.</span></span>  
  
-   <span data-ttu-id="167a8-113">ノードの場所<xref:System.Xml.XmlTextReader.NodeType%2A>は`XmlNodeType.EntityReference`、1 つの空`EntityReference`ノードが返されます (つまり、<xref:System.Xml.XmlTextReader.Value%2A>プロパティは`String.Empty`)。</span><span class="sxs-lookup"><span data-stu-id="167a8-113">For nodes where <xref:System.Xml.XmlTextReader.NodeType%2A> is `XmlNodeType.EntityReference`, a single empty `EntityReference` node is returned (that is, the <xref:System.Xml.XmlTextReader.Value%2A> property is `String.Empty`).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="167a8-114">DTD 内のエンティティの実際の宣言が呼び出される`Entity`ノード。</span><span class="sxs-lookup"><span data-stu-id="167a8-114">The actual declarations of entities in the DTD are called `Entity` nodes.</span></span> <span data-ttu-id="167a8-115">データでこれらのノードを参照するときに呼び出される`EntityReference`ノード。</span><span class="sxs-lookup"><span data-stu-id="167a8-115">When you refer to these nodes in your data, they are called `EntityReference` nodes.</span></span>  
  
-   <span data-ttu-id="167a8-116">既定の属性は展開しません。</span><span class="sxs-lookup"><span data-stu-id="167a8-116">Does not expand default attributes.</span></span>  
  
 <span data-ttu-id="167a8-117">`XmlTextReader`データの検証に必要な追加のチェックは行われず、高速の整形パーサーを提供します。</span><span class="sxs-lookup"><span data-stu-id="167a8-117">Because the `XmlTextReader` does not perform the extra checks required for data validation, it provides a fast well-formedness parser.</span></span>  
  
 <span data-ttu-id="167a8-118">データの検証を実行する検証型を使用して、<xref:System.Xml.XmlReader>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-118">To perform data validation, use a validating <xref:System.Xml.XmlReader>.</span></span>  
  
 <span data-ttu-id="167a8-119">XML データを読み取る、<xref:System.Xml.XmlDocument>を使用して、<xref:System.Xml.XmlNodeReader>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-119">To read XML data from an <xref:System.Xml.XmlDocument>, use <xref:System.Xml.XmlNodeReader>.</span></span>  
  
 <span data-ttu-id="167a8-120">`XmlTextReader` スローされます、 <xref:System.Xml.XmlException> XML の解析エラー。</span><span class="sxs-lookup"><span data-stu-id="167a8-120">`XmlTextReader` throws an <xref:System.Xml.XmlException> on XML parse errors.</span></span> <span data-ttu-id="167a8-121">例外がスローされた後、リーダーの状態は予測できません。</span><span class="sxs-lookup"><span data-stu-id="167a8-121">After an exception is thrown the state of the reader is not predictable.</span></span> <span data-ttu-id="167a8-122">たとえば、報告されたノード型は、現在のノードの実際のノード型とは異なる可能性があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-122">For example, the reported node type may be different than the actual node type of the current node.</span></span> <span data-ttu-id="167a8-123">使用して、<xref:System.Xml.XmlTextReader.ReadState%2A>リーダーがエラー状態であるかどうかを確認するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="167a8-123">Use the <xref:System.Xml.XmlTextReader.ReadState%2A> property to check whether a reader is in error state.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="167a8-124">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="167a8-124">Security Considerations</span></span>  
 <span data-ttu-id="167a8-125">使用する場合の考慮事項を次に、<xref:System.Xml.XmlTextReader>クラス。</span><span class="sxs-lookup"><span data-stu-id="167a8-125">The following are things to consider when using the <xref:System.Xml.XmlTextReader> class.</span></span>  
  
-   <span data-ttu-id="167a8-126">スローされた例外、<xref:System.Xml.XmlTextReader>たくないパス情報が満載のアプリケーションを開示することができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-126">Exceptions thrown the <xref:System.Xml.XmlTextReader> can disclose path information that you do not want bubbled up to the application.</span></span> <span data-ttu-id="167a8-127">アプリケーションは例外をキャッチし、それらを適切に処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-127">Your applications must catch exceptions and process them appropriately.</span></span>  
  
-   <span data-ttu-id="167a8-128">DTD の処理は既定で有効になっています。</span><span class="sxs-lookup"><span data-stu-id="167a8-128">DTD processing is enabled by default.</span></span> <span data-ttu-id="167a8-129">サービス拒否攻撃または信頼されていないソースを扱うかどうかに懸念がある場合は、DTD 処理を無効にします。</span><span class="sxs-lookup"><span data-stu-id="167a8-129">Disable DTD processing if you are concerned about Denial of Service issues or if you are dealing with untrusted sources.</span></span> <span data-ttu-id="167a8-130">設定、<xref:System.Xml.XmlTextReader.DtdProcessing%2A>プロパティを<xref:System.Xml.DtdProcessing.Prohibit>DTD 処理を無効にします。</span><span class="sxs-lookup"><span data-stu-id="167a8-130">Set the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property to <xref:System.Xml.DtdProcessing.Prohibit> to disable DTD processing.</span></span>  
  
     <span data-ttu-id="167a8-131">DTD 処理を有効にした場合、<xref:System.Xml.XmlSecureResolver> を使用して <xref:System.Xml.XmlTextReader> でアクセス可能なリソースを制限できます。</span><span class="sxs-lookup"><span data-stu-id="167a8-131">If you have DTD processing enabled, you can use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="167a8-132">また、XML 処理に対するメモリと時間の割り当てが制限されるようにアプリケーションをデザインすることもできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-132">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="167a8-133">たとえば、ASP.NET アプリケーション内でタイムアウト制限を設定します。</span><span class="sxs-lookup"><span data-stu-id="167a8-133">For example, configure time-out limits in your ASP.NET application.</span></span>  
  
-   <span data-ttu-id="167a8-134">XML データには、DTD ファイルなどの外部リソースへの参照を含めることができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-134">XML data can include references to external resources such as a DTD file.</span></span> <span data-ttu-id="167a8-135">既定では、外部リソースはユーザー資格情報なしで、<xref:System.Xml.XmlUrlResolver> オブジェクトを使用して解決されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-135">By default external resources are resolved using an <xref:System.Xml.XmlUrlResolver> object with no user credentials.</span></span> <span data-ttu-id="167a8-136">この点については、次のいずれかの方法でセキュリティを強化できます。</span><span class="sxs-lookup"><span data-stu-id="167a8-136">You can secure this further by doing one of the following:</span></span>  
  
    -   <span data-ttu-id="167a8-137"><xref:System.Xml.XmlTextReader> プロパティを <xref:System.Xml.XmlTextReader.XmlResolver%2A> オブジェクトに設定することによって、<xref:System.Xml.XmlSecureResolver> がアクセスできるリソースを制限します。</span><span class="sxs-lookup"><span data-stu-id="167a8-137">Restrict the resources that the <xref:System.Xml.XmlTextReader> can access by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to an <xref:System.Xml.XmlSecureResolver> object.</span></span>  
  
    -   <span data-ttu-id="167a8-138"><xref:System.Xml.XmlReader> プロパティを <xref:System.Xml.XmlTextReader.XmlResolver%2A> に設定することにより、`null` が外部リソースを開けないようにする。</span><span class="sxs-lookup"><span data-stu-id="167a8-138">Do not allow the <xref:System.Xml.XmlReader> to open any external resources by setting the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to `null`.</span></span>  
  
-   <span data-ttu-id="167a8-139">XML データには、処理に長時間を要する大量の属性、名前空間宣言、入れ子になった要素などが含まれることがあります。</span><span class="sxs-lookup"><span data-stu-id="167a8-139">XML data can contain a large number of attributes, namespace declarations, nested elements and so on that require a substantial amount of time to process.</span></span> <span data-ttu-id="167a8-140">送信される入力のサイズを制限する、 <xref:System.Xml.XmlTextReader>、カスタム IStream 実装を作成し、提供、<xref:System.Xml.XmlTextReader>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-140">To limit the size of the input that is sent to the <xref:System.Xml.XmlTextReader>, create a custom IStream implementation and supply it the <xref:System.Xml.XmlTextReader>.</span></span>  
  
-   <span data-ttu-id="167a8-141"><xref:System.Xml.XmlReader.ReadValueChunk%2A>メソッドは、大量のデータ ストリームを処理するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="167a8-141">The <xref:System.Xml.XmlReader.ReadValueChunk%2A> method can be used to handle large streams of data.</span></span> <span data-ttu-id="167a8-142">このメソッドは、値全体に 1 つの文字列を割り当てる代わりに、一度に少数の文字を読みます。</span><span class="sxs-lookup"><span data-stu-id="167a8-142">This method reads a small number of characters at a time instead of allocating a single string for the whole value.</span></span>  
  
-   <span data-ttu-id="167a8-143">既定では、一般エンティティは展開されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-143">By default general entities are not expanded.</span></span> <span data-ttu-id="167a8-144">一般エンティティは <xref:System.Xml.XmlTextReader.ResolveEntity%2A> メソッドを呼び出したときに展開されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-144">General entities are expanded when you call the <xref:System.Xml.XmlTextReader.ResolveEntity%2A> method.</span></span>  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="167a8-145">このクラスには、継承確認要求があります。</span>
        <span class="sxs-lookup">
          <span data-stu-id="167a8-145">This class has an inheritance demand.</span>
        </span>
        <span data-ttu-id="167a8-146">継承するように完全な信頼が必要な<see langword="XmlTextReader" />します。</span>
        <span class="sxs-lookup">
          <span data-stu-id="167a8-146">Full trust is required to inherit from <see langword="XmlTextReader" />.</span>
        </span>
      </para>
    </block>
    <related type="Article" href="https://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">
      <span data-ttu-id="167a8-147">XML ドキュメントと XML データ</span>
      <span class="sxs-lookup">
        <span data-stu-id="167a8-147">XML Documents and Data</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-148">
            <see cref="T:System.Xml.XmlTextReader" />の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-148">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-149">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-149">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-150">
            <see langword="XmlTextReader" />の新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-150">Initializes a new instance of the <see langword="XmlTextReader" />.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="167a8-151">読み取る XML データを格納しているストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-151">The stream containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-152">指定したストリームで <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-152">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-153">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-153">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-154"><xref:System.Xml.XmlTextReader>を使用して、ストリームのデコード<xref:System.Text.Encoding?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-154">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-155">
            <paramref name="input" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-155">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader input" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="167a8-156">読み取る XML データを格納している <see langword="TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-156">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-157">
            <see cref="T:System.Xml.XmlTextReader" /> を指定して、<see cref="T:System.IO.TextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-157">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-158">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-158">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-159">`TextReader` が既に正しいエンコーディングに設定されていることを前提にしています。</span><span class="sxs-lookup"><span data-stu-id="167a8-159">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="167a8-160">これは、既に読んだいくつマルチパート MIME シナリオでは、ストリームからのクライアントによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-160">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-161">次の例は、XML 文字列を読み込みます、`XmlTextReader`オブジェクトを使用して、<xref:System.IO.StringReader>クラス。</span><span class="sxs-lookup"><span data-stu-id="167a8-161">The following example loads an XML string into the `XmlTextReader` object using the <xref:System.IO.StringReader> class.</span></span>  
  
 [!code-cpp[XmlTextReader.cctor1#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.cctor1/CPP/rdrcctor1.cpp#1)]
 [!code-csharp[XmlTextReader.cctor1#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.cctor1/CS/rdrcctor1.cs#1)]
 [!code-vb[XmlTextReader.cctor1#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.cctor1/VB/rdrcctor1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader url" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="167a8-162">XML データを格納しているファイルの URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-162">The URL for the file containing the XML data.</span>
          </span>
          <span data-ttu-id="167a8-163">
            <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-163">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-164">指定したファイルで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-164">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-165">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-165">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-166">アクセス資格情報が必要なリソースには、ファイルが存在する場合は、使用、<xref:System.Xml.XmlTextReader.XmlResolver%2A>必要な資格情報を指定するプロパティ。</span><span class="sxs-lookup"><span data-stu-id="167a8-166">If the file is located on a resource that requires access credentials, use the <xref:System.Xml.XmlTextReader.XmlResolver%2A> property to specify the necessary credentials.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="167a8-167">バージョン 1.1 で、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]、部分信頼コードが設定することはできません、`XmlResolver`プロパティ。</span><span class="sxs-lookup"><span data-stu-id="167a8-167">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], partially trusted code cannot set the `XmlResolver` property.</span></span> <span data-ttu-id="167a8-168">回避を作成するには、<xref:System.Xml.XmlUrlResolver>ために必要な資格情報を使用する URI を渡す、<xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType>メソッド、および、コンストラクト、 `XmlTextReader` 、その結果を使用して<xref:System.IO.Stream>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="167a8-168">The workaround is to create an <xref:System.Xml.XmlUrlResolver> with the necessary credentials, pass the URI to the <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> method, and then construct the `XmlTextReader` using the resulting <xref:System.IO.Stream> object.</span></span> <span data-ttu-id="167a8-169">回避策は、次の c# コードの説明です。</span><span class="sxs-lookup"><span data-stu-id="167a8-169">The workaround is described in the following C# code.</span></span>  
  
```csharp  
// Create a resolver with the necessary credentials.  
XmlUrlResolver resolver = new XmlUrlResolver();  
NetworkCredential nc = new NetworkCredential(SecurelyStoredUserName, SecurelyStoredPassword, SecurelyStoredDomain);  
resolver.Credentials = nc;   
// Get a Stream object containing the XML file.  
Uri myUri = new Uri ("http://myServer/data/books.xml");  
Stream s=(Stream)resolver.GetEntity(myUri, null, typeof(Stream));  
// Construct a reader using the Stream object.  
XmlTextReader reader = new XmlTextReader(s);  
```  
  
   
  
## Examples  
 <span data-ttu-id="167a8-170">次の例では、XML ファイルを読み取るし、各ノードを表示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-170">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-171">例では、ファイルを使用して`items.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-171">The example uses the file, `items.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="167a8-172">指定されたファイルが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-172">The specified file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="167a8-173">ファイル名またはディレクトリの一部が見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-173">Part of the filename or directory cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-174">
            <paramref name="url" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-174">
              <paramref name="url" /> is an empty string.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.WebException">
          <span data-ttu-id="167a8-175">リモート ファイル名を解決できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-175">The remote filename cannot be resolved.</span>
          </span>
          <span data-ttu-id="167a8-176">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-176">-or-</span>
          </span>
          <span data-ttu-id="167a8-177">この要求の処理中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-177">An error occurred while processing the request.</span>
          </span>
        </exception>
        <exception cref="T:System.UriFormatException">
          <span data-ttu-id="167a8-178">
            <paramref name="url" /> は有効な URI ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-178">
              <paramref name="url" /> is not a valid URI.</span>
          </span>
        </exception>
        <altmember cref="P:System.Xml.XmlTextReader.XmlResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlTextReader (System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlTextReader(System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader nt" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="nt">
          <span data-ttu-id="167a8-179">使用する <see langword="XmlNameTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-179">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-180">
            <see cref="T:System.Xml.XmlTextReader" /> を指定して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-180">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-181">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-181">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="167a8-182">読み取る XML データを格納しているストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-182">The stream containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="167a8-183">使用する <see langword="XmlNameTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-183">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-184">指定したストリームと <see cref="T:System.Xml.XmlNameTable" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-184">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-185">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-185">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-186"><xref:System.Xml.XmlTextReader>を使用して、ストリームのデコード<xref:System.Text.Encoding?displayProperty=nameWithType>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-186">The <xref:System.Xml.XmlTextReader> decodes the stream using <xref:System.Text.Encoding?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="167a8-187">名前テーブルを指定する場合、このコンス トラクターには、そのテーブルで既に定義された名前が使用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-187">If you specify a name table, this constructor uses the names defined already in that table.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="167a8-188">
            <paramref name="input" /> または <paramref name="nt" /> の値が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-188">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="input">
          <span data-ttu-id="167a8-189">読み取る XML データを格納している <see langword="TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-189">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="167a8-190">使用する <see langword="XmlNameTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-190">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-191">指定された <see cref="T:System.Xml.XmlTextReader" /> と <see cref="T:System.IO.TextReader" /> を使用して、<see cref="T:System.Xml.XmlNameTable" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-191">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-192">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-192">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-193">`TextReader` が既に正しいエンコーディングに設定されていることを前提にしています。</span><span class="sxs-lookup"><span data-stu-id="167a8-193">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="167a8-194">これは、既に読んだいくつマルチパート MIME シナリオでは、ストリームからのクライアントによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-194">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="167a8-195">
            <paramref name="nt" /> 値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-195">The <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="167a8-196">外部リソースを解決するために使用する URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-196">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="167a8-197">
            <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-197">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="167a8-198">読み取る XML データを格納しているストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-198">The stream containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-199">指定した URL とストリームで、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-199">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-200">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-200">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-201">
            <paramref name="input" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-201">
              <paramref name="input" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="167a8-202">外部リソースを解決するために使用する URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-202">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="167a8-203">
            <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-203">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="167a8-204">読み取る XML データを格納している <see langword="TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-204">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-205">指定した URL と <see cref="T:System.IO.TextReader" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-205">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL and <see cref="T:System.IO.TextReader" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-206">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-206">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-207">`TextReader` が既に正しいエンコーディングに設定されていることを前提にしています。</span><span class="sxs-lookup"><span data-stu-id="167a8-207">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="167a8-208">これは、既に読んだいくつマルチパート MIME シナリオでは、ストリームからのクライアントによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-208">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="167a8-209">読み取る XML データを格納しているファイルの URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-209">The URL for the file containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="167a8-210">使用する <see langword="XmlNameTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-210">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-211">指定したファイルと <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-211">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified file and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-212">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-212">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="167a8-213">
            <paramref name="nt" /> 値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-213">The <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.FileNotFoundException">
          <span data-ttu-id="167a8-214">指定されたファイルが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-214">The specified file cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="167a8-215">ファイル名またはディレクトリの一部が見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-215">Part of the filename or directory cannot be found.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-216">
            <paramref name="url" /> が空の文字列です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-216">
              <paramref name="url" /> is an empty string.</span>
          </span>
        </exception>
        <exception cref="T:System.Net.WebException">
          <span data-ttu-id="167a8-217">リモート ファイル名を解決できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-217">The remote filename cannot be resolved.</span>
          </span>
          <span data-ttu-id="167a8-218">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-218">-or-</span>
          </span>
          <span data-ttu-id="167a8-219">この要求の処理中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-219">An error occurred while processing the request.</span>
          </span>
        </exception>
        <exception cref="T:System.UriFormatException">
          <span data-ttu-id="167a8-220">
            <paramref name="url" /> は有効な URI ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-220">
              <paramref name="url" /> is not a valid URI.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">
          <span data-ttu-id="167a8-221">解析する XML フラグメントを含んでいるストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-221">The stream containing the XML fragment to parse.</span>
          </span>
        </param>
        <param name="fragType">
          <span data-ttu-id="167a8-222">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-222">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span>
          </span>
          <span data-ttu-id="167a8-223">これもフラグメントに何を含めることができるかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-223">This also determines what the fragment can contain.</span>
          </span>
          <span data-ttu-id="167a8-224">下の表を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-224">(See table below.)</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="167a8-225">
            <paramref name="xmlFragment" /> の解析先の <see cref="T:System.Xml.XmlParserContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-225">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed.</span>
          </span>
          <span data-ttu-id="167a8-226">これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c> と <c>xml:space</c> スコープが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-226">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-227">指定したストリーム、<see cref="T:System.Xml.XmlNodeType" /> および <see cref="T:System.Xml.XmlParserContext" /> で <see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-227">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified stream, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-228">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-228">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-229">このコンス トラクターは、XML のフラグメントとして、指定した文字列を解析します。</span><span class="sxs-lookup"><span data-stu-id="167a8-229">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="167a8-230">XML フラグメントが、要素または属性の場合は、整形式 XML ドキュメントのルート レベルの規則をバイパスできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-230">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span>  
  
 <span data-ttu-id="167a8-231">次の表に、有効な値の`fragType`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-231">The following table lists valid values for `fragType`.</span></span>  
  
|<span data-ttu-id="167a8-232">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="167a8-232">XmlNodeType</span></span>|<span data-ttu-id="167a8-233">フラグメントを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-233">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|`Element`|<span data-ttu-id="167a8-234">任意の有効な要素のコンテンツ (たとえば、要素、コメント、処理命令、CDATA セクションでは、テキスト、およびエンティティ参照の任意の組み合わせなど)。</span><span class="sxs-lookup"><span data-stu-id="167a8-234">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="167a8-235">XML 宣言を渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-235">An XML declaration can also be supplied.</span></span> <span data-ttu-id="167a8-236">設定する必要がなく、XML フラグメントのエンコーディングを指定できます、<xref:System.Xml.XmlParserContext>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="167a8-236">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|`Attribute`|<span data-ttu-id="167a8-237">属性 (引用符の内側の部分) の値。</span><span class="sxs-lookup"><span data-stu-id="167a8-237">The value of an attribute (the part inside the quotes).</span></span>|  
|`Document`|<span data-ttu-id="167a8-238">XML ドキュメント全体のコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="167a8-238">The contents of an entire XML document.</span></span> <span data-ttu-id="167a8-239">これにより、ドキュメント レベルの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-239">This enforces document level rules.</span></span>|  
  
 <span data-ttu-id="167a8-240">リーダーは、次を使用して、ストリームのエンコーディングを判断します。</span><span class="sxs-lookup"><span data-stu-id="167a8-240">The reader uses the following to determine the encoding of the stream.</span></span>  
  
1.  <span data-ttu-id="167a8-241">チェック、<xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType>プロパティ エンコーディングを判断します。</span><span class="sxs-lookup"><span data-stu-id="167a8-241">Checks the <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> property to determine the encoding.</span></span>  
  
2.  <span data-ttu-id="167a8-242">場合、`Encoding`プロパティは`null`ストリームの先頭にバイト オーダー マークのため、リーダーを確認します。</span><span class="sxs-lookup"><span data-stu-id="167a8-242">If the `Encoding` property is `null`, the reader checks for a byte-order mark at the beginning of the stream.</span></span>  
  
3.  <span data-ttu-id="167a8-243">場合、`Encoding`プロパティは`null`バイト順マークが見つからないとは、リーダーは、ストリームが utf-8 でエンコードされた前提としています。</span><span class="sxs-lookup"><span data-stu-id="167a8-243">If the `Encoding` property is `null`, and no byte-order mark is found, the reader assumes the stream is encoded in UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-244">
            <paramref name="fragType" /> が Element、Attribute、または Document のいずれかの <see langword="XmlNodeType" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-244">
              <paramref name="fragType" /> is not an Element, Attribute, or Document <see langword="XmlNodeType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-245">
            <paramref name="xmlFragment" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-245">
              <paramref name="xmlFragment" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.Stream input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.Stream input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.Stream,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As Stream, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::Stream ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.Stream * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.Stream" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="167a8-246">外部リソースを解決するために使用する URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-246">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="167a8-247">
            <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-247">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
          <span data-ttu-id="167a8-248">
            <paramref name="url" /> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-248">If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="167a8-249">読み取る XML データを格納しているストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-249">The stream containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="167a8-250">使用する <see langword="XmlNameTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-250">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-251">指定した URL、ストリーム、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-251">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, stream and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-252">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-252">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NullReferenceException">
          <span data-ttu-id="167a8-253">
            <paramref name="input" /> または <paramref name="nt" /> の値が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-253">The <paramref name="input" /> or <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string url, System.IO.TextReader input, System.Xml.XmlNameTable nt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string url, class System.IO.TextReader input, class System.Xml.XmlNameTable nt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.IO.TextReader,System.Xml.XmlNameTable)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (url As String, input As TextReader, nt As XmlNameTable)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ url, System::IO::TextReader ^ input, System::Xml::XmlNameTable ^ nt);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.IO.TextReader * System.Xml.XmlNameTable -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (url, input, nt)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="System.String" />
        <Parameter Name="input" Type="System.IO.TextReader" />
        <Parameter Name="nt" Type="System.Xml.XmlNameTable" />
      </Parameters>
      <Docs>
        <param name="url">
          <span data-ttu-id="167a8-254">外部リソースを解決するために使用する URL。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-254">The URL to use for resolving external resources.</span>
          </span>
          <span data-ttu-id="167a8-255">
            <see cref="P:System.Xml.XmlTextReader.BaseURI" /> は、この値に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-255">The <see cref="P:System.Xml.XmlTextReader.BaseURI" /> is set to this value.</span>
          </span>
          <span data-ttu-id="167a8-256">
            <paramref name="url" /> が <see langword="null" /> の場合、<see langword="BaseURI" /> が <see langword="String.Empty" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-256">If <paramref name="url" /> is <see langword="null" />, <see langword="BaseURI" /> is set to <see langword="String.Empty" />.</span>
          </span>
        </param>
        <param name="input">
          <span data-ttu-id="167a8-257">読み取る XML データを格納している <see langword="TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-257">The <see langword="TextReader" /> containing the XML data to read.</span>
          </span>
        </param>
        <param name="nt">
          <span data-ttu-id="167a8-258">使用する <see langword="XmlNameTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-258">The <see langword="XmlNameTable" /> to use.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-259">指定した URL、<see cref="T:System.IO.TextReader" />、および <see cref="T:System.Xml.XmlNameTable" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-259">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified URL, <see cref="T:System.IO.TextReader" /> and <see cref="T:System.Xml.XmlNameTable" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-260">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-260">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-261">`TextReader` が既に正しいエンコーディングに設定されていることを前提にしています。</span><span class="sxs-lookup"><span data-stu-id="167a8-261">It is assumed that the `TextReader` is already set to the correct encoding.</span></span> <span data-ttu-id="167a8-262">これは、既に読んだいくつマルチパート MIME シナリオでは、ストリームからのクライアントによって使用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-262">This is used by clients that have already read some things from the stream in a multi-part MIME scenario.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-263">
            <paramref name="nt" /> 値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-263">The <paramref name="nt" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlTextReader" Usage="new System.Xml.XmlTextReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">
          <span data-ttu-id="167a8-264">解析する XML フラグメントを含んでいる文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-264">The string containing the XML fragment to parse.</span>
          </span>
        </param>
        <param name="fragType">
          <span data-ttu-id="167a8-265">XML フラグメントの <see cref="T:System.Xml.XmlNodeType" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-265">The <see cref="T:System.Xml.XmlNodeType" /> of the XML fragment.</span>
          </span>
          <span data-ttu-id="167a8-266">これもフラグメント文字列に何を含めることができるかを判断します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-266">This also determines what the fragment string can contain.</span>
          </span>
          <span data-ttu-id="167a8-267">下の表を参照してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-267">(See table below.)</span>
          </span>
        </param>
        <param name="context">
          <span data-ttu-id="167a8-268">
            <paramref name="xmlFragment" /> の解析先の <see cref="T:System.Xml.XmlParserContext" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-268">The <see cref="T:System.Xml.XmlParserContext" /> in which the <paramref name="xmlFragment" /> is to be parsed.</span>
          </span>
          <span data-ttu-id="167a8-269">これには、使用する <see cref="T:System.Xml.XmlNameTable" />、エンコーディング、名前空間スコープ、現在の<c>xml:lang</c> と <c>xml:space</c> スコープが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-269">This includes the <see cref="T:System.Xml.XmlNameTable" /> to use, encoding, namespace scope, the current <c>xml:lang</c>, and the <c>xml:space</c> scope.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-270">指定した文字列、<see cref="T:System.Xml.XmlNodeType" />、および <see cref="T:System.Xml.XmlParserContext" /> で、<see cref="T:System.Xml.XmlTextReader" /> クラスの新しいインスタンスを初期化します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-270">Initializes a new instance of the <see cref="T:System.Xml.XmlTextReader" /> class with the specified string, <see cref="T:System.Xml.XmlNodeType" />, and <see cref="T:System.Xml.XmlParserContext" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-271">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-271">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-272">このコンス トラクターは、XML のフラグメントとして、指定した文字列を解析します。</span><span class="sxs-lookup"><span data-stu-id="167a8-272">This constructor parses the given string as a fragment of XML.</span></span> <span data-ttu-id="167a8-273">XML フラグメントが、要素または属性の場合は、整形式 XML ドキュメントのルート レベルの規則をバイパスできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-273">If the XML fragment is an element or attribute, you can bypass the root level rules for well-formed XML documents.</span></span> <span data-ttu-id="167a8-274">このコンス トラクターから返される文字列を処理できる<xref:System.Xml.XmlReader.ReadInnerXml%2A>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-274">This constructor can handle strings returned from <xref:System.Xml.XmlReader.ReadInnerXml%2A>.</span></span>  
  
 <span data-ttu-id="167a8-275">次の表に、有効な値`fragType`リーダーが別のノード型の各を解析する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-275">The following table lists valid values for `fragType` and how the reader parses each of the different node types.</span></span>  
  
|<span data-ttu-id="167a8-276">XmlNodeType</span><span class="sxs-lookup"><span data-stu-id="167a8-276">XmlNodeType</span></span>|<span data-ttu-id="167a8-277">フラグメントを含めることができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-277">Fragment May Contain</span></span>|  
|-----------------|--------------------------|  
|<span data-ttu-id="167a8-278">要素</span><span class="sxs-lookup"><span data-stu-id="167a8-278">Element</span></span>|<span data-ttu-id="167a8-279">任意の有効な要素のコンテンツ (たとえば、要素、コメント、処理命令、CDATA セクションでは、テキスト、およびエンティティ参照の任意の組み合わせなど)。</span><span class="sxs-lookup"><span data-stu-id="167a8-279">Any valid element content (for example, any combination of elements, comments, processing instructions, CDATA sections, text, and entity references).</span></span><br /><br /> <span data-ttu-id="167a8-280">XML 宣言を渡すこともできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-280">An XML declaration can also be supplied.</span></span> <span data-ttu-id="167a8-281">設定する必要がなく、XML フラグメントのエンコーディングを指定できます、<xref:System.Xml.XmlParserContext>オブジェクト。</span><span class="sxs-lookup"><span data-stu-id="167a8-281">This allows you to specify the encoding for the XML fragment, rather than having to set it on the <xref:System.Xml.XmlParserContext> object.</span></span>|  
|<span data-ttu-id="167a8-282">属性</span><span class="sxs-lookup"><span data-stu-id="167a8-282">Attribute</span></span>|<span data-ttu-id="167a8-283">属性 (引用符の内側の部分) の値。</span><span class="sxs-lookup"><span data-stu-id="167a8-283">The value of an attribute (the part inside the quotes).</span></span>|  
|<span data-ttu-id="167a8-284">ドキュメント</span><span class="sxs-lookup"><span data-stu-id="167a8-284">Document</span></span>|<span data-ttu-id="167a8-285">XML ドキュメント全体のコンテンツ。</span><span class="sxs-lookup"><span data-stu-id="167a8-285">The contents of an entire XML document.</span></span> <span data-ttu-id="167a8-286">これにより、ドキュメント レベルの規則が適用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-286">This enforces document level rules.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="167a8-287">次の例では、XML フラグメントを解析します。</span><span class="sxs-lookup"><span data-stu-id="167a8-287">The following example parses an XML fragment.</span></span> <span data-ttu-id="167a8-288">使用して、`XmlParserContext`とその<xref:System.Xml.XmlNamespaceManager>名前空間の解決を処理します。</span><span class="sxs-lookup"><span data-stu-id="167a8-288">It uses the `XmlParserContext` and its <xref:System.Xml.XmlNamespaceManager> to handle namespace resolution.</span></span>  
  
 [!code-cpp[XmlTextReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Cctor/CPP/readfrag.cpp#1)]
 [!code-csharp[XmlTextReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Cctor/CS/readfrag.cs#1)]
 [!code-vb[XmlTextReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Cctor/VB/readfrag.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-289">
            <paramref name="fragType" /> が <see langword="Element" />、<see langword="Attribute" />、または <see langword="Document" /> のいずれかの <see langword="XmlNodeType" /> ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-289">
              <paramref name="fragType" /> is not an <see langword="Element" />, <see langword="Attribute" />, or <see langword="Document" /><see langword="XmlNodeType" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-290">
            <paramref name="xmlFragment" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-290">
              <paramref name="xmlFragment" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlParserContext" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlTextReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-291">現在のノードにある属性の数を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-291">Gets the number of attributes on the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-292">現在のノードにある属性の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-292">The number of attributes on the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-293">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-293">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-294">このプロパティは、関連する`Element`、`DocumentType`と`XmlDeclaration`ノードのみです。</span><span class="sxs-lookup"><span data-stu-id="167a8-294">This property is relevant to `Element`, `DocumentType` and `XmlDeclaration` nodes only.</span></span> <span data-ttu-id="167a8-295">(他のノード型は、属性を必要はありません)。</span><span class="sxs-lookup"><span data-stu-id="167a8-295">(Other node types do not have attributes.)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-296">次の例では、現在のノードですべての属性が表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-296">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlTextReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-297">現在のノードのベース URI を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-297">Gets the base URI of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-298">現在のノードのベース URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-298">The base URI of the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-299">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-299">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-300">ネットワークに接続された XML ドキュメントでは、さまざまな W3C 標準包含メカニズムを使用して集計されたデータのチャンクはで構成され、したがって異なる場所から取得したノードが含まれます。</span><span class="sxs-lookup"><span data-stu-id="167a8-300">A networked XML document is comprised of chunks of data aggregated using various W3C standard inclusion mechanisms and therefore contains nodes that come from different places.</span></span> <span data-ttu-id="167a8-301">DTD エンティティが、この例が、これは Dtd に限定されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-301">DTD entities are an example of this, but this is not limited to DTDs.</span></span> <span data-ttu-id="167a8-302">ベース URI がわかりますからこれらのノードが付属しています。</span><span class="sxs-lookup"><span data-stu-id="167a8-302">The base URI tells you where these nodes came from.</span></span> <span data-ttu-id="167a8-303">返されるノードのベース URI がないかどうか (たとえば、解析されたメモリ内の文字列から)、`String.Empty`が返されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-303">If there is no base URI for the nodes being returned (for example, they were parsed from an in-memory string), `String.Empty` is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-304">次の例では、各ノードのベース URI を表示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-304">The following example displays the base URI for each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-305">例では、ファイルを使用して`baseuri.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-305">The example uses the file, `baseuri.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.BaseURI Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlTextReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-306">
            <see cref="T:System.Xml.XmlTextReader" /> がバイナリ コンテンツ用の読み取りメソッドを実装するかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-306">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the binary content read methods.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-307">バイナリ コンテンツ用の読み取りメソッドを実装する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-307">
              <see langword="true" /> if the binary content read methods are implemented; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-308">
            <see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-308">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-309">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-309">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-310">バイナリ コンテンツ、 <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>、 <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>、 <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>、および<xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="167a8-310">The binary content read methods include the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlTextReader.ReadElementContentAsBase64%2A>, and <xref:System.Xml.XmlTextReader.ReadElementContentAsBinHex%2A> methods.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadValueChunk">
      <MemberSignature Language="C#" Value="public override bool CanReadValueChunk { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadValueChunk" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadValueChunk As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadValueChunk { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadValueChunk : bool" Usage="System.Xml.XmlTextReader.CanReadValueChunk" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-311">
            <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装しているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-311">Gets a value indicating whether the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-312">
            <see cref="T:System.Xml.XmlTextReader" /> が <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> メソッドを実装している場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-312">
              <see langword="true" /> if the <see cref="T:System.Xml.XmlTextReader" /> implements the <see cref="M:System.Xml.XmlReader.ReadValueChunk(System.Char[],System.Int32,System.Int32)" /> method; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-313">
            <see cref="T:System.Xml.XmlTextReader" /> クラスは、常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-313">The <see cref="T:System.Xml.XmlTextReader" /> class always returns <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-314">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-314">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-315"><xref:System.Xml.XmlTextReader>スロー、<xref:System.NotSupportedException>場合、<xref:System.Xml.XmlReader.ReadValueChunk%2A>メソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-315">The <xref:System.Xml.XmlTextReader> throws a <xref:System.NotSupportedException> if the <xref:System.Xml.XmlReader.ReadValueChunk%2A> method is called.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlTextReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-316">このリーダーがエンティティを解析および解決できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-316">Gets a value indicating whether this reader can parse and resolve entities.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-317">リーダーがエンティティを解析および解決できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-317">
              <see langword="true" /> if the reader can parse and resolve entities; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-318">
            <see langword="XmlTextReader" /> クラスは、常に <see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-318">The <see langword="XmlTextReader" /> class always returns <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-319">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-319">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-320">これは、変更、[!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]リリースします。</span><span class="sxs-lookup"><span data-stu-id="167a8-320">This is a change in the [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)] release.</span></span> <span data-ttu-id="167a8-321">以前のバージョンで、`XmlTextReader`クラスは、エンティティを解決できませんでしたし、`CanResolveEntity`常に返される`false`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-321">In previous versions, the `XmlTextReader` class could not resolve entities and `CanResolveEntity` always returned `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-322">
            <see cref="P:System.Xml.XmlReader.ReadState" /> を <see langword="Closed" /> に変更します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-322">Changes the <see cref="P:System.Xml.XmlReader.ReadState" /> to <see langword="Closed" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-323">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-323">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-324">このメソッドでは、読み取り中に保持されているすべてのリソースも解放します。</span><span class="sxs-lookup"><span data-stu-id="167a8-324">This method also releases any resources held while reading.</span></span> <span data-ttu-id="167a8-325">このリーダーは、ストリームを使用して構築されたもこのメソッドも呼び出して`Close`基になるストリーム。</span><span class="sxs-lookup"><span data-stu-id="167a8-325">If this reader was constructed using a stream, this method also calls `Close` on the underlying stream.</span></span>  
  
 <span data-ttu-id="167a8-326">場合`Close`が既に呼び出されると、アクションは実行されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-326">If `Close` has already been called, no action is performed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlTextReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-327">XML ドキュメント内の現在のノードの深さを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-327">Gets the depth of the current node in the XML document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-328">XML ドキュメント内の現在のノードの深さ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-328">The depth of the current node in the XML document.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-329">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-329">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-330">次の例では、各ノードの深さ、行番号、行の位置などが表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-330">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlTextReader.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-331">
            <see cref="T:System.Xml.DtdProcessing" /> 列挙体を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-331">Gets or sets the <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-332">
            <see cref="T:System.Xml.DtdProcessing" /> 列挙体。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-332">The <see cref="T:System.Xml.DtdProcessing" /> enumeration.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167a8-333"><xref:System.Xml.DtdProcessing>列挙型が含まれています、 <xref:System.Xml.DtdProcessing.Prohibit>、 <xref:System.Xml.DtdProcessing.Ignore>、および<xref:System.Xml.DtdProcessing.Parse>列挙子。</span><span class="sxs-lookup"><span data-stu-id="167a8-333">The <xref:System.Xml.DtdProcessing> enumeration contains the <xref:System.Xml.DtdProcessing.Prohibit>, <xref:System.Xml.DtdProcessing.Ignore>, and <xref:System.Xml.DtdProcessing.Parse> enumerators.</span></span> <span data-ttu-id="167a8-334"><xref:System.Xml.DtdProcessing.Parse> 既定の動作です。</span><span class="sxs-lookup"><span data-stu-id="167a8-334"><xref:System.Xml.DtdProcessing.Parse> is the default behavior.</span></span> <span data-ttu-id="167a8-335"><xref:System.Xml.XmlTextReader.DtdProcessing%2A>プロパティに置き換えられ、`ProhibitDTD`プロパティ DOCTYPE 要素を無視する機能を追加します。</span><span class="sxs-lookup"><span data-stu-id="167a8-335">The <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property replaces the `ProhibitDTD` property and adds the ability to ignore the DOCTYPE element.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="167a8-336">場合、<xref:System.Xml.XmlTextReader.DtdProcessing%2A>プロパティに設定されて<xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>、 <xref:System.Xml.XmlTextReader> Dtd は報告されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-336">If the <xref:System.Xml.XmlTextReader.DtdProcessing%2A> property is set to <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, the <xref:System.Xml.XmlTextReader> will not report the DTDs.</span></span> <span data-ttu-id="167a8-337">これは、DTD/DOCTYPE が出力時に失われるということを意味します。</span><span class="sxs-lookup"><span data-stu-id="167a8-337">This means that the DTD/DOCTYPE will be lost on output.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlTextReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-338">ドキュメントのエンコーディングを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-338">Gets the encoding of the document.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-339">エンコーディング値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-339">The encoding value.</span>
          </span>
          <span data-ttu-id="167a8-340">エンコーディング属性が存在せず、バイト順のマークもない場合は、既定として UTF-8 が使用されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-340">If no encoding attribute exists, and there is no byte-order mark, this defaults to UTF-8.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-341">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-341">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-342"><xref:System.Xml.XmlTextReader>を使用して、<xref:System.Text.Encoding?displayProperty=nameWithType>クラス、`XmlTextReader`もクラスでサポートされるすべてのエンコーディングをサポートします。</span><span class="sxs-lookup"><span data-stu-id="167a8-342">Because <xref:System.Xml.XmlTextReader> uses the <xref:System.Text.Encoding?displayProperty=nameWithType> class, `XmlTextReader` also supports all encodings supported by that class.</span></span> <span data-ttu-id="167a8-343">Utf-7 や EBCDIC、マップするなど、任意のエンコーディングは、例外、 `<?xml` utf-8 以外のバイト値のシーケンス。</span><span class="sxs-lookup"><span data-stu-id="167a8-343">The exception to this is any encoding, such as UTF-7 or EBCDIC, that maps the `<?xml` sequence to different byte values than UTF-8.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlTextReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-344">リーダーによるエンティティの処理方法を指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-344">Gets or sets a value that specifies how the reader handles entities.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-345">
            <see cref="T:System.Xml.EntityHandling" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-345">One of the <see cref="T:System.Xml.EntityHandling" /> values.</span>
          </span>
          <span data-ttu-id="167a8-346">
            <see langword="EntityHandling" /> が指定されていない場合は、既定で <see langword="EntityHandling.ExpandCharEntities" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-346">If no <see langword="EntityHandling" /> is specified, it defaults to <see langword="EntityHandling.ExpandCharEntities" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-347">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-347">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-348">次の後にその場と効果のこのプロパティを変更できます<xref:System.Xml.XmlTextReader.Read%2A>呼び出します。</span><span class="sxs-lookup"><span data-stu-id="167a8-348">This property can be changed on the fly and takes effect after the next <xref:System.Xml.XmlTextReader.Read%2A> call.</span></span>  
  
 <span data-ttu-id="167a8-349">ときに`EntityHandling`に設定されている`ExpandCharEntities`属性値はのみ部分的に正規化します。</span><span class="sxs-lookup"><span data-stu-id="167a8-349">When `EntityHandling` is set to `ExpandCharEntities`, attribute values are only partially normalized.</span></span> <span data-ttu-id="167a8-350">リーダーは、隣接するエンティティ参照ノードのコンテンツから個別に各個々 のテキスト ノードを正規化します。</span><span class="sxs-lookup"><span data-stu-id="167a8-350">The reader normalizes each individual text node independently from the content of adjacent entity reference nodes.</span></span>  
  
 <span data-ttu-id="167a8-351">エンティティ間の差を示すためには、処理モードは、次の XML を検討します。</span><span class="sxs-lookup"><span data-stu-id="167a8-351">To illustrate the difference between the entity handling modes consider the following XML:</span></span>  
  
```  
<!DOCTYPE doc [<!ENTITY num "123"]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlTextReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-352">リーダーがストリームの末尾に配置されているかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-352">Gets a value indicating whether the reader is positioned at the end of the stream.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-353">ストリームの末尾にリーダーが配置されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-353">
              <see langword="true" /> if the reader is positioned at the end of the stream; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-354">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-354">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-355">属性の値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-355">Gets the value of an attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-356">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-356">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlTextReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">
          <span data-ttu-id="167a8-357">属性のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-357">The index of the attribute.</span>
          </span>
          <span data-ttu-id="167a8-358">インデックスの値は、0 から始まります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-358">The index is zero-based.</span>
          </span>
          <span data-ttu-id="167a8-359">最初の属性のインデックスは 0 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-359">(The first attribute has index 0.)</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-360">指定したインデックスの属性の値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-360">Gets the value of the attribute with the specified index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-361">指定した属性の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-361">The value of the specified attribute.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-362">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-362">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-363">このメソッドは、リーダーを移動しません。</span><span class="sxs-lookup"><span data-stu-id="167a8-363">This method does not move the reader.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-364">
            <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlTextReader.AttributeCount" /> 以上です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-364">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlTextReader.AttributeCount" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlTextReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="167a8-365">属性の限定名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-365">The qualified name of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-366">指定した名前の属性の値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-366">Gets the value of the attribute with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-367">指定した属性の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-367">The value of the specified attribute.</span>
          </span>
          <span data-ttu-id="167a8-368">指定した属性が見つからない場合は <see langword="null" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-368">If the attribute is not found, <see langword="null" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-369">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-369">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-370">このメソッドは、リーダーを移動しません。</span><span class="sxs-lookup"><span data-stu-id="167a8-370">This method does not move the reader.</span></span>  
  
 <span data-ttu-id="167a8-371">リーダーが配置されている場合、`DocumentType`ノードで、このメソッドを使用して、PUBLIC および SYSTEM リテラルなどを取得すること `reader.GetAttribute("PUBLIC")`</span><span class="sxs-lookup"><span data-stu-id="167a8-371">If the reader is positioned on a `DocumentType` node, this method can be used to get the PUBLIC and SYSTEM literals, for example, `reader.GetAttribute("PUBLIC")`</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-372">次の例では、ISBN 属性の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="167a8-372">The following example gets the value of the ISBN attribute.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetAttribute1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-373">例では、ファイルを使用して`attrs.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-373">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetAttribute1 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetAttribute1 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlTextReader.GetAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="167a8-374">属性のローカル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-374">The local name of the attribute.</span>
          </span>
        </param>
        <param name="namespaceURI">
          <span data-ttu-id="167a8-375">属性の名前空間 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-375">The namespace URI of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-376">指定したローカル名および名前空間 URI に関連付けられた属性の値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-376">Gets the value of the attribute with the specified local name and namespace URI.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-377">指定した属性の値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-377">The value of the specified attribute.</span>
          </span>
          <span data-ttu-id="167a8-378">指定した属性が見つからない場合は <see langword="null" /> が返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-378">If the attribute is not found, <see langword="null" /> is returned.</span>
          </span>
          <span data-ttu-id="167a8-379">このメソッドは、リーダーを移動しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-379">This method does not move the reader.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-380">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-380">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-381">次の XML には、特定の名前空間内の属性が含まれています。</span><span class="sxs-lookup"><span data-stu-id="167a8-381">The following XML contains an attribute in a specific namespace:</span></span>  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 <span data-ttu-id="167a8-382">参照できます、`dt:type`属性の 1 つの引数 (プレフィックスとローカル名) または 2 つの引数 (ローカル名と名前空間 URI) を使用します。</span><span class="sxs-lookup"><span data-stu-id="167a8-382">You can lookup the `dt:type` attribute using one argument (prefix and local name) or two arguments (local name and namespace URI):</span></span>  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 <span data-ttu-id="167a8-383">参照する、`xmlns:dt`属性、次の引数のいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="167a8-383">To lookup the `xmlns:dt` attribute, use one of the following arguments:</span></span>  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 <span data-ttu-id="167a8-384">使用してこの情報を取得することも、<xref:System.Xml.XmlTextReader.Prefix%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="167a8-384">You can also get this information using the <xref:System.Xml.XmlTextReader.Prefix%2A> property.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetNamespacesInScope">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IDictionary&lt;string,string&gt; GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ GetNamespacesInScope(System::Xml::XmlNamespaceScope scope);" />
      <MemberSignature Language="F#" Value="member this.GetNamespacesInScope : System.Xml.XmlNamespaceScope -&gt; System.Collections.Generic.IDictionary&lt;string, string&gt;" Usage="xmlTextReader.GetNamespacesInScope scope" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">
          <span data-ttu-id="167a8-385">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-385">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-386">現在スコープ内にあるすべての名前空間が含まれたコレクションを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-386">Gets a collection that contains all namespaces currently in-scope.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-387">現在スコープ内にあるすべての名前空間が含まれた <see cref="T:System.Collections.IDictionary" /> オブジェクト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-387">An <see cref="T:System.Collections.IDictionary" /> object that contains all the current in-scope namespaces.</span>
          </span>
          <span data-ttu-id="167a8-388">要素にリーダーが配置されていない場合は、名前空間が含まれていない空のディクショナリが返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-388">If the reader is not positioned on an element, an empty dictionary (no namespaces) is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-389">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-389">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-390">ディクショナリは、プレフィックスをキーと名前空間名のコレクションで構成されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-390">The dictionary consists of a collection of namespace names keyed by prefix.</span></span> <span data-ttu-id="167a8-391">スコープ内名前空間を列挙するために使用できます。</span><span class="sxs-lookup"><span data-stu-id="167a8-391">It can be used to enumerate the in-scope namespaces.</span></span> <span data-ttu-id="167a8-392">ディクショナリは、リーダーの名前空間の一覧の切断されたコピーです。</span><span class="sxs-lookup"><span data-stu-id="167a8-392">The dictionary is a disconnected copy of the namespace list of the reader.</span></span> <span data-ttu-id="167a8-393">リーダーの位置、現在のスコープ内の名前空間の一覧、変更内容は変更されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-393">It remains unchanged as the reader position, current in-scope namespace list, changes.</span></span>  
  
 <span data-ttu-id="167a8-394">表で説明する方法、<xref:System.Xml.XmlNamespaceScope>列挙値かどうかに影響を与えますかない、既定値と組み込みの名前空間がによって返される<xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-394">The following table describes how the <xref:System.Xml.XmlNamespaceScope> enumeration value affects the whether or not the default and built-in namespaces are returned by <xref:System.Xml.XmlTextReader.GetNamespacesInScope%2A>.</span></span>  
  
|<span data-ttu-id="167a8-395">XmlNamespaceScope 値</span><span class="sxs-lookup"><span data-stu-id="167a8-395">XmlNamespaceScope Value</span></span>|<span data-ttu-id="167a8-396">xmlns:xml</span><span class="sxs-lookup"><span data-stu-id="167a8-396">xmlns:xml</span></span>|<span data-ttu-id="167a8-397">xmlns:xmlns</span><span class="sxs-lookup"><span data-stu-id="167a8-397">xmlns:xmlns</span></span>|<span data-ttu-id="167a8-398">xmlns=""</span><span class="sxs-lookup"><span data-stu-id="167a8-398">xmlns=""</span></span>|  
|-----------------------------|---------------|-----------------|---------------|  
|`All`|<span data-ttu-id="167a8-399">可</span><span class="sxs-lookup"><span data-stu-id="167a8-399">yes</span></span>|<span data-ttu-id="167a8-400">Ｘ</span><span class="sxs-lookup"><span data-stu-id="167a8-400">no</span></span>|<span data-ttu-id="167a8-401">Ｘ</span><span class="sxs-lookup"><span data-stu-id="167a8-401">no</span></span>|  
|`ExcludeXml`|<span data-ttu-id="167a8-402">Ｘ</span><span class="sxs-lookup"><span data-stu-id="167a8-402">no</span></span>|<span data-ttu-id="167a8-403">Ｘ</span><span class="sxs-lookup"><span data-stu-id="167a8-403">no</span></span>|<span data-ttu-id="167a8-404">Ｘ</span><span class="sxs-lookup"><span data-stu-id="167a8-404">no</span></span>|  
|`Local`|<span data-ttu-id="167a8-405">Ｘ</span><span class="sxs-lookup"><span data-stu-id="167a8-405">no</span></span>|<span data-ttu-id="167a8-406">Ｘ</span><span class="sxs-lookup"><span data-stu-id="167a8-406">no</span></span>|<span data-ttu-id="167a8-407">可</span><span class="sxs-lookup"><span data-stu-id="167a8-407">yes</span></span>|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetRemainder">
      <MemberSignature Language="C#" Value="public System.IO.TextReader GetRemainder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.TextReader GetRemainder() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.GetRemainder" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRemainder () As TextReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::TextReader ^ GetRemainder();" />
      <MemberSignature Language="F#" Value="member this.GetRemainder : unit -&gt; System.IO.TextReader" Usage="xmlTextReader.GetRemainder " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-408">バッファー内の XML の剰余を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-408">Gets the remainder of the buffered XML.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-409">バッファー内の XML の剰余を格納している <see cref="T:System.IO.TextReader" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-409">A <see cref="T:System.IO.TextReader" /> containing the remainder of the buffered XML.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-410">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-410">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-411"><xref:System.Xml.XmlTextReader>をバッファーは`Read`、未使用のバッファーの残りの部分を返すデータが失われないようにできる必要があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-411">Because <xref:System.Xml.XmlTextReader> does a buffered `Read`, it must be able to return the remainder of the unused buffer so that no data is lost.</span></span> <span data-ttu-id="167a8-412">これにより、マルチパート MIME) などのプロトコルがパッケージの他のものと同じストリームでの XML にできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-412">This allows protocols (such as multi-part MIME) to package XML in the same stream as other things.</span></span>  
  
 <span data-ttu-id="167a8-413">このメソッドを呼び出した後<xref:System.Xml.XmlTextReader.EOF%2A>に設定されている`true`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-413">After calling this method, <xref:System.Xml.XmlTextReader.EOF%2A> is set to `true`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-414">次の例は、XML ドキュメントの最初の部分を読み取るしを使用して、 `GetRemainder` 2 番目のリーダーを使用してドキュメントの読み取りを完了します。</span><span class="sxs-lookup"><span data-stu-id="167a8-414">The following example reads the first part of an XML document and then uses `GetRemainder` to complete reading the document using a second reader.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.GetRemainder Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-415">例では、入力ファイルを使用して`tworeads.xml`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-415">The example uses the input file `tworeads.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.GetRemainder Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.GetRemainder Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlTextReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-416">クラスが行情報を返すことができるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-416">Gets a value indicating whether the class can return line information.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-417">クラスが行情報を返せる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-417">
              <see langword="true" /> if the class can return line information; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-418">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-418">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlTextReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-419">現在のノードが <see langword="String.Empty" /> 以外の <see cref="P:System.Xml.XmlTextReader.Value" /> を保持できるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-419">Gets a value indicating whether the current node can have a <see cref="P:System.Xml.XmlTextReader.Value" /> other than <see langword="String.Empty" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-420">リーダーが現在配置されているノードが <see langword="Value" /> を持つことができる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-420">
              <see langword="true" /> if the node on which the reader is currently positioned can have a <see langword="Value" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-421">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-421">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-422">返す値を持つノード型の一覧を次の表に示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-422">The following table lists node types that have a value to return.</span></span>  
  
|<span data-ttu-id="167a8-423">ノード型</span><span class="sxs-lookup"><span data-stu-id="167a8-423">Node type</span></span>|<span data-ttu-id="167a8-424">[値]</span><span class="sxs-lookup"><span data-stu-id="167a8-424">Value</span></span>|  
|---------------|-----------|  
|`Attribute`|<span data-ttu-id="167a8-425">属性の値。</span><span class="sxs-lookup"><span data-stu-id="167a8-425">The value of the attribute.</span></span>|  
|`CDATA`|<span data-ttu-id="167a8-426">CDATA セクションの内容。</span><span class="sxs-lookup"><span data-stu-id="167a8-426">The content of the CDATA section.</span></span>|  
|`Comment`|<span data-ttu-id="167a8-427">コメントの内容。</span><span class="sxs-lookup"><span data-stu-id="167a8-427">The content of the comment.</span></span>|  
|`DocumentType`|<span data-ttu-id="167a8-428">内部サブセット。</span><span class="sxs-lookup"><span data-stu-id="167a8-428">The internal subset.</span></span>|  
|`ProcessingInstruction`|<span data-ttu-id="167a8-429">ターゲットを除く全内容。</span><span class="sxs-lookup"><span data-stu-id="167a8-429">The entire content, excluding the target.</span></span>|  
|`SignificantWhitespace`|<span data-ttu-id="167a8-430">混合コンテンツ モデル内のマークアップ間の空白。</span><span class="sxs-lookup"><span data-stu-id="167a8-430">The white space between markup in a mixed content model.</span></span>|  
|`Text`|<span data-ttu-id="167a8-431">テキスト ノードの内容。</span><span class="sxs-lookup"><span data-stu-id="167a8-431">The content of the text node.</span></span>|  
|`Whitespace`|<span data-ttu-id="167a8-432">マークアップ間の空白。</span><span class="sxs-lookup"><span data-stu-id="167a8-432">The white space between markup.</span></span>|  
|`XmlDeclaration`|<span data-ttu-id="167a8-433">宣言の内容。</span><span class="sxs-lookup"><span data-stu-id="167a8-433">The content of the declaration.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="167a8-434">次の例では、値はすべてのノードの値が表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-434">The following example displays the value for every node that can have a value.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-435">例では、ファイルを使用して`book1.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-435">The example uses the file, `book1.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.HasValue Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.HasValue Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlTextReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-436">現在のノードが、DTD またはスキーマで定義された既定値から生成された属性であるかどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-436">Gets a value indicating whether the current node is an attribute that was generated from the default value defined in the DTD or schema.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-437">このプロパティは常に <see langword="false" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-437">This property always returns <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-438">(<see cref="T:System.Xml.XmlTextReader" /> は既定の属性を展開しません。)</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-438">(<see cref="T:System.Xml.XmlTextReader" /> does not expand default attributes.)</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-439">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-439">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-440">このプロパティは、属性ノードにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-440">This property applies only to attribute nodes.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlTextReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-441">現在のノードが空の要素 (<c>&lt;MyElement/&gt;</c> など) かどうかを示す値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-441">Gets a value indicating whether the current node is an empty element (for example, <c>&lt;MyElement/&gt;</c>).</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-442">
            <see langword="true" /> 現在のノードが要素 (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />) で終了する<c>/ &gt;</c>、それ以外の<see langword="false" />します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-442">
              <see langword="true" /> if the current node is an element (<see cref="P:System.Xml.XmlTextReader.NodeType" /> equals <see langword="XmlNodeType.Element" />) that ends with <c>/&gt;</c>; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-443">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-443">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-444">このプロパティにより、次のことが区別できます。</span><span class="sxs-lookup"><span data-stu-id="167a8-444">This property enables you to determine the difference between the following:</span></span>  
  
 <span data-ttu-id="167a8-445">`<item num="123"/>` (`IsEmptyElement`は`true`)。</span><span class="sxs-lookup"><span data-stu-id="167a8-445">`<item num="123"/>` (`IsEmptyElement` is `true`).</span></span>  
  
 <span data-ttu-id="167a8-446">`<item num="123">` (`IsEmptyElement`は`false`要素の内容は空には)。</span><span class="sxs-lookup"><span data-stu-id="167a8-446">`<item num="123">` (`IsEmptyElement` is `false`, although element content is empty).</span></span>  
  
 <span data-ttu-id="167a8-447">対応する`EndElement`ノードが空の要素の生成されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-447">A corresponding `EndElement` node is not generated for empty elements.</span></span>  
  
 <span data-ttu-id="167a8-448">`IsEmptyElement` 単にソース ドキュメント内の要素がある終了要素タグかどうかを報告します。</span><span class="sxs-lookup"><span data-stu-id="167a8-448">`IsEmptyElement` simply reports whether or not the element in the source document had an end element tag.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-449">次の例では、各要素のテキストの内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-449">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-450">例では、ファイルを使用して`elems.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-450">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlTextReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="namespaceURI">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlTextReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-451">現在の行番号を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-451">Gets the current line number.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-452">現在の行番号。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-452">The current line number.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-453">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-453">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-454">このプロパティは、エラーの報告、最もよく使用されますが、いつでも呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-454">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="167a8-455">このプロパティは開始値`1`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-455">The starting value for this property is `1`.</span></span>  
  
 <span data-ttu-id="167a8-456">組み合わせて<xref:System.Xml.XmlTextReader.LinePosition%2A>、@property`1,1`ドキュメントの開始を示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-456">Combined with <xref:System.Xml.XmlTextReader.LinePosition%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-457">次の例では、各ノードの深さ、行番号、行の位置などが表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-457">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlTextReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-458">現在の行の位置を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-458">Gets the current line position.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-459">現在の行の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-459">The current line position.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-460">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-460">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-461">このプロパティは、エラーの報告、最もよく使用されますが、いつでも呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-461">This property is most commonly used for error reporting, but can be called at any time.</span></span> <span data-ttu-id="167a8-462">プロパティの開始値は`1`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-462">The property's starting value is `1`.</span></span>  
  
 <span data-ttu-id="167a8-463">指定された位置は、マークアップ内のテキストの最初の文字です。</span><span class="sxs-lookup"><span data-stu-id="167a8-463">The position indicated is the first character of text in the markup.</span></span>  
  
```  
<root>  
abc<tag/>  
</root>  
```  
  
 <span data-ttu-id="167a8-464">上記の XML テキストの最初の行で、`LinePosition`の`2`文字に対応する`r`; 2 番目の行に、`LinePosition`の`5`文字に相当する`t`; と 3 番目の行をに`LinePosition`の`3`文字に相当する`r`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-464">On the first line of the preceding XML text, a `LinePosition` of `2` corresponds to the character `r`; on the second line, a `LinePosition` of `5` corresponds to the character `t`; and on the third line, a `LinePosition` of `3` corresponds to the character `r`.</span></span>  
  
 <span data-ttu-id="167a8-465">組み合わせて<xref:System.Xml.XmlTextReader.LineNumber%2A>、@property`1,1`ドキュメントの開始を示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-465">Combined with <xref:System.Xml.XmlTextReader.LineNumber%2A>, a value of `1,1` indicates the start of the document.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-466">次の例では、各ノードの深さ、行番号、行の位置などが表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-466">The following example displays each node including its depth, line number, and line position.</span></span>  
  
 [!code-cpp[XmlTextReader.LineNum#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.LineNum/CPP/readlinenum.cpp#1)]
 [!code-csharp[XmlTextReader.LineNum#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.LineNum/CS/readlinenum.cs#1)]
 [!code-vb[XmlTextReader.LineNum#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.LineNum/VB/readlinenum.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlTextReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-467">現在のノードのローカル名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-467">Gets the local name of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-468">プリフィックスを削除した現在のノードの名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-468">The name of the current node with the prefix removed.</span>
          </span>
          <span data-ttu-id="167a8-469">たとえば、<see langword="LocalName" />は<see langword="book" />要素の<c>&lt;bk:book&gt;</c>します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-469">For example, <see langword="LocalName" /> is <see langword="book" /> for the element <c>&lt;bk:book&gt;</c>.</span>
          </span>
          <span data-ttu-id="167a8-470">名前を持たないノード型 (<see langword="Text" />、<see langword="Comment" /> など) の場合、このプロパティは <see langword="String.Empty" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-470">For node types that do not have a name (like <see langword="Text" />, <see langword="Comment" />, and so on), this property returns <see langword="String.Empty" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-471">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-471">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-472">次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="167a8-472">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-473">例では、ファイルを使用して`book2.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-473">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlTextReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="167a8-474">解決する対象となる名前空間 URI のプレフィックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-474">The prefix whose namespace URI you want to resolve.</span>
          </span>
          <span data-ttu-id="167a8-475">既定の名前空間と一致させるには、空の文字列を渡します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-475">To match the default namespace, pass an empty string.</span>
          </span>
          <span data-ttu-id="167a8-476">この文字列は、最小単位に分割する必要はありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-476">This string does not have to be atomized.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-477">現在の要素のスコープ内の名前空間プリフィックスを解決します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-477">Resolves a namespace prefix in the current element's scope.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-478">プレフィックスの割り当て先の名前空間 URI。条件に合うプレフィックスが見つからない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-478">The namespace URI to which the prefix maps or <see langword="null" /> if no matching prefix is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-479">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-479">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-480">次の XML で、リーダーが配置されている場合に、`href`属性は、プレフィックス`a`が呼び出すことによって解決`reader.LookupNamespace("a")`。</span><span class="sxs-lookup"><span data-stu-id="167a8-480">In the following XML, if the reader is positioned on the `href` attribute, the prefix `a` is resolved by calling `reader.LookupNamespace("a")`.</span></span> <span data-ttu-id="167a8-481">返される文字列は`urn:456`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-481">The returned string is `urn:456`.</span></span>  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-482">
            <see cref="P:System.Xml.XmlTextReader.Namespaces" /> プロパティが <see langword="true" /> に設定され、<paramref name="prefix" /> 値が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-482">The <see cref="P:System.Xml.XmlTextReader.Namespaces" /> property is set to <see langword="true" /> and the <paramref name="prefix" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-483">指定された属性に移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-483">Moves to the specified attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-484">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-484">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlTextReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">
          <span data-ttu-id="167a8-485">属性のインデックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-485">The index of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-486">指定したインデックスを持つ属性に移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-486">Moves to the attribute with the specified index.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-487">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-487">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-488">次の例では、現在のノードですべての属性が表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-488">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-489">
            <paramref name="i" /> パラメーターが 0 未満か、<see cref="P:System.Xml.XmlReader.AttributeCount" /> 以上です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-489">The <paramref name="i" /> parameter is less than 0 or greater than or equal to <see cref="P:System.Xml.XmlReader.AttributeCount" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlTextReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="167a8-490">属性の限定名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-490">The qualified name of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-491">指定した名前を持つ属性へ移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-491">Moves to the attribute with the specified name.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-492">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-492">
              <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-493">
            <see langword="false" /> の場合、リーダーの位置は変更されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-493">If <see langword="false" />, the reader's position does not change.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-494">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-494">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-495">呼び出した後`MoveToAttribute`、 <xref:System.Xml.XmlTextReader.Name%2A>、 <xref:System.Xml.XmlTextReader.NamespaceURI%2A>、および<xref:System.Xml.XmlTextReader.Prefix%2A>プロパティには、その属性のプロパティが反映されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-495">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlTextReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="167a8-496">属性のローカル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-496">The local name of the attribute.</span>
          </span>
        </param>
        <param name="namespaceURI">
          <span data-ttu-id="167a8-497">属性の名前空間 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-497">The namespace URI of the attribute.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-498">指定したローカル名および名前空間 URI の属性に移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-498">Moves to the attribute with the specified local name and namespace URI.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-499">属性が見つかった場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-499">
              <see langword="true" /> if the attribute is found; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-500">
            <see langword="false" /> の場合、リーダーの位置は変更されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-500">If <see langword="false" />, the reader's position does not change.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-501">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-501">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-502">呼び出した後`MoveToAttribute`、 <xref:System.Xml.XmlTextReader.Name%2A>、 <xref:System.Xml.XmlTextReader.NamespaceURI%2A>、および<xref:System.Xml.XmlTextReader.Prefix%2A>プロパティには、その属性のプロパティが反映されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-502">After calling `MoveToAttribute`, the <xref:System.Xml.XmlTextReader.Name%2A>, <xref:System.Xml.XmlTextReader.NamespaceURI%2A>, and <xref:System.Xml.XmlTextReader.Prefix%2A> properties reflects the properties of that attribute.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlTextReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-503">現在の属性ノードを含む要素に移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-503">Moves to the element that contains the current attribute node.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-504">リーダーが属性の位置に配置されている場合は <see langword="true" /> で、属性を所有している要素の位置にリーダーが移動します。リーダーが属性の位置に配置されていない場合は <see langword="false" /> で、リーダーの位置が変更されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-504">
              <see langword="true" /> if the reader is positioned on an attribute (the reader moves to the element that owns the attribute); <see langword="false" /> if the reader is not positioned on an attribute (the position of the reader does not change).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-505">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-505">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-506">このメソッドを使用すると、その属性を操作した後、要素に戻ります。</span><span class="sxs-lookup"><span data-stu-id="167a8-506">Use this method to return to an element after navigating through its attributes.</span></span> <span data-ttu-id="167a8-507">このメソッドは、次のノード タイプのいずれかに、リーダーを移動: `Element`、 `DocumentType`、または`XmlDeclaration`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-507">This method moves the reader to one of the following node types: `Element`, `DocumentType`, or `XmlDeclaration`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-508">次の例では、現在のノードですべての属性が表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-508">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-509">最初の属性に移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-509">Moves to the first attribute.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-510">属性が存在する場合は <see langword="true" /> で、リーダーが最初の属性へ移動します。それ以外の場合は <see langword="false" /> で、リーダーの位置が変更されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-510">
              <see langword="true" /> if an attribute exists (the reader moves to the first attribute); otherwise, <see langword="false" /> (the position of the reader does not change).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-511">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-511">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-512">次の例では、ルート ノードの最初の属性の値を取得します。</span><span class="sxs-lookup"><span data-stu-id="167a8-512">The following example gets the value of the first attribute of the root node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-513">例では、ファイルを使用して`attrs.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-513">The example uses the file, `attrs.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.MoveToFirstAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.MoveToFirstAttribute Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlTextReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-514">次の属性に移動します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-514">Moves to the next attribute.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-515">次の属性が存在する場合は <see langword="true" />。それ以上、属性が存在しない場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-515">
              <see langword="true" /> if there is a next attribute; <see langword="false" /> if there are no more attributes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-516">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-516">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-517">現在のノードが要素ノードの場合は、このメソッドは<xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-517">If the current node is an element node, this method is equivalent to <xref:System.Xml.XmlTextReader.MoveToFirstAttribute%2A>.</span></span> <span data-ttu-id="167a8-518">場合`MoveToNextAttribute`返します`true`リーダーが次の属性に移動します。 それ以外の場合、リーダーの位置は変更されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-518">If `MoveToNextAttribute` returns `true`, the reader moves to the next attribute; otherwise, the position of the reader does not change.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-519">次の例では、現在のノードですべての属性が表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-519">The following example displays all attributes on the current node.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.HasAttributes Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.HasAttributes Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlTextReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-520">現在のノードの限定名を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-520">Gets the qualified name of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-521">現在のノードの限定名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-521">The qualified name of the current node.</span>
          </span>
          <span data-ttu-id="167a8-522">たとえば、<see langword="Name" />は<see langword="bk:book" />要素の<c>&lt;bk:book&gt;</c>します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-522">For example, <see langword="Name" /> is <see langword="bk:book" /> for the element <c>&lt;bk:book&gt;</c>.</span>
          </span>
          <span data-ttu-id="167a8-523">返される名前は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-523">The name returned is dependent on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span>
          </span>
          <span data-ttu-id="167a8-524">リストされた値を返すノード型を次に示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-524">The following node types return the listed values.</span>
          </span>
          <span data-ttu-id="167a8-525">その他のすべてのノード型は、空の文字列を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-525">All other node types return an empty string.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="167a8-526">ノード型</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-526">Node Type</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="167a8-527">name</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-527">Name</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <see langword="Attribute" />
              </term>
              <description>
                <span data-ttu-id="167a8-528">属性の名前。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-528">The name of the attribute.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="DocumentType" />
              </term>
              <description>
                <span data-ttu-id="167a8-529">ドキュメントの種類の名前。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-529">The document type name.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Element" />
              </term>
              <description>
                <span data-ttu-id="167a8-530">タグ名。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-530">The tag name.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="EntityReference" />
              </term>
              <description>
                <span data-ttu-id="167a8-531">参照されたエンティティの名前。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-531">The name of the entity referenced.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="ProcessingInstruction" />
              </term>
              <description>
                <span data-ttu-id="167a8-532">処理命令の対象。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-532">The target of the processing instruction.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="XmlDeclaration" />
              </term>
              <description>
                <span data-ttu-id="167a8-533">リテラル文字列 <see langword="xml" />。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-533">The literal string <see langword="xml" />.</span>
                </span>
              </description>
            </item>
          </list>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-534">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-534">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-535">次の例では、XML ファイルを読み取るし、各ノードを表示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-535">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-536">このサンプルは、ファイルを使用して`items.xml`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-536">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-537">名前空間をサポートするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-537">Gets or sets a value indicating whether to do namespace support.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-538">名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-538">
              <see langword="true" /> to do namespace support; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-539">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-539">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-540">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-540">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-541">このプロパティは、リーダーが www.w3.org/TR/REC-xml-names にある XML 』 での W3C 名前空間をサポートしているかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="167a8-541">This property determines whether the reader supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</span></span>  
  
 <span data-ttu-id="167a8-542">`Namespaces`読み取り操作が行われた後、プロパティを設定できません。</span><span class="sxs-lookup"><span data-stu-id="167a8-542">The `Namespaces` property cannot be set after a read operation has occurred.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-543">読み取り操作が発生した後で (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Initial" /> でないとき)、このプロパティを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-543">Setting this property after a read operation has occurred (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is not <see langword="ReadState.Initial" />).</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlTextReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-544">リーダーが配置されているノードの名前空間 URI (W3C の名前空間の仕様における定義に準拠) を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-544">Gets the namespace URI (as defined in the W3C Namespace specification) of the node on which the reader is positioned.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-545">現在のノードの名前空間 URI。それ以外の場合は空の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-545">The namespace URI of the current node; otherwise an empty string.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-546">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-546">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-547">このプロパティは、関連する`Element`と`Attribute`ノードのみです。</span><span class="sxs-lookup"><span data-stu-id="167a8-547">This property is relevant to `Element` and `Attribute` nodes only.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-548">次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="167a8-548">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-549">例では、ファイルを使用して`book2.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-549">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlTextReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-550">この実装に関連付けられている <see cref="T:System.Xml.XmlNameTable" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-550">Gets the <see cref="T:System.Xml.XmlNameTable" /> associated with this implementation.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-551">ノード内の最小単位に分割された文字列を取得できる <see langword="XmlNameTable" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-551">The <see langword="XmlNameTable" /> enabling you to get the atomized version of a string within the node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-552">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-552">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-553">すべてのノードと属性名から返される<xref:System.Xml.XmlTextReader>を使用して最小単位に分割されて、`NameTable`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-553">All node and attribute names returned from <xref:System.Xml.XmlTextReader> are atomized using the `NameTable`.</span></span> <span data-ttu-id="167a8-554">同じ名前に複数回が返される場合 (たとえば、 `Customer`)、し、同じ`String`その名前のオブジェクトが返されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-554">When the same name is returned multiple times (for example, `Customer`), then the same `String` object is returned for that name.</span></span> <span data-ttu-id="167a8-555">これにより、オブジェクト比較負荷の高い文字列比較ではなく、これらの文字列で効率的なコードを記述することが可能にします。</span><span class="sxs-lookup"><span data-stu-id="167a8-555">This makes it possible for you to write efficient code that does object comparisons on these strings instead of expensive string comparisons.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlTextReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-556">現在のノードの種類を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-556">Gets the type of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-557">現在のノードの型を表す <see cref="T:System.Xml.XmlNodeType" /> 値の 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-557">One of the <see cref="T:System.Xml.XmlNodeType" /> values representing the type of the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-558">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-558">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-559">このプロパティは、次を返しません`XmlNodeType`型: `Document`、 `DocumentFragment`、 `Entity`、 `EndEntity`、または`Notation`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-559">This property never returns the following `XmlNodeType` types: `Document`, `DocumentFragment`, `Entity`, `EndEntity`, or `Notation`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-560">次の例では、XML ファイルを読み取るし、各ノードを表示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-560">The following example reads an XML file and displays each of the nodes.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-561">このサンプルは、ファイルを使用して`items.xml`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-561">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Normalization">
      <MemberSignature Language="C#" Value="public bool Normalization { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Normalization" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Normalization" />
      <MemberSignature Language="VB.NET" Value="Public Property Normalization As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Normalization { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Normalization : bool with get, set" Usage="System.Xml.XmlTextReader.Normalization" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-562">空白と属性値を正規化するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-562">Gets or sets a value indicating whether to normalize white space and attribute values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-563">正規化する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-563">
              <see langword="true" /> to normalize; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-564">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-564">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-565">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-565">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-566">このプロパティは、いつでも変更でき、[次へ] の読み取り操作を有効になります。</span><span class="sxs-lookup"><span data-stu-id="167a8-566">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="167a8-567">場合、<xref:System.Xml.XmlTextReader>を構築するために使用する<xref:System.Xml.XmlValidatingReader>、属性の値を正規化する`Normalization`に設定する必要があります`true`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-567">If the <xref:System.Xml.XmlTextReader> is used to construct an <xref:System.Xml.XmlValidatingReader>, to normalize attribute values, `Normalization` must be set to `true`.</span></span>  
  
 <span data-ttu-id="167a8-568">場合`Normalization`に設定されている`false`、これも数値エンティティの文字範囲チェックを無効にします。</span><span class="sxs-lookup"><span data-stu-id="167a8-568">If `Normalization` is set to `false`, this also disables character range checking for numeric entities.</span></span> <span data-ttu-id="167a8-569">その結果などのエンティティの文字`&#0;`、許可されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-569">As a result, character entities, such as `&#0;`, are allowed.</span></span>  
  
 <span data-ttu-id="167a8-570">属性値の正規化を次に示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-570">The following describes attribute value normalization:</span></span>  
  
-   <span data-ttu-id="167a8-571">文字参照については、参照されている文字を属性値に追加します。</span><span class="sxs-lookup"><span data-stu-id="167a8-571">For a character reference, append the referenced character to the attribute value.</span></span>  
  
-   <span data-ttu-id="167a8-572">エンティティ参照については、エンティティの置換テキストを再帰的に処理します。</span><span class="sxs-lookup"><span data-stu-id="167a8-572">For an entity reference, recursively process the replacement text of the entity.</span></span>  
  
-   <span data-ttu-id="167a8-573">空白文字 (#x20、#xD、#xA、#x9) の正規化された値に #x20 を追加します。</span><span class="sxs-lookup"><span data-stu-id="167a8-573">For a white space character (#x20, #xD, #xA, #x9), append #x20 to the normalized value.</span></span> <span data-ttu-id="167a8-574">(単一 #x 20 のみは内部の解析対象エンティティのリテラル エンティティ値または外部解析エンティティの一部である"#xD #xA"シーケンスに追加されます。)</span><span class="sxs-lookup"><span data-stu-id="167a8-574">(Only a single #x20 is appended for a "#xD#xA" sequence that is part of an external parsed entity or the literal entity value of an internal parsed entity.)</span></span>  
  
-   <span data-ttu-id="167a8-575">その他の文字は、正規化された値にそのまま追加します。</span><span class="sxs-lookup"><span data-stu-id="167a8-575">Process other characters by appending them to the normalized value.</span></span>  
  
-   <span data-ttu-id="167a8-576">宣言された値が CDATA でない場合、先頭と末尾のスペース (#x20) 文字を破棄し、空白 (#x20) 文字のシーケンスを単一の空白 (#x20) 文字に置き換えます。</span><span class="sxs-lookup"><span data-stu-id="167a8-576">If the declared value is not CDATA, discard any leading and trailing space (#x20) characters and replace sequences of space (#x20) characters with a single space (#x20) character.</span></span>  
  
 <span data-ttu-id="167a8-577">`XmlTextReader`のみ属性または CDATA 正規化を実行します。</span><span class="sxs-lookup"><span data-stu-id="167a8-577">The `XmlTextReader` only performs attribute or CDATA normalization.</span></span> <span data-ttu-id="167a8-578">内でラップしない限り、DTD に固有の正規化を実行しない、`XmlValidatingReader`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-578">It does not do DTD-specific normalization unless wrapped within an `XmlValidatingReader`.</span></span>  
  
 <span data-ttu-id="167a8-579">正規化の詳細については、w3c 勧告 『 XML 1.0 の推奨事項を参照してください。</span><span class="sxs-lookup"><span data-stu-id="167a8-579">Refer to the W3C XML 1.0 recommendation for further discussion on normalization.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-580">次の例では、リーダーの動作は正規化をオンにし、外とします。</span><span class="sxs-lookup"><span data-stu-id="167a8-580">The following example shows reader behavior with normalization turned on and then off.</span></span>  
  
 [!code-cpp[XmlTextReader.Normalization#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.Normalization/CPP/readnormal.cpp#1)]
 [!code-csharp[XmlTextReader.Normalization#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.Normalization/CS/readnormal.cs#1)]
 [!code-vb[XmlTextReader.Normalization#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.Normalization/VB/readnormal.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-581">リーダーが閉じているとき (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Closed" /> のとき) にこのプロパティを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-581">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlTextReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-582">現在のノードに関連付けられた名前空間プリフィックスを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-582">Gets the namespace prefix associated with the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-583">現在のノードに関連付けられた名前空間プリフィックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-583">The namespace prefix associated with the current node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-584">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-584">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-585">次の例は、各ノードのローカル名を表示し、プレフィックスと名前空間 URI、存在しない場合。</span><span class="sxs-lookup"><span data-stu-id="167a8-585">The following example displays the local name of each node, and, if they exist, the prefix and namespace URI.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.LocalName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-586">例では、ファイルを使用して`book2.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-586">The example uses the file, `book2.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.LocalName Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.LocalName Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlTextReader.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.Obsolete("Use DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-587">DTD 処理を許可するかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-587">Gets or sets a value indicating whether to allow DTD processing.</span>
          </span>
          <span data-ttu-id="167a8-588">このプロパティは今後使用しません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-588">This property is obsolete.</span>
          </span>
          <span data-ttu-id="167a8-589">代わりに、<see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> を使用してください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-589">Use <see cref="P:System.Xml.XmlTextReader.DtdProcessing" /> instead.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-590">DTD 処理を許可しない場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-590">
              <see langword="true" /> to disallow DTD processing; otherwise <see langword="false" />.</span>
          </span>
          <span data-ttu-id="167a8-591">既定値は、<see langword="false" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-591">The default is <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-592">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-592">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-593">DTD の処理が有効の既定で下位互換性です。</span><span class="sxs-lookup"><span data-stu-id="167a8-593">DTD processing is enabled by default for backwards compatibility.</span></span> <span data-ttu-id="167a8-594">ただし、アプリケーションは、DTD 処理を必要とする場合を除き、この設定を無効にする必要があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-594">However, unless your application requires DTD processing, you should disable this setting.</span></span> <span data-ttu-id="167a8-595">DTD 処理を無効にすると、一部のサービス不能攻撃の防止に役立つ場合があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-595">Disabling DTD processing can be useful in preventing certain denial of service attacks.</span></span> <span data-ttu-id="167a8-596">場合に設定`true`、リーダーがスローされます、 <xref:System.Xml.XmlException> DTD コンテンツが発生したとき。</span><span class="sxs-lookup"><span data-stu-id="167a8-596">If set to `true`, the reader throws an <xref:System.Xml.XmlException> when any DTD content is encountered.</span></span>  
  
 <span data-ttu-id="167a8-597">DTD 処理を有効にした場合は、信頼されていないソースから可能なサービス拒否攻撃の Dtd を含む意識する必要があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-597">If you have DTD processing enabled, you need to be aware of including DTDs from untrusted sources and possible denial of service attacks.</span></span> <span data-ttu-id="167a8-598">使用して、<xref:System.Xml.XmlSecureResolver>リソース制限を<xref:System.Xml.XmlTextReader>にアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-598">Use the <xref:System.Xml.XmlSecureResolver> to restrict the resources that the <xref:System.Xml.XmlTextReader> can access.</span></span> <span data-ttu-id="167a8-599">また、XML 処理に対するメモリと時間の割り当てが制限されるようにアプリケーションをデザインすることもできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-599">You can also design your application so that the XML processing is memory and time constrained.</span></span> <span data-ttu-id="167a8-600">たとえば、ASP.NET アプリケーションでタイムアウト制限を構成します。</span><span class="sxs-lookup"><span data-stu-id="167a8-600">For example, configure time-out limits in your ASP.NET application</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlTextReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-601">属性ノードの値を囲むために使用する引用符文字を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-601">Gets the quotation mark character used to enclose the value of an attribute node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-602">属性ノードの値を囲むために使用されている引用符 (" または ')。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-602">The quotation mark character (" or ') used to enclose the value of an attribute node.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-603">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-603">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-604">このプロパティは、属性ノードにのみ適用されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-604">This property applies only to an attribute node.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlTextReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-605">ストリームから次のノードを読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-605">Reads the next node from the stream.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-606">次のノードが正常に読み取られた場合は <see langword="true" />。それ以上読み取る対象となるノードが存在しない場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-606">
              <see langword="true" /> if the next node was read successfully; <see langword="false" /> if there are no more nodes to read.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-607">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-607">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-608">リーダーが最初に作成および初期化時にありません情報。</span><span class="sxs-lookup"><span data-stu-id="167a8-608">When a reader is first created and initialized, there is no information available.</span></span> <span data-ttu-id="167a8-609">呼び出す必要があります`Read`を最初のノードを読み取る。</span><span class="sxs-lookup"><span data-stu-id="167a8-609">You must call `Read` to read the first node.</span></span>  
  
 <span data-ttu-id="167a8-610">このメソッドでは、解析を開始するには、データ ストリームから、少なくとも 4 バイトが必要です。</span><span class="sxs-lookup"><span data-stu-id="167a8-610">This method requires at least four bytes from the data stream in order to begin parsing.</span></span> <span data-ttu-id="167a8-611">4 バイトよりも少ないが返されるストリームのデータがある場合は、このメソッドは失敗します。</span><span class="sxs-lookup"><span data-stu-id="167a8-611">If fewer than four bytes are returned and there is no more data in the stream, the method will fail.</span></span> <span data-ttu-id="167a8-612">ストリームにより多くのデータがある場合、4 番目のバイト受信までの解析メソッドがブロックされます。</span><span class="sxs-lookup"><span data-stu-id="167a8-612">If there is more data in the stream, the method will block parsing until receipt of the fourth byte.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-613">次の例では、XML ファイルを読み取るし、各ノードを表示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-613">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-614">このサンプルは、ファイルを使用して`items.xml`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-614">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-615">XML の解析中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-615">An error occurred while parsing the XML.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlTextReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-616">属性値を解析して、1 つ以上の <see langword="Text" />、<see langword="EntityReference" />、<see langword="EndEntity" /> の各ノードに格納します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-616">Parses the attribute value into one or more <see langword="Text" />, <see langword="EntityReference" />, or <see langword="EndEntity" /> nodes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-617">返すノードがある場合は <see langword="true" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-617">
              <see langword="true" /> if there are nodes to return.</span>
          </span>
          <span data-ttu-id="167a8-618">初めて呼び出すときにリーダーの位置が属性ノード上にない場合、またはすべての属性値が読み込まれている場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-618">
              <see langword="false" /> if the reader is not positioned on an attribute node when the initial call is made or if all the attribute values have been read.</span>
          </span>
          <span data-ttu-id="167a8-619">
            <c>misc=""</c> などの空の属性は、値 <see langword="String.Empty" /> を持つ単一のノードと一緒に <see langword="true" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-619">An empty attribute, such as, <c>misc=""</c>, returns <see langword="true" /> with a single node with a value of <see langword="String.Empty" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-620">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-620">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-621">このメソッドを使用して呼び出した後`MoveToAttribute`に目を通して属性の値を構成するテキストまたはエンティティ参照ノード。</span><span class="sxs-lookup"><span data-stu-id="167a8-621">Use this method after calling `MoveToAttribute` to read through the text or entity reference nodes that make up the attribute value.</span></span> <span data-ttu-id="167a8-622"><xref:System.Xml.XmlReader.Depth%2A>属性の値のノードのいずれかと、属性ノードの深さは、以外の値が増加し、一般エンティティ参照の出入りにステップするとき。</span><span class="sxs-lookup"><span data-stu-id="167a8-622">The <xref:System.Xml.XmlReader.Depth%2A> of the attribute value nodes is one plus the depth of the attribute node; it increments and decrements by one when you step into and out of general entity references.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-623">次の例では、テキストとエンティティのノードを使用して属性を読み取ります。</span><span class="sxs-lookup"><span data-stu-id="167a8-623">The following example reads an attribute with text and entity nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CPP/readattrval.cpp#1)]
 [!code-csharp[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/CS/readattrval.cs#1)]
 [!code-vb[XmlTextReader.ReadAttributeValue#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ReadAttributeValue/VB/readattrval.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBase64">
      <MemberSignature Language="C#" Value="public int ReadBase64 (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBase64(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBase64 (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBase64(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBase64 (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="167a8-624">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-624">The array of characters that serves as the buffer to which the text contents are written.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="167a8-625">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス (0 から始まる)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-625">The zero-based index into the array specifying where the method can begin to write to the buffer.</span>
          </span>
        </param>
        <param name="len">
          <span data-ttu-id="167a8-626">バッファーに書き込むバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-626">The number of bytes to write into the buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-627">Base64 をデコードし、デコードされたバイナリ バイトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-627">Decodes Base64 and returns the decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-628">バッファーに書き込まれたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-628">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-629">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-629">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-630">ような<xref:System.Xml.XmlTextReader.ReadChars%2A>、埋め込みのテキストの大量のストリームを読み取るこのメソッドが連続して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-630">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="167a8-631">Base64 のコンテンツをデコードし、デコードされたバイナリ バイトを返します (たとえば、インライン Base64 エンコード GIF イメージ) をバッファーします。</span><span class="sxs-lookup"><span data-stu-id="167a8-631">It decodes Base64 content and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="167a8-632">RFC 1521 を参照してください。</span><span class="sxs-lookup"><span data-stu-id="167a8-632">See RFC 1521.</span></span> <span data-ttu-id="167a8-633">(から Rfc を取得することができます、[コメントの Web サイトの要求](https://www.rfc-editor.org))。</span><span class="sxs-lookup"><span data-stu-id="167a8-633">(You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).)</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-634">次の例では、Base64、BinHex のデータを含むファイルを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="167a8-634">The following example reads a file containing Base64 and BinHex data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-635">サンプル ファイルを使用します。 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="167a8-635">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-636">Base64 シーケンスが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-636">The Base64 sequence is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-637">
            <paramref name="array" /> の値が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-637">The value of <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-638">
            <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-638">
              <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadBinHex">
      <MemberSignature Language="C#" Value="public int ReadBinHex (byte[] array, int offset, int len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadBinHex(unsigned int8[] array, int32 offset, int32 len) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadBinHex (array As Byte(), offset As Integer, len As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadBinHex(cli::array &lt;System::Byte&gt; ^ array, int offset, int len);" />
      <MemberSignature Language="F#" Value="member this.ReadBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadBinHex (array, offset, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="len" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">
          <span data-ttu-id="167a8-639">デコードされたバイナリ バイトが書き込まれるバッファーとして機能するバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-639">The byte array that serves as the buffer to which the decoded binary bytes are written.</span>
          </span>
        </param>
        <param name="offset">
          <span data-ttu-id="167a8-640">メソッドがバッファーへの書き込みを開始できる位置を示す配列のインデックス (0 から始まる)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-640">The zero-based index into the array specifying where the method can begin to write to the buffer.</span>
          </span>
        </param>
        <param name="len">
          <span data-ttu-id="167a8-641">バッファーに書き込むバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-641">The number of bytes to write into the buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-642">
            <see langword="BinHex" /> をデコードし、デコードされたバイナリ バイトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-642">Decodes <see langword="BinHex" /> and returns the decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-643">バッファーに書き込まれたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-643">The number of bytes written to your buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-644">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-644">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-645">ような<xref:System.Xml.XmlTextReader.ReadChars%2A>、埋め込みのテキストの大量のストリームを読み取るこのメソッドが連続して呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-645">Like <xref:System.Xml.XmlTextReader.ReadChars%2A>, this method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="167a8-646">デコード`BinHex`コンテンツをデコードされたバイナリ バイトを返します (たとえば、インライン`BinHex`GIF イメージのエンコードされた) バッファーにします。</span><span class="sxs-lookup"><span data-stu-id="167a8-646">It decodes `BinHex` content and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-647">次の例は、含んでいるファイルを読み取って`Base64`と`BinHex`データ。</span><span class="sxs-lookup"><span data-stu-id="167a8-647">The following example reads a file containing `Base64` and `BinHex` data.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadBase64 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-648">サンプル ファイルを使用します。 `binary.xml`</span><span class="sxs-lookup"><span data-stu-id="167a8-648">The sample uses the file `binary.xml`</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.ReadBase64 Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.ReadBase64 Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-649">
            <see langword="BinHex" /> シーケンスが有効ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-649">The <see langword="BinHex" /> sequence is not valid.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-650">
            <paramref name="array" /> の値が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-650">The value of <paramref name="array" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-651">
            <paramref name="offset" /> &lt; 0、または <paramref name="len" /> &lt; 0、または <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-651">
              <paramref name="offset" /> &lt; 0, or <paramref name="len" /> &lt; 0, or <paramref name="len" /> &gt; <paramref name="array" />.Length- <paramref name="offset" />.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadChars">
      <MemberSignature Language="C#" Value="public int ReadChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 ReadChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadChars (buffer As Char(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int ReadChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="member this.ReadChars : char[] * int * int -&gt; int" Usage="xmlTextReader.ReadChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="167a8-652">テキストの内容が書き込まれるバッファーとして機能する文字の配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-652">The array of characters that serves as the buffer to which the text contents are written.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="167a8-653">メソッドがテキストの内容の書き込みを開始できる <paramref name="buffer" /> 内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-653">The position within <paramref name="buffer" /> where the method can begin writing text contents.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="167a8-654">
            <paramref name="buffer" /> に書き込む文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-654">The number of characters to write into <paramref name="buffer" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-655">要素のテキストの内容を文字バッファーに読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-655">Reads the text contents of an element into a character buffer.</span>
          </span>
          <span data-ttu-id="167a8-656">このメソッドは、連続して呼び出すことによって埋め込みテキストの大量のストリームを読み取るように設計されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-656">This method is designed to read large streams of embedded text by calling it successively.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-657">読み取った文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-657">The number of characters read.</span>
          </span>
          <span data-ttu-id="167a8-658">リーダーが要素に配置されていない場合、または返す対象となるテキストの内容が現在のコンテキスト内にこれ以上ない場合は、<see langword="0" /> になる可能性があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-658">This can be <see langword="0" /> if the reader is not positioned on an element or if there is no more text content to return in the current context.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-659">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-659">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-660">これは、XML ドキュメントに埋め込まれたテキストの非常に大量のストリームを処理する最も効率的な方法です。</span><span class="sxs-lookup"><span data-stu-id="167a8-660">This is the most efficient way to process very large streams of text embedded in an XML document.</span></span> <span data-ttu-id="167a8-661">大きな文字列のオブジェクトを割り当てではなく`ReadChars`一度にテキスト コンテンツ バッファーを返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-661">Rather than allocating large string objects, `ReadChars` returns text content a buffer at a time.</span></span> <span data-ttu-id="167a8-662">このメソッドは、要素ノードでのみ動作設計されています。</span><span class="sxs-lookup"><span data-stu-id="167a8-662">This method is designed to work only on element nodes.</span></span> <span data-ttu-id="167a8-663">その他のノード型は原因`ReadChars`を返す`0`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-663">Other node types cause `ReadChars` to return `0`.</span></span>  
  
 <span data-ttu-id="167a8-664">開始タグにリーダーが配置されている場合、次の XML で`ReadChars`返します`test`と終了タグの後、リーダーが配置します。</span><span class="sxs-lookup"><span data-stu-id="167a8-664">In the following XML, if the reader is positioned on the start tag, `ReadChars` returns `test` and positions the reader after the end tag.</span></span>  
  
```xml  
<Item>test</Item>  
```  
  
 <span data-ttu-id="167a8-665">`ReadChars` 次の機能があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-665">`ReadChars` has the following functionality:</span></span>  
  
-   <span data-ttu-id="167a8-666">このメソッドは、要素ノードのみで動作設計されています。</span><span class="sxs-lookup"><span data-stu-id="167a8-666">This method is designed to work on element nodes only.</span></span> <span data-ttu-id="167a8-667">その他のノード型は原因`ReadChars`0 を返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-667">Other node types cause `ReadChars` to return 0.</span></span>  
  
-   <span data-ttu-id="167a8-668">このメソッドは、実際の文字のコンテンツを返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-668">This method returns the actual character content.</span></span> <span data-ttu-id="167a8-669">エンティティ、CDATA、または発生したその他のマークアップの解決を試行することはありません。</span><span class="sxs-lookup"><span data-stu-id="167a8-669">There is no attempt to resolve entities, CDATA, or any other markup encountered.</span></span> <span data-ttu-id="167a8-670">`ReadChars` 開始タグとマークアップを含めて、終了タグの間には、すべてのものを返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-670">`ReadChars` returns everything between the start tag and the end tag, including markup.</span></span>  
  
-   <span data-ttu-id="167a8-671">`ReadChars` 整形式 XML マークアップは無視されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-671">`ReadChars` ignores XML markup that is not well-formed.</span></span> <span data-ttu-id="167a8-672">たとえば、次の XML 文字列を読み取るときに`<A>1<A>2</A>`、`ReadChars`返します`1<A>2</A>`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-672">For example, when reading the following XML string `<A>1<A>2</A>`, `ReadChars` returns `1<A>2</A>`.</span></span> <span data-ttu-id="167a8-673">(マークアップを返します。 一致する要素のペアからおり、他のユーザーは無視されます。)</span><span class="sxs-lookup"><span data-stu-id="167a8-673">(It returns markup from the matching element pair and ignores others.)</span></span>  
  
-   <span data-ttu-id="167a8-674">このメソッドでは、どのような正規化は実行しません。</span><span class="sxs-lookup"><span data-stu-id="167a8-674">This method does not do any normalization.</span></span>  
  
-   <span data-ttu-id="167a8-675">ときに`ReadChars`末尾に達したと文字のストリームの値 0 が返されます。 終了タグの後にリーダーが配置されています。</span><span class="sxs-lookup"><span data-stu-id="167a8-675">When `ReadChars` has reached the end of the character stream, it returns the value 0 and the reader is positioned after the end tag.</span></span>  
  
-   <span data-ttu-id="167a8-676">メソッドには使用中には使用できませんの属性を読み取る`ReadChars`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-676">Attribute read methods are not available while using `ReadChars`.</span></span>  
  
 <span data-ttu-id="167a8-677">たとえば、次の XML を使用します。</span><span class="sxs-lookup"><span data-stu-id="167a8-677">For example, using the following XML:</span></span>  
  
```xml  
<thing>  
 some text  
</thing>  
<item>  
</item>  
```  
  
 <span data-ttu-id="167a8-678">リーダーの位置を上、 `<item>` while の末尾にある要素をループします。</span><span class="sxs-lookup"><span data-stu-id="167a8-678">The reader is positioned on the `<item>` element at the end of the while loop.</span></span>  
  
```csharp  
if (XmlNodeType.Element == reader.NodeType && "thing" == reader.Name)  
{  
 while(0 != reader.ReadChars(buffer, 0, 1)  
 {  
 // Do something.  
 // Attribute values are not available at this point.  
 }  
}  
```  
  
   
  
## Examples  
 <span data-ttu-id="167a8-679">次の例では XML を使用して読み取り`ReadChars`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-679">The following example reads in XML using `ReadChars`.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.ReadChars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.ReadChars Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-680">この例は、`items.xml` ファイルを入力として使用します。</span><span class="sxs-lookup"><span data-stu-id="167a8-680">The example uses the `items.xml` file as input.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="167a8-681">
            <paramref name="count" /> が <paramref name="buffer" /> (バッファー サイズ - <paramref name="index" />) で指定した値を超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-681">
              <paramref name="count" /> is greater than the space specified in the <paramref name="buffer" /> (buffer size - <paramref name="index" />).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-682">
            <paramref name="buffer" /> 値が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-682">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-683">
            <paramref name="index" />
            <see langword="&lt; 0" /> または <paramref name="count" /><see langword="&lt; 0" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-683">
              <paramref name="index" />
              <see langword="&lt; 0" /> or <paramref name="count" /><see langword="&lt; 0" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.XmlTextReader.ReadBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="167a8-684">結果として得られるテキストのコピー先のバッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-684">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="167a8-685">この値を <see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-685">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="167a8-686">バッファー内の結果のコピー開始位置を示すオフセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-686">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="167a8-687">バッファーにコピーする最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-687">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="167a8-688">コピーされた実際のバイト数は、このメソッドから返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-688">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-689">コンテンツを読み取り、<see langword="Base64" /> でデコードされたバイナリ バイトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-689">Reads the content and returns the <see langword="Base64" /> decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-690">バッファーに書き込まれたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-690">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-691">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-691">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-692">このメソッドは、コンテンツをストリームをデコードします、`Base64`コンテンツ、およびデコードされたバイナリ バイトを返します (たとえば、インライン`Base64`-GIF イメージのエンコード) バッファーにします。</span><span class="sxs-lookup"><span data-stu-id="167a8-692">This method streams the content, decodes the `Base64` content, and returns the decoded binary bytes (for example, an inline `Base64`-encoded GIF image) into the buffer.</span></span> <span data-ttu-id="167a8-693">このメソッドは、埋め込みのテキストの大量のストリームを読み取る連続して呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-693">This method can be called successively to read large streams of embedded text.</span></span> <span data-ttu-id="167a8-694">詳細については、RFC 1521 を参照してください。"MIME (Multipurpose Internet Mail Extensions) パート 1: を指定すると、Internet Message Bodies の形式を記述するためのメカニズム"。</span><span class="sxs-lookup"><span data-stu-id="167a8-694">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="167a8-695">Rfc を取得することができます、[コメントの Web サイトの要求](https://www.rfc-editor.org)します。</span><span class="sxs-lookup"><span data-stu-id="167a8-695">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="167a8-696">呼び出しの間でリーダー プロパティのいずれかにアクセスする必要がありますできません、<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>メソッドまで、メソッドが値 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-696">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="167a8-697">このメソッドでは、次の動作があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-697">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="167a8-698"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 操作のバイト ストリームの末尾に達したときに、値 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-698"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="167a8-699">リーダーは最初の非コンテンツ ノードに配置されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-699">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="167a8-700">要求、またはバイトは、リーダー、ストリームに残りますよりも、正確な数は、現在の位置に残ります。</span><span class="sxs-lookup"><span data-stu-id="167a8-700">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="167a8-701"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> 次の XML ノード型はサポートされていません: `Element`、 `XmlDeclaration`、 `None`、 `Document`、 `DocumentType`、 `Notation`、 `Entity`、`DocumentFragment`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-701"><xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-702">
            <paramref name="buffer" /> 値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-702">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-703">
            <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-703">
              <see cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> is not supported in the current node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-704">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-704">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="167a8-705">結果として得られるテキストのコピー先のバッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-705">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="167a8-706">この値を <see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-706">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="167a8-707">バッファー内の結果のコピー開始位置を示すオフセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-707">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="167a8-708">バッファーにコピーする最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-708">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="167a8-709">コピーされた実際のバイト数は、このメソッドから返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-709">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-710">コンテンツを読み取り、<see langword="BinHex" /> でデコードされたバイナリ バイトを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-710">Reads the content and returns the <see langword="BinHex" /> decoded binary bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-711">バッファーに書き込まれたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-711">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-712">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-712">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-713">このメソッドは、コンテンツをストリームをデコードします、`BinHex`コンテンツ、およびデコードされたバイナリ バイトを返します (たとえば、インライン`BinHex`GIF イメージのエンコード) バッファーにします。</span><span class="sxs-lookup"><span data-stu-id="167a8-713">This method streams the content, decodes the `BinHex` content, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span> <span data-ttu-id="167a8-714">このメソッドは、埋め込みのテキストの大量のストリームを読み取る連続して呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-714">This method can be called successively to read large streams of embedded text.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="167a8-715">呼び出しの間でリーダー プロパティのいずれかにアクセスする必要がありますできません、<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>メソッドまで、メソッドが値 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-715">You should not access any of the reader properties between calls to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method until the method returns the value 0.</span></span>  
  
 <span data-ttu-id="167a8-716">このメソッドでは、次の動作があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-716">This method has the following behavior:</span></span>  
  
-   <span data-ttu-id="167a8-717"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 操作のバイト ストリームの末尾に達したときに、値 0 を返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-717"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> returns the value 0 when it has reached the end of the byte stream it was operating on.</span></span> <span data-ttu-id="167a8-718">リーダーは最初の非コンテンツ ノードに配置されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-718">The reader is positioned on the first non-content node.</span></span>  
  
-   <span data-ttu-id="167a8-719">要求、またはバイトは、リーダー、ストリームに残りますよりも、正確な数は、現在の位置に残ります。</span><span class="sxs-lookup"><span data-stu-id="167a8-719">If you ask for fewer, or the exact number, of bytes than are left in the stream the reader remains in its current position.</span></span>  
  
-   <span data-ttu-id="167a8-720"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> 次の XML ノード型はサポートされていません: `Element`、 `XmlDeclaration`、 `None`、 `Document`、 `DocumentType`、 `Notation`、 `Entity`、`DocumentFragment`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-720"><xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> is not supported on the following XML node types: `Element`, `XmlDeclaration`, `None`, `Document`, `DocumentType`, `Notation`, `Entity`, `DocumentFragment`.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-721">
            <paramref name="buffer" /> 値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-721">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-722">
            <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> は、現在のノードではサポートされていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-722">
              <see cref="M:System.Xml.XmlTextReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> is not supported on the current node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-723">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-723">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="167a8-724">
            <see cref="T:System.Xml.XmlTextReader" /> 実装が、このメソッドをサポートしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-724">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="167a8-725">結果として得られるテキストのコピー先のバッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-725">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="167a8-726">この値を <see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-726">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="167a8-727">バッファー内の結果のコピー開始位置を示すオフセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-727">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="167a8-728">バッファーにコピーする最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-728">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="167a8-729">コピーされた実際のバイト数は、このメソッドから返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-729">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-730">要素を読み取り、Base64 のコンテンツをデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-730">Reads the element and decodes the Base64 content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-731">バッファーに書き込まれたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-731">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-732">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-732">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-733">このメソッドは、要素の内容を読み取り、Base64 エンコーディングを使用してデコードし、デコードされたバイナリ バイトを返します (たとえば、インライン Base64 エンコード GIF イメージ) をバッファーします。</span><span class="sxs-lookup"><span data-stu-id="167a8-733">This method reads the element content, decodes it using Base64 encoding, and returns the decoded binary bytes (for example, an inline Base64 encoded GIF image) into the buffer.</span></span> <span data-ttu-id="167a8-734">詳細については、RFC 1521 を参照してください。"MIME (Multipurpose Internet Mail Extensions) パート 1: を指定すると、Internet Message Bodies の形式を記述するためのメカニズム"。</span><span class="sxs-lookup"><span data-stu-id="167a8-734">For more information, see RFC 1521, "MIME (Multipurpose Internet Mail Extensions) Part One: Mechanisms for Specifying and Describing the Format of Internet Message Bodies".</span></span> <span data-ttu-id="167a8-735">Rfc を取得することができます、[コメントの Web サイトの要求](https://www.rfc-editor.org)します。</span><span class="sxs-lookup"><span data-stu-id="167a8-735">You can obtain RFCs from the [Request for Comments Web site](https://www.rfc-editor.org).</span></span>  
  
 <span data-ttu-id="167a8-736">このメソッドは、単純なコンテンツの要素を読み取るだけことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-736">This method can only read simple-content elements.</span></span> <span data-ttu-id="167a8-737">要素は、テキスト、空白、有意の空白、CDATA セクションでは、コメントおよび処理命令に含めることができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-737">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="167a8-738">または自動的に展開されるエンティティ参照を含めることもできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-738">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="167a8-739">要素は、子要素を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="167a8-739">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="167a8-740">このメソッドとよく似ています、<xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A>する点のメソッドは、要素ノードの種類でのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-740">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBase64%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="167a8-741">場合、`count`値は、ドキュメント内のバイト数よりも大きく、ドキュメント内のバイト数と同じである場合、<xref:System.Xml.XmlTextReader>ドキュメント内の残りのすべてのバイトを読み取り、読み取ったバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-741">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="167a8-742">次<xref:System.Xml.XmlTextReader>メソッドの呼び出しは、0 を返し、次のノードは、リーダー、<xref:System.Xml.XmlNodeType.EndElement>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-742">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="167a8-743">呼び出す場合<xref:System.Xml.XmlTextReader.Read%2A>リーダーが最初のコンテンツが使用された場合、動作可能性がありますすべての要素のコンテンツを使用すると、前にし、<xref:System.Xml.XmlTextReader.Read%2A>メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="167a8-743">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="167a8-744">これは、リーダーが終了要素が出現するまでのすべてのテキストを読み取ることを意味します。</span><span class="sxs-lookup"><span data-stu-id="167a8-744">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="167a8-745">終了タグのノードを読み取ります、次のノードを読み取るし、自身を後続のノードに配置します。</span><span class="sxs-lookup"><span data-stu-id="167a8-745">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-746">参照してください<xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType>にこのメソッドの使用例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="167a8-746">See <xref:System.Xml.XmlReader.ReadElementContentAsBase64%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-747">
            <paramref name="buffer" /> 値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-747">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-748">現在のノードは要素ノードではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-748">The current node is not an element node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-749">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-749">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="167a8-750">
            <see cref="T:System.Xml.XmlTextReader" /> 実装が、このメソッドをサポートしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-750">The <see cref="T:System.Xml.XmlTextReader" /> implementation does not support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-751">要素には混合コンテンツが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-751">The element contains mixed-content.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="167a8-752">コンテンツを要求された型に変換できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-752">The content cannot be converted to the requested type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlTextReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="167a8-753">結果として得られるテキストのコピー先のバッファー。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-753">The buffer into which to copy the resulting text.</span>
          </span>
          <span data-ttu-id="167a8-754">この値を <see langword="null" /> にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-754">This value cannot be <see langword="null" />.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="167a8-755">バッファー内の結果のコピー開始位置を示すオフセット。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-755">The offset into the buffer where to start copying the result.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="167a8-756">バッファーにコピーする最大バイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-756">The maximum number of bytes to copy into the buffer.</span>
          </span>
          <span data-ttu-id="167a8-757">コピーされた実際のバイト数は、このメソッドから返されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-757">The actual number of bytes copied is returned from this method.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-758">要素を読み取り、<see langword="BinHex" /> の内容をデコードします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-758">Reads the element and decodes the <see langword="BinHex" /> content.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-759">バッファーに書き込まれたバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-759">The number of bytes written to the buffer.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-760">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-760">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-761">このメソッドは要素の内容をデコードを使用して`BinHex`のエンコードとデコードされたバイナリ バイトを返します (たとえば、インライン`BinHex`GIF イメージのエンコードされた) バッファーにします。</span><span class="sxs-lookup"><span data-stu-id="167a8-761">This method reads the element content, decodes it using `BinHex` encoding, and returns the decoded binary bytes (for example, an inline `BinHex` encoded GIF image) into the buffer.</span></span>  
  
 <span data-ttu-id="167a8-762">このメソッドは、単純なコンテンツの要素を読み取るだけことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-762">This method can only read simple-content elements.</span></span> <span data-ttu-id="167a8-763">要素は、テキスト、空白、有意の空白、CDATA セクションでは、コメントおよび処理命令に含めることができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-763">The element can contain text, white space, significant white space, CDATA sections, comments and processing instructions.</span></span> <span data-ttu-id="167a8-764">または自動的に展開されるエンティティ参照を含めることもできます。</span><span class="sxs-lookup"><span data-stu-id="167a8-764">It can also contain entity references, which are automatically expanded.</span></span> <span data-ttu-id="167a8-765">要素は、子要素を含めることはできません。</span><span class="sxs-lookup"><span data-stu-id="167a8-765">The element cannot have child elements.</span></span>  
  
 <span data-ttu-id="167a8-766">このメソッドとよく似ています、<xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A>する点のメソッドは、要素ノードの種類でのみ呼び出すことができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-766">This method is very similar to the <xref:System.Xml.XmlTextReader.ReadContentAsBinHex%2A> method except that it can only be called on element node types.</span></span>  
  
 <span data-ttu-id="167a8-767">場合、`count`値は、ドキュメント内のバイト数よりも大きく、ドキュメント内のバイト数と同じである場合、<xref:System.Xml.XmlTextReader>ドキュメント内の残りのすべてのバイトを読み取り、読み取ったバイト数を返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-767">If the `count` value is higher than the number of bytes in the document, or if it is equal to the number of bytes in the document, the <xref:System.Xml.XmlTextReader> reads all the remaining bytes in the document and returns the number of bytes read.</span></span> <span data-ttu-id="167a8-768">次<xref:System.Xml.XmlTextReader>メソッドの呼び出しは、0 を返し、次のノードは、リーダー、<xref:System.Xml.XmlNodeType.EndElement>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-768">The next <xref:System.Xml.XmlTextReader> method call returns a zero and moves the reader to the node following the <xref:System.Xml.XmlNodeType.EndElement>.</span></span>  
  
 <span data-ttu-id="167a8-769">呼び出す場合<xref:System.Xml.XmlTextReader.Read%2A>リーダーが最初のコンテンツが使用された場合、動作可能性がありますすべての要素のコンテンツを使用すると、前にし、<xref:System.Xml.XmlTextReader.Read%2A>メソッドが呼び出されました。</span><span class="sxs-lookup"><span data-stu-id="167a8-769">If you call <xref:System.Xml.XmlTextReader.Read%2A> before all of the element content is consumed, the reader may behave as if the first content was consumed and then the <xref:System.Xml.XmlTextReader.Read%2A> method was called.</span></span> <span data-ttu-id="167a8-770">これは、リーダーが終了要素が出現するまでのすべてのテキストを読み取ることを意味します。</span><span class="sxs-lookup"><span data-stu-id="167a8-770">This means that the reader reads all the text until the end element is encountered.</span></span> <span data-ttu-id="167a8-771">終了タグのノードを読み取ります、次のノードを読み取るし、自身を後続のノードに配置します。</span><span class="sxs-lookup"><span data-stu-id="167a8-771">It then reads the end tag node, reads the next node, and then positions itself on the next subsequent node.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-772">参照してください<xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType>にこのメソッドの使用例を参照してください。</span><span class="sxs-lookup"><span data-stu-id="167a8-772">See <xref:System.Xml.XmlReader.ReadElementContentAsBinHex%2A?displayProperty=nameWithType> to see an example using this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="167a8-773">
            <paramref name="buffer" /> 値は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-773">The <paramref name="buffer" /> value is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-774">現在のノードは要素ノードではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-774">The current node is not an element node.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-775">バッファー内のインデックス、またはインデックスとカウントの合計値が、割り当てられているバッファー サイズを超えています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-775">The index into the buffer or index + count is larger than the allocated buffer size.</span>
          </span>
        </exception>
        <exception cref="T:System.NotSupportedException">
          <span data-ttu-id="167a8-776">
            <see cref="T:System.Xml.XmlReader" /> 実装が、このメソッドをサポートしていません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-776">The <see cref="T:System.Xml.XmlReader" /> implementation does not support this method.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-777">要素には混合コンテンツが含まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-777">The element contains mixed-content.</span>
          </span>
        </exception>
        <exception cref="T:System.FormatException">
          <span data-ttu-id="167a8-778">コンテンツを要求された型に変換できません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-778">The content cannot be converted to the requested type.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlTextReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlTextReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-779">リーダーの状態を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-779">Gets the state of the reader.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-780">
            <see cref="T:System.Xml.ReadState" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-780">One of the <see cref="T:System.Xml.ReadState" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-781">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-781">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlTextReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-782">要素ノードまたはテキスト ノードの内容を文字列として読み取ります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-782">Reads the contents of an element or a text node as a string.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-783">要素ノードまたはテキスト ノードの内容。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-783">The contents of the element or text node.</span>
          </span>
          <span data-ttu-id="167a8-784">要素ノードまたはテキスト ノード以外にリーダーが配置されている場合、または返す対象となるテキスト コンテンツが現在のコンテキスト内にこれ以上ない場合は、これが空の文字列になる場合があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-784">This can be an empty string if the reader is positioned on something other than an element or text node, or if there is no more text content to return in the current context.</span>
          </span>
          <span data-ttu-id="167a8-785">
            <see langword="Note:" /> テキスト ノードは、要素テキスト ノードまたは属性テキスト ノードのいずれかが可能です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-785">
              <see langword="Note:" /> The text node can be either an element or an attribute text node.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-786">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-786">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-787">要素に配置されている場合`ReadString`連結してすべてのテキスト、有意の空白、空白文字、および`CData`セクションのノード型を連結し、連結されたデータ要素のコンテンツとして返します。</span><span class="sxs-lookup"><span data-stu-id="167a8-787">If positioned on an element, `ReadString` concatenates all text, significant white space, white space, and `CData` section node types together and returns the concatenated data as the element content.</span></span> <span data-ttu-id="167a8-788">コメントや処理命令をすべてのマークアップが発生したときに停止します。</span><span class="sxs-lookup"><span data-stu-id="167a8-788">It stops when any markup is encountered, including comments and processing instructions.</span></span> <span data-ttu-id="167a8-789">これは混合コンテンツ モデル内で、または要素の終了タグが読み込まれると発生します。</span><span class="sxs-lookup"><span data-stu-id="167a8-789">This could occur in a mixed content model, or when an element end tag is read.</span></span>  
  
 <span data-ttu-id="167a8-790">テキスト ノードに配置されている場合`ReadString`要素の終了タグへのテキスト ノードから同じ連結操作を実行します。</span><span class="sxs-lookup"><span data-stu-id="167a8-790">If positioned on a text node, `ReadString` performs the same concatenation from the text node to the element end tag.</span></span> <span data-ttu-id="167a8-791">リーダーが属性のテキスト ノード上にある場合、`ReadString` は、あたかもリーダーが要素の開始タグ上にあるのと同様に機能します。</span><span class="sxs-lookup"><span data-stu-id="167a8-791">If the reader is positioned on an attribute text node, `ReadString` has the same functionality as if the reader were position on the element start tag.</span></span> <span data-ttu-id="167a8-792">連結されたすべての要素テキスト ノードが返されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-792">It returns all the concatenated element text nodes.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-793">次の例では、各要素のテキストの内容が表示されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-793">The following example displays the text content of each element.</span></span>  
  
 [!code-cpp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlReader.IsStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-794">例では、ファイルを使用して`elems.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-794">The example uses the file, `elems.xml`, as input.</span></span>  
  
 [!code-xml[Classic WebData XmlReader.IsStartElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlReader.IsStartElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-795">XML の解析中にエラーが発生しました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-795">An error occurred while parsing the XML.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-796">無効な操作を実行しようとしました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-796">An invalid operation was attempted.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResetState">
      <MemberSignature Language="C#" Value="public void ResetState ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResetState" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetState ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetState();" />
      <MemberSignature Language="F#" Value="member this.ResetState : unit -&gt; unit" Usage="xmlTextReader.ResetState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-797">リーダーの状態を ReadState.Initial にリセットします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-797">Resets the state of the reader to ReadState.Initial.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-798">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-798">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-799">このメソッドでは、1 つのストリームで複数の XML ドキュメントを解析することができます。</span><span class="sxs-lookup"><span data-stu-id="167a8-799">This method enables you to parse multiple XML documents in a single stream.</span></span> <span data-ttu-id="167a8-800">XML ドキュメントの末尾に到達するときに呼び出す`ResetState`に備えて、次の XML ドキュメント内のリーダーの状態をリセットします。</span><span class="sxs-lookup"><span data-stu-id="167a8-800">When you reach the end of an XML document, you can call `ResetState` to reset the state of the reader in preparation for the next XML document.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="167a8-801">ストリーム内のドキュメントでは、同じエンコーディングを共有する必要があります。</span><span class="sxs-lookup"><span data-stu-id="167a8-801">The documents in the stream must share the same encoding.</span></span> <span data-ttu-id="167a8-802">そうでない場合と`ResetState`と呼ばれますが、<xref:System.Xml.XmlException>がスローされます。</span><span class="sxs-lookup"><span data-stu-id="167a8-802">If this is not the case, when `ResetState` is called an <xref:System.Xml.XmlException> is thrown.</span></span> <span data-ttu-id="167a8-803">(これは、.NET Framework バージョン 1.1 以前の動作の変更です。)</span><span class="sxs-lookup"><span data-stu-id="167a8-803">(This is a change in behavior from .NET Framework version 1.1 and earlier).</span></span>  
  
 <span data-ttu-id="167a8-804">次のプロパティを受けないこと`ResetState`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-804">The following properties are not affected by `ResetState`.</span></span>  
  
-   <xref:System.Xml.XmlTextReader.Normalization%2A>  
  
-   <xref:System.Xml.XmlTextReader.Namespaces%2A>  
  
-   <xref:System.Xml.XmlTextReader.XmlResolver%2A>  
  
-   <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-805">次の例では、1 つのストリーム内の 2 つの XML ドキュメントを解析します。</span><span class="sxs-lookup"><span data-stu-id="167a8-805">The following example parses two XML documents in a single stream.</span></span>  
  
 [!code-cpp[XmlTextReader.ResetState#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.ResetState/CPP/resetstate.cpp#1)]
 [!code-csharp[XmlTextReader.ResetState#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.ResetState/CS/resetstate.cs#1)]
 [!code-vb[XmlTextReader.ResetState#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.ResetState/VB/resetstate.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-806">
            <see cref="T:System.Xml.XmlParserContext" /> を使用してリーダーを構築した場合の <see langword="ResetState" /> の呼び出し。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-806">Calling <see langword="ResetState" /> if the reader was constructed using an <see cref="T:System.Xml.XmlParserContext" />.</span>
          </span>
        </exception>
        <exception cref="T:System.Xml.XmlException">
          <span data-ttu-id="167a8-807">単一ストリーム内のドキュメントが同じエンコーディングを共有していません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-807">Documents in a single stream do not share the same encoding.</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.ReadState" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlTextReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-808">
            <see langword="EntityReference" /> ノードのエンティティ参照を解決します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-808">Resolves the entity reference for <see langword="EntityReference" /> nodes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-809">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-809">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-810">リーダーが配置されている場合、`EntityReference`ノード (`XmlNodeType.EntityReference`) 場合は、<xref:System.Xml.XmlTextReader.Read%2A>呼び出し元がこのメソッドは、エンティティ置換テキストは解析後に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="167a8-810">If the reader is positioned on an `EntityReference` node (`XmlNodeType.EntityReference`), if <xref:System.Xml.XmlTextReader.Read%2A> is called after calling this method, the entity replacement text is parsed.</span></span> <span data-ttu-id="167a8-811">エンティティ置換テキストが完了したら、`EndEntity`ノードが返されるエンティティ参照のスコープを閉じます。</span><span class="sxs-lookup"><span data-stu-id="167a8-811">When the entity replacement text is finished, an `EndEntity` node is returned to close the entity reference scope.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="167a8-812">このメソッドを呼び出した後、エンティティが属性値の一部である場合を呼び出す必要があります<xref:System.Xml.XmlTextReader.ReadAttributeValue%2A>エンティティにステップ インします。</span><span class="sxs-lookup"><span data-stu-id="167a8-812">After calling this method, if the entity is part of an attribute value, you must call <xref:System.Xml.XmlTextReader.ReadAttributeValue%2A> to step into the entity.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlTextReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public override void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Skip();" />
      <MemberSignature Language="F#" Value="override this.Skip : unit -&gt; unit" Usage="xmlTextReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="167a8-813">現在のノードの子をスキップします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-813">Skips the children of the current node.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-814">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-814">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-815">次の XML 入力で、リーダーが配置されているかどうか、`<a>`ノードまたは属性、呼び出しのいずれか`Skip`、リーダーを`<b>`ノード。</span><span class="sxs-lookup"><span data-stu-id="167a8-815">In the following XML input if the reader is positioned on the `<a>` node or any of its attributes, calling `Skip` positions the reader to the `<b>` node.</span></span>  
  
 <span data-ttu-id="167a8-816">リーダーがリーフ ノードに既に配置されているかどうか (など、`<x>`ノードまたはテキスト ノード`abc`) を呼び出すと、`Skip`は呼び出すことと同じ<xref:System.Xml.XmlTextReader.Read%2A>します。</span><span class="sxs-lookup"><span data-stu-id="167a8-816">If the reader is positioned on a leaf node already (such as the `<x>` node or the text node `abc`), calling `Skip` is the same as calling <xref:System.Xml.XmlTextReader.Read%2A>.</span></span>  
  
```xml  
<a name="bob" age="123">  
  <x/>abc<y/>  
</a>  
<b>  
 ...  
</b>  
```  
  
 <span data-ttu-id="167a8-817">このメソッドは、整形式 XML をチェックします。</span><span class="sxs-lookup"><span data-stu-id="167a8-817">This method checks for well-formed XML.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">
          <span data-ttu-id="167a8-818">返される名前空間ノードの種類を指定する <see cref="T:System.Xml.XmlNamespaceScope" /> 値。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-818">An <see cref="T:System.Xml.XmlNamespaceScope" /> value that specifies the type of namespace nodes to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-819">このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-819">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-820">現在のスコープ内にある名前空間が格納された <see cref="T:System.Collections.IDictionary" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-820">An <see cref="T:System.Collections.IDictionary" /> that contains the current in-scope namespaces.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167a8-821">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="167a8-821">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="167a8-822">これは、<xref:System.Xml.XmlTextReader> のインスタンスが <xref:System.Xml.IXmlNamespaceResolver> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="167a8-822">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="167a8-823">検索対象の名前空間 URI を持つプレフィックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-823">The prefix whose namespace URI you wish to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-824">このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-824">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-825">プレフィックスに割り当てられている名前空間 URI。このプレフィックスに名前空間 URI が割り当てられていない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-825">The namespace URI that is mapped to the prefix; <see langword="null" /> if the prefix is not mapped to a namespace URI.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="167a8-826">このメンバーは、明示的なインターフェイス メンバーの実装です。</span><span class="sxs-lookup"><span data-stu-id="167a8-826">This member is an explicit interface member implementation.</span></span> <span data-ttu-id="167a8-827">これは、<xref:System.Xml.XmlTextReader> のインスタンスが <xref:System.Xml.IXmlNamespaceResolver> インターフェイスにキャストされる場合のみ、使用できます。</span><span class="sxs-lookup"><span data-stu-id="167a8-827">It can be used only when the <xref:System.Xml.XmlTextReader> instance is cast to an <xref:System.Xml.IXmlNamespaceResolver> interface.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">
          <span data-ttu-id="167a8-828">検索対象のプレフィックスを持つ名前空間 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-828">The namespace URI whose prefix you wish to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="167a8-829">このメンバーの詳細については、「<see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />」をご覧ください。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-829">For a description of this member, see <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="167a8-830">名前空間 URI に割り当てられているプレフィックス。この名前空間 URI にプレフィックスが割り当てられていない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-830">The prefix that is mapped to the namespace URI; <see langword="null" /> if the namespace URI is not mapped to a prefix.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlTextReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-831">現在のノードのテキスト値を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-831">Gets the text value of the current node.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-832">返される値は、ノードの <see cref="P:System.Xml.XmlTextReader.NodeType" /> によって異なります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-832">The value returned depends on the <see cref="P:System.Xml.XmlTextReader.NodeType" /> of the node.</span>
          </span>
          <span data-ttu-id="167a8-833">返す値を持つノード型の一覧を次の表に示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-833">The following table lists node types that have a value to return.</span>
          </span>
          <span data-ttu-id="167a8-834">これ以外のノード型はすべて <see langword="String.Empty" /> を返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-834">All other node types return <see langword="String.Empty" />.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="167a8-835">ノード型</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-835">Node Type</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="167a8-836">[値]</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-836">Value</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <see langword="Attribute" />
              </term>
              <description>
                <span data-ttu-id="167a8-837">属性の値。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-837">The value of the attribute.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="CDATA" />
              </term>
              <description>
                <span data-ttu-id="167a8-838">CDATA セクションの内容。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-838">The content of the CDATA section.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Comment" />
              </term>
              <description>
                <span data-ttu-id="167a8-839">コメントの内容。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-839">The content of the comment.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="DocumentType" />
              </term>
              <description>
                <span data-ttu-id="167a8-840">内部サブセット。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-840">The internal subset.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="ProcessingInstruction" />
              </term>
              <description>
                <span data-ttu-id="167a8-841">ターゲットを除く全内容。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-841">The entire content, excluding the target.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="SignificantWhitespace" />
              </term>
              <description>
                <span data-ttu-id="167a8-842">
                  <see langword="xml:space" />= 'preserve' スコープ内の空白。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-842">The white space within an <see langword="xml:space" />= 'preserve' scope.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Text" />
              </term>
              <description>
                <span data-ttu-id="167a8-843">テキスト ノードの内容。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-843">The content of the text node.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="Whitespace" />
              </term>
              <description>
                <span data-ttu-id="167a8-844">マークアップ間の空白。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-844">The white space between markup.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <see langword="XmlDeclaration" />
              </term>
              <description>
                <span data-ttu-id="167a8-845">宣言の内容。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="167a8-845">The content of the declaration.</span>
                </span>
              </description>
            </item>
          </list>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-846">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-846">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-847">次の例では、XML ファイルを読み取るし、各ノードを表示します。</span><span class="sxs-lookup"><span data-stu-id="167a8-847">The following example reads an XML file and displays each node.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/VB/source.vb#1)]  
  
 <span data-ttu-id="167a8-848">このサンプルは、ファイルを使用して`items.xml`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-848">The sample uses the file `items.xml`.</span></span>  
  
 [!code-xml[Classic WebData XmlTextReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlTextReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="WhitespaceHandling">
      <MemberSignature Language="C#" Value="public System.Xml.WhitespaceHandling WhitespaceHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WhitespaceHandling WhitespaceHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property WhitespaceHandling As WhitespaceHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::WhitespaceHandling WhitespaceHandling { System::Xml::WhitespaceHandling get(); void set(System::Xml::WhitespaceHandling value); };" />
      <MemberSignature Language="F#" Value="member this.WhitespaceHandling : System.Xml.WhitespaceHandling with get, set" Usage="System.Xml.XmlTextReader.WhitespaceHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WhitespaceHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-849">空白の処理方法を指定する値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-849">Gets or sets a value that specifies how white space is handled.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-850">
            <see cref="T:System.Xml.WhitespaceHandling" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-850">One of the <see cref="T:System.Xml.WhitespaceHandling" /> values.</span>
          </span>
          <span data-ttu-id="167a8-851">既定値は <see langword="WhitespaceHandling.All" /> で、<see langword="Whitespace" /> と <see langword="SignificantWhitespace" /> ノードを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-851">The default is <see langword="WhitespaceHandling.All" /> (returns <see langword="Whitespace" /> and <see langword="SignificantWhitespace" /> nodes).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-852">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-852">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-853">このプロパティは、いつでも変更でき、[次へ] の読み取り操作を有効になります。</span><span class="sxs-lookup"><span data-stu-id="167a8-853">This property can be changed at any time and takes effect on the next read operation.</span></span>  
  
 <span data-ttu-id="167a8-854">`XmlTextReader`利用可能になりますが、DTD 情報がない`SignificantWhitepsace`内でのみノードが返されます、`xml:space='preserve'`スコープ。</span><span class="sxs-lookup"><span data-stu-id="167a8-854">Because the `XmlTextReader` does not have DTD information available to it, `SignificantWhitepsace` nodes are only returned within an `xml:space='preserve'` scope.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-855">次の例では、XML フラグメントを読み取ります。</span><span class="sxs-lookup"><span data-stu-id="167a8-855">The following example reads an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextReader.WhitespaceHandling Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextReader.WhitespaceHandling Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="167a8-856">無効な値を指定しています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-856">Invalid value specified.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="167a8-857">リーダーが閉じているとき (<see cref="P:System.Xml.XmlTextReader.ReadState" /> が <see langword="ReadState.Closed" /> のとき) にこのプロパティを設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-857">Setting this property when the reader is closed (<see cref="P:System.Xml.XmlTextReader.ReadState" /> is <see langword="ReadState.Closed" />).</span>
          </span>
        </exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-858">現在の <see langword="xml:lang" /> スコープを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-858">Gets the current <see langword="xml:lang" /> scope.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-859">現在の <see langword="xml:lang" /> スコープ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-859">The current <see langword="xml:lang" /> scope.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-860">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-860">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-861">このプロパティを表す、`xml:lang`内で、現在のノードが存在するスコープします。</span><span class="sxs-lookup"><span data-stu-id="167a8-861">This property represents the `xml:lang` scope within which the current node resides.</span></span> <span data-ttu-id="167a8-862">たとえばでの XML フラグメントをここでは`xml:lang`ルート要素で英語 (米国) に設定。</span><span class="sxs-lookup"><span data-stu-id="167a8-862">For example, here is an XML fragment with `xml:lang` set to US English in the root element:</span></span>  
  
 <span data-ttu-id="167a8-863">\<root xml:lang="en-us"></span><span class="sxs-lookup"><span data-stu-id="167a8-863">\<root xml:lang="en-us"></span></span>  
  
 <span data-ttu-id="167a8-864">\<名前 > Fred \< /名 ></span><span class="sxs-lookup"><span data-stu-id="167a8-864">\<name>Fred\</name></span></span>  
  
 <span data-ttu-id="167a8-865">\</root></span><span class="sxs-lookup"><span data-stu-id="167a8-865">\</root></span></span>  
  
 <span data-ttu-id="167a8-866">リーダーが配置されている場合、`name`要素では、このプロパティを使用できます、米国英語版のスコープ内にある検索`xml:lang`属性。</span><span class="sxs-lookup"><span data-stu-id="167a8-866">When the reader is positioned on the `name` element, you can use this property to find that it is in the scope of a US English `xml:lang` attribute.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-867">次の例では、表示、`xml:lang`の各ノードの値。</span><span class="sxs-lookup"><span data-stu-id="167a8-867">The following example displays the `xml:lang` value for each of the nodes.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlLang#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlLang/CPP/readlang.cpp#1)]
 [!code-csharp[XmlTextReader.XmlLang#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlLang/CS/readlang.cs#1)]
 [!code-vb[XmlTextReader.XmlLang#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlLang/VB/readlang.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlTextReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-868">DTD 参照を解決するために使用する <see cref="T:System.Xml.XmlResolver" /> を設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-868">Sets the <see cref="T:System.Xml.XmlResolver" /> used for resolving DTD references.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-869">使用する <see langword="XmlResolver" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-869">The <see langword="XmlResolver" /> to use.</span>
          </span>
          <span data-ttu-id="167a8-870">
            <see langword="null" /> に設定されていると、外部リソースが解決されません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-870">If set to <see langword="null" />, external resources are not resolved.</span>
          </span>
          <span data-ttu-id="167a8-871">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] バージョン 1.1 では、<see langword="XmlResolver" /> を指定するには呼び出し元が完全に信頼されている必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-871">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], the caller must be fully trusted in order to specify an <see langword="XmlResolver" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-872">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-872">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="167a8-873">リーダーは`XmlResolver`リーダーに読み込むファイルの場所を解決するのには、DTD 参照を解決するのにはまたです。</span><span class="sxs-lookup"><span data-stu-id="167a8-873">The reader uses `XmlResolver` to resolve the location of the file loaded into the reader and also to resolve DTD references.</span></span> <span data-ttu-id="167a8-874">たとえば、XML には、DOCTYPE 宣言が含まれている場合`<!DOCTYPE book SYSTEM book.dtd>`リーダーは、この外部のファイルを解決し、DTD が整形式。</span><span class="sxs-lookup"><span data-stu-id="167a8-874">For example, if your XML included the DOCTYPE declaration, `<!DOCTYPE book SYSTEM book.dtd>` the reader resolves this external file and ensures that the DTD is well-formed.</span></span> <span data-ttu-id="167a8-875">リーダーは、検証のため、DTD を使用しません。</span><span class="sxs-lookup"><span data-stu-id="167a8-875">The reader does not use the DTD for validation.</span></span>  
  
 <span data-ttu-id="167a8-876">このプロパティは、いつでも変更でき、[次へ] の読み取り操作を有効になります。</span><span class="sxs-lookup"><span data-stu-id="167a8-876">This property can be changed at any time and takes effect on the next read operation.</span></span> <span data-ttu-id="167a8-877">このプロパティ設定されている場合`null`リーダーで発生した、外部 DTD 参照は解決されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-877">If this property is set to `null`, any external DTD references encountered by the reader are not resolved.</span></span>  
  
 <span data-ttu-id="167a8-878">バージョン 1.1 で、 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]、このプロパティが設定されていない場合、アプリケーションの信頼レベルが既定の動作を決定します。</span><span class="sxs-lookup"><span data-stu-id="167a8-878">In version 1.1 of the [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], if this property is not set, the trust level of the application determines the default behavior.</span></span>  
  
 <span data-ttu-id="167a8-879">`Fully trusted code:` リーダーは、既定値を使用して<xref:System.Xml.XmlUrlResolver>をユーザーの資格情報なし。</span><span class="sxs-lookup"><span data-stu-id="167a8-879">`Fully trusted code:` The reader uses a default <xref:System.Xml.XmlUrlResolver> with no user credentials.</span></span> <span data-ttu-id="167a8-880">ネットワーク リソースへのアクセスを認証が必要な場合は、使用、`XmlResolver`プロパティを指定する、`XmlResolver`のために必要な資格情報を使用します。</span><span class="sxs-lookup"><span data-stu-id="167a8-880">If authentication is required to access a network resource, use the `XmlResolver` property to specify an `XmlResolver` with the necessary credentials.</span></span>  
  
 <span data-ttu-id="167a8-881">`Semi-trusted code:` `XmlResolver`プロパティに設定されて`null`します。</span><span class="sxs-lookup"><span data-stu-id="167a8-881">`Semi-trusted code:` The `XmlResolver` property is set to `null`.</span></span> <span data-ttu-id="167a8-882">外部リソースは解決されません。</span><span class="sxs-lookup"><span data-stu-id="167a8-882">External resources are not resolved.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-883">次の例では、`XmlResolver`プロパティをネットワーク上のファイルにアクセスするために必要な資格情報を指定します。</span><span class="sxs-lookup"><span data-stu-id="167a8-883">The following example uses the `XmlResolver` property to specify the credentials necessary to access the networked file.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlResolver/CPP/rdr_resolver.cpp#1)]
 [!code-csharp[XmlTextReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlResolver/CS/rdr_resolver.cs#1)]
 [!code-vb[XmlTextReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlResolver/VB/rdr_resolver.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="167a8-884">現在の <see langword="xml:space" /> スコープを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-884">Gets the current <see langword="xml:space" /> scope.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="167a8-885">
            <see cref="T:System.Xml.XmlSpace" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-885">One of the <see cref="T:System.Xml.XmlSpace" /> values.</span>
          </span>
          <span data-ttu-id="167a8-886">
            <see langword="xml:space" /> スコープが存在しない場合、このプロパティは既定の <see langword="XmlSpace.None" /> に設定されます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="167a8-886">If no <see langword="xml:space" /> scope exists, this property defaults to <see langword="XmlSpace.None" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="167a8-887">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlReader>インスタンスを使用して、<xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType>新機能を活用する方法。</span><span class="sxs-lookup"><span data-stu-id="167a8-887">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlReader> instances by using the <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> method to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="167a8-888">次の例は、ファイルを解析し、有意の空白を返す場合、`xml:space='preserve'`スコープが見つかりました。</span><span class="sxs-lookup"><span data-stu-id="167a8-888">The following example parses a file and returns significant white space if an `xml:space='preserve'` scope is found.</span></span>  
  
 [!code-cpp[XmlTextReader.XmlSpace#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextReader.XmlSpace/CPP/readspace.cpp#1)]
 [!code-csharp[XmlTextReader.XmlSpace#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextReader.XmlSpace/CS/readspace.cs#1)]
 [!code-vb[XmlTextReader.XmlSpace#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextReader.XmlSpace/VB/readspace.vb#1)]  
  
 <span data-ttu-id="167a8-889">例では、ファイルを使用して`authors.xml`、入力として。</span><span class="sxs-lookup"><span data-stu-id="167a8-889">The example uses the file, `authors.xml`, as input.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>