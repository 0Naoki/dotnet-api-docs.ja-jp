<Type Name="XmlTextWriter" FullName="System.Xml.XmlTextWriter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b2a6e3c27189c7e6f266906c672a76ef2547a2f6" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52213495" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlTextWriter : System.Xml.XmlWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlTextWriter extends System.Xml.XmlWriter" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlTextWriter&#xA;Inherits XmlWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlTextWriter : System::Xml::XmlWriter" />
  <TypeSignature Language="F#" Value="type XmlTextWriter = class&#xA;    inherit XmlWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netcore-2.2">
      <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="eaaa2-101">W3C 勧告『Extensible Markup Language (XML) 1.0』および勧告『Namespaces in XML』に準拠する XML データを格納するストリームまたはファイルを高速に、非キャッシュで、前方向に生成する方法を提供するライターを表します。</span>
      <span class="sxs-lookup">
        <span data-stu-id="eaaa2-101">Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</span>
      </span>
      <span data-ttu-id="eaaa2-102">.NET Framework 2.0 以降では、代わりに <see cref="T:System.Xml.XmlWriter" /> クラスを使用することをお勧めします。</span>
      <span class="sxs-lookup">
        <span data-stu-id="eaaa2-102">Starting with the .NET Framework 2.0, we recommend that you use the <see cref="T:System.Xml.XmlWriter" /> class instead.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="eaaa2-103">このクラスは、実装、<xref:System.Xml.XmlWriter>クラス。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-103">This class implements the <xref:System.Xml.XmlWriter> class.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-104">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-104">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-105">`XmlTextWriter` 現在の要素のスタックで定義されているすべての名前空間に対応する名前空間スタックを保持します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-105">`XmlTextWriter` maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</span></span> <span data-ttu-id="eaaa2-106">使用して`XmlTextWriter`手動で名前空間を宣言することができます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-106">Using `XmlTextWriter` you can declare namespaces manually.</span></span>  
  
```csharp  
w.WriteStartElement("root");  
w.WriteAttributeString("xmlns", "x", null, "urn:1");  
 w.WriteStartElement("item","urn:1");  
 w.WriteEndElement();  
 w.WriteStartElement("item","urn:1");  
 w.WriteEndElement();  
w.WriteEndElement();  
```  
  
 <span data-ttu-id="eaaa2-107">上記の c# コードでは、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-107">The above C# code produces the following output.</span></span> <span data-ttu-id="eaaa2-108">`XmlTextWriter` 名前空間宣言を 2 つの子要素上で重複することを回避するためにルート要素を昇格させます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-108">`XmlTextWriter` promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</span></span> <span data-ttu-id="eaaa2-109">子要素は、名前空間宣言からのプレフィックスを選択します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-109">The child elements pick up the prefix from the namespace declaration.</span></span>  
  
```xml  
<root xmlns:x="urn:1">  
 <x:item/>  
 <x:item/>  
</x:root>  
```  
  
 <span data-ttu-id="eaaa2-110">`XmlTextWriter` 現在の名前空間宣言をオーバーライドすることもできます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-110">`XmlTextWriter` also allows you to override the current namespace declaration.</span></span> <span data-ttu-id="eaaa2-111">次の例では、名前空間 URI「123」は XML 要素を生成するには、"abc"でオーバーライドされる`<x:node xmlns:x="abc"/>`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-111">In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element `<x:node xmlns:x="abc"/>`.</span></span>  
  
```csharp  
w.WriteStartElement("x","node","123");  
w.WriteAttributeString("xmlns","x",null,"abc");  
```  
  
 <span data-ttu-id="eaaa2-112">引数としてのプレフィックスを受け取る書き込みメソッドを使用して、使用するプリフィックスも指定できます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-112">By using the write methods that take a prefix as an argument you can also specify which prefix to use.</span></span> <span data-ttu-id="eaaa2-113">次の例では、2 つの異なるプレフィックスが同じ名前空間の XML テキストを生成するために URI にマップされます`<x:root xmlns:x="urn:1"><y:item xmlns:y="urn:1"/></x:root>`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-113">In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text `<x:root xmlns:x="urn:1"><y:item xmlns:y="urn:1"/></x:root>`.</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.WriteStartElement("x","root","urn:1");  
 w.WriteStartElement("y","item","urn:1");  
 w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 <span data-ttu-id="eaaa2-114">複数の名前空間宣言が同じ名前空間 URI、異なるプレフィックスのマッピングがある場合`XmlTextWriter`名前空間宣言のスタックを後方走査、最も近いものを選択します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-114">If there are multiple namespace declarations mapping different prefixes to the same namespace URI, `XmlTextWriter` walks the stack of namespace declarations backwards and picks the closest one.</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);  
w.Formatting = Formatting.Indented;  
w.WriteStartElement("x","root","urn:1");  
w.WriteStartElement("y","item","urn:1");  
w.WriteAttributeString("attr","urn:1","123");  
w.WriteEndElement();  
w.WriteEndElement();  
w.Close();  
```  
  
 <span data-ttu-id="eaaa2-115">上記の c# 例であるため、`WriteAttributeString`呼び出しは、プレフィックスを指定しない場合、ライターの名前空間スタックにプッシュされた最後のプレフィックスを使用して、次の XML が生成されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-115">In the above C# example, because the `WriteAttributeString` call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:</span></span>  
  
```xml  
<x:root xmlns:x="urn:1">  
 <y:item y:attr="123" xmlns:y="urn:1" />  
</x:root>  
```  
  
 <span data-ttu-id="eaaa2-116">名前空間の競合が発生した場合`XmlTextWriter`代替プレフィックスを生成することによってそれらを解決します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-116">If namespace conflicts occur, `XmlTextWriter` resolves them by generating alternate prefixes.</span></span> <span data-ttu-id="eaaa2-117">たとえば、属性と要素がある場合、同じプレフィックスが異なる名前空間、`XmlWriter`属性の代替プレフィックスが生成されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-117">For example, if an attribute and element have the same prefix but different namespaces, `XmlWriter` generates an alternate prefix for the attribute.</span></span> <span data-ttu-id="eaaa2-118">生成されたプレフィックスが名前付き`n{i}`場所`i`が 1 にします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-118">The generated prefixes are named `n{i}` where `i` is a number beginning at 1.</span></span> <span data-ttu-id="eaaa2-119">数は、各要素に対して 1 にリセットされます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-119">The number is reset to 1 for each element.</span></span>  
  
 <span data-ttu-id="eaaa2-120">名前空間 URI に関連付けられている属性には、プレフィックス (既定値は名前空間は、属性には適用されません) 必要があります。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-120">Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</span></span> <span data-ttu-id="eaaa2-121">これは、W3C Namespaces in XML 』 のセクション 5.2 に準拠しています。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-121">This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</span></span> <span data-ttu-id="eaaa2-122">属性参照名前空間 URI、プレフィックスを指定しない場合は、ライターは、属性のプレフィックスを生成します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-122">If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</span></span>  
  
 <span data-ttu-id="eaaa2-123">追加の領域がたとえば追加タグ名と、終了タグの間、空の要素を書き込むときに`<item />`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-123">When writing an empty element, an additional space is added between tag name and the closing tag, for example `<item />`.</span></span> <span data-ttu-id="eaaa2-124">これは、古いブラウザーとの互換性を提供します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-124">This provides compatibility with older browsers.</span></span>  
  
 <span data-ttu-id="eaaa2-125">ときに、`String`メソッドのパラメーターとして提供される`null`と`String.Empty`は同等です。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-125">When a `String` is used as method parameter, `null` and `String.Empty` are equivalent.</span></span> <span data-ttu-id="eaaa2-126">`String.Empty` W3C 規則に従います。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-126">`String.Empty` follows the W3C rules.</span></span>  
  
 <span data-ttu-id="eaaa2-127">厳密に型指定されたデータを書き込むには、使用、<xref:System.Xml.XmlConvert>データ型を文字列に変換するクラス。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-127">To write strongly typed data, use the <xref:System.Xml.XmlConvert> class to convert data types to string.</span></span> <span data-ttu-id="eaaa2-128">たとえば、次の c# コードはからデータを変換します。`Double`に`String`要素を書き込み、`<price>19.95</price>`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-128">For example, the following C# code converts the data from `Double` to `String` and writes the element `<price>19.95</price>`.</span></span>  
  
```csharp  
Double price = 19.95;  
writer.WriteElementString("price", XmlConvert.ToString(price));  
```  
  
 <span data-ttu-id="eaaa2-129">`XmlTextWriter` 次のような確認しません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-129">`XmlTextWriter` does not check for the following:</span></span>  
  
-   <span data-ttu-id="eaaa2-130">属性と要素名に無効な文字。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-130">Invalid characters in attribute and element names.</span></span>  
  
-   <span data-ttu-id="eaaa2-131">指定したエンコーディングに収まらない Unicode 文字。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-131">Unicode characters that do not fit the specified encoding.</span></span> <span data-ttu-id="eaaa2-132">Unicode 文字に指定したエンコーディングが収まらない場合、`XmlTextWriter`文字エンティティに Unicode 文字をエスケープしません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-132">If the Unicode characters do not fit the specified encoding, the `XmlTextWriter` does not escape the Unicode characters into character entities.</span></span>  
  
-   <span data-ttu-id="eaaa2-133">属性が重複しています。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-133">Duplicate attributes.</span></span>  
  
-   <span data-ttu-id="eaaa2-134">DOCTYPE のパブリック id またはシステム識別子の文字。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-134">Characters in the DOCTYPE public identifier or system identifier.</span></span>  
  
## <a name="security-considerations"></a><span data-ttu-id="eaaa2-135">セキュリティの考慮事項</span><span class="sxs-lookup"><span data-stu-id="eaaa2-135">Security Considerations</span></span>  
 <span data-ttu-id="eaaa2-136">次のものが使用する場合の考慮事項、<xref:System.Xml.XmlTextWriter>クラス。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-136">The following items are things to consider when working with the <xref:System.Xml.XmlTextWriter> class.</span></span>  
  
-   <span data-ttu-id="eaaa2-137">によってスローされた例外、<xref:System.Xml.XmlTextWriter>たくないパス情報が満載のアプリケーションを開示することができます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-137">Exceptions thrown by the <xref:System.Xml.XmlTextWriter> can disclose path information that you do not want bubbled up to the application.</span></span> <span data-ttu-id="eaaa2-138">アプリケーションは例外をキャッチし、それらを適切に処理する必要があります。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-138">Your applications must catch exceptions and process them appropriately.</span></span>  
  
-   <span data-ttu-id="eaaa2-139"><xref:System.Xml.XmlTextWriter> を別のアプリケーションに渡すと、下位のストリームがそのアプリケーションに公開されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-139">When you pass the <xref:System.Xml.XmlTextWriter> to another application the underlying stream is exposed to that application.</span></span> <span data-ttu-id="eaaa2-140"><xref:System.Xml.XmlTextWriter> を信頼度の低いアプリケーションに渡す必要がある場合は、代わりに <xref:System.Xml.XmlWriter> メソッドによって作成される <xref:System.Xml.XmlWriter.Create%2A> オブジェクトを使用する必要があります。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-140">If you need to pass the <xref:System.Xml.XmlTextWriter> to a semi-trusted application, you should use an <xref:System.Xml.XmlWriter> object created by the <xref:System.Xml.XmlWriter.Create%2A> method instead.</span></span>  
  
-   <span data-ttu-id="eaaa2-141"><xref:System.Xml.XmlTextWriter>に渡されるすべてのデータを検証しません、<xref:System.Xml.XmlTextWriter.WriteDocType%2A>または<xref:System.Xml.XmlTextWriter.WriteRaw%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-141">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteDocType%2A> or <xref:System.Xml.XmlTextWriter.WriteRaw%2A> methods.</span></span> <span data-ttu-id="eaaa2-142">これらのメソッドに、任意のデータを渡さないでください。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-142">You should not pass arbitrary data to these methods.</span></span>  
  
-   <span data-ttu-id="eaaa2-143">既定の設定を変更する場合、生成された出力が整形式 XML データである保証はありません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-143">If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</span></span>  
  
-   <span data-ttu-id="eaaa2-144">など、サポートするコンポーネントを受け入れない、<xref:System.Text.Encoding>信頼できないソースからのオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-144">Do not accept supporting components, such as an <xref:System.Text.Encoding> object, from an untrusted source.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/e695047f-3c0f-4045-8708-5baea91cc380">
      <span data-ttu-id="eaaa2-145">XML ドキュメントと XML データ</span>
      <span class="sxs-lookup">
        <span data-stu-id="eaaa2-145">XML Documents and Data</span>
      </span>
    </related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-146">
            <see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-146">Creates an instance of the <see langword="XmlTextWriter" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-147">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-147">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.TextWriter w);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter w) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (w As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::TextWriter ^ w);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : System.IO.TextWriter -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter w" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="eaaa2-148">書き込み先の <see langword="TextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-148">The <see langword="TextWriter" /> to write to.</span>
          </span>
          <span data-ttu-id="eaaa2-149">
            <see langword="TextWriter" /> が既に正しいエンコーディングに設定されていることを前提にしています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-149">It is assumed that the <see langword="TextWriter" /> is already set to the correct encoding.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-150">指定した <see cref="T:System.IO.TextWriter" /> を使用して <see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-150">Creates an instance of the <see langword="XmlTextWriter" /> class using the specified <see cref="T:System.IO.TextWriter" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-151">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-151">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (System.IO.Stream w, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream w, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::IO::Stream ^ w, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : System.IO.Stream * System.Text.Encoding -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter (w, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="w" Type="System.IO.Stream" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="w">
          <span data-ttu-id="eaaa2-152">書き込み先のストリーム。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-152">The stream to which you want to write.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="eaaa2-153">生成するエンコーディング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-153">The encoding to generate.</span>
          </span>
          <span data-ttu-id="eaaa2-154">エンコーディングが <see langword="null" /> の場合は、ストリームを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-154">If encoding is <see langword="null" /> it writes out the stream as UTF-8 and omits the encoding attribute from the <see langword="ProcessingInstruction" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-155">指定したストリームおよびエンコーディングを使用して、<see langword="XmlTextWriter" /> クラスのインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-155">Creates an instance of the <see langword="XmlTextWriter" /> class using the specified stream and encoding.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-156">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-156">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-157">エンコーディングがサポートされていないか、ストリームに書き込むことができません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-157">The encoding is not supported or the stream cannot be written to.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eaaa2-158">
            <paramref name="w" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-158">
              <paramref name="w" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlTextWriter (string filename, System.Text.Encoding encoding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename, class System.Text.Encoding encoding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlTextWriter(System::String ^ filename, System::Text::Encoding ^ encoding);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlTextWriter : string * System.Text.Encoding -&gt; System.Xml.XmlTextWriter" Usage="new System.Xml.XmlTextWriter (filename, encoding)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
        <Parameter Name="encoding" Type="System.Text.Encoding" />
      </Parameters>
      <Docs>
        <param name="filename">
          <span data-ttu-id="eaaa2-159">書き込むファイル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-159">The filename to write to.</span>
          </span>
          <span data-ttu-id="eaaa2-160">ファイルが存在する場合は、ファイルを切り詰め、新しい内容で上書きします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-160">If the file exists, it truncates it and overwrites it with the new content.</span>
          </span>
        </param>
        <param name="encoding">
          <span data-ttu-id="eaaa2-161">生成するエンコーディング。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-161">The encoding to generate.</span>
          </span>
          <span data-ttu-id="eaaa2-162">エンコーディングが <see langword="null" /> の場合は、ファイルを UTF-8 として書き込み、<see langword="ProcessingInstruction" /> からエンコーディング属性を省略します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-162">If encoding is <see langword="null" /> it writes the file out as UTF-8, and omits the encoding attribute from the <see langword="ProcessingInstruction" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-163">指定したファイルを使用して <see cref="T:System.Xml.XmlTextWriter" /> クラスのインスタンスを作成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-163">Creates an instance of the <see cref="T:System.Xml.XmlTextWriter" /> class using the specified file.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-164">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-164">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-165">エンコーディングがサポートされていません。ファイル名が空で、空白しか含んでいないか、無効な文字を 1 つ以上含んでいます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-165">The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</span>
          </span>
        </exception>
        <exception cref="T:System.UnauthorizedAccessException">
          <span data-ttu-id="eaaa2-166">アクセスが拒否されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-166">Access is denied.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eaaa2-167">ファイル名が <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-167">The filename is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.DirectoryNotFoundException">
          <span data-ttu-id="eaaa2-168">書き込むディレクトリが見つかりません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-168">The directory to write to is not found.</span>
          </span>
        </exception>
        <exception cref="T:System.IO.IOException">
          <span data-ttu-id="eaaa2-169">ファイル名には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-169">The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</span>
          </span>
        </exception>
        <exception cref="T:System.Security.SecurityException">
          <span data-ttu-id="eaaa2-170">呼び出し元に、必要なアクセス許可がありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-170">The caller does not have the required permission.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="BaseStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream BaseStream { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.Stream BaseStream" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.BaseStream" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseStream As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IO::Stream ^ BaseStream { System::IO::Stream ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseStream : System.IO.Stream" Usage="System.Xml.XmlTextWriter.BaseStream" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-171">基になるストリーム オブジェクトを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-171">Gets the underlying stream object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-172">
            <see langword="XmlTextWriter" /> の書き込み先のストリーム。<see cref="T:System.IO.TextWriter" /> クラスから継承されない <see cref="T:System.IO.StreamWriter" /> を使用して <see langword="null" /> が構築された場合は <see langword="XmlTextWriter" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-172">The stream to which the <see langword="XmlTextWriter" /> is writing or <see langword="null" /> if the <see langword="XmlTextWriter" /> was constructed using a <see cref="T:System.IO.TextWriter" /> that does not inherit from the <see cref="T:System.IO.StreamWriter" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-173">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-173">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-174">ライターを使用して構築した場合、`TextWriter`から派生する、`StreamWriter`クラスでは、このプロパティは等価、<xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-174">If the writer was constructed using a `TextWriter` that is derived from the `StreamWriter` class, this property is equivalent to the <xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType> property.</span></span> <span data-ttu-id="eaaa2-175">ライターを使用して構築した場合、 <xref:System.IO.Stream>、このプロパティを返します、`Stream`コンス トラクターに渡されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-175">If the writer was constructed using a <xref:System.IO.Stream>, this property returns the `Stream` passed to the constructor.</span></span> <span data-ttu-id="eaaa2-176">かどうか、ライターがファイル名を使用して構築された、このプロパティを返します、`Stream`ファイルを表します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-176">If the writer was constructed using a file name, this property returns the `Stream` representing the file.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlTextWriter.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-177">このストリームおよび基になるストリームを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-177">Closes this stream and the underlying stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-178">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-178">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-179">すべての要素または属性が開いたままに自動的に閉じられます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-179">Any elements or attributes left open are automatically closed.</span></span>  
  
 <span data-ttu-id="eaaa2-180">このメソッドは、すべての例外をスローしません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-180">This method does not throw any exceptions.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-181">次の例では、XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-181">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public override void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Flush();" />
      <MemberSignature Language="F#" Value="override this.Flush : unit -&gt; unit" Usage="xmlTextWriter.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-182">バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-182">Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-183">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-183">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-184">これは、代わりに呼び出されます<xref:System.Xml.XmlTextWriter.Close%2A>バッファーで新機能を失うことがなく、基になるストリームに書き込みを行う場合します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-184">This is called instead of <xref:System.Xml.XmlTextWriter.Close%2A> when you want to write more to the underlying stream without losing what is still in the buffer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-185">次の例は、2 つの XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-185">The following example writes out two XML fragments.</span></span>  
  
 [!code-cpp[XmlTextWriter.Flush#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlTextWriter.Flush/CPP/write2docs.cpp#1)]
 [!code-csharp[XmlTextWriter.Flush#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlTextWriter.Flush/CS/write2docs.cs#1)]
 [!code-vb[XmlTextWriter.Flush#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlTextWriter.Flush/VB/write2docs.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Formatting">
      <MemberSignature Language="C#" Value="public System.Xml.Formatting Formatting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Formatting Formatting" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Formatting" />
      <MemberSignature Language="VB.NET" Value="Public Property Formatting As Formatting" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Formatting Formatting { System::Xml::Formatting get(); void set(System::Xml::Formatting value); };" />
      <MemberSignature Language="F#" Value="member this.Formatting : System.Xml.Formatting with get, set" Usage="System.Xml.XmlTextWriter.Formatting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Xml.Formatting</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-186">出力の書式設定方法を示します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-186">Indicates how the output is formatted.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-187">
            <see cref="T:System.Xml.Formatting" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-187">One of the <see cref="T:System.Xml.Formatting" /> values.</span>
          </span>
          <span data-ttu-id="eaaa2-188">既定値は <see langword="Formatting.None" /> (特定の書式設定なし) です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-188">The default is <see langword="Formatting.None" /> (no special formatting).</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-189">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-189">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-190">場合、`Indented`オプションが設定されている、子要素を使用してインデント、<xref:System.Xml.XmlTextWriter.Indentation%2A>と<xref:System.Xml.XmlTextWriter.IndentChar%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-190">If the `Indented` option is set, child elements are indented using the <xref:System.Xml.XmlTextWriter.Indentation%2A> and <xref:System.Xml.XmlTextWriter.IndentChar%2A> properties.</span></span> <span data-ttu-id="eaaa2-191">要素の内容だけはインデントされます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-191">Only element content is indented.</span></span> <span data-ttu-id="eaaa2-192">次の c# コードは、混合コンテンツを含む HTML 要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-192">The following C# code writes out HTML elements including mixed content:</span></span>  
  
```csharp  
XmlTextWriter w = new XmlTextWriter(Console.Out);   
 w.Formatting = Formatting.Indented;   
 w.WriteStartElement("ol");   
 w.WriteStartElement("li");   
 w.WriteString("The big "); // This means "li" now has a mixed content model.  
 w.WriteElementString("b", "E");   
 w.WriteElementString("i", "lephant");   
 w.WriteString(" walks slowly.");   
 w.WriteEndElement();   
 w.WriteEndElement();  
```  
  
 <span data-ttu-id="eaaa2-193">上記のコードでは、次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-193">The above code produces the following output:</span></span>  
  
```xml  
<ol>   
  <li>The big <b>E</b><i>lephant</i> walks slowly.</li>   
</ol>  
```  
  
 <span data-ttu-id="eaaa2-194">これを HTML で表示するとき、太字と斜体の要素間の空白は表示されません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-194">When this is viewed in HTML no white space appears between the bold and italic elements.</span></span> <span data-ttu-id="eaaa2-195">実際には、この例でこれらの要素間にインデントを追加する場合"Elephant"という単語は失われますが正しくないです。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-195">In fact, in this example, if indenting was added between these elements the word "Elephant" would be incorrectly broken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-196">コンテンツを除く任意のテキストを書き込む`String.Empty`混合コンテンツ モードにその要素を格納します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-196">Writing any text content, excluding `String.Empty` puts that element into mixed content mode.</span></span> <span data-ttu-id="eaaa2-197">子要素は、この「混合」モードの状態を継承しません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-197">Child elements do not inherit this "mixed" mode status.</span></span> <span data-ttu-id="eaaa2-198">「混合」の要素の子要素は、インデントがない限りは、"mixed"のコンテンツも含まれます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-198">A child element of a "mixed" element does indenting, unless it is also contains "mixed" content.</span></span> <span data-ttu-id="eaaa2-199">要素のコンテンツ (http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)混合コンテンツと (http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)これらの用語の XML 1.0 の定義に従って定義されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-199">Element content (http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content) and mixed content (http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content) are defined according to the XML 1.0 definitions of these terms.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-200">次の例では、XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-200">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="Indentation">
      <MemberSignature Language="C#" Value="public int Indentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Indentation" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Indentation" />
      <MemberSignature Language="VB.NET" Value="Public Property Indentation As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Indentation { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Indentation : int with get, set" Usage="System.Xml.XmlTextWriter.Indentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-201">
            <see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、階層構造のレベルごとに書き込む IndentChar の数を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-201">Gets or sets how many IndentChars to write for each level in the hierarchy when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to <see langword="Formatting.Indented" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-202">各レベルの <see langword="IndentChars" /> の数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-202">Number of <see langword="IndentChars" /> for each level.</span>
          </span>
          <span data-ttu-id="eaaa2-203">既定値は 2 です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-203">The default is 2.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-204">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-204">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-205">インデントは実行次のノードの種類: `DocumentType`、 `Element`、 `Comment`、 `ProcessingInstruction`、および`CDATASection`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-205">Indentation is performed on following node types: `DocumentType`, `Element`, `Comment`, `ProcessingInstruction`, and `CDATASection`.</span></span> <span data-ttu-id="eaaa2-206">その他のすべてのノード型には影響しません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-206">All other node types are not affected.</span></span> <span data-ttu-id="eaaa2-207">`XmlTextWriter`内部 DTD サブセットをインデントしません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-207">The `XmlTextWriter` does not indent the internal DTD subset.</span></span> <span data-ttu-id="eaaa2-208">ただし、内部の DTD サブセットに書式を適用するには、次を実行できます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-208">However, you could do the following to apply formatting to the internal DTD subset.</span></span>  
  
```csharp  
String name = "Employees";  
String pubid = null;  
String sysid = null;  
String subset =  
@"  
    <!ELEMENT Employees (Employee)+>  
    <!ELEMENT Employee EMPTY>  
    <!ATTLIST Employee firstname CDATA #REQUIRED>  
    <!ENTITY Company 'Microsoft']]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-209">このプロパティを負の値に設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-209">Setting this property to a negative value.</span>
          </span>
        </exception>
        <altmember cref="P:System.Xml.XmlTextWriter.IndentChar" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="IndentChar">
      <MemberSignature Language="C#" Value="public char IndentChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char IndentChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.IndentChar" />
      <MemberSignature Language="VB.NET" Value="Public Property IndentChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char IndentChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.IndentChar : char with get, set" Usage="System.Xml.XmlTextWriter.IndentChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-210">
            <see cref="P:System.Xml.XmlTextWriter.Formatting" /> を <see langword="Formatting.Indented" /> に設定するときに、インデントに使用する文字を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-210">Gets or sets which character to use for indenting when <see cref="P:System.Xml.XmlTextWriter.Formatting" /> is set to <see langword="Formatting.Indented" />.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-211">インデントに使用する文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-211">The character to use for indenting.</span>
          </span>
          <span data-ttu-id="eaaa2-212">既定値は空白です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-212">The default is space.</span>
          </span>
          <block subset="none" type="note">
            <para>
              <span data-ttu-id="eaaa2-213">
                <see langword="XmlTextWriter" /> を使用すると、このプロパティを任意の文字に設定できます。</span>
              <span class="sxs-lookup">
                <span data-stu-id="eaaa2-213">The <see langword="XmlTextWriter" /> allows you to set this property to any character.</span>
              </span>
              <span data-ttu-id="eaaa2-214">有効な XML を確認するには、有効な空白文字、0x9、0x10、0x13、または 0x20 を指定する必要があります。</span>
              <span class="sxs-lookup">
                <span data-stu-id="eaaa2-214">To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</span>
              </span>
            </para>
          </block>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-215">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-215">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlTextWriter.Indentation" />
        <altmember cref="T:System.Xml.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="LookupPrefix">
      <MemberSignature Language="C#" Value="public override string LookupPrefix (string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupPrefix(string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupPrefix (ns As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupPrefix(System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.LookupPrefix : string -&gt; string" Usage="xmlTextWriter.LookupPrefix ns" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ns">
          <span data-ttu-id="eaaa2-216">検索する対象となるプリフィックスを持つ名前空間 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-216">Namespace URI whose prefix you want to find.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-217">名前空間 URI の現在の名前空間スコープで定義されたものに最も近いプリフィックスを返します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-217">Returns the closest prefix defined in the current namespace scope for the namespace URI.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="eaaa2-218">一致するプリフィックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-218">The matching prefix.</span>
          </span>
          <span data-ttu-id="eaaa2-219">一致する名前空間 URI が現在のスコープで見つからない場合は <see langword="null" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-219">Or <see langword="null" /> if no matching namespace URI is found in the current scope.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-220">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-220">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-221">次の例は、本を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-221">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-222">
            <paramref name="ns" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-222">
              <paramref name="ns" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlTextWriter.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-223">名前空間をサポートするかどうかを示す値を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-223">Gets or sets a value indicating whether to do namespace support.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-224">名前空間をサポートする場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-224">
              <see langword="true" /> to support namespaces; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="eaaa2-225">既定値は、<see langword="true" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-225">The default is <see langword="true" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-226">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-226">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-227">このプロパティは、ライターが www.w3.org/TR/REC-xml-names にある XML 』 での W3C 名前空間をサポートしているかどうかを決定します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-227">This property determines whether the writer supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-228">このプロパティを変更できるのは、<see langword="WriteState.Start" /> 状態のときだけです。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-228">You can only change this property when in the <see langword="WriteState.Start" /> state.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public char QuoteChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char QuoteChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char with get, set" Usage="System.Xml.XmlTextWriter.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-229">属性値を囲む引用符に使用する文字を取得または設定します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-229">Gets or sets which character to use to quote attribute values.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-230">属性値を囲む引用符に使用する文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-230">The character to use to quote attribute values.</span>
          </span>
          <span data-ttu-id="eaaa2-231">単一引用符があります (&amp;#39;) または二重引用符 (&amp;#34;)。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-231">This must be a single quote (&amp;#39;) or a double quote (&amp;#34;).</span>
          </span>
          <span data-ttu-id="eaaa2-232">既定値は二重引用符です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-232">The default is a double quote.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-233">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-233">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-234">このプロパティを単一引用符または二重引用符以外の値に設定。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-234">Setting this property to something other than either a single or double quote.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBase64">
      <MemberSignature Language="C#" Value="public override void WriteBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBase64 (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteBase64 : byte[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="eaaa2-235">エンコードするバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-235">Byte array to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="eaaa2-236">書き込むバイトの開始を示すバッファー内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-236">The position within the buffer indicating the start of the bytes to write.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="eaaa2-237">書き込むバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-237">The number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-238">指定したバイナリ バイトを base64 としてエンコードし、その結果生成されるテキストを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-238">Encodes the specified binary bytes as base64 and writes out the resulting text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-239">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-239">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-240">次の例では、エンコードを使用して、入力ファイル`WriteBase64`一時 XML ファイルを生成します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-240">The following example encodes an input file using `WriteBase64` and generates a temporary XML file.</span></span> <span data-ttu-id="eaaa2-241">使用して、一時 XML ファイルをデコード、<xref:System.Xml.XmlTextReader.ReadBase64%2A>メソッドと、元のファイルを比較します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-241">The temporary XML file is decoded using the <xref:System.Xml.XmlTextReader.ReadBase64%2A> method and compared to the original file.</span></span>  
  
 [!code-cpp[XmlWriter.WriteBase64#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlWriter.WriteBase64/CPP/writebase64.cpp#1)]
 [!code-csharp[XmlWriter.WriteBase64#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlWriter.WriteBase64/CS/writebase64.cs#1)]
 [!code-vb[XmlWriter.WriteBase64#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlWriter.WriteBase64/VB/writebase64.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eaaa2-242">
            <paramref name="buffer" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-242">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-243">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-243">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eaaa2-244">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-244">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-245">
            <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-245">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteBinHex">
      <MemberSignature Language="C#" Value="public override void WriteBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBinHex (buffer As Byte(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteBinHex : byte[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="eaaa2-246">エンコードするバイト配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-246">Byte array to encode.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="eaaa2-247">書き込むバイトの開始を示すバッファー内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-247">The position in the buffer indicating the start of the bytes to write.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="eaaa2-248">書き込むバイト数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-248">The number of bytes to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-249">指定したバイナリ バイトを binhex としてエンコードし、その結果生成されるテキストを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-249">Encodes the specified binary bytes as binhex and writes out the resulting text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-250">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-250">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eaaa2-251">
            <paramref name="buffer" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-251">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-252">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-252">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eaaa2-253">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-253">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-254">
            <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-254">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCData">
      <MemberSignature Language="C#" Value="public override void WriteCData (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCData(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCData (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCData(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteCData : string -&gt; unit" Usage="xmlTextWriter.WriteCData text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="eaaa2-255">CDATA ブロック内に配置するテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-255">Text to place inside the CDATA block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-256">指定したテキストを格納する &lt;![CDATA[...]]&gt; ブロックを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-256">Writes out a &lt;![CDATA[...]]&gt; block containing the specified text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-257">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-257">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-258">場合`text`か`null`または`String.Empty`、このメソッドは、空の CDATA ブロックをたとえば書き込みます\<! [CDATA[]</span><span class="sxs-lookup"><span data-stu-id="eaaa2-258">If `text` is either `null` or `String.Empty`, this method writes an empty CDATA block, for example \<![CDATA[]</span></span>]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-259">テキストは、非整形式の XML ドキュメントになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-259">The text would result in a non-well formed XML document.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-260">
            <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-260">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteCharEntity (char ch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteCharEntity(char ch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteCharEntity (ch As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteCharEntity(char ch);" />
      <MemberSignature Language="F#" Value="override this.WriteCharEntity : char -&gt; unit" Usage="xmlTextWriter.WriteCharEntity ch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ch" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="ch">
          <span data-ttu-id="eaaa2-261">文字エンティティを生成する対象の Unicode 文字。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-261">Unicode character for which to generate a character entity.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-262">指定した Unicode 文字値の文字エンティティを強制的に生成します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-262">Forces the generation of a character entity for the specified Unicode character value.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-263">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-263">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-264">このメソッドは、Unicode 文字を 16 進文字エンティティ参照の形式で書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-264">This method writes the Unicode character in hexadecimal character entity reference format.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-265">次の例では、`WriteCharEntity`電子メール アドレスを記述するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-265">The following example uses the `WriteCharEntity` method to write an email address.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteTimeSpan Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteTimeSpan Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-266">文字がサロゲート ペアの文字範囲、つまり <see langword="0xd800" /> - <see langword="0xdfff" />内にあります。これ以外の場合、テキストは非整形式の XML ドキュメントになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-266">The character is in the surrogate pair character range, <see langword="0xd800" /> - <see langword="0xdfff" />; or the text would result in a non-well formed XML document.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-267">
            <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-267">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteChars">
      <MemberSignature Language="C#" Value="public override void WriteChars (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteChars(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteChars (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteChars(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteChars : char[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteChars (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="eaaa2-268">書き込むテキストを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-268">Character array containing the text to write.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="eaaa2-269">書き込むテキストの開始を示すバッファー内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-269">The position in the buffer indicating the start of the text to write.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="eaaa2-270">書き込む文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-270">The number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-271">一度に 1 つのバッファーにテキストを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-271">Writes text one buffer at a time.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-272">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-272">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-273">このメソッドは、一度に大量の 1 つのテキスト バッファーを書き込むには使用できます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-273">This method can be used to write large amounts of text one buffer at a time.</span></span>  
  
 <span data-ttu-id="eaaa2-274">特別な処理を行うことを確認する必要がある、`WriteChars`メソッドが複数のバッファーの書き込みの間でサロゲート ペア文字を分割されません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-274">Special handling must be done to ensure the `WriteChars` method does not split surrogate pair characters across multiple buffer writes.</span></span> <span data-ttu-id="eaaa2-275">XML 仕様には、サロゲート ペアの有効な範囲が定義されています。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-275">The XML specification defines the valid ranges for surrogate pairs.</span></span>  
  
 <span data-ttu-id="eaaa2-276">サロゲート ペア文字のサロゲート ペア文字がバッファー内で分割されていることになりますが記述されている場合、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-276">An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</span></span>  
  
   
  
## Examples  
 [!code-csharp[XmlTextWriter.WriteChars#1](~/samples/snippets/csharp/VS_Snippets_Data/xmltextwriter.writechars/cs/xmlwriterwritecharsexample.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eaaa2-277">
            <paramref name="buffer" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-277">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eaaa2-278">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-278">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="eaaa2-279">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-279">-or-</span>
          </span>
          <span data-ttu-id="eaaa2-280">バッファー長から <paramref name="index" /> を差し引いた値が <paramref name="count" /> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-280">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-281">
            <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が閉じています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-281">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is Closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteComment">
      <MemberSignature Language="C#" Value="public override void WriteComment (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteComment(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteComment(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteComment (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteComment(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteComment : string -&gt; unit" Usage="xmlTextWriter.WriteComment text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="eaaa2-282">コメント内に配置するテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-282">Text to place inside the comment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-283">指定したテキストを格納するコメント &lt;!--...--&gt; を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-283">Writes out a comment &lt;!--...--&gt; containing the specified text.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-284">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-284">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-285">場合`text`か`null`または`String.Empty`、このメソッドを書き込みます、`Comment`データのコンテンツの例ではない\<!--->。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-285">If `text` is either `null` or `String.Empty`, this method writes a `Comment` with no data content, for example \<!---->.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-286">次の例では、本を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-286">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-287">テキストは、非整形式の XML ドキュメントになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-287">The text would result in a non-well formed XML document</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-288">
            <see cref="P:System.Xml.XmlTextWriter.WriteState" /> が <see langword="Closed" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-288">The <see cref="P:System.Xml.XmlTextWriter.WriteState" /> is <see langword="Closed" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteDocType">
      <MemberSignature Language="C#" Value="public override void WriteDocType (string name, string pubid, string sysid, string subset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteDocType(string name, string pubid, string sysid, string subset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteDocType (name As String, pubid As String, sysid As String, subset As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteDocType(System::String ^ name, System::String ^ pubid, System::String ^ sysid, System::String ^ subset);" />
      <MemberSignature Language="F#" Value="override this.WriteDocType : string * string * string * string -&gt; unit" Usage="xmlTextWriter.WriteDocType (name, pubid, sysid, subset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="pubid" Type="System.String" />
        <Parameter Name="sysid" Type="System.String" />
        <Parameter Name="subset" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eaaa2-289">DOCTYPE の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-289">The name of the DOCTYPE.</span>
          </span>
          <span data-ttu-id="eaaa2-290">これを空にすることはできません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-290">This must be non-empty.</span>
          </span>
        </param>
        <param name="pubid">
          <span data-ttu-id="eaaa2-291">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<paramref name="pubid" /> と <paramref name="sysid" /> は、指定した引数の値に置き換えられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-291">If non-null it also writes PUBLIC "pubid" "sysid" where <paramref name="pubid" /> and <paramref name="sysid" /> are replaced with the value of the given arguments.</span>
          </span>
        </param>
        <param name="sysid">
          <span data-ttu-id="eaaa2-292">
            <paramref name="pubid" /> が null で <paramref name="sysid" /> が非 null の場合は、<paramref name="sysid" /> がこの引数の値に置き換えられる SYSTEM "sysid" を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-292">If <paramref name="pubid" /> is null and <paramref name="sysid" /> is non-null it writes SYSTEM "sysid" where <paramref name="sysid" /> is replaced with the value of this argument.</span>
          </span>
        </param>
        <param name="subset">
          <span data-ttu-id="eaaa2-293">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-293">If non-null it writes [subset] where subset is replaced with the value of this argument.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-294">名前とオプション属性を指定して、DOCTYPE 宣言を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-294">Writes the DOCTYPE declaration with the specified name and optional attributes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-295">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-295">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-296">このメソッドに無効な文字をチェックしません`pubid`、`sysid`または`subset`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-296">This method does not check for invalid characters in `pubid`, `sysid` or `subset`.</span></span> <span data-ttu-id="eaaa2-297">または確認しません内部サブセットが正しく構成されていること。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-297">It also does not check that the internal subset is well-formed.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eaaa2-298"><xref:System.Xml.XmlTextWriter>に渡されるすべてのデータを検証しません、<xref:System.Xml.XmlTextWriter.WriteDocType%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-298">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteDocType%2A> method.</span></span> <span data-ttu-id="eaaa2-299">このメソッドに、任意のデータを渡さないでください。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-299">You should not pass arbitrary data to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-300">次の例では、本を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-300">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-301">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-301">This method was called outside the prolog (after the root element).</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-302">
            <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-302">
              <paramref name="name" /> is <see langword="null" /> or <see langword="String.Empty" /></span>
          </span>
          <span data-ttu-id="eaaa2-303">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-303">-or-</span>
          </span>
          <span data-ttu-id="eaaa2-304">
            <paramref name="name" /> の値が、無効な XML になることがあります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-304">the value for <paramref name="name" /> would result in invalid XML.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndAttribute">
      <MemberSignature Language="C#" Value="public override void WriteEndAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndAttribute ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndAttribute();" />
      <MemberSignature Language="F#" Value="override this.WriteEndAttribute : unit -&gt; unit" Usage="xmlTextWriter.WriteEndAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-305">前の <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> 呼び出しを閉じます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-305">Closes the previous <see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /> call.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-306">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-306">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-307">呼び出す場合`WriteStartAttribute`、このメソッドを使用して、属性を閉じることができます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-307">If you call `WriteStartAttribute`, you can close the attribute with this method.</span></span>  
  
 <span data-ttu-id="eaaa2-308">呼び出すことによって、属性を閉じることができますも`WriteStartAttribute`、もう一度呼び出す<xref:System.Xml.XmlWriter.WriteAttributeString%2A>、または呼び出し<xref:System.Xml.XmlTextWriter.WriteEndElement%2A>。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-308">You can also close the attribute by calling `WriteStartAttribute` again, calling <xref:System.Xml.XmlWriter.WriteAttributeString%2A>, or calling <xref:System.Xml.XmlTextWriter.WriteEndElement%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-309">次の例は、本を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-309">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEndDocument">
      <MemberSignature Language="C#" Value="public override void WriteEndDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndDocument();" />
      <MemberSignature Language="F#" Value="override this.WriteEndDocument : unit -&gt; unit" Usage="xmlTextWriter.WriteEndDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-310">開いている要素または属性を閉じ、ライターを Start 状態に戻します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-310">Closes any open elements or attributes and puts the writer back in the Start state.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-311">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-311">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-312">次の例では、本を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-312">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-313">XML ドキュメントが無効です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-313">The XML document is invalid.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteEndElement">
      <MemberSignature Language="C#" Value="public override void WriteEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEndElement();" />
      <MemberSignature Language="F#" Value="override this.WriteEndElement : unit -&gt; unit" Usage="xmlTextWriter.WriteEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-314">1 つの要素を閉じ、対応する名前空間スコープをポップします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-314">Closes one element and pops the corresponding namespace scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-315">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-315">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-316">要素にコンテンツが含まれていない場合は、短い終了タグ"/>"が書き込まれます。それ以外の場合、完全な終了タグが書き込まれます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-316">If the element contains no content a short end tag "/>" is written; otherwise a full end tag is written.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-317">次の例では、本を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-317">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEntityRef">
      <MemberSignature Language="C#" Value="public override void WriteEntityRef (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEntityRef(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEntityRef (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEntityRef(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteEntityRef : string -&gt; unit" Usage="xmlTextWriter.WriteEntityRef name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eaaa2-318">エンティティ参照の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-318">Name of the entity reference.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-319">
            <see langword="&amp;name;" /> のようにエンティティ参照を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-319">Writes out an entity reference as <see langword="&amp;name;" />.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-320">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-320">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-321">次の例では、本を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-321">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-322">テキストが非整形式の XML ドキュメントになるか、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-322">The text would result in a non-well formed XML document or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteFullEndElement">
      <MemberSignature Language="C#" Value="public override void WriteFullEndElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteFullEndElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteFullEndElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteFullEndElement ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteFullEndElement();" />
      <MemberSignature Language="F#" Value="override this.WriteFullEndElement : unit -&gt; unit" Usage="xmlTextWriter.WriteFullEndElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-323">1 つの要素を閉じ、対応する名前空間スコープをポップします。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-323">Closes one element and pops the corresponding namespace scope.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-324">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-324">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-325">このメソッドは、常に完全な終了タグを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-325">This method always writes the full end tag.</span></span> <span data-ttu-id="eaaa2-326">これは、機能は、完全な終了タグを含める必要のある要素を処理するときに便利です。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-326">This is useful when dealing with elements that must include a full end tag.</span></span> <span data-ttu-id="eaaa2-327">たとえば、HTML スクリプトのブロックを終了するがブラウザー"\</script >"。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-327">For example, browsers expect HTML script blocks to be closed with "\</script>".</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-328">次の例は、コンテンツを持つ要素を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-328">The following example writes out an element with no content.</span></span> <span data-ttu-id="eaaa2-329">完全な終了要素タグを書き込む WriteFullEndElement を使用します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-329">It uses WriteFullEndElement to write the full end element tag.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteFullEndElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteFullEndElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteName">
      <MemberSignature Language="C#" Value="public override void WriteName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteName(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteName (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteName(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteName : string -&gt; unit" Usage="xmlTextWriter.WriteName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eaaa2-330">書き込む名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-330">Name to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-331">指定した名前が W3C 勧告『XML 1.0』(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な名前であることを確認して、それを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-331">Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-332">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-332">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-333">場合<xref:System.Xml.XmlTextWriter.Namespaces%2A>に設定されている`true`、`WriteName`も名前が W3C Namespaces in XML 』 に従った有効なもことを確認します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-333">If <xref:System.Xml.XmlTextWriter.Namespaces%2A> is set to `true`, `WriteName` also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-334">
            <paramref name="name" /> が有効な XML 名ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-334">
              <paramref name="name" /> is not a valid XML name; or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteNmToken">
      <MemberSignature Language="C#" Value="public override void WriteNmToken (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteNmToken(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteNmToken (name As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteNmToken(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.WriteNmToken : string -&gt; unit" Usage="xmlTextWriter.WriteNmToken name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eaaa2-335">書き込む名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-335">Name to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-336">指定した名前が W3C 勧告『XML 1.0』(http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)) に準拠した有効な <see langword="NmToken" /> であることを確認して、それを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-336">Writes out the specified name, ensuring it is a valid <see langword="NmToken" /> according to the W3C XML 1.0 recommendation (http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-337">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-337">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-338">
            <paramref name="name" /> が有効な <see langword="NmToken" /> ではありません。または、<paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-338">
              <paramref name="name" /> is not a valid <see langword="NmToken" />; or <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteProcessingInstruction">
      <MemberSignature Language="C#" Value="public override void WriteProcessingInstruction (string name, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteProcessingInstruction(string name, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteProcessingInstruction (name As String, text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteProcessingInstruction(System::String ^ name, System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteProcessingInstruction : string * string -&gt; unit" Usage="xmlTextWriter.WriteProcessingInstruction (name, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="eaaa2-339">処理命令の名前。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-339">Name of the processing instruction.</span>
          </span>
        </param>
        <param name="text">
          <span data-ttu-id="eaaa2-340">処理命令に含めるテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-340">Text to include in the processing instruction.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-341">名前とテキストの間にスペースがある処理命令を、次のように書き込みます: &lt;?name text?&gt;。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-341">Writes out a processing instruction with a space between the name and text as follows: &lt;?name text?&gt;.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-342">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-342">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-343">場合`text`いずれかです`null`または`String.Empty`、このメソッドを書き込みます、`ProcessingInstruction`データのコンテンツの例ではない\<でしょうか。 名か? >。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-343">If `text` is either `null` or `String.Empty`, this method writes a `ProcessingInstruction` with no data content, for example \<?name?>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-344">次の例では、本を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-344">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-345">テキストは、非整形式の XML ドキュメントになります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-345">The text would result in a non-well formed XML document.</span>
          </span>
          <span data-ttu-id="eaaa2-346">
            <paramref name="name" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-346">
              <paramref name="name" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span>
          </span>
          <span data-ttu-id="eaaa2-347">このメソッドは、<see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> が呼び出された後に XML 宣言を作成するために使用されています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-347">This method is being used to create an XML declaration after <see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /> has already been called.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteQualifiedName">
      <MemberSignature Language="C#" Value="public override void WriteQualifiedName (string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteQualifiedName(string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteQualifiedName (localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteQualifiedName(System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteQualifiedName : string * string -&gt; unit" Usage="xmlTextWriter.WriteQualifiedName (localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">
          <span data-ttu-id="eaaa2-348">書き込むローカル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-348">The local name to write.</span>
          </span>
        </param>
        <param name="ns">
          <span data-ttu-id="eaaa2-349">名前に関連付ける名前空間 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-349">The namespace URI to associate with the name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-350">名前空間の修飾名を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-350">Writes out the namespace-qualified name.</span>
          </span>
          <span data-ttu-id="eaaa2-351">このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-351">This method looks up the prefix that is in scope for the given namespace.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-352">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-352">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-353">たとえば、次の Microsoft Visual c# コード。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-353">For example, the following Microsoft Visual C# code:</span></span>  
  
```csharp  
writer.Formatting = Formatting.Indented;  
writer.WriteStartElement("root");  
 writer.WriteAttributeString("xmlns","x",null,"urn:abc");  
 writer.WriteStartElement("item");  
 writer.WriteStartAttribute("href",null);  
 writer.WriteString("#");  
 writer.WriteQualifiedName("test","urn:abc");  
 writer.WriteEndAttribute();  
 writer.WriteEndElement();  
 writer.WriteEndElement();  
 writer.Close();  
```  
  
 <span data-ttu-id="eaaa2-354">次の出力が生成されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-354">Generates the following output:</span></span>  
  
```xml  
<root xmlns:x="urn:abc">  
 <item href="#x:test"/>  
 </root>  
```  
  
 <span data-ttu-id="eaaa2-355">場合`ns`現在既定の名前空間、プレフィックスなしのマップを生成します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-355">If `ns` maps to the current default namespace, no prefix is generated.</span></span>  
  
 <span data-ttu-id="eaaa2-356">場合に、このメソッドにプレフィックスを生成属性値を書き込むときに`ns`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-356">When writing attribute values, this method generates a prefix if `ns` is not found.</span></span> <span data-ttu-id="eaaa2-357">場合は、例外をスローした要素の内容を書き込むときに`ns`が見つかりません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-357">When writing element content, it throws an exception if `ns` is not found.</span></span>  
  
 <span data-ttu-id="eaaa2-358">このライターは、名前空間をサポートしている場合 (<xref:System.Xml.XmlTextWriter.Namespaces%2A>に設定されている`true`)、このメソッドも名前が W3C Namespaces in XML 』 に従った有効なことを確認します (http://www.w3.org/TR/REC-xml-names)します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-358">If this writer supports namespaces (<xref:System.Xml.XmlTextWriter.Namespaces%2A> is set to `true`), this method also checks that the name is valid according to the W3C Namespaces in XML recommendation (http://www.w3.org/TR/REC-xml-names).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-359">次の例は、XSD スキーマの一部を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-359">The following example writes out a portion of a XSD schema.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteQualifiedName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteQualifiedName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-360">
            <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-360">
              <paramref name="localName" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span>
          </span>
          <span data-ttu-id="eaaa2-361">
            <paramref name="localName" /> が、W3C の名前空間の仕様に準拠した有効な名前ではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-361">
              <paramref name="localName" /> is not a valid name according to the W3C Namespaces spec.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteRaw">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-362">手動で生のマークアップを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-362">Writes raw markup manually.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-363">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-363">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (string data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(string data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (data As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(System::String ^ data);" />
      <MemberSignature Language="F#" Value="override this.WriteRaw : string -&gt; unit" Usage="xmlTextWriter.WriteRaw data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">
          <span data-ttu-id="eaaa2-364">書き込むテキストを格納している文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-364">String containing the text to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-365">文字列から手動で生のマークアップを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-365">Writes raw markup manually from a string.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-366">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-366">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-367">このメソッドは、特殊文字をエスケープしません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-367">This method does not escape special characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eaaa2-368"><xref:System.Xml.XmlTextWriter>に渡されるすべてのデータを検証しません、<xref:System.Xml.XmlTextWriter.WriteRaw%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-368">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteRaw%2A> method.</span></span> <span data-ttu-id="eaaa2-369">このメソッドに、任意のデータを渡さないでください。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-369">You should not pass arbitrary data to this method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-370">次の例を使用して文字列を書き込みます、`WriteRaw`メソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-370">The following example writes a string using the `WriteRaw` method.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteRaw1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteRaw1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteRaw">
      <MemberSignature Language="C#" Value="public override void WriteRaw (char[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteRaw(char[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteRaw (buffer As Char(), index As Integer, count As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteRaw(cli::array &lt;char&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.WriteRaw : char[] * int * int -&gt; unit" Usage="xmlTextWriter.WriteRaw (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Char[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">
          <span data-ttu-id="eaaa2-371">書き込むテキストを格納している文字配列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-371">Character array containing the text to write.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="eaaa2-372">書き込むテキストの開始を示すバッファー内の位置。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-372">The position within the buffer indicating the start of the text to write.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="eaaa2-373">書き込む文字数。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-373">The number of characters to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-374">文字バッファーから手動で生のマークアップを書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-374">Writes raw markup manually from a character buffer.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-375">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-375">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-376">このメソッドは、特殊文字をエスケープしません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-376">This method does not escape special characters.</span></span>  
  
> [!IMPORTANT]
>  <span data-ttu-id="eaaa2-377"><xref:System.Xml.XmlTextWriter>に渡されるすべてのデータを検証しません、<xref:System.Xml.XmlTextWriter.WriteRaw%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-377">The <xref:System.Xml.XmlTextWriter> does not validate any data that is passed to the <xref:System.Xml.XmlTextWriter.WriteRaw%2A> method.</span></span> <span data-ttu-id="eaaa2-378">このメソッドに、任意のデータを渡さないでください。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-378">You should not pass arbitrary data to this method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="eaaa2-379">
            <paramref name="buffer" /> は <see langword="null" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-379">
              <paramref name="buffer" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="eaaa2-380">
            <paramref name="index" /> または <paramref name="count" /> が 0 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-380">
              <paramref name="index" /> or <paramref name="count" /> is less than zero.</span>
          </span>
          <span data-ttu-id="eaaa2-381">- または -</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-381">-or-</span>
          </span>
          <span data-ttu-id="eaaa2-382">バッファーの長さから <paramref name="index" /> を引いた値が <paramref name="count" /> 未満です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-382">The buffer length minus <paramref name="index" /> is less than <paramref name="count" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartAttribute">
      <MemberSignature Language="C#" Value="public override void WriteStartAttribute (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartAttribute(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartAttribute (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartAttribute(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteStartAttribute : string * string * string -&gt; unit" Usage="xmlTextWriter.WriteStartAttribute (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="eaaa2-383">属性の <see langword="Namespace" /> プリフィックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-383">
              <see langword="Namespace" /> prefix of the attribute.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="eaaa2-384">属性の <see langword="LocalName" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-384">
              <see langword="LocalName" /> of the attribute.</span>
          </span>
        </param>
        <param name="ns">
          <span data-ttu-id="eaaa2-385">属性の <see langword="NamespaceURI" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-385">
              <see langword="NamespaceURI" /> of the attribute</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-386">属性の開始を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-386">Writes the start of an attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-387">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-387">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-388">これはより高度なバージョンの<xref:System.Xml.XmlWriter.WriteAttributeString%2A>などの複数の書き込みメソッドを使用して属性値を書き込むことができます<xref:System.Xml.XmlTextWriter.WriteString%2A>します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-388">This is a more advanced version of <xref:System.Xml.XmlWriter.WriteAttributeString%2A> that allows you to write an attribute value using multiple write methods, such as <xref:System.Xml.XmlTextWriter.WriteString%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-389">次の例は、本を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-389">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-390">
            <paramref name="localName" /> が <see langword="null" /> または <see langword="String.Empty" /> です。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-390">
              <paramref name="localName" /> is either <see langword="null" /> or <see langword="String.Empty" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Xml.XmlTextWriter.WriteEndAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="WriteStartDocument">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-391">バージョン "1.0" で XML 宣言を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-391">Writes the XML declaration with the version "1.0".</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-392">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-392">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument();" />
      <MemberSignature Language="F#" Value="override this.WriteStartDocument : unit -&gt; unit" Usage="xmlTextWriter.WriteStartDocument " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-393">バージョン "1.0" で XML 宣言を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-393">Writes the XML declaration with the version "1.0".</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-394">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-394">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-395">ドキュメントのエンコーディング レベルについては、ライターの実装方法によって決まります。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-395">The encoding level of the document is determined by how the writer is implemented.</span></span> <span data-ttu-id="eaaa2-396">たとえば場合、<xref:System.Text.Encoding>オブジェクトで指定、`XmlTextWriter`コンス トラクター、encoding 属性の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-396">For example, if an <xref:System.Text.Encoding> object is specified in the `XmlTextWriter` constructor, this determines the value of the encoding attribute.</span></span> <span data-ttu-id="eaaa2-397">このメソッドは、スタンドアロン属性を作成できません。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-397">This method does not create a standalone attribute.</span></span>  
  
 <span data-ttu-id="eaaa2-398">ときに`WriteStartDocument`呼びますライターは、作成しているが、整形式 XML ドキュメントであることを検証します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-398">When `WriteStartDocument` is called the writer validates that what you are writing is a well-formed XML document.</span></span> <span data-ttu-id="eaaa2-399">たとえば、XML 宣言が最初のノードであると、これに 1 つだけルート レベル要素が存在することを確認します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-399">For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</span></span> <span data-ttu-id="eaaa2-400">このメソッドが呼び出されない場合、ライターでは、XML フラグメントが書き込まれていると、ルート レベル規則が適用されない前提としています。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-400">If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</span></span>  
  
 <span data-ttu-id="eaaa2-401">場合`WriteStartDocument`が呼び出された後、<xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A>メソッドの使用をもう 1 つの XML 宣言を作成、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-401">If `WriteStartDocument` has been called and then the <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> method is used to create another XML declaration, an exception is thrown.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-402">次の例では、本を表す XML ファイルを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-402">The following example writes an XML file representing a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartDocument Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartDocument Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-403">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-403">This is not the first write method called after the constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartDocument">
      <MemberSignature Language="C#" Value="public override void WriteStartDocument (bool standalone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartDocument(bool standalone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartDocument (standalone As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartDocument(bool standalone);" />
      <MemberSignature Language="F#" Value="override this.WriteStartDocument : bool -&gt; unit" Usage="xmlTextWriter.WriteStartDocument standalone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="standalone" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="standalone">
          <span data-ttu-id="eaaa2-404">
            <see langword="true" /> の場合は "standalone=yes"、<see langword="false" /> の場合は "standalone=no" を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-404">If <see langword="true" />, it writes "standalone=yes"; if <see langword="false" />, it writes "standalone=no".</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-405">バージョン "1.0" とスタントアロン属性を使用して XML 宣言を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-405">Writes the XML declaration with the version "1.0" and the standalone attribute.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-406">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-406">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-407">ドキュメントのエンコーディング レベルについては、ライターの実装方法によって決まります。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-407">The encoding level of the document is determined by how the writer is implemented.</span></span> <span data-ttu-id="eaaa2-408">たとえば場合、<xref:System.Text.Encoding>オブジェクトで指定、`XmlTextWriter`コンス トラクター、encoding 属性の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-408">For example, if an <xref:System.Text.Encoding> object is specified in the `XmlTextWriter` constructor, this determines the value of the encoding attribute.</span></span>  
  
 <span data-ttu-id="eaaa2-409">ときに`WriteStartDocument`呼びますライターは、作成しているが、整形式 XML ドキュメントであることを検証します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-409">When `WriteStartDocument` is called the writer validates that what you are writing is a well-formed XML document.</span></span> <span data-ttu-id="eaaa2-410">たとえば、XML 宣言が最初のノードであると、これに 1 つだけルート レベル要素が存在することを確認します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-410">For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</span></span> <span data-ttu-id="eaaa2-411">このメソッドが呼び出されない場合、ライターでは、XML フラグメントが書き込まれていると、ルート レベル規則が適用されない前提としています。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-411">If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</span></span>  
  
 <span data-ttu-id="eaaa2-412">場合`WriteStartDocument`が呼び出された後、<xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A>メソッドの使用をもう 1 つの XML 宣言を作成、例外がスローされます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-412">If `WriteStartDocument` has been called and then the <xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A> method is used to create another XML declaration, an exception is thrown.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-413">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-413">This is not the first write method called after the constructor.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteStartElement">
      <MemberSignature Language="C#" Value="public override void WriteStartElement (string prefix, string localName, string ns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteStartElement(string prefix, string localName, string ns) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteStartElement (prefix As String, localName As String, ns As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteStartElement(System::String ^ prefix, System::String ^ localName, System::String ^ ns);" />
      <MemberSignature Language="F#" Value="override this.WriteStartElement : string * string * string -&gt; unit" Usage="xmlTextWriter.WriteStartElement (prefix, localName, ns)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">
          <span data-ttu-id="eaaa2-414">要素の名前空間プリフィックス。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-414">The namespace prefix of the element.</span>
          </span>
        </param>
        <param name="localName">
          <span data-ttu-id="eaaa2-415">要素のローカル名。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-415">The local name of the element.</span>
          </span>
        </param>
        <param name="ns">
          <span data-ttu-id="eaaa2-416">要素に関連付ける名前空間 URI。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-416">The namespace URI to associate with the element.</span>
          </span>
          <span data-ttu-id="eaaa2-417">この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-417">If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-418">指定した開始タグを書き込み、指定した名前空間とプレフィックスに関連付けます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-418">Writes the specified start tag and associates it with the given namespace and prefix.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-419">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-419">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-420">使用して、コンテンツの属性を書き込むか、作成することができます、このメソッドを呼び出した後<xref:System.Xml.XmlTextWriter.WriteComment%2A>、 <xref:System.Xml.XmlTextWriter.WriteString%2A>、または<xref:System.Xml.XmlTextWriter.WriteStartElement%2A>の子要素。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-420">After calling this method you can either write attributes or create content using <xref:System.Xml.XmlTextWriter.WriteComment%2A>, <xref:System.Xml.XmlTextWriter.WriteString%2A>, or <xref:System.Xml.XmlTextWriter.WriteStartElement%2A> for child elements.</span></span> <span data-ttu-id="eaaa2-421">持つ要素を閉じることができます<xref:System.Xml.XmlTextWriter.WriteEndElement%2A>終了タグが書き込まれた時点。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-421">You can close the element with <xref:System.Xml.XmlTextWriter.WriteEndElement%2A> at which time an end tag is written out.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-422">次の例は、本を書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-422">The following example writes out a book.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.WriteStartElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.WriteStartElement Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="eaaa2-423">ライターは閉じられています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-423">The writer is closed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteState">
      <MemberSignature Language="C#" Value="public override System.Xml.WriteState WriteState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.WriteState WriteState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.WriteState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property WriteState As WriteState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::WriteState WriteState { System::Xml::WriteState get(); };" />
      <MemberSignature Language="F#" Value="member this.WriteState : System.Xml.WriteState" Usage="System.Xml.XmlTextWriter.WriteState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.WriteState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-424">ライターの状態を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-424">Gets the state of the writer.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-425">
            <see cref="T:System.Xml.WriteState" /> 値のいずれか 1 つ。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-425">One of the <see cref="T:System.Xml.WriteState" /> values.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-426">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-426">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteString">
      <MemberSignature Language="C#" Value="public override void WriteString (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteString(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteString (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteString(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteString : string -&gt; unit" Usage="xmlTextWriter.WriteString text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">
          <span data-ttu-id="eaaa2-427">書き込むテキスト。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-427">Text to write.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-428">指定したテキストの内容を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-428">Writes the given text content.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-429">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-429">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-430">`WriteString` 次を処理します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-430">`WriteString` does the following</span></span>  
  
-   <span data-ttu-id="eaaa2-431">文字`&`、 `<`、および`>`に置き換えられます`&amp;`、 `&lt;`、および`&gt;`、それぞれします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-431">The characters `&`, `<`, and `>` are replaced with `&amp;`, `&lt;`, and `&gt;`, respectively.</span></span>  
  
-   <span data-ttu-id="eaaa2-432">範囲 0 ~ 0x1f (除外の空白文字 0x9、0 xa、および 0 xd) 内の文字値が数値文字エンティティに置き換えられます (`&#0;`を通じて`&#0x1F`)。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-432">Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (`&#0;` through `&#0x1F`).</span></span>  
  
-   <span data-ttu-id="eaaa2-433">場合`WriteString`と呼ばれる、属性値のコンテキストでは、二重と 1 つの引用符に置き換えられます`&quot;`と`&apos;`それぞれします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-433">If `WriteString` is called in the context of an attribute value, double and single quotes are replaced with `&quot;` and `&apos;` respectively.</span></span>  
  
 <span data-ttu-id="eaaa2-434">たとえば、この文字列を入力`test<item>test`として書き込まれます</span><span class="sxs-lookup"><span data-stu-id="eaaa2-434">For example, this input string `test<item>test` is written as</span></span>  
  
```  
test&lt;item&gt;test  
```  
  
 <span data-ttu-id="eaaa2-435">場合`text`か`null`または`String.Empty`、このメソッドは、データ コンテンツのないテキスト ノードを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-435">If `text` is either `null` or `String.Empty`, this method writes a text node with no data content.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-436">次の例では、XML フラグメントを書き込みます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-436">The following example writes an XML fragment.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.Formatting Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.Formatting Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-437">テキスト文字列に、無効なサロゲート ペアが含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-437">The text string contains an invalid surrogate pair.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteSurrogateCharEntity">
      <MemberSignature Language="C#" Value="public override void WriteSurrogateCharEntity (char lowChar, char highChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteSurrogateCharEntity(char lowChar, char highChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteSurrogateCharEntity (lowChar As Char, highChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteSurrogateCharEntity(char lowChar, char highChar);" />
      <MemberSignature Language="F#" Value="override this.WriteSurrogateCharEntity : char * char -&gt; unit" Usage="xmlTextWriter.WriteSurrogateCharEntity (lowChar, highChar)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lowChar" Type="System.Char" />
        <Parameter Name="highChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="lowChar">
          <span data-ttu-id="eaaa2-438">下位サロゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-438">The low surrogate.</span>
          </span>
          <span data-ttu-id="eaaa2-439">この値は、<see langword="0xDC00" /> から <see langword="0xDFFF" /> の範囲内にある必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-439">This must be a value between <see langword="0xDC00" /> and <see langword="0xDFFF" />.</span>
          </span>
        </param>
        <param name="highChar">
          <span data-ttu-id="eaaa2-440">上位サロゲート。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-440">The high surrogate.</span>
          </span>
          <span data-ttu-id="eaaa2-441">この値は、<see langword="0xD800" /> から <see langword="0xDBFF" /> の範囲内にある必要があります。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-441">This must be a value between <see langword="0xD800" /> and <see langword="0xDBFF" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-442">サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-442">Generates and writes the surrogate character entity for the surrogate character pair.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-443">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-443">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-444">このメソッドは、utf-16 エンコードを使用するシステムに該当するだけです。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-444">This method is only applicable on systems that use UTF-16 encoding.</span></span>  
  
 <span data-ttu-id="eaaa2-445">サロゲート文字エンティティは、16 進数形式で記述されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-445">The surrogate character entity is written in hexadecimal format.</span></span> <span data-ttu-id="eaaa2-446">サロゲート文字の範囲は`#x10000`に`#x10FFFF`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-446">The range for surrogate characters is `#x10000` to `#x10FFFF`.</span></span> <span data-ttu-id="eaaa2-447">次の数式はサロゲート文字エンティティを生成するために使用します。 (`highChar` - `0xD800`) \* `0x400` + (`lowChar` - `0xDC00`) +`0x10000`します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-447">The following formula is used to generate the surrogate character entity: (`highChar` - `0xD800`) \* `0x400` + (`lowChar` - `0xDC00`) + `0x10000`.</span></span>  
  
 <span data-ttu-id="eaaa2-448">HTML および XML の両方のドキュメントの文字セット (および、したがって数値文字参照の表記) に基づきます UCS [ISO 10646]。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-448">For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</span></span> <span data-ttu-id="eaaa2-449">ソース ドキュメント内の 1 つの数字参照可能性がありますしたがって場合によっては対応 (上位サロゲートと下位サロゲート)、文字列内の 2 つの 16 ビット単位。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-449">A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</span></span> <span data-ttu-id="eaaa2-450">これらの 16 ビット単位は、サロゲート ペアと呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-450">These 16-bit units are referred to as a surrogate pair.</span></span>  
  
 <span data-ttu-id="eaaa2-451">サロゲートまたは文字の詳細については、標準 3.0/Unicode 2.0 にある、Unicode のセクション 3.7 を参照してくださいhttp://www.unicode.orgにある、W3C XML 1.0 勧告のセクション 2.2 またはhttp://www.w3.org/TR/REC-xml#charsetsします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-451">For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at http://www.unicode.org, or section 2.2 of the W3C XML 1.0 Recommendation located at http://www.w3.org/TR/REC-xml#charsets.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <span data-ttu-id="eaaa2-452">無効なサロゲート文字ペアが渡されました。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-452">An invalid surrogate character pair was passed.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="WriteWhitespace">
      <MemberSignature Language="C#" Value="public override void WriteWhitespace (string ws);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteWhitespace(string ws) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteWhitespace (ws As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteWhitespace(System::String ^ ws);" />
      <MemberSignature Language="F#" Value="override this.WriteWhitespace : string -&gt; unit" Usage="xmlTextWriter.WriteWhitespace ws" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ws" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ws">
          <span data-ttu-id="eaaa2-453">空白文字の文字列。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-453">The string of white space characters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="eaaa2-454">指定した空白を書き込みます。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-454">Writes out the given white space.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-455">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-455">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-456">このメソッドは、ドキュメントを手動で書式設定に使用されます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-456">This method is used to manually format your document.</span></span> <span data-ttu-id="eaaa2-457">使用して、<xref:System.Xml.XmlTextWriter.Formatting%2A>プロパティに、ライターの出力形式を自動的に設定します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-457">Use the <xref:System.Xml.XmlTextWriter.Formatting%2A> property to have the writer format the output automatically.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-458">次の例では、`WriteWhitespace`ファイルの書式設定方法を制御するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-458">The following example uses the `WriteWhitespace` method to control how the file is formatted.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="eaaa2-459">文字列に空白以外の文字が含まれています。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-459">The string contains non-white space characters.</span>
          </span>
        </exception>
        <altmember cref="P:System.Xml.XmlTextWriter.Formatting" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlTextWriter.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-460">現在の <see langword="xml:lang" /> スコープを取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-460">Gets the current <see langword="xml:lang" /> scope.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-461">現在の <see langword="xml:lang" />。または現在のスコープ内に <see langword="null" /> がない場合は <see langword="xml:lang" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-461">The current <see langword="xml:lang" /> or <see langword="null" /> if there is no <see langword="xml:lang" /> in the current scope.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-462">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-462">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-463">このプロパティは、別のコンポーネントが設定したライターの状態を確認する 1 つのコンポーネントを使用します。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-463">This property allows one component to find out what state another component has left the writer in.</span></span> <span data-ttu-id="eaaa2-464">たとえば、おそらく 1 つのコンポーネントがオブジェクトに指定別のヘルプ テキストを生成する言語。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-464">For example, perhaps one component wants to tell another which language help text to generate.</span></span> <span data-ttu-id="eaaa2-465">言語情報が記述することで伝え、`xml:lang`属性。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-465">The language information is communicated by writing an `xml:lang` attribute.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlTextWriter.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlTextWriter.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="eaaa2-466">現在の <see langword="xml:space" /> スコープを表す <see cref="T:System.Xml.XmlSpace" /> を取得します。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-466">Gets an <see cref="T:System.Xml.XmlSpace" /> representing the current <see langword="xml:space" /> scope.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="eaaa2-467">現在の <see langword="XmlSpace" /> スコープを表す <see langword="xml:space" />。</span>
          <span class="sxs-lookup">
            <span data-stu-id="eaaa2-467">An <see langword="XmlSpace" /> representing the current <see langword="xml:space" /> scope.</span>
          </span>
          <list type="table">
            <listheader>
              <term>
                <span data-ttu-id="eaaa2-468">[値]</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-468">Value</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="eaaa2-469">説明</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-469">Meaning</span>
                </span>
              </description>
            </listheader>
            <item>
              <term>
                <span data-ttu-id="eaaa2-470">なし</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-470">None</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="eaaa2-471">
                  <see langword="xml:space" /> スコープが存在しない場合は、これが既定値になります。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-471">This is the default if no <see langword="xml:space" /> scope exists.</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="eaaa2-472">既定値</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-472">Default</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="eaaa2-473">現在のスコープは、<see langword="xml:space" />="default" です。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-473">The current scope is <see langword="xml:space" />="default".</span>
                </span>
              </description>
            </item>
            <item>
              <term>
                <span data-ttu-id="eaaa2-474">Preserve</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-474">Preserve</span>
                </span>
              </term>
              <description>
                <span data-ttu-id="eaaa2-475">現在のスコープは、<see langword="xml:space" />="preserve" です。</span>
                <span class="sxs-lookup">
                  <span data-stu-id="eaaa2-475">The current scope is <see langword="xml:space" />="preserve".</span>
                </span>
              </description>
            </item>
          </list>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="eaaa2-476">作成することお勧め以降、.NET Framework 2.0 では、<xref:System.Xml.XmlWriter>インスタンスを使用して、<xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType>メソッドと<xref:System.Xml.XmlWriterSettings>クラスの新しい機能を活用するためにします。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-476">Starting with the .NET Framework 2.0, we recommend that you create <xref:System.Xml.XmlWriter> instances by using the <xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType> method and the <xref:System.Xml.XmlWriterSettings> class to take advantage of new functionality.</span></span>  
  
 <span data-ttu-id="eaaa2-477">このプロパティは、1 つのコンポーネントで、もう 1 つのコンポーネントがライターの状態を確認できます。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-477">This property allows one component to find out in what state another component has left the writer.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="eaaa2-478">次の例では、`WriteWhitespace`ファイルの書式設定方法を制御するメソッド。</span><span class="sxs-lookup"><span data-stu-id="eaaa2-478">The following example uses the `WriteWhitespace` method to control how the file is formatted.</span></span>  
  
 [!code-cpp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlTextWriter.XmlSpace Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlTextWriter.XmlSpace Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>