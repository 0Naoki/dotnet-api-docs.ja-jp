<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="XmlTextWriter.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-b857fe3" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">2eccf4de-4b1c-4706-8cb3-f46682ccfb725e069a59896777c40f8f8def9c7e997570500cb1.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">5e069a59896777c40f8f8def9c7e997570500cb1</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b15b8cf0f6dbc1504057c88969d9ef4b790891fe</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/11/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Represents a writer that provides a fast, non-cached, forward-only way of generating streams or files containing XML data that conforms to the W3C Extensible Markup Language (XML) 1.0 and the Namespaces in XML recommendations.</source>
          <target state="translated">W3C 勧告『Extensible Markup Language (XML) 1.0』および勧告『Namespaces in XML』に準拠する XML データを格納するストリームまたはファイルを高速に、非キャッシュで、前方向に生成する方法を提供するライターを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you use the <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> class instead.</source>
          <target state="translated">.NET Framework 2.0 以降では、代わりに <ph id="ph1">&lt;see cref="T:System.Xml.XmlWriter" /&gt;</ph> クラスを使用することをお勧めします。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This class implements the <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> class.</source>
          <target state="translated">このクラスは、実装、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> maintains a namespace stack corresponding to all the namespaces defined in the current element stack.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 現在の要素のスタックで定義されているすべての名前空間に対応する名前空間スタックを保持します。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Using <ph id="ph1">`XmlTextWriter`</ph> you can declare namespaces manually.</source>
          <target state="translated">使用して<ph id="ph1">`XmlTextWriter`</ph>手動で名前空間を宣言することができます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The above C# code produces the following output.</source>
          <target state="translated">上記の c# コードには、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> promotes the namespace declaration to the root element to avoid having it duplicated on the two child elements.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> ルート要素を 2 つの子要素上で重複させることを回避するには名前空間宣言を昇格させます。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The child elements pick up the prefix from the namespace declaration.</source>
          <target state="translated">子要素は、名前空間の宣言からプレフィックスを取得します。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> also allows you to override the current namespace declaration.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 現在の名前空間宣言をオーバーライドできます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, the namespace URI "123" is overridden by "abc" to produce the XML element <ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>.</source>
          <target state="translated">次の例では、名前空間 URI「123」は XML 要素を生成するには、"abc"によってオーバーライド<ph id="ph1">`&lt;x:node xmlns:x="abc"/&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>By using the write methods that take a prefix as an argument you can also specify which prefix to use.</source>
          <target state="translated">引数としてのプレフィックスを取得する書き込みメソッドを使用して、使用するプリフィックスも指定できます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the following example, two different prefixes are mapped to the same namespace URI to produce the XML text <ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>.</source>
          <target state="translated">次の例では、2 つの異なるプレフィックスが同じ名前空間、XML テキストを生成するために URI にマップされます<ph id="ph1">`&lt;x:root xmlns:x="urn:1"&gt;&lt;y:item xmlns:y="urn:1"/&gt;&lt;/x:root&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If there are multiple namespace declarations mapping different prefixes to the same namespace URI, <ph id="ph1">`XmlTextWriter`</ph> walks the stack of namespace declarations backwards and picks the closest one.</source>
          <target state="translated">複数の名前空間宣言が同じ名前空間 URI、別のプレフィックスのマッピングがある場合<ph id="ph1">`XmlTextWriter`</ph>旧バージョンと名前空間の宣言のスタックを走査し、最も近いものを選択します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>In the above C# example, because the <ph id="ph1">`WriteAttributeString`</ph> call does not specify a prefix, the writer uses the last prefix pushed onto the namespace stack, and produces the following XML:</source>
          <target state="translated">上記の C# コード例で、ため、<ph id="ph1">`WriteAttributeString`</ph>呼び出しで、プレフィックスが指定されていない、ライターを名前空間スタックにプッシュされた最後のプレフィックスを使用して、次の XML が生成されます。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If namespace conflicts occur, <ph id="ph1">`XmlTextWriter`</ph> resolves them by generating alternate prefixes.</source>
          <target state="translated">名前空間の競合が発生した場合<ph id="ph1">`XmlTextWriter`</ph>に代替プレフィックスを生成することによって解決されます。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, if an attribute and element have the same prefix but different namespaces, <ph id="ph1">`XmlWriter`</ph> generates an alternate prefix for the attribute.</source>
          <target state="translated">たとえば、属性と要素がある場合、同じプレフィックスが異なる名前空間、<ph id="ph1">`XmlWriter`</ph>属性の代替のプレフィックスが生成されます。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The generated prefixes are named <ph id="ph1">`n{i}`</ph> where <ph id="ph2">`i`</ph> is a number beginning at 1.</source>
          <target state="translated">生成されたプレフィックスの名前は<ph id="ph1">`n{i}`</ph>場所<ph id="ph2">`i`</ph>は 1 にします。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The number is reset to 1 for each element.</source>
          <target state="translated">数は、要素ごとに 1 にリセットされます。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Attributes which are associated with a namespace URI must have a prefix (default namespaces do not apply to attributes).</source>
          <target state="translated">名前空間 URI に関連付けられた属性には、プレフィックス (既定値は名前空間は、属性には適用されません) が必要です。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This conforms to section 5.2 of the W3C Namespaces in XML recommendation.</source>
          <target state="translated">これは、XML の推奨設定では、W3C 名前空間のセクション 5.2 に準拠しています。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If an attribute references a namespace URI, but does not specify a prefix, the writer generates a prefix for the attribute.</source>
          <target state="translated">属性は名前空間 URI を参照しますが、プレフィックスが指定されていません、ライターは、属性のプレフィックスを生成します。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When writing an empty element, an additional space is added between tag name and the closing tag, for example <ph id="ph1">`&lt;item /&gt;`</ph>.</source>
          <target state="translated">空の要素を記述する場合、追加の領域が追加タグ名と、終了タグ間たとえば<ph id="ph1">`&lt;item /&gt;`</ph>します。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>This provides compatibility with older browsers.</source>
          <target state="translated">これは、古いブラウザーとの互換性を提供します。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When a <ph id="ph1">`String`</ph> is used as method parameter, <ph id="ph2">`null`</ph> and <ph id="ph3">`String.Empty`</ph> are equivalent.</source>
          <target state="translated">ときに、<ph id="ph1">`String`</ph>メソッド パラメーターとして使用される<ph id="ph2">`null`</ph>と<ph id="ph3">`String.Empty`</ph>は同等です。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`String.Empty`</ph> follows the W3C rules.</source>
          <target state="translated"><ph id="ph1">`String.Empty`</ph> W3C の規則に従います。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>To write strongly typed data, use the <ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph> class to convert data types to string.</source>
          <target state="translated">厳密に型指定されたデータを書き込むには、使用、<ph id="ph1">&lt;xref:System.Xml.XmlConvert&gt;</ph>クラスのデータ型を文字列に変換します。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>For example, the following C# code converts the data from <ph id="ph1">`Double`</ph> to <ph id="ph2">`String`</ph> and writes the element <ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>.</source>
          <target state="translated">たとえば、次の c# コードはからデータを変換します。<ph id="ph1">`Double`</ph>に<ph id="ph2">`String`</ph>要素を書き込み、<ph id="ph3">`&lt;price&gt;19.95&lt;/price&gt;`</ph>です。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source><ph id="ph1">`XmlTextWriter`</ph> does not check for the following:</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph> 次をチェックしません。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Invalid characters in attribute and element names.</source>
          <target state="translated">属性と要素の名前に無効な文字です。</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Unicode characters that do not fit the specified encoding.</source>
          <target state="translated">指定したエンコーディングが収まらない Unicode 文字。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the Unicode characters do not fit the specified encoding, the <ph id="ph1">`XmlTextWriter`</ph> does not escape the Unicode characters into character entities.</source>
          <target state="translated">Unicode 文字に指定したエンコーディングが収まらない場合、<ph id="ph1">`XmlTextWriter`</ph>文字エン ティティに Unicode 文字をエスケープしません。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Duplicate attributes.</source>
          <target state="translated">重複する属性。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Characters in the DOCTYPE public identifier or system identifier.</source>
          <target state="translated">DOCTYPE パブリック識別子またはシステム識別子の文字。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Security Considerations</source>
          <target state="translated">セキュリティの考慮事項</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The following items are things to consider when working with the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> class.</source>
          <target state="translated">次の項目が使用するときに考慮すべき、<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Exceptions thrown by the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> can disclose path information that you do not want bubbled up to the application.</source>
          <target state="translated">によってスローされた例外、<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>たくないパス情報に送られ、アプリケーションを公開することができます。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Your applications must catch exceptions and process them appropriately.</source>
          <target state="translated">アプリケーションは例外をキャッチし、それらを適切に処理する必要があります。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>When you pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to another application the underlying stream is exposed to that application.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> を別のアプリケーションに渡すと、下位のストリームがそのアプリケーションに公開されます。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If you need to pass the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> to a semi-trusted application, you should use an <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> object created by the <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> method instead.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> を信頼度の低いアプリケーションに渡す必要がある場合は、代わりに <ph id="ph2">&lt;xref:System.Xml.XmlWriter&gt;</ph> メソッドによって作成される <ph id="ph3">&lt;xref:System.Xml.XmlWriter.Create%2A&gt;</ph> オブジェクトを使用する必要があります。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> methods.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>に渡されるすべてのデータを検証しません、<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph>または<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>You should not pass arbitrary data to these methods.</source>
          <target state="translated">これらのメソッドを任意のデータを渡さないでください。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>If the default settings are changed, there is no guarantee that the generated output is well-formed XML data.</source>
          <target state="translated">既定の設定を変更する場合、生成された出力が整形式 XML データである保証はありません。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Do not accept supporting components, such as an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object, from an untrusted source.</source>
          <target state="translated">など、サポートするコンポーネントは受け入れない、<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>信頼できないソースからのオブジェクト。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> クラスのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>The <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> to write to.</source>
          <target state="translated">書き込み先の <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>It is assumed that the <ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> is already set to the correct encoding.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="TextWriter" /&gt;</ph> が既に正しいエンコーディングに設定されていることを前提にしています。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph>.</source>
          <target state="translated">指定した <ph id="ph2">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> を使用して <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> クラスのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.TextWriter)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The stream to which you want to write.</source>
          <target state="translated">書き込み先のストリーム。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">生成するエンコーディング。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes out the stream as UTF-8 and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">エンコーディングが <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、ストリームを UTF-8 として書き込み、<ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph> からエンコーディング属性を省略します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> class using the specified stream and encoding.</source>
          <target state="translated">指定したストリームおよびエンコーディングを使用して、<ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> クラスのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source>The encoding is not supported or the stream cannot be written to.</source>
          <target state="translated">エンコーディングがサポートされていないか、ストリームに書き込むことができません。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.IO.Stream,System.Text.Encoding)">
          <source><ph id="ph1">&lt;paramref name="w" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="w" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename to write to.</source>
          <target state="translated">書き込むファイル名。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If the file exists, it truncates it and overwrites it with the new content.</source>
          <target state="translated">ファイルが存在する場合は、ファイルを切り詰め、新しい内容で上書きします。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding to generate.</source>
          <target state="translated">生成するエンコーディング。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>If encoding is <ph id="ph1">&lt;see langword="null" /&gt;</ph> it writes the file out as UTF-8, and omits the encoding attribute from the <ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph>.</source>
          <target state="translated">エンコーディングが <ph id="ph1">&lt;see langword="null" /&gt;</ph> の場合は、ファイルを UTF-8 として書き込み、<ph id="ph2">&lt;see langword="ProcessingInstruction" /&gt;</ph> からエンコーディング属性を省略します。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Creates an instance of the <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> class using the specified file.</source>
          <target state="translated">指定したファイルを使用して <ph id="ph1">&lt;see cref="T:System.Xml.XmlTextWriter" /&gt;</ph> クラスのインスタンスを作成します。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The encoding is not supported; the filename is empty, contains only white space, or contains one or more invalid characters.</source>
          <target state="translated">エンコーディングがサポートされていません。ファイル名が空で、空白しか含んでいないか、無効な文字を 1 つ以上含んでいます。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>Access is denied.</source>
          <target state="translated">アクセスが拒否されました。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">ファイル名が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The directory to write to is not found.</source>
          <target state="translated">書き込むディレクトリが見つかりません。</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The filename includes an incorrect or invalid syntax for file name, directory name, or volume label syntax.</source>
          <target state="translated">ファイル名には、ファイル名、ディレクトリ名、またはボリューム ラベルの不正な構文または無効な構文が含まれています。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.#ctor(System.String,System.Text.Encoding)">
          <source>The caller does not have the required permission.</source>
          <target state="translated">呼び出し元に、必要なアクセス許可がありません。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Gets the underlying stream object.</source>
          <target state="translated">基になるストリーム オブジェクトを取得します。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>The stream to which the <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> is writing or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if the <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph> was constructed using a <ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> that does not inherit from the <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> の書き込み先のストリーム。<ph id="ph4">&lt;see cref="T:System.IO.TextWriter" /&gt;</ph> クラスから継承されない <ph id="ph5">&lt;see cref="T:System.IO.StreamWriter" /&gt;</ph> を使用して <ph id="ph2">&lt;see langword="null" /&gt;</ph> が構築された場合は <ph id="ph3">&lt;see langword="XmlTextWriter" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">`TextWriter`</ph> that is derived from the <ph id="ph2">`StreamWriter`</ph> class, this property is equivalent to the <ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph> property.</source>
          <target state="translated">使用して、ライターを構築した場合、<ph id="ph1">`TextWriter`</ph>から派生する、<ph id="ph2">`StreamWriter`</ph>クラスでは、このプロパティは等価、<ph id="ph3">&lt;xref:System.IO.StreamWriter.BaseStream%2A?displayProperty=nameWithType&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>, this property returns the <ph id="ph2">`Stream`</ph> passed to the constructor.</source>
          <target state="translated">使用して、ライターを構築した場合、 <ph id="ph1">&lt;xref:System.IO.Stream&gt;</ph>、このプロパティを返します、<ph id="ph2">`Stream`</ph>コンス トラクターに渡されます。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.BaseStream">
          <source>If the writer was constructed using a file name, this property returns the <ph id="ph1">`Stream`</ph> representing the file.</source>
          <target state="translated">かどうか、ファイル名を使用して、ライターが構築された、このプロパティを返します、<ph id="ph1">`Stream`</ph>ファイルを表すです。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Closes this stream and the underlying stream.</source>
          <target state="translated">このストリームおよび基になるストリームを閉じます。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>Any elements or attributes left open are automatically closed.</source>
          <target state="translated">すべての要素や属性が開いたままになり自動的に閉じられます。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>This method does not throw any exceptions.</source>
          <target state="translated">このメソッドは、任意の例外をスローしません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Close">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">次の例では、XML フラグメントを書き込みます。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Flushes whatever is in the buffer to the underlying streams and also flushes the underlying stream.</source>
          <target state="translated">バッファー内のデータをすべて基になるストリームにフラッシュし、基になるストリームもフラッシュします。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>This is called instead of <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph> when you want to write more to the underlying stream without losing what is still in the buffer.</source>
          <target state="translated">代わりにこれと呼びます<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Close%2A&gt;</ph>バッファーでは新機能を失うことがなく、基になるストリームに書き込みを行う場合します。</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.Flush">
          <source>The following example writes out two XML fragments.</source>
          <target state="translated">次の例は、2 つの XML フラグメントを書き込みます。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Indicates how the output is formatted.</source>
          <target state="translated">出力の書式設定方法を示します。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.Formatting" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The default is <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph> (no special formatting).</source>
          <target state="translated">既定値は <ph id="ph1">&lt;see langword="Formatting.None" /&gt;</ph> (特定の書式設定なし) です。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>If the <ph id="ph1">`Indented`</ph> option is set, child elements are indented using the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph> and <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph> properties.</source>
          <target state="translated">場合、<ph id="ph1">`Indented`</ph>オプションの設定と、子要素を使用してインデント、<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.Indentation%2A&gt;</ph>と<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.IndentChar%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Only element content is indented.</source>
          <target state="translated">要素の内容だけがインデントされます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following C# code writes out HTML elements including mixed content:</source>
          <target state="translated">次の c# コードは、混合コンテンツを含む、HTML 要素を書き込みます。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The above code produces the following output:</source>
          <target state="translated">上記のコードには、次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>When this is viewed in HTML no white space appears between the bold and italic elements.</source>
          <target state="translated">これを html 形式で表示するとき、太字や斜体の要素間の空白文字は表示されません。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>In fact, in this example, if indenting was added between these elements the word "Elephant" would be incorrectly broken.</source>
          <target state="translated">実際には、この例ではインデントがこれらの要素間に追加された場合「象」という単語が壊れますが正しくないです。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Writing any text content, excluding <ph id="ph1">`String.Empty`</ph> puts that element into mixed content mode.</source>
          <target state="translated">コンテンツを除く任意のテキストを書き込む<ph id="ph1">`String.Empty`</ph>混合コンテンツ モードにその要素を格納します。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Child elements do not inherit this "mixed" mode status.</source>
          <target state="translated">子要素は、この「混合」モードの状態を継承しません。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>A child element of a "mixed" element does indenting, unless it is also contains "mixed" content.</source>
          <target state="translated">「混合」要素の子要素、インデント幅がある場合を除き、「混合」コンテンツも含まれます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>Element content (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph> and mixed content (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph> are defined according to the XML 1.0 definitions of these terms.</source>
          <target state="translated">要素のコンテンツ (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#sec-element-content)</ph>混在したコンテンツと (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#sec-mixed-content)</ph>これらの用語の XML 1.0 の定義に従って定義されます。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Formatting">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">次の例では、XML フラグメントを書き込みます。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Gets or sets how many IndentChars to write for each level in the hierarchy when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> を <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph> に設定するときに、階層構造のレベルごとに書き込む IndentChar の数を取得または設定します。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Number of <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> for each level.</source>
          <target state="translated">各レベルの <ph id="ph1">&lt;see langword="IndentChars" /&gt;</ph> の数。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The default is 2.</source>
          <target state="translated">既定値は 2 です。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Indentation is performed on following node types: <ph id="ph1">`DocumentType`</ph>, <ph id="ph2">`Element`</ph>, <ph id="ph3">`Comment`</ph>, <ph id="ph4">`ProcessingInstruction`</ph>, and <ph id="ph5">`CDATASection`</ph>.</source>
          <target state="translated">次の種類のノードに対してインデントが実行: <ph id="ph1">`DocumentType`</ph>、 <ph id="ph2">`Element`</ph>、 <ph id="ph3">`Comment`</ph>、 <ph id="ph4">`ProcessingInstruction`</ph>、および<ph id="ph5">`CDATASection`</ph>です。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>All other node types are not affected.</source>
          <target state="translated">その他のすべてのノード型は影響しません。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The <ph id="ph1">`XmlTextWriter`</ph> does not indent the internal DTD subset.</source>
          <target state="translated"><ph id="ph1">`XmlTextWriter`</ph>内部 DTD サブセットをインデントされません。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>However, you could do the following to apply formatting to the internal DTD subset.</source>
          <target state="translated">ただし、内部 DTD サブセットに書式を適用するには、次を行う可能性があります。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">次の例では、XML フラグメントを書き込みます。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Indentation">
          <source>Setting this property to a negative value.</source>
          <target state="translated">このプロパティを負の値に設定。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Gets or sets which character to use for indenting when <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> is set to <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.Formatting" /&gt;</ph> を <ph id="ph2">&lt;see langword="Formatting.Indented" /&gt;</ph> に設定するときに、インデントに使用する文字を取得または設定します。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The character to use for indenting.</source>
          <target state="translated">インデントに使用する文字。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The default is space.</source>
          <target state="translated">既定値は空白です。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>The <ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> allows you to set this property to any character.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="XmlTextWriter" /&gt;</ph> を使用すると、このプロパティを任意の文字に設定できます。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>To ensure valid XML, you must specify a valid white space character, 0x9, 0x10, 0x13 or 0x20.</source>
          <target state="translated">有効な XML を確認するには、有効な空白文字、0x9、0x10、0x13、または 0x20 を指定する必要があります。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.IndentChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Namespace URI whose prefix you want to find.</source>
          <target state="translated">検索する対象となるプリフィックスを持つ名前空間 URI。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Returns the closest prefix defined in the current namespace scope for the namespace URI.</source>
          <target state="translated">名前空間 URI の現在の名前空間スコープで定義されたものに最も近いプリフィックスを返します。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The matching prefix.</source>
          <target state="translated">一致するプリフィックス。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Or <ph id="ph1">&lt;see langword="null" /&gt;</ph> if no matching namespace URI is found in the current scope.</source>
          <target state="translated">一致する名前空間 URI が現在のスコープで見つからない場合は <ph id="ph1">&lt;see langword="null" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">次の例は、ブックを書き込みます。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.LookupPrefix(System.String)">
          <source><ph id="ph1">&lt;paramref name="ns" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="ns" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Gets or sets a value indicating whether to do namespace support.</source>
          <target state="translated">名前空間をサポートするかどうかを示す値を取得または設定します。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to support namespaces; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">名前空間をサポートする場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>The default is <ph id="ph1">&lt;see langword="true" /&gt;</ph>.</source>
          <target state="translated">既定値は、<ph id="ph1">&lt;see langword="true" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>This property determines whether the writer supports the W3C Namespaces in XML recommendation located at www.w3.org/TR/REC-xml-names.</source>
          <target state="translated">このプロパティは、ライターが www.w3.org/TR/REC-xml-names にある XML の推奨設定での W3C 名前空間をサポートしているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.Namespaces">
          <source>You can only change this property when in the <ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> state.</source>
          <target state="translated">このプロパティを変更できるのは、<ph id="ph1">&lt;see langword="WriteState.Start" /&gt;</ph> 状態のときだけです。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Gets or sets which character to use to quote attribute values.</source>
          <target state="translated">属性値を囲む引用符に使用する文字を取得または設定します。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The character to use to quote attribute values.</source>
          <target state="translated">属性値を囲む引用符に使用する文字。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>This must be a single quote (<ph id="ph1">&amp;amp;</ph>#39;) or a double quote (<ph id="ph2">&amp;amp;</ph>#34;).</source>
          <target state="translated">単一引用符でなければなりません (<ph id="ph1">&amp;amp;</ph>#39;) または二重引用符 (<ph id="ph2">&amp;amp;</ph>#34;)。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>The default is a double quote.</source>
          <target state="translated">既定値は二重引用符です。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.QuoteChar">
          <source>Setting this property to something other than either a single or double quote.</source>
          <target state="translated">このプロパティを単一引用符または二重引用符以外の値に設定。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">エンコードするバイト配列。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the bytes to write.</source>
          <target state="translated">書き込むバイトの開始を示すバッファー内の位置。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as base64 and writes out the resulting text.</source>
          <target state="translated">指定したバイナリ バイトを base64 としてエンコードし、その結果生成されるテキストを書き込みます。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The following example encodes an input file using <ph id="ph1">`WriteBase64`</ph> and generates a temporary XML file.</source>
          <target state="translated">次の例では、入力ファイルを使用して、できるようにエンコード<ph id="ph1">`WriteBase64`</ph>一時 XML ファイルを生成します。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The temporary XML file is decoded using the <ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph> method and compared to the original file.</source>
          <target state="translated">使用して、一時 XML ファイルをデコード、<ph id="ph1">&lt;xref:System.Xml.XmlTextReader.ReadBase64%2A&gt;</ph>メソッドと、元のファイルを比較します。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">バッファーの長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBase64(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> が <ph id="ph2">&lt;see langword="Closed" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Byte array to encode.</source>
          <target state="translated">エンコードするバイト配列。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the bytes to write.</source>
          <target state="translated">書き込むバイトの開始を示すバッファー内の位置。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The number of bytes to write.</source>
          <target state="translated">書き込むバイト数。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Encodes the specified binary bytes as binhex and writes out the resulting text.</source>
          <target state="translated">指定したバイナリ バイトを binhex としてエンコードし、その結果生成されるテキストを書き込みます。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">バッファーの長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteBinHex(System.Byte[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Text to place inside the CDATA block.</source>
          <target state="translated">CDATA ブロック内に配置するテキスト。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Writes out a <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> block containing the specified text.</source>
          <target state="translated">指定したテキストを格納する <ph id="ph1">&amp;lt;</ph>![CDATA[...]]<ph id="ph2">&amp;gt;</ph> ブロックを書き込みます。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes an empty CDATA block, for example <ph id="ph4">\&lt;</ph>![CDATA[]]]&gt;&lt;![CDATA[]&gt;.</source>
          <target state="translated">場合<ph id="ph1">`text`</ph>か<ph id="ph2">`null`</ph>または<ph id="ph3">`String.Empty`</ph>、このメソッドは空の CDATA ブロック、たとえば書き込みます<ph id="ph4">\&lt;</ph>! [CDATA []] &gt;&lt;![Cdata[] &gt;。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">テキストは、非整形式の XML ドキュメントになります。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCData(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> が <ph id="ph2">&lt;see langword="Closed" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Unicode character for which to generate a character entity.</source>
          <target state="translated">文字エンティティを生成する対象の Unicode 文字。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Forces the generation of a character entity for the specified Unicode character value.</source>
          <target state="translated">指定した Unicode 文字値の文字エンティティを強制的に生成します。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>This method writes the Unicode character in hexadecimal character entity reference format.</source>
          <target state="translated">このメソッドは、16 進数の文字エンティティ参照形式で指定した Unicode 文字を書き込みます。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The following example uses the <ph id="ph1">`WriteCharEntity`</ph> method to write an email address.</source>
          <target state="translated">次の例では、<ph id="ph1">`WriteCharEntity`</ph>電子メール アドレスを書き込みます。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The character is in the surrogate pair character range, <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph>; or the text would result in a non-well formed XML document.</source>
          <target state="translated">文字がサロゲート ペアの文字範囲、つまり <ph id="ph1">&lt;see langword="0xd800" /&gt;</ph><ph id="ph2"> - </ph><ph id="ph3">&lt;see langword="0xdfff" /&gt;</ph>内にあります。これ以外の場合、テキストは非整形式の XML ドキュメントになります。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteCharEntity(System.Char)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> が <ph id="ph2">&lt;see langword="Closed" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">書き込むテキストを格納している文字配列。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The position in the buffer indicating the start of the text to write.</source>
          <target state="translated">書き込むテキストの開始を示すバッファー内の位置。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">書き込む文字数。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Writes text one buffer at a time.</source>
          <target state="translated">一度に 1 つのバッファーにテキストを書き込みます。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>This method can be used to write large amounts of text one buffer at a time.</source>
          <target state="translated">このメソッドは、一度に大量の 1 つのテキスト バッファーを書き込むを使用できます。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>Special handling must be done to ensure the <ph id="ph1">`WriteChars`</ph> method does not split surrogate pair characters across multiple buffer writes.</source>
          <target state="translated">特別な処理を行うことを確認する必要があります、<ph id="ph1">`WriteChars`</ph>メソッドはサロゲート ペア文字バッファーの書き込みを複数に分割されません。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The XML specification defines the valid ranges for surrogate pairs.</source>
          <target state="translated">XML 仕様では、サロゲート ペアの有効な範囲を定義します。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>An exception is thrown if surrogate pair characters are written that would result in the surrogate pair characters being split in the buffer.</source>
          <target state="translated">により、バッファー内で分割されたサロゲート ペア文字のサロゲート ペア文字が記述されている場合は、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>; the call results in surrogate pair characters being split or an invalid surrogate pair being written.</source>
          <target state="translated">バッファー長から <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を差し引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。この呼び出しにより、サロゲート ペア文字が分割されるか、無効なサロゲート ペアが書き込まれます。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteChars(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is Closed.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> が閉じています。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Text to place inside the comment.</source>
          <target state="translated">コメント内に配置するテキスト。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Writes out a comment <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph> containing the specified text.</source>
          <target state="translated">指定したテキストを格納するコメント <ph id="ph1">&amp;lt;</ph>!--...--<ph id="ph2">&amp;gt;</ph> を書き込みます。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`Comment`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>!----&gt;.</source>
          <target state="translated">場合<ph id="ph1">`text`</ph>か<ph id="ph2">`null`</ph>または<ph id="ph3">`String.Empty`</ph>、このメソッドは書き込みます、<ph id="ph4">`Comment`</ph>コンテンツ例については、データのない<ph id="ph5">\&lt;</ph>!---&gt;。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The text would result in a non-well formed XML document</source>
          <target state="translated">テキストは、非整形式の XML ドキュメントになります。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteComment(System.String)">
          <source>The <ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> is <ph id="ph2">&lt;see langword="Closed" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="P:System.Xml.XmlTextWriter.WriteState" /&gt;</ph> が <ph id="ph2">&lt;see langword="Closed" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The name of the DOCTYPE.</source>
          <target state="translated">DOCTYPE の名前。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This must be non-empty.</source>
          <target state="translated">これを空にすることはできません。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it also writes PUBLIC "pubid" "sysid" where <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> are replaced with the value of the given arguments.</source>
          <target state="translated">null でない場合は、PUBLIC "pubid" "sysid" も書き込みます。<bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> と <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> は、指定した引数の値に置き換えられます。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If <bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> is null and <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> is non-null it writes SYSTEM "sysid" where <bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept> is replaced with the value of this argument.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>pubid<ept id="p1">&lt;/c&gt;</ept> が null で <bpt id="p2">&lt;c&gt;</bpt>sysid<ept id="p2">&lt;/c&gt;</ept> が null でない場合は、SYSTEM "sysid" を書き込みます。<bpt id="p3">&lt;c&gt;</bpt>sysid<ept id="p3">&lt;/c&gt;</ept> は、この引数の値に置き換えられます。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>If non-null it writes [subset] where subset is replaced with the value of this argument.</source>
          <target state="translated">null でない場合は、[subset] を書き込みます。subset は、この引数の値に置き換えられます。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Writes the DOCTYPE declaration with the specified name and optional attributes.</source>
          <target state="translated">名前とオプション属性を指定して、DOCTYPE 宣言を書き込みます。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method does not check for invalid characters in <ph id="ph1">`pubid`</ph>, <ph id="ph2">`sysid`</ph> or <ph id="ph3">`subset`</ph>.</source>
          <target state="translated">このメソッドに無効な文字をチェックしません<ph id="ph1">`pubid`</ph>、<ph id="ph2">`sysid`</ph>または<ph id="ph3">`subset`</ph>です。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>It also does not check that the internal subset is well-formed.</source>
          <target state="translated">または確認しません内部サブセットが整形式であります。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>に渡されるすべてのデータを検証しません、<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteDocType%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">このメソッドに、任意のデータを渡さないでください。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>This method was called outside the prolog (after the root element).</source>
          <target state="translated">このメソッドが、プロローグの外 (ルート要素の後) で呼び出されました。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteDocType(System.String,System.String,System.String,System.String)">
          <source>the value for <ph id="ph1">&lt;paramref name="name" /&gt;</ph> would result in invalid XML.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> の値が、無効な XML になることがあります。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Closes the previous <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> call.</source>
          <target state="translated">前の <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)" /&gt;</ph> 呼び出しを閉じます。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>If you call <ph id="ph1">`WriteStartAttribute`</ph>, you can close the attribute with this method.</source>
          <target state="translated">呼び出す場合<ph id="ph1">`WriteStartAttribute`</ph>、このメソッドを使用して、属性を閉じることができます。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>You can also close the attribute by calling <ph id="ph1">`WriteStartAttribute`</ph> again, calling <ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>, or calling <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>.</source>
          <target state="translated">呼び出して属性を終了することもできます<ph id="ph1">`WriteStartAttribute`</ph>、もう一度呼び出して<ph id="ph2">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>、または呼び出し<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndAttribute">
          <source>The following example writes out a book.</source>
          <target state="translated">次の例は、ブックを書き込みます。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Closes any open elements or attributes and puts the writer back in the Start state.</source>
          <target state="translated">開いている要素または属性を閉じ、ライターを Start 状態に戻します。</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndDocument">
          <source>The XML document is invalid.</source>
          <target state="translated">XML ドキュメントが無効です。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">1 つの要素を閉じ、対応する名前空間スコープをポップします。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>If the element contains no content a short end tag "/&gt;" is written; otherwise a full end tag is written.</source>
          <target state="translated">要素にコンテンツが含まれていない場合は、短い終了タグ"/&gt;"が書き込まれます。それ以外の場合、完全な終了タグが書き込まれます。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEndElement">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Name of the entity reference.</source>
          <target state="translated">エンティティ参照の名前。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Writes out an entity reference as <ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="&amp;amp;name;" /&gt;</ph> のようにエンティティ参照を書き込みます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteEntityRef(System.String)">
          <source>The text would result in a non-well formed XML document or <ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated">テキストが非整形式の XML ドキュメントになるか、<ph id="ph1">&lt;paramref name="name" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Closes one element and pops the corresponding namespace scope.</source>
          <target state="translated">1 つの要素を閉じ、対応する名前空間スコープをポップします。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This method always writes the full end tag.</source>
          <target state="translated">このメソッドは、常に完全な終了タグを書き込みます。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>This is useful when dealing with elements that must include a full end tag.</source>
          <target state="translated">これは、機能は、完全な終了タグを含める必要のある要素を処理するときに便利です。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>For example, browsers expect HTML script blocks to be closed with "<ph id="ph1">\&lt;</ph>/script&gt;".</source>
          <target state="translated">たとえば、ブラウザーが HTML スクリプト ブロックを終了するを想定"<ph id="ph1">\&lt;</ph>/script &gt;"です。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>The following example writes out an element with no content.</source>
          <target state="translated">次の例は、コンテンツを持つ要素を書き込みます。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteFullEndElement">
          <source>It uses WriteFullEndElement to write the full end element tag.</source>
          <target state="translated">完全な終了要素タグを書き込む WriteFullEndElement を使用します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Name to write.</source>
          <target state="translated">書き込む名前。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Writes out the specified name, ensuring it is a valid name according to the W3C XML 1.0 recommendation (<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">指定した名前が W3C 勧告『XML 1.0』(<ph id="ph1">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>) に準拠した有効な名前であることを確認して、それを書き込みます。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source>If <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>, <ph id="ph3">`WriteName`</ph> also checks that the name is also valid according to the W3C Namespaces in XML recommendation.</source>
          <target state="translated">場合<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph>に設定されている<ph id="ph2">`true`</ph>、<ph id="ph3">`WriteName`</ph>また、XML の推奨設定では、W3C 名前空間に従って有効なも、名前を確認します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteName(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid XML name; or <ph id="ph2">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph3">&lt;see langword="null" /&gt;</ph> or <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が有効な XML 名ではありません。または、<ph id="ph2">&lt;paramref name="name" /&gt;</ph> が <ph id="ph3">&lt;see langword="null" /&gt;</ph> または <ph id="ph4">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Name to write.</source>
          <target state="translated">書き込む名前。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Writes out the specified name, ensuring it is a valid <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph> according to the W3C XML 1.0 recommendation (<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>.</source>
          <target state="translated">指定した名前が W3C 勧告『XML 1.0』(<ph id="ph2">http://www.w3.org/TR/1998/REC-xml-19980210#NT-Name)</ph>) に準拠した有効な <ph id="ph1">&lt;see langword="NmToken" /&gt;</ph> であることを確認して、それを書き込みます。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteNmToken(System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is not a valid <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph>; or <ph id="ph3">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph4">&lt;see langword="null" /&gt;</ph> or <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が有効な <ph id="ph2">&lt;see langword="NmToken" /&gt;</ph> ではありません。または、<ph id="ph3">&lt;paramref name="name" /&gt;</ph> が <ph id="ph4">&lt;see langword="null" /&gt;</ph> または <ph id="ph5">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Name of the processing instruction.</source>
          <target state="translated">処理命令の名前。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Text to include in the processing instruction.</source>
          <target state="translated">処理命令に含めるテキスト。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Writes out a processing instruction with a space between the name and text as follows: <ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>.</source>
          <target state="translated">名前とテキストの間にスペースがある処理命令を、次のように書き込みます: <ph id="ph1">&amp;lt;</ph>?name text?<ph id="ph2">&amp;gt;</ph>。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a <ph id="ph4">`ProcessingInstruction`</ph> with no data content, for example <ph id="ph5">\&lt;</ph>?name?&gt;.</source>
          <target state="translated">場合<ph id="ph1">`text`</ph>いずれかです<ph id="ph2">`null`</ph>または<ph id="ph3">`String.Empty`</ph>、このメソッドは書き込みます、<ph id="ph4">`ProcessingInstruction`</ph>コンテンツ例については、データのない<ph id="ph5">\&lt;</ph>? 名前しますか? &gt;。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>The text would result in a non-well formed XML document.</source>
          <target state="translated">テキストは、非整形式の XML ドキュメントになります。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="name" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="name" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteProcessingInstruction(System.String,System.String)">
          <source>This method is being used to create an XML declaration after <ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph> has already been called.</source>
          <target state="translated">このメソッドは、<ph id="ph1">&lt;see cref="M:System.Xml.XmlTextWriter.WriteStartDocument" /&gt;</ph> が呼び出された後に XML 宣言を作成するために使用されています。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The local name to write.</source>
          <target state="translated">書き込むローカル名。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The namespace URI to associate with the name.</source>
          <target state="translated">名前に関連付ける名前空間 URI。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Writes out the namespace-qualified name.</source>
          <target state="translated">名前空間の修飾名を書き込みます。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>This method looks up the prefix that is in scope for the given namespace.</source>
          <target state="translated">このメソッドは、指定した名前空間のスコープ内にあるプレフィックスを検索します。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>For example, the following Microsoft Visual C# code:</source>
          <target state="translated">たとえば、次の Microsoft Visual c# コード。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>Generates the following output:</source>
          <target state="translated">次の出力が生成されます。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If <ph id="ph1">`ns`</ph> maps to the current default namespace, no prefix is generated.</source>
          <target state="translated">場合<ph id="ph1">`ns`</ph>現在既定の名前空間、プレフィックスなしのマップを生成します。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing attribute values, this method generates a prefix if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">場合属性値を書き込むときにこのメソッドは、プレフィックスを生成<ph id="ph1">`ns`</ph>が見つかりません。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>When writing element content, it throws an exception if <ph id="ph1">`ns`</ph> is not found.</source>
          <target state="translated">要素の内容を記述する場合、例外がスロー<ph id="ph1">`ns`</ph>が見つかりません。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>If this writer supports namespaces (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph> is set to <ph id="ph2">`true`</ph>), this method also checks that the name is valid according to the W3C Namespaces in XML recommendation (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>.</source>
          <target state="translated">このライターは、名前空間をサポートしている場合 (<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Namespaces%2A&gt;</ph>に設定されている<ph id="ph2">`true`</ph>)、このメソッドも名が XML の推奨設定では、W3C 名前空間に従った有効なことを確認 (<ph id="ph3">http://www.w3.org/TR/REC-xml-names)</ph>です。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source>The following example writes out a portion of a XSD schema.</source>
          <target state="translated">次の例は、XSD スキーマの一部を書き込みます。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteQualifiedName(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is not a valid name according to the W3C Namespaces spec.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> が、W3C の名前空間の仕様に準拠した有効な名前ではありません。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes raw markup manually.</source>
          <target state="translated">手動で生のマークアップを書き込みます。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>String containing the text to write.</source>
          <target state="translated">書き込むテキストを格納している文字列。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Writes raw markup manually from a string.</source>
          <target state="translated">文字列から手動で生のマークアップを書き込みます。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>This method does not escape special characters.</source>
          <target state="translated">このメソッドは、特殊文字をエスケープしません。</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>に渡されるすべてのデータを検証しません、<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">このメソッドに、任意のデータを渡さないでください。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.String)">
          <source>The following example writes a string using the <ph id="ph1">`WriteRaw`</ph> method.</source>
          <target state="translated">次の例を使用して文字列を書き込みます、<ph id="ph1">`WriteRaw`</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Character array containing the text to write.</source>
          <target state="translated">書き込むテキストを格納している文字配列。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The position within the buffer indicating the start of the text to write.</source>
          <target state="translated">書き込むテキストの開始を示すバッファー内の位置。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The number of characters to write.</source>
          <target state="translated">書き込む文字数。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Writes raw markup manually from a character buffer.</source>
          <target state="translated">文字バッファーから手動で生のマークアップを書き込みます。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>This method does not escape special characters.</source>
          <target state="translated">このメソッドは、特殊文字をエスケープしません。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph> does not validate any data that is passed to the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Xml.XmlTextWriter&gt;</ph>に渡されるすべてのデータを検証しません、<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteRaw%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>You should not pass arbitrary data to this method.</source>
          <target state="translated">このメソッドに、任意のデータを渡さないでください。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="buffer" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> or <ph id="ph2">&lt;paramref name="count" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> または <ph id="ph2">&lt;paramref name="count" /&gt;</ph> が 0 未満です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>-or-</source>
          <target state="translated">- または -</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteRaw(System.Char[],System.Int32,System.Int32)">
          <source>The buffer length minus <ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph2">&lt;paramref name="count" /&gt;</ph>.</source>
          <target state="translated">バッファーの長さから <ph id="ph1">&lt;paramref name="index" /&gt;</ph> を引いた値が <ph id="ph2">&lt;paramref name="count" /&gt;</ph> 未満です。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> prefix of the attribute.</source>
          <target state="translated">属性の <ph id="ph1">&lt;see langword="Namespace" /&gt;</ph> プリフィックス。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="LocalName" /&gt;</ph> of the attribute.</source>
          <target state="translated">属性の <ph id="ph1">&lt;see langword="LocalName" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph> of the attribute</source>
          <target state="translated">属性の <ph id="ph1">&lt;see langword="NamespaceURI" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Writes the start of an attribute.</source>
          <target state="translated">属性の開始を書き込みます。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>This is a more advanced version of <ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph> that allows you to write an attribute value using multiple write methods, such as <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>.</source>
          <target state="translated">これより高度なバージョンの<ph id="ph1">&lt;xref:System.Xml.XmlWriter.WriteAttributeString%2A&gt;</ph>などの複数の書き込みメソッドを使用して属性値を記述することができます<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">次の例は、ブックを書き込みます。</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartAttribute(System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> is either <ph id="ph2">&lt;see langword="null" /&gt;</ph> or <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="localName" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> または <ph id="ph3">&lt;see langword="String.Empty" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="T:System.Xml.XmlTextWriter">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">バージョン "1.0" で XML 宣言を書き込みます。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.XmlTextWriter">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Writes the XML declaration with the version "1.0".</source>
          <target state="translated">バージョン "1.0" で XML 宣言を書き込みます。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">ドキュメントのエンコーディングのレベルについては、ライターの実装方法によって決まります。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">たとえば場合、<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>オブジェクトで指定、<ph id="ph2">`XmlTextWriter`</ph>コンス トラクター、encoding 属性の値を指定します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This method does not create a standalone attribute.</source>
          <target state="translated">このメソッドは、スタンドアロン属性を作成できません。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">ときに<ph id="ph1">`WriteStartDocument`</ph>が呼び出されたライターは、書き込み、何が整形式 XML ドキュメントであることを検証します。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">たとえば、XML 宣言は、最初のノードが 1 つとに 1 つだけのルート レベル要素が存在することを確認します。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">このメソッドが呼び出されない場合、ライターでは、XML フラグメントが書き込まれていると、ルート レベルの規則が適用されない前提としています。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">場合<ph id="ph1">`WriteStartDocument`</ph>が呼び出されたし、<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph>メソッドの使用を別の XML 宣言を作成、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>The following example writes an XML file representing a book.</source>
          <target state="translated">次の例では、ブックを表す XML ファイルを書き込みます。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">&lt;see langword="true" /&gt;</ph>, it writes "standalone=yes"; if <ph id="ph2">&lt;see langword="false" /&gt;</ph>, it writes "standalone=no".</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> の場合は "standalone=yes"、<ph id="ph2">&lt;see langword="false" /&gt;</ph> の場合は "standalone=no" を書き込みます。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Writes the XML declaration with the version "1.0" and the standalone attribute.</source>
          <target state="translated">バージョン "1.0" とスタントアロン属性を使用して XML 宣言を書き込みます。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>The encoding level of the document is determined by how the writer is implemented.</source>
          <target state="translated">ドキュメントのエンコーディングのレベルについては、ライターの実装方法によって決まります。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, if an <ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph> object is specified in the <ph id="ph2">`XmlTextWriter`</ph> constructor, this determines the value of the encoding attribute.</source>
          <target state="translated">たとえば場合、<ph id="ph1">&lt;xref:System.Text.Encoding&gt;</ph>オブジェクトで指定、<ph id="ph2">`XmlTextWriter`</ph>コンス トラクター、encoding 属性の値を指定します。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>When <ph id="ph1">`WriteStartDocument`</ph> is called the writer validates that what you are writing is a well-formed XML document.</source>
          <target state="translated">ときに<ph id="ph1">`WriteStartDocument`</ph>が呼び出されたライターは、書き込み、何が整形式 XML ドキュメントであることを検証します。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>For example, it checks that the XML declaration is the first node, that one and only one root-level element exists and so on.</source>
          <target state="translated">たとえば、XML 宣言は、最初のノードが 1 つとに 1 つだけのルート レベル要素が存在することを確認します。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If this method is not called, the writer assumes an XML fragment is being written and applies no root level rules.</source>
          <target state="translated">このメソッドが呼び出されない場合、ライターでは、XML フラグメントが書き込まれていると、ルート レベルの規則が適用されない前提としています。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>If <ph id="ph1">`WriteStartDocument`</ph> has been called and then the <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph> method is used to create another XML declaration, an exception is thrown.</source>
          <target state="translated">場合<ph id="ph1">`WriteStartDocument`</ph>が呼び出されたし、<ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteProcessingInstruction%2A&gt;</ph>メソッドの使用を別の XML 宣言を作成、例外がスローされます。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartDocument(System.Boolean)">
          <source>This is not the first write method called after the constructor.</source>
          <target state="translated">これは、コンストラクターの後に呼び出された最初の書き込みメソッドではありません。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace prefix of the element.</source>
          <target state="translated">要素の名前空間プリフィックス。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The local name of the element.</source>
          <target state="translated">要素のローカル名。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The namespace URI to associate with the element.</source>
          <target state="translated">要素に関連付ける名前空間 URI。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>If this namespace is already in scope and has an associated prefix then the writer automatically writes that prefix also.</source>
          <target state="translated">この名前空間が既にスコープ内にあり、関連付けられたプリフィックスを持つ場合、ライターは、そのプリフィックスも自動的に書き込みます。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Writes the specified start tag and associates it with the given namespace and prefix.</source>
          <target state="translated">指定した開始タグを書き込み、指定した名前空間とプレフィックスに関連付けます。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>After calling this method you can either write attributes or create content using <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>, <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>, or <ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph> for child elements.</source>
          <target state="translated">使用して、コンテンツの属性を記述するか、作成は、このメソッドを呼び出した後<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteComment%2A&gt;</ph>、 <ph id="ph2">&lt;xref:System.Xml.XmlTextWriter.WriteString%2A&gt;</ph>、または<ph id="ph3">&lt;xref:System.Xml.XmlTextWriter.WriteStartElement%2A&gt;</ph>の子要素です。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>You can close the element with <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph> at which time an end tag is written out.</source>
          <target state="translated">持つ要素を閉じることができます<ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.WriteEndElement%2A&gt;</ph>れた時点で終了タグが書き込まれます。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The following example writes out a book.</source>
          <target state="translated">次の例は、ブックを書き込みます。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteStartElement(System.String,System.String,System.String)">
          <source>The writer is closed.</source>
          <target state="translated">ライターは閉じられています。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Gets the state of the writer.</source>
          <target state="translated">ライターの状態を取得します。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>One of the <ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> values.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Xml.WriteState" /&gt;</ph> 値のいずれか 1 つ。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.WriteState">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Text to write.</source>
          <target state="translated">書き込むテキスト。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Writes the given text content.</source>
          <target state="translated">指定したテキストの内容を書き込みます。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source><ph id="ph1">`WriteString`</ph> does the following</source>
          <target state="translated"><ph id="ph1">`WriteString`</ph> 次の操作</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The characters <ph id="ph1">`&amp;`</ph>, <ph id="ph2">`&lt;`</ph>, and <ph id="ph3">`&gt;`</ph> are replaced with <ph id="ph4">`&amp;amp;`</ph>, <ph id="ph5">`&amp;lt;`</ph>, and <ph id="ph6">`&amp;gt;`</ph>, respectively.</source>
          <target state="translated">文字<ph id="ph1">`&amp;`</ph>、 <ph id="ph2">`&lt;`</ph>、および<ph id="ph3">`&gt;`</ph>に置き換えられます<ph id="ph4">`&amp;amp;`</ph>、 <ph id="ph5">`&amp;lt;`</ph>、および<ph id="ph6">`&amp;gt;`</ph>、それぞれします。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>Character values in the range 0x-0x1F (excluding white space characters 0x9, 0xA, and 0xD) are replaced with numeric character entities (<ph id="ph1">`&amp;#0;`</ph> through <ph id="ph2">`&amp;#0x1F`</ph>).</source>
          <target state="translated">範囲 0 x-0x1F (除外の空白文字、0x9、0 xa、および 0xD) 内の文字の値は数値エンティティに置き換えられます (<ph id="ph1">`&amp;#0;`</ph>を通じて<ph id="ph2">`&amp;#0x1F`</ph>)。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`WriteString`</ph> is called in the context of an attribute value, double and single quotes are replaced with <ph id="ph2">`&amp;quot;`</ph> and <ph id="ph3">`&amp;apos;`</ph> respectively.</source>
          <target state="translated">場合<ph id="ph1">`WriteString`</ph>が呼び出された属性値のコンテキストでの二重と 1 つの引用符は置き換え<ph id="ph2">`&amp;quot;`</ph>と<ph id="ph3">`&amp;apos;`</ph>それぞれします。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>For example, this input string <ph id="ph1">`test&lt;item&gt;test`</ph> is written as</source>
          <target state="translated">たとえば、この文字列を入力<ph id="ph1">`test&lt;item&gt;test`</ph>として書き込まれます</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>If <ph id="ph1">`text`</ph> is either <ph id="ph2">`null`</ph> or <ph id="ph3">`String.Empty`</ph>, this method writes a text node with no data content.</source>
          <target state="translated">場合<ph id="ph1">`text`</ph>か<ph id="ph2">`null`</ph>または<ph id="ph3">`String.Empty`</ph>、このメソッドは、データ コンテンツのないと、テキスト ノードを書き込みます。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The following example writes an XML fragment.</source>
          <target state="translated">次の例では、XML フラグメントを書き込みます。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteString(System.String)">
          <source>The text string contains an invalid surrogate pair.</source>
          <target state="translated">テキスト文字列に、無効なサロゲート ペアが含まれています。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The low surrogate.</source>
          <target state="translated">下位サロゲート。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph>.</source>
          <target state="translated">この値は、<ph id="ph1">&lt;see langword="0xDC00" /&gt;</ph> から <ph id="ph2">&lt;see langword="0xDFFF" /&gt;</ph> の範囲内にある必要があります。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The high surrogate.</source>
          <target state="translated">上位サロゲート。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This must be a value between <ph id="ph1">&lt;see langword="0xD800" /&gt;</ph> and <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph>.</source>
          <target state="translated">この値は、<ph id="ph1">&lt;see langword="0xD800" /&gt;</ph> から <ph id="ph2">&lt;see langword="0xDBFF" /&gt;</ph> の範囲内にある必要があります。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Generates and writes the surrogate character entity for the surrogate character pair.</source>
          <target state="translated">サロゲート文字ペアのサロゲート文字エンティティを生成し、書き込みます。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>This method is only applicable on systems that use UTF-16 encoding.</source>
          <target state="translated">このメソッドは、utf-16 エンコードを使用するシステムに該当するだけです。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The surrogate character entity is written in hexadecimal format.</source>
          <target state="translated">サロゲート文字エンティティは、16 進形式で書き込まれます。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The range for surrogate characters is <ph id="ph1">`#x10000`</ph> to <ph id="ph2">`#x10FFFF`</ph>.</source>
          <target state="translated">サロゲート文字の範囲は<ph id="ph1">`#x10000`</ph>に<ph id="ph2">`#x10FFFF`</ph>です。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>The following formula is used to generate the surrogate character entity: (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) + <ph id="ph8">`0x10000`</ph>.</source>
          <target state="translated">次の数式は、サロゲート文字エンティティを生成するために使用します。 (<ph id="ph1">`highChar`</ph><ph id="ph2"> - </ph><ph id="ph3">`0xD800`</ph>) * <ph id="ph4">`0x400`</ph> + (<ph id="ph5">`lowChar`</ph><ph id="ph6"> - </ph><ph id="ph7">`0xDC00`</ph>) +<ph id="ph8">`0x10000`</ph>です。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For both HTML and XML, the document character set (and therefore the notation of numeric character references) is based on UCS [ISO-10646].</source>
          <target state="translated">HTML および XML の両方のドキュメントの文字セット (および、したがって数字参照の表記法) は UCS [ISO 10646] に基づいています。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>A single numeric character reference in a source document may therefore in some cases correspond to two 16-bit units in a string (a high surrogate and a low surrogate).</source>
          <target state="translated">ソース ドキュメント内の 1 つの数字参照可能性がありますしたがっていくつかの場合に対応 (上位サロゲートおよび下位サロゲート)、文字列内の 2 つの 16 ビット単位です。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>These 16-bit units are referred to as a surrogate pair.</source>
          <target state="translated">これらの 16 ビット単位は"サロゲート ペア"と呼ばれます。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>For more information regarding surrogates or characters, refer to section 3.7 of the Unicode 3.0/Unicode 2.0 standard located at <ph id="ph1">http://www.unicode.org</ph>, or section 2.2 of the W3C XML 1.0 Recommendation located at <ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>.</source>
          <target state="translated">サロゲート文字や文字の詳細についてを参照してください 3.7、unicode standard 3.0 または Unicode 2.0 にある<ph id="ph1">http://www.unicode.org</ph>、2.2、W3C XML 1.0 』 勧告のセクションにあるまたは<ph id="ph2">http://www.w3.org/TR/REC-xml#charsets</ph>です。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteSurrogateCharEntity(System.Char,System.Char)">
          <source>An invalid surrogate character pair was passed.</source>
          <target state="translated">無効なサロゲート文字ペアが渡されました。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string of white space characters.</source>
          <target state="translated">空白文字の文字列。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Writes out the given white space.</source>
          <target state="translated">指定した空白を書き込みます。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>This method is used to manually format your document.</source>
          <target state="translated">このメソッドは、ドキュメントを手動で書式設定を使用します。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>Use the <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph> property to have the writer format the output automatically.</source>
          <target state="translated">使用して、 <ph id="ph1">&lt;xref:System.Xml.XmlTextWriter.Formatting%2A&gt;</ph> writer を自動的に出力を書式設定するプロパティです。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">次の例では、<ph id="ph1">`WriteWhitespace`</ph>ファイルが書式設定方法を制御します。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" uid="M:System.Xml.XmlTextWriter.WriteWhitespace(System.String)">
          <source>The string contains non-white space characters.</source>
          <target state="translated">文字列に空白以外の文字が含まれています。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Gets the current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> scope.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> スコープを取得します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The current <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph> or <ph id="ph2">&lt;see langword="null" /&gt;</ph> if there is no <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph> in the current scope.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="xml:lang" /&gt;</ph>。または現在のスコープ内に <ph id="ph2">&lt;see langword="null" /&gt;</ph> がない場合は <ph id="ph3">&lt;see langword="xml:lang" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>This property allows one component to find out what state another component has left the writer in.</source>
          <target state="translated">このプロパティは、別のコンポーネントが設定がライターの状態を検索する 1 つのコンポーネントを使用します。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>For example, perhaps one component wants to tell another which language help text to generate.</source>
          <target state="translated">たとえば、おそらく 1 つのコンポーネントが別にヘルプ テキストを生成する言語を通知します。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlLang">
          <source>The language information is communicated by writing an <ph id="ph1">`xml:lang`</ph> attribute.</source>
          <target state="translated">言語情報が書き込むことによって伝え、<ph id="ph1">`xml:lang`</ph>属性。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Gets an <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">現在の <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> スコープを表す <ph id="ph1">&lt;see cref="T:System.Xml.XmlSpace" /&gt;</ph> を取得します。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>An <ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph> representing the current <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph> scope.</source>
          <target state="translated">現在の <ph id="ph1">&lt;see langword="XmlSpace" /&gt;</ph> スコープを表す <ph id="ph2">&lt;see langword="xml:space" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> Value</source>
          <target state="translated"><ph id="ph1">&lt;list type="table"&gt;</ph><ph id="ph2">&lt;listheader&gt;</ph><ph id="ph3">&lt;term&gt;</ph> 値</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> Meaning</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 意味</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> None</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/listheader&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> [なし]</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> This is the default if no <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph> scope exists.</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> これがない場合の既定<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>スコープが存在します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Default</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 既定値</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="default".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 現在のスコープは<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>"default"を = です。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> Preserve</source>
          <target state="translated"><ph id="ph1">&lt;/description&gt;</ph><ph id="ph2">&lt;/item&gt;</ph><ph id="ph3">&lt;item&gt;</ph><ph id="ph4">&lt;term&gt;</ph> 保持します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> The current scope is <ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="preserve".</source>
          <target state="translated"><ph id="ph1">&lt;/term&gt;</ph><ph id="ph2">&lt;description&gt;</ph> 現在のスコープは<ph id="ph3">&lt;see langword="xml:space" /&gt;</ph>="preserve"です。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>Starting with the .NET Framework 2.0, we recommend that you create <ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph> instances by using the <ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph> method and the <ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph> class to take advantage of new functionality.</source>
          <target state="translated">作成することお勧め、.NET Framework 2.0 以降で、<ph id="ph1">&lt;xref:System.Xml.XmlWriter&gt;</ph>インスタンスを使用して、<ph id="ph2">&lt;xref:System.Xml.XmlWriter.Create%2A?displayProperty=nameWithType&gt;</ph>メソッドおよび<ph id="ph3">&lt;xref:System.Xml.XmlWriterSettings&gt;</ph>クラスの新しい機能を活用するためにします。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>This property allows one component to find out in what state another component has left the writer.</source>
          <target state="translated">このプロパティは、別のコンポーネントがライターの状態を確認する 1 つのコンポーネントを使用します。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Xml.XmlTextWriter.XmlSpace">
          <source>The following example uses the <ph id="ph1">`WriteWhitespace`</ph> method to control how the file is formatted.</source>
          <target state="translated">次の例では、<ph id="ph1">`WriteWhitespace`</ph>ファイルが書式設定方法を制御します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>