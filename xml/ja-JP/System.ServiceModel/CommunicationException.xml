<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="CommunicationException.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-efd8310" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">73cd4428-9abd-4836-b1ef-ba70fe2e0b720e01655038004f7a9ed2071586becb159acc962b.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">0e01655038004f7a9ed2071586becb159acc962b</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">05/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.CommunicationException">
          <source>Represents a communication error in either the service or client application.</source>
          <target state="translated">サービスまたはクライアント アプリケーションでの通信エラーを表します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>Robust client and service <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> applications handle <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> objects that may be thrown during communication.</source>
          <target state="translated">堅牢なクライアントとサービスを提供する <ph id="ph1">[!INCLUDE[indigo1](~/includes/indigo1-md.md)]</ph> アプリケーションは、通信中にスローされる可能性がある <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> オブジェクトを処理します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>There are also two <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>-derived exception types (<ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> and <ph id="ph3">&lt;xref:System.ServiceModel.FaultException&gt;</ph>) that clients also often expect.</source>
          <target state="translated">さらに、<ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> から派生する 2 種類の例外 (<ph id="ph2">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> と <ph id="ph3">&lt;xref:System.ServiceModel.FaultException&gt;</ph>) があり、これらはクライアントでも発生することがあります。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>Therefore, in order to prevent the generic <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> handler from catching these more specific exception types, catch these exceptions prior to handling <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>.</source>
          <target state="translated">したがって、ジェネリックな <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> ハンドラーでより限定された種類の例外をキャッチすることを避けるために、<ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> を処理する前にこれらの例外をキャッチします。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> objects are thrown on the client when a SOAP fault that is specified in the operation contract is received in response to a two-way operation (that is, a method with an <ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> attribute with <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> set to <ph id="ph4">`false`</ph>).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultException%601&gt;</ph> オブジェクトは、操作コントラクト内に指定された SOAP エラーが、双方向操作 (つまり、<ph id="ph2">&lt;xref:System.ServiceModel.OperationContractAttribute&gt;</ph> に <ph id="ph3">&lt;xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A&gt;</ph> が設定されている <ph id="ph4">`false`</ph> 属性を持つメソッド) への応答で受信された場合に、クライアント上でスローされます。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source><ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> objects are thrown when a listener receives a SOAP fault that is not expected or specified in the operation contract.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> オブジェクトは、リスナーが予想外の SOAP エラーを受信した場合、または操作コントラクト内に指定されていない SOAP エラーを受信した場合にスローされます。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>This usually occurs when the application is being debugged and the service has the <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> property set to <ph id="ph2">`true`</ph>.</source>
          <target state="translated">通常、これは、アプリケーションのデバッグ中に、サービスの <ph id="ph1">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> プロパティに <ph id="ph2">`true`</ph> が設定されている場合に発生します。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>When implementing custom channels and binding elements, it is strongly recommended that your components throw only <ph id="ph1">&lt;xref:System.TimeoutException?displayProperty=nameWithType&gt;</ph> or <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>-derived objects.</source>
          <target state="translated">カスタム チャネルとバインディング要素を実装するときは、作成するコンポーネントで <ph id="ph1">&lt;xref:System.TimeoutException?displayProperty=nameWithType&gt;</ph> または <ph id="ph2">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> の派生オブジェクトだけがスローされることを強くお勧めします。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>In the case where your components throw a recoverable exception that is specific to the component, wrap that exception inside a <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> object.</source>
          <target state="translated">コンポーネントが、コンポーネントに固有の回復可能例外をスローする場合は、その例外を <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> オブジェクトの中にラップしてください。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>For more details about designing and using the WCF fault system, see <bpt id="p1">[</bpt>Specifying and Handling Faults in Contracts and Services<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>.</source>
          <target state="translated">WCF エラー システムの設計との詳細については、次を参照してください。<bpt id="p1">[</bpt>を指定すると処理のエラー コントラクトおよびサービスの<ept id="p1">](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md)</ept>します。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>The WCF Runtime will not throw a <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> that is unsafe to handle at the point where it leaves the WCF Runtime and enters user code.</source>
          <target state="translated">WCF ランタイムはスローされません、<ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph>は、WCF ランタイムのままにして、ユーザー コードに入る時点で処理する安全ではありません。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>The following code example shows a client that handles <ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> types.</source>
          <target state="translated">次のコード例では、<ph id="ph1">&lt;xref:System.ServiceModel.CommunicationException&gt;</ph> を処理するクライアントを示します。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.ServiceModel.CommunicationException">
          <source>This client also handles <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> objects because the service has <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> set to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">このクライアントは、サービスの <ph id="ph1">&lt;xref:System.ServiceModel.FaultException&gt;</ph> が <ph id="ph2">&lt;xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A&gt;</ph> に設定されているため、<ph id="ph3">`true`</ph> オブジェクトも処理します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="T:System.ServiceModel.CommunicationException">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
          <source>The description of the error condition.</source>
          <target state="translated">エラー状態の説明。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class, using the specified message.</source>
          <target state="translated">指定したメッセージを使用して、<ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Information relevant to the deserialization process.</source>
          <target state="translated">逆シリアル化プロセスに関連する情報。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>The context of the deserialization process.</source>
          <target state="translated">逆シリアル化プロセスのコンテキスト。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class, using the specified serialization information and context objects.</source>
          <target state="translated">シリアル化情報とコンテキスト オブジェクトを指定して、<ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
          <source>The description of the error condition.</source>
          <target state="translated">エラー状態の説明。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
          <source>The inner exception to be used.</source>
          <target state="translated">使用される内部例外。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.ServiceModel.CommunicationException.#ctor(System.String,System.Exception)">
          <source>Initializes a new instance of the <ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> class, using the specified message and the inner exception.</source>
          <target state="translated">指定したメッセージと内部例外を使用して、<ph id="ph1">&lt;see cref="T:System.ServiceModel.CommunicationException" /&gt;</ph> クラスの新しいインスタンスを初期化します。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>