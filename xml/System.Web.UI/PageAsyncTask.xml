<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d1079f4cbaf4f9bde92409a2b96155ff21afa4a7" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39813317" /></Metadata><TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="47d0e-101">ページに登録されている非同期タスクに関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-101">Contains information about an asynchronous task registered to a page.</span></span> <span data-ttu-id="47d0e-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="47d0e-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-103">ASP.NET version 2.0 では、ページに複数のタスクを登録し、ページのレンダリングの前に非同期的に実行できます。</span><span class="sxs-lookup"><span data-stu-id="47d0e-103">ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</span></span> <span data-ttu-id="47d0e-104">低速なプロセスです。 つまり、他のプロセスが実行中、占有しないようにする場合、タスクを非同期的に実行を指定する場合があります。</span><span class="sxs-lookup"><span data-stu-id="47d0e-104">You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</span></span> <span data-ttu-id="47d0e-105">並列または順次、非同期タスクを実行できます。</span><span class="sxs-lookup"><span data-stu-id="47d0e-105">The asynchronous tasks can be executed in parallel or sequentially.</span></span>  
  
 <span data-ttu-id="47d0e-106">A<xref:System.Web.UI.PageAsyncTask>でページにオブジェクトを登録する必要があります、<xref:System.Web.UI.Page.RegisterAsyncTask%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="47d0e-106">A <xref:System.Web.UI.PageAsyncTask> object must be registered to the page through the <xref:System.Web.UI.Page.RegisterAsyncTask%2A> method.</span></span> <span data-ttu-id="47d0e-107">ページ自体は、非同期タスクを実行する非同期的に処理する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="47d0e-107">The page itself does not have to be processed asynchronously to execute asynchronous tasks.</span></span> <span data-ttu-id="47d0e-108">設定することができます、`Async`属性のいずれかに`true`(次のコード例に示すように)、または`false`ページ ディレクティブと非同期タスクは引き続き処理されます非同期的に。</span><span class="sxs-lookup"><span data-stu-id="47d0e-108">You can set the `Async` attribute to either `true` (as shown in the following code example) or `false` on the page directive and the asynchronous tasks will still be processed asynchronously:</span></span>  
  
 `<%@ Page Async="true" %>`  
  
 <span data-ttu-id="47d0e-109">ときに、`Async`属性に設定されて`false`、すべての非同期タスクが完了するまで、ページを実行するスレッドはブロックされます。</span><span class="sxs-lookup"><span data-stu-id="47d0e-109">When the `Async` attribute is set to `false`, the thread that executes the page will be blocked until all asynchronous tasks are complete.</span></span>  
  
 <span data-ttu-id="47d0e-110">非同期タスクに登録する前に、<xref:System.Web.UI.Page.PreRenderComplete>が既に実行されていない場合に、ページでイベントを自動的に実行されるは。</span><span class="sxs-lookup"><span data-stu-id="47d0e-110">Any asynchronous tasks registered before the <xref:System.Web.UI.Page.PreRenderComplete> event will be executed automatically by the page if they have not already been executed.</span></span> <span data-ttu-id="47d0e-111">これらの非同期タスクの登録後、<xref:System.Web.UI.Page.PreRenderComplete>を通じて明示的にイベントを実行する必要があります、<xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>メソッド。</span><span class="sxs-lookup"><span data-stu-id="47d0e-111">Those asynchronous tasks registered after the <xref:System.Web.UI.Page.PreRenderComplete> event must be executed explicitly through the <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method.</span></span> <span data-ttu-id="47d0e-112"><xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>メソッドが前にタスクを開始することもでき、<xref:System.Web.UI.Page.PreRenderComplete>イベント。</span><span class="sxs-lookup"><span data-stu-id="47d0e-112">The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method can also be used to start tasks before the <xref:System.Web.UI.Page.PreRenderComplete> event.</span></span> <span data-ttu-id="47d0e-113"><xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>メソッドが実行されていないページに登録されているすべての非同期タスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-113">The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method executes all the registered asynchronous tasks on the page that have not been executed.</span></span>  
  
 <span data-ttu-id="47d0e-114">既定では 45 秒以内に完了していない場合の非同期タスクがタイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="47d0e-114">By default, an asynchronous task will time out if it has not completed within 45 seconds.</span></span> <span data-ttu-id="47d0e-115">Web.config ファイルまたはページ ディレクティブのいずれかでは、別のタイムアウト値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="47d0e-115">You can specify a different time-out value in either the Web.config file or the page directive.</span></span> <span data-ttu-id="47d0e-116">`<pages>` Web.config ファイルのセクションが含まれています、`asyncTimeout`属性は、次のようです。</span><span class="sxs-lookup"><span data-stu-id="47d0e-116">The `<pages>` section of the Web.config file contains an `asyncTimeout` attribute, as shown below.</span></span>  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 <span data-ttu-id="47d0e-117">ページ ディレクティブが含まれています、`AsyncTimeout`属性。</span><span class="sxs-lookup"><span data-stu-id="47d0e-117">The page directive contains an `AsyncTimeout` attribute.</span></span>  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 <span data-ttu-id="47d0e-118">次のコード例では、ページに 3 つの非同期タスクを登録し、それらを並列で実行します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-118">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="47d0e-119">各タスクでは、5 秒間スリープ状態にスレッドを単なる原因となるメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-119">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="47d0e-120"><see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-120">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="47d0e-121">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-121">An event handler.</span></span></param>
        <summary><span data-ttu-id="47d0e-122">タスクを取り消すことができるようにするイベント ハンドラーを使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-122">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using an event handler that enables the task to be canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-123">このコンス トラクターをラップ、<xref:System.Web.TaskEventHandler>委任ように、<xref:System.Web.UI.PageAsyncTask>オブジェクトは、非同期コードを統合できます (に基づいて<xref:System.Threading.Tasks.Task>オブジェクト) 既存の ASP.NET Web フォームの非同期ページの機能を使用します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-123">This constructor wraps a <xref:System.Web.TaskEventHandler> delegate so that the <xref:System.Web.UI.PageAsyncTask> object can integrate asynchronous code (based on <xref:System.Threading.Tasks.Task> objects) with the existing ASP.NET Web Forms asynchronous pages feature.</span></span> <span data-ttu-id="47d0e-124">ASP.NET では通知、<xref:System.Threading.CancellationToken>に渡されるオブジェクトを<xref:System.Web.TaskEventHandler>に基づいてキャンセルの委任、<xref:System.Web.UI.Page.AsyncTimeout%2A>属性の設定、 `@ Page` Web ページのディレクティブ。</span><span class="sxs-lookup"><span data-stu-id="47d0e-124">ASP.NET will signal the <xref:System.Threading.CancellationToken> object that is passed to a <xref:System.Web.TaskEventHandler> delegate for cancellation based on the <xref:System.Web.UI.Page.AsyncTimeout%2A> attribute set in the `@ Page` directive of the Web page.</span></span> <span data-ttu-id="47d0e-125">ときに、<xref:System.Web.UI.Page.AsyncTimeout%2A>値に達している場合、<xref:System.Threading.CancellationToken>通知されるオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47d0e-125">When the <xref:System.Web.UI.Page.AsyncTimeout%2A> value has been reached, the <xref:System.Threading.CancellationToken> object will be signaled.</span></span> <span data-ttu-id="47d0e-126">`CancellationToken`の実装によって呼び出されるすべての非同期 Api には、パラメーターを渡す必要があります、<xref:System.Web.TaskEventHandler>クラス。</span><span class="sxs-lookup"><span data-stu-id="47d0e-126">The `CancellationToken` parameter must be passed to any asynchronous APIs that are called by your implementation of the <xref:System.Web.TaskEventHandler> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="47d0e-127">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-127">An event handler.</span></span></param>
        <summary><span data-ttu-id="47d0e-128">タスクを処理できるようにするイベント ハンドラーを使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-128">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using an event handler that enables the task to be handled.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler"><span data-ttu-id="47d0e-129">非同期タスクの開始時に呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-129">The handler to call when beginning an asynchronous task.</span></span></param>
        <param name="endHandler"><span data-ttu-id="47d0e-130">タイムアウト期限内にタスクが正常に完了したときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-130">The handler to call when the task is completed successfully within the time-out period.</span></span></param>
        <param name="timeoutHandler"><span data-ttu-id="47d0e-131">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-131">The handler to call when the task is not completed successfully within the time-out period.</span></span></param>
        <param name="state"><span data-ttu-id="47d0e-132">タスクの状態を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47d0e-132">The object that represents the state of the task.</span></span></param>
        <summary><span data-ttu-id="47d0e-133">並列実行のために既定値を使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-133">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using the default value for executing in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-134">このコンス トラクターのセットの実装、<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>プロパティを`false`のため、非同期タスクは、ページの他のタスクと並列で処理されません。</span><span class="sxs-lookup"><span data-stu-id="47d0e-134">This implementation of the constructor sets the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property to `false` so the asynchronous task is not processed in parallel with other tasks on the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="47d0e-135"><paramref name="beginHandler" /> パラメーターまたは <paramref name="endHandler" /> パラメーターが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="47d0e-135">The <paramref name="beginHandler" /> parameter or <paramref name="endHandler" /> parameter is not specified.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler"><span data-ttu-id="47d0e-136">非同期タスクの開始時に呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-136">The handler to call when beginning an asynchronous task.</span></span></param>
        <param name="endHandler"><span data-ttu-id="47d0e-137">タイムアウト期限内にタスクが正常に完了したときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-137">The handler to call when the task is completed successfully within the time-out period.</span></span></param>
        <param name="timeoutHandler"><span data-ttu-id="47d0e-138">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="47d0e-138">The handler to call when the task is not completed successfully within the time-out period.</span></span></param>
        <param name="state"><span data-ttu-id="47d0e-139">タスクの状態を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="47d0e-139">The object that represents the state of the task.</span></span></param>
        <param name="executeInParallel"><span data-ttu-id="47d0e-140">このタスクを他のタスクと並列で処理できるかどうかを示す値。</span><span class="sxs-lookup"><span data-stu-id="47d0e-140">The value that indicates whether the task can be processed in parallel with other tasks.</span></span></param>
        <summary><span data-ttu-id="47d0e-141">並列実行のために指定した値を使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-141">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using the specified value for executing in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-142">このコンス トラクターの実装では、非同期タスクは、ページ上の他のタスクと並列で処理されるかどうかを設定できます。</span><span class="sxs-lookup"><span data-stu-id="47d0e-142">This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47d0e-143">次のコード例では、互いに並列で処理される 3 つの非同期タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-143">The following code example creates three asynchronous tasks that are processed in parallel to each other.</span></span> <span data-ttu-id="47d0e-144">この例は例にある、<xref:System.Web.UI.PageAsyncTask>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="47d0e-144">This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.</span></span>  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="47d0e-145"><paramref name="beginHandler" /> パラメーターまたは <paramref name="endHandler" /> パラメーターが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="47d0e-145">The <paramref name="beginHandler" /> parameter or <paramref name="endHandler" /> parameter is not specified.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47d0e-146">非同期タスクの開始時に呼び出すメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-146">Gets the method to call when beginning an asynchronous task.</span></span></summary>
        <value><span data-ttu-id="47d0e-147">非同期タスクの開始時に呼び出すメソッドを表す <see cref="T:System.Web.BeginEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="47d0e-147">A <see cref="T:System.Web.BeginEventHandler" /> delegate that represents the method to call when beginning the asynchronous task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-148"><xref:System.Web.UI.PageAsyncTask.BeginHandler%2A>コンス トラクターでデリゲートを設定します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-148">The <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is set in the constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47d0e-149">次のコード例では、ページに 3 つの非同期タスクを登録し、それらを並列で実行します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-149">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="47d0e-150">各タスクでは、5 秒間スリープ状態にスレッドを単なる原因となるメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-150">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span> <span data-ttu-id="47d0e-151">A<xref:System.Web.UI.PageAsyncTask.BeginHandler%2A>各タスクのデリゲートを指定します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-151">A <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is specified for each task.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47d0e-152">タイムアウト期限内にタスクが正常に完了したときに呼び出すメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-152">Gets the method to call when the task completes successfully within the time-out period.</span></span></summary>
        <value><span data-ttu-id="47d0e-153">タイムアウト期限内にタスクが正常に完了したときに呼び出すメソッドを表す <see cref="T:System.Web.EndEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="47d0e-153">An <see cref="T:System.Web.EndEventHandler" /> delegate that represents the method to call when the task completes successfully within the time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-154"><xref:System.Web.UI.PageAsyncTask.EndHandler%2A>コンス トラクターでデリゲートを設定します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-154">The <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is set in the constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47d0e-155">次のコード例では、ページに 3 つの非同期タスクを登録し、それらを並列で実行します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-155">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="47d0e-156">各タスクでは、5 秒間スリープ状態にスレッドを単なる原因となるメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-156">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span> <span data-ttu-id="47d0e-157"><xref:System.Web.UI.PageAsyncTask.EndHandler%2A>各タスクのデリゲートを指定します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-157">An <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is specified for each task.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47d0e-158">このタスクを他のタスクと並列で処理できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-158">Gets a value that indicates whether the task can be processed in parallel with other tasks.</span></span></summary>
        <value><span data-ttu-id="47d0e-159">このタスクが他のタスクと並列で処理される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="47d0e-159"><see langword="true" /> if the task should be processed in parallel with other tasks; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-160"><xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>コンス トラクターでプロパティを設定します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-160">The <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set in the constructor.</span></span> <span data-ttu-id="47d0e-161">ページ内の複数のタスクの登録時に、<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>プロパティに設定されて`true`、それらのタスクを同時に処理されます。</span><span class="sxs-lookup"><span data-stu-id="47d0e-161">When multiple tasks are registered in a page and the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `true`, then those tasks are processed concurrently.</span></span> <span data-ttu-id="47d0e-162">ただし場合、<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>プロパティに設定されて`false`、それらのタスクが順番に処理されます。</span><span class="sxs-lookup"><span data-stu-id="47d0e-162">However, if the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `false`, then those tasks are processed sequentially.</span></span> <span data-ttu-id="47d0e-163">などの場合、ページに含まれている 2 つの非同期タスクを完了に 5 秒を要した各と<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>に設定されている`true`、両方のタスクは 5 秒で完了します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-163">For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `true`, both tasks will complete in 5 seconds.</span></span> <span data-ttu-id="47d0e-164">場合<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>に設定されている`false`同じこれらの 2 つの作業をし、最初のタスクは 5 秒以内に完了、2 番目のタスクは、最初のタスクの完了後に 5 秒間に完了します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-164">If <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `false` for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47d0e-165">次のコード例では、並列で処理するには、各セットである 3 つの非同期タスクを定義します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-165">The following code example defines three asynchronous tasks that are each set to be processed in parallel.</span></span> <span data-ttu-id="47d0e-166">この例は例にある、<xref:System.Web.UI.PageAsyncTask>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="47d0e-166">This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.</span></span>  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47d0e-167">タスクの状態を表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-167">Gets an object that represents the state of the task.</span></span></summary>
        <value><span data-ttu-id="47d0e-168">タスクの状態を表す <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="47d0e-168">An <see cref="T:System.Object" /> that represents the state of the task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-169"><xref:System.Web.UI.PageAsyncTask.State%2A>プロパティは、コンス トラクターで設定され、非同期タスクの実行中に変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="47d0e-169">The <xref:System.Web.UI.PageAsyncTask.State%2A> property is set in the constructor and cannot be modified during execution of the asynchronous task.</span></span> <span data-ttu-id="47d0e-170">ページの非同期タスクを区別するには、それぞれに一意の文字列値を割り当てて<xref:System.Web.UI.PageAsyncTask.State%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="47d0e-170">You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <xref:System.Web.UI.PageAsyncTask.State%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47d0e-171">次のコード例は、3 つの非同期タスクを作成しの一意の値を与える、<xref:System.Web.UI.PageAsyncTask.State%2A>プロパティ。</span><span class="sxs-lookup"><span data-stu-id="47d0e-171">The following code example creates three asynchronous tasks and gives them unique values for their <xref:System.Web.UI.PageAsyncTask.State%2A> properties.</span></span> <span data-ttu-id="47d0e-172">この例は例にある、<xref:System.Web.UI.PageAsyncTask>クラスの概要。</span><span class="sxs-lookup"><span data-stu-id="47d0e-172">This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.</span></span>  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="47d0e-173">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-173">Gets the method to call when the task does not complete successfully within the time-out period.</span></span></summary>
        <value><span data-ttu-id="47d0e-174">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すメソッドを表す <see cref="T:System.Web.EndEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="47d0e-174">An <see cref="T:System.Web.EndEventHandler" /> delegate that represents the method to call when the task does not complete successfully within the time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="47d0e-175"><xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A>コンス トラクターでデリゲートを設定します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-175">The <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is set in the constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="47d0e-176">次のコード例では、ページに 3 つの非同期タスクを登録し、それらを並列で実行します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-176">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="47d0e-177">各タスクでは、5 秒間スリープ状態にスレッドを単なる原因となるメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-177">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span> <span data-ttu-id="47d0e-178">A<xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A>各タスクのデリゲートを指定します。</span><span class="sxs-lookup"><span data-stu-id="47d0e-178">A <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is specified for each task.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>