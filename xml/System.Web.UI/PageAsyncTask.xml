<Type Name="PageAsyncTask" FullName="System.Web.UI.PageAsyncTask">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5da70a9feb3161643610796afaeb84a6348e82eb" /><Meta Name="ms.sourcegitcommit" Value="88014e1c5440e3df4f66ef04393854d15b1fd534" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="09/05/2019" /><Meta Name="ms.locfileid" Value="70489688" /></Metadata><TypeSignature Language="C#" Value="public sealed class PageAsyncTask" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit PageAsyncTask extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.PageAsyncTask" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class PageAsyncTask" />
  <TypeSignature Language="C++ CLI" Value="public ref class PageAsyncTask sealed" />
  <TypeSignature Language="F#" Value="type PageAsyncTask = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="03fa1-101">ページに登録されている非同期タスクに関する情報を格納します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-101">Contains information about an asynchronous task registered to a page.</span></span> <span data-ttu-id="03fa1-102">このクラスは継承できません。</span><span class="sxs-lookup"><span data-stu-id="03fa1-102">This class cannot be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-103">ASP.NET バージョン2.0 では、ページを表示する前に、複数のタスクをページに登録し、非同期的に実行することができます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-103">ASP.NET version 2.0 allows you to register multiple tasks to a page and run them asynchronously prior to rendering the page.</span></span> <span data-ttu-id="03fa1-104">処理速度が遅いプロセスで、実行中に他のプロセスが関連付けられないようにする必要がある場合は、タスクを非同期に実行するように指定できます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-104">You might specify that a task be run asynchronously if it is a slow process and you do not want other processes to be tied up while it is executing.</span></span> <span data-ttu-id="03fa1-105">非同期タスクは、並列または順次で実行できます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-105">The asynchronous tasks can be executed in parallel or sequentially.</span></span>  
  
 <span data-ttu-id="03fa1-106">オブジェクト<xref:System.Web.UI.PageAsyncTask>は、 <xref:System.Web.UI.Page.RegisterAsyncTask%2A>メソッドを使用してページに登録する必要があります。</span><span class="sxs-lookup"><span data-stu-id="03fa1-106">A <xref:System.Web.UI.PageAsyncTask> object must be registered to the page through the <xref:System.Web.UI.Page.RegisterAsyncTask%2A> method.</span></span> <span data-ttu-id="03fa1-107">非同期タスクを実行するために、ページ自体を非同期的に処理する必要はありません。</span><span class="sxs-lookup"><span data-stu-id="03fa1-107">The page itself does not have to be processed asynchronously to execute asynchronous tasks.</span></span> <span data-ttu-id="03fa1-108">`Async`属性を`true` (次のコード例に示すように) または`false` page ディレクティブに設定すると、非同期タスクは引き続き非同期に処理されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-108">You can set the `Async` attribute to either `true` (as shown in the following code example) or `false` on the page directive and the asynchronous tasks will still be processed asynchronously:</span></span>  
  
 `<%@ Page Async="true" %>`  
  
 <span data-ttu-id="03fa1-109">属性がに`false`設定されている場合、ページを実行するスレッドは、すべての非同期タスクが完了するまでブロックされます。 `Async`</span><span class="sxs-lookup"><span data-stu-id="03fa1-109">When the `Async` attribute is set to `false`, the thread that executes the page will be blocked until all asynchronous tasks are complete.</span></span>  
  
 <span data-ttu-id="03fa1-110">イベントの<xref:System.Web.UI.Page.PreRenderComplete>前に登録された非同期タスクは、まだ実行されていない場合、ページによって自動的に実行されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-110">Any asynchronous tasks registered before the <xref:System.Web.UI.Page.PreRenderComplete> event will be executed automatically by the page if they have not already been executed.</span></span> <span data-ttu-id="03fa1-111">イベントの<xref:System.Web.UI.Page.PreRenderComplete>後に登録された非同期タスクは、メソッド<xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>を使用して明示的に実行する必要があります。</span><span class="sxs-lookup"><span data-stu-id="03fa1-111">Those asynchronous tasks registered after the <xref:System.Web.UI.Page.PreRenderComplete> event must be executed explicitly through the <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method.</span></span> <span data-ttu-id="03fa1-112">メソッドを使用して、イベントの<xref:System.Web.UI.Page.PreRenderComplete>前にタスクを開始することもできます。 <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A></span><span class="sxs-lookup"><span data-stu-id="03fa1-112">The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method can also be used to start tasks before the <xref:System.Web.UI.Page.PreRenderComplete> event.</span></span> <span data-ttu-id="03fa1-113">メソッド<xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A>は、実行されていないページに対して、登録されているすべての非同期タスクを実行します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-113">The <xref:System.Web.UI.Page.ExecuteRegisteredAsyncTasks%2A> method executes all the registered asynchronous tasks on the page that have not been executed.</span></span>  
  
 <span data-ttu-id="03fa1-114">既定では、非同期タスクが45秒以内に完了しなかった場合、タイムアウトします。</span><span class="sxs-lookup"><span data-stu-id="03fa1-114">By default, an asynchronous task will time out if it has not completed within 45 seconds.</span></span> <span data-ttu-id="03fa1-115">Web.config ファイルまたは page ディレクティブで、異なるタイムアウト値を指定できます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-115">You can specify a different time-out value in either the Web.config file or the page directive.</span></span> <span data-ttu-id="03fa1-116">Web.config ファイルの`asyncTimeout` セクションには、次に示すように、属性が含まれ `<pages>` ています。</span><span class="sxs-lookup"><span data-stu-id="03fa1-116">The `<pages>` section of the Web.config file contains an `asyncTimeout` attribute, as shown below.</span></span>  
  
 `<system.web>`  
  
 `<pages asyncTimeout="30">`  
  
 `</pages>`  
  
 `</system.web>`  
  
 <span data-ttu-id="03fa1-117">Page ディレクティブには、 `AsyncTimeout`属性が含まれています。</span><span class="sxs-lookup"><span data-stu-id="03fa1-117">The page directive contains an `AsyncTimeout` attribute.</span></span>  
  
 `<%@ Page AsyncTimeout="30" %>`  
  
   
  
## Examples  
 <span data-ttu-id="03fa1-118">次のコード例では、3つの非同期タスクをページに登録し、それらを並行して実行します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-118">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="03fa1-119">各タスクは、5秒間だけスレッドをスリープ状態にするメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-119">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="03fa1-120"><see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-120">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`2&lt;valuetype System.Threading.CancellationToken, class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.CancellationToken,System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of CancellationToken, Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::CancellationToken, System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.CancellationToken, System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.CancellationToken,System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="03fa1-121">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-121">An event handler.</span></span></param>
        <summary><span data-ttu-id="03fa1-122">タスクを取り消すことができるようにするイベント ハンドラーを使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-122">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using an event handler that enables the task to be canceled.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-123">このコンストラクターは、 <xref:System.Web.TaskEventHandler>オブジェクトが<xref:System.Web.UI.PageAsyncTask> (オブジェクトに基づいて<xref:System.Threading.Tasks.Task> ) 非同期コードを既存の ASP.NET Web フォーム非同期ページ機能と統合できるように、デリゲートをラップします。</span><span class="sxs-lookup"><span data-stu-id="03fa1-123">This constructor wraps a <xref:System.Web.TaskEventHandler> delegate so that the <xref:System.Web.UI.PageAsyncTask> object can integrate asynchronous code (based on <xref:System.Threading.Tasks.Task> objects) with the existing ASP.NET Web Forms asynchronous pages feature.</span></span> <span data-ttu-id="03fa1-124">ASP.NET は、Web <xref:System.Threading.CancellationToken>ページの`@ Page`ディレクティブで設定さ<xref:System.Web.TaskEventHandler>れた<xref:System.Web.UI.Page.AsyncTimeout%2A>属性に基づいて、キャンセルのためにデリゲートに渡されるオブジェクトを通知します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-124">ASP.NET will signal the <xref:System.Threading.CancellationToken> object that is passed to a <xref:System.Web.TaskEventHandler> delegate for cancellation based on the <xref:System.Web.UI.Page.AsyncTimeout%2A> attribute set in the `@ Page` directive of the Web page.</span></span> <span data-ttu-id="03fa1-125">この値に達すると、 <xref:System.Threading.CancellationToken>オブジェクトはシグナル状態になります。 <xref:System.Web.UI.Page.AsyncTimeout%2A></span><span class="sxs-lookup"><span data-stu-id="03fa1-125">When the <xref:System.Web.UI.Page.AsyncTimeout%2A> value has been reached, the <xref:System.Threading.CancellationToken> object will be signaled.</span></span> <span data-ttu-id="03fa1-126">パラメーター `CancellationToken`は、 <xref:System.Web.TaskEventHandler>クラスの実装によって呼び出されるすべての非同期 api に渡す必要があります。</span><span class="sxs-lookup"><span data-stu-id="03fa1-126">The `CancellationToken` parameter must be passed to any asynchronous APIs that are called by your implementation of the <xref:System.Web.TaskEventHandler> class.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (Func&lt;System.Threading.Tasks.Task&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Func`1&lt;class System.Threading.Tasks.Task&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Func{System.Threading.Tasks.Task})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (handler As Func(Of Task))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(Func&lt;System::Threading::Tasks::Task ^&gt; ^ handler);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : Func&lt;System.Threading.Tasks.Task&gt; -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask handler" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handler" Type="System.Func&lt;System.Threading.Tasks.Task&gt;" Index="0" FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="handler"><span data-ttu-id="03fa1-127">イベント ハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-127">An event handler.</span></span></param>
        <summary><span data-ttu-id="03fa1-128">タスクを処理できるようにするイベント ハンドラーを使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-128">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using an event handler that enables the task to be handled.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="beginHandler"><span data-ttu-id="03fa1-129">非同期タスクの開始時に呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-129">The handler to call when beginning an asynchronous task.</span></span></param>
        <param name="endHandler"><span data-ttu-id="03fa1-130">タイムアウト期限内にタスクが正常に完了したときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-130">The handler to call when the task is completed successfully within the time-out period.</span></span></param>
        <param name="timeoutHandler"><span data-ttu-id="03fa1-131">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-131">The handler to call when the task is not completed successfully within the time-out period.</span></span></param>
        <param name="state"><span data-ttu-id="03fa1-132">タスクの状態を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="03fa1-132">The object that represents the state of the task.</span></span></param>
        <summary><span data-ttu-id="03fa1-133">並列実行のために既定値を使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-133">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using the default value for executing in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-134">このコンストラクターの実装は、非同期<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>タスクが`false`ページ上の他のタスクと並列に処理されないように、プロパティをに設定します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-134">This implementation of the constructor sets the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property to `false` so the asynchronous task is not processed in parallel with other tasks on the page.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03fa1-135"><paramref name="beginHandler" /> パラメーターまたは <paramref name="endHandler" /> パラメーターが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="03fa1-135">The <paramref name="beginHandler" /> parameter or <paramref name="endHandler" /> parameter is not specified.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PageAsyncTask (System.Web.BeginEventHandler beginHandler, System.Web.EndEventHandler endHandler, System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.BeginEventHandler beginHandler, class System.Web.EndEventHandler endHandler, class System.Web.EndEventHandler timeoutHandler, object state, bool executeInParallel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.PageAsyncTask.#ctor(System.Web.BeginEventHandler,System.Web.EndEventHandler,System.Web.EndEventHandler,System.Object,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (beginHandler As BeginEventHandler, endHandler As EndEventHandler, timeoutHandler As EndEventHandler, state As Object, executeInParallel As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PageAsyncTask(System::Web::BeginEventHandler ^ beginHandler, System::Web::EndEventHandler ^ endHandler, System::Web::EndEventHandler ^ timeoutHandler, System::Object ^ state, bool executeInParallel);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.PageAsyncTask : System.Web.BeginEventHandler * System.Web.EndEventHandler * System.Web.EndEventHandler * obj * bool -&gt; System.Web.UI.PageAsyncTask" Usage="new System.Web.UI.PageAsyncTask (beginHandler, endHandler, timeoutHandler, state, executeInParallel)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="beginHandler" Type="System.Web.BeginEventHandler" />
        <Parameter Name="endHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="timeoutHandler" Type="System.Web.EndEventHandler" />
        <Parameter Name="state" Type="System.Object" />
        <Parameter Name="executeInParallel" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="beginHandler"><span data-ttu-id="03fa1-136">非同期タスクの開始時に呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-136">The handler to call when beginning an asynchronous task.</span></span></param>
        <param name="endHandler"><span data-ttu-id="03fa1-137">タイムアウト期限内にタスクが正常に完了したときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-137">The handler to call when the task is completed successfully within the time-out period.</span></span></param>
        <param name="timeoutHandler"><span data-ttu-id="03fa1-138">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すハンドラー。</span><span class="sxs-lookup"><span data-stu-id="03fa1-138">The handler to call when the task is not completed successfully within the time-out period.</span></span></param>
        <param name="state"><span data-ttu-id="03fa1-139">タスクの状態を表すオブジェクト。</span><span class="sxs-lookup"><span data-stu-id="03fa1-139">The object that represents the state of the task.</span></span></param>
        <param name="executeInParallel"><span data-ttu-id="03fa1-140">このタスクを他のタスクと並列で処理できるかどうかを示す値。</span><span class="sxs-lookup"><span data-stu-id="03fa1-140">The value that indicates whether the task can be processed in parallel with other tasks.</span></span></param>
        <summary><span data-ttu-id="03fa1-141">並列実行のために指定した値を使用して、<see cref="T:System.Web.UI.PageAsyncTask" /> クラスの新しいインスタンスを初期化します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-141">Initializes a new instance of the <see cref="T:System.Web.UI.PageAsyncTask" /> class using the specified value for executing in parallel.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-142">このコンストラクターの実装により、非同期タスクをページ上の他のタスクと並行して処理するかどうかを設定できます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-142">This implementation of the constructor allows you to set whether the asynchronous task will be processed in parallel with other tasks on the page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03fa1-143">次のコード例では、互いに並列に処理される3つの非同期タスクを作成します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-143">The following code example creates three asynchronous tasks that are processed in parallel to each other.</span></span> <span data-ttu-id="03fa1-144">この例は、「クラスの概要」で説明<xref:System.Web.UI.PageAsyncTask>されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="03fa1-144">This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.</span></span>  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="03fa1-145"><paramref name="beginHandler" /> パラメーターまたは <paramref name="endHandler" /> パラメーターが指定されていません。</span><span class="sxs-lookup"><span data-stu-id="03fa1-145">The <paramref name="beginHandler" /> parameter or <paramref name="endHandler" /> parameter is not specified.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="BeginHandler">
      <MemberSignature Language="C#" Value="public System.Web.BeginEventHandler BeginHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.BeginEventHandler BeginHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BeginHandler As BeginEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::BeginEventHandler ^ BeginHandler { System::Web::BeginEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BeginHandler : System.Web.BeginEventHandler" Usage="System.Web.UI.PageAsyncTask.BeginHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.BeginEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03fa1-146">非同期タスクの開始時に呼び出すメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-146">Gets the method to call when beginning an asynchronous task.</span></span></summary>
        <value><span data-ttu-id="03fa1-147">非同期タスクの開始時に呼び出すメソッドを表す <see cref="T:System.Web.BeginEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="03fa1-147">A <see cref="T:System.Web.BeginEventHandler" /> delegate that represents the method to call when beginning the asynchronous task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-148"><xref:System.Web.UI.PageAsyncTask.BeginHandler%2A>デリゲートはコンストラクターで設定されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-148">The <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is set in the constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03fa1-149">次のコード例では、3つの非同期タスクをページに登録し、それらを並行して実行します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-149">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="03fa1-150">各タスクは、5秒間だけスレッドをスリープ状態にするメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-150">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span> <span data-ttu-id="03fa1-151">デリゲート<xref:System.Web.UI.PageAsyncTask.BeginHandler%2A>は、各タスクに対して指定されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-151">A <xref:System.Web.UI.PageAsyncTask.BeginHandler%2A> delegate is specified for each task.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler EndHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler EndHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EndHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ EndHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EndHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.EndHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03fa1-152">タイムアウト期限内にタスクが正常に完了したときに呼び出すメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-152">Gets the method to call when the task completes successfully within the time-out period.</span></span></summary>
        <value><span data-ttu-id="03fa1-153">タイムアウト期限内にタスクが正常に完了したときに呼び出すメソッドを表す <see cref="T:System.Web.EndEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="03fa1-153">An <see cref="T:System.Web.EndEventHandler" /> delegate that represents the method to call when the task completes successfully within the time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-154"><xref:System.Web.UI.PageAsyncTask.EndHandler%2A>デリゲートはコンストラクターで設定されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-154">The <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is set in the constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03fa1-155">次のコード例では、3つの非同期タスクをページに登録し、それらを並行して実行します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-155">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="03fa1-156">各タスクは、5秒間だけスレッドをスリープ状態にするメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-156">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span> <span data-ttu-id="03fa1-157">デリゲート<xref:System.Web.UI.PageAsyncTask.EndHandler%2A>は、各タスクに対して指定されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-157">An <xref:System.Web.UI.PageAsyncTask.EndHandler%2A> delegate is specified for each task.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteInParallel">
      <MemberSignature Language="C#" Value="public bool ExecuteInParallel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExecuteInParallel" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ExecuteInParallel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExecuteInParallel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ExecuteInParallel : bool" Usage="System.Web.UI.PageAsyncTask.ExecuteInParallel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03fa1-158">このタスクを他のタスクと並列で処理できるかどうかを示す値を取得します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-158">Gets a value that indicates whether the task can be processed in parallel with other tasks.</span></span></summary>
        <value><span data-ttu-id="03fa1-159">このタスクが他のタスクと並列で処理される場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="03fa1-159"><see langword="true" /> if the task should be processed in parallel with other tasks; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-160"><xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>プロパティは、コンストラクターで設定されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-160">The <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set in the constructor.</span></span> <span data-ttu-id="03fa1-161">複数のタスクが1ページに登録され<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>ていて、 `true`プロパティがに設定されている場合、それらのタスクは同時に処理されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-161">When multiple tasks are registered in a page and the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `true`, then those tasks are processed concurrently.</span></span> <span data-ttu-id="03fa1-162">ただし、プロパティが<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>に`false`設定されている場合、これらのタスクは順番に処理されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-162">However, if the <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> property is set to `false`, then those tasks are processed sequentially.</span></span> <span data-ttu-id="03fa1-163">たとえば、ページに2つの非同期タスクが含まれており<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> 、それぞれの完了に5秒かかり、がに`true`設定されている場合、両方のタスクが5秒で完了します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-163">For example, if a page contained two asynchronous tasks that each took 5 seconds to complete and <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `true`, both tasks will complete in 5 seconds.</span></span> <span data-ttu-id="03fa1-164">これら<xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A>の同じ 2 `false`つのタスクに対してがに設定されている場合、最初のタスクは5秒以内に完了し、2番目のタスクは、最初のタスクが完了してから5秒後に完了します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-164">If <xref:System.Web.UI.PageAsyncTask.ExecuteInParallel%2A> is set to `false` for these same two tasks, then the first task will complete in 5 seconds and the second task will complete 5 seconds after the completion of the first task.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03fa1-165">次のコード例では、それぞれが並列処理されるように設定された3つの非同期タスクを定義します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-165">The following code example defines three asynchronous tasks that are each set to be processed in parallel.</span></span> <span data-ttu-id="03fa1-166">この例は、「クラスの概要」で説明<xref:System.Web.UI.PageAsyncTask>されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="03fa1-166">This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.</span></span>  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public object State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object State" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.State" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property State As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ State { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.State : obj" Usage="System.Web.UI.PageAsyncTask.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03fa1-167">タスクの状態を表すオブジェクトを取得します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-167">Gets an object that represents the state of the task.</span></span></summary>
        <value><span data-ttu-id="03fa1-168">タスクの状態を表す <see cref="T:System.Object" />。</span><span class="sxs-lookup"><span data-stu-id="03fa1-168">An <see cref="T:System.Object" /> that represents the state of the task.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-169"><xref:System.Web.UI.PageAsyncTask.State%2A>プロパティはコンストラクターで設定されており、非同期タスクの実行中に変更することはできません。</span><span class="sxs-lookup"><span data-stu-id="03fa1-169">The <xref:System.Web.UI.PageAsyncTask.State%2A> property is set in the constructor and cannot be modified during execution of the asynchronous task.</span></span> <span data-ttu-id="03fa1-170">一意の文字列値をそれぞれ<xref:System.Web.UI.PageAsyncTask.State%2A>のプロパティに割り当てることにより、ページ内の非同期タスクを区別できます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-170">You can differentiate asynchronous tasks in a page by assigning unique string values to their respective <xref:System.Web.UI.PageAsyncTask.State%2A> properties.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03fa1-171">次のコード例では、3つの非同期タスクを作成し<xref:System.Web.UI.PageAsyncTask.State%2A> 、それらのプロパティに対して一意の値を指定します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-171">The following code example creates three asynchronous tasks and gives them unique values for their <xref:System.Web.UI.PageAsyncTask.State%2A> properties.</span></span> <span data-ttu-id="03fa1-172">この例は、「クラスの概要」で説明<xref:System.Web.UI.PageAsyncTask>されている大規模な例の一部です。</span><span class="sxs-lookup"><span data-stu-id="03fa1-172">This example is part of a larger example found in the <xref:System.Web.UI.PageAsyncTask> class overview.</span></span>  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#3)]
 [!code-vb[System.Web.UI.PageAsyncTask#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeoutHandler">
      <MemberSignature Language="C#" Value="public System.Web.EndEventHandler TimeoutHandler { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.EndEventHandler TimeoutHandler" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TimeoutHandler As EndEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::EndEventHandler ^ TimeoutHandler { System::Web::EndEventHandler ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TimeoutHandler : System.Web.EndEventHandler" Usage="System.Web.UI.PageAsyncTask.TimeoutHandler" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.EndEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="03fa1-173">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すメソッドを取得します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-173">Gets the method to call when the task does not complete successfully within the time-out period.</span></span></summary>
        <value><span data-ttu-id="03fa1-174">タイムアウト期限内にタスクが正常に完了しなかったときに呼び出すメソッドを表す <see cref="T:System.Web.EndEventHandler" /> デリゲート。</span><span class="sxs-lookup"><span data-stu-id="03fa1-174">An <see cref="T:System.Web.EndEventHandler" /> delegate that represents the method to call when the task does not complete successfully within the time-out period.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="03fa1-175"><xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A>デリゲートはコンストラクターで設定されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-175">The <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is set in the constructor.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="03fa1-176">次のコード例では、3つの非同期タスクをページに登録し、それらを並行して実行します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-176">The following code example registers three asynchronous tasks to a page and executes them in parallel.</span></span> <span data-ttu-id="03fa1-177">各タスクは、5秒間だけスレッドをスリープ状態にするメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="03fa1-177">Each task calls a method that merely causes the thread to sleep for 5 seconds.</span></span> <span data-ttu-id="03fa1-178">デリゲート<xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A>は、各タスクに対して指定されます。</span><span class="sxs-lookup"><span data-stu-id="03fa1-178">A <xref:System.Web.UI.PageAsyncTask.TimeoutHandler%2A> delegate is specified for each task.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.PageAsyncTask#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/page_asynctask.aspx#1)]
 [!code-aspx-vb[System.Web.UI.PageAsyncTask#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/page_asynctask.aspx#1)]  
  
 [!code-csharp[System.Web.UI.PageAsyncTask#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/CS/App_Code/SlowTask.cs#2)]
 [!code-vb[System.Web.UI.PageAsyncTask#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.PageAsyncTask/VB/App_Code/SlowTask.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
