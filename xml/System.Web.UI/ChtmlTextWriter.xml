<Type Name="ChtmlTextWriter" FullName="System.Web.UI.ChtmlTextWriter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="104d2049917965e51df31d302ef405c67a321e2f" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69398998" /></Metadata><TypeSignature Language="C#" Value="public class ChtmlTextWriter : System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ChtmlTextWriter extends System.Web.UI.Html32TextWriter" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ChtmlTextWriter" />
  <TypeSignature Language="VB.NET" Value="Public Class ChtmlTextWriter&#xA;Inherits Html32TextWriter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChtmlTextWriter : System::Web::UI::Html32TextWriter" />
  <TypeSignature Language="F#" Value="type ChtmlTextWriter = class&#xA;    inherit Html32TextWriter" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.Html32TextWriter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>一連の cHTML 固有の文字とテキストを ASP.NET サーバー コントロールの出力ストリームに書き込みます。 <see cref="T:System.Web.UI.ChtmlTextWriter" /> クラスには、ASP.NET サーバー コントロールが cHTML コンテンツをクライアントに表示するときに使用する書式設定機能が用意されています。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Compact HTML (cHTML) は、HTML 2.0、HTML 3.2、HTML 4.0 のサブセットであり、メモリと CPU の容量が限られているデバイスでレンダリングするように設計されています。これには、小さなディスプレイ画面、限られた書式設定機能、および携帯電話などの限られた数の入力オプションがあります。タッチパッド)。 そのため、cHTML は次の機能をサポートしていません。  
  
-   JPEG イメージ。  
  
-   テーブル.  
  
-   画像マップ。  
  
-   複数の文字フォントとスタイル。  
  
-   背景色と画像。  
  
-   連結.  
  
-   スタイルシート。  
  
 クラスは<xref:System.Web.UI.Html32TextWriter>クラスから派生し、その機能の多くは、 <xref:System.Web.UI.Html32TextWriter> <xref:System.Web.UI.HtmlTextWriter>クラスであるすべてのマークアップテキストライターのと基本クラスによって提供されます。 <xref:System.Web.UI.ChtmlTextWriter>  
  
   
  
## Examples  
 クラスから派生したという名前`CustomChtmlTextWriter`のクラスを作成する方法を次のコード例に示します。 <xref:System.Web.UI.ChtmlTextWriter> 2つのコンストラクターを作成し<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> 、メソッドをオーバーライド`bgcolor`して、スタイル属性が<xref:System.Web.UI.ChtmlTextWriter>オブジェクトの出力ストリームに書き込まれないようにします。 また、という名前`ChtmlCustomPageAdapter`のクラスが作成されます。このクラスは、 `CustomChtmlTextWriter`クラスのインスタンスを作成して返すメソッドを`CreateCustomChtmlTextWriter`1 つ定義します。 次`CustomChtmlTextWriter`に、は、chtml マークアップを使用するブラウザーを使用して、ページの chtml コンテンツをデバイスにレンダリングします。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.XhtmlTextWriter" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Web.UI.ChtmlTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter writer" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">マークアップ コンテンツをレンダリングする <see cref="T:System.IO.TextWriter" />。</param>
        <summary>行のインデントに <see cref="T:System.Web.UI.ChtmlTextWriter" /> 定数を使用する <see cref="F:System.Web.UI.HtmlTextWriter.DefaultTabString" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスには、 <xref:System.Web.UI.HtmlTextWriter>クラスから直接または間接的に派生したすべてのクラスの標準である2つのコンストラクターがあります。 <xref:System.Web.UI.ChtmlTextWriter>  
  
 クラスのインスタンスをパラメーターとして受け取るコンストラクターは<xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> 、2番目のコンストラクターを呼び出し、2つのパラメーター値を渡します。 <xref:System.IO.TextWriter>  
  
-   <xref:System.IO.TextWriter>。  
  
-   <xref:System.Web.UI.HtmlTextWriter.DefaultTabString>フィールドに指定された文字列値。 XHTML テキストライターによって使用されるタブ間隔を定義します。  
  
   
  
## Examples  
 次のコード例は、という名前`ChtmlCustomPageAdapter`のクラスを作成し、 `CustomChtmlTextWriter`クラス`CreateCustomChtmlTextWriter`のインスタンスを作成して返すメソッドを1つ定義する方法を示しています。 次`CustomChtmlTextWriter`に、は、chtml マークアップを使用するブラウザーを使用して、ページの chtml コンテンツをデバイスにレンダリングします。  
  
 このコード例は、 <xref:System.Web.UI.ChtmlTextWriter>クラスに対して提供される大規模な例の一部です。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#3)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ChtmlTextWriter (System.IO.TextWriter writer, string tabString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.TextWriter writer, string tabString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.#ctor(System.IO.TextWriter,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (writer As TextWriter, tabString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ChtmlTextWriter(System::IO::TextWriter ^ writer, System::String ^ tabString);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.ChtmlTextWriter : System.IO.TextWriter * string -&gt; System.Web.UI.ChtmlTextWriter" Usage="new System.Web.UI.ChtmlTextWriter (writer, tabString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
        <Parameter Name="tabString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="writer">マークアップ コンテンツをレンダリングする <see cref="T:System.IO.TextWriter" />。</param>
        <param name="tabString"><see cref="P:System.Web.UI.HtmlTextWriter.Indent" /> で定義されている空白文字数。</param>
        <summary>指定した行インデントを使用して <see cref="T:System.Web.UI.ChtmlTextWriter" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クラスのインスタンス<xref:System.Web.UI.ChtmlTextWriter.%23ctor%2A> <xref:System.Web.UI.Html32TextWriter> <xref:System.Web.UI.ChtmlTextWriter>と文字列を両方ともパラメーターとして受け取るコンストラクターは、クラスのインスタンスを作成するときに同じパラメーターを受け取るコンストラクターを呼び出します。 <xref:System.IO.TextWriter>  
  
   
  
## Examples  
 クラスから派生したという名前`CustomChtmlTextWriter`のカスタムクラスを作成する方法を次のコード例に示します。 <xref:System.Web.UI.ChtmlTextWriter> この例では、 <xref:System.Web.UI.HtmlTextWriter>クラスから直接または間接的に派生したすべてのクラスと同じパターンを使用して、カスタムクラスのインスタンスを作成するために使用できる2つのコンストラクターを作成します。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#1)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member AddRecognizedAttribute : string * string -&gt; unit&#xA;override this.AddRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.AddRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">属性を追加する cHTML 要素。</param>
        <param name="attributeName"><paramref name="elementName" /> に追加する属性。</param>
        <summary><see cref="T:System.Web.UI.ChtmlTextWriter" /> オブジェクトの cHTML 要素に属性を追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A>は、cHTML 要素に属性を追加します。 認識される属性は、 <xref:System.Collections.Hashtable> <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A>プロパティによって参照さ<xref:System.Web.UI.ChtmlTextWriter>れるオブジェクトの認識された属性コレクションに格納されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GlobalSuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable GlobalSuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable GlobalSuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property GlobalSuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ GlobalSuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GlobalSuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>cHTML 要素に出力できないグローバル非表示属性の <see cref="T:System.Collections.Hashtable" /> オブジェクトを取得します。</summary>
        <value>グローバル非表示 cHTML 属性の <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 次の一覧は、 <xref:System.Web.UI.ChtmlTextWriter>クラスの新しいインスタンスが作成されるときに設定される、グローバルに抑制された属性を示しています。  
  
|||  
|-|-|  
|`onclick`|`onmousemove`|  
|`ondblclick`|`onmouseout`|  
|`onmousedown`|`onkeypress`|  
|`onmouseup`|`onkeydown`|  
|`onmouseover`|`onkeyup`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      </Docs>
    </Member>
    <Member MemberName="OnAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterAttribute key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterAttribute key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnAttributeRender (name As String, value As String, key As HtmlTextWriterAttribute) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterAttribute key);" />
      <MemberSignature Language="F#" Value="override this.OnAttributeRender : string * string * System.Web.UI.HtmlTextWriterAttribute -&gt; bool" Usage="chtmlTextWriter.OnAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterAttribute" />
      </Parameters>
      <Docs>
        <param name="name">表示する cHTML 属性。</param>
        <param name="value"><paramref name="name" /> に代入する値。</param>
        <param name="key"><paramref name="name" /> に関連付けられた <see cref="T:System.Web.UI.HtmlTextWriterAttribute" />。</param>
        <summary>指定した cHTML 属性とその値を要求側のページに表示するかどうかを決定します。 <see cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" /> クラスの派生クラスで、cHTML 対応デバイスに表示しない属性を除外するように <see cref="T:System.Web.UI.ChtmlTextWriter" /> メソッドをオーバーライドできます。</summary>
        <returns><see cref="T:System.Web.UI.ChtmlTextWriter" /> 出力ストリームにその属性と値を書き込む場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 既定では、 <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>メソッドは、プロパティに一覧表示<xref:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes%2A>されるグローバルに抑制された属性と、 <xref:System.Web.UI.ChtmlTextWriter.SuppressedAttributes%2A>プロパティに示されている要素固有の抑制された属性を出力ストリームに書き込むことを防止します。 クラスから派生したクラスの<xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>メソッドの動作をオーバーライドできます。 <xref:System.Web.UI.ChtmlTextWriter>  
  
   
  
## Examples  
 次のコード例は、 <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A>メソッドをオーバーライドするカスタムクラスを使用して、属性が`bgcolor` cHTML 出力ストリームに書き込まれないようにする方法を示しています。 次に、 <xref:System.Web.UI.ChtmlTextWriter.OnAttributeRender%2A> <xref:System.Web.UI.ChtmlTextWriter>クラスから基本メソッドによって提供される機能を呼び出して、既定の動作も確実に使用されるようにします。  
  
 このコード例は、 <xref:System.Web.UI.ChtmlTextWriter>クラスに対して提供される大規模な例の一部です。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/cs/chtmltextwriter.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample4/vb/chtmltextwriter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      </Docs>
    </Member>
    <Member MemberName="OnStyleAttributeRender">
      <MemberSignature Language="C#" Value="protected override bool OnStyleAttributeRender (string name, string value, System.Web.UI.HtmlTextWriterStyle key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnStyleAttributeRender(string name, string value, valuetype System.Web.UI.HtmlTextWriterStyle key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterStyle)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnStyleAttributeRender (name As String, value As String, key As HtmlTextWriterStyle) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnStyleAttributeRender(System::String ^ name, System::String ^ value, System::Web::UI::HtmlTextWriterStyle key);" />
      <MemberSignature Language="F#" Value="override this.OnStyleAttributeRender : string * string * System.Web.UI.HtmlTextWriterStyle -&gt; bool" Usage="chtmlTextWriter.OnStyleAttributeRender (name, value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterStyle" />
      </Parameters>
      <Docs>
        <param name="name">レンダリングするスタイル属性の名前を格納している文字列。</param>
        <param name="value"><paramref name="name" /> に割り当てる値を格納している文字列。</param>
        <param name="key"><paramref name="name" /> に関連付けられた <see cref="T:System.Web.UI.HtmlTextWriterStyle" />。</param>
        <summary>指定された cHTML マークアップ スタイル属性とその値を現在のマークアップ要素に出力するかどうかを決定します。</summary>
        <returns>スタイルを出力できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 が<xref:System.Web.UI.ChtmlTextWriter.OnStyleAttributeRender%2A> <xref:System.Web.UI.HtmlTextWriterStyle.TextDecoration>フィールドと`false`等しく`key` 、値が`"line-through"`の場合、メソッドはを返します。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.HtmlTextWriterStyle" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.OnAttributeRender(System.String,System.String,System.Web.UI.HtmlTextWriterAttribute)" />
      </Docs>
    </Member>
    <Member MemberName="OnTagRender">
      <MemberSignature Language="C#" Value="protected override bool OnTagRender (string name, System.Web.UI.HtmlTextWriterTag key);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool OnTagRender(string name, valuetype System.Web.UI.HtmlTextWriterTag key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function OnTagRender (name As String, key As HtmlTextWriterTag) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool OnTagRender(System::String ^ name, System::Web::UI::HtmlTextWriterTag key);" />
      <MemberSignature Language="F#" Value="override this.OnTagRender : string * System.Web.UI.HtmlTextWriterTag -&gt; bool" Usage="chtmlTextWriter.OnTagRender (name, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="key" Type="System.Web.UI.HtmlTextWriterTag" />
      </Parameters>
      <Docs>
        <param name="name">出力する cHTML 要素の名前を格納している文字列。</param>
        <param name="key"><paramref name="name" /> に関連付けられた <see cref="T:System.Web.UI.HtmlTextWriterTag" />。</param>
        <summary>指定した cHTML マークアップ要素を要求側のページに表示するかどうかを決定します。</summary>
        <returns>指定した cHTML マークアップ要素を出力できる場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CHTML 要素が`span`要素の場合、メソッドは<xref:System.Web.UI.ChtmlTextWriter.OnTagRender%2A>を返し`false`ます。 それ以外のすべてのタグで`true`は、が返されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.HtmlTextWriter.OnTagRender(System.String,System.Web.UI.HtmlTextWriterTag)" />
      </Docs>
    </Member>
    <Member MemberName="RecognizedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable RecognizedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable RecognizedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property RecognizedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ RecognizedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RecognizedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>cHTML 要素に出力できる認識済み属性の <see cref="T:System.Collections.Hashtable" /> オブジェクトを取得します。</summary>
        <value>認識済み cHTML 属性の <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 認識さ<xref:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute%2A>れた属性を認識された属性のコレクションに追加するには、メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveRecognizedAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveRecognizedAttribute (string elementName, string attributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRecognizedAttribute(string elementName, string attributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveRecognizedAttribute (elementName As String, attributeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveRecognizedAttribute(System::String ^ elementName, System::String ^ attributeName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveRecognizedAttribute : string * string -&gt; unit&#xA;override this.RemoveRecognizedAttribute : string * string -&gt; unit" Usage="chtmlTextWriter.RemoveRecognizedAttribute (elementName, attributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementName" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="elementName">属性を削除する cHTML 要素。</param>
        <param name="attributeName"><paramref name="elementName" /> から削除する属性。</param>
        <summary><see cref="T:System.Web.UI.ChtmlTextWriter" /> オブジェクトの cHTML 要素の属性を削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッド<xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A>は、cHTML 要素から属性を削除します。 認識された属性は、 <xref:System.Collections.Hashtable> <xref:System.Web.UI.ChtmlTextWriter.RecognizedAttributes%2A>プロパティによって参照<xref:System.Web.UI.ChtmlTextWriter>されるオブジェクトの認識された属性コレクションから削除されます。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.AddRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="SuppressedAttributes">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable SuppressedAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Hashtable SuppressedAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property SuppressedAttributes As Hashtable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Collections::Hashtable ^ SuppressedAttributes { System::Collections::Hashtable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SuppressedAttributes : System.Collections.Hashtable" Usage="System.Web.UI.ChtmlTextWriter.SuppressedAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>cHTML 要素に出力されないユーザー指定の非表示属性の <see cref="T:System.Collections.Hashtable" /> オブジェクトを取得します。</summary>
        <value>非表示 cHTML 属性の <see cref="T:System.Collections.Hashtable" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute%2A>メソッドを使用して、抑制された属性のコレクションに属性を追加します。  
  
 次の一覧は、 `div` <xref:System.Web.UI.ChtmlTextWriter>クラスの新しいインスタンスが作成されたときに、要素に対して設定される既定の抑制された属性を示しています。  
  
|||  
|-|-|  
|`accesskey`|`gridlines`|  
|`cellspacing`|`rules`|  
|`cellpadding`||  
  
 次の一覧は、 `span` <xref:System.Web.UI.ChtmlTextWriter>クラスの新しいインスタンスが作成されたときに、要素に対して設定される既定の抑制された属性を示しています。  
  
|||  
|-|-|  
|`cellspacing`|`gridlines`|  
|`cellpadding`|`rules`|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.GlobalSuppressedAttributes" />
        <altmember cref="P:System.Web.UI.ChtmlTextWriter.RecognizedAttributes" />
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.RemoveRecognizedAttribute(System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteBreak">
      <MemberSignature Language="C#" Value="public override void WriteBreak ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteBreak() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteBreak ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteBreak();" />
      <MemberSignature Language="F#" Value="override this.WriteBreak : unit -&gt; unit" Usage="chtmlTextWriter.WriteBreak " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see langword="br" /> 要素を cHTML 出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 CHTML の<xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A>ストリームに改行を挿入するには、メソッドを使用します。  
  
   
  
## Examples  
 このセクションには、2 つのコード例が含まれています。 最初のコード例では、cHTML クラスとカスタムプロパティを作成する方法を示します。 2番目のコード例は、Web ページでカスタムクラスを使用する方法を示しています。  
  
 カスタム`ChtmlSimplelabelAdapter`アダプターを使用するには、.NET Framework 構成ディレクトリのブラウザーのサブディレクトリ、または Web の App_Browsers ディレクトリにあるカスタムブラウザーファイルに、次のコードを追加します。アプリケーションルート。  
  
```  
<controlAdapters>  
   <adapter controlType="AspNet.Samples.SimpleLabel"  
   adapterType="AspNet.Samples.ChtmlSimpleLabelAdapter" />  
</controlAdapters>  
```  
  
 という名前`ChtmlSimpleLabelAdapter` `SimpleLabel`のクラスに対してという名前の cHTML アダプタークラスを作成する方法を次のコード例に示します。 クラスが`SimpleLabel`クラスの`Control`メンバーにアクセス`ChtmlSimpleLabelAdapter`できるようにするカスタムプロパティを作成し、 <xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A>メソッドをオーバーライドします。 オーバーライドでは、次の処理が行われます。  
  
-   この<xref:System.Web.UI.ChtmlTextWriter>メソッドは<xref:System.Web.UI.HtmlTextWriter> `writer` `w` 、という名前のオブジェクトへの参照を作成します。このオブジェクトは、メソッドのパラメーターとして渡されるオブジェクトから派生します。<xref:System.Web.UI.WebControls.Adapters.WebControlAdapter.Render%2A>  
  
-   文字列を作成し、 `SimpleLabel.Text`値と同じに設定します。  
  
-   このメソッドは<xref:System.Web.UI.HtmlTextWriter.EnterStyle%2A> 、ラベルの<xref:System.Web.UI.WebControls.WebControl.ControlStyle%2A>プロパティで定義されているスタイルを cHTML 出力ストリームに適用するために、メソッドを呼び出します。  
  
-   このメソッドは`Text` <xref:System.Web.UI.HtmlTextWriter.ExitStyle%2A> 、プロパティ値をストリームに書き込み、メソッドを呼び出すことによってスタイルブロックを閉じます。  
  
-   テキストとスタイル<xref:System.Web.UI.ChtmlTextWriter.WriteBreak%2A>がレンダリングされ`br`た後、メソッドを呼び出して、要素を出力ストリームにレンダリングします。  
  
 [!code-csharp[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.cs#2)]
 [!code-vb[System.Web.UI.ChtmlTextWriter_Sample1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.vb#2)]  
  
 次の例は、Web ページで`SimpleLabel`クラスを使用する方法を示しています。  
  
 [!code-aspx-csharp[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/cs/chtmltestlabel.aspx#3)]
 [!code-aspx-vb[System.Web.UI.ChtmlTextWriter_Sample1#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ChtmlTextWriter_Sample1/VB/chtmltestlabel.aspx#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="WriteEncodedText">
      <MemberSignature Language="C#" Value="public override void WriteEncodedText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WriteEncodedText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ChtmlTextWriter.WriteEncodedText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub WriteEncodedText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void WriteEncodedText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.WriteEncodedText : string -&gt; unit" Usage="chtmlTextWriter.WriteEncodedText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">エンコードして出力ストリームに書き込む文字列。</param>
        <summary>要求元のデバイスで指定したテキストをエンコードし、それを出力ストリームに書き込みます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>メソッドに渡されたテキストパラメーターが`null`であるか、または長さがゼロの場合、何も書き込まれません。  
  
 文字列に<xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>山かっこ (\<または >) またはアンパサンド (&) が含まれている場合に、要求元のデバイスで正しくレンダリングされるようにするには、メソッドを使用します。  
  
 メソッド<xref:System.Web.UI.ChtmlTextWriter.WriteEncodedText%2A>は、基底クラスの<xref:System.Web.UI.HtmlTextWriter.WriteEncodedText%2A>メソッドを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ChtmlTextWriter.WriteBreak" />
      </Docs>
    </Member>
  </Members>
</Type>
