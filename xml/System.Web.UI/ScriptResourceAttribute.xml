<Type Name="ScriptResourceAttribute" FullName="System.Web.UI.ScriptResourceAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="94a33330afd8e7e4537338deb4bca5607f4c9a9e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30608356" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ScriptResourceAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ScriptResourceAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ScriptResourceAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ScriptResourceAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ScriptResourceAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>クライアント スクリプト ファイルから使用されるアセンブリ内のリソースを定義します。 このクラスは継承できません。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptResourceAttribute>クラスは、使用する場合のみ、アセンブリの宣言で無効です。 使用するアセンブリ内の指定された埋め込みスクリプト リソースを有効にします。 埋め込みのスクリプト ライブラリの名前、スクリプト ライブラリのリソース ファイルの名前およびリソースの値を取得するためのスクリプト ファイルで使用される名前を定義することができます。 <xref:System.Web.UI.ScriptManager>クラスでプロパティを使用して<xref:System.Web.UI.ScriptResourceAttribute>スクリプト ライブラリの適切なリソース名を特定します。 <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A>プロパティは、リソースを指定するリソース キーで使用します。  
  
> [!NOTE]
>  <xref:System.Web.UI.ScriptResourceAttribute>クラスは、JavaScript ファイルのテキスト ベースのリソースの特定にのみ使用できます。 特定のカルチャにローカライズされたイメージ (バイナリ) ファイルを関連付ける、解決済みおよびに読み込まれたスクリプトをする、ローカライズされたリソースとしては、その URL を格納することを検討してください。  
  
   
  
## Examples  
 次の例は、 <xref:System.Web.UI.ScriptResourceAttribute> VerificationResources リソース ファイルからリソースを使用する CheckAnswer.js をという名前のスクリプト ファイルの属性です。 名前`Answer`これらのリソースを参照するために使用します。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトでリソースを使用する方法を示します。 リソース キー (`Correct`と`Incorrect`) が付きます。`Answer`をの値を含むリソース定義のスクリプトを識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ScriptResourceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scriptName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptResourceAttribute(System::String ^ scriptName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">スクリプト ライブラリの名前。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptResourceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ScriptResourceAttribute (string scriptName, string stringResourceName, string stringResourceClientTypeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string scriptName, string stringResourceName, string stringResourceClientTypeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ScriptResourceAttribute.#ctor(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (scriptName As String, stringResourceName As String, stringResourceClientTypeName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ScriptResourceAttribute(System::String ^ scriptName, System::String ^ stringResourceName, System::String ^ stringResourceClientTypeName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="scriptName" Type="System.String" />
        <Parameter Name="stringResourceName" Type="System.String" />
        <Parameter Name="stringResourceClientTypeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="scriptName">スクリプト ライブラリの名前。</param>
        <param name="stringResourceName">スクリプト ライブラリのリソース ファイルの名前。</param>
        <param name="stringResourceClientTypeName">リソース ファイル内の値に使用するために作成する型の名前。</param>
        <summary>
          <see cref="T:System.Web.UI.ScriptResourceAttribute" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptResourceAttribute.%23ctor%2A>は通常メソッドを使用して、<xref:System.Web.UI.ScriptResourceAttribute>アプリケーションの AssemblyInfo ファイル内のアセンブリ属性と属性。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="scriptName" />、<paramref name="scriptResourceName" />、または <paramref name="typeName" /> が <see langword="null" /> または空の文字列 ("") です。</exception>
      </Docs>
    </Member>
    <Member MemberName="ScriptName">
      <MemberSignature Language="C#" Value="public string ScriptName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScriptName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スクリプト ライブラリの名前を取得します。</summary>
        <value>スクリプト ライブラリの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、 <xref:System.Web.UI.ScriptResourceAttribute> VerificationResources リソース ファイルからリソースを使用する CheckAnswer.js をという名前のスクリプト ファイルの属性です。 名前`Answer`これらのリソースを参照するために使用します。 この例では、 <xref:System.Web.UI.ScriptResourceAttribute.ScriptName%2A> "LocalizingResources.CheckAnswer.js"を返します。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトでリソースを使用する方法を示します。 リソース キー (`Correct`と`Incorrect`) が付きます。`Answer`をの値を含むリソース定義のスクリプトを識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScriptResourceName">
      <MemberSignature Language="C#" Value="public string ScriptResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ScriptResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.ScriptResourceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScriptResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ScriptResourceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スクリプト ライブラリのリソース ファイルの名前を取得します。</summary>
        <value>スクリプト ライブラリのリソース ファイルの名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次の例は、 <xref:System.Web.UI.ScriptResourceAttribute> VerificationResources リソース ファイルからリソースを使用する CheckAnswer.js をという名前のスクリプト ファイルの属性です。 名前`Answer`これらのリソースを参照するために使用します。 この例では、 <xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A> "LocalizingResources.VerificationResources"を返します。 ファイル名の拡張子は含まれませんを定義するとき、<xref:System.Web.UI.ScriptResourceAttribute.ScriptResourceName%2A>です。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトでリソースを使用する方法を示します。 リソース キー (`Correct`と`Incorrect`) が付きます。`Answer`をの値を含むリソース定義のスクリプトを識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceClientTypeName">
      <MemberSignature Language="C#" Value="public string StringResourceClientTypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceClientTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceClientTypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StringResourceClientTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringResourceClientTypeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソース ファイル内の値に使用するために作成するクライアント型の名前を取得します。</summary>
        <value>クライアント型の名前。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringResourceName">
      <MemberSignature Language="C#" Value="public string StringResourceName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringResourceName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.StringResourceName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StringResourceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringResourceName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>スクリプト ライブラリのリソース ファイルの名前を取得します。</summary>
        <value>リソース ファイルの名前。</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ScriptResourceAttribute.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("This property is obsolete. Use StringResourceClientTypeName instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>リソース ファイル内の値を取得するときに使用される名前を取得します。</summary>
        <value>リソース ファイル内の値を取得するときにクライアント スクリプトで使用される名前。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A>プロパティには、クライアント スクリプトのローカライズされたリソースを取得するために使用される値が含まれています。 クライアント スクリプトを含める必要があります、<xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A>値とキーの名前のリソースをローカライズします。  
  
   
  
## Examples  
 次の例は、 <xref:System.Web.UI.ScriptResourceAttribute> VerificationResources リソース ファイルからリソースを使用する CheckAnswer.js をという名前のスクリプト ファイルの属性です。 名前`Answer`これらのリソースを参照するために使用します。 この例では、<xref:System.Web.UI.ScriptResourceAttribute.TypeName%2A>プロパティが「応答」を返します。  
  
 [!code-csharp[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/AssemblyInfo.cs#3)]
 [!code-vb[LocalizingClientResourcesWalkthrough#3](~/samples/snippets/visualbasic/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/vb/AssemblyInfo.vb#3)]  
  
 次の例では、クライアント スクリプトでリソースを使用する方法を示します。 リソース キー (`Correct`と`Incorrect`) が付きます。`Answer`をの値を含むリソース定義のスクリプトを識別します。  
  
 [!code-javascript[LocalizingClientResourcesWalkthrough#1](~/samples/snippets/csharp/VS_Snippets_Atlas/LocalizingClientResourcesWalkthrough/cs/CheckAnswer.js#1)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>