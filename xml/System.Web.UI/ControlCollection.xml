<Type Name="ControlCollection" FullName="System.Web.UI.ControlCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7ce8a04ebeabf8eeeecb4b364c0e6ae28cf5fa99" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="HT" />
    <Meta Name="ms.contentlocale" Value="ja-JP" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30610186" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ControlCollection : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ControlCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ControlCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ControlCollection&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class ControlCollection : System::Collections::ICollection" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>ASP.NET サーバー コントロールが子コントロールのリストを維持できるようにする、コレクション コンテナーを提供します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 メソッドとプロパティのいずれかにアクセスできる、<xref:System.Web.UI.ControlCollection>クラスを通じて、<xref:System.Web.UI.Control.Controls%2A?displayProperty=nameWithType>プロパティです。 以降、<xref:System.Web.UI.Control>クラスは、すべての ASP.NET サーバー コントロールの基底クラス、すべてのサーバー コントロールは、このプロパティを継承します。  
  
 コレクションの詳細については、次を参照してください。[コレクションとデータ構造体](http://msdn.microsoft.com/library/60cc581f-1db5-445b-ba04-a173396bf872)です。  
  
   
  
## Examples  
 次のコード例の上書き、<xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType>メソッドを 2 つのコントロール、という名前のカスタム クラスの両方のインスタンスを作成`ChildControl`、という名前の文字列プロパティを持つ`Message`します。 2 つのコントロールを追加作成すると、<xref:System.Web.UI.ControlCollection>です。 <xref:System.Web.UI.ControlCollection.Add%2A>でこれらの各コントロールをこのバージョンを含むクラスに追加するメソッドが呼び出さ<xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType>です。 <xref:System.Web.UI.Control.ChildControlsCreated%2A>プロパティに設定されている`true`できるように、これらのコントロールが不必要に再作成されません。  
  
 [!code-csharp[Control_Sample_1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Control_Sample_1/CS/control_sample.cs#1)]
 [!code-vb[Control_Sample_1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Control_Sample_1/VB/control_sample.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Control" />
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.UI.Control.Controls" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ControlCollection (System.Web.UI.Control owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Web.UI.Control owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.#ctor(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ControlCollection(System::Web::UI::Control ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="owner">コントロール コレクションが作成される対象となる ASP.NET サーバー コントロール。</param>
        <summary>指定した親サーバー コントロールの <see cref="T:System.Web.UI.ControlCollection" /> クラスの新しいインスタンスを初期化します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、カスタム<xref:System.Web.UI.ControlCollection>メッセージを書き込むためのコンス トラクターをオーバーライドするクラス (の名前が組み込まれている、<xref:System.Web.UI.ControlCollection.Owner%2A>プロパティ)、コレクションのインスタンスが作成されるときのトレース ログにします。 ページのトレースまたはこの例を実行するアプリケーションを有効にする必要があります。  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="owner" /> パラメーターが <see langword="null" /> である場合に発生します。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Web.UI.Control" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual void Add (System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Add(class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Add (child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Add(System::Web::UI::Control ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="child">コレクションに追加する <see cref="T:System.Web.UI.Control" />。</param>
        <summary>指定した <see cref="T:System.Web.UI.Control" /> オブジェクトをコレクションに追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 新しいコントロールは、序数に基づくインデックスの配列の末尾に追加されます。 コントロールは、ASP.NET サーバー コントロールを作成すると、カスタム サーバー コントロールまたはリテラル コントロールのインスタンスを指定できます。  
  
 コレクションの特定のインデックス位置にコントロールを追加するには、使用、<xref:System.Web.UI.ControlCollection.AddAt%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.UI.ControlCollection.Add%2A>おり、その多くがから取得され、サーバー コントロールのビュー状態、カスタム テンプレート コントロールのテンプレート項目の系列を追加するメソッド。  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="child" /> パラメーターがコントロールを指定しない場合にスローされます。</exception>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.ControlCollection" /> が読み取り専用の場合にスローされます。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="AddAt">
      <MemberSignature Language="C#" Value="public virtual void AddAt (int index, System.Web.UI.Control child);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAt(int32 index, class System.Web.UI.Control child) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.AddAt(System.Int32,System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddAt (index As Integer, child As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddAt(int index, System::Web::UI::Control ^ child);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="child" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="index">子コントロールを追加する配列内の位置。</param>
        <param name="child">コレクションに追加する <see cref="T:System.Web.UI.Control" />。</param>
        <summary>指定したインデックス位置に、指定した <see cref="T:System.Web.UI.Control" /> オブジェクトを追加します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 追加したコントロールには、ASP.NET サーバー コントロールを作成すると、カスタム サーバー コントロールまたはリテラル コントロールのインスタンスを指定できます。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.UI.ControlCollection.AddAt%2A>メソッドを作成、新しい<xref:System.Web.UI.LiteralControl>という名前`ChildControl2`に追加し、`myButton`コントロールの<xref:System.Web.UI.ControlCollection>1 のインデックス位置にあるコレクション。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="child" /> パラメーターがコントロールを指定しません。</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターが 0 未満か、<see cref="P:System.Web.UI.ControlCollection.Count" /> プロパティより大きい値です。</exception>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.ControlCollection" /> は読み取り専用です。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Add(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>現在のサーバー コントロールの <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトからすべてのコントロールを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを使用して、空のカスタム コントロールの<xref:System.Web.UI.ControlCollection>オーバーライドする場合、<xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType>と<xref:System.Web.UI.Control.DataBind%2A>メソッドです。 複合、テンプレートのコントロールまたはテンプレート宣言されたデータ バインド コントロールを開発する際に、これを行います。  
  
   
  
## Examples  
 次のコード例では、オーバーライドを示しています、<xref:System.Web.UI.Control.CreateChildControls%2A?displayProperty=nameWithType>メソッド、およびを使用して、<xref:System.Web.UI.ControlCollection.Clear%2A>メソッドすべての子コントロール以前に削除する場合、<xref:System.Web.UI.ControlCollection>オブジェクト。 ここで行う必要があります、コントロールの内のオブジェクトを古いように<xref:System.Web.UI.ControlCollection>不適切は表示されません。  
  
 [!code-csharp[TemplatedDataBoundControl#2](~/samples/snippets/csharp/VS_Snippets_WebNet/TemplatedDataBoundControl/CS/templatedataboundcontrol.cs#2)]
 [!code-vb[TemplatedDataBoundControl#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/TemplatedDataBoundControl/VB/templatedataboundcontrol.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (System.Web.UI.Control c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class System.Web.UI.Control c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Contains(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Contains (c As Control) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Web::UI::Control ^ c);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="c">コレクション内で検索されるサーバー コントロール。</param>
        <summary>指定したサーバー コントロールが親サーバー コントロールの <see cref="T:System.Web.UI.ControlCollection" /> オブジェクト内にあるかどうかを確認します。</summary>
        <returns>
          指定されたサーバー コントロールがコレクションにある場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-csharp[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/CS/ctrlcollection_contains.cs.aspx#1)]
 [!code-vb[System.Web.UI.ctrlCollection_Contains#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.CtrlCollection_Contains/VB/ctrlcollection_contains.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public virtual void CopyTo (Array array, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array array, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ array, int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">子コントロールのコピー先の <see cref="T:System.Array" />。</param>
        <param name="index">コピーの開始位置となる、<c>array</c> の 0 から始まる相対インデックス番号。</param>
        <summary>
          <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトに格納されている子コントロールを、<see cref="T:System.Array" /> オブジェクトに、<see cref="T:System.Array" /> 内の指定したインデックス位置からコピーします。</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Web.HttpException">
          <paramref name="array" /> が <see langword="null" /> ではなく、1 次元でもありません。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="T:System.Array" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>指定された ASP.NET サーバー コントロールの <see cref="T:System.Web.UI.ControlCollection" /> オブジェクト内にあるサーバー コントロールの数を取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.ControlCollection" /> 内のサーバー コントロールの数。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例を使用する方法を示しています、<xref:System.Web.UI.ControlCollection.Count%2A>プロパティ、コントロールの反復処理に<xref:System.Web.UI.ControlCollection>オブジェクト。 使用、<xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType>プロパティは、コントロールに子コントロールがあることを確認します。 場合<xref:System.Web.UI.Control.HasControls%2A?displayProperty=nameWithType>返します`false`、残りのコードは実行されません。  
  
 [!code-csharp[Classic Control.HasControls Example#1](~/samples/snippets/csharp/VS_Snippets_WebNet/Classic Control.HasControls Example/CS/source.cs#1)]
 [!code-vb[Classic Control.HasControls Example#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/Classic Control.HasControls Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトを反復処理できる列挙子を取得します。</summary>
        <returns>コレクションを反復処理する列挙子。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、列挙するメソッドを作成、<xref:System.Web.UI.ControlCollection>のコレクション、<xref:System.Web.UI.WebControls.Button>コントロール、`myButton`です。 列挙子の作成時に、<xref:System.Web.UI.ControlCollection.IsSynchronized%2A>操作がスレッド セーフである場合とがない場合は、表示するプロパティがオン、<xref:System.Web.UI.ControlCollection.SyncRoot%2A>が操作スレッドを安全にすること、オブジェクトを取得するプロパティを使用します。 列挙が完了すると、値の<xref:System.Web.UI.ControlCollection.IsReadOnly%2A>としてプロパティの書き込み、<xref:System.Web.UI.WebControls.Label.Text%2A>のプロパティ、<xref:System.Web.UI.WebControls.Label>を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IEnumerator" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual int IndexOf (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.IndexOf(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOf (value As Control) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Web::UI::Control ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">インデックスを返す対象となる <see cref="T:System.Web.UI.Control" />。</param>
        <summary>コレクション内の指定した <see cref="T:System.Web.UI.Control" /> オブジェクトのインデックスを取得します。</summary>
        <returns>指定したサーバー コントロールのインデックス。 サーバー コントロールが現在コレクションのメンバーではない場合は -1 が返されます。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 指定されたサーバー コントロールでのインデックス位置を決定するには、このメソッドを使用して、<xref:System.Web.UI.ControlCollection>オブジェクト。  
  
   
  
## Examples  
 次のコード例では、 <xref:System.Web.UI.ControlCollection.IndexOf%2A> 、コントロールのインデックス位置に書き込むメソッド`myLiteralControl`で、<xref:System.Web.UI.ControlCollection>のコレクション、<xref:System.Web.UI.WebControls.Button>という名前のコントロール`myButton`です。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#1)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトが読み取り専用かどうかを示す値を取得します。</summary>
        <value>
          コントロールが読み取り専用の場合は <see langword="true" />。それ以外の場合は <see langword="false" />。 既定値は、<see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、列挙するメソッドを作成、<xref:System.Web.UI.ControlCollection>のコレクション、<xref:System.Web.UI.WebControls.Button>コントロール、`myButton`です。 列挙子の作成時に、<xref:System.Web.UI.ControlCollection.IsSynchronized%2A>操作がスレッド セーフである場合とがない場合は、表示するプロパティがオン、<xref:System.Web.UI.ControlCollection.SyncRoot%2A>が操作スレッドを安全にすること、オブジェクトを取得するプロパティを使用します。 列挙が完了すると、値の<xref:System.Web.UI.ControlCollection.IsReadOnly%2A>としてプロパティの書き込み、<xref:System.Web.UI.WebControls.Label.Text%2A>のプロパティ、<xref:System.Web.UI.WebControls.Label>を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.IsSynchronized" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSynchronized As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトの同期がとられているかどうかを示す値を取得します。</summary>
        <value>このプロパティは常に <see langword="false" /> です。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、列挙するメソッドを作成、<xref:System.Web.UI.ControlCollection>のコレクション、<xref:System.Web.UI.WebControls.Button>コントロール、`myButton`です。 列挙子の作成時に、<xref:System.Web.UI.ControlCollection.IsSynchronized%2A>操作がスレッド セーフである場合とがない場合は、表示するプロパティがオン、<xref:System.Web.UI.ControlCollection.SyncRoot%2A>が操作スレッドを安全にすること、オブジェクトを取得するプロパティを使用します。 列挙が完了すると、値の<xref:System.Web.UI.ControlCollection.IsReadOnly%2A>としてプロパティの書き込み、<xref:System.Web.UI.WebControls.Label.Text%2A>のプロパティ、<xref:System.Web.UI.WebControls.Label>を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.Control this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Web::UI::Control ^ default[int] { System::Web::UI::Control ^ get(int index); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">
          <see cref="T:System.Web.UI.ControlCollection" /> 内のサーバー コントロールの位置。</param>
        <summary>
          <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトの指定されたインデックス位置にあるサーバー コントロールへの参照を取得します。</summary>
        <value>コントロールへの参照。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例では、<xref:System.Web.UI.ControlCollection.Item%2A>で子のインデックス位置を制御するを指定するプロパティが削除されて、<xref:System.Web.UI.ControlCollection.Remove%2A>メソッドの呼び出しです。 これを行う、`myButton.Controls.Remove`構文です。  
  
 [!code-aspx-csharp[ControlCollection_ReSubmit_2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/CS/controlcollection_copyto.cs.aspx#1)]
 [!code-aspx-vb[ControlCollection_ReSubmit_2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/ControlCollection_ReSubmit_2/VB/controlcollection_copyto.vb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> パラメーターが 0 未満か、<see cref="P:System.Web.UI.ControlCollection.Count" /> 以上です。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Owner">
      <MemberSignature Language="C#" Value="protected System.Web.UI.Control Owner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.Control Owner" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.Owner" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Owner As Control" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::Web::UI::Control ^ Owner { System::Web::UI::Control ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトが属する ASP.NET サーバー コントロールを取得します。</summary>
        <value>
          <see cref="T:System.Web.UI.Control" /> が属する <see cref="T:System.Web.UI.ControlCollection" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、カスタム<xref:System.Web.UI.ControlCollection>をオーバーライドするクラス、<xref:System.Web.UI.ControlCollection.%23ctor%2A>メッセージに書き込むメソッド (の名前が組み込まれている、<xref:System.Web.UI.ControlCollection.Owner%2A>プロパティ)、コレクションのインスタンスが作成されるときのトレース ログにします。 ページのトレースまたはこの例を実行するアプリケーションを有効にする必要があります。  
  
 [!code-csharp[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/cs/controlcollection_7.cs#1)]
 [!code-vb[System.Web.UI.ControlCollection_CTor_Owner#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_CTor_Owner/VB/controlcollection_7.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Web.UI.Control value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Web.UI.Control value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (value As Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Web::UI::Control ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="value">削除されるサーバー コントロール。</param>
        <summary>親サーバー コントロールの <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトから、指定したサーバー コントロールを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 インデックス位置からコントロールを削除するには、使用、<xref:System.Web.UI.ControlCollection.RemoveAt%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.UI.ControlCollection.Remove%2A>から子コントロールを削除する方法、`myButton`サーバー コントロールです。 最初のコードを使用して、<xref:System.Web.UI.ControlCollection.Contains%2A>メソッドを呼び出せば確認するかどうか、`myChildControl`に含まれる、<xref:System.Web.UI.ControlCollection>オブジェクト、およびである場合は削除されます。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#4)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ControlCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">コレクションから削除されるサーバー コントロールの序数インデックス。</param>
        <summary>
          <see cref="T:System.Web.UI.ControlCollection" /> オブジェクトから、指定したインデックス位置にある子コントロールを削除します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 コントロール コレクションから削除する、その値に基づいて、使用、<xref:System.Web.UI.ControlCollection.Remove%2A>メソッドです。  
  
   
  
## Examples  
 次のコード例では、<xref:System.Web.UI.ControlCollection.RemoveAt%2A>から子コントロールを削除する方法、`myButton`サーバー コントロールです。 メソッドの呼び出しは、まずコントロールの削除元となる 1 のインデックス位置を指定します。 次に、親への書き込み、ページから、その場所でコントロールが削除されたことを示すテキスト メッセージ、<xref:System.Web.UI.ControlCollection>コレクション。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#5)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Web.HttpException">
          <see cref="T:System.Web.UI.ControlCollection" /> が読み取り専用の場合にスローされます。</exception>
        <altmember cref="P:System.Web.UI.Control.Controls" />
        <altmember cref="M:System.Web.UI.ControlCollection.Remove(System.Web.UI.Control)" />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.ControlCollection.SyncRoot" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SyncRoot As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>コントロールのコレクションへのアクセスを同期するために使用するオブジェクトを取得します。</summary>
        <value>コレクションを同期するために使用する <see cref="T:System.Object" />。</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例は、列挙するメソッドを作成、<xref:System.Web.UI.ControlCollection>のコレクション、<xref:System.Web.UI.WebControls.Button>コントロール、`myButton`です。 列挙子の作成時に、<xref:System.Web.UI.ControlCollection.IsSynchronized%2A>操作がスレッド セーフである場合とがない場合は、表示するプロパティがオン、<xref:System.Web.UI.ControlCollection.SyncRoot%2A>が操作スレッドを安全にすること、オブジェクトを取得するプロパティを使用します。 列挙が完了すると、値の<xref:System.Web.UI.ControlCollection.IsReadOnly%2A>としてプロパティの書き込み、<xref:System.Web.UI.WebControls.Label.Text%2A>のプロパティ、<xref:System.Web.UI.WebControls.Label>を含むページ上のコントロールです。  
  
 [!code-csharp[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/CS/controlcollection1_cs.aspx#2)]
 [!code-vb[System.Web.UI.ControlCollection_NewSamples#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ControlCollection_NewSamples/VB/controlcollection1_vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Web.UI.Control.Controls" />
      </Docs>
    </Member>
  </Members>
</Type>