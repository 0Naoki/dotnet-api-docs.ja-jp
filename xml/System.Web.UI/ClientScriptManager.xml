<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="ClientScriptManager.xml" source-language="en-US" target-language="ja-JP">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86ce19ff5181caa07c458ad6ff38334f4d37a7d0917.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e19ff5181caa07c458ad6ff38334f4d37a7d0917</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7.2,netframework-4.7</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Defines methods for managing client scripts in Web applications.</source>
          <target state="translated">Web アプリケーションのクライアント スクリプトを管理するためのメソッドを定義します。</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class is used to manage client scripts and add them to Web applications.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph>クライアント スクリプトを管理し、Web アプリケーションに追加するクラスを使用します。</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>You can get a reference to the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class from the <ph id="ph2">&lt;xref:System.Web.UI.Page.ClientScript%2A&gt;</ph> property of the <ph id="ph3">&lt;xref:System.Web.UI.Page&gt;</ph> object.</source>
          <target state="translated">参照を取得することができます、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph>クラス、<ph id="ph2">&lt;xref:System.Web.UI.Page.ClientScript%2A&gt;</ph>のプロパティ、<ph id="ph3">&lt;xref:System.Web.UI.Page&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>You can add a client script to a Web page declaratively by including the script in the HTML markup of the page.</source>
          <target state="translated">できるスクリプトを追加するクライアント Web ページに宣言によって、ページの HTML マークアップに、スクリプトを含めることで。</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>However, there are situations when adding client script dynamically is needed.</source>
          <target state="translated">ただし、クライアント スクリプトを動的に追加することが必要な場合もあります。</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>To add a script dynamically, use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method, the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method, the <ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method, or the <ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method, depending on when and how you want to add the script.</source>
          <target state="translated">スクリプトを動的に追加するを使用して、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッド、<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>メソッドを<ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>メソッド、または<ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph>スクリプトを追加するタイミングと方法に応じて、メソッド。</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>For more information, see <bpt id="p1">[</bpt>How to: Add Client Script Dynamically to ASP.NET Web Pages<ept id="p1">](http://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>する方法: 追加クライアント スクリプト動的に ASP.NET Web Pages を<ept id="p1">](http://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)</ept>です。</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class uniquely identifies scripts by a key <ph id="ph2">&lt;xref:System.String&gt;</ph> and a <ph id="ph3">&lt;xref:System.Type&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph>クラスでは、キーにより、スクリプトを一意に識別<ph id="ph2">&lt;xref:System.String&gt;</ph>と<ph id="ph3">&lt;xref:System.Type&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.</source>
          <target state="translated">スクリプトの種類を使用して、ページ上で使用可能性のある別のユーザー コントロールからのようなスクリプトの混乱を避けるために役立ちます。</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph>ポストバックを実行せず、クライアントからサーバー コードを実行する必要がある場合の状況でのクライアント コールバックを呼び出すクラスを使用できます。</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>This is referred to as performing an out-of-band callback to the server.</source>
          <target state="translated">これは、サーバーへの帯域外のコールバックの実行と呼ばれます。</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page.</source>
          <target state="translated">クライアント コールバックでは、クライアント スクリプト関数は、ASP.NET Web ページへの非同期要求を送信します。</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>The Web page runs a modified version of its normal life cycle to process the callback.</source>
          <target state="translated">Web ページには、コールバックを処理する通常のライフ サイクルの変更済みバージョンが実行されます。</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>呼び出されると、クライアント関数への参照を取得するメソッドは、サーバー イベントへのクライアント コールバックを開始します。</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing Client Callbacks Without Postbacks<ept id="p1">](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ポストバックなしクライアント コールバックの実装<ept id="p1">](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)</ept>です。</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client.</source>
          <target state="translated">ECMAScript がクライアントで有効になっている必要なし、ドキュメント オブジェクト モデル (DOM) をサポートしていない古いブラウザーでスクリプト コールバックが動作しません。</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>To check if the browser supports callbacks, use the <ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt;</ph> property, which is accessible through the <ph id="ph2">&lt;xref:System.Web.HttpRequest.Browser%2A&gt;</ph> property of the ASP.NET intrinsic <ph id="ph3">&lt;xref:System.Web.HttpContext.Request%2A&gt;</ph> object.</source>
          <target state="translated">確認するには、ブラウザーがコールバックをサポートしているかどうかを使用して、<ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt;</ph>経由でアクセスできるは、プロパティ、<ph id="ph2">&lt;xref:System.Web.HttpRequest.Browser%2A&gt;</ph>組み込みの ASP.NET のプロパティ<ph id="ph3">&lt;xref:System.Web.HttpContext.Request%2A&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>Use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A&gt;</ph> method to define a client postback event.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A&gt;</ph>クライアント ポストバック イベントを定義するメソッド。</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>These methods enable client script functions, when invoked, to cause the server to post back to the page.</source>
          <target state="translated">これらのメソッドは、発生するページへのポストバックをサーバーに、呼び出されたときに、クライアント スクリプト関数を有効にします。</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.</source>
          <target state="translated">クライアントのポストバック イベントは、Web ページには、クライアントのポストバック イベントをプロセスに通常のライフ サイクルが完了することで、クライアント コールバックと異なります。</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>If you are using a <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control and the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is set to <ph id="ph3">`false`</ph>, then you can use the <ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method to return the client postback event for the <ph id="ph5">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
          <target state="translated">使用している場合、<ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>コントロールと<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph>プロパティに設定されている<ph id="ph3">`false`</ph>を使用して、<ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>クライアントを返すメソッドをポストバック イベントを<ph id="ph5">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.OnClientClick%2A&gt;</ph> property of the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control, <ph id="ph3">&lt;xref:System.Web.UI.WebControls.ImageButton&gt;</ph> control, and <ph id="ph4">&lt;xref:System.Web.UI.WebControls.LinkButton&gt;</ph> control can be used to run client script.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.WebControls.Button.OnClientClick%2A&gt;</ph>のプロパティ、<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>コントロール、<ph id="ph3">&lt;xref:System.Web.UI.WebControls.ImageButton&gt;</ph>コントロール、および<ph id="ph4">&lt;xref:System.Web.UI.WebControls.LinkButton&gt;</ph>コントロールは、クライアント スクリプトを実行するために使用できます。</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Web.UI.ClientScriptManager">
          <source>Two client scripts are defined in the page: <ph id="ph1">`PopupScript`</ph>, which displays an alert message when the page is loaded, and <ph id="ph2">`ButtonClickScript`</ph>, which defines a client handler for an HTML button's <ph id="ph3">`onClick`</ph> event.</source>
          <target state="translated">2 つのクライアント スクリプトがページで定義されている: <ph id="ph1">`PopupScript`</ph>、ページが読み込まれるときに警告メッセージが表示されます、 <ph id="ph2">`ButtonClickScript`</ph>、HTML ボタンのクライアントのハンドラーを定義する<ph id="ph3">`onClick`</ph>イベント。</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</source>
          <target state="translated">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The server <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> that handles the client callback.</source>
          <target state="translated">クライアント コールバックを処理するサーバー <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The control must implement the <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> interface and provide a <ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated">このコントロールは <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> インターフェイスを実装し、<ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッドを提供している必要があります。</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>An argument passed from the client script to the server</source>
          <target state="translated">クライアント スクリプトからサーバーに渡される引数。</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source><ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッド</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
          <target state="translated">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
          <target state="translated">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The result of the script is passed back to the client event handler.</source>
          <target state="translated">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</source>
          <target state="translated">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The client function for this overloaded method includes a specified control, argument, client script, and context.</source>
          <target state="translated">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、およびコンテキストが含まれます。</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The name of a client function that invokes the client callback.</source>
          <target state="translated">クライアント コールバックを呼び出すクライアント関数の名前。</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph> method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph>メソッドは、ページの通常の有効期間の変更済みバージョンをあるサーバーに、帯域外のコールバックを実行します。</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>For more information, see <bpt id="p1">[</bpt>Implementing Client Callbacks Without Postbacks<ept id="p1">](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)</ept>.</source>
          <target state="translated">詳細については、次を参照してください。<bpt id="p1">[</bpt>ポストバックなしクライアント コールバックの実装<ept id="p1">](http://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)</ept>です。</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls.</source>
          <target state="translated">ブラウザーは、Microsoft Internet Explorer (バージョン 5.0 以降) とスクリプトのコールバック機構はよう COM オブジェクトによって実装されブラウザーで ActiveX コントロールの実行を設定する必要があります。</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used.</source>
          <target state="translated">その他のブラウザーでは、ブラウザーのローカル ドキュメント オブジェクト モデル (DOM) を使用して、XMLHttpRequest を使用します。</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>To check whether a browser supports client callbacks, use the <ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt;</ph> property.</source>
          <target state="translated">確認するには、ブラウザーがクライアントのコールバックをサポートしているかどうかを使用して、<ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>To check whether a browser supports XML over HTTP, use the <ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A&gt;</ph> property.</source>
          <target state="translated">確認するには、ブラウザーが HTTP 経由での XML をサポートしているかどうかを使用して、<ph id="ph1">&lt;xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A&gt;</ph>プロパティです。</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>Both properties are accessible through the <ph id="ph1">&lt;xref:System.Web.HttpRequest.Browser%2A&gt;</ph> property of the intrinsic ASP.NET <ph id="ph2">&lt;xref:System.Web.HttpContext.Request%2A&gt;</ph> object.</source>
          <target state="translated">両方のプロパティが経由でアクセスできる、<ph id="ph1">&lt;xref:System.Web.HttpRequest.Browser%2A&gt;</ph>組み込みの ASP.NET のプロパティ<ph id="ph2">&lt;xref:System.Web.HttpContext.Request%2A&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> overload of the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method performs a callback synchronously using XML over HTTP.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>のオーバー ロード、<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドが HTTP 経由で同期的に XML を使用してコールバックを実行します。</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser.</source>
          <target state="translated">コールバックのシナリオでデータを同期的に送信するとき、同期コールバックはすぐに返すし、ブラウザーはブロックされません。</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>No two synchronous callbacks callback can execute at the same time in the browser.</source>
          <target state="translated">2 つの同期コールバックをブラウザーで同時に実行することはできます。</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.</source>
          <target state="translated">1 つは現在保留中、2 つ目の同期コールバックが発生した場合は、2 つ目の同期のコールバックが最初をキャンセルし、2 番目のコールバックのみが返されます。</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>To send data asynchronously, use one of the overloads that takes the <ph id="ph1">`useAsync`</ph> parameter, which is a Boolean value controlling this behavior.</source>
          <target state="translated">データを非同期的に送信するを取るオーバー ロードのいずれかの操作を使用して、<ph id="ph1">`useAsync`</ph>パラメーターで、ブール値は、この動作を制御する値。</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.</source>
          <target state="translated">非同期のシナリオでは、保留中の複数のコールバック; を持つことができます。ただし、返される順序は、開始された順序と一致するは保証されません。</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>Additionally, this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method specifies no client function to handle the case of an error condition generated by the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method.</source>
          <target state="translated">さらに、このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドは、クライアントを処理する関数によって生成されたエラー状態の場合の指定なし、<ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>To specify a client error callback handler, use one of the overloads that takes the <ph id="ph1">`clientErrorCallback`</ph> parameter.</source>
          <target state="translated">クライアント エラー コールバック ハンドラーを指定するを取るオーバー ロードのいずれかの操作を使用して、<ph id="ph1">`clientErrorCallback`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph> method takes an optional string <ph id="ph2">`argument`</ph> parameter and returns a string.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29&gt;</ph>メソッドは省略可能な文字列を受け取ります<ph id="ph2">`argument`</ph>パラメーター文字列を返します。</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>To pass in or to receive multiple values, concatenate values in the input or return string, respectively.</source>
          <target state="translated">渡す、または複数の値を受信するには、入力内の値を連結したり、それぞれの文字列を返します。</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations.</source>
          <target state="translated">スクリプトのコールバック操作中に更新する必要があるページまたはコントロールのプロパティの実装での表示状態を使用しないでください。</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>If the properties are to survive page requests, you can use session state.</source>
          <target state="translated">プロパティは、ページ要求からの復旧は、セッション状態を使用することができます。</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The following code example demonstrates how to use two overloads of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method in a client callback scenario that increments integers.</source>
          <target state="translated">次のコード例は、の 2 つのオーバー ロードを使用する方法を示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>整数値が増加クライアント コールバックを行うメソッドです。</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>Two callback mechanisms are shown; the difference between them is the use of the <ph id="ph1">`context`</ph> parameter.</source>
          <target state="translated">2 つのコールバック機構が表示されます。これらの違いは、使用、<ph id="ph1">`context`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>A <ph id="ph1">`ReceiveServerData1`</ph> client callback function is provided using the <ph id="ph2">`context`</ph> parameter.</source>
          <target state="translated">A<ph id="ph1">`ReceiveServerData1`</ph>を使用して、クライアント コールバック関数が提供される、<ph id="ph2">`context`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>In contrast, the <ph id="ph1">`ReceiveServerData2`</ph> client callback function is defined in a <ph id="ph2">`&lt;script&gt;`</ph> block on the page.</source>
          <target state="translated">これに対し、<ph id="ph1">`ReceiveServerData2`</ph>でクライアントのコールバック関数が定義されている、 <ph id="ph2">`&lt;script&gt;`</ph>  ページでブロックされます。</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method is the server handler that increments the value that is passed to it and the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph> method returns the incremented value as a string.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph>メソッドは、サーバー ハンドラーに渡される値をインクリメントして、<ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph>メソッドを文字列としてインクリメントされた値を返します。</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>If the <ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method returns an error, then the <ph id="ph2">`ProcessCallBackError`</ph> client function is called.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph>メソッドには、エラーが返されます、<ph id="ph2">`ProcessCallBackError`</ph>クライアント関数が呼び出されます。</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> specified is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> specified does not implement the <ph id="ph2">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> interface.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> に <ph id="ph2">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> インターフェイスが実装されていません。</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The server <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> that handles the client callback.</source>
          <target state="translated">クライアント コールバックを処理するサーバー <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The control must implement the <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> interface and provide a <ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated">このコントロールは <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> インターフェイスを実装し、<ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッドを提供している必要があります。</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>An argument passed from the client script to the server</source>
          <target state="translated">クライアント スクリプトからサーバーに渡される引数。</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッド</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
          <target state="translated">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
          <target state="translated">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The result of the script is passed back to the client event handler.</source>
          <target state="translated">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to perform the callback asynchronously; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to perform the callback synchronously.</source>
          <target state="translated">非同期コールバックを実行する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。同期コールバックを実行する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</source>
          <target state="translated">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</source>
          <target state="translated">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、およびブール値が含まれます。</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The name of a client function that invokes the client callback.</source>
          <target state="translated">クライアント コールバックを呼び出すクライアント関数の名前。</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method requires a <ph id="ph2">`useAsync`</ph> parameter, which allows you to perform the client callback asynchronously by setting the value to <ph id="ph3">`true`</ph>.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドが必要な<ph id="ph2">`useAsync`</ph>パラメーター値を設定して、クライアント コールバックを非同期的に実行することができる<ph id="ph3">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The overload versions of this method that do not require the <ph id="ph1">`useAsync`</ph> parameter set the value to <ph id="ph2">`false`</ph> by default.</source>
          <target state="translated">このメソッドのオーバー ロード バージョンを必要としない、<ph id="ph1">`useAsync`</ph>パラメーターに値を設定する<ph id="ph2">`false`</ph>既定です。</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>For more information on this method, see the remarks for the overload <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> specified is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> specified does not implement the <ph id="ph2">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> interface.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> に <ph id="ph2">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> インターフェイスが実装されていません。</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The name of a server <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> that handles the client callback.</source>
          <target state="translated">クライアント コールバックを処理するサーバー <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> の名前。</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The control must implement the <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> interface and provide a <ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated">このコントロールは <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> インターフェイスを実装し、<ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッドを提供している必要があります。</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>An argument passed from the client script to the server</source>
          <target state="translated">クライアント スクリプトからサーバーに渡される引数。</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッド</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
          <target state="translated">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
          <target state="translated">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The result of the script is passed back to the client event handler.</source>
          <target state="translated">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The name of the client event handler that receives the result when an error occurs in the server event handler.</source>
          <target state="translated">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to perform the callback asynchronously; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to perform the callback synchronously.</source>
          <target state="translated">非同期コールバックを実行する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。同期コールバックを実行する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</source>
          <target state="translated">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</source>
          <target state="translated">このオーバーロードされたメソッドに対するクライアント関数には、指定されたターゲット、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The name of a client function that invokes the client callback.</source>
          <target state="translated">クライアント コールバックを呼び出すクライアント関数の名前。</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method takes a <ph id="ph2">`target`</ph> string parameter instead of a <ph id="ph3">&lt;xref:System.Web.UI.Control&gt;</ph> parameter.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドは、<ph id="ph2">`target`</ph>文字列パラメーターの代わりに、<ph id="ph3">&lt;xref:System.Web.UI.Control&gt;</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>Use this overload when you want the callback to go back to something other than a string containing the <ph id="ph1">&lt;xref:System.Web.UI.Control.UniqueID%2A&gt;</ph> of the control.</source>
          <target state="translated">コールバックを含む文字列以外にする場合は、このオーバー ロードを使用して、<ph id="ph1">&lt;xref:System.Web.UI.Control.UniqueID%2A&gt;</ph>コントロールのです。</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>Additionally, this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method requires a <ph id="ph2">`useAsync`</ph> and a <ph id="ph3">`clientErrorCallback`</ph> parameter.</source>
          <target state="translated">さらに、このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドが必要な<ph id="ph2">`useAsync`</ph>と<ph id="ph3">`clientErrorCallback`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">`useAsync`</ph> parameter allows you to perform the client callback asynchronously by setting the value to <ph id="ph2">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`useAsync`</ph>パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The overload versions of this method that do not require the <ph id="ph1">`useAsync`</ph> parameter set the value to <ph id="ph2">`false`</ph> by default.</source>
          <target state="translated">このメソッドのオーバー ロード バージョンを必要としない、<ph id="ph1">`useAsync`</ph>パラメーターに値を設定する<ph id="ph2">`false`</ph>既定です。</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">`clientErrorCallback`</ph> parameter allows you to define the name of the client function that is called if the server handler, the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method, returns an error.</source>
          <target state="translated"><ph id="ph1">`clientErrorCallback`</ph>パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義するサーバー ハンドラー、<ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph>メソッド、エラーが返されます。</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The overload versions of this method that do not require the <ph id="ph1">`clientErrorCallback`</ph> parameter set the value to null.</source>
          <target state="translated">このメソッドのオーバー ロード バージョンを必要としない、<ph id="ph1">`clientErrorCallback`</ph>パラメーターは、値を null に設定します。</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>For more information on this method, see the remarks for the overload <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The following code example demonstrates how to use two overloads of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method in a client callback scenario that increments integers.</source>
          <target state="translated">次のコード例は、の 2 つのオーバー ロードを使用する方法を示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>整数値が増加クライアント コールバックを行うメソッドです。</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>Two callback mechanisms are shown; the difference between them is the use of the <ph id="ph1">`context`</ph> parameter.</source>
          <target state="translated">2 つのコールバック機構が表示されます。これらの違いは、使用、<ph id="ph1">`context`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>A <ph id="ph1">`ReceiveServerData1`</ph> client callback function is provided using the <ph id="ph2">`context`</ph> parameter.</source>
          <target state="translated">A<ph id="ph1">`ReceiveServerData1`</ph>を使用して、クライアント コールバック関数が提供される、<ph id="ph2">`context`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>In contrast, the <ph id="ph1">`ReceiveServerData2`</ph> client callback function is defined in a <ph id="ph2">`&lt;script&gt;`</ph> block on the page.</source>
          <target state="translated">これに対し、<ph id="ph1">`ReceiveServerData2`</ph>でクライアントのコールバック関数が定義されている、 <ph id="ph2">`&lt;script&gt;`</ph>  ページでブロックされます。</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>A <ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method is the server handler that increments the value that is passed to it and the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph> method returns the incremented value as a string.</source>
          <target state="translated">A<ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph>メソッドは、サーバー ハンドラーに渡される値をインクリメントして、<ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A&gt;</ph>メソッドを文字列としてインクリメントされた値を返します。</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>If the <ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method returns an error, then the client function <ph id="ph2">`ProcessCallBackError`</ph> is called.</source>
          <target state="translated">場合、<ph id="ph1">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph>メソッドは、エラー、そのクライアント関数を返します。<ph id="ph2">`ProcessCallBackError`</ph>と呼びます。</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The server <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> that handles the client callback.</source>
          <target state="translated">クライアント コールバックを処理するサーバー <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The control must implement the <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> interface and provide a <ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated">このコントロールは <ph id="ph1">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> インターフェイスを実装し、<ph id="ph2">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッドを提供している必要があります。</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>An argument passed from the client script to the server <ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> method.</source>
          <target state="translated">クライアント スクリプトからサーバーの <ph id="ph1">&lt;see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /&gt;</ph> メソッドに渡される引数。</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The name of the client event handler that receives the result of the successful server event.</source>
          <target state="translated">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The client script that is evaluated on the client prior to initiating the callback.</source>
          <target state="translated">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The result of the script is passed back to the client event handler.</source>
          <target state="translated">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The name of the client event handler that receives the result when an error occurs in the server event handler.</source>
          <target state="translated">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to perform the callback asynchronously; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to perform the callback synchronously.</source>
          <target state="translated">非同期コールバックを実行する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。同期コールバックを実行する場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</source>
          <target state="translated">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</source>
          <target state="translated">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The name of a client function that invokes the client callback.</source>
          <target state="translated">クライアント コールバックを呼び出すクライアント関数の名前。</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method requires a <ph id="ph2">`useAsync`</ph> and a <ph id="ph3">`clientErrorCallback`</ph> parameter.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドが必要な<ph id="ph2">`useAsync`</ph>と<ph id="ph3">`clientErrorCallback`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">`useAsync`</ph> parameter allows you to perform the client callback asynchronously by setting the value to <ph id="ph2">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`useAsync`</ph>パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。<ph id="ph2">`true`</ph>です。</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The overload versions of this method that do not require the <ph id="ph1">`useAsync`</ph> parameter set the value to <ph id="ph2">`false`</ph> by default.</source>
          <target state="translated">このメソッドのオーバー ロード バージョンを必要としない、<ph id="ph1">`useAsync`</ph>パラメーターに値を設定する<ph id="ph2">`false`</ph>既定です。</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">`clientErrorCallback`</ph> parameter allows you to define the name of the client function that is called if the server handler (the <ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph> method) returns an error.</source>
          <target state="translated"><ph id="ph1">`clientErrorCallback`</ph>パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義するサーバー ハンドラー (、<ph id="ph2">&lt;xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A&gt;</ph>メソッド) はエラーを返します。</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The overload versions of this method that do not require the <ph id="ph1">`clientErrorCallback`</ph> parameter set the value to null.</source>
          <target state="translated">このメソッドのオーバー ロード バージョンを必要としない、<ph id="ph1">`clientErrorCallback`</ph>パラメーターは、値を null に設定します。</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>For more information on this method, see the remarks for the overload <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph> method.</source>
          <target state="translated">このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> specified is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> specified does not implement the <ph id="ph2">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> interface.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> に <ph id="ph2">&lt;see cref="T:System.Web.UI.ICallbackEventHandler" /&gt;</ph> インターフェイスが実装されていません。</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Gets a reference, with <ph id="ph1">&lt;see langword="javascript:" /&gt;</ph> appended to the beginning of it, that can be used in a client event to post back to the server.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="javascript:" /&gt;</ph> を参照の先頭に付加した上で参照を取得します。この参照をクライアント イベントで使用して、サーバーにポストバックできます。</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>The server control to process the postback.</source>
          <target state="translated">ポストバックを処理するサーバー コントロール。</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>The parameter passed to the server control.</source>
          <target state="translated">サーバー コントロールに渡されたパラメーター。</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>Gets a reference, with <ph id="ph1">&lt;see langword="javascript:" /&gt;</ph> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="javascript:" /&gt;</ph> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数を使用してサーバーにポストバックできます。</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</source>
          <target state="translated">対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>Using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method requires the control that handles the postback to implement the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを実装するポストバックを処理するコントロールが必要です、<ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>,  use the  directive.</source>
          <target state="translated">実装する、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>のためのインターフェイス、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>ディレクティブを使用します。</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>The custom control, <ph id="ph1">`MyControl`</ph>, implements the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
          <target state="translated">カスタム コントロール<ph id="ph1">`MyControl`</ph>、実装、<ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>When the HTML anchor element on the page is clicked, the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A&gt;</ph> method of the custom control is invoked.</source>
          <target state="translated">ページの HTML アンカー要素がクリックされたときに、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A&gt;</ph>カスタム コントロールのメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)">
          <source>The following code example has the same functionality as the preceding one, except that instead of a custom control, the <ph id="ph1">&lt;xref:System.Web.UI.Page&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
          <target state="translated">次のコード例は、同じ機能をカスタム コントロールではなく点を除いて、上記の 1 つとして、<ph id="ph1">&lt;xref:System.Web.UI.Page&gt;</ph>クラスが実装する、<ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)">
          <source>The server control to process the postback.</source>
          <target state="translated">ポストバックを処理するサーバー コントロール。</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)">
          <source>The parameter passed to the server control.</source>
          <target state="translated">サーバー コントロールに渡されたパラメーター。</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to register the postback event for validation; <ph id="ph2">&lt;see langword="false" /&gt;</ph> to not register the post back event for validation.</source>
          <target state="translated">検証用にポストバック イベントを登録する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。検証用にポストバック イベントを登録しない場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)">
          <source>Gets a reference, with <ph id="ph1">&lt;see langword="javascript:" /&gt;</ph> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="javascript:" /&gt;</ph> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数と、イベント検証用にポストバックを登録するかどうかを示すブール値を使用してサーバーにポストバックできます。</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)">
          <source>A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</source>
          <target state="translated">対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)">
          <source>Using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method requires the control that handles the postback to implement the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
          <target state="translated">使用して、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを実装するポストバックを処理するコントロールが必要です、<ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>, use the  directive.</source>
          <target state="translated">実装する、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>のためのインターフェイス、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>ディレクティブを使用します。</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Returns a string that can be used in a client event to cause postback to the server.</source>
          <target state="translated">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> that defines the postback.</source>
          <target state="translated">ポストバックを定義する <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>Returns a string that can be used in a client event to cause postback to the server.</source>
          <target state="translated">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>The reference string is defined by the specified <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> instance.</source>
          <target state="translated">この参照文字列は、指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> インスタンスによって定義されます。</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>A string that, when treated as script on the client, initiates the client postback.</source>
          <target state="translated">クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>,  use the  directive.</source>
          <target state="translated">実装する、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>のためのインターフェイス、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>ディレクティブを使用します。</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを使用できます、<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>タイミングを制御、<ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph>プロパティは<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
          <target state="translated">このシナリオでは、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを返しますが、クライアントのポストバック イベントを<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> parameter is <ph id="ph2">&lt;see langword="null" /&gt;</ph></source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> パラメーターが <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>The server <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> that processes the postback on the server.</source>
          <target state="translated">サーバー上でポストバックを処理するサーバー <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>A string of optional arguments to pass to the control that processes the postback.</source>
          <target state="translated">ポストバックを処理するコントロールに渡されるオプション引数の文字列。</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>Returns a string that can be used in a client event to cause postback to the server.</source>
          <target state="translated">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</source>
          <target state="translated">この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>A string that, when treated as script on the client, initiates the postback.</source>
          <target state="translated">クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>,  use the  directive.</source>
          <target state="translated">実装する、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>のためのインターフェイス、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>ディレクティブを使用します。</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを使用できます、<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>タイミングを制御、<ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph>プロパティは<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
          <target state="translated">このシナリオでは、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを返しますが、クライアントのポストバック イベントを<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>The custom control, <ph id="ph1">`MyControl`</ph>, implements the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
          <target state="translated">カスタム コントロール<ph id="ph1">`MyControl`</ph>、実装、<ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>When the button on the page is clicked, the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A&gt;</ph> method of the custom control is invoked.</source>
          <target state="translated">ページ上のボタンがクリックされたときに、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A&gt;</ph>カスタム コントロールのメソッドが呼び出されます。</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>The following code example has the same functionality as the preceding one, except that instead of a custom control, the <ph id="ph1">&lt;xref:System.Web.UI.Page&gt;</ph> class implements the <ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface.</source>
          <target state="translated">次のコード例は、同じ機能をカスタム コントロールではなく点を除いて、上記の 1 つとして、<ph id="ph1">&lt;xref:System.Web.UI.Page&gt;</ph>クラスが実装する、<ph id="ph2">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>インターフェイスです。</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)">
          <source>The specified <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> that defines the postback.</source>
          <target state="translated">ポストバックを定義する <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to register the event reference for validation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">検証用にイベント参照を登録する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>Returns a string that can be used in a client event to cause postback to the server.</source>
          <target state="translated">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>The reference string is defined by the specified <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> object.</source>
          <target state="translated">この参照文字列は、指定した <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> オブジェクトによって定義されます。</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>Optionally, registers the event reference for validation.</source>
          <target state="translated">オプションで、検証用にこのイベント参照を登録します。</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>A string that, when treated as script on the client, initiates the client postback.</source>
          <target state="translated">クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph> object, use the  directive.</source>
          <target state="translated">実装する、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>のためのインターフェイス、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>オブジェクト、ディレクティブを使用します。</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを使用できます、<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>タイミングを制御、<ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph>プロパティは<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
          <target state="translated">このシナリオでは、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを返しますが、クライアントのポストバック イベントを<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>If <ph id="ph1">`registerForEventValidation`</ph> is <ph id="ph2">`true`</ph>, the <ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29&gt;</ph> method calls the <ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt;</ph> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</source>
          <target state="translated">場合<ph id="ph1">`registerForEventValidation`</ph>は<ph id="ph2">`true`</ph>、<ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29&gt;</ph>メソッドの呼び出し、<ph id="ph4">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt;</ph>イベントを生成するクライアントのコントロールを表す一意のコントロール id の検証イベントの参照を登録します。</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> が <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>The server <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> that processes the postback on the server.</source>
          <target state="translated">サーバー上でポストバックを処理するサーバー <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="277" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>A string of optional arguments to pass to <bpt id="p1">&lt;c&gt;</bpt>control<ept id="p1">&lt;/c&gt;</ept>.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>control<ept id="p1">&lt;/c&gt;</ept> に渡すオプション引数の文字列。</target>       </trans-unit>
        <trans-unit id="278" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> to register the event reference for validation; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">検証用にイベント参照を登録する場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="279" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>Returns a string to use in a client event to cause postback to the server.</source>
          <target state="translated">クライアント イベントで使用する、サーバーにポストバックするための文字列を返します。</target>       </trans-unit>
        <trans-unit id="280" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</source>
          <target state="translated">この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</target>       </trans-unit>
        <trans-unit id="281" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>Optionally, registers the event reference for validation.</source>
          <target state="translated">オプションで、検証用にこのイベント参照を登録します。</target>       </trans-unit>
        <trans-unit id="282" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>A string that, when treated as script on the client, initiates the postback.</source>
          <target state="translated">クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</target>       </trans-unit>
        <trans-unit id="283" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>To implement the <ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph> interface for a <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>, use the  directive.</source>
          <target state="translated">実装する、<ph id="ph1">&lt;xref:System.Web.UI.IPostBackEventHandler&gt;</ph>のためのインターフェイス、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>ディレクティブを使用します。</target>       </trans-unit>
        <trans-unit id="284" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method can be used with the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control when the <ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph> property is <ph id="ph4">`false`</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを使用できます、<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>タイミングを制御、<ph id="ph3">&lt;xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A&gt;</ph>プロパティは<ph id="ph4">`false`</ph>します。</target>       </trans-unit>
        <trans-unit id="285" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>In this scenario, the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph> method returns the client postback event for the <ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph> control.</source>
          <target state="translated">このシナリオでは、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A&gt;</ph>メソッドを返しますが、クライアントのポストバック イベントを<ph id="ph2">&lt;xref:System.Web.UI.WebControls.Button&gt;</ph>コントロール。</target>       </trans-unit>
        <trans-unit id="286" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>If <ph id="ph1">`registerForEventValidation`</ph> is true, the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29&gt;</ph> method calls the <ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt;</ph> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</source>
          <target state="translated">場合<ph id="ph1">`registerForEventValidation`</ph>が true の場合、<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29&gt;</ph>メソッドの呼び出し、<ph id="ph3">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29&gt;</ph>イベントを生成するクライアントのコントロールを表す一意のコントロール id の検証イベントの参照を登録します。</target>       </trans-unit>
        <trans-unit id="287" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)">
          <source>The specified <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">指定された <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="288" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The type of the resource.</source>
          <target state="translated">リソースの型。</target>       </trans-unit>
        <trans-unit id="289" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The fully qualified name of the resource in the assembly.</source>
          <target state="translated">アセンブリ内のリソースの完全修飾名。</target>       </trans-unit>
        <trans-unit id="290" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>Gets a URL reference to a resource in an assembly.</source>
          <target state="translated">アセンブリ内のリソースへの URL 参照を取得します。</target>       </trans-unit>
        <trans-unit id="291" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The URL reference to the resource.</source>
          <target state="translated">リソースへの URL 参照。</target>       </trans-unit>
        <trans-unit id="292" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph> method returns a URL reference to a resource embedded in an assembly.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph>メソッドは、アセンブリに埋め込まれているリソースへの URL 参照を返します。</target>       </trans-unit>
        <trans-unit id="293" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The returned reference is not URL encoded.</source>
          <target state="translated">返される参照は、エンコードされた URL ではありません。</target>       </trans-unit>
        <trans-unit id="294" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>Resources can be script files, images, or any static file.</source>
          <target state="translated">リソースは、スクリプト ファイル、画像、または、静的ファイルを使用できます。</target>       </trans-unit>
        <trans-unit id="295" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>You specify the type based on the object that will be accessing the resource.</source>
          <target state="translated">リソースにアクセスするオブジェクトに基づく種類を指定します。</target>       </trans-unit>
        <trans-unit id="296" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>A Web resource registered with the page is uniquely identified by its type and name.</source>
          <target state="translated">ページに登録されている Web リソースは、その型と名前によって一意に識別します。</target>       </trans-unit>
        <trans-unit id="297" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>Only one resource with a given type and name pair can be registered with the page.</source>
          <target state="translated">渡された型と名前のペアを持つ 1 つだけのリソースは、ページを登録することができます。</target>       </trans-unit>
        <trans-unit id="298" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>Attempting to register a resource that is already registered does not create a duplicate of the registered resource.</source>
          <target state="translated">既に登録されているリソースを登録しようとして、登録済みのリソースの複製が作成されることはできません。</target>       </trans-unit>
        <trans-unit id="299" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph> method is used in conjunction with the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> method for accessing resources embedded in assemblies.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph>と共にメソッドが使用される、<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph>アセンブリに埋め込まれているリソースにアクセスするメソッド。</target>       </trans-unit>
        <trans-unit id="300" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>For more information on using resources in applications, see <bpt id="p1">[</bpt>ASP.NET Web Page Resources Overview<ept id="p1">](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)</ept>.</source>
          <target state="translated">アプリケーションでリソースの使用の詳細については、次を参照してください。 <bpt id="p1">[</bpt>ASP.NET Web ページのリソースの概要<ept id="p1">](http://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)</ept>です。</target>       </trans-unit>
        <trans-unit id="301" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="302" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The <bpt id="p1">*</bpt>type<ept id="p1">*</ept> parameter in this example is set to the type of class in the assembly containing the resource.</source>
          <target state="translated"><bpt id="p1">*</bpt>型<ept id="p1">*</ept>この例ではパラメーターが、リソースを含むアセンブリ内のクラスの種類に設定します。</target>       </trans-unit>
        <trans-unit id="303" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The <ph id="ph1">`resourceName`</ph> parameter is specified with the fully qualified path to the resource, which includes the default namespace.</source>
          <target state="translated"><ph id="ph1">`resourceName`</ph>パラメーターが既定の名前空間を含むリソースへの完全修飾パスで指定されています。</target>       </trans-unit>
        <trans-unit id="304" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The following code example demonstrates how to programmatically apply the <ph id="ph1">&lt;xref:System.Web.UI.WebResourceAttribute&gt;</ph> metadata attribute to mark the assembly for the resources that will be served.</source>
          <target state="translated">次のコード例は、プログラムを適用する方法を示します、<ph id="ph1">&lt;xref:System.Web.UI.WebResourceAttribute&gt;</ph>提供されるリソースのアセンブリをマークするメタデータの属性です。</target>       </trans-unit>
        <trans-unit id="305" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>Compile the following class in a class library with a default namespace set to <ph id="ph1">`Samples.AspNet.CS.Controls`</ph> or <ph id="ph2">`Samples.AspNet.VB.Controls`</ph>, depending on what language you are using.</source>
          <target state="translated">既定の名前空間に設定して、クラス ライブラリでは、次のクラスをコンパイル<ph id="ph1">`Samples.AspNet.CS.Controls`</ph>または<ph id="ph2">`Samples.AspNet.VB.Controls`</ph>を使用する言語に応じて、します。</target>       </trans-unit>
        <trans-unit id="306" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>This example requires a JavaScript file named <ph id="ph1">`Script_include.js`</ph>.</source>
          <target state="translated">この例には、名前付き JavaScript ファイルが必要です。<ph id="ph1">`Script_include.js`</ph>です。</target>       </trans-unit>
        <trans-unit id="307" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The .js file is an embedded resource in the assembly that contains the <ph id="ph1">`ClientScriptResourceLabel`</ph> object.</source>
          <target state="translated">.Js ファイルが含まれるアセンブリに埋め込まれたリソース、<ph id="ph1">`ClientScriptResourceLabel`</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="308" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>If you are using Visual Studio], in the Properties window of the class library project, set <bpt id="p1">**</bpt>Build Action<ept id="p1">**</ept> to <bpt id="p2">**</bpt>Embedded Resource<ept id="p2">**</ept> when the script file is selected.</source>
          <target state="translated">かどうかを使用する Visual Studio]、クラス ライブラリ プロジェクトの [プロパティ] ウィンドウで次のように設定します。<bpt id="p1">**</bpt>ビルド アクション<ept id="p1">**</ept>に<bpt id="p2">**</bpt>埋め込まれたリソース<ept id="p2">**</ept>スクリプト ファイルを選択するとします。</target>       </trans-unit>
        <trans-unit id="309" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>If you are compiling the library at the command line, use the  switch to embed the resource.</source>
          <target state="translated">コマンドラインでライブラリをコンパイルする場合は、リソースを埋め込むには、スイッチを使用します。</target>       </trans-unit>
        <trans-unit id="310" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The web resource name is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">Web リソース名が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="311" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="312" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)">
          <source>The web resource name has a length of zero.</source>
          <target state="translated">Web リソース名の長さがゼロです。</target>       </trans-unit>
        <trans-unit id="313" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Determines whether the client script block is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">クライアント スクリプト ブロックが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="314" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source>The key of the client script block to search for.</source>
          <target state="translated">検索対象のクライアント スクリプト ブロックのキー。</target>       </trans-unit>
        <trans-unit id="315" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source>Determines whether the client script block is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using the specified key.</source>
          <target state="translated">指定されたキーを使用して、クライアント スクリプト ブロックが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="316" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the client script block is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプト ブロックが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="317" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
          <target state="translated">このメソッドを呼び出す前に、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>スクリプトが重複する登録を回避するためです。</target>       </trans-unit>
        <trans-unit id="318" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
          <target state="translated">これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="319" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source>A client script is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="320" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="321" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph> method calls the overload that takes both a <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph>メソッドは、両方を受け取るオーバー ロードを呼び出し、<ph id="ph2">`key`</ph>と<ph id="ph3">`type`</ph>として、型を持つパラメーターの設定、<ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph>オブジェクト</target>       </trans-unit>
        <trans-unit id="322" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>The type of the client script block to search for.</source>
          <target state="translated">検索対象のクライアント スクリプト ブロックの型。</target>       </trans-unit>
        <trans-unit id="323" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>The key of the client script block to search for.</source>
          <target state="translated">検索対象のクライアント スクリプト ブロックのキー。</target>       </trans-unit>
        <trans-unit id="324" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>Determines whether the client script block is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a key and type.</source>
          <target state="translated">キーと型を使用して、クライアント スクリプト ブロックが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="325" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the client script block is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプト ブロックが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="326" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
          <target state="translated">このメソッドを呼び出す前に、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>スクリプトが重複する登録を回避するためです。</target>       </trans-unit>
        <trans-unit id="327" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
          <target state="translated">これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="328" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>A client script is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="329" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="330" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>You specify the type based on the object that will be accessing the resource.</source>
          <target state="translated">リソースにアクセスするオブジェクトに基づく種類を指定します。</target>       </trans-unit>
        <trans-unit id="331" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>For instance, when using a <ph id="ph1">`Page`</ph> instance to access the resource, you specify the <ph id="ph2">`Page`</ph> type.</source>
          <target state="translated">インスタンスを使用する場合、<ph id="ph1">`Page`</ph>を指定する、リソースにアクセスするインスタンス、<ph id="ph2">`Page`</ph>型です。</target>       </trans-unit>
        <trans-unit id="332" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="333" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method checks for duplicates.</source>
          <target state="translated">既存のクライアント スクリプト ブロックを確認するロジックが削除された場合はありません重複しているクライアント スクリプトを 2 つ表示するページの HTML ソース コードのために注意してください、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッドは、重複データをチェックします。</target>       </trans-unit>
        <trans-unit id="334" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>The benefit of checking is to reduce unnecessary computation.</source>
          <target state="translated">チェックの利点は、不要な計算処理を開始します。</target>       </trans-unit>
        <trans-unit id="335" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)">
          <source>The client script type is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプトの型が <ph id="ph1">&lt;see langword="null" /&gt;</ph>. です。</target>       </trans-unit>
        <trans-unit id="336" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Determines whether the client script include is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">クライアント スクリプト インクルードが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="337" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source>The key of the client script include to search for.</source>
          <target state="translated">検索対象のクライアント スクリプト インクルードのキー。</target>       </trans-unit>
        <trans-unit id="338" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source>Determines whether the client script include is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using the specified key.</source>
          <target state="translated">指定されたキーを使用して、クライアント スクリプト インクルードが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="339" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the client script include is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプト インクルードが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="340" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
          <target state="translated">このメソッドを呼び出す前に、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>スクリプトが重複する登録を回避するためです。</target>       </trans-unit>
        <trans-unit id="341" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
          <target state="translated">これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="342" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source>A client script include is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型では一意に識別します。</target>       </trans-unit>
        <trans-unit id="343" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="344" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method calls the overload that takes both a <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph>メソッドは、両方を受け取るオーバー ロードを呼び出し、<ph id="ph2">`key`</ph>と<ph id="ph3">`type`</ph>、型のパラメーターを設定、<ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph>オブジェクト。</target>       </trans-unit>
        <trans-unit id="345" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>The type of the client script include to search for.</source>
          <target state="translated">検索対象のクライアント スクリプト インクルードの型。</target>       </trans-unit>
        <trans-unit id="346" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>The key of the client script include to search for.</source>
          <target state="translated">検索対象のクライアント スクリプト インクルードのキー。</target>       </trans-unit>
        <trans-unit id="347" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>Determines whether the client script include is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a key and type.</source>
          <target state="translated">キーと型を使用して、クライアント スクリプト インクルードが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="348" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the client script include is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプト インクルードが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="349" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method to avoid registering duplicate client script includes.</source>
          <target state="translated">このメソッドを呼び出す前に、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>重複しているクライアント スクリプトを登録しないようにするメソッドが含まれています。</target>       </trans-unit>
        <trans-unit id="350" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
          <target state="translated">これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="351" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>A client script include is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型では一意に識別します。</target>       </trans-unit>
        <trans-unit id="352" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="353" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>You specify the type based on the object that will be accessing the resource.</source>
          <target state="translated">リソースにアクセスするオブジェクトに基づく種類を指定します。</target>       </trans-unit>
        <trans-unit id="354" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>For instance, when using a Page instance to access the resource, you specify the <ph id="ph1">`Page`</ph> type.</source>
          <target state="translated">たとえば、ページ インスタンスを使用して、リソースにアクセスする、指定した、<ph id="ph1">`Page`</ph>型です。</target>       </trans-unit>
        <trans-unit id="355" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="356" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method checks for duplicates.</source>
          <target state="translated">既存のクライアント スクリプトに含まれているを確認するロジックが削除された場合はありません重複しているクライアント スクリプトを 2 つ表示するページの HTML ソース コードのために注意してください、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>メソッドは、重複データをチェックします。</target>       </trans-unit>
        <trans-unit id="357" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>The benefit of checking is to reduce unnecessary computation.</source>
          <target state="translated">チェックの利点は、不要な計算処理を開始します。</target>       </trans-unit>
        <trans-unit id="358" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>This example requires a JavaScript file named <ph id="ph1">`Script_include.js`</ph>, with the following contents:</source>
          <target state="translated">この例には、名前付き JavaScript ファイルが必要です。 <ph id="ph1">`Script_include.js`</ph>、以下の内容で。</target>       </trans-unit>
        <trans-unit id="359" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)">
          <source>The client script include type is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプト インクルードの型が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="360" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Determines whether the OnSubmit statement is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">OnSubmit ステートメントが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="361" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source>The key of the OnSubmit statement to search for.</source>
          <target state="translated">検索対象の OnSubmit ステートメントのキー。</target>       </trans-unit>
        <trans-unit id="362" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source>Determines whether the OnSubmit statement is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using the specified key.</source>
          <target state="translated">指定されたキーを使用して OnSubmit ステートメントが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="363" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the OnSubmit statement is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">OnSubmit ステートメントが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="364" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method to avoid registering duplicate OnSubmit statements.</source>
          <target state="translated">このメソッドを呼び出す前に、 <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> OnSubmit ステートメントが重複する登録を回避するためです。</target>       </trans-unit>
        <trans-unit id="365" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source>This is particularly important if the statement requires a large amount of server resources to create.</source>
          <target state="translated">これは、ステートメントを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="366" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source>A statement is uniquely identified by its key and its type.</source>
          <target state="translated">ステートメントは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="367" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source>Statements with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーと型指定されたステートメントは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="368" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph> method calls the overload that takes both a <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph>メソッドは、両方を受け取るオーバー ロードを呼び出し、<ph id="ph2">`key`</ph>と<ph id="ph3">`type`</ph>として、型を持つパラメーターの設定、<ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph>オブジェクト</target>       </trans-unit>
        <trans-unit id="369" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>The type of the OnSubmit statement to search for.</source>
          <target state="translated">検索対象の OnSubmit ステートメントの型。</target>       </trans-unit>
        <trans-unit id="370" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>The key of the OnSubmit statement to search for.</source>
          <target state="translated">検索対象の OnSubmit ステートメントのキー。</target>       </trans-unit>
        <trans-unit id="371" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>Determines whether the OnSubmit statement is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using the specified key and type.</source>
          <target state="translated">指定されたキーと型を使用して OnSubmit ステートメントが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="372" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the OnSubmit statement is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">OnSubmit ステートメントが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="373" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method to avoid registering duplicate statements.</source>
          <target state="translated">このメソッドを呼び出す前に、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph>ステートメントが重複する登録を回避するためです。</target>       </trans-unit>
        <trans-unit id="374" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>This is particularly important if the statement requires a large amount of server resources to create.</source>
          <target state="translated">これは、ステートメントを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="375" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>A statement is uniquely identified by its key and its type.</source>
          <target state="translated">ステートメントは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="376" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>Statements with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーと型指定されたステートメントは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="377" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>You specify the type based on the object that will be accessing the resource.</source>
          <target state="translated">リソースにアクセスするオブジェクトに基づく種類を指定します。</target>       </trans-unit>
        <trans-unit id="378" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>For instance, when using a <ph id="ph1">`Page`</ph> instance to access the resource, you specify the <ph id="ph2">`Page`</ph> type.</source>
          <target state="translated">インスタンスを使用する場合、<ph id="ph1">`Page`</ph>を指定する、リソースにアクセスするインスタンス、<ph id="ph2">`Page`</ph>型です。</target>       </trans-unit>
        <trans-unit id="379" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="380" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>A script named <ph id="ph1">`OnSubmitScript`</ph> is registered with the <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph> so that when the page's form is submitted the script is invoked.</source>
          <target state="translated">という名前のスクリプト<ph id="ph1">`OnSubmitScript`</ph>に登録されて、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>ページのフォームが送信されると、スクリプトが呼び出されるようにします。</target>       </trans-unit>
        <trans-unit id="381" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)">
          <source>The OnSubmit statement type is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">OnSubmit ステートメントの型が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="382" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Determines whether the startup script is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">起動スクリプトが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="383" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source>The key of the startup script to search for.</source>
          <target state="translated">検索対象のスタートアップ スクリプトのキー。</target>       </trans-unit>
        <trans-unit id="384" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source>Determines whether the startup script is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using the specified key.</source>
          <target state="translated">指定されたキーを使用して、スタートアップ スクリプトが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="385" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the startup script is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">スタートアップ スクリプトが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="386" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
          <target state="translated">このメソッドを呼び出す前に、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>スクリプトが重複する登録を回避するためです。</target>       </trans-unit>
        <trans-unit id="387" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
          <target state="translated">これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="388" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source>A startup script is uniquely identified by its key and its type.</source>
          <target state="translated">スタートアップ スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="389" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="390" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method calls the overload that takes both a string <ph id="ph2">`key`</ph> and a <ph id="ph3">`type`</ph> parameter with the type set as a <ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph> object</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph>メソッドは、両方の文字列を受け取るオーバー ロードを呼び出す<ph id="ph2">`key`</ph>と<ph id="ph3">`type`</ph>として、型を持つパラメーターの設定、<ph id="ph4">&lt;xref:System.Web.UI.Page&gt;</ph>オブジェクト</target>       </trans-unit>
        <trans-unit id="391" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>The type of the startup script to search for.</source>
          <target state="translated">検索対象のスタートアップ スクリプトの型。</target>       </trans-unit>
        <trans-unit id="392" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>The key of the startup script to search for.</source>
          <target state="translated">検索対象のスタートアップ スクリプトのキー。</target>       </trans-unit>
        <trans-unit id="393" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>Determines whether the startup script is registered with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using the specified key and type.</source>
          <target state="translated">指定されたキーと型を使用して、スタートアップ スクリプトが <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="394" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the startup script is registered; otherwise, <ph id="ph2">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated">スタートアップ スクリプトが登録されている場合は <ph id="ph1">&lt;see langword="true" /&gt;</ph>。それ以外の場合は <ph id="ph2">&lt;see langword="false" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="395" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>Call this method before calling the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method to avoid registering duplicate scripts.</source>
          <target state="translated">このメソッドを呼び出す前に、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>スクリプトが重複する登録を回避するためです。</target>       </trans-unit>
        <trans-unit id="396" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>This is particularly important if the script requires a large amount of server resources to create.</source>
          <target state="translated">これは、スクリプトを作成するサーバーのリソースの消費量が必要な場合に特に重要です。</target>       </trans-unit>
        <trans-unit id="397" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>A client startup script is uniquely identified by its key and its type.</source>
          <target state="translated">クライアントのスタートアップ スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="398" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="399" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="400" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method checks for duplicates.</source>
          <target state="translated">既存の起動スクリプト ブロックを確認するロジックが削除された場合はありません 2 つの重複するスタートアップ スクリプト、レンダリングされるページの HTML ソース コードであるために注意してください、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>メソッドは、重複データをチェックします。</target>       </trans-unit>
        <trans-unit id="401" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>The benefit of checking is to reduce unnecessary computation.</source>
          <target state="translated">チェックの利点は、不要な計算処理を開始します。</target>       </trans-unit>
        <trans-unit id="402" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)">
          <source>The startup script type is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">スタートアップ スクリプトの型が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="403" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>The array name to register.</source>
          <target state="translated">登録する配列名。</target>       </trans-unit>
        <trans-unit id="404" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>The array value or values to register.</source>
          <target state="translated">登録する配列値。</target>       </trans-unit>
        <trans-unit id="405" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>Registers a JavaScript array declaration with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using an array name and array value.</source>
          <target state="translated">配列名と配列値を使用して、JavaScript 配列宣言を <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="406" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph> checks to see whether a registered array exists with the same name as the name specified in the <ph id="ph2">`arrayName`</ph> parameter and, if so, adds the values specified in the <ph id="ph3">`arrayValue`</ph> parameter.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph>で指定された名前と同じ名前で登録されている配列が存在するかどうかを確認するためのチェック、<ph id="ph2">`arrayName`</ph>パラメーターで指定された値を追加し、<ph id="ph3">`arrayValue`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="407" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>Because the underlying storage mechanism is based on an <ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>, duplicates are allowed.</source>
          <target state="translated">基になるストレージ メカニズムに基づいているため、<ph id="ph1">&lt;xref:System.Collections.ArrayList&gt;</ph>重複は許可されています。</target>       </trans-unit>
        <trans-unit id="408" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>If a registered array with the same name as the <ph id="ph1">`arrayName`</ph> parameter does not exist, it is created and the values in the <ph id="ph2">`arrayValue`</ph> parameter added to it.</source>
          <target state="translated">場合と同じ名前で登録済みの配列、<ph id="ph1">`arrayName`</ph>パラメーターが存在しないか、作成および内の値、<ph id="ph2">`arrayValue`</ph>パラメーターを追加します。</target>       </trans-unit>
        <trans-unit id="409" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (<ph id="ph1">\\</ph>") in the <ph id="ph2">`arrayValue`</ph> parameter.</source>
          <target state="translated">結果の JavaScript 配列の文字列リテラルにする場合は、単一引用符 (') を含めたり、二重引用符をエスケープ (<ph id="ph1">\\</ph>") で、<ph id="ph2">`arrayValue`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="410" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>The value of the <ph id="ph1">`arrayValue`</ph> parameter should be a single element.</source>
          <target state="translated">値、<ph id="ph1">`arrayValue`</ph>パラメーターが 1 つの要素にする必要があります。</target>       </trans-unit>
        <trans-unit id="411" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>If more than one value needs to be added to the array, make multiple calls using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph> method.</source>
          <target state="translated">複数の値は、配列に追加する必要がある場合、を使用して複数の呼び出しを行う、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="412" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A&gt;</ph> methods.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="413" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source>The example registers an array and a hidden value and defines the <ph id="ph1">`OnClick`</ph> event of an <ph id="ph2">`&lt;input&gt;`</ph> button to calculate the sum of two values of the array and the hidden value.</source>
          <target state="translated">例では、配列と非表示の値を登録しを定義、<ph id="ph1">`OnClick`</ph>のイベント、<ph id="ph2">`&lt;input&gt;`</ph>配列の 2 つの値と非表示の値の合計を計算するボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="414" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="arrayName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="arrayName" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="415" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Registers the client script with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">クライアント スクリプトを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="416" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>The type of the client script to register.</source>
          <target state="translated">登録するクライアント スクリプトの型。</target>       </trans-unit>
        <trans-unit id="417" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>The key of the client script to register.</source>
          <target state="translated">登録するクライアント スクリプトのキー。</target>       </trans-unit>
        <trans-unit id="418" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>The client script literal to register.</source>
          <target state="translated">登録するクライアント スクリプト リテラル。</target>       </trans-unit>
        <trans-unit id="419" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>Registers the client script with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a type, key, and script literal.</source>
          <target state="translated">型、キー、およびスクリプト リテラルを使用して、<ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトにクライアント スクリプトを登録します。</target>       </trans-unit>
        <trans-unit id="420" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>A client script is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="421" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="422" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
          <target state="translated">ページには、指定された型とキー ペアを持つ 1 つだけのスクリプトを登録できます。</target>       </trans-unit>
        <trans-unit id="423" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
          <target state="translated">既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。</target>       </trans-unit>
        <trans-unit id="424" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph>を指定したキーおよび種類のペアでクライアント スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとしてが不必要を回避する方法です。</target>       </trans-unit>
        <trans-unit id="425" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method, you must make sure that the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped in a <ph id="ph3">`&lt;script&gt;`</ph> element block.</source>
          <target state="translated">このオーバー ロードで、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッド、する必要がありますでスクリプトが指定されていることを確認して、<ph id="ph2">`script`</ph>にパラメーターがラップされて、<ph id="ph3">`&lt;script&gt;`</ph>要素ブロックします。</target>       </trans-unit>
        <trans-unit id="426" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method adds a script block to the top of the rendered page.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッドは、レンダリングされるページの上部にスクリプト ブロックを追加します。</target>       </trans-unit>
        <trans-unit id="427" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
          <target state="translated">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</target>       </trans-unit>
        <trans-unit id="428" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
          <target state="translated">スクリプト ブロックの順序が重要な場合を使用して、<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>オブジェクトを 1 つの文字列で、スクリプトを収集し、それらすべてを 1 つのクライアント スクリプト ブロック内に登録します。</target>       </trans-unit>
        <trans-unit id="429" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="430" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>The type of the client script to register.</source>
          <target state="translated">登録するクライアント スクリプトの型。</target>       </trans-unit>
        <trans-unit id="431" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>The key of the client script to register.</source>
          <target state="translated">登録するクライアント スクリプトのキー。</target>       </trans-unit>
        <trans-unit id="432" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>The client script literal to register.</source>
          <target state="translated">登録するクライアント スクリプト リテラル。</target>       </trans-unit>
        <trans-unit id="433" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>A Boolean value indicating whether to add script tags.</source>
          <target state="translated">スクリプト タグを追加するかどうかを示すブール値。</target>       </trans-unit>
        <trans-unit id="434" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>Registers the client script with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</source>
          <target state="translated">型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、クライアント スクリプトを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="435" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>A client script is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="436" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="437" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
          <target state="translated">ページには、指定された型とキー ペアを持つ 1 つだけのスクリプトを登録できます。</target>       </trans-unit>
        <trans-unit id="438" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
          <target state="translated">既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。</target>       </trans-unit>
        <trans-unit id="439" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph> method to determine whether a client script with a given key and type pair is already registered.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A&gt;</ph>メソッドを指定したキーおよび種類のペアでクライアント スクリプトは既に登録されているかどうかを判断します。</target>       </trans-unit>
        <trans-unit id="440" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>This lets you avoid unnecessarily attempting to add the script.</source>
          <target state="translated">これにより、スクリプトを追加しようとしてが不必要に回避できます。</target>       </trans-unit>
        <trans-unit id="441" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method, you can indicate whether the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped with a <ph id="ph3">`&lt;script&gt;`</ph> element block by using the <ph id="ph4">`addScriptTags`</ph> parameter.</source>
          <target state="translated">このオーバー ロードで、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッドを示すことができます、スクリプトがで提供されるかどうか、<ph id="ph2">`script`</ph>でパラメーターをラップ、<ph id="ph3">`&lt;script&gt;`</ph>要素ブロックを使用して、<ph id="ph4">`addScriptTags`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="442" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>Setting <ph id="ph1">`addScriptTags`</ph> to <ph id="ph2">`true`</ph> indicates that script tags will be added automatically.</source>
          <target state="translated">設定<ph id="ph1">`addScriptTags`</ph>に<ph id="ph2">`true`</ph>スクリプト タグが自動的に追加することを示します。</target>       </trans-unit>
        <trans-unit id="443" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method adds a script block to the top of the rendered page.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッドは、レンダリングされるページの上部にスクリプト ブロックを追加します。</target>       </trans-unit>
        <trans-unit id="444" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
          <target state="translated">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</target>       </trans-unit>
        <trans-unit id="445" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
          <target state="translated">スクリプト ブロックの順序が重要な場合を使用して、<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>オブジェクトを 1 つの文字列で、スクリプトを収集し、それらすべてを 1 つのクライアント スクリプト ブロック内に登録します。</target>       </trans-unit>
        <trans-unit id="446" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="447" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>Note that the <ph id="ph1">`addScriptTags`</ph> parameter is set to <ph id="ph2">`true`</ph> so the beginning and closing script tags are not included with the <ph id="ph3">`script`</ph> parameter.</source>
          <target state="translated">注意してください、<ph id="ph1">`addScriptTags`</ph>にパラメーターが設定されている<ph id="ph2">`true`</ph>開始タグと終了スクリプト タグに含まれていないため、<ph id="ph3">`script`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="448" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)">
          <source>The client script block type is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプト ブロックの型が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="449" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Registers the client script include with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">クライアント スクリプト インクルードを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="450" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>The key of the client script include to register.</source>
          <target state="translated">登録するクライアント スクリプト インクルードのキー。</target>       </trans-unit>
        <trans-unit id="451" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>The URL of the client script include to register.</source>
          <target state="translated">登録するクライアント スクリプト インクルードの URL。</target>       </trans-unit>
        <trans-unit id="452" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>Registers the client script with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a key and a URL, which enables the script to be called from the client.</source>
          <target state="translated">キーと URL を使用して、クライアント スクリプトを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。これにより、スクリプトをクライアントから呼び出せるようになります。</target>       </trans-unit>
        <trans-unit id="453" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>A client script include is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型では一意に識別します。</target>       </trans-unit>
        <trans-unit id="454" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="455" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
          <target state="translated">ページには、指定された型とキー ペアを持つ 1 つだけのスクリプトを登録できます。</target>       </trans-unit>
        <trans-unit id="456" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
          <target state="translated">既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。</target>       </trans-unit>
        <trans-unit id="457" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A&gt;</ph> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A&gt;</ph>クライアント スクリプトを指定したキーに含めるし、型のペアは既に登録されてでスクリプトを追加しようとしてが不必要に回避いるかどうかを調べます。</target>       </trans-unit>
        <trans-unit id="458" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>To resolve the client URL, use the <ph id="ph1">&lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt;</ph> method.</source>
          <target state="translated">クライアントの URL を解決するを使用して、<ph id="ph1">&lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="459" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>This method uses the context of the URL on which it is called to resolve the path.</source>
          <target state="translated">このメソッドは、これが呼び出されるパスを解決するのには、URL のコンテキストを使用します。</target>       </trans-unit>
        <trans-unit id="460" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method calls the overload that takes a <ph id="ph2">`key`</ph>, a <ph id="ph3">`URL`</ph>, and a <ph id="ph4">`type`</ph> parameter.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>メソッド呼び出しを受け取るオーバー ロード、 <ph id="ph2">`key`</ph>、 <ph id="ph3">`URL`</ph>、および<ph id="ph4">`type`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="461" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>The method adds a script block at the top of the rendered page.</source>
          <target state="translated">メソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。</target>       </trans-unit>
        <trans-unit id="462" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)">
          <source>For related information, including syntax, usage, and an example, see <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>.</source>
          <target state="translated">関連情報については、構文、使用状況、および、例など、次を参照してください。<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="463" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The type of the client script include to register.</source>
          <target state="translated">登録するクライアント スクリプト インクルードの型。</target>       </trans-unit>
        <trans-unit id="464" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The key of the client script include to register.</source>
          <target state="translated">登録するクライアント スクリプト インクルードのキー。</target>       </trans-unit>
        <trans-unit id="465" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The URL of the client script include to register.</source>
          <target state="translated">登録するクライアント スクリプト インクルードの URL。</target>       </trans-unit>
        <trans-unit id="466" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>Registers the client script include with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a type, a key, and a URL.</source>
          <target state="translated">型、キー、および URL を使用して、クライアント スクリプト インクルードを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="467" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>This overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method takes <bpt id="p1">*</bpt>key<ept id="p1">*</ept> and <bpt id="p2">*</bpt>url<ept id="p2">*</ept> parameters to identify the script, as well as a <ph id="ph2">`type`</ph> parameter to specify the identification of the client script include.</source>
          <target state="translated">このオーバー ロード、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>メソッドは<bpt id="p1">*</bpt>キー<ept id="p1">*</ept>と<bpt id="p2">*</bpt>url<ept id="p2">*</ept> 、スクリプトを識別するパラメーターと同様に、<ph id="ph2">`type`</ph>クライアント スクリプトの id を指定するパラメーターが含まれます。</target>       </trans-unit>
        <trans-unit id="468" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>You specify the type based on the object that will be accessing the resource.</source>
          <target state="translated">リソースにアクセスするオブジェクトに基づく種類を指定します。</target>       </trans-unit>
        <trans-unit id="469" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>For instance, when using a <ph id="ph1">`Page`</ph> instance to access the resource, you specify the <ph id="ph2">`Page`</ph> type.</source>
          <target state="translated">インスタンスを使用する場合、<ph id="ph1">`Page`</ph>を指定する、リソースにアクセスするインスタンス、<ph id="ph2">`Page`</ph>型です。</target>       </trans-unit>
        <trans-unit id="470" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>To resolve the client URL, use the <ph id="ph1">&lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt;</ph> method.</source>
          <target state="translated">クライアントの URL を解決するを使用して、<ph id="ph1">&lt;xref:System.Web.UI.Control.ResolveClientUrl%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="471" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>This method uses the context of the URL on which it is called to resolve the path.</source>
          <target state="translated">このメソッドは、これが呼び出されるパスを解決するのには、URL のコンテキストを使用します。</target>       </trans-unit>
        <trans-unit id="472" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>This method adds a script block at the top of the rendered page.</source>
          <target state="translated">このメソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。</target>       </trans-unit>
        <trans-unit id="473" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="474" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph> method checks for duplicates.</source>
          <target state="translated">既存のクライアント スクリプトに含まれているを確認するロジックが削除された場合がありますもされませんになります重複しているクライアント スクリプトをレンダリングされるページのため、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A&gt;</ph>メソッドは、重複データをチェックします。</target>       </trans-unit>
        <trans-unit id="475" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The benefit of checking is to reduce unnecessary computation.</source>
          <target state="translated">チェックの利点は、不要な計算処理を開始します。</target>       </trans-unit>
        <trans-unit id="476" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>This example requires a JavaScript file named Script_include.js with the following contents:</source>
          <target state="translated">この例では、次の内容のようなをという名前の JavaScript ファイルが必要です。</target>       </trans-unit>
        <trans-unit id="477" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The client script include type is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">クライアント スクリプト インクルードの型が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="478" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The URL is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">URL が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="479" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="480" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)">
          <source>The URL is empty.</source>
          <target state="translated">URL が空です。</target>       </trans-unit>
        <trans-unit id="481" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The type of the client script resource to register.</source>
          <target state="translated">登録するクライアント スクリプト リソースの型。</target>       </trans-unit>
        <trans-unit id="482" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The name of the client script resource to register.</source>
          <target state="translated">登録するクライアント スクリプト リソースの名前。</target>       </trans-unit>
        <trans-unit id="483" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>Registers the client script resource with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a type and a resource name.</source>
          <target state="translated">型とリソース名を使用して、クライアント スクリプト リソースを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="484" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> WebResource.axd HTTP ハンドラーのアセンブリのコンパイル時のリソースにアクセスするときにメソッドを使用します。</target>       </trans-unit>
        <trans-unit id="485" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> method registers the script with the <ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph> object and prevents duplicate scripts.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph>メソッドを使用してスクリプトを登録する、<ph id="ph2">&lt;xref:System.Web.UI.Page&gt;</ph>オブジェクトし、重複するスクリプトを防止します。</target>       </trans-unit>
        <trans-unit id="486" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>This method wraps the contents of the resource URL with a <ph id="ph1">`&lt;script&gt;`</ph> element block.</source>
          <target state="translated">このメソッドを使用してリソースの URL の内容をラップする、<ph id="ph1">`&lt;script&gt;`</ph>要素ブロックします。</target>       </trans-unit>
        <trans-unit id="487" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="488" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The following code example demonstrates how to programmatically apply the <ph id="ph1">&lt;xref:System.Web.UI.WebResourceAttribute&gt;</ph> metadata attribute to mark the assembly for the resources that will be served.</source>
          <target state="translated">次のコード例は、プログラムを適用する方法を示します、<ph id="ph1">&lt;xref:System.Web.UI.WebResourceAttribute&gt;</ph>提供されるリソースのアセンブリをマークするメタデータの属性です。</target>       </trans-unit>
        <trans-unit id="489" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>This example requires a JavaScript file named <ph id="ph1">`Script_include.js`</ph>, with the following contents:</source>
          <target state="translated">この例には、名前付き JavaScript ファイルが必要です。 <ph id="ph1">`Script_include.js`</ph>、以下の内容で。</target>       </trans-unit>
        <trans-unit id="490" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>Compile the <ph id="ph1">`Script_include.js`</ph> file as a resource in the <ph id="ph2">`Samples.AspNet.CS.Controls`</ph> assembly that contains the <ph id="ph3">`ClientScriptResourceLabel`</ph> class.</source>
          <target state="translated">コンパイル、<ph id="ph1">`Script_include.js`</ph>ファイル内のリソースとして、<ph id="ph2">`Samples.AspNet.CS.Controls`</ph>を含むアセンブリ、<ph id="ph3">`ClientScriptResourceLabel`</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="491" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The client resource name is <ph id="ph1">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated">クライアント リソースの名前が <ph id="ph1">&lt;see langword="null" /&gt;</ph> です。</target>       </trans-unit>
        <trans-unit id="492" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source><ph id="ph1">\-</ph> or -</source>
          <target state="translated"><ph id="ph1">\-</ph> または</target>       </trans-unit>
        <trans-unit id="493" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)">
          <source>The client resource name has a length of zero.</source>
          <target state="translated">クライアント リソースの名前の長さがゼロです。</target>       </trans-unit>
        <trans-unit id="494" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Registers a name/value pair as a custom (expando) attribute of the specified control.</source>
          <target state="translated">指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</target>       </trans-unit>
        <trans-unit id="495" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> on the page that contains the custom attribute.</source>
          <target state="translated">カスタム属性を含む、ページ上の <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="496" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>The name of the custom attribute to register.</source>
          <target state="translated">登録するカスタム属性の名前。</target>       </trans-unit>
        <trans-unit id="497" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>The value of the custom attribute.</source>
          <target state="translated">カスタム属性の値。</target>       </trans-unit>
        <trans-unit id="498" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</source>
          <target state="translated">コントロール ID、属性名、および属性値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</target>       </trans-unit>
        <trans-unit id="499" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph> method registers a name/value pair as a custom (expando) attribute on the specified <ph id="ph2">&lt;xref:System.Web.UI.Control&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph>メソッドは、指定したカスタム (expando) 属性として名前/値ペアを登録<ph id="ph2">&lt;xref:System.Web.UI.Control&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="500" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</source>
          <target state="translated">Expando 属性が、レンダリングされたコントロールのマークアップの XHTML 互換性を保つための JavaScript から動的に設定されます。</target>       </trans-unit>
        <trans-unit id="501" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>Quotes and backslashes in the custom (expando) attribute's values are escaped.</source>
          <target state="translated">引用符と円記号のカスタム (expando) 属性の値はエスケープされます。</target>       </trans-unit>
        <trans-unit id="502" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>If you do not want to escape quotes and backslashes, call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph> overload method and set the <ph id="ph2">`encode`</ph> parameter to <ph id="ph3">`false`</ph>.</source>
          <target state="translated">引用符と円記号をエスケープするためにしたくない場合、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph>メソッドをオーバー ロードされ、設定、<ph id="ph2">`encode`</ph>パラメーターを<ph id="ph3">`false`</ph>です。</target>       </trans-unit>
        <trans-unit id="503" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)">
          <source>If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</source>
          <target state="translated">Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。</target>       </trans-unit>
        <trans-unit id="504" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph> on the page that contains the custom attribute.</source>
          <target state="translated">カスタム属性を含む、ページ上の <ph id="ph1">&lt;see cref="T:System.Web.UI.Control" /&gt;</ph>。</target>       </trans-unit>
        <trans-unit id="505" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>The name of the custom attribute to register.</source>
          <target state="translated">登録するカスタム属性の名前。</target>       </trans-unit>
        <trans-unit id="506" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>The value of the custom attribute.</source>
          <target state="translated">カスタム属性の値。</target>       </trans-unit>
        <trans-unit id="507" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>A Boolean value indicating whether to encode the custom attribute to register.</source>
          <target state="translated">登録するカスタム属性をエンコードするかどうかを示すブール値。</target>       </trans-unit>
        <trans-unit id="508" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</source>
          <target state="translated">コントロール ID、属性名、属性値、および属性値をエンコードするかどうかを示すブール値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</target>       </trans-unit>
        <trans-unit id="509" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph> method registers a name/value pair as a custom (expando) attribute on the specified <ph id="ph2">&lt;xref:System.Web.UI.Control&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph>メソッドは、指定したカスタム (expando) 属性として名前/値ペアを登録<ph id="ph2">&lt;xref:System.Web.UI.Control&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="510" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</source>
          <target state="translated">Expando 属性が、レンダリングされたコントロールのマークアップの XHTML 互換性を保つための JavaScript から動的に設定されます。</target>       </trans-unit>
        <trans-unit id="511" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>Set the <ph id="ph1">`encode`</ph> parameter to <ph id="ph2">`true`</ph> if you need to escape quotes and backslashes in your expando attribute's value.</source>
          <target state="translated">設定、<ph id="ph1">`encode`</ph>パラメーターを<ph id="ph2">`true`</ph>引用符と expando 属性の値にバック スラッシュをエスケープする必要がある場合。</target>       </trans-unit>
        <trans-unit id="512" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</source>
          <target state="translated">Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。</target>       </trans-unit>
        <trans-unit id="513" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>The following code example demonstrates how to use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph> method of the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph> class.</source>
          <target state="translated">次のコード例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A&gt;</ph>のメソッド、<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager&gt;</ph>クラスです。</target>       </trans-unit>
        <trans-unit id="514" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)">
          <source>The client script in the rendered page sets the <ph id="ph1">`title`</ph> attribute of a <ph id="ph2">`&lt;span&gt;`</ph> element.</source>
          <target state="translated">レンダリングされるページのセット内のクライアント スクリプト、<ph id="ph1">`title`</ph>の属性、<ph id="ph2">`&lt;span&gt;`</ph>要素。</target>       </trans-unit>
        <trans-unit id="515" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Registers an event reference for validation.</source>
          <target state="translated">検証用にイベント参照を登録します。</target>       </trans-unit>
        <trans-unit id="516" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)">
          <source>A unique ID representing the client control generating the event.</source>
          <target state="translated">イベントを生成するクライアント コントロールを表す一意の ID。</target>       </trans-unit>
        <trans-unit id="517" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)">
          <source>Registers an event reference for validation with a unique control ID representing the client control generating the event.</source>
          <target state="translated">イベントを生成するクライアント コントロールを表す一意のコントロール ID を使用して、検証用にイベント参照を登録します。</target>       </trans-unit>
        <trans-unit id="518" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)">
          <source>For more information and examples, see the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method.</source>
          <target state="translated">詳細と例については、次を参照してください。、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="519" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)">
          <source>The following example shows how to use the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A&gt;</ph> method in order to register a callback for validation, and how to validate that the callback originated from the page.</source>
          <target state="translated">次の例を使用する方法を示しています、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A&gt;</ph>検証、およびページからコールバックが送られたことを検証する方法のコールバックを登録するためのメソッドです。</target>       </trans-unit>
        <trans-unit id="520" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)">
          <source>A <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> object that specifies how client JavaScript is generated to initiate a postback event.</source>
          <target state="translated">ポストバック イベントを開始するためにクライアントの JavaScript を生成する方法を指定する <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph>ブジェクト。</target>       </trans-unit>
        <trans-unit id="521" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)">
          <source>Registers an event reference for validation with <ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="T:System.Web.UI.PostBackOptions" /&gt;</ph> を使用して、検証用にイベント参照を登録します。</target>       </trans-unit>
        <trans-unit id="522" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)">
          <source>For more information and examples, see the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method.</source>
          <target state="translated">詳細と例については、次を参照してください。、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="523" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)">
          <source>A unique ID representing the client control generating the event.</source>
          <target state="translated">イベントを生成するクライアント コントロールを表す一意の ID。</target>       </trans-unit>
        <trans-unit id="524" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)">
          <source>Event arguments passed with the client event.</source>
          <target state="translated">クライアント イベントで渡されるイベント引数。</target>       </trans-unit>
        <trans-unit id="525" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)">
          <source>Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</source>
          <target state="translated">イベントを生成するクライアント コントロールを表す一意のコントロール ID とイベント引数を使用して、検証用にイベント参照を登録します。</target>       </trans-unit>
        <trans-unit id="526" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A&gt;</ph> method to register a callback for validation and to validate that the callback originated from the page.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A&gt;</ph>検証コールバックを登録して、ページからコールバックが送られたことを検証する方法です。</target>       </trans-unit>
        <trans-unit id="527" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)">
          <source>To improve on the validation shown in the example, you could modify the validation <ph id="ph1">`argument`</ph> parameter to contain information specific to the user such as an identity or role</source>
          <target state="translated">この例に示すように、検証、パフォーマンスを向上するには、検証を変更するでした<ph id="ph1">`argument`</ph>id やロールなどのユーザーに固有の情報を格納します。</target>       </trans-unit>
        <trans-unit id="528" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method to register a callback for validation.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph>検証コールバックを登録するメソッド。</target>       </trans-unit>
        <trans-unit id="529" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)">
          <source>The method is called prior to the <ph id="ph1">&lt;see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /&gt;</ph> method.</source>
          <target state="translated">このメソッドが <ph id="ph1">&lt;see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /&gt;</ph> メソッドの前に呼び出されます。</target>       </trans-unit>
        <trans-unit id="530" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)">
          <source>The name of the hidden field to register.</source>
          <target state="translated">登録する隠しフィールドの名前。</target>       </trans-unit>
        <trans-unit id="531" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)">
          <source>The initial value of the field to register.</source>
          <target state="translated">登録するフィールドの初期値。</target>       </trans-unit>
        <trans-unit id="532" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)">
          <source>Registers a hidden value with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">隠し値を <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="533" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A&gt;</ph> method creates a hidden <ph id="ph2">`&lt;input&gt;`</ph> element on the rendered HTML page.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A&gt;</ph>メソッドは、非表示を作成<ph id="ph2">`&lt;input&gt;`</ph>レンダリングされた HTML ページ上の要素。</target>       </trans-unit>
        <trans-unit id="534" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph> and <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A&gt;</ph> methods.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A&gt;</ph>と<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="535" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)">
          <source>The example registers an array and a hidden value and defines the <ph id="ph1">`OnClick`</ph> event of an <ph id="ph2">`&lt;input&gt;`</ph> button to calculate the sum of two values of the array and the hidden value.</source>
          <target state="translated">例では、配列と非表示の値を登録しを定義、<ph id="ph1">`OnClick`</ph>のイベント、<ph id="ph2">`&lt;input&gt;`</ph>配列の 2 つの値と非表示の値の合計を計算するボタンをクリックします。</target>       </trans-unit>
        <trans-unit id="536" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="hiddenFieldName" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="hiddenFieldName" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="537" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>The type of the OnSubmit statement to register.</source>
          <target state="translated">登録する OnSubmit ステートメントの型。</target>       </trans-unit>
        <trans-unit id="538" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>The key of the OnSubmit statement to register.</source>
          <target state="translated">登録する OnSubmit ステートメントのキー。</target>       </trans-unit>
        <trans-unit id="539" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>The script literal of the OnSubmit statement to register.</source>
          <target state="translated">登録する OnSubmit ステートメントのスクリプト リテラル。</target>       </trans-unit>
        <trans-unit id="540" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>Registers an OnSubmit statement with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a type, a key, and a script literal.</source>
          <target state="translated">型、キー、およびスクリプト リテラルを使用して、OnSubmit ステートメントを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="541" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>The statement executes when the <ph id="ph1">&lt;see cref="T:System.Web.UI.HtmlControls.HtmlForm" /&gt;</ph> is submitted.</source>
          <target state="translated">ステートメントは、<ph id="ph1">&lt;see cref="T:System.Web.UI.HtmlControls.HtmlForm" /&gt;</ph> が送信されると、実行されます。</target>       </trans-unit>
        <trans-unit id="542" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>An OnSubmit statement is uniquely identified by its key and its type.</source>
          <target state="translated">OnSubmit ステートメントは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="543" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>Statements with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーと型指定されたステートメントは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="544" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>Only one statement with a given type and key pair can be registered with the page.</source>
          <target state="translated">指定された型とキー ペアを持つ 1 つだけのステートメントは、ページを登録することができます。</target>       </trans-unit>
        <trans-unit id="545" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>Attempting to register a statement that is already registered will not create a duplicate of the statement.</source>
          <target state="translated">既に登録されているステートメントを登録しようとしても、ステートメントの重複は作成されません。</target>       </trans-unit>
        <trans-unit id="546" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A&gt;</ph>を OnSubmit ステートメントが指定されたキーと型のペアに既に登録されているかどうかを判断し、スクリプトを追加しようとしてが不必要に回避する方法です。</target>       </trans-unit>
        <trans-unit id="547" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>The <ph id="ph1">`script`</ph> parameter of the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method can contain multiple script commands as long as they are properly delimited with a semicolon (;).</source>
          <target state="translated"><ph id="ph1">`script`</ph>のパラメーター、<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph>メソッドは適切にセミコロン (;) で区切られている限り、複数のスクリプト コマンドを含めることができます。</target>       </trans-unit>
        <trans-unit id="548" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>The <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph>ページが送信され、送信を取り消す機会が与えられます前に実行されるスクリプトを追加します。</target>       </trans-unit>
        <trans-unit id="549" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>For more information on HTML forms and the <ph id="ph1">`OnSubmit`</ph> attribute, see the <bpt id="p1">[</bpt>World Wide Web Consortium (W3C) Web site<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37125)</ept>.</source>
          <target state="translated">HTML フォームの詳細については、<ph id="ph1">`OnSubmit`</ph>属性を参照してください、 <bpt id="p1">[</bpt>World Wide Web コンソーシアム (W3C) の Web サイト<ept id="p1">](http://go.microsoft.com/fwlink/?linkid=37125)</ept>です。</target>       </trans-unit>
        <trans-unit id="550" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="551" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="552" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Registers the startup script with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object.</source>
          <target state="translated">スタートアップ スクリプトを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="553" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>The type of the startup script to register.</source>
          <target state="translated">登録するスタートアップ スクリプの型。</target>       </trans-unit>
        <trans-unit id="554" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>The key of the startup script to register.</source>
          <target state="translated">登録するスタートアップ スクリプトのキー。</target>       </trans-unit>
        <trans-unit id="555" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>The startup script literal to register.</source>
          <target state="translated">登録するスタートアップ スクリプ リテラル。</target>       </trans-unit>
        <trans-unit id="556" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>Registers the startup script with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a type, a key, and a script literal.</source>
          <target state="translated">型、キー、およびスクリプト リテラルを使用して、<ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトにスタートアップ スクリプを登録します。</target>       </trans-unit>
        <trans-unit id="557" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>A client script is uniquely identified by its key and its type.</source>
          <target state="translated">クライアント スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="558" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="559" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
          <target state="translated">ページには、指定された型とキー ペアを持つ 1 つだけのスクリプトを登録できます。</target>       </trans-unit>
        <trans-unit id="560" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
          <target state="translated">既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。</target>       </trans-unit>
        <trans-unit id="561" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph>を指定したキーおよび種類のペアでスタートアップ スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとしてが不必要を回避する方法です。</target>       </trans-unit>
        <trans-unit id="562" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method, you must make sure that the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped with a <ph id="ph3">`&lt;script&gt;`</ph> element block.</source>
          <target state="translated">このオーバー ロードで、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>メソッド、する必要がありますでスクリプトが指定されていることを確認して、<ph id="ph2">`script`</ph>でパラメーターがラップされて、<ph id="ph3">`&lt;script&gt;`</ph>要素ブロックします。</target>       </trans-unit>
        <trans-unit id="563" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>The script block added by the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method executes when the page finishes loading but before the page's <ph id="ph2">&lt;xref:System.Web.UI.Control.OnLoad%2A&gt;</ph> event is raised.</source>
          <target state="translated">によって追加されたスクリプト ブロック、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>ページ読み込みが完了したときに、ページの前に、メソッドが実行される<ph id="ph2">&lt;xref:System.Web.UI.Control.OnLoad%2A&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="564" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
          <target state="translated">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</target>       </trans-unit>
        <trans-unit id="565" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
          <target state="translated">スクリプト ブロックの順序が重要な場合を使用して、<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>オブジェクトを 1 つの文字列で、スクリプトを収集し、それらすべてを 1 つのクライアント スクリプト ブロック内に登録します。</target>       </trans-unit>
        <trans-unit id="566" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="567" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>Note that the beginning and closing script tags are included within the <ph id="ph1">`script`</ph> parameter.</source>
          <target state="translated">ノート内で、開始タグと終了スクリプト タグが含まれている、<ph id="ph1">`script`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="568" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)">
          <source>To have the script tags added based on an additional parameter setting, see the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method.</source>
          <target state="translated">追加されたタグを参照してください、追加のパラメーターの設定に基づいて、スクリプトを<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="569" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>The type of the startup script to register.</source>
          <target state="translated">登録するスタートアップ スクリプの型。</target>       </trans-unit>
        <trans-unit id="570" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>The key of the startup script to register.</source>
          <target state="translated">登録するスタートアップ スクリプトのキー。</target>       </trans-unit>
        <trans-unit id="571" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>The startup script literal to register.</source>
          <target state="translated">登録するスタートアップ スクリプ リテラル。</target>       </trans-unit>
        <trans-unit id="572" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>A Boolean value indicating whether to add script tags.</source>
          <target state="translated">スクリプト タグを追加するかどうかを示すブール値。</target>       </trans-unit>
        <trans-unit id="573" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>Registers the startup script with the <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</source>
          <target state="translated">型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、スタートアップ スクリプを <ph id="ph1">&lt;see cref="T:System.Web.UI.Page" /&gt;</ph> オブジェクトに登録します。</target>       </trans-unit>
        <trans-unit id="574" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>A startup script is uniquely identified by its key and its type.</source>
          <target state="translated">スタートアップ スクリプトは、そのキーとその型で一意に識別します。</target>       </trans-unit>
        <trans-unit id="575" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>Scripts with the same key and type are considered duplicates.</source>
          <target state="translated">同じキーおよび種類を使用してスクリプトは、重複と見なされます。</target>       </trans-unit>
        <trans-unit id="576" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>Only one script with a given type and key pair can be registered with the page.</source>
          <target state="translated">ページには、指定された型とキー ペアを持つ 1 つだけのスクリプトを登録できます。</target>       </trans-unit>
        <trans-unit id="577" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>Attempting to register a script that is already registered does not create a duplicate of the script.</source>
          <target state="translated">既に登録されているスクリプトを登録しようとしています。 重複したスクリプトは作成されません。</target>       </trans-unit>
        <trans-unit id="578" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>Call the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</source>
          <target state="translated">呼び出す、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A&gt;</ph>を指定したキーおよび種類のペアでスタートアップ スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとしてが不必要を回避する方法です。</target>       </trans-unit>
        <trans-unit id="579" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>In this overload of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method, you can indicate whether the script provided in the <ph id="ph2">`script`</ph> parameter is wrapped with a <ph id="ph3">`&lt;script&gt;`</ph> element block by using the <ph id="ph4">`addScriptTags`</ph> parameter.</source>
          <target state="translated">このオーバー ロードで、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>メソッドを示すことができます、スクリプトがで提供されるかどうか、<ph id="ph2">`script`</ph>でパラメーターをラップ、<ph id="ph3">`&lt;script&gt;`</ph>要素ブロックを使用して、<ph id="ph4">`addScriptTags`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="580" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>Setting <ph id="ph1">`addScriptTags`</ph> to <ph id="ph2">`true`</ph> indicates that script tags will be added automatically.</source>
          <target state="translated">設定<ph id="ph1">`addScriptTags`</ph>に<ph id="ph2">`true`</ph>スクリプト タグが自動的に追加することを示します。</target>       </trans-unit>
        <trans-unit id="581" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>The script block added by the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method executes when the page finishes loading but before the page's <ph id="ph2">&lt;xref:System.Web.UI.Control.OnLoad%2A&gt;</ph> event is raised.</source>
          <target state="translated">によって追加されたスクリプト ブロック、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>ページ読み込みが完了したときに、ページの前に、メソッドが実行される<ph id="ph2">&lt;xref:System.Web.UI.Control.OnLoad%2A&gt;</ph>イベントが発生します。</target>       </trans-unit>
        <trans-unit id="582" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>The script blocks are not guaranteed to be output in the order they are registered.</source>
          <target state="translated">スクリプト ブロックは、登録されている順序で出力されるとは限りません。</target>       </trans-unit>
        <trans-unit id="583" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>If the order of the script blocks is important, use a <ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph> object to gather the scripts together in a single string, and then register them all in a single client script block.</source>
          <target state="translated">スクリプト ブロックの順序が重要な場合を使用して、<ph id="ph1">&lt;xref:System.Text.StringBuilder&gt;</ph>オブジェクトを 1 つの文字列で、スクリプトを収集し、それらすべてを 1 つのクライアント スクリプト ブロック内に登録します。</target>       </trans-unit>
        <trans-unit id="584" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>The following code example demonstrates the use of the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph> method.</source>
          <target state="translated">使用を次のコード例に示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A&gt;</ph>メソッドです。</target>       </trans-unit>
        <trans-unit id="585" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source>Note that the <ph id="ph1">`addScriptTags`</ph> parameter is set to <ph id="ph2">`false`</ph> so the beginning and closing script tags are included with the <ph id="ph3">`script`</ph> parameter.</source>
          <target state="translated">なお、<ph id="ph1">`addScriptTags`</ph>にパラメーターが設定されている<ph id="ph2">`false`</ph>ため、開始タグと終了スクリプト タグに含まれて、<ph id="ph3">`script`</ph>パラメーター。</target>       </trans-unit>
        <trans-unit id="586" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)">
          <source><ph id="ph1">&lt;paramref name="type" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="type" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph>です。</target>       </trans-unit>
        <trans-unit id="587" translate="yes" xml:space="preserve" uid="T:System.Web.UI.ClientScriptManager">
          <source>Validates a client event.</source>
          <target state="translated">クライアント イベントを検証します。</target>       </trans-unit>
        <trans-unit id="588" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)">
          <source>A unique ID representing the client control generating the event.</source>
          <target state="translated">イベントを生成するクライアント コントロールを表す一意の ID。</target>       </trans-unit>
        <trans-unit id="589" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)">
          <source>Validates a client event that was registered for event validation using the <ph id="ph1">&lt;see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /&gt;</ph> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</target>       </trans-unit>
        <trans-unit id="590" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)">
          <source>A unique ID representing the client control generating the event.</source>
          <target state="translated">イベントを生成するクライアント コントロールを表す一意の ID。</target>       </trans-unit>
        <trans-unit id="591" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)">
          <source>The event arguments passed with the client event.</source>
          <target state="translated">クライアント イベントで渡されるイベント引数。</target>       </trans-unit>
        <trans-unit id="592" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)">
          <source>Validates a client event that was registered for event validation using the <ph id="ph1">&lt;see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /&gt;</ph> method.</source>
          <target state="translated"><ph id="ph1">&lt;see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /&gt;</ph> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</target>       </trans-unit>
        <trans-unit id="593" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)">
          <source>The following code example demonstrates using the <ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph> method and the <ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A&gt;</ph> method to register a callback for validation and to validate that the callback originated from the page.</source>
          <target state="translated">次のコード例では、使用方法を示します、<ph id="ph1">&lt;xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A&gt;</ph>メソッドおよび<ph id="ph2">&lt;xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A&gt;</ph>検証コールバックを登録して、ページからコールバックが送られたことを検証する方法です。</target>       </trans-unit>
        <trans-unit id="594" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)">
          <source>To improve on the validation shown here, you could modify the validation <ph id="ph1">`argument`</ph> parameter to contain information specific to the user such as an identity or role</source>
          <target state="translated">ここで示すように、検証、パフォーマンスを向上するには、検証を変更する可能性があります<ph id="ph1">`argument`</ph>id やロールなどのユーザーに固有の情報を格納します。</target>       </trans-unit>
        <trans-unit id="595" translate="yes" xml:space="preserve" uid="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)">
          <source><ph id="ph1">&lt;paramref name="uniqueId" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph> or an empty string ("").</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="uniqueId" /&gt;</ph> は <ph id="ph2">&lt;see langword="null" /&gt;</ph> または空の文字列 ("") です。</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>