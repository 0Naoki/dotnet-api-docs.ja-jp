<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="230ccdaa372490a255772449e9c71e08f0f2b63e" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="HT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52207551" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <TypeSignature Language="F#" Value="type ClientScriptManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Web アプリケーションのクライアント スクリプトを管理するためのメソッドを定義します。</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager>クラスは、Web アプリケーションに追加のクライアント スクリプトの管理に使用します。 参照を取得することができます、<xref:System.Web.UI.ClientScriptManager>クラスから、<xref:System.Web.UI.Page.ClientScript%2A>のプロパティ、<xref:System.Web.UI.Page>オブジェクト。  
  
 できるスクリプトを追加するクライアント Web ページに宣言によってページの HTML マークアップにスクリプトを含めることで。 ただし、クライアント スクリプトを動的に追加することが必要な場合があります。 スクリプトを動的に追加するには、使用、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッド、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド、または<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>メソッドは、スクリプトを追加するタイミングと方法に応じて。 詳細については、次を参照してください。[方法: 追加クライアント スクリプトに動的に ASP.NET Web Pages を](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)します。  
  
 <xref:System.Web.UI.ClientScriptManager>キーによって一意に識別するスクリプト クラス<xref:System.String>と<xref:System.Type>します。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 スクリプトの種類を使用して、ページ上で使用可能性のある別のユーザー コントロールからのようなスクリプトの混乱を回避するのに役立ちます。  
  
 <xref:System.Web.UI.ClientScriptManager>ポストバックを実行せず、クライアントからサーバー コードを実行する必要がある場合の状況でのクライアント コールバックを呼び出すクラスを使用できます。 これは、サーバーに、帯域外のコールバックの実行と呼ばれます。 クライアントのコールバックでは、クライアント スクリプト関数は、ASP.NET Web ページに非同期要求を送信します。 Web ページは、コールバックを処理する通常のライフ サイクルの修正バージョンを実行します。 使用して、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが呼び出されると、クライアント関数への参照を取得するサーバー イベントに対するクライアント コールバックを開始します。 詳細については、次を参照してください。[ポストバックなしクライアント コールバックの実装](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)します。  
  
> [!NOTE]
>  ECMAScript がクライアントで有効にする必要があるとドキュメント オブジェクト モデル (DOM) をサポートしない古いブラウザーでスクリプト コールバックが動作しません。 ブラウザーがコールバックをサポートしているかを確認するには、使用、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>プロパティからアクセスできる、 <xref:System.Web.HttpRequest.Browser%2A> ASP.NET 組み込みのプロパティ<xref:System.Web.HttpContext.Request%2A>オブジェクト。  
  
 使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>クライアント ポストバック イベントを定義するメソッド。 これらのメソッドは、呼び出されるとすると、ページにポストバックするサーバー、クライアント スクリプトの機能を有効にします。 クライアント ポストバック イベントは、Web ページがクライアント ポストバック イベントを処理する通常のライフ サイクルを完了することで、クライアントのコールバックと異なります。  
  
> [!NOTE]
>  使用する場合、<xref:System.Web.UI.WebControls.Button>コントロールと<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティに設定されて`false`を使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドをクライアントに返すポストバック イベントを<xref:System.Web.UI.WebControls.Button>コントロール。  
  
 <xref:System.Web.UI.WebControls.Button.OnClientClick%2A>のプロパティ、<xref:System.Web.UI.WebControls.Button>コントロール、<xref:System.Web.UI.WebControls.ImageButton>コントロール、および<xref:System.Web.UI.WebControls.LinkButton>コントロールは、クライアント スクリプトを実行するために使用できます。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>のメソッド、<xref:System.Web.UI.ClientScriptManager>クラス。 2 つのクライアント スクリプトは、ページで定義されている: `PopupScript`、ページが読み込まれるときに警告メッセージが表示されますおよび`ButtonClickScript`、HTML ボタンのクライアントのハンドラーを定義する`onClick`イベント。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
    <related type="Article" href="https://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa">ASP.NET Web Pages でクライアント スクリプト</related>
    <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーに渡される引数。 
 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、およびコンテキストが含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>メソッドは、ページの通常のライフ サイクルの修正バージョンであるサーバーに、帯域外のコールバックを実行します。 詳細については、次を参照してください。[ポストバックなしクライアント コールバックの実装](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)します。  
  
> [!NOTE]
>  ブラウザーが Microsoft Internet Explorer (バージョン 5.0 以降) の場合は、スクリプト コールバック機構はよう COM オブジェクトを通じて実装され、ブラウザーで ActiveX コントロールの実行を設定する必要があります。 その他のブラウザーでは、ブラウザーのローカル ドキュメント オブジェクト モデル (DOM) を使用して、XMLHttpRequest が使用されます。 ブラウザーがクライアントのコールバックをサポートしているかどうかを確認するには、使用、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>プロパティ。 ブラウザーが HTTP 経由での XML をサポートしているかどうかを確認するには、使用、<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>プロパティ。 両方のプロパティを使用してアクセスできますが、<xref:System.Web.HttpRequest.Browser%2A>組み込みの ASP.NET のプロパティ<xref:System.Web.HttpContext.Request%2A>オブジェクト。  
  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>のオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドは同期的に HTTP 経由で XML を使用してコールバックを実行します。 コールバック シナリオでは同期的にデータを送信するときに、同期のコールバックはすぐに返すし、ブラウザーはブロックされません。 ブラウザーで同時にない 2 つの同期コールバックを実行できます。 1 つは現在保留中に 2 つ目の同期コールバックが発生した場合は、2 つ目の同期のコールバックが最初をキャンセルし、2 番目のコールバックのみが返されます。  
  
 データを非同期的に送信するを取るオーバー ロードのいずれかの操作を使用して、`useAsync`パラメーターで、ブール値は、この動作を制御する値。 非同期のシナリオでは、複数の保留中のコールバック; を設定することがただし、返される順序は、開始された順序と一致しては保証されません。  
  
 このオーバー ロードさらに、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドには、クライアントによって生成されたエラーの状態のケースを処理する関数には指定しません、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッド。 クライアント エラーのコールバック ハンドラーを指定するを取るオーバー ロードのいずれかの操作を使用して、`clientErrorCallback`パラメーター。  
  
 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>メソッドは、省略可能な文字列を受け取ります`argument`パラメーター文字列を返します。 渡す、または複数の値を受信するには、入力内の値を連結またはそれぞれの文字列が返されます。  
  
> [!NOTE]
>  スクリプト コールバック操作中に更新する必要があるページまたはコントロールのプロパティの実装での表示状態を使用しないでください。 プロパティは、ページ要求からの復旧は、セッション状態を使用することができます。  
  
   
  
## Examples  
 次のコード例の 2 つのオーバー ロードを使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>整数値が増加するクライアント コールバック シナリオでのメソッド。  
  
 2 つのコールバック メカニズムが表示されます。これらの相違点は、使用、`context`パラメーター。 A`ReceiveServerData1`を使用してクライアントのコールバック関数を提供、`context`パラメーター。 これに対し、`ReceiveServerData2`でクライアントのコールバック関数が定義されている、`<script>`ページ上のブロック。 A<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドは、サーバー ハンドラーに渡される値をインクリメントして、<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>メソッドは文字列としてインクリメントされた値を返します。 場合、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドには、エラーが返されます、`ProcessCallBackError`クライアント関数が呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーに渡される引数。 
 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <param name="useAsync">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、およびブール値が含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要です、`useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行することができます、`true`します。 このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定。  
  
 このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : string * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (target, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" /> の名前。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーに渡される引数。 
 <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <param name="clientErrorCallback">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="useAsync">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたターゲット、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドは、`target`文字列パラメーターの代わりに、<xref:System.Web.UI.Control>パラメーター。 格納している文字列以外に戻るにコールバックする場合、このオーバー ロードを使用して、<xref:System.Web.UI.Control.UniqueID%2A>のコントロール。  
  
 このオーバー ロードさらに、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要です、`useAsync`と`clientErrorCallback`パラメーター。 `useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。`true`します。 このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定。 `clientErrorCallback`パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義する、サーバー ハンドラー、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドでは、エラーが返されます。 このメソッドのオーバー ロード バージョンを必要としない、`clientErrorCallback`パラメーターは、値を null に設定します。  
  
 このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。  
  
   
  
## Examples  
 次のコード例の 2 つのオーバー ロードを使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>整数値が増加するクライアント コールバック シナリオでのメソッド。  
  
 2 つのコールバック メカニズムが表示されます。これらの相違点は、使用、`context`パラメーター。 A`ReceiveServerData1`を使用してクライアントのコールバック関数を提供、`context`パラメーター。 これに対し、`ReceiveServerData2`でクライアントのコールバック関数が定義されている、`<script>`ページ上のブロック。 A<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドは、サーバー ハンドラーに渡される値をインクリメントして、<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>メソッドは文字列としてインクリメントされた値を返します。 場合、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドはエラーが発生し、クライアント関数を返します`ProcessCallBackError`が呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。 このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</param>
        <param name="argument">クライアント スクリプトからサーバーの <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドに渡される引数。</param>
        <param name="clientCallback">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="context">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。 このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</param>
        <param name="clientErrorCallback">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</param>
        <param name="useAsync">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</param>
        <summary>クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。 このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</summary>
        <returns>クライアント コールバックを呼び出すクライアント関数の名前。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドが必要です、`useAsync`と`clientErrorCallback`パラメーター。 `useAsync`パラメーター値を設定して、クライアント コールバックを非同期的に実行できます。`true`します。 このメソッドのオーバー ロード バージョンを必要としない、`useAsync`パラメーターに値を設定する`false`既定。 `clientErrorCallback`パラメーターを使用する場合に呼び出されるクライアント関数の名前を定義するサーバーのハンドラー (、<xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッド) エラーが返されます。 このメソッドのオーバー ロード バージョンを必要としない、`clientErrorCallback`パラメーターは、値を null に設定します。  
  
 このメソッドの詳細については、オーバー ロードは、「解説」を参照してください。<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <exception cref="T:System.InvalidOperationException">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see langword="javascript:" /> を参照の先頭に付加した上で参照を取得します。この参照をクライアント イベントで使用して、サーバーにポストバックできます。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">ポストバックを処理するサーバー コントロール。</param>
        <param name="argument">サーバー コントロールに渡されたパラメーター。</param>
        <summary><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数を使用してサーバーにポストバックできます。</summary>
        <returns>対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを実装するポストバックを処理するコントロールが必要です、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>メソッド。 カスタム コントロール、 `MyControl`、実装、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。 ページの HTML アンカー要素がクリックされたときに、<xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>カスタム コントロールのメソッドが呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 次のコード例は、カスタム コントロールでは、代わりに、前のものと同じ機能を持つ、<xref:System.Web.UI.Page>クラスが実装する、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">ポストバックを処理するサーバー コントロール。</param>
        <param name="argument">サーバー コントロールに渡されたパラメーター。</param>
        <param name="registerForEventValidation">検証用にポストバック イベントを登録する場合は <see langword="true" />。検証用にポストバック イベントを登録しない場合は <see langword="false" />。</param>
        <summary><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数と、イベント検証用にポストバックを登録するかどうかを示すブール値を使用してサーバーにポストバックできます。</summary>
        <returns>対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 使用して、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを実装するポストバックを処理するコントロールが必要です、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions -&gt; string" Usage="clientScriptManager.GetPostBackEventReference options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</param>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。 この参照文字列は、指定された <see cref="T:System.Web.UI.PostBackOptions" /> インスタンスによって定義されます。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。 このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Web.UI.PostBackOptions" /> パラメーターが <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</param>
        <param name="argument">ポストバックを処理するコントロールに渡されるオプション引数の文字列。</param>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。 この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。 このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッド。 カスタム コントロール、 `MyControl`、実装、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。 ページ上のボタンがクリックされたときに、<xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>カスタム コントロールのメソッドが呼び出されます。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 次のコード例は、カスタム コントロールでは、代わりに、前のものと同じ機能を持つ、<xref:System.Web.UI.Page>クラスが実装する、<xref:System.Web.UI.IPostBackEventHandler>インターフェイス。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (options, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</param>
        <param name="registerForEventValidation">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。 この参照文字列は、指定した <see cref="T:System.Web.UI.PostBackOptions" /> オブジェクトによって定義されます。 オプションで、検証用にこのイベント参照を登録します。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>オブジェクト、ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。 このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。  
  
 場合`registerForEventValidation`は`true`、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>メソッドの呼び出し、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>イベントを生成するクライアントのコントロールを表す一意のコントロール ID を検証用にイベント参照を登録するメソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="T:System.Web.UI.PostBackOptions" /> が <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</param>
        <param name="argument"><paramref name="control" /> に渡すオプション引数の文字列。</param>
        <param name="registerForEventValidation">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</param>
        <summary>クライアント イベントで使用する、サーバーにポストバックするための文字列を返します。 この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。 オプションで、検証用にこのイベント参照を登録します。</summary>
        <returns>クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 実装する、<xref:System.Web.UI.IPostBackEventHandler>のためのインターフェイスを<xref:System.Web.UI.Page>ディレクティブを使用します。  
  
 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドを使用できます、<xref:System.Web.UI.WebControls.Button>タイミングを制御、<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティは`false`します。 このシナリオで、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>クライアント ポストバックのイベントを返します、<xref:System.Web.UI.WebControls.Button>コントロール。  
  
 場合`registerForEventValidation`が true の場合、<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29>メソッドの呼び出し、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>イベントを生成するクライアントのコントロールを表す一意のコントロール ID を検証用にイベント参照を登録するメソッド。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185">ASP.NET ページ内ポストバックを使用しないクライアントのコールバック</related>
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.GetWebResourceUrl : Type * string -&gt; string" Usage="clientScriptManager.GetWebResourceUrl (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">リソースの型。</param>
        <param name="resourceName">アセンブリ内のリソースの完全修飾名。</param>
        <summary>アセンブリ内のリソースへの URL 参照を取得します。</summary>
        <returns>リソースへの URL 参照。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>メソッドは、アセンブリに埋め込まれているリソースへの URL 参照を返します。 返される参照は、エンコードされた URL ではありません。 リソースは、スクリプト ファイル、画像、または任意の静的ファイルを使用できます。 リソースにアクセスしてオブジェクトに基づき型を指定します。  
  
 ページに登録されている Web リソースは、その型と名前によって一意に識別します。 指定された型と名前のペアを持つ 1 つだけのリソースは、ページに登録できます。 既に登録されているリソースを登録しようとして、登録済みのリソースの複製が作成されることはできません。  
  
 <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>メソッドの使用と組み合わせて、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>アセンブリに埋め込まれているリソースにアクセスするためのメソッド。 アプリケーションでリソースの使用の詳細については、次を参照してください。 [ASP.NET Web Page Resources Overview](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>メソッド。 *型*この例ではパラメーターは、リソースを含むアセンブリ内のクラスの型に設定されます。 `resourceName`パラメーターが、既定の名前空間を含むリソースへの完全修飾パスで指定されています。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 次のコード例は、プログラムで適用する方法を示します、<xref:System.Web.UI.WebResourceAttribute>提供されるリソースのアセンブリをマークするメタデータ属性。 既定の名前空間に設定して、クラス ライブラリでは、次のクラスをコンパイル`Samples.AspNet.CS.Controls`または`Samples.AspNet.VB.Controls`、お使いの言語によって異なります。  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 この例には、という名前の JavaScript ファイルが必要です。`Script_include.js`します。 .Js ファイルを格納するアセンブリに埋め込みリソースである、`ClientScriptResourceLabel`オブジェクト。 クラス ライブラリ プロジェクトのプロパティ ウィンドウで、Visual Studio を使用する場合は、設定**ビルド アクション**に**埋め込まれたリソース**スクリプト ファイルを選択するとします。 コマンドラインでライブラリをコンパイルする場合は、リソースを埋め込むには、スイッチを使用します。  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Web リソース名が <see langword="null" /> です。  
  
\- または 
Web リソース名の長さがゼロです。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <related type="Article" href="https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd">ASP.NET Web ページのリソースの概要</related>
        <related type="Article" href="https://msdn.microsoft.com/library/5212666e-98ab-47e4-a497-b5545ab15c7f">/resource (埋め込みリソース ファイルを出力) (c# コンパイラ オプション)</related>
        <related type="Article" href="https://msdn.microsoft.com/library/eee2f227-91f2-4f2b-a9d6-1c51c5320858">/resource (Visual Basic)</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象のクライアント スクリプト ブロックのキー。</param>
        <summary>指定されたキーを使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>重複するスクリプトの登録を回避するためです。 これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 クライアント スクリプトは、そのキーとその型で一意に識別されます。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。  
  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出す、`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象のクライアント スクリプト ブロックの型。</param>
        <param name="key">検索対象のクライアント スクリプト ブロックのキー。</param>
        <summary>キーと型を使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>重複するスクリプトの登録を回避するためです。 これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 クライアント スクリプトは、そのキーとその型で一意に識別されます。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 リソースにアクセスしてオブジェクトに基づき型を指定します。 たとえばを使用する場合、`Page`インスタンスを指定する、リソースにアクセスする、`Page`型。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッド。 既存のクライアント スクリプト ブロックをチェックするロジックが削除された場合がない 2 つの重複したクライアント スクリプト、レンダリングされるページの HTML ソース コードのために注意してください、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、重複をチェックします。 チェックの利点は、不要な計算処理です。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプトの型が <see langword="null" />. です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象のクライアント スクリプト インクルードのキー。</param>
        <summary>指定されたキーを使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>重複するスクリプトの登録を回避するためです。 これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 クライアント スクリプト インクルードのキーと型では一意に識別します。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。  
  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出す、`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象のクライアント スクリプト インクルードの型。</param>
        <param name="key">検索対象のクライアント スクリプト インクルードのキー。</param>
        <summary>キーと型を使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>重複したクライアント スクリプトの登録を回避するためにメソッドが含まれています。 これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 クライアント スクリプト インクルードのキーと型では一意に識別します。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 リソースにアクセスしてオブジェクトに基づき型を指定します。 たとえば、リソースへのアクセスをページのインスタンスを使用する場合を指定する、`Page`型。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>メソッド。 既存のクライアント スクリプト インクルードを確認するロジックが削除された場合がない 2 つの重複したクライアント スクリプト レンダリングされたページの HTML ソース コードのために注意してください、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドは、重複をチェックします。 チェックの利点は、不要な計算処理です。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 この例には、という名前の JavaScript ファイルが必要です。 `Script_include.js`、次の内容。  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト インクルードの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象の OnSubmit ステートメントのキー。</param>
        <summary>指定されたキーを使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> OnSubmit ステートメントが重複する登録を回避するためです。 これは、ステートメントが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 ステートメントは、そのキーとその型で一意に識別されます。 同じキーおよび種類とステートメントは、重複と見なされます。  
  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドは、両方を受け取るオーバー ロードを呼び出す、`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象の OnSubmit ステートメントの型。</param>
        <param name="key">検索対象の OnSubmit ステートメントのキー。</param>
        <summary>指定されたキーと型を使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>ステートメントが重複する登録を回避するためです。 これは、ステートメントが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 ステートメントは、そのキーとその型で一意に識別されます。 同じキーおよび種類とステートメントは、重複と見なされます。 リソースにアクセスしてオブジェクトに基づき型を指定します。 たとえばを使用する場合、`Page`インスタンスを指定する、リソースにアクセスする、`Page`型。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッド。 という名前のスクリプト`OnSubmitScript`に登録されて、<xref:System.Web.UI.Page>ページのフォームが送信されると、スクリプトが呼び出されるようにします。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">OnSubmit ステートメントの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>起動スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">検索対象のスタートアップ スクリプトのキー。</param>
        <summary>指定されたキーを使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>重複するスクリプトの登録を回避するためです。 これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 スタートアップ スクリプトは、そのキーとその型で一意に識別されます。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。  
  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドが、両方の文字列を受け取るオーバー ロードを呼び出す`key`と`type`として型パラメーターの設定、<xref:System.Web.UI.Page>オブジェクト  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">検索対象のスタートアップ スクリプトの型。</param>
        <param name="key">検索対象のスタートアップ スクリプトのキー。</param>
        <summary>指定されたキーと型を使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</summary>
        <returns>スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このメソッドを呼び出す前に、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>重複するスクリプトの登録を回避するためです。 これは、スクリプトが大量のサーバー リソースを作成する必要がある場合に特に重要です。  
  
 クライアントのスタートアップ スクリプトは、そのキーとその型で一意に識別します。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッド。 既存のスタートアップ スクリプト ブロックをチェックするロジックが削除された場合がない 2 つの重複するスタートアップ スクリプト表示するページの HTML ソース コードのために注意してください、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドは、重複をチェックします。 チェックの利点は、不要な計算処理です。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">スタートアップ スクリプトの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterArrayDeclaration : string * string -&gt; unit" Usage="clientScriptManager.RegisterArrayDeclaration (arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName">登録する配列名。</param>
        <param name="arrayValue">登録する配列値。</param>
        <summary>配列名と配列値を使用して、JavaScript 配列宣言を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>で指定された名前と同じ名前で登録されている配列が存在するかどうかを確認するためのチェック、`arrayName`パラメーターで指定された値を追加し、`arrayValue`パラメーター。 基になるストレージ メカニズムが基づいているため、<xref:System.Collections.ArrayList>重複は許可されています。 場合と同じ名前で登録されている配列、`arrayName`パラメーターが存在しないか、作成と、値、`arrayValue`パラメーターを追加します。  
  
 結果として得られる JavaScript 配列の文字列リテラルにする場合は、単一引用符 (') を含めるか、二重引用符をエスケープ (\\") で、`arrayValue`パラメーター。 値、`arrayValue`パラメーターが 1 つの要素にする必要があります。 を 1 つ以上の値が配列に追加する必要がある場合は、を使用して複数の呼び出しを行う、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>メソッド。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>と<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッド。 例では、配列と非表示の値を登録および定義、`OnClick`のイベント、`<input>`配列の 2 つの値と非表示の値の合計を計算するボタンをクリックします。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="arrayName" /> は <see langword="null" /> です。</exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプトの型。</param>
        <param name="key">登録するクライアント スクリプトのキー。</param>
        <param name="script">登録するクライアント スクリプト リテラル。</param>
        <summary>型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにクライアント スクリプトを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント スクリプトは、そのキーとその型で一意に識別されます。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。  
  
 呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドを指定したキーおよび種類のペアでクライアント スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。  
  
 このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド、行う必要があります、スクリプトで提供されていることを確認して、`script`にパラメーターがラップされて、`<script>`要素ブロックします。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、レンダリングされたページの上部にスクリプト ブロックを追加します。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプトの型。</param>
        <param name="key">登録するクライアント スクリプトのキー。</param>
        <param name="script">登録するクライアント スクリプト リテラル。</param>
        <param name="addScriptTags">スクリプト タグを追加するかどうかを示すブール値。</param>
        <summary>型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント スクリプトは、そのキーとその型で一意に識別されます。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。  
  
 呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドを指定したキーおよび種類のペアでクライアント スクリプトは既に登録されているかどうかを判断します。 これにより、スクリプトを追加しようとして不必要に回避できます。  
  
 このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドで、スクリプトが提供されるかどうか示すことができます、`script`でパラメーターがラップされて、`<script>`要素のブロックを使用して、`addScriptTags`パラメーター。 設定`addScriptTags`に`true`スクリプト タグが自動的に追加されることを示します。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドは、レンダリングされたページの上部にスクリプト ブロックを追加します。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッド。 なお、`addScriptTags`にパラメーターが設定されている`true`開始と終了タグのスクリプトが付属していないため、`script`パラメーター。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト ブロックの型が <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">登録するクライアント スクリプト インクルードのキー。</param>
        <param name="url">登録するクライアント スクリプト インクルードの URL。</param>
        <summary>キーと URL を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。これにより、スクリプトをクライアントから呼び出せるようになります。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント スクリプト インクルードのキーと型では一意に識別します。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。  
  
 呼び出す、<xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>する指定されたキーとクライアント スクリプトを含めるし、型のペアは既に登録されてでスクリプトを追加しようとして不必要に回避いるかどうかを判断するメソッド。  
  
> [!NOTE]
>  クライアントの URL を解決するには、使用、<xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッド。 このメソッドでは、パスを解決するのには呼び出されたを URL のコンテキストを使用します。  
  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドの呼び出しを受け取るオーバー ロードを`key`、 `URL`、および`type`パラメーター。  
  
 メソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。  
  
   
  
## Examples  
 関連情報については、構文、使用状況、および例についてなどを参照してください。<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>します。  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプト インクルードの型。</param>
        <param name="key">登録するクライアント スクリプト インクルードのキー。</param>
        <param name="url">登録するクライアント スクリプト インクルードの URL。</param>
        <summary>型、キー、および URL を使用して、クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 このオーバー ロード、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドは*キー*と*url* 、スクリプトを識別するパラメーターと同様に、`type`クライアント スクリプトの id を指定するパラメーターが含まれます。 リソースにアクセスしてオブジェクトに基づき型を指定します。 たとえばを使用する場合、`Page`インスタンスを指定する、リソースにアクセスする、`Page`型。  
  
> [!NOTE]
>  クライアントの URL を解決するには、使用、<xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッド。 このメソッドでは、パスを解決するのには呼び出されたを URL のコンテキストを使用します。  
  
 このメソッドは、レンダリングされたページの上部にあるスクリプト ブロックを追加します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッド。 される既存のクライアント スクリプト インクルードを確認するロジックが削除された場合がありますがまだされません重複したクライアント スクリプト、レンダリングされるページでため、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドは、重複をチェックします。 チェックの利点は、不要な計算処理です。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 この例では、次の内容のようなをという名前の JavaScript ファイルが必要です。  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント スクリプト インクルードの型が <see langword="null" /> です。</exception>
        <exception cref="T:System.ArgumentException">URL が <see langword="null" /> です。  
  
\- または 
URL が空です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptResource : Type * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptResource (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するクライアント スクリプト リソースの型。</param>
        <param name="resourceName">登録するクライアント スクリプト リソースの名前。</param>
        <summary>型とリソース名を使用して、クライアント スクリプト リソースを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> WebResource.axd HTTP ハンドラーのアセンブリのコンパイル時のリソースにアクセスするときにメソッドを使用します。 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>メソッドでスクリプトの登録、<xref:System.Web.UI.Page>オブジェクトができず、重複するスクリプト。 このメソッドは、リソース URL の内容をラップする`<script>`要素ブロックします。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>メソッド。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 次のコード例は、プログラムで適用する方法を示します、<xref:System.Web.UI.WebResourceAttribute>提供されるリソースのアセンブリをマークするメタデータ属性。  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 この例には、という名前の JavaScript ファイルが必要です。 `Script_include.js`、次の内容。  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 コンパイル、`Script_include.js`ファイル内のリソースとして、`Samples.AspNet.CS.Controls`アセンブリを含む、`ClientScriptResourceLabel`クラス。  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">クライアント リソースの名前が <see langword="null" /> です。  
  
\- または 
クライアント リソースの名前の長さがゼロです。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</param>
        <param name="attributeName">登録するカスタム属性の名前。</param>
        <param name="attributeValue">カスタム属性の値。</param>
        <summary>コントロール ID、属性名、および属性値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>メソッドは、指定したカスタム (expando) 属性として名前/値ペアを登録<xref:System.Web.UI.Control>します。 Expando 属性が、レンダリングされたコントロールのマークアップの XHTML の互換性を保持するために JavaScript から動的に設定されます。 引用符とカスタム (expando) 属性の値の円記号がエスケープされます。 引用符とバック スラッシュをエスケープしない場合、<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>メソッドをオーバー ロードし、設定、`encode`パラメーターを`false`します。  
  
 Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</param>
        <param name="attributeName">登録するカスタム属性の名前。</param>
        <param name="attributeValue">カスタム属性の値。</param>
        <param name="encode">登録するカスタム属性をエンコードするかどうかを示すブール値。</param>
        <summary>コントロール ID、属性名、属性値、および属性値をエンコードするかどうかを示すブール値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>メソッドは、指定したカスタム (expando) 属性として名前/値ペアを登録<xref:System.Web.UI.Control>します。 Expando 属性が、レンダリングされたコントロールのマークアップの XHTML の互換性を保持するために JavaScript から動的に設定されます。 設定、`encode`パラメーターを`true`とバック スラッシュ expando 属性の値は引用符をエスケープする必要がある場合。  
  
 Expando 属性が見つからない、または expando 属性を追加するコントロールが見つからない場合は、クライアント スクリプトが生成されますが、コントロールには影響しません。  
  
   
  
## Examples  
 次のコード例は、使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>のメソッド、<xref:System.Web.UI.ClientScriptManager>クラス。 レンダリングされたページのセットでクライアント スクリプト、`title`の属性を`<span>`要素。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>検証用にイベント参照を登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <summary>イベントを生成するクライアント コントロールを表す一意のコントロール ID を使用して、検証用にイベント参照を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細と例については、次を参照してください。、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド。  
  
   
  
## Examples  
 次の例は、使用する方法を示します、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>検証、およびページからコールバックが発生したことを検証する方法のコールバックを登録するためのメソッド。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : System.Web.UI.PostBackOptions -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options">ポストバック イベントを開始するためにクライアントの JavaScript を生成する方法を指定する <see cref="T:System.Web.UI.PostBackOptions" />ブジェクト。</param>
        <summary><see cref="T:System.Web.UI.PostBackOptions" /> を使用して、検証用にイベント参照を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 詳細と例については、次を参照してください。、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド。  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string * string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <param name="argument">クライアント イベントで渡されるイベント引数。</param>
        <summary>イベントを生成するクライアント コントロールを表す一意のコントロール ID とイベント引数を使用して、検証用にイベント参照を登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例に示しますを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>検証コールバックを登録して、ページからコールバックが発生したことを検証するメソッド。 例に示すように、検証を向上させるために、検証を変更する可能性があります`argument`id やロールなど、ユーザーに固有の情報を格納するパラメーター  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 次のコード例に示しますを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>検証コールバックを登録するメソッド。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">このメソッドが <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> メソッドの前に呼び出されます。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/18fc94c9-56fc-46c3-9f29-7358f18667df">クライアントのコールバックと検証の実装例</related>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterHiddenField : string * string -&gt; unit" Usage="clientScriptManager.RegisterHiddenField (hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName">登録する隠しフィールドの名前。</param>
        <param name="hiddenFieldInitialValue">登録するフィールドの初期値。</param>
        <summary>隠し値を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッドは、非表示を作成`<input>`レンダリングされた HTML ページ上の要素。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>と<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッド。 例では、配列と非表示の値を登録および定義、`OnClick`のイベント、`<input>`配列の 2 つの値と非表示の値の合計を計算するボタンをクリックします。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="hiddenFieldName" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterOnSubmitStatement : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterOnSubmitStatement (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録する OnSubmit ステートメントの型。</param>
        <param name="key">登録する OnSubmit ステートメントのキー。</param>
        <param name="script">登録する OnSubmit ステートメントのスクリプト リテラル。</param>
        <summary>型、キー、およびスクリプト リテラルを使用して、OnSubmit ステートメントを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。 ステートメントは、<see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> が送信されると、実行されます。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 OnSubmit ステートメントは、そのキーとその型で一意に識別されます。 同じキーおよび種類とステートメントは、重複と見なされます。 指定された型とキーのペアを持つ 1 つだけのステートメントは、ページに登録できます。 既に登録されているステートメントを登録しようとしても、重複したステートメントは作成されません。  
  
 呼び出す、<xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドを OnSubmit ステートメントが指定したキーと型のペアに既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。  
  
 `script`のパラメーター、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>メソッドは、セミコロン (;) で適切に区切られている限り、複数のスクリプト コマンドに含めることができます。  
  
 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>ページが送信され、送信をキャンセルする機会を提供する前に実行されるスクリプトを追加します。  
  
 HTML フォームの詳細については、`OnSubmit`属性を参照してください、 [World Wide Web Consortium (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>メソッド。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> は <see langword="null" /> です。</exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>スタートアップ スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">登録するスタートアップ スクリプの型。</param>
        <param name="key">登録するスタートアップ スクリプトのキー。</param>
        <param name="script">登録するスタートアップ スクリプ リテラル。</param>
        <summary>型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにスタートアップ スクリプを登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 クライアント スクリプトは、そのキーとその型で一意に識別されます。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。  
  
 呼び出す、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドを指定したキーおよび種類のペアでスタートアップ スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。  
  
 このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド、行う必要があります、スクリプトで提供されていることを確認して、`script`でパラメーターがラップされて、`<script>`要素ブロック。  
  
 によって追加されたスクリプト ブロック、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドは、ページ読み込みの終了時に、ページの前に、実行<xref:System.Web.UI.Control.OnLoad%2A>イベントが発生します。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド。 開始タグと終了タグのスクリプトが内に含まれるので注意、`script`パラメーター。 追加されたタグを参照してください、追加のパラメーターの設定に基づいてスクリプトを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">登録するスタートアップ スクリプの型。</param>
        <param name="key">登録するスタートアップ スクリプトのキー。</param>
        <param name="script">登録するスタートアップ スクリプ リテラル。</param>
        <param name="addScriptTags">スクリプト タグを追加するかどうかを示すブール値。</param>
        <summary>型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、スタートアップ スクリプを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 スタートアップ スクリプトは、そのキーとその型で一意に識別されます。 同じキーおよび種類を使用して、スクリプトは、重複と見なされます。 ページには、指定された型とキーのペアを持つ 1 つだけのスクリプトを登録できます。 既に登録されているスクリプトを登録しようとして、スクリプトの複製が作成されることはできません。  
  
 呼び出す、<xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドを指定したキーおよび種類のペアでスタートアップ スクリプトは既に登録されているかどうかを判断し、スクリプトを追加しようとして不必要を回避します。  
  
 このオーバー ロードで、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドで、スクリプトが提供されるかどうか示すことができます、`script`でパラメーターがラップされて、`<script>`要素のブロックを使用して、`addScriptTags`パラメーター。 設定`addScriptTags`に`true`スクリプト タグが自動的に追加されることを示します。  
  
 によって追加されたスクリプト ブロック、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドは、ページ読み込みの終了時に、ページの前に、実行<xref:System.Web.UI.Control.OnLoad%2A>イベントが発生します。 スクリプト ブロックは、登録されている順序で出力されるとは限りません。 スクリプト ブロックの順序が重要な場合を使用して、<xref:System.Text.StringBuilder>オブジェクトを 1 つの文字列で、スクリプトをまとめるし、すべて 1 つのクライアント スクリプト ブロック内に登録します。  
  
   
  
## Examples  
 次のコード例は、の使用を示します、<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッド。 なお、`addScriptTags`にパラメーターが設定されている`false`開始と終了タグのスクリプトに含まれているように、`script`パラメーター。  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" /> は <see langword="null" /> です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>クライアント イベントを検証します。</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string -&gt; unit" Usage="clientScriptManager.ValidateEvent uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <summary><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string * string -&gt; unit" Usage="clientScriptManager.ValidateEvent (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId">イベントを生成するクライアント コントロールを表す一意の ID。</param>
        <param name="argument">クライアント イベントで渡されるイベント引数。</param>
        <summary><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 次のコード例に示しますを使用して、<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドと<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>検証コールバックを登録して、ページからコールバックが発生したことを検証するメソッド。 ここで示すように、検証を向上させるために、検証を変更する可能性があります`argument`id やロールなど、ユーザーに固有の情報を格納するパラメーター  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="uniqueId" /> は <see langword="null" /> または空の文字列 ("") です。</exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>