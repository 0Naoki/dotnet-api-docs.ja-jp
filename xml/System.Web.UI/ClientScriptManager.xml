<Type Name="ClientScriptManager" FullName="System.Web.UI.ClientScriptManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6168b3c68c5da16b52610f467bf142b8c7177fe9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ja-JP" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69398996" /></Metadata><TypeSignature Language="C#" Value="public sealed class ClientScriptManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ClientScriptManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.ClientScriptManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ClientScriptManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ClientScriptManager sealed" />
  <TypeSignature Language="F#" Value="type ClientScriptManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="c2f5a-101">Web アプリケーションのクライアント スクリプトを管理するためのメソッドを定義します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-101">Defines methods for managing client scripts in Web applications.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-102">クラス<xref:System.Web.UI.ClientScriptManager>は、クライアントスクリプトを管理し、Web アプリケーションに追加するために使用されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-102">The <xref:System.Web.UI.ClientScriptManager> class is used to manage client scripts and add them to Web applications.</span></span> <span data-ttu-id="c2f5a-103"><xref:System.Web.UI.ClientScriptManager>クラスへの参照は、 <xref:System.Web.UI.Page>オブジェクトの<xref:System.Web.UI.Page.ClientScript%2A>プロパティから取得できます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-103">You can get a reference to the <xref:System.Web.UI.ClientScriptManager> class from the <xref:System.Web.UI.Page.ClientScript%2A> property of the <xref:System.Web.UI.Page> object.</span></span>  
  
 <span data-ttu-id="c2f5a-104">ページの HTML マークアップにスクリプトを含めることで、クライアントスクリプトを Web ページに宣言によって追加できます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-104">You can add a client script to a Web page declaratively by including the script in the HTML markup of the page.</span></span> <span data-ttu-id="c2f5a-105">ただし、クライアントスクリプトを動的に追加する必要がある場合もあります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-105">However, there are situations when adding client script dynamically is needed.</span></span> <span data-ttu-id="c2f5a-106">スクリプトを動的に追加するには<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> 、スクリプトを追加するタイミングと方法に応じ<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>て、メソッド、メソッド、メソッド、またはメソッドを使用<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-106">To add a script dynamically, use the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method, the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, or the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method, depending on when and how you want to add the script.</span></span> <span data-ttu-id="c2f5a-107">詳細については、「[方法 :クライアントスクリプトを ASP.NET Web ページ](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666)に動的に追加します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-107">For more information, see [How to: Add Client Script Dynamically to ASP.NET Web Pages](https://msdn.microsoft.com/library/e89f1306-e43d-49ae-a66a-e18b71007666).</span></span>  
  
 <span data-ttu-id="c2f5a-108">クラス<xref:System.Web.UI.ClientScriptManager>は、キー <xref:System.String>と<xref:System.Type>によってスクリプトを一意に識別します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-108">The <xref:System.Web.UI.ClientScriptManager> class uniquely identifies scripts by a key <xref:System.String> and a <xref:System.Type>.</span></span> <span data-ttu-id="c2f5a-109">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-109">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-110">スクリプトの種類を使用すると、ページで使用されている可能性のあるさまざまなユーザーコントロールからの類似したスクリプトを混同しないようにすることができます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-110">Using the script type helps to avoid confusing similar scripts from different user controls that might be in use on the page.</span></span>  
  
 <span data-ttu-id="c2f5a-111">クラス<xref:System.Web.UI.ClientScriptManager>は、ポストバックを実行せずにクライアントからサーバーコードを実行することが望ましい状況でクライアントコールバックを呼び出すために使用できます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-111">The <xref:System.Web.UI.ClientScriptManager> class can be used to invoke client callbacks in situations when it is desirable to run server code from the client without performing a postback.</span></span> <span data-ttu-id="c2f5a-112">これは、サーバーへの帯域外コールバックの実行と呼ばれます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-112">This is referred to as performing an out-of-band callback to the server.</span></span> <span data-ttu-id="c2f5a-113">クライアントコールバックでは、クライアントスクリプト関数は、ASP.NET Web ページに非同期要求を送信します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-113">In a client callback, a client script function sends an asynchronous request to an ASP.NET Web page.</span></span> <span data-ttu-id="c2f5a-114">Web ページは、通常のライフサイクルの変更されたバージョンを実行して、コールバックを処理します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-114">The Web page runs a modified version of its normal life cycle to process the callback.</span></span> <span data-ttu-id="c2f5a-115"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドを使用して、クライアント関数への参照を取得します。この関数が呼び出されると、サーバーイベントへのクライアントコールバックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-115">Use the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method to obtain a reference to a client function that, when invoked, initiates a client callback to a server event.</span></span> <span data-ttu-id="c2f5a-116">詳細については、「[ポストバックを使用しないクライアントコールバックの実装](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-116">For more information, see [Implementing Client Callbacks Without Postbacks](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c2f5a-117">スクリプトコールバックは、ドキュメントオブジェクトモデル (DOM) をサポートしていない古いブラウザーでは機能せず、クライアントで ECMAScript が有効になっている必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-117">Script callbacks will not work in older browsers that do not support the Document Object Model (DOM), and they require that ECMAScript is enabled on the client.</span></span> <span data-ttu-id="c2f5a-118">ブラウザーがコールバックをサポートしているか<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>どうかを確認するには<xref:System.Web.HttpRequest.Browser%2A> 、プロパティを使用し<xref:System.Web.HttpContext.Request%2A>ます。このプロパティには、ASP.NET 組み込みオブジェクトのプロパティからアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-118">To check if the browser supports callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property, which is accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the ASP.NET intrinsic <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="c2f5a-119"><xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> メソッド<xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>とメソッドを使用して、クライアントポストバックイベントを定義します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-119">Use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method and the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method to define a client postback event.</span></span> <span data-ttu-id="c2f5a-120">これらのメソッドを使用すると、クライアントスクリプト関数が呼び出されると、サーバーはページにポストバックされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-120">These methods enable client script functions, when invoked, to cause the server to post back to the page.</span></span> <span data-ttu-id="c2f5a-121">クライアントポストバックイベントは、クライアントのポストバックイベントを処理するために Web ページが通常のライフサイクルを完了するという、クライアントコールバックとは異なります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-121">A client postback event is different from a client callback in that the Web page completes a normal life cycle to process the client postback event.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c2f5a-122"><xref:System.Web.UI.WebControls.Button>コントロール`false` <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> <xref:System.Web.UI.WebControls.Button>を使用していて、プロパティがに設定されている場合は、メソッドを使用して、コントロールのクライアントポストバックイベントを返すことができます。<xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-122">If you are using a <xref:System.Web.UI.WebControls.Button> control and the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is set to `false`, then you can use the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method to return the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="c2f5a-123">コントロール、コントロール、および<xref:System.Web.UI.WebControls.LinkButton>コントロールのプロパティを使用して、クライアントスクリプトを実行できます。 <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> <xref:System.Web.UI.WebControls.Button> <xref:System.Web.UI.WebControls.ImageButton></span><span class="sxs-lookup"><span data-stu-id="c2f5a-123">The <xref:System.Web.UI.WebControls.Button.OnClientClick%2A> property of the <xref:System.Web.UI.WebControls.Button> control, <xref:System.Web.UI.WebControls.ImageButton> control, and <xref:System.Web.UI.WebControls.LinkButton> control can be used to run client script.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-124">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> <xref:System.Web.UI.ClientScriptManager>クラスのメソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-124">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="c2f5a-125">ページには、という2つの`PopupScript`クライアントスクリプトが定義されています。ページが読み`ButtonClickScript`込まれると警告メッセージが表示され、は`onClick` HTML ボタンのイベントのクライアントハンドラーを定義します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-125">Two client scripts are defined in the page: `PopupScript`, which displays an alert message when the page is loaded, and `ButtonClickScript`, which defines a client handler for an HTML button's `onClick` event.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.Page" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback" />
    <altmember cref="P:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp" />
    <related type="Article" href="https://msdn.microsoft.com/library/13edb6b9-2dea-43c6-b8c1-a47207de19aa"><span data-ttu-id="c2f5a-126">ASP.NET Web ページのクライアントスクリプト</span><span class="sxs-lookup"><span data-stu-id="c2f5a-126">Client Script in ASP.NET Web Pages</span></span></related>
    <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-127">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-127">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
  </Docs>
  <Members>
    <MemberGroup MemberName="GetCallbackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-128">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-128">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="c2f5a-129">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-129">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="c2f5a-130">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-130">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-131">クライアント スクリプトからサーバーに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-131">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="c2f5a-132"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</span><span class="sxs-lookup"><span data-stu-id="c2f5a-132"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="c2f5a-133">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-133">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="c2f5a-134">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-134">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="c2f5a-135">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-135">The result of the script is passed back to the client event handler.</span></span></param>
        <summary><span data-ttu-id="c2f5a-136">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コールバックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-136">Obtains a reference to a client function that, when invoked, initiates a client call back to a server event.</span></span> <span data-ttu-id="c2f5a-137">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、およびコンテキストが含まれます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-137">The client function for this overloaded method includes a specified control, argument, client script, and context.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-138">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-138">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-139">メソッド<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>は、ページの通常のライフサイクルの変更されたバージョンであるサーバーへの帯域外コールバックを実行します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-139">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method performs an out-of-band callback to the server that is a modified version of a page's normal life cycle.</span></span> <span data-ttu-id="c2f5a-140">詳細については、「[ポストバックを使用しないクライアントコールバックの実装](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-140">For more information, see [Implementing Client Callbacks Without Postbacks](https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185).</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c2f5a-141">ブラウザーが Microsoft Internet Explorer (バージョン5.0 以降) の場合、スクリプトコールバック機構は、Microsoft の XmlHttp COM オブジェクトを介して実装され、ActiveX コントロールを実行するようにブラウザーを設定する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-141">When the browser is Microsoft Internet Explorer (version 5.0 or later), the script callback mechanism is implemented through the Microsoft.XmlHttp COM object and requires the browser to be set to run ActiveX controls.</span></span> <span data-ttu-id="c2f5a-142">その他のブラウザーでは、ブラウザーのローカルドキュメントオブジェクトモデル (DOM) を使用する XMLHttpRequest が使用されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-142">For other browsers, an XMLHttpRequest using the browser's local Document Object Model (DOM) is used.</span></span> <span data-ttu-id="c2f5a-143">ブラウザーがクライアントコールバックをサポートして<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A>いるかどうかを確認するには、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-143">To check whether a browser supports client callbacks, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsCallback%2A> property.</span></span> <span data-ttu-id="c2f5a-144">ブラウザーが HTTP 経由の XML をサポートして<xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A>いるかどうかを確認するには、プロパティを使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-144">To check whether a browser supports XML over HTTP, use the <xref:System.Web.Configuration.HttpCapabilitiesBase.SupportsXmlHttp%2A> property.</span></span> <span data-ttu-id="c2f5a-145">両方のプロパティには、 <xref:System.Web.HttpRequest.Browser%2A>組み込みの ASP.NET <xref:System.Web.HttpContext.Request%2A>オブジェクトのプロパティを使用してアクセスできます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-145">Both properties are accessible through the <xref:System.Web.HttpRequest.Browser%2A> property of the intrinsic ASP.NET <xref:System.Web.HttpContext.Request%2A> object.</span></span>  
  
 <span data-ttu-id="c2f5a-146">メソッドのオーバーロードは、 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> HTTP 経由で XML を使用して、コールバックを同期的に実行します。 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-146">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method performs a callback synchronously using XML over HTTP.</span></span> <span data-ttu-id="c2f5a-147">コールバックシナリオでデータを同期的に送信する場合、同期コールバックはすぐに制御を戻し、ブラウザーをブロックしません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-147">When sending data synchronously in a callback scenario, synchronous callbacks return immediately and do not block the browser.</span></span> <span data-ttu-id="c2f5a-148">2つの同期コールバックコールバックは、ブラウザーで同時に実行することはできません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-148">No two synchronous callbacks callback can execute at the same time in the browser.</span></span> <span data-ttu-id="c2f5a-149">現在保留中の同期コールバックが2番目に発生した場合は、2番目の同期コールバックによって最初のコールバックが取り消され、2番目のコールバックだけが返されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-149">If a second synchronous callback is fired while one is currently pending, the second synchronous callback cancels the first and only the second callback will return.</span></span>  
  
 <span data-ttu-id="c2f5a-150">データを非同期で送信するには、 `useAsync`パラメーターを受け取るオーバーロードのいずれかを使用します。これは、この動作を制御するブール値です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-150">To send data asynchronously, use one of the overloads that takes the `useAsync` parameter, which is a Boolean value controlling this behavior.</span></span> <span data-ttu-id="c2f5a-151">非同期のシナリオでは、複数の保留中のコールバックを使用できます。ただし、が返される順序は、開始された順序と一致するとは限りません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-151">In the asynchronous scenario you can have multiple pending callbacks; however, the order in which they return is not guaranteed to match the order in which they were initiated.</span></span>  
  
 <span data-ttu-id="c2f5a-152">さらに、 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドのこのオーバーロードは、 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A>メソッドによって生成されたエラー状態のケースを処理するクライアント関数を指定していません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-152">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method specifies no client function to handle the case of an error condition generated by the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method.</span></span> <span data-ttu-id="c2f5a-153">クライアントエラーの`clientErrorCallback`コールバックハンドラーを指定するには、パラメーターを受け取るオーバーロードのいずれかを使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-153">To specify a client error callback handler, use one of the overloads that takes the `clientErrorCallback` parameter.</span></span>  
  
 <span data-ttu-id="c2f5a-154">メソッド<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29>は、省略可能な`argument`文字列パラメーターを受け取り、文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-154">The <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%28System.Web.UI.Control%2CSystem.String%2CSystem.String%2CSystem.String%29> method takes an optional string `argument` parameter and returns a string.</span></span> <span data-ttu-id="c2f5a-155">複数の値を渡すか、または複数の値を受け取るには、それぞれの値を入力文字列または戻り値として連結します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-155">To pass in or to receive multiple values, concatenate values in the input or return string, respectively.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c2f5a-156">スクリプトのコールバック操作中に更新する必要があるページまたはコントロールのプロパティの実装では、ビューステートを使用しないようにしてください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-156">Avoid using the view state in the implementation of page or control properties that need be updated during script callback operations.</span></span> <span data-ttu-id="c2f5a-157">プロパティがページ要求を維持する場合は、セッション状態を使用できます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-157">If the properties are to survive page requests, you can use session state.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-158">次のコード例は、整数をインクリメントするクライアントコール<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>バックシナリオで、メソッドの2つのオーバーロードを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-158">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="c2f5a-159">2つのコールバック機構が表示されます。これらの違いは、 `context`パラメーターを使用することです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-159">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="c2f5a-160">クライアントコールバック関数は、 `context`パラメーターを使用して提供されます。 `ReceiveServerData1`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-160">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="c2f5a-161">これに対し`ReceiveServerData2` 、クライアントコールバック関数は、ページ`<script>`のブロックで定義されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-161">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="c2f5a-162">メソッドは、渡さ<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>れた値をインクリメントするサーバーハンドラーであり、メソッドはインクリメントされた値を文字列として返します。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-162">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="c2f5a-163">メソッドがエラー `ProcessCallBackError`を返すと、クライアント関数が呼び出されます。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-163">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the `ProcessCallBackError` client function is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-164">指定された <see cref="T:System.Web.UI.Control" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-164">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c2f5a-165">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-165">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-166">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-166">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="c2f5a-167">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-167">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="c2f5a-168">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-168">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-169">クライアント スクリプトからサーバーに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-169">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="c2f5a-170"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</span><span class="sxs-lookup"><span data-stu-id="c2f5a-170"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="c2f5a-171">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-171">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="c2f5a-172">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-172">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="c2f5a-173">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-173">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="c2f5a-174">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-174"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="c2f5a-175">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-175">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="c2f5a-176">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、およびブール値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-176">The client function for this overloaded method includes a specified control, argument, client script, context, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-177">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-177">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-178"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドのこのオーバーロードには`useAsync` 、パラメーターが必要です。これにより、値をに`true`設定することによって、クライアントコールバックを非同期的に実行できます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-178">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` parameter, which allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="c2f5a-179">このメソッドのオーバーロードバージョンでは、 `useAsync`パラメーターを必要としません。既定では、値はに`false`設定されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-179">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span>  
  
 <span data-ttu-id="c2f5a-180">このメソッドの詳細については、「」のオーバーロード<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドの解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-180">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-181">指定された <see cref="T:System.Web.UI.Control" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-181">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c2f5a-182">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-182">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-183">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-183">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(string target, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.String,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCallbackEventReference (target As String, argument As String, clientCallback As String, context As String, clientErrorCallback As String, useAsync As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::String ^ target, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : string * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (target, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="target"><span data-ttu-id="c2f5a-184">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" /> の名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-184">The name of a server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="c2f5a-185">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-185">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-186">クライアント スクリプトからサーバーに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-186">An argument passed from the client script to the server</span></span> 
 <span data-ttu-id="c2f5a-187"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッド</span><span class="sxs-lookup"><span data-stu-id="c2f5a-187"><see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="c2f5a-188">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-188">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="c2f5a-189">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-189">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="c2f5a-190">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-190">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="c2f5a-191">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-191">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="c2f5a-192">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-192"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="c2f5a-193">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-193">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="c2f5a-194">このオーバーロードされたメソッドに対するクライアント関数には、指定されたターゲット、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-194">The client function for this overloaded method includes a specified target, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-195">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-195">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-196"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドのこのオーバーロードは、 <xref:System.Web.UI.Control>パラメーター `target`の代わりに文字列パラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-196">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method takes a `target` string parameter instead of a <xref:System.Web.UI.Control> parameter.</span></span> <span data-ttu-id="c2f5a-197">このオーバーロードは、コールバックが、コントロール<xref:System.Web.UI.Control.UniqueID%2A>のを含む文字列以外に戻るようにする場合に使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-197">Use this overload when you want the callback to go back to something other than a string containing the <xref:System.Web.UI.Control.UniqueID%2A> of the control.</span></span>  
  
 <span data-ttu-id="c2f5a-198">さらに、 <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドのこのオーバーロードには`useAsync` 、および`clientErrorCallback`パラメーターが必要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-198">Additionally, this overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="c2f5a-199">パラメーターを使用すると、値をに`true`設定することによって、クライアントコールバックを非同期的に実行できます。 `useAsync`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-199">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="c2f5a-200">このメソッドのオーバーロードバージョンでは、 `useAsync`パラメーターを必要としません。既定では、値はに`false`設定されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-200">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="c2f5a-201">パラメーターを使用すると、サーバーハンドラー <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> (メソッド) によってエラーが返された場合に呼び出されるクライアント関数の名前を定義できます。 `clientErrorCallback`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-201">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler, the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method, returns an error.</span></span> <span data-ttu-id="c2f5a-202">このメソッドのオーバーロードバージョンで、 `clientErrorCallback`パラメーターを必要としない場合は、値を null に設定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-202">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="c2f5a-203">このメソッドの詳細については、「」のオーバーロード<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドの解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-203">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-204">次のコード例は、整数をインクリメントするクライアントコール<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>バックシナリオで、メソッドの2つのオーバーロードを使用する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-204">The following code example demonstrates how to use two overloads of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method in a client callback scenario that increments integers.</span></span>  
  
 <span data-ttu-id="c2f5a-205">2つのコールバック機構が表示されます。これらの違いは、 `context`パラメーターを使用することです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-205">Two callback mechanisms are shown; the difference between them is the use of the `context` parameter.</span></span> <span data-ttu-id="c2f5a-206">クライアントコールバック関数は、 `context`パラメーターを使用して提供されます。 `ReceiveServerData1`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-206">A `ReceiveServerData1` client callback function is provided using the `context` parameter.</span></span> <span data-ttu-id="c2f5a-207">これに対し`ReceiveServerData2` 、クライアントコールバック関数は、ページ`<script>`のブロックで定義されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-207">In contrast, the `ReceiveServerData2` client callback function is defined in a `<script>` block on the page.</span></span> <span data-ttu-id="c2f5a-208">メソッドは、渡さ<xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A>れた値をインクリメントするサーバーハンドラーであり、メソッドはインクリメントされた値を文字列として返します。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-208">A <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method is the server handler that increments the value that is passed to it and the <xref:System.Web.UI.ICallbackEventHandler.GetCallbackResult%2A> method returns the incremented value as a string.</span></span> <span data-ttu-id="c2f5a-209">メソッドがエラーを返すと、クライアント関数`ProcessCallBackError`が呼び出されます。 <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-209">If the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method returns an error, then the client function `ProcessCallBackError` is called.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/cs/getcallbackeventreference.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager7#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager7/vb/getcallbackeventreference.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <altmember cref="P:System.Web.UI.Control.UniqueID" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-210">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-210">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetCallbackEventReference">
      <MemberSignature Language="C#" Value="public string GetCallbackEventReference (System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetCallbackEventReference(class System.Web.UI.Control control, string argument, string clientCallback, string context, string clientErrorCallback, bool useAsync) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetCallbackEventReference(System.Web.UI.Control,System.String,System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetCallbackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, System::String ^ clientCallback, System::String ^ context, System::String ^ clientErrorCallback, bool useAsync);" />
      <MemberSignature Language="F#" Value="member this.GetCallbackEventReference : System.Web.UI.Control * string * string * string * string * bool -&gt; string" Usage="clientScriptManager.GetCallbackEventReference (control, argument, clientCallback, context, clientErrorCallback, useAsync)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="clientCallback" Type="System.String" />
        <Parameter Name="context" Type="System.String" />
        <Parameter Name="clientErrorCallback" Type="System.String" />
        <Parameter Name="useAsync" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="c2f5a-211">クライアント コールバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-211">The server <see cref="T:System.Web.UI.Control" /> that handles the client callback.</span></span> <span data-ttu-id="c2f5a-212">このコントロールは <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスを実装し、<see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドを提供している必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-212">The control must implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface and provide a <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-213">クライアント スクリプトからサーバーの <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> メソッドに渡される引数。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-213">An argument passed from the client script to the server <see cref="M:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent(System.String)" /> method.</span></span></param>
        <param name="clientCallback"><span data-ttu-id="c2f5a-214">成功したサーバー イベントの結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-214">The name of the client event handler that receives the result of the successful server event.</span></span></param>
        <param name="context"><span data-ttu-id="c2f5a-215">コールバックを開始する前にクライアント上で評価されるクライアント スクリプト。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-215">The client script that is evaluated on the client prior to initiating the callback.</span></span> <span data-ttu-id="c2f5a-216">このスクリプトの結果は、クライアント イベント ハンドラーに戻されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-216">The result of the script is passed back to the client event handler.</span></span></param>
        <param name="clientErrorCallback"><span data-ttu-id="c2f5a-217">サーバー イベント ハンドラーでエラーが発生した際の結果を受け取るクライアント イベント ハンドラーの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-217">The name of the client event handler that receives the result when an error occurs in the server event handler.</span></span></param>
        <param name="useAsync"><span data-ttu-id="c2f5a-218">非同期コールバックを実行する場合は <see langword="true" />。同期コールバックを実行する場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-218"><see langword="true" /> to perform the callback asynchronously; <see langword="false" /> to perform the callback synchronously.</span></span></param>
        <summary><span data-ttu-id="c2f5a-219">クライアント関数への参照を取得します。この関数が呼び出されると、サーバー イベントに対するクライアント コール バックが開始されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-219">Obtains a reference to a client function that, when invoked, initiates a client call back to server events.</span></span> <span data-ttu-id="c2f5a-220">このオーバーロードされたメソッドに対するクライアント関数には、指定されたコントロール、引数、クライアント スクリプト、コンテキスト、エラー ハンドラー、およびブール値が含まれます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-220">The client function for this overloaded method includes a specified control, argument, client script, context, error handler, and Boolean value.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-221">クライアント コールバックを呼び出すクライアント関数の名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-221">The name of a client function that invokes the client callback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-222"><xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドのこのオーバーロードには`useAsync` 、および`clientErrorCallback`パラメーターが必要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-222">This overload of the <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method requires a `useAsync` and a `clientErrorCallback` parameter.</span></span> <span data-ttu-id="c2f5a-223">パラメーターを使用すると、値をに`true`設定することによって、クライアントコールバックを非同期的に実行できます。 `useAsync`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-223">The `useAsync` parameter allows you to perform the client callback asynchronously by setting the value to `true`.</span></span> <span data-ttu-id="c2f5a-224">このメソッドのオーバーロードバージョンでは、 `useAsync`パラメーターを必要としません。既定では、値はに`false`設定されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-224">The overload versions of this method that do not require the `useAsync` parameter set the value to `false` by default.</span></span> <span data-ttu-id="c2f5a-225">パラメーターを使用すると、サーバーハンドラー <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> (メソッド) がエラーを返す場合に呼び出されるクライアント関数の名前を定義できます。 `clientErrorCallback`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-225">The `clientErrorCallback` parameter allows you to define the name of the client function that is called if the server handler (the <xref:System.Web.UI.ICallbackEventHandler.RaiseCallbackEvent%2A> method) returns an error.</span></span> <span data-ttu-id="c2f5a-226">このメソッドのオーバーロードバージョンで、 `clientErrorCallback`パラメーターを必要としない場合は、値を null に設定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-226">The overload versions of this method that do not require the `clientErrorCallback` parameter set the value to null.</span></span>  
  
 <span data-ttu-id="c2f5a-227">このメソッドの詳細については、「」のオーバーロード<xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A>メソッドの解説を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-227">For more information on this method, see the remarks for the overload <xref:System.Web.UI.ClientScriptManager.GetCallbackEventReference%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-228">指定された <see cref="T:System.Web.UI.Control" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-228">The <see cref="T:System.Web.UI.Control" /> specified is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c2f5a-229">指定された <see cref="T:System.Web.UI.Control" /> に <see cref="T:System.Web.UI.ICallbackEventHandler" /> インターフェイスが実装されていません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-229">The <see cref="T:System.Web.UI.Control" /> specified does not implement the <see cref="T:System.Web.UI.ICallbackEventHandler" /> interface.</span></span></exception>
        <altmember cref="T:System.Web.UI.ICallbackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-230">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-230">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackClientHyperlink">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-231"><see langword="javascript:" /> を参照の先頭に付加した上で参照を取得します。この参照をクライアント イベントで使用して、サーバーにポストバックできます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-231">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="c2f5a-232">ポストバックを処理するサーバー コントロール。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-232">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-233">サーバー コントロールに渡されたパラメーター。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-233">The parameter passed to the server control.</span></span></param>
        <summary><span data-ttu-id="c2f5a-234"><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数を使用してサーバーにポストバックできます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-234">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control and with the specified event arguments.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-235">対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-235">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-236">メソッドを使用するには、 <xref:System.Web.UI.IPostBackEventHandler>インターフェイスを実装するためにポストバックを処理するコントロールが必要です。 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-236">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="c2f5a-237">のインターフェイス<xref:System.Web.UI.IPostBackEventHandler>を実装するには、ディレクティブを使用します。<xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="c2f5a-237">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-238">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-238">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink%2A> method.</span></span> <span data-ttu-id="c2f5a-239">カスタムコントロール`MyControl`は、 <xref:System.Web.UI.IPostBackEventHandler>インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-239">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="c2f5a-240">ページの HTML アンカー要素がクリックされると、 <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>カスタムコントロールのメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-240">When the HTML anchor element on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="c2f5a-241">次のコード例は、前の例と同じ機能を持っていますが、カスタムコントロールで<xref:System.Web.UI.Page>はなく、 <xref:System.Web.UI.IPostBackEventHandler>クラスがインターフェイスを実装している点が異なります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-241">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetPostBackClientHyperlink">
      <MemberSignature Language="C#" Value="public string GetPostBackClientHyperlink (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackClientHyperlink(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackClientHyperlink(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackClientHyperlink : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackClientHyperlink (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="c2f5a-242">ポストバックを処理するサーバー コントロール。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-242">The server control to process the postback.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-243">サーバー コントロールに渡されたパラメーター。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-243">The parameter passed to the server control.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="c2f5a-244">検証用にポストバック イベントを登録する場合は <see langword="true" />。検証用にポストバック イベントを登録しない場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-244"><see langword="true" /> to register the postback event for validation; <see langword="false" /> to not register the post back event for validation.</span></span></param>
        <summary><span data-ttu-id="c2f5a-245"><see langword="javascript:" /> を参照の先頭に追加した上で参照を取得します。この参照をクライアント イベントで使用して、指定したコントロールを、指定したイベント引数と、イベント検証用にポストバックを登録するかどうかを示すブール値を使用してサーバーにポストバックできます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-245">Gets a reference, with <see langword="javascript:" /> appended to the beginning of it, that can be used in a client event to post back to the server for the specified control with the specified event arguments and Boolean indication whether to register the post back for event validation.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-246">対象のコントロールの ID とイベント引数を保持しているポストバック関数に対する JavaScript 呼び出しを表す文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-246">A string representing a JavaScript call to the postback function that includes the target control's ID and event arguments.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-247">メソッドを使用するには、 <xref:System.Web.UI.IPostBackEventHandler>インターフェイスを実装するためにポストバックを処理するコントロールが必要です。 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-247">Using the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method requires the control that handles the postback to implement the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="c2f5a-248">のインターフェイス<xref:System.Web.UI.IPostBackEventHandler>を実装するには、ディレクティブを使用します。<xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="c2f5a-248">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.GetPostBackEventReference" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetPostBackClientHyperlink(System.Web.UI.Control,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPostBackEventReference">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-249">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-249">Returns a string that can be used in a client event to cause postback to the server.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions -&gt; string" Usage="clientScriptManager.GetPostBackEventReference options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="c2f5a-250">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-250">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <summary><span data-ttu-id="c2f5a-251">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-251">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="c2f5a-252">この参照文字列は、指定された <see cref="T:System.Web.UI.PostBackOptions" /> インスタンスによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-252">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> instance.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-253">クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-253">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-254">のインターフェイス<xref:System.Web.UI.IPostBackEventHandler>を実装するには、ディレクティブを使用します。<xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="c2f5a-254">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="c2f5a-255">メソッドは、 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティ<xref:System.Web.UI.WebControls.Button> が`false`の場合に、コントロールで使用できます。 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-255">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="c2f5a-256">このシナリオでは、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドは<xref:System.Web.UI.WebControls.Button>コントロールのクライアントポストバックイベントを返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-256">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-257"><see cref="T:System.Web.UI.PostBackOptions" /> パラメーターが <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-257">The <see cref="T:System.Web.UI.PostBackOptions" /> parameter is <see langword="null" /></span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-258">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-258">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="c2f5a-259">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-259">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-260">ポストバックを処理するコントロールに渡されるオプション引数の文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-260">A string of optional arguments to pass to the control that processes the postback.</span></span></param>
        <summary><span data-ttu-id="c2f5a-261">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-261">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="c2f5a-262">この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-262">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-263">クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-263">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-264">のインターフェイス<xref:System.Web.UI.IPostBackEventHandler>を実装するには、ディレクティブを使用します。<xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="c2f5a-264">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>,  use the  directive.</span></span>  
  
 <span data-ttu-id="c2f5a-265">メソッドは、 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティ<xref:System.Web.UI.WebControls.Button> が`false`の場合に、コントロールで使用できます。 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-265">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="c2f5a-266">このシナリオでは、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドは<xref:System.Web.UI.WebControls.Button>コントロールのクライアントポストバックイベントを返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-266">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-267">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-267">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method.</span></span> <span data-ttu-id="c2f5a-268">カスタムコントロール`MyControl`は、 <xref:System.Web.UI.IPostBackEventHandler>インターフェイスを実装します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-268">The custom control, `MyControl`, implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span> <span data-ttu-id="c2f5a-269">ページのボタンをクリックすると、 <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A>カスタムコントロールのメソッドが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-269">When the button on the page is clicked, the <xref:System.Web.UI.IPostBackEventHandler.RaisePostBackEvent%2A> method of the custom control is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreferencecs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreferencevb.aspx#1)]  
  
 <span data-ttu-id="c2f5a-270">次のコード例は、前の例と同じ機能を持っていますが、カスタムコントロールで<xref:System.Web.UI.Page>はなく、 <xref:System.Web.UI.IPostBackEventHandler>クラスがインターフェイスを実装している点が異なります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-270">The following code example has the same functionality as the preceding one, except that instead of a custom control, the <xref:System.Web.UI.Page> class implements the <xref:System.Web.UI.IPostBackEventHandler> interface.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/cs/getpostbackeventreference2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager8#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager8/vb/getpostbackeventreference2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-271">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-271">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-272">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-272">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.PostBackOptions options, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.PostBackOptions options, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.PostBackOptions,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPostBackEventReference (options As PostBackOptions, registerForEventValidation As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::PostBackOptions ^ options, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.PostBackOptions * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (options, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="c2f5a-273">ポストバックを定義する <see cref="T:System.Web.UI.PostBackOptions" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-273">A <see cref="T:System.Web.UI.PostBackOptions" /> that defines the postback.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="c2f5a-274">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-274"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c2f5a-275">クライアント イベントで使用できる、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-275">Returns a string that can be used in a client event to cause postback to the server.</span></span> <span data-ttu-id="c2f5a-276">この参照文字列は、指定した <see cref="T:System.Web.UI.PostBackOptions" /> オブジェクトによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-276">The reference string is defined by the specified <see cref="T:System.Web.UI.PostBackOptions" /> object.</span></span> <span data-ttu-id="c2f5a-277">オプションで、検証用にこのイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-277">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-278">クライアントでスクリプトとして扱われた場合に、クライアント ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-278">A string that, when treated as script on the client, initiates the client postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-279">オブジェクトのインターフェイス<xref:System.Web.UI.IPostBackEventHandler>を実装するには、ディレクティブを使用します。 <xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="c2f5a-279">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page> object, use the  directive.</span></span>  
  
 <span data-ttu-id="c2f5a-280">メソッドは、 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティ<xref:System.Web.UI.WebControls.Button> が`false`の場合に、コントロールで使用できます。 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-280">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="c2f5a-281">このシナリオでは、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドは<xref:System.Web.UI.WebControls.Button>コントロールのクライアントポストバックイベントを返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-281">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="c2f5a-282">が`registerForEventValidation` の`true`場合<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> 、メソッドはメソッドを呼び出して、イベントを生成しているクライアントコントロールを表す一意のコントロールIDを持つ検証用にイベント参照を登録します。<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29></span><span class="sxs-lookup"><span data-stu-id="c2f5a-282">If `registerForEventValidation` is `true`, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-283"><see cref="T:System.Web.UI.PostBackOptions" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-283">The <see cref="T:System.Web.UI.PostBackOptions" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <altmember cref="T:System.Web.UI.WebControls.Button" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-284">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-284">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetPostBackEventReference">
      <MemberSignature Language="C#" Value="public string GetPostBackEventReference (System.Web.UI.Control control, string argument, bool registerForEventValidation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetPostBackEventReference(class System.Web.UI.Control control, string argument, bool registerForEventValidation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetPostBackEventReference(System.Web.UI.Control,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetPostBackEventReference(System::Web::UI::Control ^ control, System::String ^ argument, bool registerForEventValidation);" />
      <MemberSignature Language="F#" Value="member this.GetPostBackEventReference : System.Web.UI.Control * string * bool -&gt; string" Usage="clientScriptManager.GetPostBackEventReference (control, argument, registerForEventValidation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="argument" Type="System.String" />
        <Parameter Name="registerForEventValidation" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="control"><span data-ttu-id="c2f5a-285">サーバー上でポストバックを処理するサーバー <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-285">The server <see cref="T:System.Web.UI.Control" /> that processes the postback on the server.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-286"><paramref name="control" /> に渡すオプション引数の文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-286">A string of optional arguments to pass to <paramref name="control" />.</span></span></param>
        <param name="registerForEventValidation"><span data-ttu-id="c2f5a-287">検証用にイベント参照を登録する場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-287"><see langword="true" /> to register the event reference for validation; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="c2f5a-288">クライアント イベントで使用する、サーバーにポストバックするための文字列を返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-288">Returns a string to use in a client event to cause postback to the server.</span></span> <span data-ttu-id="c2f5a-289">この参照文字列は、ポストバックと追加のイベント情報の文字列引数を処理する、指定したコントロールによって定義されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-289">The reference string is defined by the specified control that handles the postback and a string argument of additional event information.</span></span> <span data-ttu-id="c2f5a-290">オプションで、検証用にこのイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-290">Optionally, registers the event reference for validation.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-291">クライアントでスクリプトとして扱われた場合に、ポストバックを初期化する文字列。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-291">A string that, when treated as script on the client, initiates the postback.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-292">のインターフェイス<xref:System.Web.UI.IPostBackEventHandler>を実装するには、ディレクティブを使用します。<xref:System.Web.UI.Page></span><span class="sxs-lookup"><span data-stu-id="c2f5a-292">To implement the <xref:System.Web.UI.IPostBackEventHandler> interface for a <xref:System.Web.UI.Page>, use the  directive.</span></span>  
  
 <span data-ttu-id="c2f5a-293">メソッドは、 <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A>プロパティ<xref:System.Web.UI.WebControls.Button> が`false`の場合に、コントロールで使用できます。 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-293">The <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method can be used with the <xref:System.Web.UI.WebControls.Button> control when the <xref:System.Web.UI.WebControls.Button.UseSubmitBehavior%2A> property is `false`.</span></span> <span data-ttu-id="c2f5a-294">このシナリオでは、 <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A>メソッドは<xref:System.Web.UI.WebControls.Button>コントロールのクライアントポストバックイベントを返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-294">In this scenario, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%2A> method returns the client postback event for the <xref:System.Web.UI.WebControls.Button> control.</span></span>  
  
 <span data-ttu-id="c2f5a-295">が`registerForEventValidation` true の場合<xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> 、メソッドは<xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29>メソッドを呼び出して、イベントを生成しているクライアントコントロールを表す一意のコントロール ID を使用して、検証用のイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-295">If `registerForEventValidation` is true, the <xref:System.Web.UI.ClientScriptManager.GetPostBackEventReference%28System.Web.UI.PostBackOptions%2CSystem.Boolean%29> method calls the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%28System.String%2CSystem.String%29> method to register the event reference for validation with a unique control ID that represents the client control that is generating the event.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-296">指定された <see cref="T:System.Web.UI.Control" /> は <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-296">The specified <see cref="T:System.Web.UI.Control" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.PostBackOptions" />
        <altmember cref="T:System.Web.UI.IPostBackEventHandler" />
        <related type="Article" href="https://msdn.microsoft.com/library/dfaaa7d4-e1f2-4322-b2f5-796e0419f185"><span data-ttu-id="c2f5a-297">ASP.NET ページでポストバックを使用しないクライアントコールバック</span><span class="sxs-lookup"><span data-stu-id="c2f5a-297">Client Callbacks Without Postbacks in ASP.NET Pages</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GetWebResourceUrl">
      <MemberSignature Language="C#" Value="public string GetWebResourceUrl (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string GetWebResourceUrl(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ GetWebResourceUrl(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.GetWebResourceUrl : Type * string -&gt; string" Usage="clientScriptManager.GetWebResourceUrl (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-298">リソースの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-298">The type of the resource.</span></span></param>
        <param name="resourceName"><span data-ttu-id="c2f5a-299">アセンブリ内のリソースの完全修飾名。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-299">The fully qualified name of the resource in the assembly.</span></span></param>
        <summary><span data-ttu-id="c2f5a-300">アセンブリ内のリソースへの URL 参照を取得します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-300">Gets a URL reference to a resource in an assembly.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-301">リソースへの URL 参照。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-301">The URL reference to the resource.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-302">メソッド<xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>は、アセンブリに埋め込まれているリソースへの URL 参照を返します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-302">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method returns a URL reference to a resource embedded in an assembly.</span></span> <span data-ttu-id="c2f5a-303">返された参照は URL エンコードされていません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-303">The returned reference is not URL encoded.</span></span> <span data-ttu-id="c2f5a-304">リソースには、スクリプトファイル、イメージ、または任意の静的ファイルを指定できます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-304">Resources can be script files, images, or any static file.</span></span> <span data-ttu-id="c2f5a-305">リソースにアクセスするオブジェクトに基づいて、型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-305">You specify the type based on the object that will be accessing the resource.</span></span>  
  
 <span data-ttu-id="c2f5a-306">ページに登録されている Web リソースは、その型と名前によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-306">A Web resource registered with the page is uniquely identified by its type and name.</span></span> <span data-ttu-id="c2f5a-307">このページに登録できるのは、特定の種類と名前のペアを持つリソースを1つだけです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-307">Only one resource with a given type and name pair can be registered with the page.</span></span> <span data-ttu-id="c2f5a-308">既に登録されているリソースを登録しようとしても、登録済みリソースの複製は作成されません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-308">Attempting to register a resource that is already registered does not create a duplicate of the registered resource.</span></span>  
  
 <span data-ttu-id="c2f5a-309">メソッドは、アセンブリに埋め込まれ<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>ているリソースにアクセスするためのメソッドと共に使用されます。 <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-309">The <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method is used in conjunction with the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method for accessing resources embedded in assemblies.</span></span> <span data-ttu-id="c2f5a-310">アプリケーションでのリソースの使用の詳細については、「 [ASP.NET Web Page resources の概要](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd)」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-310">For more information on using resources in applications, see [ASP.NET Web Page Resources Overview](https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-311">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-311">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.GetWebResourceUrl%2A> method.</span></span> <span data-ttu-id="c2f5a-312">この例の*型*パラメーターは、リソースを格納しているアセンブリ内のクラスの型に設定されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-312">The *type* parameter in this example is set to the type of class in the assembly containing the resource.</span></span> <span data-ttu-id="c2f5a-313">`resourceName`パラメーターには、既定の名前空間を含む、リソースへの完全修飾パスを指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-313">The `resourceName` parameter is specified with the fully qualified path to the resource, which includes the default namespace.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="c2f5a-314">次のコード例は、プログラムで<xref:System.Web.UI.WebResourceAttribute>メタデータ属性を適用して、提供されるリソースのアセンブリをマークする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-314">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span> <span data-ttu-id="c2f5a-315">使用している言語に応じて、既定の名前空間を`Samples.AspNet.CS.Controls`また`Samples.AspNet.VB.Controls`はに設定して、クラスライブラリで次のクラスをコンパイルします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-315">Compile the following class in a class library with a default namespace set to `Samples.AspNet.CS.Controls` or `Samples.AspNet.VB.Controls`, depending on what language you are using.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="c2f5a-316">この例では、という`Script_include.js`名前の JavaScript ファイルが必要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-316">This example requires a JavaScript file named `Script_include.js`.</span></span> <span data-ttu-id="c2f5a-317">.Js ファイルは、 `ClientScriptResourceLabel`オブジェクトを含むアセンブリ内の埋め込みリソースです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-317">The .js file is an embedded resource in the assembly that contains the `ClientScriptResourceLabel` object.</span></span> <span data-ttu-id="c2f5a-318">Visual Studio を使用している場合は、クラスライブラリプロジェクトのプロパティウィンドウで、スクリプトファイルを選択したときに **[ビルドアクション]** を **[埋め込みリソース]** に設定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-318">If you are using Visual Studio, in the Properties window of the class library project, set **Build Action** to **Embedded Resource** when the script file is selected.</span></span> <span data-ttu-id="c2f5a-319">コマンドラインでライブラリをコンパイルする場合は、 [/resource](~/docs/csharp/language-reference/compiler-options/resource-compiler-option.md)スイッチを使用してリソースを埋め込みます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-319">If you are compiling the library at the command line, use the [/resource](~/docs/csharp/language-reference/compiler-options/resource-compiler-option.md) switch to embed the resource.</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-320">Web リソース型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-320">The web resource type is <see langword="null" />.</span></span>

<span data-ttu-id="c2f5a-321">- または -</span><span class="sxs-lookup"><span data-stu-id="c2f5a-321">-or-</span></span>

<span data-ttu-id="c2f5a-322">Web リソース名が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-322">The web resource name is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c2f5a-323">- または -</span><span class="sxs-lookup"><span data-stu-id="c2f5a-323">-or-</span></span> 
<span data-ttu-id="c2f5a-324">Web リソース名の長さがゼロです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-324">The web resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <related type="Article" href="https://msdn.microsoft.com/library/0936b3b2-9e6e-4abe-9c06-364efef9dbbd"><span data-ttu-id="c2f5a-325">ASP.NET Web ページのリソースの概要</span><span class="sxs-lookup"><span data-stu-id="c2f5a-325">ASP.NET Web Page Resources Overview</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/5212666e-98ab-47e4-a497-b5545ab15c7f"><span data-ttu-id="c2f5a-326">/resource (出力するリソースファイルを埋め込むC# ) (コンパイラオプション)</span><span class="sxs-lookup"><span data-stu-id="c2f5a-326">/resource (Embed Resource File to Output) (C# Compiler Options)</span></span></related>
        <related type="Article" href="https://msdn.microsoft.com/library/eee2f227-91f2-4f2b-a9d6-1c51c5320858"><span data-ttu-id="c2f5a-327">/resource (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="c2f5a-327">/resource (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptBlockRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-328">クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-328">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptBlockRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="c2f5a-329">検索対象のクライアント スクリプト ブロックのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-329">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-330">指定されたキーを使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-330">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-331">クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-331"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-332">重複したスクリプトの登録<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>を避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-332">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="c2f5a-333">これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-333">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-334">クライアントスクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-334">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-335">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-335">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="c2f5a-336"><xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドのこのオーバーロードは、型を<xref:System.Web.UI.Page>オブジェクトとして`key`設定し`type`たパラメーターとパラメーターの両方を受け取るオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-336">This overload of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
   
  
## Examples  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptBlockRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptBlockRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptBlockRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptBlockRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptBlockRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptBlockRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-337">検索対象のクライアント スクリプト ブロックの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-337">The type of the client script block to search for.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-338">検索対象のクライアント スクリプト ブロックのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-338">The key of the client script block to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-339">キーと型を使用して、クライアント スクリプト ブロックが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-339">Determines whether the client script block is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-340">クライアント スクリプト ブロックが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-340"><see langword="true" /> if the client script block is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-341">重複したスクリプトの登録<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>を避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-341">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="c2f5a-342">これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-342">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-343">クライアントスクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-343">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-344">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-344">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-345">リソースにアクセスするオブジェクトに基づいて、型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-345">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="c2f5a-346">たとえば、インスタンスを`Page`使用してリソースにアクセスする場合は、 `Page`型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-346">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-347">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-347">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method.</span></span> <span data-ttu-id="c2f5a-348">既存のクライアントスクリプトブロックをチェックするロジックが削除された場合、メソッドが<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>重複をチェックするため、レンダリングされるページの HTML ソースコードに2つの重複するクライアントスクリプトは存在しません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-348">Note that, if the logic to check for the existing client script block were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method checks for duplicates.</span></span> <span data-ttu-id="c2f5a-349">チェックの利点は、不要な計算を減らすことです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-349">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-350">クライアント スクリプトの型が <see langword="null" />. です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-350">The client script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsClientScriptIncludeRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-351">クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-351">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsClientScriptIncludeRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="c2f5a-352">検索対象のクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-352">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-353">指定されたキーを使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-353">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-354">クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-354"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-355">重複したスクリプトの登録<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>を避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-355">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="c2f5a-356">これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-356">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-357">クライアントスクリプトインクルードは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-357">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-358">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-358">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="c2f5a-359"><xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドのこのオーバーロードは、型を<xref:System.Web.UI.Page>オブジェクトとして`key`設定し`type`たパラメーターとパラメーターの両方を受け取るオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-359">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <Member MemberName="IsClientScriptIncludeRegistered">
      <MemberSignature Language="C#" Value="public bool IsClientScriptIncludeRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsClientScriptIncludeRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsClientScriptIncludeRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsClientScriptIncludeRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsClientScriptIncludeRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-360">検索対象のクライアント スクリプト インクルードの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-360">The type of the client script include to search for.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-361">検索対象のクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-361">The key of the client script include to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-362">キーと型を使用して、クライアント スクリプト インクルードが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-362">Determines whether the client script include is registered with the <see cref="T:System.Web.UI.Page" /> object using a key and type.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-363">クライアント スクリプト インクルードが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-363"><see langword="true" /> if the client script include is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-364">重複するクライアントスクリプトインクルードの<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>登録を避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-364">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method to avoid registering duplicate client script includes.</span></span> <span data-ttu-id="c2f5a-365">これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-365">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-366">クライアントスクリプトインクルードは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-366">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-367">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-367">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-368">リソースにアクセスするオブジェクトに基づいて、型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-368">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="c2f5a-369">たとえば、ページインスタンスを使用してリソースにアクセスする場合は、 `Page`型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-369">For instance, when using a Page instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-370">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-370">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method.</span></span> <span data-ttu-id="c2f5a-371">既存のクライアントスクリプトインクルードをチェックするロジックが削除された場合、メソッドが<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>重複をチェックするため、レンダリングされるページの HTML ソースコードに2つの重複するクライアントスクリプトは存在しないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-371">Note that, if the logic to check for the existing client script include were removed, there would not be two duplicate client scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="c2f5a-372">チェックの利点は、不要な計算を減らすことです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-372">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="c2f5a-373">この例では、という`Script_include.js`名前の JavaScript ファイルが必要です。内容は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-373">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-374">クライアント スクリプト インクルードの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-374">The client script include type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsOnSubmitStatementRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-375">OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-375">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsOnSubmitStatementRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="c2f5a-376">検索対象の OnSubmit ステートメントのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-376">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-377">指定されたキーを使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-377">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-378">OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-378"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-379">重複する OnSubmit ステートメントの登録<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>を避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-379">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate OnSubmit statements.</span></span> <span data-ttu-id="c2f5a-380">これは、ステートメントで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-380">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-381">ステートメントは、そのキーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-381">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-382">同じキーと型のステートメントは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-382">Statements with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="c2f5a-383"><xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドのこのオーバーロードは、型を<xref:System.Web.UI.Page>オブジェクトとして`key`設定し`type`たパラメーターとパラメーターの両方を受け取るオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-383">This overload of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method calls the overload that takes both a `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IsOnSubmitStatementRegistered">
      <MemberSignature Language="C#" Value="public bool IsOnSubmitStatementRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsOnSubmitStatementRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsOnSubmitStatementRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsOnSubmitStatementRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsOnSubmitStatementRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-384">検索対象の OnSubmit ステートメントの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-384">The type of the OnSubmit statement to search for.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-385">検索対象の OnSubmit ステートメントのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-385">The key of the OnSubmit statement to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-386">指定されたキーと型を使用して OnSubmit ステートメントが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-386">Determines whether the OnSubmit statement is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-387">OnSubmit ステートメントが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-387"><see langword="true" /> if the OnSubmit statement is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-388">重複するステートメントの登録を<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-388">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method to avoid registering duplicate statements.</span></span> <span data-ttu-id="c2f5a-389">これは、ステートメントで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-389">This is particularly important if the statement requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-390">ステートメントは、そのキーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-390">A statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-391">同じキーと型のステートメントは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-391">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-392">リソースにアクセスするオブジェクトに基づいて、型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-392">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="c2f5a-393">たとえば、インスタンスを`Page`使用してリソースにアクセスする場合は、 `Page`型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-393">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-394">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-394">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method.</span></span> <span data-ttu-id="c2f5a-395">という名前`OnSubmitScript`のスクリプトがに<xref:System.Web.UI.Page>登録されているため、ページのフォームが送信されるとスクリプトが呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-395">A script named `OnSubmitScript` is registered with the <xref:System.Web.UI.Page> so that when the page's form is submitted the script is invoked.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-396">OnSubmit ステートメントの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-396">The OnSubmit statement type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered(System.String)" />
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsStartupScriptRegistered">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-397">起動スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-397">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsStartupScriptRegistered (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="c2f5a-398">検索対象のスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-398">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-399">指定されたキーを使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-399">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-400">スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-400"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-401">重複したスクリプトの登録<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>を避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-401">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="c2f5a-402">これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-402">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-403">スタートアップスクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-403">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-404">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-404">Scripts with the same key and type are considered duplicates.</span></span>  
  
 <span data-ttu-id="c2f5a-405"><xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドのこのオーバーロードは、文字列`key`と`type` 、型が<xref:System.Web.UI.Page>オブジェクトとして設定されたパラメーターの両方を受け取るオーバーロードを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-405">This overload of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method calls the overload that takes both a string `key` and a `type` parameter with the type set as a <xref:System.Web.UI.Page> object</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="IsStartupScriptRegistered">
      <MemberSignature Language="C#" Value="public bool IsStartupScriptRegistered (Type type, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsStartupScriptRegistered(class System.Type type, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsStartupScriptRegistered(Type ^ type, System::String ^ key);" />
      <MemberSignature Language="F#" Value="member this.IsStartupScriptRegistered : Type * string -&gt; bool" Usage="clientScriptManager.IsStartupScriptRegistered (type, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-406">検索対象のスタートアップ スクリプトの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-406">The type of the startup script to search for.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-407">検索対象のスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-407">The key of the startup script to search for.</span></span></param>
        <summary><span data-ttu-id="c2f5a-408">指定されたキーと型を使用して、スタートアップ スクリプトが <see cref="T:System.Web.UI.Page" /> オブジェクトに登録されているかどうかを判断します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-408">Determines whether the startup script is registered with the <see cref="T:System.Web.UI.Page" /> object using the specified key and type.</span></span></summary>
        <returns><span data-ttu-id="c2f5a-409">スタートアップ スクリプトが登録されている場合は <see langword="true" />。それ以外の場合は <see langword="false" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-409"><see langword="true" /> if the startup script is registered; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-410">重複したスクリプトの登録<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>を避けるために、メソッドを呼び出す前にこのメソッドを呼び出します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-410">Call this method before calling the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method to avoid registering duplicate scripts.</span></span> <span data-ttu-id="c2f5a-411">これは、スクリプトで大量のサーバーリソースを作成する必要がある場合に特に重要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-411">This is particularly important if the script requires a large amount of server resources to create.</span></span>  
  
 <span data-ttu-id="c2f5a-412">クライアント起動スクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-412">A client startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-413">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-413">Scripts with the same key and type are considered duplicates.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-414">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-414">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method.</span></span> <span data-ttu-id="c2f5a-415">既存のスタートアップスクリプトブロックをチェックするロジックが削除された場合は、メソッドが<xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>重複をチェックするため、レンダリングされるページの HTML ソースコードに2つの重複するスタートアップスクリプトは存在しません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-415">Note that, if the logic to check for the existing startup script block were removed, there would not be two duplicate startup scripts in the HTML source code of the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method checks for duplicates.</span></span> <span data-ttu-id="c2f5a-416">チェックの利点は、不要な計算を減らすことです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-416">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-417">スタートアップ スクリプトの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-417">The startup script type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered(System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterStartupScript" />
      </Docs>
    </Member>
    <Member MemberName="RegisterArrayDeclaration">
      <MemberSignature Language="C#" Value="public void RegisterArrayDeclaration (string arrayName, string arrayValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterArrayDeclaration(string arrayName, string arrayValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterArrayDeclaration (arrayName As String, arrayValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterArrayDeclaration(System::String ^ arrayName, System::String ^ arrayValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterArrayDeclaration : string * string -&gt; unit" Usage="clientScriptManager.RegisterArrayDeclaration (arrayName, arrayValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="arrayName" Type="System.String" />
        <Parameter Name="arrayValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="arrayName"><span data-ttu-id="c2f5a-418">登録する配列名。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-418">The array name to register.</span></span></param>
        <param name="arrayValue"><span data-ttu-id="c2f5a-419">登録する配列値。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-419">The array value or values to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-420">配列名と配列値を使用して、JavaScript 配列宣言を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-420">Registers a JavaScript array declaration with the <see cref="T:System.Web.UI.Page" /> object using an array name and array value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-421">は<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> 、 `arrayName`パラメーターに指定されている名前と同じ名前の登録済み配列が存在するかどうかを確認し、存在する場合は`arrayValue` 、パラメーターに指定された値を追加します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-421">The <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> checks to see whether a registered array exists with the same name as the name specified in the `arrayName` parameter and, if so, adds the values specified in the `arrayValue` parameter.</span></span> <span data-ttu-id="c2f5a-422">基になるストレージメカニズムはに<xref:System.Collections.ArrayList>基づいているため、重複が許可されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-422">Because the underlying storage mechanism is based on an <xref:System.Collections.ArrayList>, duplicates are allowed.</span></span> <span data-ttu-id="c2f5a-423">`arrayName`パラメーターと同じ名前の登録済み配列が存在しない場合は、作成され、 `arrayValue`パラメーターの値が追加されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-423">If a registered array with the same name as the `arrayName` parameter does not exist, it is created and the values in the `arrayValue` parameter added to it.</span></span>  
  
 <span data-ttu-id="c2f5a-424">結果の JavaScript 配列に文字列リテラルが必要な場合は、\\ `arrayValue`パラメーターに単一引用符 (') またはエスケープされた二重引用符 (") を含めます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-424">If you want string literals in the resulting JavaScript array, include single quotation marks (') or escaped double quotation marks (\\") in the `arrayValue` parameter.</span></span> <span data-ttu-id="c2f5a-425">`arrayValue`パラメーターの値は、単一の要素である必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-425">The value of the `arrayValue` parameter should be a single element.</span></span> <span data-ttu-id="c2f5a-426">配列に複数の値を追加する必要がある場合は、 <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>メソッドを使用して複数の呼び出しを行います。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-426">If more than one value needs to be added to the array, make multiple calls using the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-427">次のコード例は、メソッド<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>と<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-427">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="c2f5a-428">この例では、配列と非表示`OnClick` `<input>`の値を登録し、配列の2つの値の合計と非表示の値の合計を計算するボタンのイベントを定義します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-428">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-429"><paramref name="arrayName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-429"><paramref name="arrayName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="Overload:System.String.Split" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptBlock">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-430">クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-430">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-431">登録するクライアント スクリプトの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-431">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-432">登録するクライアント スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-432">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="c2f5a-433">登録するクライアント スクリプト リテラル。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-433">The client script literal to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-434">型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにクライアント スクリプトを登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-434">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, and script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-435">クライアントスクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-435">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-436">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-436">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-437">ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-437">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="c2f5a-438">既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-438">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="c2f5a-439"><xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドを呼び出して、指定したキーと型のペアを持つクライアントスクリプトが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-439">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="c2f5a-440"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドのこのオーバーロードでは、 `script` `<script>`パラメーターに指定されたスクリプトが要素ブロックにラップされていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-440">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you must make sure that the script provided in the `script` parameter is wrapped in a `<script>` element block.</span></span>  
  
 <span data-ttu-id="c2f5a-441">メソッド<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>は、レンダリングされたページの先頭にスクリプトブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-441">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="c2f5a-442">スクリプトブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-442">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="c2f5a-443">スクリプトブロックの順序が重要な場合は、オブジェクトを<xref:System.Text.StringBuilder>使用してスクリプトを1つの文字列でまとめて収集し、そのすべてを1つのクライアントスクリプトブロックに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-443">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-444">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-444">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager12#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager12/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptBlock">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptBlock (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptBlock(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptBlock(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptBlock : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterClientScriptBlock (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-445">登録するクライアント スクリプトの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-445">The type of the client script to register.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-446">登録するクライアント スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-446">The key of the client script to register.</span></span></param>
        <param name="script"><span data-ttu-id="c2f5a-447">登録するクライアント スクリプト リテラル。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-447">The client script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="c2f5a-448">スクリプト タグを追加するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-448">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="c2f5a-449">型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-449">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a type, key, script literal, and Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-450">クライアントスクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-450">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-451">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-451">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-452">ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-452">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="c2f5a-453">既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-453">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="c2f5a-454"><xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A>メソッドを呼び出して、指定したキーと型のペアを持つクライアントスクリプトが既に登録されているかどうかを確認します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-454">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptBlockRegistered%2A> method to determine whether a client script with a given key and type pair is already registered.</span></span> <span data-ttu-id="c2f5a-455">これにより、不必要にスクリプトを追加しようとするのを防ぐことができます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-455">This lets you avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="c2f5a-456"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドのこのオーバーロードでは、パラメーター `script`に指定されたスクリプトが、 `addScriptTags`パラメーターを使用して`<script>`要素ブロックでラップされているかどうかを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-456">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="c2f5a-457">を`addScriptTags`に`true`設定すると、スクリプトタグが自動的に追加されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-457">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="c2f5a-458">メソッド<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>は、レンダリングされたページの先頭にスクリプトブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-458">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method adds a script block to the top of the rendered page.</span></span> <span data-ttu-id="c2f5a-459">スクリプトブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-459">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="c2f5a-460">スクリプトブロックの順序が重要な場合は、オブジェクトを<xref:System.Text.StringBuilder>使用してスクリプトを1つの文字列でまとめて収集し、そのすべてを1つのクライアントスクリプトブロックに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-460">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-461">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-461">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock%2A> method.</span></span> <span data-ttu-id="c2f5a-462">`addScriptTags`パラメーターがに`true`設定されていることに注意してください。これにより、 `script`スクリプトの開始タグと終了タグがパラメーターに含まれなくなります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-462">Note that the `addScriptTags` parameter is set to `true` so the beginning and closing script tags are not included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-463">クライアント スクリプト ブロックの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-463">The client script block type is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptBlock(System.Type,System.String,System.String)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterClientScriptInclude">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-464">クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-464">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterClientScriptInclude (key As String, url As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key"><span data-ttu-id="c2f5a-465">登録するクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-465">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="c2f5a-466">登録するクライアント スクリプト インクルードの URL。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-466">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-467">キーと URL を使用して、クライアント スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。これにより、スクリプトをクライアントから呼び出せるようになります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-467">Registers the client script with the <see cref="T:System.Web.UI.Page" /> object using a key and a URL, which enables the script to be called from the client.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-468">クライアントスクリプトインクルードは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-468">A client script include is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-469">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-469">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-470">ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-470">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="c2f5a-471">既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-471">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="c2f5a-472"><xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A>メソッドを呼び出して、指定したキーと型のペアを持つクライアントスクリプトインクルードが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-472">Call the <xref:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered%2A> method to determine whether a client script include with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c2f5a-473">クライアント URL を解決するには、 <xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-473">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="c2f5a-474">このメソッドは、パスを解決するために呼び出される URL のコンテキストを使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-474">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="c2f5a-475"><xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドのこのオーバーロードは`key` `URL`、、、およびパラメーターを受け取るオーバーロードを呼び出します。`type`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-475">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method calls the overload that takes a `key`, a `URL`, and a `type` parameter.</span></span>  
  
 <span data-ttu-id="c2f5a-476">メソッドは、レンダリングされたページの上部にスクリプトブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-476">The method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-477">構文、使用法、例など、関連情報については<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>、「」を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-477">For related information, including syntax, usage, and an example, see <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptInclude">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptInclude (Type type, string key, string url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptInclude(class System.Type type, string key, string url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptInclude(Type ^ type, System::String ^ key, System::String ^ url);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptInclude : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptInclude (type, key, url)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="url" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-478">登録するクライアント スクリプト インクルードの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-478">The type of the client script include to register.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-479">登録するクライアント スクリプト インクルードのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-479">The key of the client script include to register.</span></span></param>
        <param name="url"><span data-ttu-id="c2f5a-480">登録するクライアント スクリプト インクルードの URL。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-480">The URL of the client script include to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-481">型、キー、および URL を使用して、クライアント スクリプト インクルードを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-481">Registers the client script include with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a URL.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-482">この<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドのオーバーロードは、 `type`スクリプトを識別するための*キー*と*url*パラメーター、およびクライアントスクリプトインクルードの id を指定するパラメーターを受け取ります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-482">This overload of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method takes *key* and *url* parameters to identify the script, as well as a `type` parameter to specify the identification of the client script include.</span></span> <span data-ttu-id="c2f5a-483">リソースにアクセスするオブジェクトに基づいて、型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-483">You specify the type based on the object that will be accessing the resource.</span></span> <span data-ttu-id="c2f5a-484">たとえば、インスタンスを`Page`使用してリソースにアクセスする場合は、 `Page`型を指定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-484">For instance, when using a `Page` instance to access the resource, you specify the `Page` type.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="c2f5a-485">クライアント URL を解決するには、 <xref:System.Web.UI.Control.ResolveClientUrl%2A>メソッドを使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-485">To resolve the client URL, use the <xref:System.Web.UI.Control.ResolveClientUrl%2A> method.</span></span> <span data-ttu-id="c2f5a-486">このメソッドは、パスを解決するために呼び出される URL のコンテキストを使用します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-486">This method uses the context of the URL on which it is called to resolve the path.</span></span>  
  
 <span data-ttu-id="c2f5a-487">このメソッドは、レンダリングされたページの上部にスクリプトブロックを追加します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-487">This method adds a script block at the top of the rendered page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-488">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-488">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method.</span></span> <span data-ttu-id="c2f5a-489">既存のクライアントスクリプトインクルードをチェックするロジックが削除された場合でも、メソッドが<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A>重複をチェックするため、レンダリングされたページに重複するクライアントスクリプトは存在しないことに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-489">Note that if the logic to check for the existing client script include were removed, there would still not be duplicate client scripts in the rendered page because the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude%2A> method checks for duplicates.</span></span> <span data-ttu-id="c2f5a-490">チェックの利点は、不要な計算を減らすことです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-490">The benefit of checking is to reduce unnecessary computation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/cs/clientscriptincludes.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager2#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager2/vb/clientscriptincludes.aspx#1)]  
  
 <span data-ttu-id="c2f5a-491">この例では、次の内容を含む、Script_include という名前の JavaScript ファイルが必要です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-491">This example requires a JavaScript file named Script_include.js with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from include script.'}  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-492">クライアント スクリプト インクルードの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-492">The client script include type is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c2f5a-493">URL が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-493">The URL is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c2f5a-494">- または -</span><span class="sxs-lookup"><span data-stu-id="c2f5a-494">-or-</span></span> 
<span data-ttu-id="c2f5a-495">URL が空です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-495">The URL is empty.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude(System.String,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsClientScriptIncludeRegistered" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClientScriptResource">
      <MemberSignature Language="C#" Value="public void RegisterClientScriptResource (Type type, string resourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClientScriptResource(class System.Type type, string resourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterClientScriptResource(System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterClientScriptResource(Type ^ type, System::String ^ resourceName);" />
      <MemberSignature Language="F#" Value="member this.RegisterClientScriptResource : Type * string -&gt; unit" Usage="clientScriptManager.RegisterClientScriptResource (type, resourceName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="resourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-496">登録するクライアント スクリプト リソースの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-496">The type of the client script resource to register.</span></span></param>
        <param name="resourceName"><span data-ttu-id="c2f5a-497">登録するクライアント スクリプト リソースの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-497">The name of the client script resource to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-498">型とリソース名を使用して、クライアント スクリプト リソースを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-498">Registers the client script resource with the <see cref="T:System.Web.UI.Page" /> object using a type and a resource name.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-499">メソッド<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>は、webresource.axd HTTP ハンドラーを介してアセンブリからコンパイル済みリソースにアクセスするときに使用されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-499">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method is used when accessing compiled-in resources from assemblies through the WebResource.axd HTTP handler.</span></span> <span data-ttu-id="c2f5a-500">メソッド<xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>は、スクリプトを<xref:System.Web.UI.Page>オブジェクトに登録し、スクリプトが重複しないようにします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-500">The <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method registers the script with the <xref:System.Web.UI.Page> object and prevents duplicate scripts.</span></span> <span data-ttu-id="c2f5a-501">このメソッドは`<script>` 、要素ブロックを使用してリソース URL の内容をラップします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-501">This method wraps the contents of the resource URL with a `<script>` element block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-502">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-502">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterClientScriptResource%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/clientscriptwebresource.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager4#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/clientscriptwebresource.aspx#1)]  
  
 <span data-ttu-id="c2f5a-503">次のコード例は、プログラムで<xref:System.Web.UI.WebResourceAttribute>メタデータ属性を適用して、提供されるリソースのアセンブリをマークする方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-503">The following code example demonstrates how to programmatically apply the <xref:System.Web.UI.WebResourceAttribute> metadata attribute to mark the assembly for the resources that will be served.</span></span>  
  
 [!code-csharp[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/cs/resource.cs#2)]
 [!code-vb[System.Web.UI.ClientScriptManager4#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager4/vb/resource.vb#2)]  
  
 <span data-ttu-id="c2f5a-504">この例では、という`Script_include.js`名前の JavaScript ファイルが必要です。内容は次のとおりです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-504">This example requires a JavaScript file named `Script_include.js`, with the following contents:</span></span>  
  
```  
function DoClick() {Form1.Message.value='Text from resource script.'}  
```  
  
 <span data-ttu-id="c2f5a-505">クラスを`Script_include.js`含む`Samples.AspNet.CS.Controls`アセンブリ内のリソースとしてファイルをコンパイルします。 `ClientScriptResourceLabel`</span><span class="sxs-lookup"><span data-stu-id="c2f5a-505">Compile the `Script_include.js` file as a resource in the `Samples.AspNet.CS.Controls` assembly that contains the `ClientScriptResourceLabel` class.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-506">クライアント リソースの型が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-506">The client resource type is <see langword="null" />.</span></span>

<span data-ttu-id="c2f5a-507">- または -</span><span class="sxs-lookup"><span data-stu-id="c2f5a-507">-or-</span></span>

<span data-ttu-id="c2f5a-508">クライアント リソースの名前が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-508">The client resource name is <see langword="null" />.</span></span>  
  
<span data-ttu-id="c2f5a-509">- または -</span><span class="sxs-lookup"><span data-stu-id="c2f5a-509">-or-</span></span> 
<span data-ttu-id="c2f5a-510">クライアント リソースの名前の長さがゼロです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-510">The client resource name has a length of zero.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.GetWebResourceUrl(System.Type,System.String)" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.RegisterClientScriptInclude" />
        <altmember cref="T:System.Web.Handlers.AssemblyResourceLoader" />
        <altmember cref="T:System.Web.UI.WebResourceAttribute" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterExpandoAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-511">指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-511">Registers a name/value pair as a custom (expando) attribute of the specified control.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="c2f5a-512">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-512">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="c2f5a-513">登録するカスタム属性の名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-513">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="c2f5a-514">カスタム属性の値。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-514">The value of the custom attribute.</span></span></param>
        <summary><span data-ttu-id="c2f5a-515">コントロール ID、属性名、および属性値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-515">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, attribute name, and attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-516">メソッド<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>は、指定さ<xref:System.Web.UI.Control>れたに対して、カスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-516">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="c2f5a-517">Expando 属性は、レンダリングされたコントロールのマークアップの XHTML の互換性を維持するために、JavaScript から動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-517">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="c2f5a-518">カスタム (expando) 属性の値の引用符とバックスラッシュはエスケープされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-518">Quotes and backslashes in the custom (expando) attribute's values are escaped.</span></span> <span data-ttu-id="c2f5a-519">引用符とバックスラッシュをエスケープしない場合は、 <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>オーバーロードメソッドを呼び出し、 `encode`パラメーターをに`false`設定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-519">If you do not want to escape quotes and backslashes, call the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> overload method and set the `encode` parameter to `false`.</span></span>  
  
 <span data-ttu-id="c2f5a-520">Expando 属性が見つからない場合、または expando 属性を追加するコントロールが見つからない場合でも、クライアントスクリプトは出力されますが、コントロールには影響しません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-520">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <Member MemberName="RegisterExpandoAttribute">
      <MemberSignature Language="C#" Value="public void RegisterExpandoAttribute (string controlId, string attributeName, string attributeValue, bool encode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterExpandoAttribute(string controlId, string attributeName, string attributeValue, bool encode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterExpandoAttribute (controlId As String, attributeName As String, attributeValue As String, encode As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterExpandoAttribute(System::String ^ controlId, System::String ^ attributeName, System::String ^ attributeValue, bool encode);" />
      <MemberSignature Language="F#" Value="member this.RegisterExpandoAttribute : string * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterExpandoAttribute (controlId, attributeName, attributeValue, encode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controlId" Type="System.String" />
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="attributeValue" Type="System.String" />
        <Parameter Name="encode" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="controlId"><span data-ttu-id="c2f5a-521">カスタム属性を含む、ページ上の <see cref="T:System.Web.UI.Control" />。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-521">The <see cref="T:System.Web.UI.Control" /> on the page that contains the custom attribute.</span></span></param>
        <param name="attributeName"><span data-ttu-id="c2f5a-522">登録するカスタム属性の名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-522">The name of the custom attribute to register.</span></span></param>
        <param name="attributeValue"><span data-ttu-id="c2f5a-523">カスタム属性の値。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-523">The value of the custom attribute.</span></span></param>
        <param name="encode"><span data-ttu-id="c2f5a-524">登録するカスタム属性をエンコードするかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-524">A Boolean value indicating whether to encode the custom attribute to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-525">コントロール ID、属性名、属性値、および属性値をエンコードするかどうかを示すブール値を指定して、指定されたコントロールのカスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-525">Registers a name/value pair as a custom (expando) attribute of the specified control given a control ID, an attribute name, an attribute value, and a Boolean value indicating whether to encode the attribute value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-526">メソッド<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>は、指定さ<xref:System.Web.UI.Control>れたに対して、カスタム (expando) 属性として名前/値ペアを登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-526">The <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method registers a name/value pair as a custom (expando) attribute on the specified <xref:System.Web.UI.Control>.</span></span> <span data-ttu-id="c2f5a-527">Expando 属性は、レンダリングされたコントロールのマークアップの XHTML の互換性を維持するために、JavaScript から動的に設定されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-527">The expando attribute is set dynamically from JavaScript to preserve XHTML compatibility for the rendered control's markup.</span></span> <span data-ttu-id="c2f5a-528">Expando 属性`encode`の値`true`で引用符とバックスラッシュをエスケープする必要がある場合は、パラメーターをに設定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-528">Set the `encode` parameter to `true` if you need to escape quotes and backslashes in your expando attribute's value.</span></span>  
  
 <span data-ttu-id="c2f5a-529">Expando 属性が見つからない場合、または expando 属性を追加するコントロールが見つからない場合でも、クライアントスクリプトは出力されますが、コントロールには影響しません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-529">If the expando attribute is not found or the control to add the expando attribute to is not found, the client script is still emitted, but it will not affect the control.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-530">クラスのメソッド<xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A>を使用する方法を次のコード例に示します。 <xref:System.Web.UI.ClientScriptManager></span><span class="sxs-lookup"><span data-stu-id="c2f5a-530">The following code example demonstrates how to use the <xref:System.Web.UI.ClientScriptManager.RegisterExpandoAttribute%2A> method of the <xref:System.Web.UI.ClientScriptManager> class.</span></span> <span data-ttu-id="c2f5a-531">レンダリングされたページのクライアントスクリプトは`title` 、 `<span>`要素の属性を設定します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-531">The client script in the rendered page sets the `title` attribute of a `<span>` element.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/cs/clientscriptexpando.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager6#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager6/vb/clientscriptexpando.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:Microsoft.JScript.Expando" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterForEventValidation">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-532">検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-532">Registers an event reference for validation.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="c2f5a-533">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-533">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="c2f5a-534">イベントを生成するクライアント コントロールを表す一意のコントロール ID を使用して、検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-534">Registers an event reference for validation with a unique control ID representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-535">詳細と例については、 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-535">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-536">次の例は、 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>とメソッドを使用して、検証用のコールバックを登録する方法と、そのコールバックがページから送信されたことを検証する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-536">The following example shows how to use the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method in order to register a callback for validation, and how to validate that the callback originated from the page.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/eventvalidation2cs.aspx#2)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/eventvalidation2vb.aspx#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (System.Web.UI.PostBackOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(class System.Web.UI.PostBackOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.Web.UI.PostBackOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (options As PostBackOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::Web::UI::PostBackOptions ^ options);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : System.Web.UI.PostBackOptions -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="System.Web.UI.PostBackOptions" />
      </Parameters>
      <Docs>
        <param name="options"><span data-ttu-id="c2f5a-537">ポストバック イベントを開始するためにクライアントの JavaScript を生成する方法を指定する <see cref="T:System.Web.UI.PostBackOptions" />ブジェクト。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-537">A <see cref="T:System.Web.UI.PostBackOptions" /> object that specifies how client JavaScript is generated to initiate a postback event.</span></span></param>
        <summary><span data-ttu-id="c2f5a-538"><see cref="T:System.Web.UI.PostBackOptions" /> を使用して、検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-538">Registers an event reference for validation with <see cref="T:System.Web.UI.PostBackOptions" />.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-539">詳細と例については、 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-539">For more information and examples, see the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.ValidateEvent" />
      </Docs>
    </Member>
    <Member MemberName="RegisterForEventValidation">
      <MemberSignature Language="C#" Value="public void RegisterForEventValidation (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterForEventValidation(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterForEventValidation (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterForEventValidation(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.RegisterForEventValidation : string * string -&gt; unit" Usage="clientScriptManager.RegisterForEventValidation (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="c2f5a-540">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-540">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-541">クライアント イベントで渡されるイベント引数。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-541">Event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="c2f5a-542">イベントを生成するクライアント コントロールを表す一意のコントロール ID とイベント引数を使用して、検証用にイベント参照を登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-542">Registers an event reference for validation with a unique control ID and event arguments representing the client control generating the event.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2f5a-543">次のコード例では、 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>とメソッドを使用して、検証用のコールバックを登録し、ページからのコールバックを検証する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-543">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="c2f5a-544">例に示されている検証を改善するには、id や`argument`ロールなどのユーザー固有の情報を含むように検証パラメーターを変更します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-544">To improve on the validation shown in the example, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 <span data-ttu-id="c2f5a-545">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッドを使用して、検証のためのコールバックを登録する方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-545">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method to register a callback for validation.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager10#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager10/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="c2f5a-546">このメソッドが <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> メソッドの前に呼び出されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-546">The method is called prior to the <see cref="M:System.Web.UI.Page.Render(System.Web.UI.HtmlTextWriter)" /> method.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/18fc94c9-56fc-46c3-9f29-7358f18667df"><span data-ttu-id="c2f5a-547">検証実装を使用したクライアントコールバックの例</span><span class="sxs-lookup"><span data-stu-id="c2f5a-547">Client Callback with Validation Implementation Example</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="RegisterHiddenField">
      <MemberSignature Language="C#" Value="public void RegisterHiddenField (string hiddenFieldName, string hiddenFieldInitialValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterHiddenField(string hiddenFieldName, string hiddenFieldInitialValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterHiddenField(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RegisterHiddenField (hiddenFieldName As String, hiddenFieldInitialValue As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterHiddenField(System::String ^ hiddenFieldName, System::String ^ hiddenFieldInitialValue);" />
      <MemberSignature Language="F#" Value="member this.RegisterHiddenField : string * string -&gt; unit" Usage="clientScriptManager.RegisterHiddenField (hiddenFieldName, hiddenFieldInitialValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hiddenFieldName" Type="System.String" />
        <Parameter Name="hiddenFieldInitialValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="hiddenFieldName"><span data-ttu-id="c2f5a-548">登録する隠しフィールドの名前。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-548">The name of the hidden field to register.</span></span></param>
        <param name="hiddenFieldInitialValue"><span data-ttu-id="c2f5a-549">登録するフィールドの初期値。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-549">The initial value of the field to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-550">隠し値を <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-550">Registers a hidden value with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-551">メソッド<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>は、レンダリングさ`<input>`れた HTML ページに非表示の要素を作成します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-551">The <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> method creates a hidden `<input>` element on the rendered HTML page.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-552">次のコード例は、メソッド<xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A>と<xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-552">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterArrayDeclaration%2A> and <xref:System.Web.UI.ClientScriptManager.RegisterHiddenField%2A> methods.</span></span> <span data-ttu-id="c2f5a-553">この例では、配列と非表示`OnClick` `<input>`の値を登録し、配列の2つの値の合計と非表示の値の合計を計算するボタンのイベントを定義します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-553">The example registers an array and a hidden value and defines the `OnClick` event of an `<input>` button to calculate the sum of two values of the array and the hidden value.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/cs/clientscriptregisterarray.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager5#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager5/vb/clientscriptregisterarray.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-554"><paramref name="hiddenFieldName" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-554"><paramref name="hiddenFieldName" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.WebControls.HiddenField" />
      </Docs>
    </Member>
    <Member MemberName="RegisterOnSubmitStatement">
      <MemberSignature Language="C#" Value="public void RegisterOnSubmitStatement (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterOnSubmitStatement(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterOnSubmitStatement(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterOnSubmitStatement : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterOnSubmitStatement (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-555">登録する OnSubmit ステートメントの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-555">The type of the OnSubmit statement to register.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-556">登録する OnSubmit ステートメントのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-556">The key of the OnSubmit statement to register.</span></span></param>
        <param name="script"><span data-ttu-id="c2f5a-557">登録する OnSubmit ステートメントのスクリプト リテラル。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-557">The script literal of the OnSubmit statement to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-558">型、キー、およびスクリプト リテラルを使用して、OnSubmit ステートメントを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-558">Registers an OnSubmit statement with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span> <span data-ttu-id="c2f5a-559">ステートメントは、<see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> が送信されると、実行されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-559">The statement executes when the <see cref="T:System.Web.UI.HtmlControls.HtmlForm" /> is submitted.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-560">OnSubmit ステートメントは、そのキーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-560">An OnSubmit statement is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-561">同じキーと型のステートメントは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-561">Statements with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-562">ページに登録できるのは、指定された型とキーのペアを持つステートメント1つだけです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-562">Only one statement with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="c2f5a-563">既に登録されているステートメントを登録しようとすると、ステートメントの複製が作成されません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-563">Attempting to register a statement that is already registered will not create a duplicate of the statement.</span></span>  
  
 <span data-ttu-id="c2f5a-564"><xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A>メソッドを呼び出して、OnSubmit ステートメントが特定のキーと型のペアに既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-564">Call the <xref:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered%2A> method to determine whether an OnSubmit statement is already registered with a given key and type pair and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="c2f5a-565">メソッドのパラメーターに`script`は、セミコロン (;) で適切に区切られていれば、複数のスクリプトコマンドを含めることができます。 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A></span><span class="sxs-lookup"><span data-stu-id="c2f5a-565">The `script` parameter of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method can contain multiple script commands as long as they are properly delimited with a semicolon (;).</span></span>  
  
 <span data-ttu-id="c2f5a-566">は<xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> 、ページが送信される前に実行されるスクリプトを追加し、送信をキャンセルする機会を提供します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-566">The <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> adds a script that is executed before the page is submitted and gives you an opportunity to cancel the submission.</span></span>  
  
 <span data-ttu-id="c2f5a-567">HTML フォームと`OnSubmit`属性の詳細については、 [World Wide Web コンソーシアム (W3C) の Web サイト](https://go.microsoft.com/fwlink/?linkid=37125)を参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-567">For more information on HTML forms and the `OnSubmit` attribute, see the [World Wide Web Consortium (W3C) Web site](https://go.microsoft.com/fwlink/?linkid=37125).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-568">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-568">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterOnSubmitStatement%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/cs/clientscriptonsubmit.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager3#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager3/vb/clientscriptonsubmit.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-569"><paramref name="type" /> は <see langword="null" />です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-569"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="T:System.Web.UI.HtmlControls.HtmlForm" />
        <altmember cref="Overload:System.Web.UI.ClientScriptManager.IsOnSubmitStatementRegistered" />
      </Docs>
    </Member>
    <MemberGroup MemberName="RegisterStartupScript">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-570">スタートアップ スクリプトを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-570">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-571">登録するスタートアップ スクリプの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-571">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-572">登録するスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-572">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="c2f5a-573">登録するスタートアップ スクリプ リテラル。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-573">The startup script literal to register.</span></span></param>
        <summary><span data-ttu-id="c2f5a-574">型、キー、およびスクリプト リテラルを使用して、<see cref="T:System.Web.UI.Page" /> オブジェクトにスタートアップ スクリプを登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-574">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, and a script literal.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-575">クライアントスクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-575">A client script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-576">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-576">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-577">ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-577">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="c2f5a-578">既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-578">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="c2f5a-579"><xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドを呼び出して、指定したキーと型のペアを持つスタートアップスクリプトが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-579">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="c2f5a-580"><xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドのこのオーバーロードでは、 `script` `<script>`パラメーターに指定されたスクリプトが要素ブロックでラップされていることを確認する必要があります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-580">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you must make sure that the script provided in the `script` parameter is wrapped with a `<script>` element block.</span></span>  
  
 <span data-ttu-id="c2f5a-581"><xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドによって追加されたスクリプトブロックは、ページの読み込みが完了し<xref:System.Web.UI.Control.OnLoad%2A>た後、ページのイベントが発生する前に実行されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-581">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="c2f5a-582">スクリプトブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-582">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="c2f5a-583">スクリプトブロックの順序が重要な場合は、オブジェクトを<xref:System.Text.StringBuilder>使用してスクリプトを1つの文字列でまとめて収集し、そのすべてを1つのクライアントスクリプトブロックに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-583">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-584">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-584">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="c2f5a-585">パラメーターに`script`は、開始および終了のスクリプトタグが含まれていることに注意してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-585">Note that the beginning and closing script tags are included within the `script` parameter.</span></span> <span data-ttu-id="c2f5a-586">追加のパラメーター設定に基づいてスクリプトタグを追加するには、 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドを参照してください。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-586">To have the script tags added based on an additional parameter setting, see the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/csharp/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/cs/default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager11#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/system.web.ui.clientscriptmanager11/vb/default.aspx#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="RegisterStartupScript">
      <MemberSignature Language="C#" Value="public void RegisterStartupScript (Type type, string key, string script, bool addScriptTags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterStartupScript(class System.Type type, string key, string script, bool addScriptTags) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RegisterStartupScript(Type ^ type, System::String ^ key, System::String ^ script, bool addScriptTags);" />
      <MemberSignature Language="F#" Value="member this.RegisterStartupScript : Type * string * string * bool -&gt; unit" Usage="clientScriptManager.RegisterStartupScript (type, key, script, addScriptTags)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="addScriptTags" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type"><span data-ttu-id="c2f5a-587">登録するスタートアップ スクリプの型。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-587">The type of the startup script to register.</span></span></param>
        <param name="key"><span data-ttu-id="c2f5a-588">登録するスタートアップ スクリプトのキー。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-588">The key of the startup script to register.</span></span></param>
        <param name="script"><span data-ttu-id="c2f5a-589">登録するスタートアップ スクリプ リテラル。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-589">The startup script literal to register.</span></span></param>
        <param name="addScriptTags"><span data-ttu-id="c2f5a-590">スクリプト タグを追加するかどうかを示すブール値。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-590">A Boolean value indicating whether to add script tags.</span></span></param>
        <summary><span data-ttu-id="c2f5a-591">型、キー、スクリプト リテラル、およびスクリプト タグを追加するかどうかを示すブール値を使用して、スタートアップ スクリプを <see cref="T:System.Web.UI.Page" /> オブジェクトに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-591">Registers the startup script with the <see cref="T:System.Web.UI.Page" /> object using a type, a key, a script literal, and a Boolean value indicating whether to add script tags.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="c2f5a-592">スタートアップスクリプトは、キーとその型によって一意に識別されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-592">A startup script is uniquely identified by its key and its type.</span></span> <span data-ttu-id="c2f5a-593">同じキーと種類のスクリプトは重複していると見なされます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-593">Scripts with the same key and type are considered duplicates.</span></span> <span data-ttu-id="c2f5a-594">ページに登録できるのは、指定された型とキーのペアを持つスクリプト1つだけです。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-594">Only one script with a given type and key pair can be registered with the page.</span></span> <span data-ttu-id="c2f5a-595">既に登録されているスクリプトを登録しようとしても、スクリプトの複製は作成されません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-595">Attempting to register a script that is already registered does not create a duplicate of the script.</span></span>  
  
 <span data-ttu-id="c2f5a-596"><xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A>メソッドを呼び出して、指定したキーと型のペアを持つスタートアップスクリプトが既に登録されているかどうかを確認し、不必要にスクリプトを追加しようとしないようにします。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-596">Call the <xref:System.Web.UI.ClientScriptManager.IsStartupScriptRegistered%2A> method to determine whether a startup script with a given key and type pair is already registered and avoid unnecessarily attempting to add the script.</span></span>  
  
 <span data-ttu-id="c2f5a-597"><xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドのこのオーバーロードでは、パラメーター `script`に指定されたスクリプトが、 `addScriptTags`パラメーターを使用して`<script>`要素ブロックでラップされているかどうかを示すことができます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-597">In this overload of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method, you can indicate whether the script provided in the `script` parameter is wrapped with a `<script>` element block by using the `addScriptTags` parameter.</span></span> <span data-ttu-id="c2f5a-598">を`addScriptTags`に`true`設定すると、スクリプトタグが自動的に追加されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-598">Setting `addScriptTags` to `true` indicates that script tags will be added automatically.</span></span>  
  
 <span data-ttu-id="c2f5a-599"><xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドによって追加されたスクリプトブロックは、ページの読み込みが完了し<xref:System.Web.UI.Control.OnLoad%2A>た後、ページのイベントが発生する前に実行されます。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-599">The script block added by the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method executes when the page finishes loading but before the page's <xref:System.Web.UI.Control.OnLoad%2A> event is raised.</span></span> <span data-ttu-id="c2f5a-600">スクリプトブロックは、登録されている順序で出力されるとは限りません。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-600">The script blocks are not guaranteed to be output in the order they are registered.</span></span> <span data-ttu-id="c2f5a-601">スクリプトブロックの順序が重要な場合は、オブジェクトを<xref:System.Text.StringBuilder>使用してスクリプトを1つの文字列でまとめて収集し、そのすべてを1つのクライアントスクリプトブロックに登録します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-601">If the order of the script blocks is important, use a <xref:System.Text.StringBuilder> object to gather the scripts together in a single string, and then register them all in a single client script block.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="c2f5a-602">次のコード例は、 <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A>メソッドの使用方法を示しています。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-602">The following code example demonstrates the use of the <xref:System.Web.UI.ClientScriptManager.RegisterStartupScript%2A> method.</span></span> <span data-ttu-id="c2f5a-603">パラメーターがに`addScriptTags` `false`設定されていることに注意してください。これにより`script` 、スクリプトの開始タグと終了タグがパラメーターに含まれるようになります。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-603">Note that the `addScriptTags` parameter is set to `false` so the beginning and closing script tags are included with the `script` parameter.</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/cs/page_registerstartupscriptcs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager1#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager1/vb/page_registerstartupscriptvb.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="c2f5a-604"><paramref name="type" /> が <see langword="null" /> です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-604"><paramref name="type" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterStartupScript(System.Type,System.String,System.String)" />
        <altmember cref="F:System.Web.UI.HtmlTextWriterTag.Script" />
      </Docs>
    </Member>
    <MemberGroup MemberName="ValidateEvent">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="c2f5a-605">クライアント イベントを検証します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-605">Validates a client event.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string -&gt; unit" Usage="clientScriptManager.ValidateEvent uniqueId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="c2f5a-606">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-606">A unique ID representing the client control generating the event.</span></span></param>
        <summary><span data-ttu-id="c2f5a-607"><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-607">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" /> method.</span></span></summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidateEvent">
      <MemberSignature Language="C#" Value="public void ValidateEvent (string uniqueId, string argument);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ValidateEvent(string uniqueId, string argument) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.ClientScriptManager.ValidateEvent(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ValidateEvent (uniqueId As String, argument As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ValidateEvent(System::String ^ uniqueId, System::String ^ argument);" />
      <MemberSignature Language="F#" Value="member this.ValidateEvent : string * string -&gt; unit" Usage="clientScriptManager.ValidateEvent (uniqueId, argument)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uniqueId" Type="System.String" />
        <Parameter Name="argument" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="uniqueId"><span data-ttu-id="c2f5a-608">イベントを生成するクライアント コントロールを表す一意の ID。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-608">A unique ID representing the client control generating the event.</span></span></param>
        <param name="argument"><span data-ttu-id="c2f5a-609">クライアント イベントで渡されるイベント引数。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-609">The event arguments passed with the client event.</span></span></param>
        <summary><span data-ttu-id="c2f5a-610"><see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> メソッドを使用して、イベント検証用に登録されたクライアント イベントを検証します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-610">Validates a client event that was registered for event validation using the <see cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" /> method.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="c2f5a-611">次のコード例では、 <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A>メソッド<xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A>とメソッドを使用して、検証用のコールバックを登録し、ページからのコールバックを検証する方法を示します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-611">The following code example demonstrates using the <xref:System.Web.UI.ClientScriptManager.RegisterForEventValidation%2A> method and the <xref:System.Web.UI.ClientScriptManager.ValidateEvent%2A> method to register a callback for validation and to validate that the callback originated from the page.</span></span> <span data-ttu-id="c2f5a-612">ここに示されている検証を改善するには、 `argument` id やロールなどのユーザー固有の情報を含むように検証パラメーターを変更します。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-612">To improve on the validation shown here, you could modify the validation `argument` parameter to contain information specific to the user such as an identity or role</span></span>  
  
 [!code-aspx-csharp[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/cs/EventValidationCS.aspx#1)]
 [!code-aspx-vb[System.Web.UI.ClientScriptManager9#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.ClientScriptManager9/vb/EventValidationVB.aspx#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="c2f5a-613"><paramref name="uniqueId" /> は <see langword="null" /> または空の文字列 ("") です。</span><span class="sxs-lookup"><span data-stu-id="c2f5a-613"><paramref name="uniqueId" /> is <see langword="null" /> or an empty string ("").</span></span></exception>
        <altmember cref="M:System.Web.UI.ClientScriptManager.RegisterForEventValidation(System.String,System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>
